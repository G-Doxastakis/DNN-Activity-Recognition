node {
  name: "lstm_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10793741792440414
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10793741792440414
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3393787
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1/random_uniform/max"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform"
  input: "lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform"
  op: "Add"
  input: "lstm_1/random_uniform/mul"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/read"
  op: "Identity"
  input: "lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
        tensor_content: "$\370\307\274\334\2104\275\231t\351\274?\226\020<|o\264;\273\313\271\274)}~\275y*B<?\371\222\275\245\035\225\275(k\020=\246>.\275\211R\025\275\010\\O=\315\034\332\275\277\2238\275&[\327<6s+\275\002q^<\276\005\254\275+a \274\332F\243\275\377\223]\274\232x\243\273wE\222\275\331\251/=\345\304\316;\272\357\335;!_L\275\030R\244<\017\237@\274.\337\224=\370\307W<aO\302\272\305w\024\275J\332\213=\003)\037\274\311\277^\275\007Eu\275\342$S\275Z\034%\275\342\226\333<\023\000^\275\371\234\374;\tN\341<LR\020=\377\177\363\275?\331\354\273\005)^=\371\r\366\274\177\001\035=?\346\345\271\332d\307\273=\017\312\275\211\224\305\274\227\230(=\016<n=\232\276&\275\365C%\274\305Ml<\340\025\221=\204m\235=+\276\226=\362\371.\275\320\312>\275\377P$=\345x\000\275\023\332\203\271\331\277J=\026\212\357\274\200r\221\275\342^[\272B\232=\275\213\207\303\274\205\"\255<\213\034y\275\227H0\275\033@G<\215\370\014\275\016f\227\274}\205\r=\330\300\313<\374\216\234;\324\377\245=\231P\206=\032Wm\275\277q\214\275\010\300\032\275;`\370\274XC\271<\235\215\201=w\315\217;!jx\274\311\302\366<J@\276\273tG\311=\342\271\313\275\022\177B=WP\273\274\314\267\355\274\026{\321<\257z\354<\2644~\274\024x\213:\231L\251\274,I\247<V\025\223=\214\342\020\275\341q\256=aZ\267<\\4\224;\025\316\207\274\352\247\335:\257\005\361\274\343\336\242\273\211\275\277\275e\224\002=\030=\351\273\263\333\213\275\225(\257<k\267\303\275z\362\331\274y\300\373<\n>L\275\273\231m;5\243a;\r\2263;2e\375<O\203\227\275\360\244m\275S?\234<\024\212\207=\376j!\275\343\033\017<+\340\026<\023\354\331\2744\302\253\273Ob?=\256\030\307;l\364o\275\341?\246\2751\204j=\311\221\254\274]JK=P\t\236=\224#\324<\325V\014=\243h|;;\230U\2755y\037\275sw\013=\236\330\325<\206\020\250\275<\031J\275s\030\251=~\371\214\275\221/\227\275{\212Z=a\013\013\275\341\006\000\276\2221u<\266\273\244=\276\243\246\274\235\261\213<D\275V\274\372\333\310<\035\257S;\264a\026=\235\311\227=\376\352q\272\030\310\232\274\250\374\211\274\201S\206<*\272F=b\356\254<\344\035\242\274\026\227E\275\2363#=*\207\013=\324A\276\275}#\217<\242\0245=\tP\253\275U=\253=\225\217\371\274D\362N\275\005`\025=\331\210;<:\014\265\275{[\204\274\267\002\352\274p+;=\200\306K\273\325\350\037\2754\311\226<\223\357b=\243d\247<\231\346l\275\2143\317<G7\010\275\250\032\254<\321\004\364\2739B\'=\2162k:\213\215\003\275j\331L<\346\227.=w\262\033<\004\032 \274H\203\007\275G\246\224\275\025@\325\274\327\271\"\275\264$\317\274\004r\310\275\031\355\006=\242_\270:\0061K=\251\010\272\275~\265\221=\277\275K;cX\232=(\2428=\375\322\007=\245\334\204\274u\321\326<\'.<=\255d\006\275|,\362<\361\022\231<\251y\222<\262\324\276\275\337\216I<\236\357\353\274\213\005\277\274*Q\"\2751;\342<I\331\004\275\311\355s\275\224\276Z\275\265n\023=k\3542\275\313\n\374\274m\017\206=\t%\210\275wd\343\274\260]\026\275\246\\3\273Ak\035<\273c\007\275z\037\233=.B \275V\274\312=\205\216Q=\260\355\222\275\322^\264<\245\264\032=E\365U<Hh\347\274\230\261m\273Lbv<v\031\331<\233\314\036\275\031\006\341;\036\025\004=:Y\371\274\251 \177\274 \036$;t\360\315;Z\2473\273\322F\362<\236R\353\273\347\n\273;\213\367V=l\265w<\232-\205;ER\300\275\212Y\036=\254\016\r\275u\360\217\274r\317s\274?\007\202;\006\365M=D\237@;z\351I=Uc\243\272\213\254\010=S\311\024<u\n/\275\352\216=\275\'\026\215\275\274\204\014\275S>x<\356G\232=&\002\315:\257P1\275\300\351\323<\303\023\n=\200\024z\274\233\031\r\274\035{i\275\203\227{=\347u\275\275\034\002\236=f\342\220=?a@\274\341B\263<2\203e;\346\030\277\273\310\n\203\275\255H\263\274\'\341\376\274\207\034\210\275\240\203\001\276\216\377\245\275A\026\361\274\303\331\256<B\204T\275#\276\305\274^\347\222\275Yo\'=\351A\373\272\335\355\010=\366\303\030=\322[\35670\227\017=\274\\\222\275\3017\003>J\300\235\275\202E;\275\364W\277\273W\227\273<\272\212+<\342\314y\274\236j\362;n\244c\275p\035\377<{W\007\273\3039\250<E\212\306\274)9c\274\225^\037\274\217B\311;\366b\260\274\021\333\227\275\256/u\275\226\365\335\274\2415\261\274\031^|=_\\\037\274\367\275|<\204\346\256<\331\247\354<U\362\023\275\223*X\275h\016\207<!\212)\275\177\0138<\327\206J\275\022\227p<\276tR\275s\327\350<\372\204\017\275\177\214\242\275\364n\227\272SH\205\275\363Q\277<\235A\336\274d\017\262=\201\316\033\275u\013+\275JeN;\264\355P\275\312\377\265=\030.\346\273\325\211B<\227\322-=ic\005\275\031\305\231\273)wX\274 \355}\275q\"[<G\3313=\247\341d\275\253\365\237\271)\207\243=x\001\320:\020!\203=\236\036Y<\374\024\261\274\023L\237\272h\031\311=\261\261\201=\307\274\n=\372\032>=cW4\275\021\262\"\273\207:\373<C\373\247\275O\020\203<4\0227=\037W\205=\026\2315\2742\250\243\274\214\2311<\235\303\324<\276\234\'\275Ix\254<e #<\270aS=\363kH=K\342\211\274GX\200<O\031|=\027|\316\273\360\207\234\273\0252\346\274o\346@=\271\003\241<\013\302s\273UB\241\274\177\320\275<^\357=\273\353\233\260\274;\217X\275j\251\331<\330\201\243\275\003C\301\274\036H.\275k\2642\275\\\351\204\274\374#\211;\3334\363\274(\346\337\274s\033\037=<m\223=\262y\017\275\177\033\275</\227\321\275\"\316\326<3\274%\2752\232\"=\314\010\"\275s\005/=\316\363?=\320\034\273\275\301\374\020\275\250\275\022\274\272\216\232:\273M\343\274K\372\340\272\023s6\275!\246\201\274d\361\201\275\363u\n<\205\036M\274E\214\003\2757S\351<\254\333 ;\022A\026=\232T\222\274y\340\246\275\374\020\002\275\264\022`<\266\210k\274\206\0259=\220\022:=\0351\247=\t\304\000\274\356T\306<\345\003\275\275\030\321\312\274\265\254*=\251X\204=\237\243\313\274!J-\2757\r\235;=\224\201\275\021\241\030\275\245\253%\273\232\003\013\275\376\321-=u\004\'<\324?\263\274A\356\370<\353L\020\275\325\223W\274/:\027==\224\211\274p\r\010\275\217Pn<BX\301<\344\252\027=\215A\277;Y\000X=\302,\363\274\256\373\203\274\r\270\370\274|Y\025\275C\033=\273<&\340<,@\207\274\263\214\243\275\373\245\223\274\335(\024=\374AV\275U\022j\273\303\251)\274^\371@\275\'u\233\275@\372\026=E\027\001<\236\003\241<:s3\275\373\001\310\274e\267\'\275\"}<;>\246b\275E\243\003=\307\337\304;\225\252/=\276P\306\273Q\234\312<\370m\365<\331Q\261\273\355\274E=\222.\320<\372\242\324<\013\276\204\275\231\271\262\275\353o8\275\360\037\371\273\210\206\335\274\265\216t\275}\013%\274T\024\237=\t\036\326\273IIJ<\324\342\204\275@\006\354<\362\353\244\274\363\324\351\274\367F\025=\215\023]=\306\330\225\273\223 \266\274\320N\227\275$\336\361\274QO2\275`<\001=\033\210\206\274%\367\211\274\020,\326\274\366\006\201=AC\037<\r\231\232\275\325\362\316\274\335K%<\253\241\320=;\354\203;M\241(=])~\273K\206\355;]\374\271\274Vu\260\274B\345x=\237\005\214<\252\3558\275p\344\252=\034\364w\275\202\352\253\274\271\335x\275\023\265\200\274\325_\275\274\362Jl\275\315\371l=@\220E=\226\3652<\325<\315\274s\023\254\273\000_\227=1Qd;\265\024\025\274Z\203V=a\306\010=\266\334E<\277\321\024=`\025\247\274\365\304\020\275\2633=\274\244l\037=\001@\017;M\276\233\275w\032I\275\352\205c<\347$\227<--\364\274\347*~\275U\267\366=\357\303\344\275\344\rP=\206\327L=a\'i\274\240=\370\274#\343E<\360a\366<7\374\004=\225\023\313\274\261\3035\275\324\005G<\321b\201\275\257-\213=\307r\237=\230\202\340;\335w\236=\336\310\211<bE<<\026\\\'\273\356\332\014<\344\333\033=\031\375\r:\256\000a=\325(\205<9p\001\275\213\301\326\274\017\327q\274\366\235>=\211\3618\275\314\032\246\2745\317\014\275\254t\207=\262\341\034\274x\201\200<\201\0242\275*\331\017= \024N=C\032\363<$$\014=OTD;\311\272}\275\027\343!=5\306&=3\360\264<\205\202\226\273l\364\216\275\215?^=0\363\002<}\360+=T\364i=\021\276\246<X\371(\275u\005*\274\244hu\274\354_\360\273C\202\325=^\364\255<zU\021<~Ha\272\264\333\256<\227\032\321\274d\033\312<\333}\372\274\357\257(\275l$k<?\001\217=[\346b\274\366J\266<\331\226\277\274\230\237\202\275\2202\365\274fd\024\274rB.=\372\271\260=\214\357\355<\301\373\226\274\276\361\202=\242\"\017<\034\310==\321&-=\017\260\020=\257\275A\275@\344/=\314\270\371<\236\0259=\356\272\255<\231u\351<>\353\352=4\365/\275\'\357\221\274\251=\032\274\024\371\335\274e&\332=p\317\315=\004\276\334\274\300\2029\275\231d\316;\200yF<\337\206&=\360\313\033\275\031\033#\274\337\357\020<3\264`\274K\276\320= SY\275\232\205\305\275*\226\214\274\255\006\227\2751\021\026=\004\227\007\275\027o\225<\324nP\275\006\201Q<6\344(=^&/\275\300\376\227\274B\020\221=h\255*\275\010\372\263;\"\0079\274R\247o=\243S\317\273^\332\201=\360\255\227\275t\334>\275\374\356\245\272\336#\201=d\025\203=}\270\010\275h\'$\275\347\244U<\024\354\242\274C\030W\275\240x\203\275\253\340\234=\343\312\257\274h\217\\=\033\254\330\274#\314g\273#t\313\275\363\231\317\273xo\321<,\304\321\274\252-(\275\252\217\251\275\360H\320<\327}7\272\375#A\274\367\034\252:\317d\272=`\363\302\2753\206\n=sgm\274\247w\212=\346+\025\275\212D\243=A\334\237;\276\254p<3\200\201<\370\324^=\234\342\201=\360\016\367\274\366\316A\275\322\315[=I\017\212<0\327\214;\224\264S<\243iT=\271\216\202\275\314^\025<ha\037\275\351\347\202<o\275A=q\221\233;\360\241*=\314\035F\274\235\363A\275=$n\275\252\330\236<{\357-\273\215_\305=\216\374\037\275\213\220\177<ZO\256=\360y\275=D\007*<\275\200\336\274\332\017\037\275\024\272^\275\017\020\217<\220\244+=}\277K=H\377m<i2\207\275Cd\032=U\343\031=\275\312\272<\034F\010\275\364vZ\273Y^\346\274 \241\263\275\014\334\363\274\215\202I\275\322\260K\275\nB\220\275-\025:\275\366\335\250;B\354h=s\270\215<A\0133=:\246T\275\362\320S\275\373K\254\274fN\373\274\371\352\004\275\243 \016=\271\2504\275\300\327\323;\212\330\260\275z@.=\250\003J\274\267\215;=\245\276\275\274G*\252:s\365\210\275\244\335\021<uxK\275\353\351\207\275:\034\252;\344\253d\274\001\0141\275\261\264\027\275\r)-=\037\327,=rCO=\325\376\020=\027\214\313\274\272^\021\274[I4\275\217\221\026<\315\345\242<j\277==\207\017\232=\240\244$\274\216g\334:\376\"\250\274\336\004c\275\276\255\223\275Wb\026<|n\236\275-\270F=\352\245\305;J\351&\274\222\317\376;\344$\t=\246@\010<\220 i\273b\373\303\275-\035\002=\265\255\363\274\"f\240<3\377\023=Z\016\310\273\267|K<k\007y=\332=^9\233\3726\274\233\377D\274\367/\334;\370%\250\273y\3213\275\205\016:=>\216\030\274\r\267\204<OQE=\2227,\275\352\021\213<IzB\275\006\244\023\275P@\267=-\226K=\2701\207=\330`F<\031\263\t=,\236y\275\020\312^\274&\275N:\2673\t=E\370B\275\262\250\320<P*\240\273C\340p<\303\221\256;\200\354\240\274J\354\031\275x\335\340:\205:<\273\332u\t\275\315]\r\275\025\335\207\273lp\315;\247\330\233=]\371\252<\310\353$\275\341\341\202\274\232\305\024=\004V\276:\326\273\207=\373+P<\304y\020\274\370\235\034\275\363&d=\345\333\245:\217 6\273\377\332\206=\254F\232\275\204e\371\274:\247@<\222\372\177<\226\266\300<;\217V\274\005\262\243=\271\2443\274\342\241\362<\365\025\312=@G\003=\237Q\002\275c\215\r;\341\0330\274%\320\253=g\264\202\275\022\206b\275\270\327\227\275\346\306\302=\247D\271\274\036\2255<{#\222=w\2777\274l\3667\2757\317\260<\353\357\225\275<L\325\274\271\376\010<\370<\367\273\013\343\232;\022\207\215\275\033\030?\274\037\207\341\274;1\254\274,\307\253<Bw\256=\203\001\304\275u\257\035=\277}!\274\004r\216=\235\036\214<\340\216\027\275xs\372<\262\354%<M\024\202<&*\237=@\241\300\274\345\261\211\274 2_=o\241\030=\240\025\331<.lR=\026\314\341<2/\326<\304@\326\275\"8=\275\324\\\t\275\017\267%= \237\231<#\336\032<w\217\267=g\204/=;Q\251=\0044\211\275\240^\375\275C\335\250;\014*\"\275\202\376\367\274\'\227\321\274\260\306\273;\231\211]\275\310S\251\275EI\177=5\244\014\274\262\024\265=\227\315\006<\032\031p<\327\362\363<V\312\361;\372\232\005\274(\303y\275\203 \247\275\266\250\365\274xi\017=\305\342\210<\361Z\025\275\340JQ<\331L:\275*\211\025=\1778\034\274G\211\204\275\304\332\'=u\2136=\323]\241<\226\004\205\273\263wD\274\304%\302\274q\2529\275\036\014f=\2348\030;\225\367\263\271\332{\336\273\366\223e=\004\240\353\274\023\363\311<\314v\262<-\253\262\275\326zu\275H\374X=~5\331\274\021V4<\rI\240=\331\206\330=\3746\330<XM\303<\237+M\275\260~\036=\333\004k=\262\224\271<\253\261\364\274\251\326\343\274\307\250\313\274\263)\247\275U!\t\275\004\001\231<\001\333\246;\326)E\275\004t\327=\333\325)\275G\245w\275\235\304\234\274\304\243\300\274\217\010z<\024V`<\222\n\217\275\371v\306\274A\275\307\275\306&\232=g\3645\274\035\200\003\274\226<h\275\276I\350;@u\220\275\204\017\035=\337\'\215=\r7I<\'\250h\273\213\032\256<k\363\262\275\216\254~\275\037\224\236;h\'\350\274\235\262\032=\3237\312<\221\373\206;x\316\226<H\236\250<\026\222\020=\240?\"=Tg\343\274\264\215\247<3p6\275|\356[=\307\2125=\350\340\3679\341\234x=H\206\027\275)\014\024<\242\212\246\274Ye\201\275\334\274j\275\03560\274Jj\3658\277\332m=F;V<\311\257,=\260\262\002=\366\212\234\273\324\355\262<\025\372\3249\002^\312\274\354A\233=\364\254+9\032D\273=\374\025==\372\3619\274\002Y\211\274\200\313\362\267\006<p\275\277\300\241=\336\337\334<mP\n=!\374\374\274\022x\024\275\256\326\323;q\325\247\275I4\356;X-f<%Y\240\275\236\261\000=Ts\'=\"\243\265\274\205\266,=`\334\027=\224\314\357=Z\211\250\274*R\251\274\263\354o\275\027b\315<\001\315\307\273\236\325^\274\316\302h=$\330t=8u\317\273\237\203\002;lr5\273M\'J\274\312q\300\274\303\207\215\274\230\242i\275nz\337\2743s|=\335\001\236\275\224\211\317\273\240\0216<^z`\275\016\014\325;\003\330\225=\370\304\007\275\340\315\260<$/\313<\350\234\260<\323\004\206=\037\351^\272o\315\245;\305\340\251\275\317\021\372<o\252d\275`\330\206=\375\300G\275\342\177F\275;\351\224=!\207+\275I\310[=7\2442<\023\002\007\275&\367\211\274\200\036\327=\014\334\000=\222\346\214\275!\001\322<yU\365<@W\245<\214u\034\275\207\355\317;cF\225\274ND\225=\346#\233<_\003\016\274=\351\227\275z\360\326=W\333d\272\331\264\350<\366\317\212\275\005\246\202=\2132\336\273\014\032\207<n\037k=1\333\362<\243\330\214\274\340\027\277:\257IQ=\350\254C\274\236\037#=\201\257a=\233\001\245<\365\250:<g\024\315<\242S\303\274#o5=/a\321;\230\237\"<\363\374\006<5C\326<\363#\212\275b\364\215\275\246\177\037=B\314J\275\222`O\275$\256\261<\357\323\372\273\331\016.=|\021f<\027k\231;\034\031\027<_q\241\275<\276\237\275\256\350\313;\316\261\347=\323kh\273O\210\307<\335\275{=\364\033p=-\254h<\337\365\317:]X\001\275\332\333\206<\207\275-\275n\002\302;\372\252\010\275n\310\373<\240\211y\274Ev\267\274\377\026\n=\023B\261<\231\273\201=a%Y\275&\3714=\272L\212\272\314 \216<\251\274\030=\324@\310=E\3754=C;\332\274\265u-<uV\226<\371\326\231\273\250\354\217\274\ty>=\270\026\271=:\314\204=y;\201\274\205\214\323\274L\257\233\274\372c\350;Y\2410=\207|\224=J\205m\273\217^`<9`\204=\017\231\200\275C\363\255\274\240\352\000=\3262\304\275\2214J\275\330\266c\275\320\313\r=\326u2=\270;\363;\217\357\260<\213\211H\274]\332\032\275\226\226\254\274P\013|<\334r =$\305Q\2731\025\250\275\270\270W\274K=\354\274\2428<;\310\005\177=o\320\265\274\023=\303<\2540\256\274v\216\317\274\202XJ\275\305\027\252<\016e\267\275\200\240\214\275\374\220\007=\272y%\275\214\331\376;\221@*:e\034,=N\205\374<\326\037\036\274h\266h\275\3660\030<\201`\207=A\327G\275\0373/\275\241\010\370;G(\272<K\355\243=\204\351p\274\363L\000\275\344\237\201<iL\2369\353\241\341\275O\330)<d\223\025<b\337\366<B\030G\273\316I\233\275F\320o\275\244\230\'\273G\207\032=N.\023=\002\264K\274\333UB=\264\002\021\273\331\3133=U\237(<\335[a;\326\376\330<\372\355G\274\274ow\275\321f^=\004W\026\273\250\355N\275\264Hq\275[\014\333<\322i\233<HY\342;\247\026L=\376\264;\274S\350\250<k?\356<\322\252Z\2757\240+<m\364\016;|\330\025\275\261\022>\273\367#\201<\342\004\224;\377v\334\274\243\t\020\275T\210\036\275\346\253c=\253H\262=i9\35293\335\220=\ti-<O\374\324=\313#.\275\rA\221<x\226d\274{\224\365\274\224%u=\374\240\r\274\"\300.=\275=\251\273\352\316\200=\211J\236\274@d\020\275\004$\230;\361\262\272;\351\326\304\274!l\224<\000%\271<B\275:<\002\311\256\271]\313L<\\\344\r\274\250\365\230=\270GJ\274\005m\205=\037(\202\274\001\311(\275bv\347\274\374\004\203=4\005\023\275.\007\023=\025\362\315\274\013\016\"\274\"\026B\275p\027\232\274\235\311\360\274~\345\222<BG\007\274\r\326\376\2747+}\275\257:z=\007(\200=\rce<\3357\337=g\354\313\274\206\234#\275\234YU\274\254^!\274\334\323\245;A\240\201\274\316\362\233\275D\234\006=\257\241!=h\373k\275\361\\}=\234\t\310\274\2762\306=\372\321\265<b\340L\275\332Y\217;\005!\351\274\3721\311<\302\333D\275\014xx<x\362\024=\214\307Q\274Z\210C<u\342\232\275\345\002\n<\347A5\2756\211\311\275\237o\316\275\000.X\275Nq\271=+\374\254=\224y\"\275\256*\010=\242\340\213<\377]\302\274t\304^=\227\224J=\327\364\214=\353\325\262\275\277\3311\274or\\=\321cH<-\306\330\275\222\273\225<B\357H;\200/\333=F0\020\272L\365^\2722\361F\275\342\275\224;\233Uf=|c\214\275\224\037\375<\020S\374;\367\321\377<\217@\273\274\021j\002\274Rh7=\244n\001\275~\337\"=5B\021=\217l`<E\251\204\275\307\277v\275z\013\322\275\373yU\274j\302\t\275w\241y=\272\350\330\275\203\024/\275\335\272\233<ZM\037<\231\261\361\273^\306\255=\'\231O\275\023\013v\274F\354>\274\313*\317<\t\207(\275\004I\205\275\214\341\036\275l\n\024=P\351V\273\177\010\372:1\017\026<(D\241=$yx=\222V\n<\360\270*<C\212\270=\2764\231<\305\016\251<W\270\241;X\tR=\177\330\322\275\330\275j\274\264\200\263\273x\033_\274;\371\224\274\241\006Q;#k\213\274\031p\266<\316\330\023\274Y\037\\=\315\343J\275\026Y\261<\327\272\036=\217&\241;c\355\314\272T\247\035=h\235\277=0\376\033\275\227\306\211\275\003p\332\272\221\244\237:\276cA\275\212\305J\275\250\257\201\275&\032\353\274e\001D\273\212=\206\275\221\234\205=A{\220\273\031\005\317<\001\001\374<\020\033L;\210~n\2759\225\302<\336\243\207\275*J\372<\177\337\351<|\323\354<d\260\354\274\3623\202=3a\264\274J\214A=c$t=R\3562\275\240\030\243<\274\373\225<\244\276\357;\206\244\262\274\332C+=[\315\263<\204@p\273w#\205=\320q\n=@$P\275{\0174\275]\357\177<\263Z\211\274o7u\275U\335&\275I\032\205\274N\005\273\274\266(\325</h\375<\251eg\275|\321g;\020,\257<\224p\022\275\272v\304<c\351\r=\212r\262=\031\031\016=\307\261\271\2740\232\220=\203\363\007=\211\207M=\270/\274\274\020:\255\273)\204\204\275K\034\364<a?N=j\371\367\275\3144\326<\376d\223=w+J=;\267\323\274$\357N=q\272X=\215\205\241\274\244\261\221\272\362\271\226<\200\233\'\274S\260m\275\262\036\034\275\200m\034;J\253\311<c!1=K0\013=\233\327 \275\001\260\231\271\275G\250\274?\001C\275\177\343\357\274\023mS\275\205\217\224=\355(\241<}\231Y\273\370\226\320\274d\234\'\274\263\265\255<r\\\254\271l\324\260<D\2161=\310\347e<h\007\233\275R\357\276\275\010\036\005\275Y!\354;\001\256\322<\210h\030\274\370-\213\274\373\304\003\275w\247\243:\235q4;\020\'c\275<\2572\275[\323;=k3\216=\177\3113=\177C@=e\201\211\274\320\363\205;s\017~=K\3213\275\225\214\303\274W\254\333<f\330\002=\361Bj=\377\020\372<\025\211\210=\000\026T<H\344N\273\356d(\274\3014\353\273\372\232\334\2743\262=\274\217.\206<\217B\027;\3273I\274c\372O=\342\327\276:\330\035\220\274\215\207\275\273\260bH;\314[\237\275\334m\202\275\243$\224;\233\217\261\275\024\246+\275\323\007\027\275\266\217><V\3464=\342\247\205\275\345,!=\177P\037\274T\224\267\274V\277g=\236D\006\274\001\347a\275h\342\220\275\014\003\357<\n\335n<\313\001h=\373z\205<\002\3158\275\367\001\203=\203P\322\273V\271/:C\275\301=\305\235+\2753\256\300\275`L\023=aR\363<\205\262\222\272\346\371N\275:\246\230=\330}g<\217B\325\274\303J\025\275\244}d=H\251\360\274\274\001\210=A\3065;\307\026\220\275\257\352\206\274\024\317\337\275\204\366R<\251A\032=\337\037\202\275\320+\360\274)\035/\273\300_\366\273\231\000L=\355\343?\275{\020\366\274/%]=\002/\350\274R\340\247=\341\322\"= \r\210=={K\273SS\023=\372\005\343\275E:\001=1\376\033;\030\202\261=\340O\'\274\207\243J=\221\203\324=3\000<\275\366\301%<\275\375\322=\216G\025=\363\022#\275cD==4*\253=I\024\233\274\330\367\236=\024~\363<\234+\t\275\251G\203\274\335\253\021<\2266\027=\023\327G\274\3313\t=\307S\036\274\351(\007=\210\211\342\273\312BV\274Q\200\017<\326\257\362<\324\222n;\002\302\247\274\r4\351\274\303\'a\275f\342\221\275\276^G\2756[\351=\361\255\314\274\201#f\274\r!\306\273\271\247\213=z\263\257=\303\227\027=v^<\275\215\330\346<I\221\260=\364\364\210<\310\274\367<\003>+\274\246j\005\275i\3011=\203\305\236:\235hs\274\351\273\317;F\276w\273\210Y\351<\326\212I\275\300\366\310\274-G%=]/\000\275Zm4=\345$\352\273\365\224\000\275\004%\363\274\334\300\265\274(\315\375;\224\223\t=\344v\324\275\357\305y<s\253|\275\2676o\2758\311\240\275\224\275\257\273r\271;\275\370\2216\275\373\3721=\346\370G=\201\335Q\275\025~\223\275\313\217(=\371\320\223\274\277\210\341\274\350\233\200=\237\316\235<\251o\337\274\000\274(=\2207J\275\010\267J=Su`\274\030\3514=\252\215P\274t\330y\275{@\200\274\336\366V\275\276B`<\217\231\260<\266P\222\275w}G\275\270\363\230<!\211\215\275\363.\251=\016\204\214\274\025\361s\275\005[\372;x\226\367\274\374}:=\263\211\351\273c\005n<9\014\323<XT\321<\205\232\211\275\276\235\220=\345\341\251=\360\240\323\273\236%\235\274*\367J<\270\017\233\274\222\230\222\274^&\210\274\331\263\026\275\334\010:=\250\217\251\274\254 \330\275G;\224\274G\017\017\275\230\006\232<\336M\307\272\206\027\216\275\206\234==]\t\223\275Gu\211\274\031#r<4\270\263\273\243_\347\274\356g\207=\307\375\226\274\210\207\266=\360C\340\273\373\340\257\274;8B<\370\335\236\275\331t\010\2758a\341\274v_P=\354\366\006=\256\372\204\274NN\332\273s\205\\\273\273\253\250<&2\334\274!O\217\275\335\321\200\275\335\014\342\274\351O\214\2755~\275\272\243\377<=\230\3548\275O7\340<\037!\233\274uDd\274\273`\035=\354\276\336<Ri\213<\306`\274\275FEo\275\"\004\023<\252\027y=\3112w=WB\277<\306(\306\2738\374(\276\3277\312\275+\230\003\275\245\377}\274\244\03169\263\035O\275M\023\027\274\347\212\255<\353\373\215\274+\350\022=jD}=p\016M\275<\241\301\274x#\236\274sO\376<\347\031\000=\244F\231=O\273\255\274\277W\367<\374\374%\275\231\211\227:\255~8\275\360\224\310<\344g:=\005\246\333<%\312>=pc\326\274\337\372\205\274\353Qv\272&L#=B3\336\274\034%i=~\355\\<h\354*<C\223\20089#\346<(]{=H3\322;\360\347\213<\022\257n\275\376z\320<\r\244k\275\274\205\017=\344\304\327\275\323>\202\2746Yw=\256\004\335\274\314\234\252\274x4h\274\337O\336\274\006l\224=\275\017\030\2753M{=\313/\315<d$\007\275\023w9<j\030 \274\333\002\030\274\372\252B\27514\240=T\352?=\023A\233<\005pC\275\253\347S\275s\367\265\275\360w\025\274\207y,=eu\214\274\351\361\263<TI\222\274n\004\231=q\3206=\3007\317\273EO\212\275\316f\346\272`\014\317;\222\002O=`\322\031<\301\244]\274\246Y\253\273`\237\237;\315\241\261=g\204o\274\221,C\274=+\245\275B\345\023\275\336\264><\037\216\327<N\351\322\274Z5u\275^\2239\274l\303\225<wrs=\332\3561\275\313\206!\274\241\t\263<}*\355\274\217S\010\274\317+\370<\217j\\<EHU<lI\241<?\n\261\2722w|\275h\354\303\274BC\346\274d\326<<\307\314\372\273*\270\230=\371\335\322\273\265\332\360<H\017\305\274%\362\211<4\0333\275\236\2451=tA?\274\242\274@=\247\261S=\301\0203\275\177zZ\2754 \311<\331\200\343\275\245{\\\272T\034\200=\331[`\274[\300\370\273e\202\010\275\035]\265=\204/\004=\236\010\304\273\022\0100=+E_=\215:\241=\177Q\2418\005f\224<\242\263\214\275X\362\014\275\317q\t=\322\264%=\027\233\007=\2211\016<\032\332\260<\"P\315\274\230\232B\275\302i\304<\205\215\210\275\210\357\n\275\330\240_;I$\343;\250\222v\275\365\356\250<S\323d\274s1\250\274\227T\257\275\247V\314\274|<\305<\313\273\351;\306P\323=\031\331\214<\013\206\266\274U\3510\275;\2400=\231RU\275\neS\275\325\324\r\272#\330\236=\2441\000\275v\231\224<\204\362\000=\273\321h\275Hb\334<9\226L=3\365\340\275\253\377Q=%l\256\273\3669W\275V\303\312<\236\357\243=\230\223\263\273\335\0049=\237\014\243<\365\315\375\2740\3276\275\376?\177\275\016U\010\2747&\266\274p\022\213\275\t\222\010\275\033\347^;VB\243=\202b\321\274\340d \275\005\\==:\354\247=p\273!\273\374\205`\275\351\227\r<\253S\214<\340\262\343=\326\232^<\377\\)\275^?\321<\267Ns<\253\357\233<\344V\306<\335\035\260\275\340\252\220;\372\351\211;\250f;\275\254CV\275\315\'\010=\267\037\214\274*O\225<\216\320\026\275\314\365 =\034\360L=H\364\006=\262D\223=\t\217I=\034x\237\274g\344r\275v\367n\275\341\265\024\275U\346\214\273\260/\253=4!\261:\326\030\204=Z2\214;\010\201\261:\223\r\240=\\\320\223\275\363\310k;\223S\252;\241m\007=\272\345w\273\202\337}\275\304\021\314<F\212u\273\226k\014=\3047\013=8\315u9N\341\310=\354\366\n\275K\346\233\274\301\233\221<\312\374\007=\370C\362;\227\213\261\274\010\333 \274\262\"j=\335e\245\274\330VT<\360\334\226;\326\300\374\274[\315\316\274[\376\241\275{\225X=\304\300\304\274\355\373\326< gA\275^\356\262<\352NM\274`\220\004=s-\336=H\206\021\274\006\017Z=\243E\030\275a\341\254\274x\301\260\274\227\0207<C\324\217;\024u\233=\311\362U<\371\204\376<\357\031e=\033\232\034=\330\177\315\275\312~\213=Ea\t\275\255\262\025=\235\3358<s\356\033\275\272\266.\274NW\233<f\331\037=\354\230\217\275\"M\223<\035\307\006\274\264\237\243=\032\224\250<\237\266\253<\302l\316;\232#\321<\376\1774<\376\271\203\275ct\\=\224\376\025=#K\020<\214\210w=\236\355\020\275\243\230d=L6[\274\310\3402\275\332\332j\275\262<\021\275\235\311c=\360\014m\274tD\317=\371l\201=\210\r\026\274#U\306\274\327\3178\274-Z@\274}\n\007\275V\314\267\273\360-j\275\220\305\025>\345\177\266\275CTd\274\252D\016\275\205H\332<Wx\020=t\016\260<_\337s<T|\271<~\226\365\274G`\001=\244F\223<f\027\211\273\t\214?=\304\233\311\272H\305v=\241\200\311\274\223o\211<\277$z\275\332\2261=\347\366\006<e\202\002\275\272\016w=cj/\274\334\276-\275D\330\304=\305\034\322\274-\250\260\275Mr\366\274[\270\322\274Q\335\204<\223w\373\275V_<\275A\344\002<\307\214\';\305\026E=\225\327G=\357\323\031\275\310\2402\275P\321\253\274\365\027\002;a\036l=\rO\030<E3\326\275F\277\331;\355\353\221\275\233 \t=\277\222&\274\335\340\034\275\204\325\374<ab\234\275\217\\\n=P\301\213<)\337\024<\315N\311\275\272\346\365<\\\340\007\275\311\234\007\275\227\356\"\274l+\034=\347\273\204\275gW\323<p\375X\275\316\213\226=L\344\017<\326\352\322<\316\247L\273\316h\n\275\0263d\274\000\014\201\275\347\373\023\273`)V;S\365\210=\230M3\273\227\224[<H\030\264<UQM=\270w\226\274\327\3418=\316y\013\274i*\276<\222\002\265<\364%\014<\002\261V=yD\214<Ye\374\274\376!\033\275:(\336\273\020\316\227<\035~\225\275\273\266K=H\334\320\274lC\314\274\260c\330\274ld\002=,\245\033=\370\010==\250{t=Vu\225\274\362\232\360<g(\245\274 \237\324<\031\377S\275t\347w<\277\327i\275\2731\375<\337\316\327\273pi\336;Q4*=\214>\373\274\263\230\004=u\312\247\275\243\253\216;=\227m=\351\340\211<\242\337\177=\210\255\263\272\234}\244\273\025\240\236\275b0\202=R\t\000=\022\273\225\274\230\376\312<\240\250P\275^\224\306=\277)\001\275\316\200.\275\356N0=6/,\275 1\355<\200\330\'<l\2600\274\234\301\223\275\253\235\225=\235{\364<\370\207O<\223\014\333\275\207\302\245\273E\003\262\274wk\203\275\340\307\367\274\342l|\274\005m\304;\361)\206=2\357y=@\032\363\273w)\231<\341\326\220<\315\315G=R\031\271<~\3230=\337Pw\273\005n\354\274LU)=\322\214\254<\225H\033=\014\273\276\274\205\006\303=\177\321!\275C\0065=9\332\277\274\374\312\247<\272\344\200\275Z\006+\275a\360M=J\311\356<\036\326B\275\355B`\273S\350\212=YGn<\350\037\204\274lv#\275\202\246\277\274\210\327\'\275d\365\266<\315r\246\274\245No\275\235#M=\247\007\302=\335;\241\274\257\211\260\275\227~\257=\225\341\214\275\020\325\246\274\302\3579;\001\373E\275\25597\275\215]_=y\350o\273\003\200\301<3\3357\275\3607\223\274\342\236S\275\260\231\001\275k\207\265=\323\240\267\2750Q\025\2735\237\230\274ndJ\275\243\233.\275\036\260G\273*\3547=\023\305\254\274\275B\200\275\226\264\217\275qf:\271\346\245\231\275\350e\003\275\321X\3139\316C\006=\376\335R=#\020\233<1}(\275g47=\251\367\224=\212\306\027=\034A\366;\233\275\265<\325U\340:\007\352\332\274\2362#\2744q\\\2745\252\017\275\236\373\324; \203\231;\252\014E\273\202\271\004=\251k\253\274\222\365\253\274rA\020=/\345M<\244\217\303\274\016\276\332\275\"{\031\275\3348Q=\376\014\020\275\025\024U\274XM\340=\353\243\203;\270v\243<\210E\020\275H$\230\273\000s\312:\177I\213\274\332\352\222\274RT*=Z\310\336\273\t\355\033;\037?d\275\337\336=\274\033B#=\256h\347\274\255|\013\275$;*\275C\315\034=\225c\352\274\325\363\303\274\244\243n=Z\216]\275\004\200A\274\241-\236\274G\\\322\274\007&\216=F\245\036\275]\337\034=wq\362;\005\036\371\273\370||9\002\316B\274\275\326\033\275f5\240=\326\014\n\275I\003U=\030\357\240\274\033xV<z8\207:\034\002\217\275\326\341V=\361\301\016\275\030\311\241\275\036\350\203\274\021t\014=\342\266\034<\222\202\243\275\341.\207\274K:\000=M\334m\275N\177\254<\323\217\230\275l\370\r\275h^\336\274t\246\266\274\243\355w\275&\032\203\275\217kO\275\005&>\274}\023\314\274{\371#=5\340\327\275\017\033~<\276\256}<\205\236\304<\240\177\251\274\030\377\240=\277#\262<\275\016\020<oa\265\274]*\257<\233\253\224=\177\322\262<\361\306\323\274\367y0\275\333\235\201=\2156\001\275C*\234\274\014K7\274\"\020S\275\304v^\275\200n\200\274\013j\005=\312\037\313\275z\272\251=\222\2609\275\200]\200=\370\220f\275\220\017\323<qL%\275\326\2574=\273\377\271=\014T\001=\'\236\312<$\270\361\274aa\252\274\321\351\004\275\336W\266\274.\2118\2730*\231\274\014!\222<\332\004Y\275h\212\275\274\273\'\r\275y|\315;\204v\021=\237U6\275\257a\324=\325\013;\274G\3438;\004\352\t=z\215<\275GX\226\275)\016\256=3\205:<u\235\333\275\025y\233\275\367\366\245\275Y\312\356\271\026\252\016=\014X\252\275\347\002*;\374\273\212=\"\001\271\274ntO\273\250\377\216\274\315\332K=F\312\220\275\320@T=\327\300\220\274\202b\022=\007F\200<fO\373\273b\275Y\275\307\343\201<W\356\326\274 @9=\207\375y<\352\273`<\212\2416<\255B\371<\t\204m<\236Vc\275EEu\275\211\267\313\275Z~6\273\353AF<\'\263\031=dv&\275\213\324\014<x\237\252<,\021\177\275\377\002\357;\331\350\250=\303\2230\275\265\306\255=\254\034\t=x\213\016\275r\345F\275\377:-\275\220\336\245\274\003l\301<\377|\n=f\300\236\274\354]\200=H\360\'\274\"\333\244\273\332_\206\274\016&d\274\352R]\275z\324\232=f\327\312<D\321\263\273\340\360\341\273K\336\333<%\326*<\377\316\220\275\006LK\275\374\344S\275\310\261\250;p\236h\274\366\235\315;dk\031\275\202\315\315\274\215.\245=\371\020\367\274\010=\016=\000F\225<1{\"\274\260B\030\275\037{\212;2\220\001=\327\203.=\241\301\234\275\222\301V=\202\224\036\2752\016\313=\016\276\200=\320>\271\274n\334\251<\362\366\021;\022\350\343\274\352HW<f\267\225=\0140\025=\010\366/=c\254[;\033%\266;S4\324\273\257\002*=\241\006<\275A~\210\275U\213\212<\245\234\220\274\304(8<\363\237\240<!\360,=;\030\233\275YM\276\273\207\232\010=b\333\324\275\300\243\\\275\213H\013\275+\274\205\275;\310\220<6\337\034\275\257\277%:\020\373\205<\335\013\036=x\354C\275\262\356\237<i\264\231=\240\316\277\2748P\244\274q\t\246<\214\333J\275\334\330\264\274\364Zc\275/\024\200\274&\267C=\217\200i\275\274B\305\274\016$\240=\rF\206={[i\275\376\220\310\274\350i \274\310X\236;\227c\345\273\005\266\213<\311z\247\267A\206<<b\347f\273M\326v=\022W\r=\204\315,\275\334|\301<6\245\306;\375\244a\275\325\376\205\274P\3115\275#\342\235=\370m\330\272\314\226\222\275\346L\020=Z3\211\275F\344\316\274t-\243\274\355\016\001\272\274\323\326:U\343 \275\220\334\337\271\276\364\006\275\363\200&\274\005\303\001\275\317;a=\227\2679;\306\026)\275\304\036*:\246\005\305\275\006/\245<\201\2342=\375\010R<\254\303\216=\220\323l=A\005\342<=\226\230<\333_\256<\177\312:=\003\236`<=N\'\275\346^\260\274\204cG\273wP\225\274\353\216\312<$\301\212=\203f\006=\002DE=\205t\010\275\377\367\220\274\265\273\003=\332\210\253=-\204\273\274\347\271\307<}\374\225=\003J\244\275\365\264P<\036\000p<\3162#\275jA\210\275]\206\332<i\207\205\275\206\200\014\274\350\351\026;\251J\316=\215c\310\274\301\003!=\246\277\207\273\306\271C\274I\252&\274\340\340\341=\303\345\r\275\006C\334<T:\217\274\232\n\203\275ewP=w\0336\275c\350\336<\026\225\345\274\235\3755\275*v\250\275\311L\273=\177\345\203\274\366\204\247=u\335\024\275\223ax<F\315\254<b6\330\275\221e\274<g&\223=O\324%=d\3278\275n\274\250<.\255\252\275\002\237\214\275i\321\274;\316%\352<!\244{=\311&\217=\342\211X\273\256Z`<\364?\322<\2246\355:\356c\230\274\332\021\020;\301\360\360\274\033[\311\273\201E\032<\320\327\227;\357w\211\274;\323\020\274\233S\215\273\262{\323\273\244\006\036=%\016?<\215\t6\2756\306\273<\345\252\225\274\277\241\211\275\n:E\275b\231\205\275\360_J=\310\325\205\274\347\320\202\274\226#\250\275\347K\032\275`\262\326<*\0208\275\301\326\312\274o\036\226<]\330\346<\333%\177\273\tx(=\221a\023=\240\367\273=\'\312Y=\3344\361\274CT\020=Yt\332\274)Bd\275(\234\036\275\016\007\303\275\364\273\017=\323A\205\273\226\3558\275\236r/\275n\365\252\275\210\314\212\275\266*\005\275\352!\264<r\265r<\275\005\326\274\\\202\216=F:\274\274\006\336\242=\266\264\'\274\005\367\224=\026\376\350<\217\241\324\273\351\n\036=\351\327X;\264\177S\275\355\203|=\026\377\271\275\253\000\247=\321\222\241<\251\t2=\245\357O=Pu\301\274\003\3778\275\204\303F=\014xj<2<W\275-\037\323\272\320\223D\275`/\317\274\233$\257\274\330\300b=\202S[=\177\345\320<\336\273\366\273\023\361\266\274\313S\005=\253}u<\237\216\271<\365\023~<X\242\210={\370\324\274\333x\242\273(\335\242\274 \271\216<\221f#\275T8\307=\265Tj\274:\273\371=\252\021\010\275\336C\021=\002\370\207<V\313\255<b\214,\275\356!\235=\364\207\274\274\353\212\'=$\227z\275\213\036U=\235B.\275\217\252H\275/8X=\361m\271;\322\214\204\2749\t\321;[\257L;\236\311\225\275\177\332\265\275\023\224\370\273\2531\276\274\325/\\\2759\201E=\257\272\207=\224\201\322\274C\371}\275:\007\340\274\322\001\316;#\336\t\274\225\365\020\273h\353\224\273\215}\314<\014\360\021\275gL\253\274\3368S\274b\241\215<\352\366k=\351)%=\000\356\343\275)\\\273:]+\240\275\351\200\024\275q\373k9\2013\013\275\002\336I=\347\340\206\274\021\344a<\205\222q=5\336+=\243:\307\274\"b\020=\363\327\213\275\035aG\275\027\225\220<\362\235\013<\347\002g\274\366\302\206=\343\325\211\274\017H?\274\027X\203<1\363\232=`\234\234\275\2407\344\274\357\321\030\271Im\265\273J\3647<\226jH;\303\211P=\037L\222\274|a7\274\217j\244\274Z\2441=\230\211\303\275mj\345\274\267\206\247<\257KM=\006\346U\274\'o\032;|\226\033\275\206\204\233\274\371\251\216\2755\030\227=J\313@\275S\320\307<I\213Y;@\3541\2759\037\204\274G\252\245<.\337\246<\225\237>\275\361!\312\273]\311\263\275\232\234\327<\330J/\275\217B\017\275\352\000\324<\300\203\026=\232Q\001\274K&\022\275c(p=\003\004p\275\232L~\272GZ~\275\340\222K\274\345\371\324\274\210\254M<,;I\274\007j[=\031\211\332\275;\006\223\274\212\336\305<\212\033\'\275\317\r\n;AN\236\274\263\\<=\251\224<\275,&\221\275\202\374\342;\250\333\304\274\310\350\214;\223c\036\275\240\005\'\275\007e\010=wy\264\272\350q\312\272\254m\355<\306\344j<>\377\303=A\002\275\274>$\205=^\3068=\217\032\024\274\327\277`=\212\371\221=\230\373\365\274\234\030\234<\250\204\265\275\304c\023\274.\366\013<\272\350f\275\247\325\261<\254Xr=~\212\206\273O|\257=\367a%\275\211\303\205:\376\254&=\301\260\223=\006\2200\275\377\010\215=^[\204;\322\316\234\275TjW<Z]#\274\264@\323=\321\275\201;\177A:=+\005\230\274NM8;\307\010\204<\364\345U\275\0015 =\030tQ\275U\320\221=\276\013\241\274\334\2118=\030q\245\275\325\\D\275\321\224A\275\353C\203\273\353W\242<\261Cm=\232\232+\273u-\237=\271,\232<\344\224\205=\2303\370<\266\352\025=k\266\346<\336\215\035\275;\330\0268M\343\245\275\231*E\273T\347\353\274\000\253\262<\236\334H\274Ky\023\275kn<\275\372k>\275b\271\240\275j]\217=\r\243i\2757\332\223\275]\360\r\275\027\247\236=\263\304\017\274\316\304\035\275\324\250\221\275s\256\220\274$6\r\274T!q<!\032%= N\201=f>%=\"\225X=.:\022\274\201\320\"<\267s(=\236\033_=\211M\002\275\266\322\021<\033\203\254<$\3634\274\314\331\247\275\210uw\2748g{=I\342\224\272\346\315|=\226G\023\275\344\3346\275uH\232=)\023\325:\246\032\037\276!<\027<\222[X=b\037\"\274*\223\t==\372o\275,\032h\2752\005\355<\033\360\252\273U\247\032=8\037\235\275&r\026=@\375*=c\243<=?\301\217<d\207\007=J\373\035=N\246\264\274\017B\200=I\203\017=\200\013,\275\257\252\202=\315}\013\275\301\366Y\274\241p-=\205\237L=\252\223\356;D1\241<\337\350,\275\000\260\340\275Oj\207\275\327A\351<\245\223+<\274_\252\2743L\306<S\310\007=\002\0359=\241\320\237\275)A\245\274\022\243\233<\272\213\007<[\013\356<\303L\234\273\253\344\026<\372\312)\275\367\210\352<2\001\022=\323\317I\275DUe=\314\231\367\274\t\310|\273!/\206<v\264\271<[\351\347<\272@\233<e\330K\274\024\244{=\264\352\225<\205\230\331\273\010[C\272\033si=\007\212\022\275y\243\255\273\n\215_<\\F\333<5\372.=!a\213\274\332\305\363\2744\356\371<\263@\225\274\"\201\224\274\010\347\223<M\203\033=0\033e=b\334\270\274\204\030\337\274tw4;\345\257\255=\032\305\024\2748\241\037=\330_\227<r\223p\275%M\240=\340\205\346<=\240\227=\005]\030=\266\334\251=\034v\326\274A\326\211\274\205a\022\275-\330\362\274\201\222\311\272\247V4=\307]\027=\303\375\006< \330\022=\233B\027=\257<\354<+\037\351<\356T}\274\351r\303;\265Z\235\275g4\016<\332+\033\275\037BA<\317>\206=v?\274<\331 +=\306\267\247\274\020\253\221\274\264l\216:\367w\254\275\376\325\364;\207\230\023=7\023\206\2750\376\201\270ODT\272X\304\256\273\356\034_\274$\314\267\275\322\253\320;\023q\337<\033a\347<\263\247\227\275\371\230\350<fZ\\<\013q\026\275Wt\024;2\251\347\274\"\372\r<\270$\034\275d}\307\274\210\252c=\002\036\200=\253;}; \271Q\275K`\203;9\243\303;?\014\273\2747\344\241;\257\022I\275q\361\205=\203\024\276\274\357\264\247\274\244\347\347<]\366J<\336n\277<\366\302(<\005l\357<\276\202O\2747*\033<\r\222.\275}\333?<\351td=F.\\\274\352\374\210\275aL\376\274kt\007\275\360q\223:\271C\037;\261\202\363=\262\035\364;-\000\217\275e\027\007<\021\340r\274\216\201q=\006Fx=\307C\263\275\244\237[\275.c\004;bh]=\241\253\010<\210\274\223<\206\261\027\275\312\031\307\275\005\266\305\275\017\236\351\274\371\022\272;\233\242\035\275J>\231\274\324\253\224=\026\001\205=\261\307\021;C\365P=\224\356\024=\320\360\t\275\343\337Q=\023}\021<\036\037g=\276s\253\275\025>\210\274\210e\216<\365\273\236=7M\320\271\030\337;\275\034j\264\274\320\ri\275\343\311\341<6u&\275\262q:\275\332\020\210\275XID;\006\363R\2750\201\227\273\003\201\211<\001o\200\275\3552\374\274\220\332\336<o\310\326\274+\221\240=\353\203\353\274p\210\204\275-\255i\275\260\242O\275\306h\005=\335\201\301\274\347\025\372\273\221d\350\274\322(\374\274t\320 =\033\206%\275~h#<R\204e=Q\343\345\274\307\301u\275\221\235\352<\244/\032\274\2426\312:\344%\377=T\342\204<S\024<\275\370\035U\275%\210\243\273\307\350\2309X\313w<\264X\031\274\361\222\246\274\325\001\004=\222\313\215<U\341\354\274&\303\256\274O\254\333</\240\344\274\264\344\203\275AI\010=\213\240\271=K\026\212\275\353\017\031=P\303\013=x\333\217=;\025\337\275\n\360\245<$\365\021=h\227\241=\231\034\343<3\215\206\275\335+l=dR\006<5\277\340;#\345*=\326\263\230<\225\232\221=\310\252\320\275\202Y\303\274f\336\206\272\232\332\016=\t\227\266<\233\027\263\274S\243\031<\334\177\266=)\177\031<\220Un\275?\021^\275\261\222\330<b\002\326\274\215\264\327\275\310i\344;\357\265`\274\352\311\231=\332\030\027=\217\264\326\275j\306.=\271\315#\275\013Nf=\365\317\036\275X\3205=\305*\277=\312\017\277\275\273\330d=\220\024\333\273x\007\t<\220\310\224<KQ\324\274\230\351\216\275\023\306\311<.n\252=\371|\213\274c7\r<<}\263<)\347:=\036G\323<p=\206\274\250\030\026=\214\200\214\274@X\004\275\0238\025\275\212r\231\275\372\2740=\365Y\307<\341\315X\274@@i\275\346:\335<N*\334\273\361\343Q;\'\2640\275\315\261G=\316\217\266\274[\230[\275\254\177\265\274\ny\006=1K\017<\201\372\036=\205E\001=\345\014\254\275\036\033U\274k7\222\275\252A\262<\016E\244<\226\340$<\267\335Q\275N\005\027\2752VX\274,\213}\275x\026\317=\rRR=>P\350\274D\254\034\275K\372k=\234`\345\274\356\310L\275\304\211v<\244\255\246<\354\014*=z\001H\274\264\235\016=F\271G=`\024.\272\315k\301<\224\\9=W\327\341\273b\211\200\275\2528\271\275y\364D=\236\031\213=\212\211\202\275}\364\036\275\363\220I\275;V\352\274\312..\274\204*\320<\366\250\035\275\312\311\313\274\013\206\\\275\273\004\235\275\037\262Q\275\006pu\275\373N\340\273\031=F=\024\006/<\222/\345\274OI \275\331\344\361<\350Al;\000I\025=\250\347e\274T\264L\274\017a\301\274\300\230M;\351\236\031\2755\362\027=\030\267\322\273b\314\370\273G{J<04\034<\363\032r\272q\004\217\274\230\227\216\275\274\032|<\271\201,\274\3555x\275\372\017\003\275\025\255\312\274S;&\272&\217Q=\t\016\235<\204_\313\274o\242<<\207\033\225\275\225\3642=x2\216\275\251\344%<%\347\212\275fG\240=c\346\357;\365\216\236=\246M@\275U\\l\275\371\375j\275$\003\001=\333\260t<\325\314\236\274\376!G\274\014%\261\274GS\220<\357W\001=5\322\025=\313S]=\"/v\275\220U\204\275&\024\035<\026I\210\274\362N<\275\020d\305\271\306\252J\273RA\221\274,E\376=\301:+\275\206\001N=;\300|<\n\341\234\274\246\261\n=\366\231y\275x\210\026\275`\031\321\274\\\2366\2758\375\030<\264?\200=\3757!<\240\0139;\305\026\256\275\n\020)\274\361\246\377<\357\351\232<N\356W<3ok\274\273\017\355\275\366\301\327\275\345\303\343;\366\224\250=\373w\363\274\177\"\001>;\317L=\005G\355<Z\211\214\275\027\237N\265\261\261m\275\266\254d=\306\276\005=\253\201\004=c\302\240<\307\326(\273\311\313\314\274m\026z\274\234\021\310:\326e\204=X\266e\2746&\035\274\214 %<\256\334\374<\037\344c\275\371\024\204\275\2656\266\273\357z6\275\276\307\\\275\314\031)=\241-c\274\253:O\275*\201\377;\310\037\000\275\232\347\352=\323/\"\275\300\205\301\273\022\036C\274H:\272\274\033\227-=\0052\362<\374X\273\274i\267\236\273\353\003\035;\315\326X\275w\231\t;\030\304\275<Z\257\302\274\3124\271<\014\000`=\034\321\356<)ib=\t\324B\274*\340K\275\325\332\004\275\013\267\266\274pX$\274-J\007=\2762\023\274\302\305\346<&d5=\256K\370\274\030\355\232\273\352\250\205\274le\232<\n\376\002\275ya\224\274\014C\340< \310\253\274\304k\307\274.\330\271:\000o\372<q\362[=C\n\336<\364\314\357\274\t\303\325<\336?\220=\301\'\t=\237\3046;H\364\301=\327\271\352=\027\337\006<\020\311\325=\240\022E\275\211\337\237\275\314[{;.^O=q\034\214=\213\353m=\322\263\031\275\r3\376\273==x\275\375\014\260\275\372\211(=\216dW\274$4\357\273\340\023\327\273\226\205\207\273?\213\221=L^\210<6\326O=\341\250\252\273\345\365&\271\213\010\355\273\366\024\266<\260p\224=\tr\313\274\0166\270<\236:\226<\217\020\t=\2453\332\274\255\352\356=\202#@\274/r\020\275\303q\377<\270\252\214\2752N\004\276\221T\222\275\340\256+\274\257\220\t\2732o\341<\201\342m=\331\226\344<\245\204\007=\276\323\375<\344\312\341\275\323\275\312\274\267\244R=\212!\276;\016,\233=A\304;\275\017\200X\275\302\021\276\274\364\226I\274\376\261\234\274uR`\274\254>\306\275\255\253R=A\'F;\266Z\265<th@;vf\232<\'\267\242\274\010Lm\274:9\235\272Y\004\002\275sc\247<\341\210\205<O\246\212\274Y\265\'\274\225H\275\272 2&\2759(\026=\353k\251=4L\247\274\316\315\241;w`@\275u\317\225=\307\035E;PmW\275a\230\016\275\230\024\217;\326\326\014\275\330\234\203\2751\035\020<Vr\373;\326y~\275\222k_;j\270\\=\257N\231=9\347\021=&\233K=%\356[\275\027-1\275\035\203\253<i\025\242\2725\373\'\274\272u\267\275Oa\246=\037\225\036=\251\251\255:\233\265\312=f\301\233<^\347\376\2748x \275+\301\212\273\014\344\020\274\2414q<(\245e:&,\251\274\255\207\322:\266\022\341\274\005\335\016<3\033\025=\0225\004\275\321\303\202;\211\3231\273\275#E9\324o=\275\030\364%\275\250\3176\273\343\353\341\2734\263\004\2757\2568\274\036Q\346<?\332\341<\3068\021\275\300F\215\274\345\237\342<\026\254V\272\260\227\376\273\025\366\220\274\377W\202=c\370\204\275\211\353<\275\271Pc9_\204\210;\021\214!=\033\014\'\272]s\n=B%\024<p\222$=\014\263\274=\306\345P=\373\037\037=\026\371\320\274\215\366\260\274\r3\232<\242se=\276\037\r=aG%=a\355\215=V\333==\351\343\177\271\223z\212\274\030,\177\275\262\210\304\273D\2537=\031b\010\275jn\230;y)\315<\323\3459=I\214Z<j\270\005=O\362\331<a\2717=\204\215\020\274X\202$;\336v\177=\265Vc<A\307q\275\004\031\307=\035r;<e\343\374\274q\222\025\274\037r~=\326\3001=60o\275\326\320y\274\014P\263<\023\032\226\273r\373\007\275\222\357,\275\304\024\326=\331\267\001\274\345\001*<\022\370\034\273\t2\342=\030{\021\27481\215<%\304\225<yQ\312\273v\034\320\275m\227\253<H#\252\274$\373\221\275\216\213\005<\366vZ<\337O\342\275\035?\013\275>\341[<\331c\265\273\277\364#=\205\302]=\263Y\005=\245\304\323\275`\374p=\371\247%\274\322\331\007=\367^};9\274H\275\315\311\021=:u\030=^\231\277<\005MM\274E\263\352=H\274\360\274\260/\353\274;\360\000=\007\255\204=\0300{\275:\220\254\275\334\216o<\311\027\231\273\267\227\003\275\364\017\232=\013\001y=qX\307<\237:/\275\346\315\322<\370\001T\274\204\355\014=\237__\275\2637G<\312k\240\275T\3425=\360\014\212\274M\206\213\274\213b\026=\376\220R=\266\336\2229\211\207\257<\2516)\275\322\370\214<\225\006\364<s\324\327\273\234!\246\273\037\242\032\275%S/\274\036\244+<\317\217U\275\202\375%=\373{6=\232\315\303\274\360\237\n=iH\322;u\232\001\274\243\361J=~\021]=7\004+\273\334$\202=\214\346\256<\030< <n\035\003<\242\371\014\275t6\033\274\232\325\022;\355\270\205<\212\276\301\273$r\364\275Ij\223\275lA \274\303\243\031\275\022D\243=\351gV\275\312\322\251=9wm=\336\204R=\277\027\312\274\232>\372=\311t_<\222\210 <\324\2449=\027O7\275G\014\310<\3257\316<\247\302(\274\232\212\204\273\023\223\211\275\323\222\2709\215\276\331;\t\025\237<Y\277\264<\243\326\336\274m:q\275\353V\366\273\006\220\216<-\373\000=o\270\203=\006\371\215;\273\377\365\275\033\007K\274\341\260o=\267\326\260\273s\320\350\274\217\304]\273=K\001=\270\261<<w\036W\275?\370R=\252yo\274\300\230\031\274W\020\314<\313\361\357<\373\302u<\n\004\024\275\225\265\035=\344\014f<\300\246$\274\353\017-<!\003\322\275&c\314\273*5k=r\223\245\274I\354\317<3\264\202\274u\242\305<\352\225E<\377@\311\274\346\347)<\375\362\031\275\373}+\275nT\247\274f\375F=\357\207\231\274\276\266\201\273a\305\037\275\314\347l<\254\344\005=\223\261\354;e\244\235=-+\25495\235\360<\336\201X\274\004\205\360<\360r\265\275Z\223\022=Z[\037<Z\375\310;\343Jh\275\274\241\021\275]\261\274:\230,\000\275\276\000\257\272\343}\034\275Vq\010\275\265\324\033\275`o\232\274r0\342=\355q\033\275\325tN=\2730\005=\272\271\306\274z\214\251\275\315\250\007=f\253\002\273*\234#\275u\036\332<\332\220S=\360\275\372\274W(\034<9\001\231\275\341\252%<\366\253J=`?/=\033\'J\275\363\276\214<\365\366\237<\000\373f=ZZ\274<\257^t=\344U\021\275(\325\210\275\210\037\030=\203?G=\237\"\006<\024\270\315\275\034\324\214\275[\205U\274\314\352\214\273\321\342\300=\276\317\311=\207\340N\275z\002\013\276Q%\323\274\016\260\003=\021m\344\275\036\276\222<\300\274\222=\322[\213;\263\253\006=S\245\201\275\234\036\320\273\017\371\372\273\225Uw\273Q\331\242=\204\317\242\275\256>\360\2743\273&=\332\002\305\273\311\222Q=c\007\340=\265\327\316\274t\022v\275\256h-\275\026\232q=h\252\"=u\006\327\274\006\203\034=\376\202\020\275\313\215W\274c\035\323=\242 k\275z\340\224<\022G\235<3\217\032=Q\276\310\274\367\340\325;l\241y\274Y;)=\226U\221\275\253\002\367<\363\366\202\274\255:\345<\371#\245<N\034\270:\237\000u<\210$\275<\352\350\025\274X\353\271<\305\265\272\275\3128\244;\301\366\263;\314r\017\274\000~P\273v\307\250\274O\366b\274\274\"\233;\344^\225;\273\035M;\331\321_\275\256\023[\275\027\311\'\275\362\225\036\274\364\271\353;\240\372\212=\235\267\260<\3573N=;\204\001<\267F\034\275 \365\235=\235\263p<V5\225\274\250\t\230<\346\375\223\274*E\367\274S\214\206=2\214\232=)R\224<j\322\236\273\235\210\020<\203\007\220:\313\314\025\275\037ZK\274AO\020\275mL\220\274\322\3227=[\204\016\275F*5=c\236\300\275\362@\315\272\020>\271\275`=4;\316_\261\275\235\264\257<\231%]\275\'\202\"=\356\004\213=\212\0219=\232\274\343\274\355\337\307\274\030\014G=S\230\211=\013\273\203=o\304\013\272\207\027\241<\356}\331\274\213\2457=G\203\036<\322\002 =\210\017\035\274\335=K;\347\223\3519\205(I<\243\356h\2755\366\251\274y\372*\274o\230\264\274\026\214\236<\346\0374\275\372qJ\275tDe\274\331\372d=#[\237;f\\^=\255%\212\272\266\006\243<N<\310\274}\005\006=\3115T<z\2149\274\244x\010=\013UU\275v\302\036=\316+\326\274\203?\204=1Fm\275\331\300\376;}:\205\275S;\266\274r,\214=\213v\263\275\210\346D\275\373]\246=CR==K;\035\275\215\247\230\274\201\330F=\356X\316\275\237\030@\273\210~\353\274b\262\316\273\332\364\036\275\027h\343\273fW\032=\301\312\"=\016\354\250;DL):3p\005\275\005J\365;\'S\364\274(\213\343<Px\025<\022 ,=\235^\036={\003\227<`<\213\274\266\020j\274\006\365^=T`\361<\'\246\240\2736\263\374\274\246\267\351\274Kp\027=J~@\275e\250B<{\002\217\275\242\031e\273E\252~=\370\344\200<\311\222\217\273\215\177\030=\361Y\005\2769\325\024:QP3=G\316\034=\261\204]<\357\273\266\275\257\000\003\274\333/\217\275\210\\K\274\031\312\347\273L)\373<\230\267L\275\367\320\340\273ur\277\274\005+\374\275\234\376\n\275\312-]=k\032\265\274Q\350\260\274\260\257\331\274\020J#=G\306\031;\207~\006<\256\323\221\275\317^\364\273&\276\331<`\302\371\273;@\354\274V+(\275iC\255\275Z\345\254\275\264\331\256\274\375Ps\275F\250\232<\343O%<\n\236\356=Dw\343=\234\307b=\314\277Z\274\254\000\251;E\210~=K_\r\275\324\233G\274\332\302\201\274\363X\001\275\007{\004<\360\326\001=\350\260\002;\204MP=\032\360n=W\231\315\275\253\224\325<B,\215\275d\373r\275Ny\017\275\021\026\346<\322Y\243<!\317\300\274tA\005=\371\200&\275[:;=\335,\320\275\376\205\025<\264\235G=\246c\261\275&Q\246\274\275N\210=\214*B=]\276L\275\305\224\230<\321\211\3019E\372\336\274\207\206\201=cL\303\275\"z\031\275\263\354\343<{\237\310\273ad\223<B\363(\275\324N|\274\205\203\262<\264\234L\275\033|\361\274\261\306j=\355\232\014=\255g\272\273\370C\'\273\302A\357;\366\300\234<\365\355I=[:e\2747\230H\275\215\373\215\272\244\307\345\274;]\272<\374i\220<\323\001\244\274*\265\024=%\026\363\274\331kq<\204_\010\275m?\231<\356\323Q=\003T\022\275\354\261\026=F.;=\324|\272:\177\270\306<\201\026\240<\023\342\320;\247!\200\273\326\355\200;\370R1=\252\267\271:\341\271J<\003z\227\275\367R\035\274\307\270~\274\222\336\246<\344\247e=\271-\002\276\247\327\341;\220f<\274\031\234\032\275e\327\314\274\216\021!<:\222\340<$]=\275~\nV=(\037W\275{\2023\276o\327\222\274\324pK=\323D\212\274U^;<[\013#\275_[\236=\216\314\340<W\246\326=\277\305\253:\022\366]=\356\250\034\275\354\317\221<\232{*\273bgb\274\273\235%=\231;\000=\241N\360\275\005U\231\275.{\365\274&\024D=c\241\361;\202\311V\274\367!w\275\240\367e\275I\\\240=\177W\033=\345\\8\275H\305\356:s^\205\273:\177N;\256\243\222;A\035\305\274\34600=@\264\316;\273\033^=\252A\240\275\256\272]=\340\"j\274?\212[=-\224o=\345\3625=J\247H\275\351\347\217=\267\305\360<H\'\242;\274\030\036\274I}\246\275\272\244\306\274(\262\273<6-\255=\372b\347\274\365\251U\274\036\024\016\275\241(\264<\375-\034\275\"\351$\275p\233\320<N\377e<\255\365\007\275\005\267\243\275\326\035\363\273\017\353\320\274\030\016\022\275\306\242\336\275@\022+\275\366\2664\274\222\231\364<M\001R=\233\r\205=`j\202<J\366\025\274\236\035\235\275\344\n\206;\221\"\3229\316\340\010\275z[\204=\023\225V\272\251i\031\275&9\342\275\0031i\275\326\316%<\014\025\225\274\312\0035\2752-\332=~\356k<\322k~\275\203WF\275\211\375\222\274\303D_\273\231\301\220;L\235\213=\261\350!=|\242\007=WW\276=\027\233\250\272\035\352)\274+\357\346\274\022\307\263:\342}\267\274\330 r;\205\313^;/\036\265\274\254\317\027\275_S\306\274`eb\274\356\013\231;\231\3620\273\302K\304=\3645:\273\'\206\355<\301\033\307\273\335>\340\272Q\205\023\275\321\020\211<\353\003\336\274%\035\024=\344\227|\2735Y\036=P[g<\r\334\305<\211\024Z=\177\350\324<e\350\213=A`\031=\204\2177\274I\235\203<<\035\210<_\007<=\005\317{=0\367\244=}q\257\274\r\206\022<\325l\266\273&\335N=X\230\023\274\342K\244\275r&\212\275\213\320\301\273z?f\274z1\227<\335\037Q\2756r\205=\203\025\202\275\256;\314\275\032\203+\275\202|\206\275\266\304\023\274\006\021f\274\353\363\206\275\343|+=y8\021\274\352\203\"=\016\325B\273r\035\335\272y\225\247\275\311P3\275\333\264\312;\262\035\324\274\362o\014;\307\2242\275\322u\300\2757\\B<2H\230\2745\356-<\t7\036\273s\232\002\275\004:\243;\320Z\020=\364\205\272\274\223\266\310;\323&X=m\302\270<\001\205c=\365)\017=\200\250\004=\252&\'=\005\373\004<\355#0=\r\344R\275\267k;\275b\203\350\274$=\275\274\237@\243=\374\252E\274\366q =\367\211\220\274(c\362<\271:\213=Ze\223\274\335Wn\275\254o\001\275/\257y=\253\032\336;\\c\273=\3202\036\275l\261(=\220\3563\275s\370;\275\303\\\002=\326\350\241\274\033T\\\275\217o\207<\300\0273\272\213S\021=\244\t\246<F\336\206\274\223\321\034\275\376\353\377\274S\255\332\274\374\n\364\275\262\016P=6\303\203\275\007\021\266\275\r\026}\274\267\226\014=O\346\353<\251\322\252<\371\372\365<-Y\204\273\035\241\007\275\305\320\313\273\331<=\272le\027=\244\252\004\274\226\306\306=\204[x\275\305\013\205\274a\031\\\271E\254\206<v\344s\275j}\255<`}\022<{\301B=\207Wa<\211\372$\275/\026t=\314r\243=*\022f\275\006\253G<\311\355\272<\321\2165=#{\265<v\315u\273\370\272\033<\270F\320\274\246\374\357<\022$\223\274\304_f\274\244\352\316\273\307\022\216:\005|\277\274Ti\001<\244\341@=\301\317\272\274\224y\017\275yf\203\274\277s\262\274\302\225T\275\034R\322=\374<U=6W\230\274\316s\300<y=\021\2748\225G=)> =\215V|\275 \232\005\275\\p\025=z|n\275\203n\336\275\323B\035<\333\325g\273:7\302<~\212:=\345\241\021>_\241\027\2759\331c<\177\331h<\300|\267<\317cr=\254\335#\273\245s\342<\243\332\030\275\371\264\022=\370\016\225\274\023\304\203=Z\366\231\274\314\026\231\274\253b\032\275G\245.=\3264\377\274\030\r$=5\303\010<\343|\317\273\265 m\273\243\032C=\201X\361\275\363\217\203\275\014\317\024\275\026K\230<\225\367G=\005W4\274\032\366\206\275\237\241\241<\247n\017\275\260\302y=\200\351\264;\357K&=\272\014\031=\303P\037<F\014\233=\304\272\t=g\2132=Q\357A\274,\377\212\273;\221\017=\334\2743=W\035\031\275E\226\306\274<\351\212;\276\364O\275\245\376X\274\016\310*=O(N\2758\273s=\307V\243\275kS\272<E\346i\274\365>\026\275\241\330\2546Yu\241=\267\022\320\273\327\252\204=\216\020\234\273c\240\274\275\013o\341=\220\233\327\274[\226`=\361R[\275<\264B\274\303?d=\246\314 \274_7\264\274\263\254\207=[\237\216\275\013\216\320;\025\271\n</\340\201\275\232Wu\274%\032\310<\341(4=X\356\200=\334\266\330=\265\330\033<\342\2523=UL\261<\315\324\364\274\275}\032\273\374NM=\340\027c\275k\347\305=\022\270\370\274\016<\233<w\036\220\274\010\013z\275\320\236O<\026\251\310\273\244\335\347\274\317\304\003<\316\330+\274(\\\212\275\007\351==\247\200\021\274F~z;\035\245}\275\254\372\270<z`\267\274\356x0=T4\272<\302f\254\274\334\315\016\275)C\037=\230XD=\262\252\261\274@MP=G\321\250\273\347\246\201<\275~\226\272>\237\024=\001\276\273\275\003L\276\273&\273\340={\261F\275\272\222&\274\315d\377\274\273\001\246\274\352\007\037<\\\300\374\274\177^\210=\364LT<\300\207Q<%\251\365\274\323\312\277;\316\236\337\272j\364\241\275\017r\025\275\2402>\274r\271I\275\346\364z\273:\261\034=\017\312$\275\260\375[=\220\342\"\275\022\257z=/\335X=\301\n\254<Mo\307<G\331w\275\367<\340<O\215\330;\275\367U=\327jQ;\363\353\352\274\202\036\253\275a\224\022\275(S8\275\0109b\275\367\307\001=;.\266\275\025\nD=\3220\317<q\367\023:\320g\255=n\273d<\2469#=%\373\n=<k\035\275O\233\256\275\211\322l=\r\034\220\275\372i\245\275>|[\275\003\2300\2735*F=(hd\274\365\321q\274z\\\304;\205(\331<\026\366<<\373,\202\2744\213G<\035\247d=c\221~<\326{7\275Z\301[\274?:\r\275x\340\260<\310*\352\273Y-\351\274\363\232\025=\206\243\301<\265\237\004<\244\005\n\275 \375i\275M\3269=\0176&;\355W\223\275\362\230u\274\232\\\346=G\271\305\275\0001\316<rd\243\275}42=\341I\263\274\275\344\241\274U\331\352<\224\342\300\275\000\302\263<2\377==s\3773<I\257\222<`A\215<\221\335\304<GJ\340\274\277{W=\r\325O\275\002\330\204\275\344F*=\3068\006=\333|V\275\356\3706<?u+\273\376\372\017=\354\232e=\316J\025\275\r+9=n\274\363\274\t\311\347;_\037\034\276\345Y3=\252T\036=\004sI\275\360\345.\274U\351\243<\r\251q\275>c\341\273=\237\234\274\026\353_<\025\220\026<6\033a<\302>\373\274wKY=}\305\251\274\251&\204\275U\\\307<\331\325a<\005\270\017=\2023\000=\274\341\037=\355\277F\275\244q\324\275\007\247\030\275L\365\201<\245^\271<n\005\017=\322\342\306<\353\376\n<\014\253\273;\202#c\275\026\216\324\272rr4=\202\373\316\274G\037==\334\205\033=\215\306\237=e\335 \275\200\205\022\274\267l\207\273:\024,\275\027\353\211\274\274\212\314:\347Xj\275\230I\302:\306J\026\274,\332\345<\363\235\'\275\312\215\300<\371\n\'\275\310\020\'\274\'@\253=\342\373\206\273\203\233?<t{\250<\033\341a<v:\211=\036\313\214\274NU\236\274\211\261<\274\023\n9<\014\3432=^\231E<\354\212\375<\315\362\216\272\273T\002\275\204\242\232\273!%c=7\t9<b:\325\274\0245:\273\020\'\001=\356\211Y\275vx\244\275Z\360\320<\000\354x=\233\221H<\366\177{\274\320D4=u\325\322<v9I\275\225F\232\275\017~l<I\177\301=\223r\261\275\342\311\036\274D\334x\275\016Q\264\275\372\373\250;\270l\326\275\031\241\300\273\003\3065=\364\360\214=\031a\217\275S;^:d\345\032\2753\310\210\273\2318\243\275\005\017\216\275\030K\223\274W\236\374<L\345\252<\211\350\\<PP\206\274}\201e<c\302N;\240oe\275\324\354\216<u\3044\275\337\353i\273\232\364\322\273\234\343>;\310T\222\275\024\373\220\273\340\323\346\275\031\330\021=\251o\025<:\313\301\274\323\2030\274\335P\316<\025\313i\275\336\314\263\273\305\277\220\273\274=\373\275/F\313<\350\257\242=\323\365m\274}1\213=\277\256$\274\377Y\337\273?\241?=\255\342O<\361\341~\274\n.\035=JY\265=\3229r\275\262=\236;5\276G=6\000\274=\216I\210\275\301\2225;\371~\261\274\222\373\232=`\350O=x\273\321<5\225\010<\251\032\256<\301W\037\273R/4\2759\345P<h\177\257\274>\273\034\275\214\264\371\272\275_\226\274\242\220W\275\316\261h\274\221\254-;\375h\315\275\221>\341<\306\375\257\275#&\225=M\\\030\275\341\003^\275\324\377\177\275\331\216U=\270z&=K\231\357\2743\220\347<%\000\227=*:\305<\024\221_=\2157?=b\n-\275L\020 =\354\322L=\0061y\274DH\324:\227\253\215\274UT\355\274[\260\t=\353\rQ\274\2266$<r\317\352<\362\304\236=\027\337\212\275\362\237\255\275-\330\022=H\255\014=\324\352\277;\033\202\210\275\211\204\215<\271e:=\350\310\303\271\337*\334\274\224\202\330\273R\331T<4\007a\275\300\374c\275\327}\032=\010\267\217\274T\201\003\274$lb\275Ww^\275MS,\275\014\3311\275\320\3302=#\342\261<5\340\211\274\031\022\022\275\273\262\235\274b\331\353<\326\215\205=5\310i\275\330\276H\275\005p\216\274Y\356\353<\336\2512\274T\013\245\275\213c\r=\010\351\250;\257\314\205\275\262#\210<\311\340\013\274\315\251\352<\203\3473\275\177\326*=\232-\356\272\271\271\345<\270Fe\275\241\035$=\334\227\2729o\270\206\275\232\027\310\274\361\353\305;7\342\242\273\364M_<5r\035\274\020\216\207<\255\266\202\275\013\010\023\275qU\254\274\023\346\t=W^\203=\245\315z\274\370+a\275\300m,\275(\375\331<\364\312\263\275\354\007g\274\376\331\240=Z\315\265<\301\363\301\2742\333K\274\237rc\274\037\037\r\275f@\240<\313\022\230<\315K\345\274}\232\301\271\354_\333\274\367\257\327\275\207\004\213=<\034\024<\006\241\344\273\254\001>=B\331\215;\377\t==\311\317\364<QRr\275,/\225=C\221\254<F.\203\275\201\356\017<L\317(=\306\316O: \315\354=\200\235B<\206J\177=\227\301t\2743n\212<\215A\000=\222fT9\3110\000\275b\237\233\275\270\305\246<8,\325<\246\nJ<P\336\305:\230\206\0329\323_\215\274y7\035\275\366\354G\275\266\273\312<\224\246T=\345i\017\275\n&:\274\nE\200=\005\003\201;(1\270\275\236\"\226\273(\0201\275)\205\n<o\003{\2757*\266\274\227a\\\275\321\025\275\274\007\2223\275l\323\246\273!k\273;y\031\377\274\272\r\007\275\335}{=\240\344\227\274\357u\312\274\275e\377<]lZ<.:\t\275\341\353\237;@\006g\275{j\007=i\232\276<\213\235\030\275L\354\023<\312\307!=l\330\231\275fp\233=\226]4=xLk\273j\017\256\274\205s\306<\320t\274=I\267\216\274\325\256{<\022\227\206\274y\334B=6\010\341\274,\027\367<\034\"\r=\252\225*=\367j\206<a\252\r\275\355R1\274L\241\272\273(\313Z\275\301}w=\013&#=\002\017^<b~2\275\017\321\207<l\'F<\227[\227\275\213`\231=N\244\356<\257\306H=\254Z\025;\357\007\312\275\347\014\257=\316\r_<\nU\r\274<&\000<P\365e=\241$\357<\216\210\262\275\260\020\216\275/\234T\275%T\277\2741\023T=\036}#=Atk\274\025\262\210=?\350\324;\3243f=l8{<\270\211\311<\363_t\275\017\264\276\274\007q8=o\333\225\275\031\312\332<j\2458=:\327\234=\334\017\'\274#K\352<x\006\010\275A\317\306<\210\013\035=\357W*\275\310\315\350<\336\007%\275*\020\242<n\237\307\274\211>\255<\301\312\207;Y\303\257=:\376\332\273\030\224\376\274\211\360t<9\305\024=\204P\303\274\201\025\213=\016;b\275\314\302\006=:\243\\\275p\005A\275\241\177\315<w{\242<\3404\252=\222Ou<gk\'=9\373\246\2749\\\211\272!\352I\275T\331D=bL)=msn=\320\027\366<\357@\214\275\375 \032;\214M)=\205\030Z=;\233I;\275\343\010\274R\003\r\274\0038\222\275e\'3\272\010\263\230;\356\353\005=\005y\r\275\261\0202\2743\306\373<\320+N=I&m=\356LW\275`\274\342;)\0178\274\311A}=\201\370\004\275\322\310Q<\300{A=(\204\230\272\331\264\201\274\001\356\202\274$\360(\2756\312\010<x:c\275\312\021\301<\024)\267\275=$\342<\333\214\367<S`\337\274\313\353\236\275C\n\206<\262\001\244<\013;\213=\334\207\026=\237z\207\274\336\255Z=8S\276<`G\337<\222\276\305;\301*\314;x`9\275\230xJ\274\030\347\211\275\016\345\266\274\276\345\225\274\005\333\344<\255N\351\273\033\350D=\332\304\306<(\302\334;\"=,<\307D\241\275\355Q\322<\201|\277<_2\275;\271\023[\274\275M\235=C\332\224\275\007\005\200\275\014d\244=\361\251\352\274.\251\272\274\274\215\024=\206\033 \275\2421\275<\257\334\277\275\026]\235=w/\204<\n\235\267<\213\007\374=\313\006\014;C\270\274<\250)j\275\254J\271;s\331\323<\243\307\017\274Q\276q\272\244T\211=Q\020\224\275\267\324\253<\035e\247\275~k\356<D7#<gEJ<O\374\260\275db!\274\315\356\256=\27196=Y\017\351=\0107|<\316\004@\274\213n\326=\006\237\026=.\2602=\032iH\274\255\006S<\352\332\347\274\345\242\224=w\376\367;\005mo=\245m\035=\n\345\242;\024?\243=\237\037\336<\254\360\245;\240D\023<\344S\":iv\361;\243P\235\273\245\326\247<\336\326r\275k\323.\275v\354\"=\252\223=\273\224&\210\271W:\345\273+\352F=\257\"1<\352.\257=e\303\330\273\022\355\330<\262KJ\275\316\037<\275\021\026\333\273$\312\200\272\207I\342\274\202\267q=g;\364\274\211\032S\275\003\3541=\353\225\334\274d\311i\275@\363\232<\306\027\230<P\222\267<l\315\304\274\374\351\276\274\006\233u\273k\376\267:2\014\363\274A\210,\274\0300f\275D\nI=M\336\244\273V|N=\341Ji=\024\215\260;\311a\350=\315\376\203<\017\223!\275\212\021\000\276\006z\221=\315\232{\274\234\261\217\274\211\310\275=\236\247\027<:\235\245<\017$C=\312*\224\273k\234\324=\276<\377<t\"\225\274\351\365\203<\007\231\003<\324H\204\275\320\226\203<\321\362\243\273\306w6\275W_\225\275\273\232]\274\317\3014\275\361\001G\275H@\367\274\261\031O<\001\331M<B\203b<\030HW\274=m\367<\340:\'<\273\212\272=\\\325\327\274w\020\220\275\204\372(\275\313\255\001\274\314\036><P\312\005<\302-v<\031\347\311<Ou`\275\017\017\'=\255\332F=\257JX\273\255\370\247\275\350\316\216=Q\203\216<\024\234\274\274y\036H;Z\315\325\274\200~\206=\322\377p=\262\035)=*\251\034\275\216<\203\274\324\3575\275k\210\r=\005\333\234;\376\243\342\274Q\004\220\273\307#\227=i:\214\275|\233\223=(\320\210;\022\350\013\275G\244\363\274\262\225\001\274\200\335\211\274\000\372\004\274\261\035\324=\275e <\024\225J=S\022\302\274\206\341W=\020\214\002<\354\022x\274[\020h\2759\347\212<SS6\275\317c\261\273\213\376\035=x\223\223;\377\245\233=E\n\255\274\305\016\005=n\270\261\2759d\267;&\2241<\326\242\007=\301\203\207=\355x\000\275\353z\214\275L\375\021\274\267\177\262\273\240r\217\274\tpT\274\253\033m\275\023\205G=\227*\254<\231\371\277\272\351\337u\274\2572\241\275u5\033=\'9\200=\207t\202\275)<6=\367\204\215<\201\345\345<\274\274(=Dl;<\324\250z=He\263\272\234\272\274=\325\001\301\274?\324`<U\"[<\026\207\362=\'T\232=\217?L=\376Jw\275\232\3141\274\211_\227\274B\372\346;\306_8<\305\0346\275Y\204\270\274Ds\337;W\254\324\274.\324\002=K\260z\273#\376\272<\265\260\261<\256\260n=\253\257\320<:,\335<\236\374F;\026\306\366\274\2658\004=\2319\201=8\270#\275>\343\220\275b\372\247=\346\262\361;S\270`<]\233\200=8\202\027==\223\312<\225;\001\275Dgn\27417\035\274|9.</\314\321<s\256 \275\032\220\233\274$8B\274\253.%=\316\312I=Ud\027\274\245\253\370\274\215)]\275\200\036c<\354Y\335\273ap8\275X\335t=\014\234\220=\227=\253\274\346]\177\275\036-[=\252\"\343\275\201\371\036;\t\267\264\275Y\230{<\240\355Q\275?\303\r\272\213{\034\275\356x\343\274\360y\353\274\0072\237<\210U\325\2733\251R=\002/\246<\014\322\223\275\311V\030\275\335\334\363;\r\335\221<o\233\223\275@\220\347\274\177\273\237\275\230Z\373\273\336\266t\275)\"\247\275\315\212\010=Y1v<\220\2474\275\036n\271<\355>\007<`\273\017\274H?-=I\213\010=<\342\205=\010\344\250<VG\223;\322\024\r\2757\221*\273o\307\315;6\351\267<\370\\\267=\017h\221<\314#\256=\252\377t<\310B\245;!\372\267\275\2248\026;%\204\177\275L\023\233\275\366\322\217\274\271\307\000<P\205\006=u\2048\274\275\t\251\275\316\252\221=\333ou\274\246y\242<@\243\266;hT\214\275Z\324.=\220C\323<\013Y\216\275\017\234\204\274~h\363\274\t}l\274\3705\337<\205\241\232=\230\274\227<\334\006c<&\350\205=\236n9=\246J\245\273HS\200\273\313LB=\217\266\242\274\372\233\020\275~\020\205\275\020o\030;%\3154\275\231\325s<\326I(\275t\016\336<\362\320\204\275\262\375\331=\224\276\275\274ba\203\274\246\037\377\275\214V.=\222\303\267\274\004\026)=]\265?<\006a\233\274\306\361\233\274\2036\213<\202\253\346<\311\221g\275\346\235\025\275\353B\236=M:/\275\332\210\350<\360Ag\273\371\214x=\375\213\201=\264\341\007\275f\271\236<\315X\234=$\353L=\246+\357\274\340p\204\275\275q_\275\266\213\215\275A\344\264\274Z\212\226\274\263\331Q\275nr4=\201Kf=\256gm\275\235\337\227;Co\002=\363\304*;e\020\222\274GC\307\273\333\n\361<\332\251\270<\331#\261<\260\306u<l\255\253</\267m\275\343\260r<\223\022w\273\016=\206<>\336A=\257\247\250\274\262\366W\275\245\333\024\275R\310\312\274\204\200\302;\004\363\256<\360\251\017\275\300`\t\275\305\213,\275\325\213L=6\010\216\274\357q\211<\227Pj=\010\252\367\274\024{e\275\303\221\006=\000k\302\275w_\317=\240R\201<k\3402;\024\311C\275\272\336\347<n\005\236=\261\025\377\274\032\346\220<q\240\024\275l\200\361<l\347\376<\023a\r\275\336\354\177;Y\271\304<\2222g\275\324\245\256;\316e,=\262\327\3449\201\024\324\273?\007\016\275\267\370\036\274K\014\273<$\360r\274\364>\266\274\372\206K\275:\214\350\273z\014\353<\362K0;ABk\275k\263f<7R\235=\017\343\325\274\253\302|\275iw\320;\376-\263\273\343\253X\274\214\342\t=\370\353\227\272\256R\032=\245~6=\177!Z=\033\211\267;g\025\260\273\302\363\310\274?|@\274\035\227\215<\344hY=\006\260\031\275\337\227^\275\235\366\324\274\310\'\336<\272$D\275\312\373\205\275\250\226\244<\235\370\001=\362\035\305<v\312\351\275\331\326\273\275N\274E=P\031\273<S\340k<\215\250\261\274\037\323\263\272\361\000\017=T\353\201\275\240\226\037=_\rZ=\034z\002=\362\360\224\275\344\203N\275w/)=\005\275\247\275\341\336f<W\302o\275\356S>\2740\367\364\274\2418\365<\225~\354\273x\214/\275\305^\372<*\270\304<\275,\352<.\024\242;\240P\335\274\233\3550=\001K\350\274\024\340u\273\372h\006=-\355<\275\254\371;=C\0279=\200y.<\334JY=\034\304[\275\310\270\022\275\333\026\321\275\311nG=\002\222\334\274\253Z\033<F\302\353;d\001\213\274L7\261:W^\236=|\025U=\025W\363;z1\270=\210\343\033\275\356>\226=\232fD\275\"\352\007>\'\344<\275\377A\315;\361`\321\274\004FH=\241\310\236=\3565\360<\207\0339\275\353\037V\275\014g\315\275kw\032\274U\217\210=\35758=\002\257\244\275)b\273;\323K\201=\364\312\264<\010\203\226\272\310\206\240\275wV\213\274\023m\335:\326\033{\275\036}E\275\001\315\274\273\2443$\274\331\030\243\274Z/@\275\254\023\251\274\031y\245\274&I\271<\023\233}\274\214\344\275=\211}\037;\240\312\036\275\027&\254\273t\317>\275\321f\030=\034\224\254:Z\274\202=\214\330\030\273\331\267Y\275\32521=\357\353\350<~?Q=:\363\n;\362\026\246\275\216Xe\274R\032j=\360#\227=\251. =\323\204B=\351A =\017M\026=\220\355\n=\326Cg\274\361j\030\274mw,\275\300\335\210\275\320\026\205\274eL\232=\374$]=]d;=T{\331\273I\333\021\275S\353\376<E\303\026\273\3002\201:\201\017z<+-\341<\310\350\014\275w\020\312;US\007=\355\252,= \372\322:k\216\230\274*\036_<,@\"=\350\224\347\274\252\203\215\2754?5\275\320J\254\274\355\027)<JA\220\273%\320P;\220\236\240<\3643\230<\371(\362;\277R\000=\367\031$=a(\205\274;A\357\274h)\277<%\3665=\327\2402=\232\3309\275\223\362\214\274\013\342\232\275K6\256=ZT\357\275{\'\251\274\201.\375<.*m\274\210\033\240<\014E\367\274\264\255\210<\337\364Y\275\353\230(\274\205\373\236\275\206x\036\275\340:\311=4\202B\274\322\265\025\275m@\327:g\300\207=\336\310\336\272z\222\"\275.\014U\274\316\030?\273\267 \271<*\026\002\275\325@<\275\037\205\242<X\340\341<\375\007)\275\367j\213=\004\276n=LP\203\275\265\355l=^\237\274\275\235h\367\274e\237e\275\027V\321\274\376\032,\275\276]\212\275\333\357\005=F\273\t\274\350\230\233\275\"\236U=\336~-<-e\265<\241Y\260\273\240\350\034\274KS\231\274\216\230\026\275\375\250\016\273o\301\226\274\202w\024\275\3769\211=\316|\244=W\242\216=\232`\253<$\375.\275}\244\013\275\223Y(=Y\233\245\274\253<\343\274wD\230=\373\r\031\274(x\321\274\223|C\275%\266[<v\330w\274J{\361\274\247\033\305:?3\203=\001<\247\274!\3766\275\016w,<\n\254\203\274\361\"\325\274\300\321\004\275\341\364\371\273r\365[\275\326\263\332\274\356\023!<,%1\275\344{\353\274<\211\236\275a\274\362\273!Gr<\r>~\275\t\024\007\275\322\343<=\252\307\"\275E\275\215=Fv};\345\265\"\275\013\317\203=wB\036\274\230\002K=m\260\035=wh\006=\261\270@=\256\334\335\273\276,\260<o\n\366\273z\\\361;,\030M<Li`\274L\322\316\275P\365t;\305r1\275HG*=x\340\264<\013\336\221\274\365*\007\275\265\'\231=\245\304\251\274\327\234\351<o#\311=\300\353\344<\272\031e\274;\032\275=\363\237\211=\336\276g\274\005\224_\275\264\301\364\274\352\202\200\275{7\373<\005\372\000\2750\354\307\274\320!)\275t\200 =\201A\375\274\212\"\002\2759\0052\275\310!\223\274G\306.;.\366\364\275\241=\000=\004\231\000=\031\375\302<\002?\237\275\357\247#\275>!\312\274\320\035\223<\237\371M\275\367\356\210=p\356\350=\022=\314\274\3550\314\274[\253!\275i\210\347\275G_\361<2iB=I\233a\273g\360B\275\257\307\304=\304\322\r<\221\353@\275\267d\276;/)\255<\026w\321=\256\305d\275\316fp\275h=I\275\325\345\314<,\274\317<\233\362\324<5\314\032\275\335\220\234\274\2254\302<\365\000\303<\317\237\225=\";\023<yD\305\274\262\363\256=\326\223U<EO_=,\r>=\226\354\030\272b\366\317\274\272\307\247=\020\024\242:\266\246k\274\323\005\327\274\260U\270\273\240\225p<\005\024.\275\311)\333<\305\005d=|^}=\3210\310;\t\314\217\275\2146L<c\342\240<=^3=\306\237\230\275\005\245\372<\037\024C=\377l>=\376\242\336<\021\366\225\275\226p_\275![\300\275\322\014\207\275q\261\361\275\250\231O\275V\276\322<<\035\232\275\026\217\r\275\271\202)=\000\023n=\242\327\032\274\270 _\275\257\376\316\273\372;\001\275\377\351E\275\312<==\376\206\357<\325\362\274;\354?\251<Sv\352\2748\306\017=B\3756\275\323j\333\275\360\344\251\275\236\t]=\201\314\303<\245\241\025=Nn\"\2757\037M<\234\336i<,Y+=#\367R=\222\217.=\301Z2<zK\030=U\311\200\274\370\303\272<\004\346%\275\237l\341:\243~\036\274\271h\210\275\344\245\372;\264\350\350\273\364_j\275!\373\364;/}e\275\367\363\312\274\255\274\356\274\216\004\305\275\220\204X:\310\002\005\274\031\366r\275\267o\341=BJ\2629\376\322\365\2738i\337\273dkk=/\246^\275\261p\346\274\377\204:\275D\351\335<\275;\"\275\241\225\266\274E\230\270=\222\272\361<N\210\240=6V.=\233\364\303\274\304\323Y=\365R\261<\262\220.\275\264\261\022==\302L=\324~\024=d\210\315<jX\306\274\274\336\200\275Tm\264=\n)\312\274\277\267\236\275T\363\266\274\333\373\031=2\343\345\274\335\231v\275\337\214\217=\034/I<\224]\032\272e\326\371<\302Ij=Y\207-=\002\317\016\275\373<\307\274u\266\022\274i\365\363\273\263\000c\274X\024\215=6\264e\274\2504j\275j\263J\275\373\'%\275#az\275w\214\347<\363\205\000=s\346\217<#\272\211\274b\2213=\222l\032</\307\325<\377&\237\274\271 \270<\"0\225\275\312\344\347<&<\036\275\350>\350\274:\277\220\274\320\370\323<\202\302\r=#\356~\274\233\225\270<\357\263[\275\237\343\013=\246\244*\275\211\353O\275\315c\332<l\000\210=Jg\363;\025W\250<|i\020=\"\256\322;k\220\244\274\266x^=\016\243a8\341\234\340\274\376qm\275\030H\341<\021\324X=M\326\'\274\233\237-=4K\261\274&A\246\272\247E\205\273*\261\313:\362r\242\273Xj\002\275\340\313\276\274j\177\250=\254A8=4_\220;\t\010C<\000z\205\275\267\245g\274^\026\203=\231\267\021\275\253ZD=F\035&=\304\367\242<aB\266\273H\027\364\273\207\356+\275\250<\261\275\277}\026\275\007\310\036=\0034\255\274\017\035\005;\361oL;\232\344\306;u \t<\354\376\342\274\212\370B\274\314\014}=0\312\027\275\252vc=\365Z\356;\004*E\274~\263e:6X|\274\202\n\315<\202\355J=g\205\026\275\323\323\220=N\265m=\366j*=X=\034\275L\301<;\033\347\270<W\323k=\010E\211\274i_\255\275@iE\273\037\0354\275I]*\274AG\225=J\241\255\273nJ\010\275P\200^=g\"\001\276\273\360\"\2755X\200\275\236\223\3279\n\315\335<+\252$\274\363#K\275\222Cz\274\\\r\215<#r\254\274\315\255\322<\347\356R=w\303\006\275\264\233#=9\200.\275n\026Q\275\316\322`\275\010\223\251\275\202\034\307<\226\273Q=\256:Q\274\343f\337=0)\022\275R=f\275\254\211\213=_-Y=\021\214\211=\t[i\275?\255\030=\341\332l;\003#b\273\354\300\255=\205\360\255\274Nx\371<yW`\275\337\267\302=\217Q\272\274@\267\317\275j\367\201\275\024<<\2746\234\207;#r\271<\300\365W=\'$\363\274\251yG\274p\360z\273\367\367\251\275N\211\226\275=\2614=\002S\277<\371\232\325\274t\274\'<\340.\345<\354\265\t\274F\"\000=\t\270\232<\276\331&=\340\220\202\274tk\300<\322\241Q=\214\224\000=\270z\315\275\301\032 =(\320\307\273\367\337d;+\231\201=\317\025\335\274\030\204:\275\022\311A=\212\304\273\274vx\272:\362\360\231\274t\213[\275\232\303\340=\032\240\215\274\330\234\316\275\273\205\323=\220~\234=\354\326Z=\266q{9\232&\241;\252\302|=\343:\247;\"\320\007\275\354\316\354\273d\002T<\367F8\274u\215\221=y&r=&m\243\275&\027\023=8\201\355\274\303b\004<\352C\267\274N)\307<3o\232\275^\254\201\274}\001\274=\010\343\271=\344\210s\274\000\3272\275\370p\\\274\210\330=\275Q/\013\2755\276M\274;&\006\275\354\300\262\274j\321\322=D\030\262;Q\346n<s\000\307;\347\034\227<\221\351\230\274\271\350\245=\307\305e\275\370\246&=\332\357\331\274\n\340\202;\375\370C\275\321{\261\275\336\226E\275h\215K<\361S\205<\277\340D\273=\0324:\263NP\275\255\342G\275\334\024\370;Rd\305\274Q23\274\213\004\260\275\004\276#=8\347<={\270\026\275\031_\257<\005\217\r< =5=I\034\006=\317\324g\275\246;;\273\242;\245\274\243na<[k\263<\272\205\255<3\013\016:\375G\232\273\332b\031\274) j\2750\260\371\274E\r\361<\224_-\275\304\013t<\203N~<\025\3306=\262\252\016\275_\207\n=Vj\216\274 D\261\274\013JY;\340\375\027\275\311`G\275w\237\220\275y8 =*\2548;\032\324R=\037@\362\274-:\301\275\316(\235<\215\370\224\275*\022N=\377\002w\273\241\246\220=%\332\277<\364@\223<\rfC\274\373\264q\272\220\356H=\330\355{\274!\300(=K\222.\275\260\220\251<z\r\201\275\361\320\277\274\372\022\356\273\005\224\305<\216\311\212\275?\337\243<\025s\222\273\010\027a\275\247\025X\275\204\013\222<\"Q><\016\355+=\320\340\027\274\246\002\021\275\253\326k\275\276hl\275*E\207\275\341ap\275\370\003C\275\233\233\261<\032\241H\275\366D\343\272/\273N\275C\373\260<\240*7=\300\331\260\273\365\177\204\275\235\377\261\275\257\352\367\275Tm\277\274\023Z\371\274\035\366\303<O\032K=y\031\364\274\366\233\014=\354\326[=\036\331\274\275\321\007\265\274\307\232\017;\250]@=\264m1=\211h6=\273\375\204;\032s\241\275\345A\003\275\n\025\016=\342\177D:\2314\360\273\032\221\005\274\204;\340<\355/\243:\242\017K=\310\210 =v\213\364\2736\333@\275\276p\017\2752*0\275\004\023\254;7\035(\274\246\t7\274\n\266\226<H\2446=K\003\205\275\207)\016\275\326\362\271\275N\332I\274P\341\247=\323\234\034\274?\305\315:\316\351\225\274\036\305\007\276\251\324+\275\316v\007=\313d\254\273<\324o\274A\024?;\371}\206=\376\351C\274EY\371\274\327Of=\037\352\036=\273\330\204\275\203*\213:t7\364<\341\254$=\230\267\345<\004B\315\275\367,\276\273\370)\220;\375\257\032\275Mx\276\273\246\273$\275\336\316\226<o;u=\030\212\300<cZ2=\260\027\242=\026\253\343<\014a.\275\375\033\214=\241m.\275\364\025\246\275\317\363y\274\326\341W=0\242\367<hS\231\274\374h\216\273\372\216\356\274\372\247\234=\025nP=\211\005g\275\032F\247<\351\264E\275I\272u\275\227\342\207\274\207\202\223\275\311\263\374\2746\010\027<u\233/=\236s\267\275c\360\031=\252\017\333\274\306|\271\274\225\030\345<2-\216=9p\264=\221\250\013=#t\233\274c\002\004=\2461q\275\032\215E\275\266\322\205= \032\222\274)\342\025\275\343\3743\274\265!o\275r\242d\275\032+\021=\327\343\300\274\340\367\205\275}+-\275\207\260\226\274\272\r\364\274\306(\200\275\272V\3429\346\351K<\251\"\335<\\\245\2029LP\204<\312\334\310\274\016>\212;\212\256\347\274#\341p<\324,\230<.\274\231\275\367-8=\347\276\273<6f\217\275\224\232\270\270\320q\324<\242\320\342<\243\207\243\274\234O8<\241\'%;\323!\010\275p\271\236\275\302\345\200<\027\205\207\275\246\325\246\274\351x\245<\302&\004\275\035\243\220\2752:\226\275f@\027=\250\304\257<\334\367\266<k\223@=\271\207T\274\010A\254\274\363\246\031\275_^b\275f\314\016=\341*\206=\2223\205<\006wG\273\230\267\326<m[\025\275`\212{;N\225c<\252f\010\275a\364b\274\203\327\311<\311L\206\275EQB\275\000\001\304<\r\233\235=\233\217#;/o\212\275\'41=sb\361<\360\342i\275\214\3635<\211\207<<\030%\240\274D\032^\275\321\211\267\273\367\213\200\273\014\370\361<\t!\360\273\032M\237<\214\014S\273\002\376\310<\021\305\240\274\004\254\006\275\342\347\207=9\211\244\272x\221L=\343\0250\275\312D\271=U\274\253\274\204z.\275\310\303\275=W\220-\275\210\215E=8\203&=\036O:=\2352\237=\223\326\262\273h3\021=\0216\033\275<\t\237=\021\301b=-\271\210<y\2452\275\245\353e\275~\007\342<\236\357\262\2748\255\245<\003b\271<\027\256\231<\201)o\275]\005\235\275\342\260\350<\272\354\210=D\030f\275n\3250\275\306[\262=\347jZ\274\025\332d\274\2761\240\274e$)=\007\363c\274f\rU=\3740\210\275\006k$\274 ]u=\357\005\304\274\025\201e\275z\211\003\275c\312\271\274\215\223\232\273\335\002\177=\210\230\036\275y3C\274\177\341\222\275\346\t_<p\217W\274*$\361<\203\331$=\336\256+\275.\275\376\274\307\250\022\274\356d\203;\nH\343\275\276\336\214<\365h?=t\370\220:3\332\326\273\210\220\311\274\254\232\327\274\332\342\214\275\203\037\245\274N\325M\275\237\266\255\274\235\200\377\275\26424\275\010\016\354\275\312\240\227;\257\340\010=\301\363\250<\366\304\216=\305C\251=n|\237=9\n\334\273w\3175<F}\241<_\301\325\275aTQ\275Q\251B\272\244\2179;\214\212t\275\237p\225;\\\"\005=tAw;\316\002\274\275\303L\271\275\033O\010\275!}\006\275\206\261H=wl\334<We\307\275}\367N=\001H\342\273\027\006\301=\357\321\335\270\377\321\212=/;\007=\213C\360\274\016\005\202\274\000[\005\274\0327\226\273\225\017\245=\216\030\034=\376\370\037=\311\031\206<\013&\232<Y\303q\275Z\320\005\275\021z\256\274\242\371k\274\220\255\257\274A|a=*\002\245<\026t\245;\037\226\303\274\036\246\272\273\352\340B=v\321Z\274\337W\302\274\217\261\224\275iq\275<\224q\306=96~\274?\246\336;\201V\222;\027\365\263:\223\023\332<\223?\345;\001\363\214:hwB=]\250\007\2752\244\017\275l\375c=&\006X\274\027N\363<\205\333H\275\264\373\037;\263\306\202\275\002\272\021\275\027\037\014\275.+\272\275ec\002=5\211\303\273\010\2527=%\327\247\275\375\r=\273\323 \304<\342\366[\275\332\245\355\271\252\037\347\274c\"\237<X\215\264<g\014\205=$\341\n\275\315Yi=\331\276W=\374\341\271\274sx_\274\351n\260<\353o\010>m\"\344\274=|:=C\222\237=D\017\264\275\236L\323\275\024w\214\275\364Z\037\275\021$\222\273\013lR<i\010H<3\231v\274\351\230(\2755g\004=\354Q>=\225\363\265=#\216\t<\362\357I=\342_\332\273anb<_\214\222\273\2370*=j\374\225\274=\273I\273K\362\037\275=O\367<\007a\r\275\355{\000=\261f*\274\302A\277\274M@k=\321i6\274\027\323\024<\344\260q=3\221\251=\035\272\305<j\350\324\274\035\351\303\271\013\355\200=M\345[<w\356M\275\360S\177\274B\352\205\274yf}=Sro\274\315\261\204<?\241\240\274\255\2476;\347zQ=KY\232\274\315\321\233\274\322\333\240=2\027\203\273\321\320\003=\325\237\357\274\351H\370<*O*\274~\207g\274K\224\311<\277\177\273;\223!\211<\026\325\322<pz\312\273nn\353=\255\005#<n\r\247<\357\353V\275q\372\265=\356\207\'\273xg\200\274\035\322\212\274\3641$=u]\206=\023\351\014<Y\325\222\275\006\272\222=\333\235,=^C\312<\360\234\336\272\211\240\333<a\240\r\275\311\373)\273C\372\030\275\2276\003<\025\377\333\274\263\367\307\274\374\000e\275v\361\003=4\020\021=\016g\213\275mN\372\274\001\256\007=\352\362\230<\233%\206\275\221\202\221\275\221\306\355\273\031ZB\274\206\355\232\274>\326\256\274\t\223w<\024{\361;<\327\035=\n\311\004=w\325\224=c\2746<\276G\237;\341\320w;\322\200\333;\247\202\265\275\211\377\342<c\342\255;\345\223\030\275)\370X=+>\\=:z\271\273\355%\210=e!\346;\024Z\313\275]0\215=^w~=\014!\002\275\351\245\331\273\317\360@\275t\203\363\274\264\355\366\274\316,\261<\225J\244=\023\262U\275/\300\253\275\0207\r\275\207_\233\274\210\023p\275/\034J=0\263A\273\263\253\344\274\323\017>\275\016\021\250<\337N\033=\204\273><\333\241\366\274\313ZA\2744\345.\275\001K;=\025)\262<,\315\337\274\263\277\021\275\374\261\335<\237\205\235:\030\200\263\272\330+):\000\256[\275\006\017\255\274\243\037\246\274\t\264\034=\340\221\321<\344\345\211\275b\3253<\321\027==\001\213P=\002_d\275i\030N=\241\365u\275i\207v=\025Z\213=\300\364\250\271\203\374\265<AZ\245=\021\364K=w\326|\274v\264\233\275akJ\275\354^\250\275\357Bs=\317\206M\274\010!\337\274\265\332\246:C\025\007<=\320\320\274\314v\304\275\271\256#\275\330;\326\274M\204\026=\030TM<\221J\324;\031s\344=\376|\344\274\373\303\211\274\244\313\331\274\000\261\212=\247\265$=\005\336\013=\306\330X\275\252\017\036\273\221\352\\\275%\363g\275n\221\025\275\334d\203<\006Je\275\204\210N\274\023\241\022\274^X\000<\032\343\374\274\315\"<;+G*\274>S\245=\030\2634\275c\031,=\"\376\020\2758\032q\275\"s6\274n\230\267\275\235\344\220<\234\010\000=\230\376$\274\325\315\233\275\211%\374=\'\237\272\273f^\231\274\010PI\274\025A\377<\274\357\370=\207\376\254\274\344e\224\2744\231\354\273E6\350<,\311\234\274\353\035\373<[\335\346<g\237?\275x\251%\275\353\230)\274\260\026\257\274\302\207\255\274\366B!;\204\342\245\274vb\037\275\036G\020\275\246\010\325\274\260\342\214;d\237\234;\261\254&\275\246\250d\274BL\027\275\335t9\274\375h\365\275\277bi<[\3349=\032~F=\355J\221\275\313\025-\274k\327\026<\330\215\004<\357u%<\353g\217\273\215C\323\274\250\241W:\\X\207=\r\274\245=\351\300\013<%\2350=\372\017\340<\346\203\013=B\3657\275\030\351\177<\007\374\000\274\031\201{\275\031a\301\273\265 \n\275\211O1=\304\263\013\275\276\203\214\274\306\242y\274*\300\271:\202\021\220\275\350\247\201=\035\251\341\274\247\201\320\273\325V\241=D\302\005=\274V\245<w\206\227\275\217\247\351<\230\017\202\275#l\371<\023\306\n\275\347\261\357<o;\213\274\3027\n=\366\332n<\3529k<;\243\214\274!Y\n=\\\247\324\274\227\017\274;g\371\240\273\247\013E=\360\363\252\274\250\221\306\273|.\231<\304\342\375\273w\271\214;-\253\212\274\345@`=^\322\220\275MX\024\275\233\312F\274\361\327\347\273N\233q\275pp\014\275\034m\352\275_iE\2746&\362\274{\032\r<\002?\367\272\317\033\231=0\275\001\276\204\025\037=C\247\036=T\211c\275CDq\274\001\256\362\274\343fG\275\230\324\306=\334\260\276=;X`=\277\313\301\274\234J\205=\325\215\343<\013u\'\273GPo<\221\242)=\237\237\202\274\337_\332\273Z\206%\274\021\335V=R\232\327=\265\272\217=\204\240\251\27282\252\274;\016\010<\345\357\010\275\035\240\223<\257q\226\274\276\035f\275F\"\263;\000\033^\275\267i3=9\032)<\020\344M\275\351B\202=\321e\211<\306\036c=\352\345q={\331$;\211\365\317<2/e\275\300|8\275\211\201\347\273\034\310E<\350\217V\273\031P\223=pRV=\315\272%=\252\321`=\025\361\335<a\215!\274\274s\200<f\354U\275\305\2768=\347\365\316\274\246\345\005<^\304\323\275\321\235\223\274u,\244\274\3637\322<K\206\023\2741\3216\274\220\221\247<\321VX=\254\377J<\375\272\275\272Q\314\016\275\236yQ\274\020\004\244\274\270\236\360\274 \371J=\367E\231;K\377Q\274\253\215\244=\351\014\270;\002\3115=\262R\\\274H!u<\023i\225\275\022_\207\274_\003$\275\2722\243;\327o1\275\245\027~<\221\217y=\254\266\n=t\264\246<a\227\311;\331O\010=^3\311=u\230\206\275\264;\225\274+\355\256\274\221\352v=\221\321\360\273\201D\026\273T\222\240\275\355h7\275\035\314\332\274\213-\305\274\034\256\225\274%\024\030<\375rh\274\035[\177\274\031&\211<\235\362\321\274\2767\242\275*(\006>\000\326\026=\342\177\007=\276\276\222<\253\346\306\274\223\272\273\274\361F\347\273\'8e\275\020\362G\274\303\004J=\250\361\n<f\225T\275\327}c\275\203\241\371<\377\304G\275\247\200\202=\316cf\275\'\372\332\273\316\242I<\037\200\214<\312\250\321\274\320y\376\274^R\207\272J\231\027;\0072\177\275\301.s;\372\357\003\274\2631\007\274\275\315C\2743l\260\274\350\2474\274\314\360\340\274\n\343+;z\342\255<r\313\214;P\303\203\274\356_\360;a e=\262:\317<\341=\007=\2570+;\000Y~=\'(\377<\267\274a\272\314C\350\275\342[\246<\324I\302;\332\n\314=qL\273=\240(u\275=\252\t\275\322\236\024<B9g<\317[\204\274\212\344>\274\336\244\344<q\020F\275\345\337\r\275\301\024)\275\3769\233=\204\355\310<\203\207u=\343c\376<Od\242<\347\2110=0\213O\274M\362\305:\025\303O<L*\230\275\335\202Y\275\2378\315\274\240\277+=\360\275\212\274\rX\222\275\353R\022\275k\275\370\273.\246\376<\307:\025=\240s\021<|\305\230\275\243?\002=\261\013\202;*A\250\275\345\335\r\276)rs=\345q\000\276?>\t\2733\234\300<]`)=\234\215\234;\311\177\024\273\363\275\200<\366\224\007\274\346\255^\275\377\252\211\275\264\005\314;\267\034\347:\205\026\222=\343\375\357<\305\221\257\274\213\203\312;\'q\370\274\321\205\333\2738\330\037\275\226\3021\275B2\022\274(S\206=o\235\354;\353\227><\334?\202=\177\207\266\273\300\013\326\2755n\232\275\353\230\236\275\3143\250\274\323\255f=\224*\215\274\367L\002\275A5\264\274x$\235<\262e/=\251\372\204<\036r\276<\017\250\202<\342\302(\275p\342\207\275\006o\224;r\032\023=\240?\327\2749\234\255=M\"\201;\301\327\"\275\376wP<3\256>\273\325\364\221; \213|\274\301\006/\275(#n\273\326\320\211=\316\364\345<\366\271W\275\342j\275<\336uN<\263\020\247\274\331\341\261=[\330\221<b\347\033\275\022\222%=t\361m\275A\217\263\274\257o\300\274\353\220:\275lW\306=\3327\230=]\343C\274\342!\347<\313.Z\275\335w-;p\374n\274AQ\202\274\205\372\271\274\331\277k=*Y\262=\001\302\351\274Xmw<~\256\210\275\206l\n<H\361\372\274\216\016\260=\335\025$=748=\211\361\032\275{\300\004\275\274\326/=\026\310\n\275x\246\300\273/\305#\275H\006\027\275\346\305F<\022[Y\274Q\325\034\275\375;\207\275xd\275<\371\306t=\021\343M\274L\265b\273\372\035\226\274\326^O=\310\230\031=\202\201X\274\226^\215\272\371m\003\274p\023\t<\360\3008<\275\032\004\275\000\374\310\273\326SX=\222\246\332;.\362G;\031q\206=X\350\271\275\214\270\205\275\334\231\270;\273r\213=\222\220\t=V\363\306\271\007\\X\273w\212\242<6y\2738\375/Y:\202\2624\275t\242m<\352\014\221=Z\211_\274\356\242\247\274,\021\305=\341\037W=\344\206\311\273U\354\235\275\332S\233\274_\361\243\274\304\230\205<\236\360x<\007\313d=6\272\023\275\212B\327\274.\023\263\275~\241\264<\016\253\304<,\251Y\275\223\254T;\004\374;=\254e\223\275@\355\016<\177\233P\273\031\026\213<`\204\225\274{\006\231<\245\014\205=\022k\205\274\206\006\202\274[\323n=n\221~<dX0=\\\301j=\211\334\032;\302`\254=\2175u\275\340\024|;?D\006\275pB\'\275\270\007(\275\345FM<o\237\\=\021\246\326<\307=1\275[r$\275\036\177\032=\353vr\274D\3451<\210\r\273\274\277\206\264=\233}\220;\363\010\310\274\2641\017=\227\265\207<\3229\245\275UZ\3679\204\353\013=\356\274W\275\021\205^\275 \377U\275\233\244\250\275\272^\002>\216i\277;\371\263\313:\351\347\030<\251Y6\275\230D@\275\315\031\267\274\004r\030\275\246\2105\273\364\354\256<I5\027=\311\262\264\275\nH\360\274\242\025\274=L\307\223\2748\242~<\'Z\231;.\312\\\275\212\355!\275L\347<\275\243P9<u\263\3607\317\327\002>b/\016\276I\351\303<0\250\324;\2009\021<\277\302\334=`\231\327\273S\311\007=\027W\216=\216\341\"=\357\\9:@\3429=\301\231t=\370\311\032\275\264 G\274\177\035#=\243,C\271\036\t\035=\2167t\275m\031\";\\g\264<4\232\250\273Uz\023<\240[\305\274\223Q\002:?(\023\275\330\014\022<\372\337\266<\004\346\272\273\027~H<\377\250\033<\321\343B=\362\346\351:\007WK\274\261\242\346\274\032\276\233<\323\242\242\273\271\373\027\273\317\347\246\274\"\3238=\024dW=?\2109\275\336\364?=\r\000U=E\306b=\373\311\036\275\202@g=\200\r\233<\317\001m\274\254\225\226=\310\306;=\014\"\207\275;\020\274<A8\377<M\244\340\274)J\271\275\373\211\214<(y\362\274\232\2748\275(.\320\275\204f\037=\341\200B=&\354\230<\206\341\"=\010\035\025<\347\361\365\274\205K\220<\302\246\267=A\362\013\274h{$\275U_a\275\337yQ\274\3764\006\275\257\330\240\274\035\211f\275\251HN\275PoO=\377\005\302<\343\355\301<\246l\267=\367S\305\275\243\007Y=\332\375\244<\315\352\302<hW5;^\371\234<\315j\205=i[\225<c\330\276=\037!\311\274\270Vk=\205\334\206\274,NM\275\253\270\014=\265\206\241\274M\016\345<?\363\261;\321\026\325<\2525\215\274\237\362\343=\272\326t\275v\266\206\274\216\007\235=\306\342\310\274\365\034\024<\370\326\264=\034\274\000\275`o=\275\020\2771\271\307\023\304<\335\205.\275p\271i=\2338m\274x\217\000\274h\220\321<h\027M\274\223\2115\272\306\305\327\273\347X@\275\331c\203\275\005z\357<3\225+<\361|D\275\243\313\346<\310\007\013=\201Z\262=\3264\231\275^\343O\275\nS\r\275\356\022\224=\023\321B=\354T\201\274\373N\263\275\360)5=\336\335f\275\253pk\275\216\246\230=>tr=8\307q;Q\355\224\275\003`\n\275\276\037R<\311\035\253\274Q\350\243=w\022w=\255\2162=\346\314M\274J\0101\275\214\214Z\275.\016\036\275\237\3153=t\005h\275\177\271k\274\037\315\232<8\033\020=\266\320\037\275NlK\275\346\020\t<oG3=\350\234e\275\010\305j<_\230\020<~_\237<\265Pj;\333G\240\274\322\350K\275\316M\037\275\254.\006\274a\033\204=[E\206\274\376Y&\275E\024(\273j\363\005=\237R~\275rS\270<A!P\274\353:\202\275\252\375\355\273\315\235\323\274Fr\250<\306\363\022\275K!\n=\233\351\'\275\001Ff\275x\303\261\275\372|E<.\252\005\275\335\003\227</\205\376\274\263\224g=(\346X=D\032\273<lk\\\275\033\257\211\274\374-\006\273>q\220=\3508\231\274\327+\032\275J)\332;(\333\244<\327.\224\275\211\026\200\274@\315\226=\330L\377;\263\265\016<\2302s=\251\206\233=J\310A\275\217`W=\254\r.<<I\026=\335i-<\034>\272\274\241\"\034=\361%\000=u4\221;j\003\234=\335\223\242<O\035\262\274\372o\317\274S\346P<\377\026!<\246\317M=\020\336\267=\373\3528\275# \254\274\034\337\326<x(\021\275\370\246\310\275x\221\331\273\234\366\003\275+\177\017\274\3067\017=B\313\033=S\331\235\274\345\243\215\274\264Ar\275\202,\204<c\016H\274\317\310\r\275#H\211<\3706\010\274\032\275\226\275K\311?\273\rY2<zq?=\036\243\253\275\032\026\356\273\036j\230=\331\267\030\274\014m4<4\346\252<\177\037`\275(y\002\275=\t\n=\330\245\244<\376|\212\275\213V\027=\221\353\310\274\202\023\032\275\335\354\026\274\321\354n;v!\256<=\271\245=\024\'\304=,d\222<\344\007R\275?>\276\275W\\\344\2745G\216:\324\215\372<\231NL=\023\332%\274\307<Z\2754N\"=?\271\332<\022\003\022\275\2436{\2734F\023=-J==\261\177\204\275\323A\027=\332\262e\275\017bB=~\024\243\274\214\374\271\274T\265\277\274\255aT<\253W\276\274cJ\327\273\216\354,=\006\205\345\274\354\016\001=o\353\r\273\364\\\353\272\227\375\260<0\3352<\3059/\273![\013>\206\237`\275\210@\005=\256\337s\275\215G\t\275=aO<C\331\220=\231\321\220\275\322\375X\274r\243Z=\003\n\177\274\307i\005\274v\347\366\274\311V+\274\036\206/=\331\372\020\275\330\270\254;Hu\254<\355\002\314=\367FY;if\024\274\303\242\023=ZW\220<\356JV\274\025I\231\274$Q \274J\257 <\333N\030=\005\"\326\2749]\201=/H\264;\244L\232;\t/\033=\244\023\261\274k:q;\362Y\211=\312\256\252\274\352}\322<\227\002\371\273\352\001i\275\325\344\322\274D\"\017\275\034\237\231=\307y\244<\374\304\217\273\'\240\253\275\317X\353\273\333\305\313< w\2779v\0240<\014\025\371\274-*\365<\235f\001\274\232D\027\274\'E\341;a\224b:QK\361<\020\272\331\274\214\276z\275\333\335U;\356\n\276<\250\021\t\274\016\341\232=\003\0075\275M\275:<\013<\203\275B{0\274\355F\300=O\377~\275\021sa\275*\307\250\274\320\021M<\301\321\000\275\345g3\275\373\336\030=\034 s<$\301\010<\254\354\232\275Y\231\265=\273?\030<\257o\210<\324nl\275F\2675\275\017I\216=\324h\365\274t\3108\275l/\344<\211\265\240<\\v\371\273\274\370\026=\206{A<\314^\241;\246Z\202\275b\212\024<69\244\275\307\271%;|8\214=0~\200\273\037i<<q\313\274\274U\367|;\332\030\353;\302bJ\275\325\324Y\275\t\2373;\007\004\245\274B\025\035=\374\314\251\274\020\201\206=\377\311\202\275\264\357\017=\337\365\352\274\237\016\\\275\353\313f\275\254\333\214=\270\223v<*P\211=\331\230\263=\362\345\204\273%\304U={R\273\274\313\260\243\272\256W\016\2740\313\027\275\010\013\267=\233\253r=\354\271:<\306\376\241<\204\247F=\362<)\275\355\2570\274\030\361\246\2746OG=\276)\233=\347\253D=\311v\243\274\237\377\267\274h\270\237\272B\344\224\274`\277\274=\315aa<>\027F<6j(=w\224\200\274\355m\227\275\331\022\002=\361\303B<R\212\260<?\206\320\274\235M\210=\266\226\020\275>\230q\272\324M{\275\326\361C\275\006\342-\275\235\324\033<\224\227\373<\270\231\313;\314oI=y*z\274\372\257\"<\004#A<\326%\002=\214t\320\275&Z\372;\324\243_\275\376\335\337<T@\270\275@v\006=G<\216=\214\203\270\275\267\025\201<\367C\274<\206\'%\273\263\0069\274\002\215\322\274\352\332\003\275d\2263\274\n\003\232\274\301&\177=\215$\216<\331**<\201\351r\275\266<\210\274\226p\343;\334\035\224<\016\356;=\304D\307\275q%:=\344*\342<1\'m\275\374@%=(<\255;=\266\220=@\344\364<!\264==qa\253\275Md\275\274\027\306\274=\024x\343;3\332\210=\331o{\2753\3078\275\2010-<\250p[\272j\305\352<N\3738=\346\306\225<\313\347n\275\034d|;\001<\000\274\203\352Y=\r\n$\275-\315\222\275\037\202\002;3uP=:9\207;\231\026\"=\247vs\275\002Q\227\275\363\234g\275\306\330i;T\305\224\275\367\n\336\275\342^d<v\024b\275\317aa=\267\243\335<\226\037G\275\350\215\247\273\177\250$=\273\314\321\274S\352\204\275\001Ui=]q\373\274\375\272m;\321\344D=\276v\312<q\336\256<\265\347\227\275H\275>=z\020\010=\232\327_\275\306\320\201=\327\366\255<\224#\302=2\336\211=\202\036\240<\032Y\201\275~\335D\275\237C\222\275D\204\343\272\352h\007\273\330\310\027=\214\247\271=E\366\231\275I\225\270\275W\253\353<\254D\343\274\334\205\302\274\346Ia<d+\201\275j\002\027\273^>m\272\237b\244=NC-<C\203\r\274\020\333.=\207\210\225\275r*\270=q\016L<\034\330\216\274?\236\362\274g\007\036\275n\016j<\234\351P\275\206%\277=\002\356\233=\022\3318\273\316\266\006\275\'\342\225=P\306\224=_sq<z\277\354<\321\006\222<\350\362\255<\".::\nXi=U[\267=\323\356\365:\225\027\2357\275\204\242=\277\230\"\275\240\224\323=\232\375G\275\257\220g<\302\306\017=\326iH\275OT\n;\017\255R=\200\207\274=\302\342g\274p\225\317\273~\377\027\274\257\365\223<X})=\334C\342\274\215\312\210=N\240\262<2D\016\275m\345i=[\202%;\016\265\346\274\235\227~<\264\010\324\275\223)\037=\256C\004\275\333(\351\272B-!\274\022$>\275%\017E<\026\371(=\010%\212\275\217\224\231<\210N\013\275<\216k\274\022\351K=[\266v= \025U:\352\247\223\274s\020\217<\313\021\231\275\224\214\t<\014\371\213=\264\261\242=\375\014`\275\021\335\217\274\367\"\220\275\271/\344\272\254B\\\275\264L\343<h \211\274\252d\370\274\322\315g\275\375k\344<\014^O=\001$\231;\302\030\373<\356\r`\274\032\215\261:\014b\026=\031\363\245<\337\311\220=\226Zq=\252\033\344\273i\361\271<\216\261!=0\267\264<\205w =6&\177\275\241.\350:\227\204\023=\253\230\211\275F\001\260<\326F\007=\325\226\341;\222\332\213=\376}\273\275\251{\240\272\263\220D=\263\0100<v\217e<tp:<\303H\024=\303\371o<\177\370\247\274\243\313\020<!+*\275\372\036%\2757\034\224<\304Y\"\275u\337-\275\306>\275\273\343\354\235\274\243\341k\275\037\306^=\2715\247\275\255\254\313=\373\351H\275\030$\202\274l\242\313<\237a\r=\'\207\320<5~\221\274\006.\324\274\340(\373\274\310\330T\275\352qJ<\345U\307\2745\376B=\361\202\233==\304c\275>\310i=n\320\316={\036\037=\033\311\023=Y\313V<\017\252z\271v\260\257\274\272\036\033:\253u\266<\002\244\230=\004$\007=Q\223\243<\267\316\243\275T\211\275\274h\004\350<+l\013\274\234<\003\274\361\001Z=%8\t=z\3501<\216\032\233< \205\013<G\'\252;OJ\306\274\322\n9\2741\261\220<\346\304\200=\210\037\347<V\302%\274\004\016\360\274\320\211\247\275\227\301|\275\222\210\271<\363\316\202=UX\322=\'\276\355:W#\222\274\210\'\256:\362\347\241\275\035c\357<x\223\270\274\334\340\013;G\035\027\276\376\324\364\274D\n\245=CDw\2722\364M;\340\316\351<\263\230\304<\312\340\017\274+\270x\275\017\323\020=Fp\026=\\)\276\275n\037\337;qE\013>\030\342\340<2x\010\275\036\302\311< \360\245\275\255-\203\275\036\037U=\310~@=\277\033\213\275\016_B=\007\022#<\231B#\274)=+\275-\373\261=]v\225=\026[\255<;\250\360\273\332S\206\275R\375\265<u\353\353\274\246\261\271\274\r\330\276\274\326m =\177\177\224=\264-{=\343H\004\275\207<\220<\343\214\313=\366p\002\275mT\177=^\313\003=gR\230<\004p\324\274\231\034n\275,9\222\274\336\257\024\274\357\005G\274\310\324\032\275\361)\335\273p\2456<\213\207%=\354\214f\274fl\t\275\314\3427=v\257\005\273\3006\326<\204\032\216\275\233\374$<G\201\250<\322z\200<E\346 =\334\263\256=\034\242d<\222\205S\275c[\371<G\346#\274\355\274\335<\301\250\355\273\265A\201<Z\322\226\274\037\022\370<\322\0252\275v4z<0Tf\274\333oW\274\366\356\205<+\030\357=\365S\004\275\030g\257\274~/\000\275\313\030!=\233Z\251\275h\317\363<\240w\n=\250t\033=\344\0239=Y \204=_\033\341\273\277\315\030\275@\305\034\275\226\310P=/\263\267<y\371\032<d\"P\274*\300\007=D\236\023<)\362x;\020\001\307\274\007R\010=%\262\305\274\225\200\345=\353\334\202=w\277\333=\322\3134<\334[\001\274\265d\026=\000\256\257=\033\375\202<2\372\232\274\354\016\235=\247H\244\275\327\250\022=@<\273=\345\226&\275\355B\332=5\"\274=\336\004\241=\257\331=9\202\231\022=\307\014_\275\244\227\243=\254e\271\274\377V\235\275\254]g=t\312\252\274\373\033\030<\001\215\251;c\344\304\274\311\335?=\322\356\321\274\327\000\341\275[\255\244<\233\010w<\t1\215=n\326\337;yp6=\201\345k=\256\271\213\2729=\207\275\272,D=\342<\326;uO\323<\322E*\275\371\313\r\275\375Q\030\275\336\226\200<)qV=\236}\246\274\354\200\334<\206nZ\273/\346G\273\273\032s=\377\345\352<j[\224\274-Q\231\275)\306\220<\3408\366\273\264\276\215\274?\317\025\273,Xj=\213\320\306\275\361\215\235\275\276\373\327\274\325\032^;Q{\317=\020H:\274H\267U=t\230\225\274\021!T\274\352\330\242=\206\351\240\274\000\337\242=n\303\247\274$\000?<\377\257\343<\310V\n\274\215\373G=m\260\355<b\377\365:4aQ=\031P \275}Z:\272W<\213\271i\214\257\275\224\362P\274c\251\016=I#P<4|\033=\230\373$\275o\360\206=\224\253\344:\342\203\247\274\374\342\203\2741\314\020\2755\306\325<\nX6\274\255r\252;\271\367\207:\013Q\360<\355\002\210=n\251+\275+\367\013=\010>\025<\315\375D=\376\'\006\273.\001\276;\262\207\217\274:\262\305\274\247\032B\274P\345\021=?R\001=\367\2749\275\346\247\346<\237T2<m\t\275\274\3552\037\274x\226w\274O\253p=\036$\370\274\'\343*\275|1>\275\214\351\305<.\201<\275\247\206\177=]\313K\275\337\032\005=\346Tz=\36713\274kh\223\274\321x\234\273\221\331&<S\364\310<\351\363\261\275\027\340\251\275x\375\226=H\370\002<\257\216\363=!Q\357=UL\200\273\202\265\214\274(\2216=\377XL=/O\006\275\201\2551=P\367\034:\023\0049<n\321K<\n\242\000<\340g\024\275z\200\320=\364=j=G\277\230\274\363\374+=\2022\205=\036#\210<&V\203;\004\036B\275\246A8=(\014\306<Y\202\225<\315fP\274\036\2733<D\2466\274\245a\200<\366U7<I\235\226\274l\320@<d\360\000>E\366>\274E[\320\273\004*\372\274\313j\326<ga\273=\220\247v<\303\237\245\274\251\010\177=\010<\260<z\254\362;B\332\224<f\001x<\007\242\217<\225\270\n\275\346$\263\274\302*\036\274\225IM\274\030\033P=\311~7=-Z?<C^?=:\3333=((\341<\227G\020=\274\034\334\275\t\330\231=|)\004=\177\307d=\233\343\221\273\275^\335\274\035\342\353<LF\302\274\203\230s\275*\363\206=N\304|\273\032\275\3568!u\215\2724 \216\275\205\037\360<8\333_\275\374\371!=\326|\016=0\225I\275\325q\003=\200\300P\275)\005\030\275\367\'\260\274(\245`=r\303o=\253\031\261<B\311}\275\332\207\213\2756K\004\272\322\203\001;\247\356\375::@\375:\003\272\270\274\220\216x\275a\241&=\330\373\317:\361\205\r\272\0011$\275L/\377\274\233\242r\275A\316\367<K\014\r=\270\274?\275\031{\327<wM\334\274|\211,\274 \372\025\275c+\225;\222\305\235\274\225\333\211<pp\201\2740\222p\274x\326\224<#\363\204=\tH\305\275\177a\302<\2703\333\274.\024\343\273\362\023[=p\274|\275\2327$\275\207;n\274k\266\345\273\345]-\2722t\366<\215Z\246=\255\030!<\321\031j=\013nu=ws==\037\0378\274\373\240 <\347\361\223\272\006A\205=\t2\234\2751\3022<\306\262A\275\n\226\267\2712!)=\267\316\306\274{\2418<S\037\232\275\376\024!\275\274\033o\274X\214\016\275`wV\274\244v\226\274?\363\337\274\234\244\035\275\274\316j\274\336Te\274u\331\266\274k\241\033\274\375\304\330<:\006j=\352-\340\274\203\016\346\274\0329\321\274\025\013\303\274\367\216\217;\315k\200\275|g\334=\016\331\007=\311\320\234<{(\005\273\t<6=d\373\256=,?5=\243%Q\275\250\325\033\275}\t\270<.\337o<\350\313\203\275#P\272\274\266\275$\273I\242<=%\207u=\036\353\021=\307\010\223\275\326+`=\221\016\345<\006\330F=YF7\275mI\022=\034%\320\274|8\221\274]\224\257\275\215i\227\274\203\240@=q{\265;\013<t\274\335I\244\275\243\276\223\275\342\207P\273\271\032\t\275\020\210\234=]\326\260<0\233\250<h\243\224<\361\276\320\274Eo\025=AZC<{\343\275\273U\221\"=\005\300\325;\315h\325\274Q\336s;C\225\310<k@\303\274\336N\216\275sld=\031v\210<\245\234\273<ti\372\274\240\" \273AJ\177=\325\322\320<\301\313\333\274;\227\202\275\250JZ=\243\013V=\317Z:\273}\3100=\217\346\212\273\276GZ<\266[r\275G\202\304\273\300[\251=\314@\243;\265\230\003;\254\027\234<H\007l=\303H\320\273w\232\242;c.\353:\014\264\360=\254\206&=\275\360\363<\304\017\006\275\033J\233\274\355\375\205\275rP\271<q\222\006=\340\352\376<\201f\251\274\212^\317;\343\342\332=\031\222\t<\374!\222\274\202x\007\274\246\025\334\274\312X\016\274\377Q\033=\371\356d=\333\240><qU\214={\266\342\273\317\276\254\274;\243R=\034\235\245\275<\326Q\275\332o\010>\000\026\000=\3251\271<)\367\035=\032\261\332\274\325\034\237\274*h\370\273\372\237$=\226\265n\274Bj\300<N\231\245=\207\352\336\2743\324?\274\372\213\215;\002i\202=\3135\221<\377\304\311\274\223ju<\305\234\210=\276\344\252\275\0335G<M\232L\274u\352\211<\237\370\314\272\250\303\264\275\272\327}=\005\313\347\271u\350B\274\203\177>\274\202@\022\273\022\023%=te\213\275`\026\027<o\367\200\274>\264\2017E\014\277<+\271\337<[\236\255\274\007\270\005=\216P!=\256\313\356<\204\255\326\275$^\213=\247&\260\274\304\010\254</iq<{SD\275\326\032/=\304\rm\274L\212\004=\211\251_<!\236^\272\303\300\222=\220\372F=\236\360\325\274\345\321\253=g=\226\275*\351\221=\327\245\220\274F\2329\275\357_\227=;#\257=-QG\275\020\257\322\271\0230\255=\363M\016\275{\234(=(\366\363\273\301\230Q\274\275\300\344\275\225\354&\275\325\361o=\255\346\026\274\323\346\233<\365\005~\275>\000I\275\250\356A\274V\356\246\274\217+.\275\235\235\205\275\001\203\2669\332\251\017=\347*\271\267\260\240\205==\027W\273d\2059\267\245p\367\274\236\202_<\274eC;I\331\213=z\317\017=b\356b\274\010\322\337\274\252Yq\273P%\000\275\322tW\275H\'.=q*R<\214\322\033>\023\235\222\274\372A\177<\264\232\370\272\315\203\272\274\225\243k;AY\240\274\331?\001\272M\tO<\303&\n\275D\252\222;\246]!=\207$\254\275L\253@\275\'\217\220\275\217\305\247;\2467\333<*\253T8@k1\275\027\300\036\274l\005\241<!a\364<\220\305\225;G\342:=\223O\327\274g\215\345<\374\027c\274>\256.\274\221\016\344;\346\231\215\275\224!^\275v\214\373\274L9\232\274\225\302\341=\223)a\275\313\036\272<\371/\026\275\312O\277=K4\332\273j\016\240\275\266\264s\275\034f4\274\2721\\=\362\352\252=\031]\034<J\265C\274/\217\027\275L>!=\033o]<6_0\273\023&\232\274>\315\255\275\320\271\224\275\211\304a<\364Y\n\273\362\254\207<0\347k\273A\260G<\333\2430=z\010\"=\241Q\025\275\r\2043=i\306\214<\271o\344=\3705\271<\270:\227\275\301\262F\275%\021^=Iz\033<%+\033=\311P\373\274\213\351\357\274b\253\353\274bl\361;\010\364\243<e\300;\275\340\236\026=ca\t\275\335\030&\274\'\025\035\275\304x\223\274\245`\246\273\322\201\246\274\333\2142\274\264q\001\275\365\350\343\274_$\342<\244\317\307\275\205\234\347\273\3244\270;\302&\317\275mUK\2758\312\202\275\207#\350<\316\330B\275\331\331\227=\035\307R\274\202\357F\275^\032\213=\270\2350;\250\237^\274\214g{\275gOV<\252\205}=Z\032e<\225\000\261\275:\262\261<\364\306\016=?\265\202\271\237\300s=\323\236m\275\007\007\217\274\213l]<\237\324\335\274Cn\222;\306Xk<\247\036y\275kW\272\275\373\001-\275\372\327S\275\311A+=\032\276\375\274\347\311\375;w\306\361\271u\370\321<\362\342\245\274\031\254J\273\245\361\354<\330\274G=\203-\216<\225I\371\274\267\023\207\274w\024\215\274\245\206\221\275R\273\243\273\034\302\254\274T\017\031\273l\366\342<W|>:@\232o<\311z\006;\332\'n\2744E<=\370\255#\275\237\025)\274\2048\235<hl\346</\370\207<\001\310\213\275\223\314\246=B\363\023\274\231\377\346\274\220s\027=\000^\346\274\233\257\035\274\377\211\336<&\317D=$\002\232\275\232/1<\352\241i;8\210\030=}\325\204<\\\221\021\275\356E\245\275\206J\017\275N\277\202\275\307CR=$#\265<\315E\022=\037\250d<g\032\022\275%\222\267;\320G\375:\204L\023\276\260\377\307<\261\375\340;\351\033\232=-\275S<t\215u\2755\032\253<\n\237\370<\340\331]=\313fE\275\360u\026=\204\035\271=\331\207\345<j\004\265=\252\263\215\274<\330\316\274\332\246\303<\343y\211=r\036t\273\003>\225:\330\373\347;\030\314\n=\345\353B\272fcs;\315\325q=\3341\223=\241E\361\274\377a =$8\321\271\351\0335=\345\375h\273J\t.\273>U\324<j\245\210\274j\313\222\274h\373c<%\022\203=Q\333\251\274<\206\323\274V\251\225\273\037\307\341<\263\'`\273\233E\n\275\212\200\177<\223\311\363\273b\360\253\275\363(\366<\037?\301\2745\330\210=x\256\022=\277h{\274\355\353\362;\367\253\201=\241b)=G\010\214\273\340i\214\275\314\306e;A\267\213\275\205\017\204\275\035\376\355<J4^=\027D\300=\021\027\017=\326K\037=\006\326\201\275\264>\307=D\275\263<\032\210\336<\031s\230:\177R\323:\275\263\027\275\254\273\334\274\027&\242\274\237k\276=\005\356\212=[r\014\275X_\211<\351\332a<\275b\201=vq\034=\031\334\024\274r\2631\275\352B\212\274}E0=\224\236@=#\245\222=\216\"\034=\251_\235\275\030%\315\275\351<]\274:uR=\236\277K\274S\021\377<u\253x\275\277n\366<_\222l<\212\345\226=\240\224p\273\320\2543=\305E6\275&g7\275\213\223v=\271m\336\2743\251k=\341\200@=\333_\223;\266#l=\340\230\347\274\201\311\207\274_\001\003\275`\355y=\325\204\243\275\226)\346<\217\314\020=\225T\216\274.\307\370<\342\247\236<\316[t\274\0208\266\275{%\213;\362\243\006=\334\006\317;\302\247D\275\2167\331\274\376\253W\275\340Y\300=\240f\204\275\304\031X\275\363\264#\275\370\3175\274aM\036=\307N\035\275\374\345M=(\033\351;*\255\302\273\206\373\371<Z;\034=\347+\277\274`\370\257\274=X\227\273\317/\216<\262\220\204\275_a\253\274\222\276\202\275QU\201\275\033p\363\273:f\243\274<\340\025<\033\330{\275\276X6\275\272i\'<\027\305\231=\251\220\333;Cp\031\274\212nc<\227\276\204<\267\002i\274\204L\347\272\3032u\274\2548\215=v\036N\274\334\200\216=\242\376\217\275?\327)<57\2329\002\031\217\274\021\205t<\2258\201\274\330\276 =Q\005\201=\253\362\275\274\352\260\370\275\343\237\307\273`\301\263<\342d\345\273\232\\\224<\010[\255\275\364\343#\274\214\310!=g\256!=\211\316\246<Q\213v<\264~;=\342\025z\275\353\212Q=\366\3025=\224\017\247=\203\033S\275\016\340\214\273JR\027\274\255\200Y\275\006\304\207=H\234t\274\343|\265\273\r\304\212\274\344\377P\273\253\313\205<\326\373?\274\036\0014<G\235\224<l\372\200\274\361K\256<\020\305\223;%\243\311:3\334\346\274\334\3629\275\262\205\025\273i\327\272;\365\033\204\274\256X(\275\002\214\310<\234\316\321<m~$\275\220\351\210\273\250\325\262;\207+\355\273\325\006\342\273\203\370X=\030Jw=K\310\361<\302)y\275r\236M\275\214$\030\273 4\336<\3132^=2\201\322\273f\345\342\274\242\347\344;zC\272=v9U=8$\213=D\245\025=\341\364\361\272]\363\240\275\353r\213=\317\272\216<\217e#==\241==z+\031\274\253\362\014\275v\341w\275\272%,\275\310s\211=\305\310\022\275\235\246%\275&\251\254;1\320\265<\'\016\225<\030\004~=\323\326\357\273\265\303\033=\342\345\212<\243\222\200\275\214\270e\275\306\001n=\331\344\341<;\026\254\273\\\311\361<Dk\204\275\213]\251\274\031\027\032=x\333\235\275\202S*=\253\247g\272\371`\213\272.jS\275\360\020\t=\301pL<_\363\363<\261 \273:\240\032%\274d@K\275\260\363\213=q\261\365<\333\317]<\303\227\225\272\363\004B=h\324\344<\277aD\275\300\225\003\274v\251\036\274\214\265W=}\353\347<.\337\237\275\342\374\361<\240\325\022\275=\202T\275\255\036\334\274|I\237;\260\233\036>\223\254L=\000\323\030=\252\207\\\275brE\274\352w\371<\342r\323<0\305\260<\267^x=\325\001\306<W}\276<\275\322D=Pn;=d%\312=6\3366\275\224\016\226<\025\220\274;\324B\267\274\311r<=\005\253\222=\342P\307\274\261\030o\275\213G\225\275\037\303\370<\361\215\030\275P\214N\275C\327i=T\001\336<*\026\317;>\306\203<\312~\377\274\332\232\"\275\024R:\274 \314\320\274\240\262\024=0\2655=\314\275F\2743\231\014\275&K\213<c\241r\275[\352\001\275\252\342\325\274\323\250\322<9sb\275/B\036\275\366\261H\275\240U\212<z\326a\275\216\246\356<\341M\220\275\332\231z\274\315\254y<~O6\275=\334C<\307\256\252\273\233q\354\274\301\234\200=\033\210h\275\352\267\243=\263\177\002\275\020\331\n\274\371\207$=\017\204\245=\260\3300\275\253\324]<\'\366\302<\037.\013=Fe\214\274\231o\305\2749\234\260\273x\346\373<\217\263\"\275\250\023\326\274\000\354\014<\027\3471<\021\'\325\275\013@\237\274\220\227r\275\000\276\276\272\316d\276\274\377\177\213;\014\227\204<?5\355;L\342\343;8\217_=W\201\214\274}\\\362={Q\226:\2121\r\276Y\003\224<\262;\227=\201\350\200=)\206\234\275\250\305\232<\026\245\201<\214\377\206\274\033\216:\275%?8\274_\221\277=\273\213\242\2758Y\020\2758:\304:Z\271U\275\222y\325\273kdY\275\261!\250;0\315\307\274\217\225\222\275\306\027\325<\377\356\016\275W;\020=\264\365\210=k\257\311=/\314\201<|\022\230\275zL\356\274\321\302\221\274q\377\206<\020\260\035<bd\352\275\205\\\200\274\235\244b=\027\311\215\274\232#\224\275\016\300<=\327wc\274\266\314\222\274\361^\275\275\330\340\277\274D\002R\275\376\r\225=\323!p\274&\343-=\354\330a<\345\2538=\240\253\220=\200\256d=k\275F\271\245\3044=\020\352P=\244\200\310;d%\032\275h\311\277\273;\226\020=\273\333~\274}F\321<\025{\201\274\240D1<z@/\275Y.7<\rh\270<\310\243\014\275\017\367\362\274\3653\206<\3545\333\274s2(\274:K \2726\311\331\274\270\361\370=}\354]\275a\341,\275\304\322a;(+/\272b\3002\275%\244E<\374\377\235=\375\020F\275u6\027=<B\216\274\007#\025\275\213\030\324\274\323\363U\275\263\262Q\275\212\300\342=\244\262\322\275MVt<\016>E=s$\006=\017\367==T\374\n=\001W\341\274\035\343\377\274\244\274\242<\303\247\354\274\255\307\310<\300\323Z<F\336d\275\324OU=\023\023\177=\200\037\t\273\327\224\271\274\316\333\273\274@/\t\274k\207<=\226\032\204\274>\214\203=\204:-<\301\316!\275\366\316\016\275Y\037\203\275_\2535\275\021kB<\312+,\275\270\244\206\273\300\312\204=\243\254\213=z\022\211\274\340\225\211<\274N\323<\222\213K=W\303\225\275\367h_<\364eP\275c\305\216\275\256ZU\274\t\220\373<y}\005\275!\311\331\272\201\312L=$\210+<\323++<\220\270;\275\n\347\021=\315\354y\275\214&\211=6\306x\275\342h\276\274~\321v\275k\246\326<%\345\333=#t\355\274\213mY\275]\242\207\275\307\303\340\274\345\235\333\273b\351\351\274+\354\213\272;I\306\272\254]\225\275t\241\027\275\020\357\226\273\265V4\2742N[\275\334\236\221\274C\374N\274\030\314\341<\327\301p\275[\014\007=a\r(=$\203{\274\262a\013=\370\306\312\275\335\355^=\006$\270;\0000\2259\337)\273<\217\312)\274_o\202=U\3565=z\211\245<\232h\001\272<\241S=U\2029=b>\205\275\347\300\237=\306\374\367\274\\\215V\274\033C\274<\243\220\212=\255f\240\274\376\0265=\216\026\357<\234\241\272\275\260\210\227=K\344\017<!\2404\275)\221\326\273\367_\313\273\314\255c\275nl\344\274\314y\324<V\324\"=\005\272\004=\350\376\347\274\016\032U=\370Y\317=]\357!\274pvT\273{\316\230\275\363\267\213\275\225\377\263;mN\034\275\240\027\271<\2431\205=3\001\240<\257\215\353;\373PQ\275\334\206\222\274<\355O\275\255Ie=\373\276y\275I\2517\274\020\205C\275cI\002=X\207[:\354\351[\274a\005\r\275\211\240\251\275#p\245\274\331J\251\274\273s\256<\032\025c\274\025F\314<\026\375\224=\354;\n=C3\t=s2\377<\020\374\n\275\331\"F=P\334\350;\266\207w\275\360_\017\274\353\207\256;\324\317\216\272]\231\215\275&s2=6\272\r=\325t\230\270\342\036\265\273\341\233\237\274\315\374\351\275%\343<\275\3168\335;!m\214\275\217E\375\274\004\235J=\200\230n<(\022\027=\327\316\365\275\037\307\031\275f\202\227\274\032\215\\\274\022\037\226\275s$\226=\'E\\\275$q\250=\343\340,=\352i\272<\335=D=Ls\010=\326\312z=!\251\203\273\177\266\211\275M\2256;i\'\200\273N`u\275\267\367\354\274\016g\250:\247\332V\274\334\325M<\201\354>\2750\007\r<vb&\275?\037\311\274\263\002\326\272Y)l\275\021\224\363\275%\200S\275;9\201\275\213h5\275E\013\205\275\027l\273\274\215n\231=\350\340\032\275\016\270\306\274\246|\004=\357i\306<F\037\337\272 \375\260<\275\3372\274\024\023\361<L\305\331<\275\337\364\274\252\367\023\274\313\202\344<\370\023\251:E&\202\275\252\200\204=4,=\272\307\007_\274o\204\\=\333(Z<i!\204=/\324J\274\007\300\034=2\362\311<\371\332\032<\302\240Z=e\371F<\006\224\233\275{7\206< \263\303\274\215^\224\275.Hr\275McU=h\276\014\275`\210\244<l\267*\275\340\317\005\274\021\320\252<\223l1=\303b{;u\314\256=\375\201\205\273k\'\r\275>\314:=\310\204\326<\270\244\305<\035\"T\2740\2456\275\333\006\342<\177<m\273\304\234\207\275W\323\035\274WL\361\274\255\277\361<\017\3532\274\315\"\212\274?I;=6\330\364\274\305\006\265\274\344\314\266=\340yw\274z\351\027\275J\253{\274[\020\270<$,\n\274\301\321\273\275\256\237\335\274m\300\036\275K\204D;\026=\300<\220jB\274C4z\275\357\353\022\275\352,\020>UN1\273:\257c\275\242\'\206=\373n\266=\313RZ\274\252n\314\275\235AS\275\366\037\340<N\342\233=\261\220\027\275\224}\034\274p\240\300\274\316b\021\275\363\035\310\2749\266]\273\301\306\234\275\260OK=yv\004\275\3621s:\321\030<=\"@\265<.X\257\274k1`\2735uV\274\030\227,=Vl\200\275\212<\311\274\350\313\037;w\362\206\274\350\366l\275\206s\210\275-\275\025\275\211\020q<\220N\352\274a\225\371<t\256.=D8G\274&u\273<\245(\205\275\377\361\277=\325\025\211=\245N\267\274\322x\034\2750\320f=\235Z\203=\n\242\242=\334\316\013=\224`\336<\007,\361\273\225\0358\275\265\241\026\275>\320A\274\205J\312;\270\221\331\272\250\205J;\237j\242\274\0106\304=*\310X\274\240\215\177=\0012\276\274\311\241,<\274\251r=\256\204\005=/\023\324=K\254\243\274\000\236\216\275\236#\343\274\230\2471\275\213E\330<\250\213\\\275$\202\223<\231\343\270;\256fp\275\344\326\r\275\372/\230=*\025\016=\347o\013\275-~\031\275\231]\375\274\310|\376\274!\'\273;\275\343$\274M\036\013<\206h6\275s\367\231\274\001\334\335<X`\213\275%\3326\275!\003f\274S\317%\275\206\223(;\317C)=\340\027q\272F%Q\274\367!\225\275C\232\316\274(\303\026=5\354B\275\36290=\353C\371\274\n6&=\2374,\275\205\325\240<\244\237\276<\003\031\001<\254\364 =\232\234\003<\2347\212=\310\226\344;\314\245\023=\306\340\306\274\202\374\023=\313\331?\274\266\226\274<h>\r;\333\343\215\274*\036C;\305\321\244=\320x\326<c[\274\274\310\263\246<\211\365 \275\346-\201=\rn\366<\260s\373\274\361\327\361\275\036uU\275\212`\300\274\272\223\332\272\254\352\347;~\030\314<\013\277\036\275v\261\227<Ds\002\274H\210\347<\244`\354\275\033n\255=2M\345\274A\246\300=Q\213X=R\230\242;\303G\217<\363%\267=\341\260\016=M\202\032<E\2702<,\004v\275\203\235w<\273\222}\274\033r\205=?M\365\274\204\r\221=\240\336\207\275\356\331\360\274k\370V\275\312M\253\272\246\360\n\2746(\026\275*\375\210\274v\261\230<\244\'/\274^\017\016\275)u\023\275C\303\304\275\315\333\277<\234\310\256\275\277\024\333<\n\347\323\274\321\250\241=\243\302\343\274V\r]\275\004\035I=\3200H\274\033d\264\275d\341\210;E\021\211=}}\330\272n\337\201=\021R\224\274\361\246\335;V2\021=\244_d=\364\272\032=S\034V<\370\r8\275\343d\223=\372~\277=([\207\274N\347\271\274Q\342\222=J\3675\275p\017\331<R\367\342<\274\236l=\010\370\016;|%7=EXL<\257\310\251=\327\220%<\266\202\004;D\325!<4\025~<\317O\271\274\203\300\'<ut\256<\007O\236=\350\343\016\274\245V\273\274gs\337<\030\361/;N[r=\335\204\317=\241\227I\275\\,\020=\002!;\275>\007K<y\357l\272z\372\201<\200\236?\2759%,\275\005\270\000\275\2378$\275\234Y\217<\314\204$;\227>A\275\230~\212=\375^\010=W\304\356\273\255\267\007=\225\360\277<\263\236|=\207O\202<\303m\354\274\216\214]\275i\021!\272\305\267\017\274\344P}=X\027\301\2744\352\377\274\347\251E=\353\3335\274#3-\275\312VE\275\377\231\227;:\r\226\275\t\251\307=\215WE\274\312\307]\275\304S\250<g\345\225\274\370D\327\270\0233I\274\265\265p<{\245\007<\364\345\006\275\244nd\275\233\342\247=l\351\360<\336\305\n=\032\000\337\274\3474\203\274X7l\2749H\347\274t\330\334\2750DB\275Z\321\207\274E\357^\275%\220\212<|\343A=dH\342<g:\206=\0260*\275^\271\251;\201\007\n;S\320\376<6\177I\275N\346\217\274m\211\020<$ig\274\220\177\\\272\371\221O=\n\036\004\275\322\'\373<\222\302\352\274\367\331\372<\270t\026\275\010`\213=\245\235v<u)\013\275\336t\330<\027\201\201=U\323\374\274\236\213E;\301\314\224\274\217\252\022\275\265\357\216=\024\362\2756\037\307\217=\374\355^\2759\373?\272iQ\311\274\226\246o;\220\273[=\247\357\r\275\200\355U\274\rX\"<\234x\200\275A\331\r=\rx\231=F\365\211\274\370\240\315<\210\362\265\274hx\243\275jv =\262I\335\274\000\2552=\372\363\327\273\3363h\274b\264\'\275\003\342\322<\327+\227\275\220r><\345\242Q\274i@\355\275*\301\214\274\\\001\267\275,\211\276\275t\215\372;\237\365Q=\r\373\325<\230?#\275\177\020\225=DEJ\272\004$\264<K\247\r\275\235\311`\273\247\353\347<\226\367\017<6\237\223\275\367\326\306<\361\372\211=\021\310M\275\2051d=\356\367]<\312\343`=s~\213=\235hC=6\204\252\274\311K\003;Tn\377<]73=3\006\000=\242\271\331=G6\305\274\002\036_\274\226X<\2754\243*=\020h\224\274y\242G\275)\017\203=\230)\341;\226\205\034:\231\2100=wc\000=\2665\243=\243\306\\\275\010\022\'\275\340\372\006=\335\232g\274f\3422=}\032\317;\374X\367\274HW\332<\203\202\014\275Q\r\213\275\271\240\025\275\263\037\331\274\250\202\200\275\246\302\033=J\036\236\275e\217\254\274\005F9=\237\331\354<J\010)\275\246#\177<\304\210S<\334\310\022<&\036\201\274$`\276<\277\033(\275#\351\000\275hZ\354;\352\352\243:\023\000\357\274\356\325\016<\266\236\333\275\365\331\030\275c\313p<\210\177\254\275R>\305\275\020\201\204<\t\302S\275\t\340I\275$\377\236\271\237\306\025<\207\376_;\255\245\226=\222\214d\274WC\212<\024\355u=\035\263\265\274\t\343\305\275*\253\244<(B\206\275\t\317\274=\311\001B=\t)9=\215\362\214\275]\031+<<\335*\274m\r\276;\001\254V<\301p\312\274\206\023\323<\227\275^=N\210\252=\270\374\004=1\274\225<\304\032!<$\tB=,\204\010\275\372\245F=\335\2523=k\347\223=|\t\303;\325\010\014<\241\036\250\274\tj&\275R\361\201\274\255\206?\275\037\225\264\273\271\000\023\2751V\220\274\026x\003=\2714j\274%\206\007\275+\013\221\272\002j\227<\027\223\260\274k\2766=NE\276\275\222?\226<$$\204;\331\362\305\274\237SP<\370F\255\274\037\315C\273O1W\274\216\021\016<\014\304\251\275\230\0164\275\004P\t<\264\243\345\274,k\364\275\331\003\235\275s\250y<\310\355\204\275\326\364F=\377\344\230\275\345t\354;\347\032P=\337\263\220\274w\237\374\273<\200\367<\377V\344\275\364N#=\211\205\001=\032\335\246\274j\322\002\276p\203\341\274\362\201\232<\256(\032=\267\221\003\274\251\353\023\275\236\335\206=]\343\222=\223\0352\275\274nD\275\323\330/\275XI\'\275\264\001\214<cF\t=\256\264\311:P\017\235\274\023\256\210=B?\226\274\375s\007<\256\351\324;l\316\343=\335I\246=Vk\034\275\201\347\213\275/1#\274*\232K=d\334 \27300\'=c@\000=\266E*\275\320\266\025=y\200\246\2751J\233\274/{J=\323\246e;b\300\373<\233{\335\274,\305\'\275\013\005n\275\375N;\274E\305\302\273\307,\004=\273\021q=\2017T=\003\302\221\275\217\372M\275\265\241G=\005\001\033;.\376\031=V\013\215\2755\3554=F>\370\274\213%\300<\267\267\230=\036 \257\2746_\327\274\356R\230;)\324E<\367\003p\274j\301\246\275\206\232W\275\200%\034=\204\243\236\275\003\273\"<0l\212<z\016G<b\350\001=A\336\220=\370\213{\275\370\264\206=Am;=\206\366\031\274\254\234\336;\201A\016\273\262\013{<\371\324\324\274H\211\036\274\316I0=\366:\201\275\333i\000\275\243pl\275%\034\013\274uA\025\272i\325\316:f\313\\\275u\245\223\275\306\363M\275@\273]=\036g\311\274\326\223\225=R_l\275z\374\227=H\277\253\273^{\205\273\255\354\253<\\@\000=\n\2455=1\365\242\275\001X\243\274\251\231T\275\311\316];\235\376\032\274\223UD=\210\365T\275!\243\303<\221\255\217=9W\312:\3202\206<p\335\212=L\265k;\245\231\277=Z\306G\274C\277\202<\320\331\022\2733\346\253<^\315\377\2743\016Y\274JV5\274\234Y+<\301\355\234<Fwh<:\303A\272\"\234C\273\002PM=\260\261/<6\321\030=\0141\232\275\243/\001;+\222\327< \233N=\336D\301\274\332\314&\275\031N\204\275\351\200K\275O\314+:\304\221\023<Fs\204\275\276\322\345\273>gt\275\316Hw=\'\214P;e\372\273\274\203r/<\226\212O\275C\361\027\274?C4\275\336\252K\275\004\264}\275\031\236R=LQE\274\273\026t\275L8h<\375Ta=\003D\351\2729H3=\004\376\357<AD\225\274pBA<\330\363\"<\3204\315;\3631\006\275\255\213\205==/?=\023+\366\274B\310\360\274\305\240=\274}\327B<~1\014\274n\332\224<uxk\275\017\255\263\273\035\241\031:6\340\033\275[\246\356\274\267I\375\275\027\221\325<\203N\301\275TU\357=D\210\253\275\312\376\246=\231`\r=B\351\367=\002\202e\275\227\350\023\274\373\022,\274\367\037n<$y\t=eZL\274sO\340:\264+\003\276\221k\272<w\273\232\274\303\220#\274?\271N\2750\214\366<w\330\212\275\300\032U=\"`\027=\240\365\350\274\366\306\002\275\252t,\275\257T\353=XT\"=\203b\245\272\250\364 ;\376\352X\2756*\201\274\237\271\250<&\372\2709\365X\031=\334k\262=7\227M=\344(\017=\331\3245;=\343\034\275\260\\\344<\252\3105=\327\376\314\275\026g\263\275*W\002<)\361\360<\364\254\033\274&\344\216<A\003\232=\233b\352<Q\260\020\275\251\347h=\240\356\265\274\272\300\261\274\343\327@;?\236\333:f\"\026=\201Q\345\273H#\324\273\010\005\311<\245\337\320\272\323\3362\275)\332\264:\243\323\001\275@\322y\275\374\240^\275`\337\200\275\\u$=!\250Q<\204p\311=\261c\244=*\251G\275`~\010<\350\007\006\276\347\035\361;\375\252\374\273\231=\246=\235\017\246\273C\3166<\032O,<\320\017\t\275\311K\001=$C\250\274\224\230\302;\220\220\275;b\254\177\273}&\335<\200*A<\343\324X\275\350\314Q=\370\346\355\274lY?\274\247\033\344\273>\242\002\275\220\321/=\271\245\017\274d\222#\275i\233R=\016vh\274\025\210\017=n\031\213\274\307\253\304<\351W\006\273\024?\233;\342b\235=\3277\202=px\244\274o\350\210=\022\275~<\0248\r;*fq<Nhq=Z\315\206=\346z\235\275e\330x=\3728\021\275\242\373o\273\215F\213<6\000\304=\024\233\267<\361s\r\273\327\202\247\275\223\322x\275pNp=\226\306\253;w_\025=8\002g=\321Z\210=\264\177\264\274\006\311(\274\346r2\273(\010\037\275\025\315\321\274\245\213\347<\360o^\275R\201 \2757>]\275V\030@<\206\257\013=\021y\234<!;>\275\224J\000\275\356\210\223\275\341`\253\275\237\372\202\274\\\226\240\274\261Q\030=\357\302\002\274m\203\177\2743\2659\274\326\251+:\\^\204\275SI\2026\265c\207<\016\307g<z\247<\275&KV=8d?=Jl\201\275\257\312\246=\010\354\244<\376\325\256=\216l\020=5\016\241=\353C3\272\177\343\361\273\303\327\304<\366Er;\014\205\267<D\253\352<\311\200\007\275\306f\263\274_t\232<y\310\214\275Q^F\275\017L\213\275\336\353\361\274\277\352\234=\303u\342\274\030\251\305=\\\232\206<\2626]=\370\313\004>\351\034\267\274)k\356\272p\036\253\274\302\364\003=\255\363\223\275`m\035\275\200\025\023=\206aS<\345Bo=\216\033z\273M\0246=D\236\264;u\226o<p\3759\275\251\312\362;U\201G<\343\326\n\275]J#=\202HS\274A\036\217\273\3444\205<\276\003\344;\231\214\216;X\216\266;9:4\275k`\205=\245\';\275\301\242\205=\203\206\370;\365\340\034=\373\037|\274\0248\277;=\216,=\260k\217;qfk\273\251\253Z<\n?J=7(\300\274\177\2763=\013aa\274\222\247j\274\365\357~;g\255a;\022\005L=\322\376$\274\231\361=\275\260\377k\275\016]\231\274\326\232\207=_R\035=P\264\365\273\277y3\274\001\217\251<\376\374\235\275\206\221\004=5\345\317\273Bs{\275\314\227\021=\237\264G\275\214\227\236\274$\224\202\274\213\320N\275\372Vd<Xi!<\\4M9v!\351:\246\346\177\273VU0<P\342\t\275\312D\243\274<\237\237\275P\317\367;F\024{=\255\234\206\275\345\007\222=\354\312\275<\205\220\263=\213\021\025=\322\036\324=\030\212/<\000P\277<4\350L<c\206\212=\001rm\275\rQ\340<\213\361\017\275\037\225\025\274%\346(\275\260\300d;\302 \025<\316n\037=Y\203\305;\377s\247=\247_{<a \241\275&\016\022;\370xu<\27234\274\'\024X=\n\246e<n\t|\274\036\273\010;b\020d\275\262P\205;?\341#<\332\275\301<\031:m=\267\020\206\274T\254\306<\216\340e=Oc&<s\231\000=\t\243}\275\376K\303\274.g\005;\327\255\002\275l\2528\274\030\255\202=\374\331#=j\375y;\005\024U=\2560\223=H\220j\275Q\336:\275\261\177\266:\010uU=px\354<A\221\252<o<\3627\000v\256= \223\206\274\226~\320\274X_\034=\215\337\334\274\203\245\277<\247\375\027\275\010 \325<TT\231<\331\367l=\\\241\314\275\033\340\253=\025\262\026\273\245\033x<\216\031\276\274\241\360g\275V\014\302\274\261\273\334<\373b\236;^\357\326<}I\"<\317\r\273<\366U2=ql&\275{d\300=\205\010\302\274\034<\304<\331U\213=\004\350\367<\313\365\206\273\004\263\027=\032\352@=\270\301\270\275+\215\027<N\254\022=\000g\006\275\t\000\240=\241\305)=\374\205\271=\314U\232\275\213\215\346;\344\207\322\274\262\235B;\215\251F\273\241\226 \2746\354\010<\005C\310\2748>\022\275\361M\237\273\345?@\275%\221\323\274%\325\211=\027\234s\275\016\240N=\333G\204\275K\031\301\275\350y\265<fd\274\274\355w\000=\031\357\223\274\017\267\303\273\230\266\225\274,\311#:S\316\374<\225\252\244<\216\260?\275S~\340<O<\013<D\236\236;\032l\206:z\036\342\270\364\251\232<:7\255:\205>s=2\315\331=.dU<\247P <PI\231\274\013\252$=Q\317\r=w\344!\275r\310#=\326(J<\"\274w\274V\215\360<<\345\030\275wA\243\275}\330P\27487k=\342[z=\275\323=\274\206\033x<\260\342\344\274\240\333\305\274\232\306\201<\333N\267\273\346\244\020\275\0108\302\274\324\236\272\2749\311\274\274\222]\226\275\210\t6\275\324\\|;\250\006\361<\356\350\232\274\216\273X<m\352$;ZR\343<\353\325J=2J2\275I+\025\275nJ\314\275\221\310\037\274J=~\274\364;\003\275\353}\027<q\343*=\351\347\234<Zy\227\274\006\266_\275\272\305J=EWw\275\246\365\263<\317\353\360<\035\017l;\355^d=H\231\226;\264\274\261<\265\244\276<\204\236\206=\261\264-=\224\033\'=\327\324\376\274\226\316\242=\361\252\000\275\274\201\331\272\017O6<\001xg\275\320\234{\274\272q\320<Rb\014<\177\003\202\275x\036\204=\034\352\214=\354\005V=]\212\342<#gl\274f\010\207<-\351\260\275\'\200<=a#9\272^\'\214\274ZdA\275{\361H=\366M\253\275\006I\361=}\021\244=\236\221j\275A\235k=\342\032Y=\020x\224\275H\036\251=\331\272\033=\245Q\274\275yX\215\274\232\307\224<u\252I<\237\326U\271[\362(\274d;\203\274\340\030\235\274\211\001]=I8B\275^\223E;\353\377\317;\347\206\354\274\326IU\274\206\313\177\2756\313\256\275\372\375E:\205\214e\275[\242\005=e\254\204=1\352\313\274\246wO\274\n\342\304\274\265\230\251\274,\261\261=V\244\027<\020E\374<l\256c\275\324g\t=\311\224\264\273\321\204\311;\302\034\201=\330\224N<\361K\214\273\240\222\336\274\325\014d\275\177o\t=\321\271|\275\267n\340\273\244\025\301\2743\027]=>S\213<c\177\372\2743\331\356\273\253\276};K\202\254;f\347/\275r\004\337\275\345\246\205\275n%\221\275\346\205y\274,\303\221\275\t\033\220\274\017\230\014=\333\250~=q\335\t\275\205\307!=f\030\022\274H\277\276\274\037u\021=WO\337<1\220\275<7\324\002\275\203\024Z<\365\342I\275g\027\310<K^\254<\003h6\275y\026G\273\247\311\303=O\344\366\274Z\273\341;3\261\'=\007{\230\275\341nQ\274\306\205\236\274*\203S=ze\257\274\311\260\321\275/\374\260\272*\266\244\275\327`\207\274\224 \"=\356\323\000<h\246\344\273\353\230I\274\227\010\252<\246\247\346<\345\211\031\275\277\037\231;\305A*=PQ\233\274\377y\220\274<\331\027<\006\305\\=\"\020\206;\023\213\234\275@\253\271=Dxo=\352\222v\275\365\204c\275\272m\224<Z\222/=\252\027P;.\252\251\275\347]\305\274\242oz=\010k\365<\353>\025<(nz<\234\364&=8G:\275\036\374N\275;R;\274\306\364\246\274\nN\304\274n6\376\273,W(\274\341\327-\274t\336P\275E\340\230\274\024\017\016=\255\005\330=RO\320\275\336kV=\\W\336\274\337\240)\272\301\204\317\273\306\232\332\274\276#\026\275\274\252\242=4\300\304=U\311\331\2748\014F\271\366.6<\332&\202;%\303\r<\365\0109=\255\310\t\275V\375\313\2745\021\202\275\026O\326=\373a\223\274\201\370\331<\363\\\212\274_|=\275\007\351\356\274%\246\300=\341\025\213<I\262\373\2738\237E\275\010\370\307<e\375z\275\014\273\225<\223%\030\275\031\026\204\275i\262I=p\324\232=\346\331g\275w\271Q=\250P\260\275\207\030$=\340_N\275\232\376\355<\237\252\325\274\273\236\261\275)\'\224\275\360B\347<\364\260\211<H\016\006\275\237T\027=\014U\231=\241_\337<\244u\370\274\357\370_\275\274` \275i\372\245\275\240\003\036\275Rjv\275\035P]\275~\227\231\274Q7\310;E0\232\274\315\337\236:\316\200o\273\210p\"=\365Yp\275\277\243H=\354\t\315<\257\327\271\275B\361\034\275\0349\325=\000\375!\275\010\322\274<~z\024\275o\317\2009\303\341F\275\227\313\272\274\ta\024\273\020\277\031\275z\356j=\362\204\010\275\370t\366\273|\217\035=\017\277\246\274\333\325\327\274\357\357{<\035s\241<\231r\227\274\206\334j\274\3500{=,\231c=Jrn<j)l<\260\201)=\"\220\004\275\351\245\337\274$\244\366<\331?\205\275Cx\262\274\233/\235<\017\222\321<\275\016m\275\024\215\273\273\340\306\035<$\035\367\274\305\247\253=-Y`<\340\213\222\274\365x\243=I\n\334=$`\006\275\353x1=@\373\231\274\211.\360=\te\004\275\357\267\212\2743\324#=\261\0071\275\330p\010\275D8?\275\376]#\275O\333j=A\240b\275\251K\t=\207\034\037\275*N\201\273\204\221=\274\247\311\225=\314\224\237\273\007\344\266\274\350\026:=\276i\031=\307\021\337<PL\240<\361N?=\233y\364<\320]\352;\307\0140\275\321\"\266<a\030Z=\360\276\203<\364\027F\274;\314\354\273{`y<\226E\n\274\002BS\275\322W\355\274\326Fe\273.\026\037=,\031\251=\264CB\275\"X0=\035@\335<\322\246\342<Sge<\010\341\251\274*\352\306<\321\260\246=m\"\362\274v\000\201\275c\264\271\275D\014Q=\371q\336\273:,R\275uw\016<*\372\271=3\302\375\272d\352\035=\022\241\020=V`\n\275\243\036Y\275\227\007\371<\260\330\247=\213\346\030=L\353\'=\336\272\000=\303\246\n\274\"r\330\274\251\335%=p\353o\2744\246f=\362\253P=\362\307\r=C\006_\275Z\264\251=\242C\351\274~\307\337<!\340\217\275+\350\271=\221\202\310<Z\363\204\274cq\236\273\004\317\335\273kt\230<\205\264t\274\252\321+\274%\261\035=\242Q\233\275!]\006\274m|\016=\327cf;\314\026\217\275\026\304\177\275{L\263=\203,\350\274\230\305\004:\010\024\266<t\027\027=\003B\331\273PQ\315\274\021l2\275\345\2204\275\201\320\313<Y\364\014=@\325\225=\232\240\314:\275\365\313\275E\340+\275Z\345T<*\272\200\274\210-\316<\014\036\014\275\306i\"\272,\374Z=5\254b\274\315\363\272\274\216\212\030=\206G\376\274\2312\201=3\276s\272m\360?;\334\356\301\275a\033\263;7\225\355<\361\255t\274O\001\\=|\306\256<\241\245\221=\323\273A=Q:\'\274\336!\307\274\353\245\001=cu\000\275\032\253D\273q\207?<\253\367\n=\0227K\275B\237\232\275\362\356\031<\323\312b\275\325\031S=\271\241G\275\3008\307;\t\034\254<\302C(<t\2414\275AB\006=\365\267\004=\275L\344\274\353V\'\275\257jM=]\353\023\275\027q\256<s\331\031\275\006x?\2759\304\310\274JP\201<\"!m=tET<\206\325N\274\362\331\264<@\221\r<g\032\330;\023\341\323\274&\266\\\275\303S\302<\r\024;\275;^(=\n\023\235\275\363\026/\275\027H\341=\035\375~\274A\265\'\275\027_\265\274\002\221\312<A\024\003=e\034t=B\006\226:\210`\350;\330\205\027\275\222I\270<\236w\034=\333\342\262\275\002>\234<r\326z\275\353\275\236\274\360\006O=}\263\350;\330\304\365</\277\303\275o\245\023=\226\020\256<\206\367\303;\023#\004=&L\211<\361d^=\037\342\310<\\\363{=\260\217\222\2752\2713:\025(;\275\027\213v\275N}\234=d\336\322<n\345\266=r\352\225\274WW\362\274\333J\254<b\333\253\274\222\265\372<\263\245\036\274{V{<\311E]\2751\363\317\273_\217\253:\222\0303=\3406\331\272\027\3668<,\026S<\250\304k\275K\221!=Afi\275\251Q\211=\344\022\020<\341\251%=D\202\r=\277\376D\274\003\333S=\357!\360\274\207P\200\275\367\360Q<K\367H:\244\317\225\275cN\220<\301\340\206\275\350\364P=1\301L\2732\372+\275\274\330\026\275\326\252\202\274\02722=\371Hl<\t\206\\<\\\'\247\273\316c\237\274\tW\235\274\224l\314= a\230=\224\201\006\275Q9\267=`\013\032<\0252\237=\220\243\030=\335&\330<\010\224+=K\010\300\274\245\007a\275w\002\232=\270\261\356<oi\030\274\244\315\'\275W|\217\274\000/\220<{u\254=\005\031\204<V\226\247\275\241\334\316<\225\312\347\274\345_\230\275u\032\356\274\025\322\331\274usy\275\367\022\201\275Yb\216\275\303%\231<\317e\342\274b\241\334\274\034\321\364<\312\220\277<\244\r(\271\316\352\335\275N\242\311\273Er =\231.}\274\331q\210\274\256v\260\2730;\231\275\236BE;\274\325\234;n\311\226=I\007O<\010\206:\273\033@q\275g\023\350\273&\256\242<\326\243\216\275\205\177N\274\346L;=\352>\311\273/\333\005\275{4\261\274\376.\261<w\245C<z\025a<\242\251\344\274(i\227</\201\314<\212\315\316<\275`\025<w9\327\275\254\351\325\274\t\267U=LJ\n<(\032\265<\344\3379=\002\203\317\274\277\241!\274\035\326\323\274\234\276j=\304\204G\275\346\313\002\275\014\330j=\230\217\262\275\3646==\033\211\035<p\350\374\274R\260\263\274\244\370\220=\212\014\304<\226\371\210\275c\304\261<\233s\256;\037\261\303<\270\261\307\274\321\242h<\n\325?\275\211\030\257<o\003Q\274#\354@\275\215\326#<\013\351\221=\267@ \275V\257\233=\335\240G=[\"\316\274v\335\333\272{\033 <\312xJ\275\rcE=\307L\375\273{\304\252\275\241>\231\274\304\2202\275aI\033\275\372q\207\2743\tO\274\263y\367<r\265\232\275\tb\037\2757\210\343=\262\2165\2748`\212\275\334\332\005\275\246\3748<\212O|\274J\362\351<\306^\261\274\027gL;L\036\337\274\275+\231;U\254\r=#\340\376\274:\033P\274\304D\270\275\001J\005=\347Y\250=\031W\361<1\207\024\275\231F\243\275\263\246\305<Ek==H\225\002;\241\367\206\275\302v\245=\345Ur=\262\264\277\275\353\\\230<`\257\030\275\032\212\224;U\006\273;jM\324\274\330J\014=Q2~\274c\025\212\274\342\214\354\273hG_\275\376F\262\275[n\251\274\323\314\310<\316K.<\335\357H\275\375\333\262\275\256\373k\275\213\235\327\274\'\013\275:\270\002\202\273\210L\206\274\366\334\253=\302Gk=%.y\274z\243\2669Xm\265=\341[L\273v\014\203<\206\300\271<\371\177\353;\253\032\206\274\337\232\265=F\351\361\274\034 l\274\026!3\273\200\220\370;\374\"{\275\004\346M<d\016\037=\324\316\370\274\003\242\304\275\001\323/=\372\\\373\273\274\352\010>\250\242\373<[\326j\275\340\274\037\275@r:\275\340\202c\275\'\310\340\275\352\373\263\274R\247S\275\306\341\247<\212\036\333<\311\031\230\275\312\356;=\253\254A\275*\2264\273;\211&=5\227\022\275E\264\343<\311\266\212\275\217Sl;\\R\020=\032Q\001\276B.\312<#\223M;\315Vu\2749Ri=\344|C\273\3236r=\371_\004\272\234}\356\274\341\264\305;\022I\212<^\310\377\274\234\367\340\273\243a\352\274M\371\255<8\013\031\275}Um<j\200|\274\341a\302<\026s\230\274\325\017k\275Z\360\210\275|\"g=D\020A<\376^\202<\"#A\273\361\231\375\275\355O|\275\354\032V=\264a\\=sz~\275\254\301\002=\004-i=\346\232\317;Jz\255\273\240u7<4\024=\274l9\177;\270\364%\274N/\364\274\222RK\274oO\023\275@B\003\274\377\314\177\275\376\361,\272\312H\376\274\244?\255=\224U-=\300\324R;\347\263\014;\237\025\031=\"\346z=l\266A\275\021n\233\275\242O\373<\200q\"\274\362\031\337<J\233\364<H\243\025\275\314LX=(K=<\267`\215:\331+\214\274!\247\"\275\243\231\343==\2065<\202\307\256<\245 *\275/\023\331<\177\303\250<\300\250\013<\366\264&\275?\312D\275-\302\343\273C\344\223=tTn\274\246h\265\274ec<\275\245Y\253\274H\366t;\006\023\240\274c\245\260=\202%\200<.\356\016\275n&\273\273\303\003x=\252\021\302\272\230\010\002;\327~\363\274\336\370+<\313\310\211\275\341\2760\274\035\237.=8~\211\274\277\274\373:0\272\004\275\300$\343<{\223e<D\334\230\275\335\343\343<s\357\341;J\033t=\337$\330\273E\302\325\273\335\327\372<(\021\003>97\222;\256\257\354\274\331\027\022=&\221\216\273\035\n\362\274\356\345M<:OA;\305[\236\275%\006\247\275\263/`<\231\246\024\275\273\007j=\2236\220<\233\224\355\274\016\256\325=\227\267\206\275d\n\303;\210\2321\275\351=\276\275\201\356A\274\2071\340<\033\266o\275\271\007\237\274\342q\214\274\306A\267\274(\025\222\274\366Z\355<\214e\363\274\354\226\240\274\254u\347;\224\242\017=\031^\207\275tz,=\242\310\306\274\263\2713\275\254U\311=K\315\332=\032\317w\274\247\023\350\274\2000\227\274\222>\303\273\254\242\223=%^4\273\030b\305=QA\027=\272L\203\2735\264\331\275.9\242<>4\024<\224G\036=u\257\377<\354w\031<(\312u=4\251\214=\303k\335<\3300\001\275\301~@\273\264Dp=I\025J=\032\361Y\275\342\220\030<#\252\016\275_\221?=Cp\214\274\255\220\'=\333\371\020\275\215e9=h[h\275\350\007\335\274\2310\361\274\204\374\236\2747\rC<7\005+=\022\227 <\014\312\265<\322\260>=jZ\302\274\320\234\220\275W\224\n<E0\007<4j~=}\366\"=\3050\216<dZ\201\274/\246T\275K5:=\225g\240=@\247t\275\251\350\350\274Bu\237\275\344\024\325<\036\371\244;)\002\034=\304\226\r=Z\2631<\301L?\275\'#\006=(G\217\2758c\004\275\264\300\254=\3160\001\275\330g\024\274.\207\206=\004\204D=\275H9=\013\372\003\275%\265=\274i<\037\275\n?\006\275\304=\275;\2751Q\275|jw\275\023\2131;\2066\250:k\312W=\207\026G\274\206{\222\273\330g-\275\307LC=>6_<\335lA\274i\333\027=\310JA\274\327j\007\275<\013$<\034H[= \305\031\273\006u\017\275y6\034=\332\251\024;\216\022t\275\273\246\024\275d\364t\274\341\000\270=\273[r\274\356\005f\274\246\037\331\275\3647\264<\333\355\000\275\3044\271\274#\247N\274\001\t\031\275q6\010=\366\312\031\275\031b\351:G\307s<\3706Y\275\2163\362\274\330\335\360\274\3076\036=\237V\361\274$\303\241\273\267\241\266\274\212Vz=[;\206=e\025\314\275\305xO=c\033.=\334\0042\275\253\347\366<\215cq\272n\036\261\275\367\201\306<\000PD</Wa=\010\257\302<\201\271\232\274\n4a\275M\301q\274\004\r\020=#Xx\275\321\023\177:\311\235\031\276\220)\301\275\253\n\266\274\262\210\n\275|\262\020\275T-\265<\250\226t\274XW\027\275\337\221\201\275\214\331\315\274\315\2030\275\260w\266:\032\014W\274\034\235R\275]\202\006\2740\305\027\275\214\t\033\275\312B!\275\027\026!\275\024\306z=%,\215=_\375f\275YO\327\274\354r\236\274\362\266\353;\357\351\005\274\325S\337<KNh<o*\341;\330D\225<e\\\267<\021\203\256\273\241:\304\274\233U\321<\216\253\023=A\013\310\2751\336\001\275O\3330\274!\207N\274\214\326\177=\001\222k\274\267r\004\272\tDD\274\364\376\201\275n\322\341<\362\301^\275\003\001\324<\361_\202<\020\201\000<\364\200\241\2755\016?\2758\010]\274\227[\243<\324\356\304<\273p\004\276l\3665;Z4h;\037\346C=\274\353\024=\"\"\006\275]Z\232\274\260\364\262\275G5\274\272y4[=R.\300\275:s\347\274\215\256\210<_\357\246<\205\031\030<\313\250\375<\331\0276\273kkB=\243\262\037=/\213\221\275\234\356;=2\210\204\275\371\203f=\333\376=\275\353!\324<\344\306\n=\252^\275<\216,v\274u\216\035\275/\310\001=9\232\227\274\204\2370=\223b\262\274\354h\355\274-\275\324\274\275}\216\275\310\177A\275\326\234}\274u\207\347<\342\336\235\274\341\005\357\274\031w#\275z\265\221\275\311B.\275\332\025\233\275Db\265<\232\260\337\272\303\357\206\274A#\337<\236\021\202\275n\343?\275H4\237\275\023\264\003<,\037&\274\021\275U\275e\3028\275H\332+\275\034\300\210<%\370\031\275^\0021=8$w<\343\371\234;I\251\255<Z\347u=\3509S\274\370\213\235\274\215\342\336\274\377d\027\275KT\252\274\251<\224<\"\240\221\274\322\352\320;Qf\326\272z\322\236\274\260Xp\275\020\010\223\274\315\205J<\200\'\013\275\010u\t<x\321\271\274\314\020\177\274\230W\203\275\355\020\315\274E\307\313=\261\003\205<\210w\302<\245\201z<I\013\241\273\334\023\330;p\323n<&\345\357<G\234\010<\031&\022\275wm\203=\371hc;k\037<=\342a8\274.\271\256\275MJ\001=dds=z\244\326<\374\355\314<A\203\226<\307\332\007\275\215\001\252\273iBZ\274\237\221D=\253\305\305\274\351K\215=\006\377\300\273\256\'\274<\370\327*\274~\321\205<\327\"\216\275\021\037e=\'\365|=\221\013\253<t\240_=\356\2266=F\031\003\274\322y\346\274^\225>\275\362\320\363\273\347e\n\275dU\273\274\370G\227\274\315\013\"<\370\222\377<\271\030|=\016\221\207=\272\022\n\275J\362!=\"\265P<E\245\003\275m>i=\001\270\314<\370?\026;\305\202==B\024\223=\241\364\253<\342\312\003<\334\222\201\275\272f}\275;!\014\275\003\314\232\274+\374\226\275k\222\225\275\371\363<\275s0.\275\352\246\035\273%\276\206\275\2142\n\275p\257b\272n\262\201=\330\325l\273e\243\026\275c\031\202\273\201\335\234;+\343>\275t`\227\274\226\263G\273\364\370\330\274\205+\244\274c}\365;\212\234t\274=\203\236\274\326\347\030<\346\237#=\334E6\275\212\250:\275\356\251\336:\021\n\013\275\263\247\306<\'\3215\275\302\233\312\274\373x\366<\241K\031\274@\323,\275\353\312%\275 \277\027\272\030\242\246=>\316\024=\273z\352<\026\212\342\274\253\260#:,\317\215<\243\336\024\276\371\233O=;\262\226\274\265F\247<Cx\317<\223(\023=\240\332\024=UT\220\274/>&=}U\375\274\360\206\367<.>\366<U\202\025\273\322\030\201\2740VY\275)\177\213\275/\3256=\024 \215=\333J\021=N;&\275\037\347\237<E\261\253\275\243!\213\274\254\3029<;&!\275,R\275<\335\226\026\275\250\257\217\275\013\037\014\274\227\227\'\275|\242\225\274\253\017\261\275\017\244\203\275\270R\000<X\262-\275M\323\220\275G\023>=K\r\311<\213>\342<\332kG=;Ph\275\260\227\323\274{>\330=hp\334\271\277\2340\273\345\304\225=\035\270t\274\273\356d\2733X\315\273\257t=<\316s?=\024\r\321\275\303\376\200\275\007n\247\273\014\214\206\2756y\364=\270>\026=\332\3746\276t\377.\2752I\020;4\277\222=G\353.\272\261Xa=\305 \266\274{\2130=\014\277\244\275\232\333\360\274\214H{<\271B\326\275r\226\022<\022\001\272=\243\324\303<\352\275H=\001s*>\247\264\307<\307\3346<\350\246\253\275Tp\242\275\327\025\257\275\300\340\301<YJ\201=7\002\220\275([F\274%j4<\225-\373\273OZT=\235\264\220=\202\370\'\272 \363-=\315\371\334\274i.\365<\203&*<\016\340V\274\330\035\026\274D\224\"\275#\264\035\275\356\330,=\311\300:\275w\304\247<S;\031=%\000\016=\345f~\274\020y\342\274FW\262\274HQ\222=yd\022<\241\036\200\272\217\213l;b{\000\275/\341\324\271\251\360\315\274\213`\233\274\260\004\337<6\245\r=\032\300\225<\262Ky\275,z\255=v\236\247<Q\317A<\346\311]\275\025\275\217=\351s\225\275\021\203\306\275\036\013\232\274\206\\H\273\361F;\275\002\337\003\274:\233\327<\360S3\275\230Lx\274\271YB<D^\210=\360;\021=>\264\030\275\210\tZ<\207W\267\275\344X\220\274\316~5=\354$\276\275&\236\001=\357\203I\273\201z6\275\212\301i\275\032\221\242\274{\226(\275\370\245]\274\332}5=|%\342<\241D\346\273\213>\212<\22697\275\005#\212\275\361\270|=T\271\031;L\207#=q\202\001<s\367\221\274C\254\300=\221\341\205\275\304\371A=\177\021g=\3543\\\275u\336\266<_Y\006\275\271bg\275\226\251\342\273\207\034\326=\304\256\350\274\233\311\330<\t \243\273Y\205a=\270\035\266\274\021g\264\273C\266\252\274\206X2\275b`3\273\204\241\360\273\250\314\243\274\201\305\t=\356\035\270=\213\231F=\311\331J\273\355]\007=\374}\251\2741\354\025\274\335K\354\273\356\021\213\275\031\254\342\273\024\3473<\010\020\263\275?\340_=\200\034\371:\310\306\247\274=k\032<\267\351K=\215\377\216<Z\r\212=\037\277%\275\007\004o\275\344\220\372\274C\2460\275\227z-<^\267*=\314\332\227<\316,E\274\300\246\242=\203jE=(\341\032\274\320\r\255<\205\336;<\n\316\345\274\036h_=\312\036\t\275\320\013\245\272\007T\026\275\3253\271=\347\347)\275\254\031\321\274\272\335G\275\320 \273<\377\200<=\031\214\327\274dK<\274=\240\320;y2\343\272\221\t\204=\347\376\241<\325\235n;>O\206=A\242\232=\215LV\274\255?\022\275\301\374\211\275\272\236 <\234s\205\273\212:\232\275\214,\003<\262\3124=\244\355u=;\275\230\275\\\002+\275v\234\331\274\231\213\256=u2\245<\317\r\024<\267\250,\274\260L!;\233\177\215\274\276X\217\275E\275\262<\021k\302\274\364\324\023=n\2069<.\024\311\273]#\237<\361\227\016<\253\220s<\017$0\275\031\'\323=\321\3026=,\3027\275s\020\257\274\017\212E\275\301\343\237\275\367\266\322\271\350\031\261:\021\336\276\274\270\003\226<\2710\233<Q\327\004\275\311/T\274\010(\014\275\224\270^\275\222\252\353\272\227\374\306\274RY\213<\313,\335\274]\234\263=\341~\2039\264W\305\274Q3e=\267\236\005=\220\345\254\273\360>~<\267G\002\275\367\320\212\274`\2541\275\370(\013\275M\372\005<\363\355[\275\253&I\273d\014\203\275\223\0213\275\363J+=\252\014\\=\262?\333=\014\267\013\274j&+\273\322#*\275o\025,\275v*\214= \3229<}*\236\274\362\"t=/xe<\300z\233=J\3729\275y_\270\274\240\255\211=-n\325\274n\272\237=\211\003\013\275 \201X<\326hd\275\264\372\320<\251:;;&*\310\274^w\311\274\345^F\275sA\243=1G\210\274\343U\255\275\002\275\374\271sY`\275k\233\324\2755\256\342<\302\373\217=\2205~\275S\206)\275\277XT<\"\364\t;\206\004\022\2734\332\222\271\304\366\032=\277\234\342;\032}\027\275\201G,=\204*0\2755\241\\\275\305\346\231\275\345\311\022=[\204\003>#.Q<\236\274\261=]=\200<\344e\354\274W5Y=\003\3413=\246\256\366\274~\331\036\275C\342\271\2730\261\253<\333f8\275?q\206\275\373\307\000\274\234\332\245\273\354/\306\2748\3729=\265\020\224\274\230\325\270<\237\225{\275\362\256\277\274\356\323:=\214+\210=\260\241\352<^\014\232\275\316\327\004\275\204\365\373\274\r\360\345\274m1\024=W\323\224\274\034O\265\274\242\244}\275\037t\021=\350\231\274\274\326\300T\274\374\t>=\216#\231=\227/M\2751#\240\275k\021,=\202\021>;z\265\031;K\013\201=\324\350\020\275X\361:=}XK\275\2561\3369\314\364\014\275CM\327;\361%\022=\370\341\235\275\272b@<\035\025\276\275\201k\217\274m<\035\275\003\250\222=\240k1\275 \322\311\274$,-\275\246\363\235<\030\322\272\274F\367\031=\036\001\262=\330\263v\275\362\210_\273\037\014\365\274\302f\343\274~m\227<\210`\276\275\177\264\241<Kt\205<D\336\210\275\334\211\033=\201\350\311=\276\374w<\200\365\253<\010\322)=\027\274\221=\366\377\250\273\301d#=rG\032\271K\250f=\004\251d\275\336\004\207;\350R\255\275\333]n\275\275\223&\275\330C1=\2406f92\330q;\332\026\213\275\211\240[=\223}\006\275\362i}<\232pW\275#\211\257\274HCu=\317\tW<j\247\317\273\262\0068=\252\345\214=T\2452\275b\024N\274\342U<=\021l\\\275\236\370\273;\253T\"\275\346ix\275\203\274\263<\005\003\371\274\021\235\261<\227I\255\275\256p6\275v\344\340<\356kZ\273&3\215=\226?\324\274\272\370%=\247aV=\r\261\313\274G\251\027=\006j\014;\377\323\213\273n\364\206\275\273\217\204=D\337\237<\250\364\234<\201q\261<\360\323\177<\303\364\364;\377\375\276\274\232\000\206<\224\"\201<\221l\344=\214\3754\275J\rt=\211X|\275P\302,=a\237\341;\274+\n=zb\252\275++\247\275\335N\244\273\013\006\202=\243\346U\275\215\252\245\275\354\017+\275\211\370\251<\016p\n\275\211 8\273\364\216\014=\311\255\353\273\336K\374\274z c\274\262b\271\273d\333\271\274\337\367\254\275q\327W\274\225\370F=t\027\365<\314\306F\275\326M\316\272gR \275b\253\235;\2551\226=P\276\325=\206,3<%w\246\274s\305\277<\340\220\341\275\333\323)\275\005\3319\275\251\207\346\273\370?P\273\255A\030=\206E\017\274\263\362\t\275\036\350\255\272 \204\314<1B\001=\251\312\274=\354\203\010\275\343\037B\275 \026=\275T`u<`\371\312;\343\256\203\274\223O\367\275\3373\346\274S\003\031=\204\020\242\275\330\357\036\275\201\206\260\275\002F\020\275\030uB=\240\237\n={~\312\275\006\263\203=\026\016D\275\375k\r\274\021\307B\273;b\037\271\3373\221\273>\022\302\2746\001d\274\000\265\335\274\245\036V=3\000\222\274\225\245M\275g6\233=\247\3629\275j\032I\275\320\367\320\274\224\275\036\275\310V\211\273\001\324D;\023.\224=\263C\377\274\316m\262<&\000n<\323\341\321\273\006!j=\354I\'\274\341\220\214\274\265\014\273<\223\3158=1\230\275\274\000G\231<\302\310\206\275\320J\326=\002\r\341;4\365p=\3252\230\274]<\371\274\031\217\337\275>\002\365\274i\351\213\274\356\370b=)z\236<;\036\022=jk\232\273\203*U\274\005h[\275\326\300\225\274Z\375Y=\227\305_\275\322\036\227<\304\3375<\236\375!;O-^\275(Ns<\004\314\312<\346\001\346<\375h\216\274\270$\'=\004c\210=AS\013\275>\236\314\272\366\026\277\273T\345-\275\370\336\227\272\306\2732=\357\235.=\260\255\343<\213f\362\274Lp\006\275Y\227\242=\2734\252\273\005\205\312\274\034kF\273\005\233\220\275\304\333\343\272\025\321\250\275\'\213\217=\274T\256\274\300\341\321;E`e\275\224|\271;\220\226\247\274}!\321=wF\030=f\232\353\274\336\205}\274V\324T\275-.\343<[z\031\274\377\223E<$^\221\275\337\375\202<\372\270\213<]>C=L\366\234<\324\311`=dQ\224=\304\340\206\274s\262\262\274=\351\266=\313\271\245\274\320\352\232\274\362\014k\274Ea\200:\345\301I\271\260k\337<~R5;/\332\346\273$P\350\274\324}p<\217\360\323\273\215\2667=4\235\223=\302\325Z\275\031\270\036\275\210\320$\274\245|\241\274\030Y\004;\300\377\003<J0\224\275\367\362\363\273\303\373\272<\263\246\000<\304\275\206<3a\205<$\202\026=\0131\357\274?\303\257\275\250f\270<!`\357\274P\\\005<M\n\253:\236\0359=\023F\336<\363\340\225=\016\030@=U\370\374\274*\023\032\275~F\177:\033\251\321\274\014\213(\275?\001C<\354|\017=\027\n.\275M-\022=\320\356\002\275\260\351\254<\271\324F=\006m\246\275\020J\246\275\267#{\275\025\350\267;\347-\261<Q\331\265;\354\367\010\275b\217\363\273Vb\243=S\2402\275`\266\307=\366\350\316\274\224\264\224=\310\020\037=\020\262\225=\327o\327\275\236+k=\242\275\370;\031m\215\273\344\206%\275\316\263\001=\216`\310\274d\232\022;\017\301\217\274>h\237<\265\320;=\224F\t=\304\\\300<Y\277@\274J3\263\274\342J\273;\204\210\035\275\017\302>=K\026\233<\311:X\273\301\341\253<5v\241<\362\212\216\273\263\265\324\274\211\307\237=\347N\031\274=6\203\275G\030\225\275\237\214(\275\217\247\271\274,\032P\275\005g\016\275p\207i\274V\014!\273\025\373\264\2746\033\177\274 \206^\274\022\351\207\273\206\177\217\272\222F\375\274?\300\203\274\277G\177<\\\376\347<\330\200\024;\307\264U<\031X\344\274\221^4<>\222\345<|\210\221\273\036X\037=\026\337\315\274qt\231<0\271H\275\241\371o\275N1\340\274\335F^\274\002W\211<~\352H\273\362\265G=_\203\210\274\375jp\274Y%\251<x\r\271\275\312\325!=\232pL<\276{N=:5&\275>s\360\274\233\232(\272\017)*\275\2126N<V\226\037=^\013@=\234\350\327\274C\003\250<\340u\233;\245~\261=!d\227<\366]\323<\320\336A=\220\224\311\273\345r\275;\3578\005<g.1\275\014\356\323<\203z\265\275@\332\261\275\016\230\324\274k\rK\275\341\215\246<\2379\t\274\306\376\033\275\373\250;=\312\016\241<R\002\334<2\037m\275\220.\021=\327J,\275\365>4\273*&\240\274\t\317,\274\214\331-=\235~\032<v\r\242\274M\241\331\274O\032\037\274j\321g:\350\204\354\271\256\375\321=h\"0=!q\030=*1L8jW\251<E\375\204<J s=\371V\262<r`d<\nz\211=\177\2570=a\016\261=\327-\333=\356\000\325=\033U;=\273OD\275\002\006\307<J\276\234=.\227\364\275\013\321y<\352\204\334<\0223\000;\347\335\361\274*\267\017=\n\340\217\275\373+\300<\205P\357\273\223\304\373<R\240\205<G\r\225<]`\025\275\201b`=}\216\226=\300\326I;\366\314T\274\200\371\351\275\307\342\273<\237\3543<\262\342M\274\252\355\210=\342W\244\275\337U\007=c\331\310\274\035k\303\274\035\367A=|\212\351\274\3405\'=\321\253\221=\022#\221\275=\3338\275O\264\031=\031\344\262\274\000\215~=\001\371\025<_\354\326\274Z\304\216\274\177y\251\274NT\266\274V\2316=(\246g=\207\364;\275\305\327[=C\305\332\2748\335\357\274\375R\'=P\014\370=E\377\013;\305i\233\272\223\227{<\250\240\200\274uBa=\315V\225=\344~Y=\217`\017\275f\221\232\275l\037r\273\231\017\236\273\241\374\367\274\374\2443<\202\303G=y\355\036=\355\340g\274X,y\275\247m\321<\263\214\201\275x\321g\274\351\213\003\273\320*m=\005,w\274\036`9=\3350 \275{ll\275g\005\364<x*\311\275G\247\341<\204`\220<Wn\036\275\3641Z\274\341_\246\274:\242\314:\014hk\275B\330\212=X0\301<\352\n\222<\2751\263<\356\017P=\355\357B<D\034:\274\030Y\234\274\367\364\376\275(|\'\273\321\'S\274q\305\306<\014\261\247\275\2377\247\275\250\230*\2750Z\255\275\333\260R\274*\375\016\275\347?\243\272\020\003\034=+\344\2238\210\365\357;5h\330;\353\336\027\275\2118\246\275Q\033M<\202\341\242;\2221}=(\243\377\275\323k]=\216$\325\274\301\262\223\274,Ab<\177\326\301\275\374?|\274N\241\027\275\202\313\321;c_\032\275\376\242\242=`\347 \274\214\372A\274\271Z\214<\r\252)<\360\002\340;\362\227\314<\240\020\304\274;\330-\275\354#\301<\226h*=\237\214\374\274\317l\335\274\230ym\275/%8\275R\327&\275\200\364\225=0\'\271;\371\301j=\376\222\207<\267Y\240=G\216 =\204+\254\275\002\377}91\254\035=wUL\2759\234,=\324\203\234\275Zs\001=0zt\274\257\351J=\005\265A\275;N\265<u\361\t<\374N==\024\037y=\235\350\256\274!\266u<\177\364o\275\251\255\316<E\034J\273\000~\272\273\351\n\342\272`\014=\275>\364\217\274\232A\323<dpl\275&\027$\275\262\236\240\275\227\2033\274\233\210_=c\033P=e\225\274\275\246\322\365;\r\030\272\2734*\017=\362\316\253\275\202y\343:\245I\030\275\235k\230\274\213\260q<\026\r\257\274\356X?=\313w\036;\2551`<W\237;=\331\376V\275\234\316|< \250)=\021G/\275\203\301b<\225\036W\275\022q\325\274\220z\253=u\314\234<\221\362w\274\367\014\274<l\246U=\350,&=p\357$=\302\346\224=\337B\256\275\361\001R=?C\237<\021\373\347<\315\016\337\274!\244 \275:Hp=E\030\360<\327\273m\275\247\254\271<MF!<\224`t;\346\202<\275\031q\311<\255\350\346<\336)\333<8\371\344<\266\304\t=d\353D=sU\337\2746\004X<\216\203\263\274\277\2424=\240^\225\275\n\207[=\031\032G=\233B\025=\310m;\275j\216\222=\317\350\'\275Tu\203=\370\251l\274\360\341#<\3670\027\274\233\216\034\275\263,\013\275\310\031\020\275\210Cg\275\277p~=\217+Y=1\257\n\275\353a\305<\022\250\327\275S\303\0019\032\334\017<r$\237<~2\225\274#f\321\274,\266k=\357r\354\274s3\270<\351\362\200=\235a\036=\374\317\216<%[2=\206\235\014<\310dp=\010\264I<4\336}\275\302hy\2744\366\377\274\262\252\324\274\344\342\267<\240B\210<\322\304V\275\203\017\300<\275\005\037=\347I\363<\341\"\257=5\200\007\275\335\021\215\275\371N\253<\355\300\327\274\241\373r\273\0246\356;+\177p=w_j=\325\303V=\305\250\017\275\326\370\233<`\230\256<\332c\350<PL\364;/v\240\275\347\363\365\2730\274\004=\225\022\276<Pui\275\276|\037=p91<X\3103\275\202~\201=\252\303\234<\206_a\275\207\200\212<\366o\301;\263k\334\273\250\230\246<H)\303=\003\017$=k\017\016\276 \315\003=V5\322<\214\256\204=k\217\271=\213\200\317<\322\330\354\271\222\247J\275c\323\274\274S\207\221<C{k\274\022\275\363;Os\374;\303\314\004=#\255\347\275*\352\254\275\214h\205=p\346\260\275o\314\346\274\305\343\203<.C\327\273_s\254\274^\220\303\274\027\310b=\033\227\253<\343*L=\245\220\237\275\231g\022\274\2677g<\315\242\303<%BY\275+\217\222\275\343\022*\275NE\356<\373\342\313\274\364/\270=|\261\206\275m\004\"=\366s\241\275wE\234\2756\231\270;&<\231\274\207\230\272\274\007\270\310\274\333\306\267<X\350]=;\n\"=\321N\007=d\3303=\013\207T;\302\364\366<>j\327\275\213*\t=\345\257(=\356zS=\255\306\254\273\305\023\251;\222a\257\273iO\"=\333\003;<\364\027\303<\236WY\273\321sQ\275\177\253\020\273\\\020\210\275Ta\357\274h\311\221<\233/&=\263\313/\275J\221\020>v\203<=4\213S<\014:S=\n\373\277\274\230\324\203\275S\020X\275=\233\200\275+\350\271<\222\316\257=\224\004u<\327W\271\274\273\334\000\275\224\344$;LU\026\275urx;\353\331\376;f\277\224=\262\037\350\274#\\\021=\"\020\030=\247\242\335<\033f\253<K@\017\275\3766\037\275\352\344\267\274Q\305\036<q \340<\306\360h;+Dr=\274Zy=\344@\266\274\233\203\205;\036Zw\275v\t\270<\216\327F=\370&\366<p\236\356\274\327\177\250\273\312\363\013<X\3618\274\246\201\215\274q\312\302\274\007x\214\274\214;\276\273\014\200\207<\202W*\275\332\326\006\275\301\3767\275UD\256<\372\007\031\274]\254\002\275X\221\251\274\375\231]\275\216\252\372\274$>\231;\222\350\264\275.\035r\274\010\354\343;\351\314\357\273\014@\201<\021\033\371<z\243\222=1#\375;_Tl<\304l\037=\006\026[=&\214\335<\342\3629\275e\305\007\275\242\376\231=\237\357j\275W>\233\275c(l<\337ya\275!J]=\332\272\211=\241\\-<\360\2208=h\243\242\274B\302i\274\013_\345\274\021\333\2439\005xV\275a\203\017\275M\027\273<\352e\260<t\237p\275\024\242\301<UU\256\275\327S\016=\004\2442\275_\235\334<&\370\247\275C\275\034\275>\301\315\274\365Z\226=`G\024\274\360\002\376<\254l\224;SN\010<\241\327\227\275\001jJ\275:/V\272q\227\000<\274\356\002=\200W\263\274\006L)=\237\335\250;\000\261\335\275\326\313b=`\343]=\316\354\327\275\255\r\365=a E\275zn\215<\254X;\275\311H\301<R.\364\273m2\256<wv)=\213\224:=c\001r\2739&\305\274\377\035\243\274b\372\235\272y7\336;\032$n<>\235K\274\004L\'<J3^=\301\340g\274\266\322\210;\236\002E=\247\237\217<\237\201q\273\264\025\"\275\246\330\000=X\252\261=J@\002\275:+\'\274VN\014\275Ic\017\276A\300\342\272x&3<P\330i=\312=\220<\003\0218<\213Y\231\273\332\201R\275\357\254\322\274\034)\205<*%A\2745m\266\274\374E}\274\027\274l<\216}Q=\334\215\337\274\306\245\251<}u6\2750\330O;q6\t\274\311\253\362<?s\202\275\034\t\206:\030\021L=/\371u;\362\273\335\271+\024\025=&r>\275\243T\265<U\345\022\274:A0\275\016C\226=\347\212l<\255r\027\2742\2102=\345]\300\274Py\206\2754\276\004=\031Q#=S\255/<\212\243\235\273T\022u\275\367\362\356\274\357\225\257=\354\341!\275\261\031\253\275\t\374H=\300Y\260<\024aK\275\253\322\362=\323\206\331<\357\316\227\272\275\253\r\275\331\000\254\275\221\255\362\275\241F\270\274\265\342\330\274\342\337L\275\327\213>\275Z\301F\275\206lA\275\244\033e=\315\257o=\240\256\360\274c\257\307;\302\364\253=^\271s=\234M\377=\367\201\327<\222\224v\272>\325-=65\201\274\320ak<\025\025f<\372\265^\275l\203\351<\250\313\225=\245\345^=\367>i\275\016\240G\275. >\275\356\221\035\275g\022:\275\023\000\312<\321Q\206\275\247\200\204\274bO\341\275\342[\"=.\020\364\272\233;D<\236\306}\275\270\235\275\274\013\177\222<\363!\237\274\030\217\276\2749#\233\274\225\364\261=\231%\374<}\\\252=\344\243\203\275\226\266Q=7\222\027\275(\244\262<F\340\200\275\0045\323<JD]\275F\014L\275j!\207\275\333\217\203\275!h\314\274\037`H<e\007X\275\274\243w\274>N\357<\277\275\016\2751\010\256\274\016\273\205=a1I\274\355\214\003\275\367\\\007=j\305\270\274l\356\257\274\225>\237\274\\O\252=\225\316\010\275\017\262\315<c\357V\275\263$\025\274S\360\317<\360\254\016\275\024\3759=\240\317t=p\251\032\274\347\202\365\274*x,\273\362Q\265<pJ\307\274\233\274\237=\361\345\351<\246\230\314;\021\304\243=\372*\"\275\316\335\203\275? \247\2759\ri=\343\034\267\270=\244\207\275\326\213\231\273s\227C\275\204\221\377\273|z\316=\207\250\220<;\267,\273\255\353\214<.\'\373<\002\351\333\274b\226r\274(L\020=-4\353\274\037\253\006=1/\341\274\237D\201\275\252o\034\275\374\355\342<\257@q;\307\241\t\274{\321O\275&\001$\275\254\366\377\274&el<\221T\n\274\301\352k:\251\354f\275\346Q\204\275j\315*\275\337\320\334\274GE\036\274d?\213<\314C\"=\026\370[\275\326\372\027\275\346\267\277=A\037\366\2739E\302<\344S\356\2748\032\221\273\345*y\275h\2274\275{\251\r\275\317 t\274\017\2232=\312\037P=\007\3267=m\234R=\215R,\274\350IS\275L\326T;G\265\007\275c\202\213\275~\353\223\275z\264\211=\273\203~=\216B+\275ZM\312;\032\"\307:\305\375\200\275A\204\020\275\023\261\023<\355\001\337<\273\376\223\274\221\342\201=8\341X=\220]$\274\023\375\037=\010\025\302<Y \326\273\277\330C\274\332\223w\274\345\356L\275\2328\262<\021A\010>{\227\022\274yWA<6VR<uh\223\275\320\344\272=f\355&=\200\362\013\275\335\354]<0\247-=\225\034\207\274\335\265\205\275\024\362\371\274\327\"\\=\362\255\336<!\326\265<\271\233\003</\301%=|\257J\275\252\256\317\273$]\243<af\341<4\274\005=\253c<\274\003`s=\370\001\373\274\262z.\274Due\275X3\006\274K\252\020<l\333^=\264M\272<I\237#\275\234\270]\275\370\323\277\274\\\370\235=iD-\275\377\355\334\275n\000d\275\217\0140\275\231D\214\2758O\226=\177\r\014=\002\317\321\274\226\356\300\274\232c\"\274\206\277y=v\3409\275$\273\216<\351yQ\275\233)+=\3111\254<\361c\350=*\335\000=<=E:X\220\307;\315_\234\274\367\035\035\275\364\020\021=)e\275=r4y=\260\322\371\273P\0276=\005\333K\275\371\326~\275\212\206\315<S5\220\275-\263[\275\244\211\033=\200\3743\275\265qn<~M\220\275\n\366\337\274\211\244\227=iJ\252\274x\251\227<j@k=\274G\215=\357O\270\274\226\244y\275 \230\274<\303&\243\2743j\327;\032\302\206\274=:\312\274z3\007\274\313\022\014=\253p\271\272F7\220<\232=\316<\372\254Q\275\3116j<B\275\353<\024\354W<bn\252=\305N\203<\266\335@=\336\304z\275\375\225\276<\317[#=\323@\323<\002xA\275P\002\255\274\372\213\240\274(\2733<\035<\211<\253u\242=\372\214\034=\335^\336\274\303`\273=pGu=\346P\350<R4\000<\nR\317\274\325\0149\275RuW\274xk\033=q\224\027<\304\022\022\275\003D|\274\033\201$\275&w\205\274\034\312\231\273\224\356*\272\300\017\224\275(?\357<\221\201@=-\002\207\275\030,\260<#\332l=\364\035\347;\351\235\235<\23024\275\276k\334\274&\252\t=\307\010V\275\347#\242=\345\214\026=\256u\217\275U\007\343<\325\230\237\273\0161:<\330)\247\275\001\345\235\274f\270\245;zb\342<\343\r\362<\232\325\013=\357\021\325<\262\017\304=\017\303o\275\212H\313\274\233_\204=\223r8=\323\335)=T\242\002=\372H\364<\0211\327\274{\216U\275\360p\255\274\001\335C=\353B\010\275\"n\216\274h/\224\273)\300$<-\202\262=\205\"\343:\203\036\346\273*\004\251<\271\031\362\273\003\356\023\271\341)\302\275\2604\004\275\253\252]=\026D_=(\361&=~\316\321<\206E\254\275CE};\351l=<G\327\033\275\256ZY\273o\334y\275\250>\233;P\371\025\275\202\035\342\273\216\352<=\316\331\363<\n\022\213\275k\023\033=\007\357\306;\276\035\254\272\301\221 =\013\245\020=I#P<\033v\267\275\202\207\031=r\354\350\274a\372\214\275f\373p\275\035k\024=\373\323\352\274w\030\323\274\347\275\031\275\214\253\020=\026W\305\275v\374\030\275*T\213<\014<w<\004\220G\273,0\266<\264.R<.\241\022=\3706\247\274Ij\241\273\235%w\2735\230\215:\030l\314\275\244\263\007=\345\372J=\234\230\311\274\203\273\217\274l\'Q=\336`\334;C\2111\275dt \275\312\233\004\276h\305\265<<\345\304<\363@\243<\010\265\027\2759\245\014\274lW\017=Z<\303\273\201e\017=\376M\253<\032\330\n=\316!B\275Ttd\275]\226#=\216\336\374<\323\001\220<f\357\265=\354\016\205\274\302\016\210=\314}\020=Hs|=\237\257\225<\360\2321\275\270\236\227\274ph\245\275\212\006\357<?\271\n<\364*\202=\034\345P;\302<\010=\211\302U\274\027D\374\273R\000\310;\277\0024\274\2606]=>\016\324;?[\355<\001\251\302\275\354\332\307\275\017\014\221=\224\363\034\275\377L\300<\2151m=$\200[=\344\t\032\275\000|\035\273\025:\232\275X\331\207;\tt\240=S\206q\275\033\315{<\357\247q\274\022hB\274!\237\005\2758A\333;\200\023G=\374\235\'=\324\267-\274\377\376\343;\\\300N<u\007\243<@\206\311\274|\253,\275\261\376Q;\036\262\005\274\247km=\237\243\350\274\037\244\201\274\272c\210\274\254IY\275\030K\023\273H\271d=X\213\211=\333\354\346;\231\363\021\275S\256\232=<\373\363\274\266\365\004<&\256\250\271+t\374<\264\030C\275\322!\200<\232:\324<e?C<\3070\'\275+5\223\274\270\262\306\2740\303\376\274\030m\003\275\001\357(\274\220>\013\275\007\024N;w\371\205=\273\351\013<hX\354\273\367\242\361<\013\360\220\273v\274\266\274\021s:<N\233\227\274\226;\307\274\031H\214\275\273J\r\275H\215\204;)\303;\274\024\367Q\2750\377\037\275\216\323\343<i \326\274B\205\233<\330PQ=Q\211\314<\376\215\202;\370h\210\275\321\030\024=\334\3678<\001\253\200\275\263\r\n\275\331\250\377=\224\252\350=T\371\327<X x\274\271v;\275\034\322?\275Nd\'=\265\350(<\254fD\274\211\232a\274F\301\366=\364\265\223=~sH\274\377\177\362<I\010\024\275\223\275)=#\206\212<\335\230Y\274\266\237\356\275,\274\246<\001BV\274O\3550\275\315\252\354<\316\241\370:%\377\211\274\317\335\275\2750^\265\275_=\000\271\013\3372</\351\233;@\324\313\275\216\023\013=[\356k\2757\231\035<\211n*=~\225\036=\007\260D=Q\252\332<m\226\004=\013\324$\273\374\2633\275\377\336\"\275\370\037\005\275f\260)=<\202~\273\023EG=~\225-\275\365s\205\275f?\231<\351\n*\275ox\221;h M\275o\312A=\002\345\016\275N\202\"\275\271U!\275OR\230\275N\333\n\275\252\342u\275\330AI<\314(\0309\"\r\007\275\370\227u<~k+=\251\207G\275+d&\274\366\226g=\004vE\274\363~\320\275\0101?<\246\373\033\274\306\325G=\355\257\n\2755@0=\027\303\306\275\206a\271=\377\032\306\274/\231,=\251\032>\274\203\273\204=\256\274\302;\022)\211<2\251m\274\006\360\240\275V\n\205;w\313;=\242\004\367<\006Y[=R\267\274\275\266\367\217\274\030\237)=\233\r\252<3B\017\275\330\250\222=g\024\227\274\342\3258=\021\177\316<C\247`\275\232\024\021=j\370;;\345x\222\275\256\302\253\274,\34149h\334\202\275\312xt\274\014\272s=\251\204\002=\017\305\333\274\341Q?\274br\255\275\037\315\253\274\004\034\254\274\274J\270\275o\303\020=\204\323,\275C\275\200\275\201\327\277<\316\300:\275\342\017\231\273\'~\204\275\341\211\206\275#\256\204\274\037\211\227\275\352\345\300\272&\031D=\312\346i\274L\365\217;\304\344\022\275@\315\t=\020\305\360<\305\372g==$\026=\335/\260<\250\367\245;/%\235<yD6;\234\3656=\354\340\177=>\026\352<\334\337\255\274\260\326\363\274\200\"\220<R\341\207\274\335\262\020<\216]\201=Gp\225<\325g\344\272[\312\000\275\236\017.=\315\202\375\274#m7=\341\305\312<\354\212\216=U\365\317\274\027\375\r<&\226g=\205\231j\275\010\374\266\275\235W\027\275\337\206\236\274\235\"E\275\371p\372\274\017\213Z=\001O\232<\375\027\221=\275\\x=y\364.\275\312\343\252<\367\344\262=\247E\222\272\302\315W\273j\237\362\274\357~I\272p\230\021\274\302\245e=\314^~=\2017D\275\374Z|<q\300\266\275\222\310/\272\244R\231<g\014\200\274\276{\250<`\022\021=\340\275\001\273 v\250\274\'\\>;\242u8=\360\020\205\274^S\262<O\367\346\273 U\327\274\333o\311\275\002\233\253<\253\351\373\273\366%g\273\324\261\r\2756\205\213\274\351&\222<t$\245\275\273\300\215\274Xf\305=\303\241\207<\204\235g<\211\213&=\365\365\230;\ra\332<\355>]\2758\302l;\320\316\004=~y\307\274\177\275e\275\035[\002\275\273\375$\274\nE\243=\336\020\305<N\265\267\272{\344\212\275\304\204\247\274\253C\277=\264\220~<^\255}=\312\370L\273l\323\257\275\316\016\234=vco<\347\222\030=,Hr=U\320\276<!R\221;\317\263\227<\200I3\2744d\215={\324\203\274F\\\003=g\3319\275\201Jh=H\3271<\223\301\241\275\365:\232<\300\377\020\275\346\t\005=\177{\001=9\277\337<\251\322\276=\250,\244\274C\256\325<\367\3706=s\376\206=X\033\344\274H]\212\275.?\013\275\245\306s<RF\205<J\213\271\274=.g\273\270R.=\243\366K\275)\237\271\275\346h\214\275\316\201\351\274\002\261X\275\'\331!<0\355\035\275\242>\024\273\221\324\226;\0039\010<\244\030\344\275\010s\221\274\353\314*\275\277\223N\274\307\325\224=\332\345\320\275G\r\273\274\217\2522=\366+\262\274\034\357\274\275\317\260/\274=\'\267\274\247\366\255\275_\216:=\240`f=\213[h\274\363\004\352=\305~\222\274\347\271\224=\222\253\013\273\330v\031\274\021F\034\275\020\275\211<\342\275(<\345\341&<\036\205\372\274)[\210\275\266\202\316<\332\346\315\274\322_\347<\233\035\365\274\2640@<W\007^=\377\306\324;\242G\307\274\312\234\247\274\201\222\336\274\211\264\007\275\271bN=\265\277\200=O=\027\275\2365\036\275\311.\034\275\245@\220\274\372\345 \275?q(\275\004\351\275\274\251^\226\274\202\257S<\334\350\260=B\343|=\347>\364\273\366\002\r=\225\322v\275\224\264E\275\220\033\223;\301\205\332<?g\263=\360\373:\274Iq\312\274cRc=\350\265\202=\370XT=z\325\235;\203\324\307\273r\207\027\275\3651\316\274\340x\006\271\227*\000\276\273\360\237=kw\213\275:\016x\274\0061R\2746\311\307<\203\007\007\275\334\233\326\274\357\360@\275\262\315L\274\275\307y=\303D\202=\253\331+<@\361\017\275\207\365w\275,8\215=E\304\327\274M\240A\274\222\350\224;\250\321\333\274\345\035\371\274}\253\204;\213\317\222=\200dl\275\326@?<\010f{\275\006\356\240\275\314\no\275\302\205X=\347\306|=\245\255\234<\266^|\273\226\300\234\275-{p\275\274\2244;Z\021\307:\031*\202\275\236vn=\0166T\275\217>f\274/\340\226\275\366\212\312<={\210\275:0\374\274\017\n\265\274\374\214P\274\377\230\246<U\355\222\274\325\241==<\034\207<\003\013S<m[U<#|{\275!{\250=\003\315-\275Q\242\023\275\306O\214<\333l\037=h~\223\275@\212\304\272\370\201<=\023vf\275\200\033\335\274\034=\246\274\321\350\225\275\230\302\244\275\263\021\205\275\324\244{=\314\005\271\274r\020\355\2748\013\201;L\242\250\274\030-\300=\363\207}<\316W<<X\n\032=\216\2246\275\276\244&=t\307\265<\001\371U<wVe\275\311;><\215\232\022\274\336GE<\323\321o\274\035\377I=\031nc=\274\201\020=\260{:=\324\257\247=\225|\024=\255F\213\273\r\250\274\2743\000\335\2740\225l\275\364\356\007\275Bm\353=,w\267\273\n\216\214\275n\200\272=\244_\211\275\255\332\\=\347\211\230=\335\323\344<\030\210\375\274\222\n\017=3\311\321\274\251X3\275[\336{=x\035\375\273}\234|\274\323\371C\275\310\344\002=\022\277\367<\263\252$;*\314\262\275\327$\225\274w\335\226\274\177\372l=\257%N\275\340\324U\274D\330\257<\305M\023=\352\0054\275wE-=\237j\035\275\264\233\005=\317k\245\274btd=l\033\210\274K;!=\207\235]\275b\223\262\275Mz\254\274Af\033\275v\225\213\274^+\235\272\344\353\035\275M\252\260\274\221\002\326\274\304]R=TQ\212\274\321\204x=c\265\225<\257\250\002\275}\240m=3\"W=&\222\236<\361\210\305<\rt\236\275\312\256\275\274\026\264\006\274\006\344p\275\306z{\275\274)0=\261\3377\275\2330\033\275\371\266\307< \330\213=.6\300\274\002\305$\275\335\336\231\274G\270\213\275*\3041\273*&\007;F\212.=+\311\227\273S\374\210=\000~J\275\317/-\275\036t\010\274_g\034\275\254\322\370\274\376\231\330\274Fv\257<\337W\317\274(,X<\340\207\277\273\226s\225\273\233\231$\275\317-\267\273\026:\023\275\342\211\203=y\204\027<\367\337\327<\017\330c<)\226]\274\357\234\314\274\267\002\t\274\232*q\275_\266\014\275\034f-\275\375T\201;\306\002\214=|k\212\275\340u\016\274\372\226\244=\3167\337;\317[\303<\004\207\365\274\313\302T=\205e\020\275\035\341]\275\205\203m=)\000\016=\312\344\021<c\207\'\275a\007,\275G)\244<kf\201\274\0225\361:\302\256 =\263[\206\275\002\366H<\234W=\275\335T\204=\013\305T=J=6\273v\374\372:\276\2223<\372\230\257<\324f\337\2744u^\275R\233\217;\"\215E=\214$s\275\322\265;\275\217y\224\275)NS\274\027\217\327\2728#\027\275\024-\n;\245\031\032<zi\330\275\367~\241:\377\te=;\325\217=Ay\307=\r\376\007\275\333\316\004=\224)e\273\267\'\212\273\350M\256;L\033\366\273\216p\304\275?\231e\275\262\213h\274\237,\200=\t\223i=\376\247[=gT\037=\304\246\264\275\3525\326\274\322%[<\257\317\005;\321#\301\274\245\027\321\273\017\360\267\274\233a<=-\230\020\275i\265G\275\r\230\207\275\235\265\340;\351\323\324\274\3527\262\275wE\006=\337\221\002=\350*\224\275\333\005\265\274n\006\007\275+F\300;\\t\302\274\033\322Y\275%\357\223\275\016\004\272\274\207\020\354<\306eI\275\207\273\305;\240%\223=O\313*\2755$@\275\2535\271\274\353KD\275\030\221\010\275!u\365<\237+6=\201\211\345<\347\3503\275\237\350\242;q(\227=\354\354\306\272\373\220\025\275w\002\225=\245(\024=\306\204\014<\221\360-={)\016\275,\353\251\2750\200\377\274\204QK\275\370\355\261<\251\r\033=\265\3244=: \215\274\032%X<12L=\0052\021=S\246\271=*\233\314\275*\255+=\361\323\245;6\243*=\006\006\322\274\005*\274=\204\'q\274wC\250<\360\265\255<Br]\275V\220\227<\022\337\312\274\231\337\257=\377= \275\351\341\345\274\204\033\230=\250z\244=\275:k\275\255G\307\273\316\211 \275\300\361X;\003\331G\275&\026.\274\314eH<N\335\230\274\"-\276=\036\003h\275J\207L\275\332J\270;\215r\022\275\326\3433=E\\!\2759\342@\273\335\"#=\263\351\225<D\0375==T\210=k\376B:\272\034r\275\221\230{\275P\350\257\274\276Gz=\tB\231\274x!f\275AD\207;#r\037\274}\231\215<Pd*=\363\035\224\275s!\004=\246\347\232\274=\025\302=\214\256~=\215YJ\275\225\021W\275\254X,\274\336\263,\274\254\241\205\274\323\271\235\275\237\270\025=\2737\r\274\223\345\314<\256\0250=\210\317\037=\010\036-\275\257\271-\275\247d\362\274B=\344\275~07<v_\302\274-{V=z\264\037\275\322\034A\275VBe<\007\244\013\273.R\307\275\273\306\205\275y\256H\275\013&\030=\021\3726\275h[\255\274w\n\374<gB\231=1\367\010=\323Q\017\275\364=I\275\357\035a=,\262\222<\2002\201=`\300\034;\375_\201=\273\3716=u@r\275\257\320p\275/\304\274;#sA=\2272\300<\n\363\243=\'\376I;>_\327=\242\247\266<\017=\372:^\303\002\276\252\332z<\200\222\375\274\377\260A\275FF;\274\014{\353<\374\tN\273+y\267<\257S\242\274/\310I<rT!=\364&\020\275\275\'\027=\317\246\244<\236\370M=\256p\333<S|r\274\221\303\255=\312\247\2478\226\0101\275d.\224<^!^=2&h=q\201K=\323\021\275\274\034\201\254\274\372j;\2742\325\351\272\220R\031\275\017\021\335;Q\372{\274\216zY\275\300\232V<S\241\205\274@\237\203<\217\016\320<\317\020\302\274\232\306\207<D\202\241<\236lI\275E\261\224=NB\177<\266\202<=\357\2249<\177\212\243:\t\004\210=muY=<\263,\275\351\"o=\376\261)<\271B\244\27441\240\274\215p4=B\362\214<\306z\001\275\004\316\276;\024\366\n\275\024\216\352<W\363\232<\230j$\273\325\302\261<\214;X\274.\030\333<\000\036\203\274>\025\263<\276:\302;2\001\367=\035\n\004<\323h\020=\370u0\274;\003\336<\024=\201:J\031\013=\341\2564\275\017\036\307\274\351\326\231=\3129\237\275\337\227*=_(6\274nu\200\275!\r\323<\n\227(\274\312\007+\272\302\214\222=\2657g=\000\374\351\274\346\371\264\274\2104\t\274\310O(\274g\216U<^\374\223\2745\333\230\274#\347\216<\3001d<e\321\234=\333\246\001\271\375\277\232<\r\001\310\274\'\201\314\275\371\341\001=\376J\241\275\2135S<P\375\346\273FA\201\275\021\206\224=\215\023&=\237\246\242\275q\224\324=2T\027\274J\021\220\2748\324E\275\243\357\350;\\v\204\275\001\232\342\274R9\220\274EN\373:R\343\206<\353\247\032=\236\370\271\274\033\024V\274\235g*=\2237\375\274\230 \316=\202\215\314\274z\322\374<\\\236\275\273\272z_\274|\037\260<\332~\314\274\020T\262;\232\272\305<\020l7\275\274\231\224\275\027h\000\275L\342\253<\032\255(\2752\301\220\275\315\350G<!Q\256\2744U\016=SW\t\2752>\353\274\334\335,\274\226 \364:\310.\215\275\227\242\203\274\233<E<\320\356\364\275\336!`\275\344,[:\020V\221\274\t\246a=\357\014%\275\365\354p<\271P\027\275\276\232\237\275\363\247i=\321\367\374\275\222\224\215<(\036\027=\246\322\030\274\214\036\201\275R\334\237<X\350\215<\203p\r=\222\002\177=z5m=\346\254\234=\016\2538\274_\206\313\274ru\003\275E\243\340<\373\207\216;$\363R=\240\226}\273q\237\022\27540Z\275O-C\275_\232\222\275\343\014\374\273R\3309=?\200-<\371\346\224\2746\375\031\275,\204\324<M\315\361<\nC8=\023\t\312\274\303\321\t<3\355\027=j\352X<\232\336\n=\277\312\r\274\013\204\354=\036Y<=P\027i\273\270k\n;\272\355N\275\207\260\224\274\343\342\206\275#\2101\274a\021\256\273\r\323X\275\236)x\275y\246\035\275\024;\331\272NX\353<\306\n\322;t\231\233=\222\340f=\344P\030=\331%\'\275\007\316G\275\347\362\022<\200\007\017\275\3638\005<\256zE=E\243c\275Vy\032=\353\321\213<\367\'*\273\375$\036=\255\241 \275\007D\377\274<\325\354;X\357\031\275\206\271\326<\305\326\243<x\275\250\274\270>\247=\315\201\005\275A\231T<P\360o\275\302\212a<\332(2\275\310&\021\274\026i\226\275\266\000,\275w\321s\275a\300\264<\016\302\307=\204\252\333<w0\n\275\216\316F\275\340\236\307=\306#\243<\256\377S\275\343V\216=?\032\026<I\324\007=\227\315\320<\2215$=\002\257\002=\341\360\310\274W\336\304\274\320\373\342\274tN\203=]\337{\274\355\360`<4V\270\274!\221\233=\357\030\252\273\207;\207\273\300\3425\274\351\202\350<\233\355q=\202\2567\275Q\211\264=\226]f=\310\346\010<=I\243=\033l\346\273\265]h\274\2700><,9\030\275\300-\265\273\302\310\204\275\232=P=\202?\225\275\013\027\206<\305o\242\275\373\300\347\274\260\377N\275UV\202=\307\273\201\274W\223\177\275\375)&<e[\177\274\357x\245<\331\233\014\273\006\301\306<\035\321\001\275\373\354N\274*\001_=\253\220j;\005\353\246\2754\336\207<\342\3637=8\355\271<\037W\360\274\314x\373\274i#\362<\344q\036=\026\321\346=\336\017\227<V\253\233<b6\300\275:\'\216\275^\300\206=CG\002\275\314\326\035\273\372fe\275\246L\n\274\203\371O<\263\337\252<\3762`=\223\254U;\214\272\354<\215\262.;a\331\235\275\314nX=\216\315B=\003w\002\275\302\2276\275ia\223<!\243\321\274\026\306\362=\026\203\261\273s\237\007=\214\306\366<\177\330\217\275Ob\365\274\245x\005\275r\365\022=I\213`<\255\007<=iV\361;\377z\215==\205b<\274D\203<\266l\035=Kl\216:\177I\224\275\213m\023=fT5:q\016\374<\257\327\026=\003\221%\275p\353\014=x!\325\275p\211\\\272\220/u\274\031Sr=\022=M=\264\300L\275\207\276x\275\357\300(=\026}\010<y\242t=\260\304\365\273F\257M=\322\002\253\274b\217\211<\006\343B<\243\002E\274\211x\034\275N\334\256=\256\315\226<\251>\013<\330Q\252\275\325\036\206=6\265\321=4E\026\274\375\360\006<x\023\244<K\021\026<91\215\274\340\366j\273!/\236<\312Y\227\274(\203}:\335Be\275\244o\314\273\237\213a<:\003\236\274\234\372\n=&\257\002=S\333\353\274\343N\336\274\254g\375\272pau=\265uL<\352n\250=*\002\223<K$3\275S\212{\273\265FY\274\234\"C=]\370m\274(\270&\275D\314\001=@mt<\016\304\201=\356\276\004=e\322`\275%\270\221<\205\354\034\275\023k7\275\255\357\301<>\330\274<\232|]\275\261\316\376\273\343e\250\275\252\341\246<C\310|\275\362\200\224\275\355\220\006=.\266`=<\004[\275\3038\217=\210\336[=n\t-<\tm\026\275K\370\021<\305\272`\275\246iZ=\235\245\237=\353\265\010=\350\035>\275-\227\206\275\224\331y\274v\026\230\272L\341\230\274\221\331\234=\304<\013=\243\202\016=\007\270p<y\332=\274\223\021\350\274\nz\234\275\231\346\311;\220\013m\275$\310N\2756;<=;IT\275I\206[=\277\321\232\275V\035\220=\366\035\005\275O\311\242=\357B\272\275v\331\340\273\256M\260<\270\\B\275\262\357\033<\301\226\016<\000\342\305<\210&\304\274\3350\003<\311\326\201\274\235\237\034\275\340\273\030=1\277\305\274\354x\353\273\343\020h<\326\332\177;\3151\257=\252\327\037\274/\"\267\274\2244\222\275\307B\"\275\324\331m\274I\226\320<\207\234d\275\\\352A<7\344\356\273s\272\273\275\330\346\0108\311L<\273\222\263\227;\352\\S=<\2426<[\204S\275*\257\002\275\010\3775<\271\202\212\274\223\345`=dw\r=\177\346\200<\373{\021\274\274\306*=\267\352_\275JEo=w\006\006\275\2757\274<\030\235M=\304\353\273;\314\367T<\300\262C\275\235)\222<\277\3571:\007\032\205=\234)D\2759\242t=\021\311A=\201*\021;\304\311b<\371\203t\275\3666\267\274\227\246,\274\023\371\025\273\334\277`<\311\t\210;\234l\020\273\340\217\031\275:\224\'\273\001\271\227<h58<\2464\231\274\327\022\227\275\371\207\275<\'\376\250\275\364\300$\275\316F\262<\244gb<\323\204\310<\210\352\005=\003\010\256\2754iD=N\332\233=C\315\307\271\214\313\365\274\377l\032\276\260\352^\274r\023\277=\301\020\201\274\343\314)\275+\237\252\274\277wC=1\260G\275\242\030S<<\005%\275D\276\377\2746\206\234<n2\243\275#\347\334\275g\025\305:u\356\373\273\014\222?=3\337>\275\250+\306<K\rR\275\353\003\320\273B=\316\274\246\".\273v\006;<\213\207\306\274\020\r\226\275\225\220\022\275\216Y\326<\036v\352=\203\265\317<\243\304\244<\356\314\211;8\242\037\275\343O\220<\317\233\337<\233K\252\273\200-\262=J\365\361\273\340\255\266\275\275\3155=\212\316\004;\363X\216=\210\311\230<\235\313\355\274\346:\250<\222U\014\275|b\006=\362\331@<\253\314\317<u\235\026=\243\246V=\037<\017\275\344\235\201=\340nK\274N\334;=\264`4\275\313\315O\275\313\334\206\273\236\2114=g6\322\272Mg?\275\271\235o=\226V\266\274\372\207\217\275\261\n\214\275P\327\202<Xah\274\203\257\276<\265=\300=\037O\261<hv\014\275\357\256\203\274\244\204 \275\177P\323\274\241r\201\273gL\320<v\350\303=P\003)\275{\303B\274\264\211\025>\230\275\331;U\367$\275.\362\331\274Ef\000\275\331=H;m\230\347<\205\356\267\274\rV\005=-\342\313\275\013~E\275\313\224?\272\314\223d\275\272z\006\275\365\311J<@x\033=VEp=kN\323\274\332vG\275P\013z<\026\235\232=\32556=\316\020\200;\302N\346<\201\332\337:\377\3138\275\336v]\274O\222y\275\033\341\t\273\315g\267<\024M\'=\252u\274<;K\212\275.n\215<\302L\340<\356\225{\274\002(s\275\267\362\274<_\200\206\274\252\231\257\274\250`/\275\235\357\005\275Y1+\275\231$\013;\260\204Z\274/\214\021\273\262\303\210<9\003\202\275\"\t$\273\376\331\302\272\t\313{\274#H\265<\254\234\344\274X\356\345\271\002\250A\275=\330\377=\n\332\314;\206\207\242\275\371\315\303<\302\030\240\275\222Y\215=\262\351\010<\032\2527<\005|\220\275\250,\024=Z\356\262=\026-\027=\377\r\006\275G\326\220=\224am\274\312\274\321<\302\202\265\275\305\223\227;e\016\346\274|kg<\022:\327<,T\352\2742\307\327\274\242\345\247=\023z\026\275\352*\267\274e\3160\274\005\330\217\275\370\343\222\274\017\n\216<\227\322\233\272\n\262\330\274X`A\274Z\260N=\035L==\202Wi\275x\332\024\274\366\244\031\275{\206\212=~\022\252;\325\331\320<\254\220\227=bp%=/\3224\275\264\307\202=\344\035;:\251\311\001\275\323\272\350<\270I\343<\354\362\214\273l\177\227\275\010z\020=8\006.=\204\345\227=\250((\275$y]\275\257$\263=63\376\274\321\027\276=\272f\272\273\300\360<\275\001\315\364\273\021\340*;\344\224\262<x@\314<\3246\373\274\306\216\312=\201e\325\274\225\240\005=al\030\274\r\373r\275\217\211\206\275\3549\307\273\3426N=\350]\006=\000\213\304=$\003\272=2>\345<\341+d=~\307\214= \206\361;\371\016\302=\212\232\223\274\306\200\035=\252\307\316\274\304t\026=\037\352\361\274-\361w=t\212\305\273\307\337\345<\333\312R\274\177\310!\275\0134{<\212K%\274:\210\301\274\203\340\370\272\351\247\335\273[\302W\275\014\007\000=\320\353\226\275\231\002u\273\242\317=\275\267\354\206=\234\211$=,y\364\273QM\344\274\"\231t=\230D\202\273\366#q\275\\&\202=\331_\217\275\343\177\250\2741J\325\275\222\261\206\275\336\235\010=\024\244\332<\033\253\207\275\272\307,;\376|`;%\274\221=\363H\254\274\213Z\215<C\2611\275\232\000\005\275\371\353k\274\322\324\372\274\254\215\234<\317T\202\274\004PV\274\306\026\236=m\232y<.\245!\275X\224P=\361;\272;\004f`\274\271x:\275d\000\254\274I<\214\275\001\332D\274\004t&\275n\364w\274\253\303h<\242\021\243\274\374m\270\274u\255\241\2752d\213<\363\304\261<\206\273\212\275\264\257\240\275R\364\255<\3110+\274\210\266\315\273\312\234!\274\r\020\002\275\022ai\275\213\037\342\274\230\242N=\346M\342=\355PE=3#\255<\373\345\327:\207\0250=\366\224?=\007\237+=\362h]=u\311\205=\210\372G\2741P]=\002\221\254<\010\354%\275\322\261\026\274\177\225\003=e\254\344\274\354\007n\275\302E\366<\\\000~=\331Y\217\274\240\320\320=*\370\250=Y\265R\275\030c\007\2759\212\274<\272\341\276<)gu=\310?(=\260v\034\275\302\030\026=\2179m\274\035\245n=\2505\336\274\005\200\216=\222\254*\275!\371w<\013S\306\275`DZ=\345M]=\271\'\220\274i\212&=.\261\"=\201\376D\274o\327Y\274\260zC\275\215\212)\274\331d\315<\311\0272\275YJ\255<\253Qd=@\230\256\273\247\370\315\272\006\276\n\275\364\3343\275w\301\361;X\037\035=U\351;\275U\003\361\274<G\334;%\271\212=\333e\356\274?C\353\274,\323\317=\276\322\300\274%\251|=\266\307\332\274\363\373\204\2750\351@=y\330\263\274\r\361\213\274\226\023\315\274\n\2135=\002\235\316\274dh\245=\2037\263<\345e\211<,\322\024=\321?\302;\313.-\275\246m\263=\251\3042=6\345q:\010\207v\27594\366<}\304T\275\010\r8\274\033\001\274<Jg\201\274\032@\205\275\223`\004=x\004\311<\313W\207<\030\350\254<\240\240\360<\255\234\033=t\261\000\275\025\217@\275\356kz=\252\270\365;5\361\002=\'\234\177=\363\243Z<O\003\362\274\2321\003=QL&=\357\315\361<z0\304<\235\267/\275j\223\003\275\365\247?=Vd\023=i\026C=^\204\216\274\026\250\212\274\017\222\036\275M\036\220\274HE\365<\377T7\275\026\246m\274\253\014\257\274\232\236 =\'\023\026=N\316\220\274\322\210};\024\224\t\274t\370V={(\313<`\221\267=\322\363\276\275H\205\323<\363\024\265<%\360\232=8\356\016\274\255\0058\275\223(\220\272M\341K=\310A\037=1)\247\275\266\277\243\274\216\313\371;%\r\356\2724\253\n\275n\304\t=\351\262\323\274\312\260\313<\317w\212\275\000\356*\275:\365V<\022\205\344\272\340\337\236\275g@\366:\004\241T=xp\203;Ft\357=}\017\221=\264\360@\273\002\305\307<Y\005\224\275\017\226i<\007\ri\274wb\345<\276\310t=q\361{=\005,\356=\035\376\026\274\004Y\026=m{T<\364\005f\275Uxf;\0255\350\275Y\214\207\275\376LQ=S\264k\275b\357\257<\232\021.<\212\365\032\275\273\207B\274\025\275\324;\251\225\345\273\266V\231\274\227\247\266\274\223_\302<\236-\235=m\232\322\274*s\271\275\211k\206<\214\373l=\276[\337\273\242^+\275Vr8\275j,\360\2729\024\353<<\240\243;}e\241=\200\2663\275\035\317\000=\251\303\265\274\341 \314;\225\2208=\361\243I=o\266\030\274\321\3065=\211\227w=ga\204\2758\030\201\275\343\265?=\264+\006\275gI\t<8\315\261\274\234-k\275qd\022=\324\305\005\274\367\343\033=\303\266K\275T\332\017\275\203\240\t\274\332\376\365<\234c\217<\333\363\335\274\323\257\274\274\364\367\223=\260\337\031\2751\014\n<\214X7\275\262<\006\275\177\212}\274t\252\000=\226d\305\274\340\365\377\274\220Q\360\274\321+\370<\275o&<\007\366\n<\246f9\2737v^\275\230\343\253<\260\320y\275\272\340k\275Z\254\235=\335[9\275@H\007\274|\240\001\276+\030\020=\307\305\014=\020\324\201\275\032\222\250=Q-d\275\177\376\273<\020\023Y\275\304\341\220<>\277G\273/G$=70\"\275\231E\204\273L\360%<\356\006}\273I~\240\274\345t$;\241\367-=\344\234\000\274@i\034\274\306\020\343<\014b\235=\363\305\252<\352\266\025\275\311\370\227\275\"h\341<u4\010=\257\352\006\275\232\261L\275(B_\275\250\343\253=\346<\027;\004\260$\275\r\214\250=&\336{\2759\274\306\274\353\325O\275\311\261\233<\032\300Z<\357\312\335\274\301\301\021=I&\205\274cz}=\227\357\212\275\204\303\210\274\214u/=[\326M\273\327\002\272\272-o\307\274f\267\344:\213S:\275\262\235\004\275;(x<p\215.;\246\327\341;f>L=\204{;\275ya\304\273m;\006\274\013\356\215<\004\274\032\275\231Y\370=\006T\222=L\345:\275\307\265\265<\221J\341<\361RE<T\214\375;\266\317\t<\373V\205;\235\247\350\272u\377\303=\200\264\342\273G\220)\274|\236\207\274c\302O=\33720<?\276\024=N\336\362\274^-\204;#\310\374<\362\272\240=\004\237L\275\274\254@<T\235i=\244\372\364\274\3050\216\274\306[v\275\003\373\245\273=7 \274c\032\3348\304\247\353<\231_\375;\022W\302\273\352\364l;!X\215<\323\0107\274\221\036\214=\356?@=\371\334\276;kC\311\274\212\014\035<\3233\247<\365\236\215\275u4\276=W\212\"=G\005\005\275\3704\020=`\213\332\275\354\023:\273\037\257\242=\3244o\274\304\242\003\275\362\r\304=\300\361A=\206DI;\201\321>=\371\3229\275gm\017=\212\021\002;\035\005\345\274\370\324\261;\351\264\"\275h\344S=\220\n\325=g\267v\274#\224\312<=\356\353<)\325\016\275\256\251~=\311\374)=k\257*\275\265Kt\274)|\266=\205\237\210<Jf\374<\253^#\275\312\343-=\350E\006<\351\305\214<\321\201\336=P\037L=\'e\215\274\216\025[=dQ\001=If\032\275\331\237\234=\031\221\355<>E\200<\276\256\245\273\010j}\275q\334\257\274\330x<<\363\n|<|\240\021\274\026n{=\016\026\027<0}9;g\322\342<\360,\016\274\003\247\233\274\317\324d\274L\026\026\274H\260\315<9!3=\215\253\010\274\250m\371<\257\315\265=2c\276\273\321\250\255\275\210\270%\275u\242q\275F\311\023\274\332\260\021=m\355\370\274t9\227\274\213\321L\275#\375\245\275\232V\202=,ql=f<J=\201SY\275\000\252\034=(l\337\272\331\r\243<\221\274\231=\375\r<\275\301\331l\275\241Zw=n\\\231<\253.\204<M\311\355\2754-C=>\362$\275(\r <xv\022\273\376\262\"\275\277J\274\2723n\376\272&\355A<\303#\244\275B$t\275\347\336\005\275\307\020Z\275g\312\264<@\300q\274\252\376\037\275YU<=\304\006\202=\3634\002\275K\203!<Dj\321\274\254\000h\275K\261\271<F\372\214<;L\373<D\204,\275\n\n}\275BX\360\274l\010\2009\366\276\225<\007\212\266\273o\033\332\274\314\025\034\275\r<\222\272\027!\357;!\0104;\314\252\351<\373\260\205=\354]+\275\363\215\213\275IR\206=\347\263\210\275\372\223\027;C\013/\274!\206m=\272\207[\275\177t\363<\006\304\371:\215\351\232=\306w\250=\342\334\351<\315\364\232\274/p\r<\"j\004<!\355\003\273\n\340!\275\336\311P<]!\"\2757v\200\275\343K\205\274\007R\223<c+\335\275\244*<<^\336h=t\344\315\274\260\034\336<\267\200A\274\353{m<S\356\356<\365\330G\275\275\0257=+\270\253=\201O[\274\027\304\231;\353\006A\275\367\220\207<\332ff\273\346\237\206=\224\242\353<\351 \203=\265,\335<\217:e\275\247$\333=\377\357\205=\261\340\276=\001\214.\275a\033\013\274;j\375\275\267\0003\275\274<*=\210\375\205=\251\364\273\273\233\274\271\274\313W\364<\325\020~=\014\002\243\275.\027\023\275%0\021:m\322i<\177)\216<VT\215\275wb\341\274\037a\226\273\276\371!\2750\223\321\273<\245U<\021\206\250=\247y*\275}\247\235\274\241\320\026\275\007\314\262\275\307\\\005\275\001\n\302<\360$\271;\032&S;\266H,;i\352T<\206(\010\275\341\241\350=4\0247\275\275Yv<?@\324<\221\376\272;\307m\331<7\264\003<\253\367\227\273\306\342\035=\022c\324<\3409\225=<\246\242<\010\013X\275\021b\247\275\001\267\376\274A\344\235=\320x\227=\014]Z=\233B2\274\010$\274;U5\327;\373\333\026\275\033\341T\275\317s\004=5\370\354<\034m\225\275,\241\206=\354tn=\226\000\016=\032n\321\274\367\270\217\275\255{b\274\324\221?\275\366p\335\274\305\206\240\275\270\3076=\000\346Q=\006\234 \275\225\\c=\rJ|<\261\370,=w\207\351\274\307i\236\274\232\365\270;C\370\033=\363\037U\275T\r3\275t\301&\273R\246\002\275\031.\277\273\022>\253=\247\353\304=e(\031=b\205u\274\343\'\001=\330\274\262\272m:Y=\004l\304\274\014(\026\274\323=\032\275\212\316\016;\332\237\273\2757J\303<\212\244g=\356\0238<\217q\276\274\314\3508\275\264\211\261<i\205\022\275v\353\361\274\277\227M\275\035\260\334<[\350\014\273\224\302\242<\224\217\370<\005z\341<\323\001\032<\306\030\273:\255\216\007<|\034@\274\'\002I<\206%\370\275\026CB\275\037d&\275\30200\275\0252\320\275\335\0179\2757\021T<\034\336\236<\251-\252\274l\303)\274\343\320u\274u\266\334\275p\350}\275\001\250\252\274\360\256=\275l\007P;Iy*\274\340\253\363\274\017 \206\274\271I0\275\035\200z\274-+S\275\230\370^\2757\036\256\274\001w@\274\032\317\255\275\350\332E\275\353\036\262=u\300s\274Y\201\210<CX\201\275pV\314<\007\231\035\274\366\302\034\275\347\310==\214\357\203\275\232\254@\275S\310[=n\363\003\275\177<]=\ts\030=\214\357\377<\000VP=\365\027\310\275g\262\004:\350\020y=\317v\344;Lp\004\274m\034\344;s\231#<\331&\371\273\251,9=\222\375\261\274\007\276\224=q\244o<e\232E\274\355s\034\275\370\201\224<\355a\355<\306~7=Gt&<3\267o\274\322\211\010\275\320\260\252\274p$8\275\177\223\366\274%`\276\274\340\251d=j\347\006=F\260\002=\231N\300<^\300}\274u\300~=R9\232:r\267\325\274\007oy\274l#\323\274\"\303\225\275z\022\254\274D*\003=\3458O\274\222\000\206=\r?\253\271\324\345\251\274G\3747<\307)%<\275\211\016=\004\347\203\272%F\215<];\213=<\337\264=\300o\025=\005T\371;US\235\274\350\225\252<4\214\213\275\017\223\337<\231\253\207\275\367\202X<7\007T\275H\221O\275\t\264C\275\232\244\222;>\330j=\351d;\274/M\244;~\246f\274ix\022\275\r\363\256\273\020\333W\274@\305\217<aM\254=k\271\320:\343\021\307\274\252\370\245\275\364\316\272\273\217\360\336<\237/>=\022\177[;RE\014\275\036K\204=\022\265\000=\315\270\025\275\03416=MT\027<\356\271\236\275\337F\013\275^\205\030\275u\247.\275\227\361\035=e\253$<Z\215\236\274\027r+\274\244g>=\325\377\300\275\032B2=\313\213\212\275\216D$\274\301\311>\275{\246\204\275\271L\351=\201\217G\275\243i\324\274:%r\275C\n\237=\013m\233;0\367\247\273T87\275\375dt\275\205\247$=l\351\240=\241L\243\274\275]T9\267PN\2758\036\034={\3302\274\2434\201\275gq\272\275\235\251\266<\225\224W\275\374W\250=\303\005V\275\221\350\362\273\246\021(\274-\205\256=\t=*=\302\301\254\275Y\277\216=\351\031{\275ue(<5d#=\271c\303=\253\313\245\274F\215!<\023n\001<\034J\240<\313\325}\274\270\302\031\270O\031\304<}\207\247\275u\032\360<\241\340?\274\307\210\375\274\005\244\214\275\217h\212\275\211\251\214<p\2446\273L\304T\275\361\317\337<\205\003\260<(\035J=\362\3329=+\003j\275\340\351\006\275L3#\275\375E`\275g\306\253\275\177~8\2751Z\222\275_\013\001=e\354b\275\357\212R=M\255m=\215C-;,S\250;\323\303 =g\350\337\274,H\'=\204Z\310=_\204\233=9\347<\275\370\316\240=\312\203\212=1\222\225\274\237\3539=\315\030~\274@\271\034=\347R7=%\307|\275\\\366G<\321\363U<\272\3101\274\n/W;l\2551\275\007\276\026=\301Y\362\273\252\301&\275\262\017K=\301\246\227\274\366\354\177=\016\220\206\272|Z\210\274L\021-\272\267.\010;$\024\372;\341\365\241;\305\202!\274-\217\266\273\005Z\254\274\016\217\334\274p\230\235=\306it\274Z\r\223\274U\214\265<\364\367\253\274P;\037=b\245\010=Tg\031=\021\215\323\274\337\272\000\275w\tL\274\221a_\275\024x\376<\372\032\226\2743\265\246\274\016\2241\274\320\014\210=_\013\336\274\201\323\234\274\354\036\303\275\227\256\017=FC\251\275\314\340h\274wc;\275\203\026\231\273\201M\276;\265s{<\272[\235\2741\263\300\273\000\313\242<\325\033?<6\265\006\275\003#\247=\343G;\275@\346}=\301u\022<\343\204\034\274;\245\235<\247M\345<F\347\006<\347t6;\344\310\340<\366\202\363<\002\014|<\232\301\314<\237\264\224<Z\327L\275C\267\336:;\243C<\'nF=l\016b\274?\204\300<|l\310\275\205wM\275)\275\r\273\225\316\242\274bZ\223\2731\311\r=I\327\373<\037\000\240<X\250f\275\226\271\004=\'\331\306< \216\216\274\243\275#=\224Q\230=\020\311=\275Q\177\260<\2708\364<\034\336?\274\004)2=\352\220\220\275\352Q\225<\367\221\210<\320\361\027\275y\345\327;3\330\222\274\247?\252<a\346)\275d\367w\275\242\365\377\275\207\341\355;\245G\303;i\301\310=\022\314\232<\326C?\275*\261/\275z\346D<\275\236/<\027\301~;\327\254\344;0\243\221\275\006\212\220\275\247\242\n\274\'\002q\273\"\004J\2756\020\304;\r\3764\275\372\215\277<m\2208\275\222\256\266\273\323Od=\021\0224;\261\377\305\275\213\266w\275\213\227\006\274>\n\341<\351p$\275\230\226g=\026\354\330<\005\205\307\274\215\330d=`H\216=\326t=\275\264\376\034=\0258\240;9\341\375\274\200p\326=\211\261\335<\320R\025;\3523\212\274\037\341F\274\237\214 <D\274b<\275\256\237<\3661\024<\026\002\317;6\313\262<\253\323U<-\024\037\274tv\001=9a\002=\261\351\240\2748\275\215\275\317\260 \274\317?$=7\266\216=\245\300\236\2737\031\217=\024\000(\2753o\367\274\372\254\210\275\250\374V\275r\253A=\305U\321\274\3643e\274Ak\035\274\031/\014=\365z<<cqA\272\"V\231\274uzi\274PV\202\275[\257\037\275\301\365_\275\201\202I\275)*\224<\252\300\305\274\334\231\245<o)\335;\366\215\215\275\014WZ<:\366\022\276u\355=\273\241G\377\274\204#\307\274h6\266=\266\200\201\274s4\035=\226\356!\275\2701\317<(\370\330\274\251\331{=:4\355\274\001\220\262=\232\024\351\274:F\201<\315\227\210\273\304,\226\270W\037\374<\367@\275\274\307}~\273\024\367A=-\202y=\244\356\013=\2678\002=\023\t\312=\0142n=\026\220\267<\351&\202\273,\261G=\345\226\001\275\376\273\341\274\225\322!\274u\240\032=\n&\270=\377d\242<\356\341\327<?\264\343\274\332!R\275\037\343\274;\261MX=\267\222\240<\361\203C\274D\"\313<K^\232\275\210\244J=6\342r\275\2451\301\274\272\302\"\275\256\250\242;\326\0102\275\310\251\t\275:\315+\275D\246\204=\243\251\n\275\253\341m<\'a\302\275\025\031:=\026\037\313\274\337\212\222;j\233Z=\277\320\252=p\215(=pv\233\274\305\244j\275\307\261\204<M\365g\274\026\211\315<[7\226<\336\304{<E\217\272<8W[=\004W\343\274\321\233|=\271\312f;\2603\355\273\354P\226\274:\277\225=5/\034\275\234\377\357;q/\001=\000\336\036=\004\216\030=\252*\t=\234\345\327<b\264t\275\267\200;<HDG\275!\\?=\207\356\240;\307f+<\242\367K\274\217L\364;\343\232\223=.z{=\300\215$=\315!\311=\027\375\260\271`p\032\275\303\322\223\275\342:\276\274\327\000\352\272\211\212\206\272\261&\025=\226\367Q\274\\\327S\274Hu\206\275\024\212\264=\275\'\331\275\352u\335\274\376i\014<\212M\005\2757\301\310\274n\017\036<\255\203?<\217a\t= \311\324<\332&\211\273\030\035\212\273\253@\007\274\307\226a\275A\317Z\275e\251\211\275Yk\'=\350B\017=Sf#=#\021\023<\243\3549\275\202\036\352\274\220\257\r=\2770-\275\214\037\351\274H<\314\275\205;}\275pk\250;\301\004i\275\227%l<O~3\275\203\321\212\275C0|\274\251\3664\274eC\237\275u\020g\275\363\\6\275\334\266\007=v\211Y\275\246{\327<\"\226A=\te\003=V\006\324\272\254\212\000\274\275\266\261\275r\005\026\274)M\264<zka;\303U\374\274i\206\335\274\032\237\024=\333|\346\273[\032\254<\211\2157=w\245\247=\022\331X<\326\357\022\274\2640\273\274\225\024=;\236\177\036\273j\314\250\275\315\206\177\274(\375=\275\310c\351<\024\246)\275( \275\274M*\261\274\335R\204\275\206`\323\2759\300\335<X\203\231<\217\305y=\367}\332=uja\275*\254.=\321\r8\275)#2=4w\017\275I\027:<c\372|\273\365\242\362\274\200\270-=DX\254<\367\006\240<L\024\'\275\206\344\216\275\0229t<\376\214=\275IYB=\300\270\214=Q\211\302<\370R\270\275|j\274\273@\253\211;IQ\262<\366\366\212;\266oY\274\372\235\366<^gt\275\240\361i\273\325`\221\274\361L\210=\nY\230\275`!\232\274S \342<utk\275\343\220\037\274!\035U\275\311J\246=_\330k\274\0036\205\275\035\311P\275\0235\206\275?i\213\273\225\020\320=\250\207E\275^\254j\275\243e\357<\365\032\222\273\211\223A<\376\323\222\273 -[\272+\277\351\275\276\346\\\275oQ(=\312^\251<D\204\257\274\271\260\025=T\270Q\275\315\324m<\004\272F:\270\367P=\375\220\330\275\211\267\325<\027,-\274\342\377r\275d\260\265\275\350\002s<\'\030r\275\326\304\254\275\276GD\275\364D\272\275/`T=\013Y \274\326~-\275\352\341\212;jS\030\275h\026\'\274d\177\027=\020\273\341:\310\321\303=\255\026\000<j\203W=\375\260\201\275N9\255=\022\246x=\267\201\256:>\0271=\226CA\275Bc\217<qU\376\274kW\224= \233\204\275\327{\347<g\033\372\274.\022;\275c\321\036=k\264\346\273X\345\246\274\177\357\016<_\240\265\275\270@\364\275\220M\005=\341\240\233<\255\264\002=\301\227\213<\304\201\315<{\227\325<\213>\202\274\2174[=.\270~=\177eS<\035\263U<k\010\310:D}\235\274&p\306<N\374\372\274\276Q\023\275>!1<\246~\251\275\035\211\260\274F\375\326\273\271\310\233=\250\003\217=H\203\223\274\316Q\363<\224S\230<\274;\207\275\220\244\277=o\364\200=\r\273\306=M5\261\274|\263\277<L#\\<\235C\021\275<#s\275\201W\253<\222(m\273\221\013_=\004\202\025\275\177D\026;\304=9<\26429;1[@\274CM\317<\367\227\233<\223\363{<(0\376\274R\223\213\275\324\352\323<\367\010\036\2750+\205\275$3\014\276\373\201\254\274\251t\001=Abn=I\213\237=\344\206\264:\237\274\337<\037\267\243=\'\320\t>E\242\366<\277\006R<h\212*<\010\251\'\273j\223:\2759\017\005<f!\003=&\265S\2752}\256\274\322v.=\313b\340\274\210\237\177\273\246\313\023:\023\220\177=$%\204=\301\335\036=\334\333c<\033_\335\274\"\0233=\354)\214\274C\361\333=\365\351#<}G\200\274e\210\231<52o<T\321e\274\223\013E<j9\035=h\265v\274_\023(\275\265\274e\274\217\001c=\371;\035\273\004h^<Se\224\274\370\367\207\273w\335T\274.\037\225\274\032Q\353\274Jr\007=\326@\341<b\247\221=\352\215\'=\337\307[\275\312+\203\275=\016\024\274\345\034\220<E\302\326=i\034\232=\216\261\003\274\377\221\242\273|\"\212\273\332w\202\274\221\302r<\221*K=\355\301\362\272y\316\027=X\331^\273\303\352t\275.\272\013<\t^2=Q\364\000\275\016Y\315\275\244\024S\275\374\275K=\273\255==\351\016\254\274\327-\r\273\035\244\254<v|\313<a~\215;v\373\027\275\231\246\321\274\226F\005\273\253c\002\275\026\333\306\273\365;\355<V\315\307\272\330S\016=\002\014\\=\351\347\017\274\367\201\316<\271NB=G@\352<\272\206V\275r6\217\275k\352`\275!\231w\275E\013@\273tI\243\272\'\260\250=\333&B\274iQ\344\273\352l\t=.<\372<O\234Y=h\330\307\275QK\200;\310-\311\274\025\375\022\275\257\346\017=\262g\205\275\261\200s=\005z\270=\303\364\264<\212JM\275\003P\235\275\341\025-<F\274\301\273~$\022\275<\201\207=\034\304\177=Y\251F\274_\010r\274\270\314\207=\363\324\352;\372\326\312<oqI\274\331=X\275\01031=o\312\000\275WZ\251\275E\317_\275\33045=\243\252\221\275\027\031\027=\254%\305\275\255Y\035\275\263\177\222;\333`\225<\332a\034\275\360\345\201=\360\\C\275\331\250*\273\237\257\315;\210\330\024<\251\000 =d}\022=^\322[\274\306\031\224<\262\007\252=\224\210\000=\323\362u<\324\316\013\275\315\234\030\275\337\251\354\274\316\265L<I!\006=|\267k\274\244\313==\260\372\034=G\306\024\275\310\013 \275g\262\'=\220v[=\341#\r\275\237\376\306<x>\312\274UT\n\275\021\031$\271VDn<\274\226\205=\313\302f\275Y{\002;\345\327=\273\005r\236\274X:\241<\332\213\214\274\234b=<\021\334\273<f\177\207\274xh\177\274\303\371C<\325K\351<\026\305]\275+\217@<\03478\275-\367\263=\254\322\260=\255<\230\274}z\027=\177O\317\272\033D\313\274w~Z\274\241\rJ\274` \370<\322\271`\275\342I\306=\200\234\037=\273\235\316\271\0140\221=\332\251\210<\272/(=\366\337\317\275^\365G=O\341\251\275\021\307\'\275\265\312\014=\017\307\275\273\275e\005\275\233>\004\275O\230+\275\271\3057\272\024\362i\275F\342O\274\355\351\016\2755[<\272\333\336M\275\251z\'=%\241\032<B\2342=\316c\242\275\323\020,\275\376\314\203=\2147W={\244\244<&\"\265\275Dz\t=\241\364\002<\241\207\377\274\377\372\374<0iG\275\261^>\274\037\007[<\0136\336;\300\023`<\025\\;\275x~\026\275\370\351I\2747\203\335\275y\251\240\274\233\022\205\274y^\335<\006\205)=g:\035\274\t\346\005=\254K\271=J>q=B\357\235\274\304I\336\274\336gD\275\213\271\025\275=\334\332<F\340\336\274W\346\202=Z\214\r\276?\016i\275\030}\000<Pi/<\267\336\207=\251}C\274\216\246\002=v\275\231=\257w\364<A\207\216<a\2672<\253?\037\275Dd\217<U+\003\275\251\323\021=\333\323\247\273\351)\212<\250s\216<\266\024\210=\256s\026\274\253\024\277=\214\000\003\273\260\363\216=\254aW\275<\365k\273\275\004\316\273\231\300n\275\024uT=y&\010=\247V\201=9\023\230\275j\253\237<^\261\352\274\342G\233\274\221\266n<\324\007\307\275\002\001\211=\273\352\224=\232\'\347\274\024\177\'\275\252\272\006\2753{8\275 \303\376<P\351\240=*Ng\274sH\245\274v\270i\275\253`\204\274\030\256\214\273\370F\214\275\226\233\022\275vO\r=#LD\275\302\251O=\350\267\263\275\315O\211\274\307\215\235=\236r\267\274\252~^=\316T\360<\177?:\275\331\034\033=\267<\207\272\301p\226\274\023\341\024\275\207\005\354\273\337n\365\274\330\260\026\275\236\214\261<1\335,=\010?\277<\202\234x\274\367\000Y\272\017-e\275m\340\260\273\027\220\235\275#\023=;\361\030\017\275\277zF=f\320\254\273r\253\033\274\210\244G\275\233\214\010=\333\243W\2743$\213=\016\'\247;\347Bl\275\220\035\271=v\2572<\317\370\013=\226\375\304=\276eF\275v\243G\274\324\374\233=\007!@\274DV><\245m2\274Z@\215;\247E\237\275\336=\"<[W\263\274\367%\360\274\321i\230\274\363\"\272:2\234#=\237;\255\275\007@\035\275!\341\214<\211\376y=\354*\251\272\207\031\270\274^\361!=@\320\216=\016\304\232\274\252\036\323\274(\350\237=\200L\325\2742b\347<\357R\031=\302\335Z=\277xw;\234T:\275M_\211\274\275>\256\273\222\200\301;\226ie=b,\274=\030\302\217\274$\231\341\274\222\343\260<\256}\213=\005\224\021\274k\n5\275$\254#;Q=g\274\212\216\213=HI\340\274\265\303u<Nc\357<Z\327R<}\345\370\274\320R\210=l\267J\275\352u\370=B>\353\274\177\211j;\247e\255\274I\030\031\274\346\362\016\275\226\2012=H\256\377\274\010\370\377\274\025-\206\274\001b\006\275*\274L\274\020\203Q<aI3=\300.:\275\025o\302\275\320L\247=\363\254\301;\333>^;\323\266\363\274L\217\016\275\014\202|\274s\234`\275\004\312G=\026C\260<\335Q\234<_\221/<\251\346\350<\211,\206\274j\177\257=\034\367\325\274{\301\n9\212?U\275\242%\363\273\3452\330\274v2\200<M\343J\2758.\203\274\265\373\224\274yU\324<\347Su\275\211\353\004\275P~\252\275\024Z\215\2713} \275\231{c\275\033\223(\275Z\276\347<\265\320X\272\n\031\355\274\004\034\311=\247\214\033\275\342\251f:\222\254#\275c\345T=\205\322\014\273\356v\017=\264\261.=\021\353\256\273\001\200\254\274?\307O<*E\004\275\311y,=\024\300\255\274\351f2\274I8\204\273e\271\350\273T5\036=&B*\275\240\231>\275rG\212< \342E\275\"i\202\275\335\006\215\274\237c\355<\210\303\007\275L\246\344;\344\207\213< \"\305<\303\001\217=\234c\244\275\014!h<5\362\211<\357UO=Z\245o<\311IY\275).k\274\3301\257\275$\372A=\260\371\377;\367\315\210<\365\313H\275\330\234k=\334\nC=1\204\261\275\007\255\311<7\'a\274t\345\016\275\2027\002\275\022\276\277;0X\343<\223\227\342\274\276\241b<\311\267\353\2734R\276\274\231L\243=\374M9;\032:\225=mj\213\274Z\034\247<\320O1\275\034u\315;\035\312u\275\354p\215\275\302\361\374\274\347\222\216\2742\314#;\360\217\237\274>\323\"\275r\"i\275C\245\346<|a\236\275\256!\032=\261\345|<.Eb\275D!y=1\005\224\275B]2\275\013\007\322=\3030\362\274\204\217\"\275\230\210\344<\377j\205\274] $\275\262t\246\275T\030i\275v\ny<\214HU\272~\237\215=\254Mn\275\245\351g=\270\252l\275\333\364\274<\371\021_\275\377R\362<\250H\005\274\031\344\342\272\370S*=\305\237\326;\211\261E\275t3j=\216\315\023\275/\206\242<\312\253F\274\353\353\014\275\021[\313\274\n\267\252<\034\356\273<]\254q\274\330\375t\274\226\r\370\274\374\332}\274\334\007|=\226p\201<\244\212o\273\321\343\245<\222\240\2749;z\231=\017A\347;\260\014\017\275>\355\237\274!\266\235=v\205\006\276\033\342\265=5\236\205<\371D/;i\256\314\274\315te\275/\216m=\336tW=\331\243\252\274\205\n,=\3613\322=\177l\267<x\225\227<\333\325\032\275\262\241\354\275\020\353\362<n\322\016;q\2102;\254\350\260\275\003\032\371\273\035\264i\274g\273K<\026\3362=\3423\245\272\362nR\274\210x\213\274\357\366\347=\004\277`\273\010%k<G\226v\273c\025\002=^\315C=\313\021\257;\236N\306;\370j\250\274\257\327\277\274\320\032b=\207\363z=\350\311\025=\373QG\272\221\355\202\275\2676\213\275\255\007(\274\210\2058;\314X3=a\315.=\0009\213<\317\241\332\2748\236&\274\235o\211<%T<=S\272\224<\2562\024=g\370\334=\365\350\237=\317F\272<\007d\210<u_\214\275x)\264<}\326\256\273#\274R\275/\375F=\205\024U=\360{\311\275\212>\353<z\224\033=\370f_\275a(==S\326\244\274tG\277<\357e\200;B2\020\275\233S\203\274\273\324\303\274o\207\227\274\224e\301\274-\367G=e\343\031\2750\313\312=Y\304N;{\302\000<n\317$\275l\n\261\274\354\261\214<\242\260\213=\253\020\014\275\246\323\r\274\205\341\220\274\257\223\264<\370E\256\2754\317\350;nq\n\275\025\346\024=\353\345\236<\245:J=\211\333f=\'\252\360<%\237\033=\211\035Q\275\210\025e<JXu=2\342A\275\001u\243\275\235\005\322\274\242j;\274E\224\351<F\336\221\274\252\365\311=\016[M\275^\310\304\274\211\373\377<G\220\232\275\036\353\204\275\322\270P\275\033S.\275\026#6=p[\023\275\376g#=\032]c\274\253\320\302\275\010\262\251\274\3040f\274\377@\371\2745\270\327\273\226\311\252\274#\365\231\274\245\023~;\270_\313<\007\241\237\273\232\326C\275\365$\272\274\322\017H=YM4=\204\n7\274\354\261\337\274\305<\001<\204\235\332<o\250\215<\355\305\361\272\233\004\275\273*X-=\236\377\314<\331\267\252<\275-\330=\217\270\261;\244`\013=\2312\027\275\310\332\205=\311F\035=\000\273\272\274B\346M\275\276\364\244\275]\222#=\271V\351\274C \270<\332\212\222<\325\203\264=\002\342m=\332\377\210\274\334\341\214<\367\217\333=\253L\t\275#\347\214<\303\026?\274\253\307\344\274-\214u\275\216}\013\275~\267\t=\244nf\275*\317\002\273\\\024,\275WL\216<\364\217\322\274\000\377\006=\n\317\340\274\n\357\202\275\305}k\275\023\303!=\320I\252\274\336\277i=\353j\036\274\351\340\217;}\344\202\274\203\036!=Z!\000\275\"\3073\2757\3476\275\304\213\373<\224O\360<\233\270\213=\353\334^=\2073,=\304rC=J\024\203=\024\177-\275\204c\224\274\332\025\t\275z*\302\273\005|\215=\317\373O\274\323\r\362\275$\357\324<*\345\326\274|k\264;\026\326\r\273\254\000\210<,B\3609Q\242\214<b\341S<\277\254\001\275\014\276P=8\355\227<\231D\277<:\201Z\273\207#\013>)q\217\274 3o=m\215\204\274\241.\262\274\3113\213\274<\rR\274j\212$\275\236\270\273\274\275\2176\275\003\242P\275.\371w<6\261&=\360Y\210\275\231\306A\274\357\253\237<`^)=\024j6=\334P\034\275\223\227\271\274NO\256\274p&\025\275\307\3343=e\006\204=\373\362\241<\231\031F\272+\023\\=\317=\304<\316\001\223\275)\320\240\273\034\341\272\275z\005\272\275\031\323\014\275\235\312\010<\216\256A<W\205i\275\312ZV=Wm\006<\223\001&<\376\246\330<\223\206 =\362l\311=^\214\004=\242\301\217=\367\373\002\275\275\260\322\274\001Z0=\r\003\213\275\017\237\211;\325\227\213\275\031\333H<\312o*=\333k\005\275q\315\316<\"\027\373;\327\320\327\274\216\200\020=r{\341<\367\235\331<\014\220\031\274P\246:=\260\"\031=\031qs<\255\276\026=\3705\022\275\243\244\352<J\r\214:;\250\231\275\201\367\263<\226$ \275\005`\347\274\254\273l=\312X-=\306\351:\275\035\207\327<f\2134\275)BC\275\372\234\031\275\352\277\006\275\316z\346\275\242\355}\274\375\003\240;*/n;\007i\025\275\354\305\t\275\247\375\206=lF\357\274\270\027a\275\356\363\273<\261\253\024\275\226}\225\273!\223I<\213\274\310\274] ;=K\030\004=\224\005I=)3\302\275\201,o:\344\363/=i\022b\275\312\247\274\274%G\005\275m\365\214<z\321\276\274\002|r\272\2619\\\274I\024\032\274\240}\204=n\312l=\006\001[\274\013\231\237\271\276\300K=@\247\320\274\002\234)=\362\201\253\274\020\211\315\275@\005\333\275y\222Z\274Dt\010=\357%r\273\262.\310<\017I\255=D\020W<q\311\235\275\345\276w\275\363f\004=\'\324s=\t\035\230\274g\230\235<\344X\025\274\303\022\236<\347\3060\275\200C\220=i\322\243<\305\037\220=\005\330\254=N\274\326\275)i\307\275\210\355<\275\351\t#=\003\350\351=\022\257\270\274U\377\247\274\023\203\304\273\232\255\227<\0167A\272a\262C\274\310\374\026\273\303\267\370\274\002\337T=\251\360d\274kf\263=\005&\007=\361\255\307<\332\365\277\274k\004q=\230B\010<\261\321\377<E\311~=_\234\000=\244\374}\274\363l\274\273)&\n=8w\025\275\322\031\340\274\030\tp<\223\370\310\274r=\364;\3150T=3c\357<\3765.\275T\372\215<ez\241\275\376\376t=\317L\376<\0330\302\273\352\255v\275\327.l\2754\027\033\275\010z`\274c{2;\317\023\327\274\241\276\036\275\034\025S=\265(c\275\337vD;\352 %\274\372,\224\274n#b\274@\301\315\272}\347\265=\266\372\222\275\353\314F:\232\367\226\275\324Js=\317\307\353<{ x\275,\373s<\361\211\013=\373\347\340\273\007-\361<<gC<\313\257\020=1\316E==`f=m\240F=E9\347<\241vc=z\370\253<\370a&=C\235\237=.\367\244=\344.A=\233o\030\275G\254!=b\276d= OJ=|\226\\=m\307<\275\3622\034=\032mD\275\0169x=\334\206\244<uh\220\275\246\254\n\2750\253\3447\301(t\274\033\225;=\213:\254\274\327\331\351\273\321Z\204\275\327\275\212<\333p\014\275\3242\237\273\2564\257\275M\321>\274\254\222\223<;\021H=\305\377\206=\320\372\261:\315\361\221=$\017\270<Ts\025\274\345\347\255=S\305$=\370\242\032\273\204\266G\275cO\327:\005\320\212\275F\334\330\274\214\321\016\274\324\321l<\212\233i=x\2650\275\214\242;<\335\260\212\275\2455\211\275\030\272\007\275\213\324\355\274\2400\004\276\314(\265\2756\266\023=2\000P=\326\263C\274\003\001\323\275i\224\327<Dnh\275\356\217 \275\201\313\254\274A\356\202<\006\310\205\273\353\023\310=\'\177s\275K\007b\275Q\232\323<u\001r<\266\177l=M\222\016<\241\202$=\372\006\205=\276\027\337<\253r\206\274\261\205\206<r\350\022\273\374\230\000=\000\032\332<9\205\302\274$\245h=\246\214\327\274\216\275g\275y\234l=R`\255<\032\2771<\366i}\275)\231\212=\260\250\330=\240\302p\274R@P=@i\304\274\023\r%=,\\\262<\215\361Q=\257\231\354\274_G\343<>\005\026\274\313\014\030\274\366\301\273<D\237y<\367R\230<\230uH\274\005\234\232=\336\314&=\314(\237<\346\245\3679\000H\350\272G\222\027\275Y\340\362<H\215Z=\3717\005=\226K\017\275\344\365d\275\265\023s\275\232\033\227\275\321(\027=\215{9\275\212\260\211\275\271\240\363\271\351e\225\275\246l-=\345(\335\274\306\342e\275o\312i\275\t\320\354<\356\204\211\275\0262}\274\377\206v=\225`7=O\203\235\273\203\347\311\273\377\264\210<\363\277\324\274V\027\032=\314g\316=H\345\257<\200&2=)N\r\275\342\300\205\275>\321c=\321S\003=\357:\273<`\310\354\274\315\'\244\275\227|\230\275DM\312<k\251\000<\355\225\250\275\213\265\301=\375\357\327\273]lQ=>I\252\275\004\027\032=\234\037\321\275py\000<\226\016\215\275\035\327#\275\216\013\004\275\244#\246=\334\361\371\274>\302\351;~\325\233\274\351\337\207\274\227d4\275\351\235\200<\212cT<\305\206\r\2756\277\031<\'\273\363<\342\341\235<\361\300\035=\006\277x\274\350\ni<\021\022\205=\326\0050<\317\310\'\274\265\300^=u\316P\275gk\265<\211\222\234;y\032}\275\003*\314\274\311l\231\275\251\247{=\351\262\250\274\330\210\313\274\343C \275\345h\224\275F\361P<\344B\262=_\307\363\274M\236\243\274\314\242L\275rp\215\273\306\002\316\275\313\223v<\0306\277\273b\210\324\272\003\331P\273Tn\234\275\317\033b\275\014P\350\274\232%\226<\246\021$<\216\241\236\274\300\212\253\272@\364\t=\004 m<z\272\305\275\354v\224<v\244\327<\007\245\252\272\000\0378\274\354#\021=H\006\242\275X\301\035\275/\213\364<\264J\254=\214\260\261\274\264\020z\275\210Y.\275\271=\240\275V\024\033\274\216J\016\275\001\357\021<\341\t.\274\347\344\002\275\333<?<\013\315\313\274\342\361o<\366\305\222\273\004\201[\273\312\316\216\275Z\326\312;\263\241\006=\336\277\234\275\020\n\222\275\246\326\311\274\203ow<aAw=\205\\\020\274H&-\274%\341\260\274\267\334\345<\316;)\275\241\300\226\274J\370\365\274\352y\006=\274\222\r\274\303\275\207:\345\014\200<\311O\014=\224\214\270<\346O\265;wo\322:\261\342\320\274\312\347\030\274\323=]\275\271\360]\275\265-\257\275\267\340[\275nh>\275\242\247\261\275\322\363\251<Z\237B\275X\035\367<\nV\220;mp\211\275\312[\267<\236\023\245\275\204Dk<=e\274<sm\235<\n0\022\275.\345F\274;\324\362\274\026\310\241\274v\023\200=\235\224\010\275|\242\363<\312@\201\274\006\246n\275\t:\371\274\274\274\325<\274\265%\275(\270\266\273\020\251\254\274\306\321\227<\311\342\365;8<\035=\010\177\304\274\366/2\275\033\334K=\337\362\023\271\0018q\274\302W\305\274 I\315\274#:<\275\231\005.=B\344u=\243\252\276=,5\013<\210X\237\273\307\317\307<\350$\026<\203\265\003\275|s\350\275PS\367\274\247\234E=\0215\256=&+<\274\2037\265;N\313^\275\272\334\270;\231Jb\275\014\234\216\275\237L\352<(s\201=\226\262F\275\343R\014=\334\324\353\275\274@\332\274aU\224\274\244b\034=\306\241\364\274+\344\000\275\232\354u\275Wlv<\014\017\277;q\202\035\275P\237 =\261\362c\275\\\nF<\244\010\247=\370a\005\274,\201\370\274\267zx\274\257F\213\274T\'\\:\323\177\270=\231r\263<\300\025\246;\322\352\217\2738\274!\275\260\273\026<z\207\035\275d\274g;V\3463<\r\275x\273a6\036<\014\202\207\274G\213t\274\0029\276\274yvV<dB\252\274\370\213\036\274\267v\353\274\271\265h<C\225Z\275V\022p=l\200\335<\234\025\235<L\027\315<u\373\021\274}\202\226\275\225\\\215\274*6\345\274\316\220\274\274U=\007;G\312P\275\203\334\200<\335q\336\272\222>\004<\352\205\264\274\332\305]\275y\276\t\275Sk\035\275\212\250T\275d\263\262\275\31027\2741\023\350<\340\314\204=\241\272!=\261\327\371\275\373\304\000\274\2702\260\274\207\020\222\275\t\271S<\324$\345\274s\205\362:\036\356\031\272\325b*=g}m\275\003\375\235\2750E9=0\022\\;J\242\247<W\016-;\227\314E\275FP\340\274Eo\037\275\241=U\2755~]\274w\177Y\275\275\343\203\273_\026\330\2746\207\337<\031\334\246=\303\345\027\275F\265\220<)\364\025\274\237\351\241=\206\377\323<n\336\312=\203\237\"=\305\362\024<}\345\n\275x\3456\275\340B\200\274\373w\361\274\367s\347;\335\227^\275{\347.=v\255\312=g\333\220\275(\234\364;Q\224\'=e\0062\275/\227\273\274\313H\207<m>e\274\356\274\220=\375Hj\275\007\213\373\273\006:!<\267j\200=\373K\340<\335M0<f\311\266\274\000\010f\275\003X5=\362Y\034\275(\\\252\274\215b[;qB\265\274\366\252\224\273\316_9=&\246Z=\272\342\230\273x\001\027=R\371\022=\025T\264<\205\224\373\275\r\203\006\275\324\016\212=\363\202\216=\032,\006\275\305g\230<\364\262j\273\272\320\331\274I\360\020<\204x\245=3\212n<;%e\275\327\313)\275F\313\177<\276\315\315<\203\365\273\275\033]\215\275B@0<\336\246a\275\032H\275<\324\325\317<\020c\000=D\230X=\227\222-\274\032\276.\274\367K\204=\331\333\'<\327,-\275-\274t<.\0078=\361T\365\274\'\231b\274\354\210\324\274\312\007$\275\261\242\340<`i\202\274=\322\000\273Pr(\275\030\245e\274\250\233W\273\035B\367=t\217\212\275\362\376I=\277G\260\274\337c\321\274u\247\304;\031\'\324\274|\202U;\007\0353\275\200\020\277\273s\201\214=\222\226/\274R\n\t\275M\243\321<d\035g\273J\227\377\274\273\020\204\274\034\212\211=\340\357\250=f[Z\275`\3518=\365\242[<A-\227<ga\344\274a\367\024\274\345\346+\275t|\202=\2205:=\360P\245\274\024\310\247\275\010_\030\273\004\262\261\274\345\342\276<?\332\212\275\343\023 =\205\245$<\347\343\227\274{!\263\274-\365\371\274\357\217d\274wm.<jC\004\275\200\305\351;\021\256\244<(\007\224\275\243p\311<$0{\275V)\203\275v\0377<\016@;\275\023\353\221\274\303\356\"\273+oj\275\202^X\274\022\t|\275\031\306\367;\206\220U\274;\234\363\274\032\337\214=\315\252\373\274\246^\032\275\201p\"=\326\320V=_\003.\273\tT\311\275\246\255\032=+\330:\275\214\315j<\016*\300\274\247t.\274\316t\205=z\037\303\274\240\327C;\313\257D<\024T5<<\307k\274A\355\312\273\337\364\014=\274\351}\275$\270\300\274\247\234\340=\333\207\367\274\271\363\364\274\207\237H\274\205\247\354<w\037\370<\377\341\337<\352\tW\275\304\337h\274\211\372Q=}&\024\275\031\212\032=D\212\244\275\024\330\223\274\006\233\224\275\2779\305\275a\007\250<\216\345\367:L\256\262\274\344\267B\275\350\250\177=\375~\217\274i%,=\032B\376\274Y\037s\272\313\023\301<c\222\332\274\223\242C=\024\201\374<\'&%\275K\'#\275\200*\010=\274\000\n=G^\273<\307\243\275=\264.\000=\266\332\037\275\367(\331\274n\003\237=\270\362c;,\210G\275P\323\270<tk!= \306 \274\267\220\022=kK\242;\226\310\376<\2637\343\275\320\313\027=\303\027\203\273Y\365I\275\246u.<\337\024\252\275\357de\274\360\250;=\324\273)=&\307\247=%\224\306\274\022\300l=gU\240\275\311C\342=\315\244\221=\024\027l<\244\004\365;\204K\227=6\305\232<\330\214v\275\245:\366\275K\343?\274t\217\270<\3052K;[\210\373\275]\215\313<\3123s\274\226\023\374\274\277\331\217=\037\377l\275\224b\000=\324\375P=\246\031\207<r\276z<\300fQ\275\301A\\\275\225@\265\275\nN\303\274L\333\r<a\325\233\275\212^2=\372\031\275<\013\001B=\013\204\223;A\333\256=`\021\236\274\277R\355\274\305\217\337\274\233\376y\273\314\020\327\274l(\351<,I\345\274^\\@\275\036\265w<\320B\241\274\305[:\274\017\342\303<\302\241?=\177_\253<g\211\001=\000(\025\275/\305I=\325\375V<\336Vb=\374\346\031=\322T\357\273\327y\236=\312\3636\274{\253`\275\263\256\2048\372\274d\274>^\275\274Fj\311;/h\001=]p\025\275\267U\336\274\022\225\013>U\3354\273\223\277\"\275l`\307<Ak\347\274{8}<\272|\034\275|;\201\275\376\322\322=U\222`\274u\346\034\275\0130\230<\377\326\017\271q%D=\343\270\227\273r\370\355\273\"\374N\275|\353\250\275\027N\264\274\034\304\331\274,6[=\361v+\275\220<\007<\230&\274<\315\032\270\274\242\330\262<l%\200=\205\251\231\274=K\377=y\201\223<\335\332\030=\266Ki\2745\220\206=\230\010y=\272\214,=\264_\252\274\211\251\224\275\262D4\275}\347\243\274Y\255\\<\2045\021=He9\275\222\346\211=\247\252\344\273&\233\307\274\311/\003\275\307\203\035\275\362\305\002\276\232, =\016\223\267\273G\t\202=\'|J<\317=4=8p1\275\007\253\033\275\270\036\260<cx1=\317z:=\357\311b<\371e@=J6\334\274\274K:\275\231\027(\274y\321\207\275A/T\275\"\350Z\274\316r\346<\341\244\305\275\266\246e\275m\264q=E\346\336\274yE\025\275q\207%\275\220\031\020\275\205Xk\275\331\375t\274s\\\\\275\252\220=<\031{ =\335xd=\\\031_<7\261\203\275\222G\305;\267\"\201<\374z\353\274\252 \243=\322bM<\024\353D<\237\367\231;\321\022B\274P?\366\273\201C\233<\341+D=\004\363\027=e\004\330<\305\331:\275\205Pn= \006\213\275\351\241\262\274\300\247\277\274P\216@\275\014\344A=\022@\370\274;\3667<[U0=\013\013s<\357f\271\274\031<\236<?6\263<\271\323\302\273Q\257\207=\303\035t<\305\217:=\353\355\241\271Qf\267;\230\332\002<\031D\007<\225Y\002\275\222s\366\274\032\035\367;\273g\202=\264\240,\273N\316}\274\215T|=\310\264t<\220Ec\275\342h\214<\316O\010\274Fe\211\275<rv;\3138\275=54\264\274A\006\322<\316\310W=b<\001<\356V{=\017\270?\274\312\252H=\332\241\006=\221\261\232\274\301qc<\202\033:\275\033\262!\275\351b\210\275\333x\257\274\333\304S=V\334\310\274\267\367C\2751\206Z<M\337k<\226\311\271\272\347\270[=b\027Z\275\235l\243<M\340\213\274%M\022=(\336\013\275w\254+<s\220g=9\245\357\274\376c\271<Xm\213<\353\324\317\274\250\202\007\275\202\341\306\274\315\336\204\275\315$\365;/no\275^$\246;\0171\327=\034\316\301\2759\024\212=Z.\231<\342\344\227\274\346\212\027\274/\221\017\273\213:\331\275\277\2365<jx8<r\273\304\274\377\2402\275o\310\216\274\327\022n=-\214\353< \246E<\tvW=\263\nz=r\220\376\274\260s\005=\375\255I\275y\343B\275\324\311I\275 M\350<p3X\275\336\237\202;!\376\333\275\004c\002:\206\307m\275\3603\276<\253m\233\273\201w\351;V\356k\275U\313\232<\354#\301=e\363\021=\336\005\201<^\246\301<\036\032\224=S\014H\274\240\267J=\374\326\340;uQ\215\275u\223`=zU\223= \3636<y\332\274\275\263\342\365=\344\025\257<\034S\036\275-l\"\275\031c\032\272\303\025\332\274\036bD\275\264\340\211<\316\344[<\320*<=PH\006=\304W\016\275\273c\213\274\256G\361<\275\362\301\274\204\025\345\275\200\367\365\274\021\300M<\242D\224<\376\371\275\274|\231\372\274\352\247\r\275(\"\371<\333\305\227\275~\317G=\037o\020=\010h\337=D\351D\275\357\274\002=\2700\213=\0047\315\274X2\370;_n\257\275\340\325N=\243\372\246\274\340\263?<\226\024\203=\030I\016=\001\010\021\275\264\004\255\274$\326,\273zD*\275\"r\007=\347A\024=\014]\236=\307^\237=\t\343G<\212(#=\262^D=\221\356<\275\367\335\246<\307=\246\274\211\261\300\2747\376\254\273\250\373i\275\255w\256\274Jj\340<\244\003j<a1\227\275I}K=#\254\374<E\260(\275\255\\\333\273:Y\200<\230\276\025=J\242\037=\3769\200\274EUl\275\221T\237:,\235\375\273~\346\017\275\275\316\221=ba?\2757\005\350\274/\014\234<\\\262\017<\323X\027\275?k\251=\204g\223\275\333\264\025<\221\371U\275\216U2\275\220\030\271\274P \251\274\001\277\036\273\262\324\357<\2661\211=\341\014\336<\242\014?\274\002\325\367;\032\215\254\274\222K\337\275e\372\236=\030O\373<f\376J\274\r\342<;\3730\032=\276\'\025\274`\032\221;\373\367\336<\266\364\337\274<\303\237;\313\376!=\332\377\330\274\255\2105<q\201\200=\203\341\216<90v<\2211\362\273b\214a=\003\374?\275\266\340\200<\0252\006\275\302\3129\274}\323\021=^\004w=)\010\233<\317^\\=aw\177=\235Z\230<1\264\222=\304\267\237\275\322m\177=\256Na\275]\'\355\274z\2737\274P\252\037\275\006\036\354\274c\320\200\275\221?v=b\224\361\272\2676\320\274gN\204<\000\304c<\240!\255=\025\214v\274\245\263\030=\337\261\212\275\21361\273\220\272\255<\244\036\024=\270\231F\274x\232g\275m0\007<\003\231\232\274-\201\254;\251e\206<\3279\257\275\321#\204\274\031H\265\275\216\227\317\274\222D\t=N\340\325\274\324\351W=\350Zt< \341\n>\311V\312\274\304j\207\272]T =\003Q\352;\371\362T\275MUp<\211\241m<\356S\013>f\265\371\274\245w\227\275^bp<^\325Q\272&|\264\275\256\245s=\211\0223\275\271\021\r=\310\024\306\273\227\030\242<=/\305<\227\240\202=\337\322\013\275\215\330@\274\032\205\t=\001>\000\274\007\210\366\2743\t\1779\2223\242\273\020\305\361<}\321\264\275Q\273#;\231\2010=\007*J=\377Cf\275_\233.\275Y7#<\010\334\204=61\334\274tx|=!\345\005=e\214\033\274v\222\323\274:O\024=43\022=\250\333\203\273\231Jy<4,1\275\254\361\206<\204\223M=\253\341K\275Q\206\030;\355h\325\273c21=\343\354\270\275\2353\004=\254(\204<SD/=\341?\325\274%\255}=\330\307\331<G~Q=\306QC\274\201\226\311\274\305\307\313;\235\227S\275y\033\244<>\336\336=\013(\232\2747\340\331\274b\234\326\274\322\300\301\275\212\305g=\244\r\363\273a\305\032<6\252\021\275\306|\325\274\3141\332\274qA\204=\205,>\274\320\376:=3\227;;\233\006\367;\365\3366\2758W3\275\010\250\237\274\227a1=\013:k\275R(\351<G\250A\275\240O\303\274\373\306>\275\014\270\322<x\347\313<\'~7\275\013gC=p\013\350\274ui\357\274j\003\332\273\327\361\030=\355\361P=\020\373:;\225\026\257=\nFH=\017\246\354<\226\014\233\275$V\227;\244\3349;J\267\274=\227If=\"Z%\275uF\237\275\227\247O<\020\346\355<3\237\245:H47=\227\273\376\274\314\177\212\274s\327V=\336\270\267\275u\277\023=\311\027)\275*\340\324;\035\214==\021\267O<t\267\010=\232\236\271\275\037\202\001\275\263_\210\271\220\311\032\275\002y\330\275\322s\025\273\310\036\236\274+\032\231\272\\\256\267\275w\306g\275\314\257v\274\306O\353<9\"\031\2758=\003=\231\2307\274\006\027\212<o`*\275\200\225\246=ipd=\202\260\372\274M\336\313\273@\222\010=c\227\240\275\346\242\024\274\231\254\203=\023\363\001\275G%\327<A:\231\274\240\375\016=\214\217\004\274ND\231\275\344\302\262\272\221\'\226<\321\036\306\274\333Gj=\353\036M\274$\314\335\274\000U4=\242\265\306<\221\236\371<\230.\224\274\2038?\274\214\025\022=\220v\350:fD\215=\241\270s\2757\021%=\260\035\304<\265|\270;,\010\271=6Y\353;\306\034\357<\025g\243\275\345r\232=r\310m\275o@]\275w\376\253=\344\235%\275\223/\035\275\006\344\034=}t\005=\006Q\353<v\311K=]zY\275u\345\340<\331\177\002=\3303\002\275@\0104=\305\253\245<M\313\':4\034X<~\341t\275\357*\312<I\371\025\273\034\204\264\275\225c\033=\273\004\237=\330\021\001\273a\204A<\304ai\275\343\313\350<\236$\366\274+\274\024\273ZF\263\274\017\022\201;W\203a\275\367\245\254=?,^=\006\242\234\275\3214\206\274\r\375\216\275\034)Y\273\202\302\264\274q\272\204\273\342\302\025\275\371\325\303\274^\2278\275$\021\312\275\370\177\014\275z\274\234;\037\007H\2735\353\246<\234\017\023=KT*=\317\360\3449\234\377\032\275\200\327\306\274\031G>\275\270E\372<\224\351\004;\321R\'=L T<\317\230\263<\227\230\367<\237\231\307\2738\372\020\275m\210\251<\000\205\263\274\342\337\226<\373\254\201\274\347e\324\275\266\001W<\304\327f=\310\320\231\274w\014\261=W\310\'\273\277:\344\274R\256\350<\365c\006\275\360\211d\275v\265C=U\"!=\341z\214=x{\324\274Ij2\275\025\231\204\275s\362\260<v\344\025\275\364\200\334\2736\265\032\272|\217\240=\257p\243\274F\205\372<\357\253\210=l\327\310:\252`7\275\030_<=\023\010e;\350\211u\275\n\223F=\204>\223<S\232(\275\320;H\275q\"\246=7\273\311\274)-q=\313b\223<\355\320\202=\322N%\273\363\327\005\275\247d\233\275\211\374\200\275\353\233\017\274\251\274\204\274\205\306Z\274\212\350Q=9sg<p\225\250<\227U\321=\3667\021\274\tf\312<\272\263\313<ru\235<\321J\017=v(\216<\033J;=|\272t=c4==|\\\025\275\336\203r<,\234\243=\345\030\006\275\316\027\2278\321:\332=.<\213;\020\323\007< \271\253\271q+u\275yH\247\273\200e\206;\0220.\2758\227\213=\311w\335\274\351Se=\035\221\241<|\023\243<b.\267=m\013\003\275LzH=I\0006=\0352\211=z\220x\275\347\251!=\007\312\n\275n\251\221\275\316\237\264<\2560\002=Z\3129=\255\253w;\027\223$\274\243n\237\274l\006\316<\272K\362\271\316Q2=\374bn\275\3440==\354+\226\274\027\260L=\221\034\303\274\207\361\255;[\250\255<f\240\233<HW\213<\273JI\274/\307\350=\364\237W<,=\351;(3\303=\233\225=<\354\n\255\272\221\223\317\275\001\220\217\275\335o\023<\236\002\023<\3302\213\274!\033\000>\273\200\020=:\373\315<\024\262\014\2758i\024=\3017\334\274D&\226<x|\\=z\033\375<\372\364o=/\267\033=U)\237=[\376\321<\356\257\274\274\377~\000\274}u\230<\266\271\244=m\347\006=\247\250\214\272*%\006=W;\026=\257\007l=\270\361U\274-~\035=\345Al=\357NH\275\037M@\275\361\234\200=o<\222\275\271\0027\275\032&\334<+}\201=\272\224\r=\010A\242<\023\375\025=0\230\013=<H/;#\265\200\274\340\226\353\273\340\335\250\274(Y\016=2\271J=\211@e<\331\263\336\274\2656\001=\000\217X;\003\'\250<Y0!\274\211\235\225=\3042\023;!\211\025=\313\004K\275\016[(=+\036\306\273\205\336\010=\366\262<\275\341`J=9\215\010\275\027q\205=\345\355:=t\340\317\274\3574\371\273\311\010\314;\201=s;\2418\361=\357\225h=\033E\257\274\2326\203<_\222\350:\342\324\231;\007\304\225<x\244\007=\271\312\274\274?qB\275\226\267\233<\302\221\237<\214Y$\275\240\256\3269V\177~<\341\233\357\271\320\271~=R\245d:\366\005\035\275f\275J\275\313\017^\275R\346x=8P><FS\022\274\007)\n=#*\253\274\365\034\371<\002\301^\275O\326\221\275Z,\026\275\374\223\313\275\270A\252=\366*\231<\334NO=X\246p\275A\353\312<\032\363\177=F%6=\311\003\262<\002=\200\275\237\321\234=\027\267\265<d\211S=\214\347\253<\371\220\237\274\252^\030=\345j\342<Cg\203\274\215.(\274\0030\350\274-\356\024\275\205\324\026\275\227s\265\274.\310Z;K\271\t=\337\223&\275\223\367x\275{\204\335\274\363\262r\275}\271\313<]+H\275f\002\332\274\364\231f\273O\\\322\274\312h\302=\374\366\\\275}\037\001\275\034j\217\274A\323Q= \301\330<\221\376\246\275-\030.\275%\356\033=u\002\333<x\303\017=r\364c\274E\373\205;\200\261(=\301\"\354<\035\020#\275\276[\037<8+\251\275\226aG=#\3359\275\364-\202\274\335J\302;\336\300i\274\025|l\275h7!=\304\273\247=\201\200\204\275\303\260\014=\200\246\364\274\212*\235\273\016\2439\275GGH<]9\220=g90;6\347\025\275\"L\354\274tj\022<\211\267N=)J>\275{\022<<\3334\265=#=\250\275\247\232\034\275_O!\275y\356\211\275@\005\207\273\031`d\274r\365S\275W\261\324\274Jw\310=\340\'\262\275[z\343<\304\350\256<\204\254\363;[\347@=<\004\260;\300\305y\275&\273\200=\037\037\320\274Ri\221=\220\200\035\274\037\037^\271x\373\365\274\021\212J=\202\022\202<G\274\244\274\2440G\275\216\334l=J\312 \274\320L\326<\245w\210\275)\016l\275\\ff=\326\'R\274\351\003X=l\364p\274\230\342s=\300\200\213<\261\2327\275\001$8=\014\006\031\274\212W\235\275\0228K<\374\2035\275\270\232\243=\220\303\206<\035\036)\275me\254\275\235\301\245\274}F\203=\315\363\033=c\007\355=\005a\020=\333ay\2757\247\202\272\217\365m=\030\340d=\322d\275\273\216\335N\275\035\203\023\275\215J\210\274>\302\027\274\345:\254\274\336\'\206<\253h\241\274\0244\005=%@\240=\000v\023=\375\264\210\275\365\303\t\275c\001=\275\0064\'\274\310MG=N\235\302\274\271\330E\274j\262\233\275=\001\215\275\233\205\357<\0379q\275\356\301\336\274\253(\334\274=\262\232<Kt\212=\351\277\350<\301\030#=\310\024\343\274a$\320<\023\201\213=I\017\234;\303vY;W\'\364\273Q\372\217=\025\013H\275\260\275&\274h\277j\275\013\263|<\365\010)\273\277\304V\274G\203[\273M6\323;p\026\337\274\177\002\230<\252z\207\275\202\377\210<+\322V=\313$H=a\002\027\275\225\373\223<\352\213\016\275\261W\226\275\014\245\036\275o\222\370\274#\333?\275\273\300\272<GJ\355\273\202h`=\321\314\n=(\246\227<\326\373\364\274\320Z\227\274.9\213=n\204\234=\3541o<\273>\324\275\243\253c=\312\224\254\273\373\2201\274N5{\275T\300\333\274,`\300<:}\005=\013\270\372\2740\223\"=\344\214\354;s\240\253<h\210\372<N\347\202=\033hh\275\355\370f=J\272D\274\337\336\276\274\376\376;\275\036\0171=N\177i\275:&\036\275\3717\236\275\375B2::\3758=\246\264\344\274\254\020\203\275J\354\235\275t\034f=Cf\211\275\310\361\237\274y\265\177\274\320\342\037=\355(6=\026\232^=zs\333\272\306)\355<8\332S\274\013m\272<\334h\346\273Cz,<\001=W\273\020\033\027=\217M\030=\303\331\316=\237oX\273#x{\275y\020V=FFv<\305\237\366<\315\020x=\301S\213\274\242\035\253=,\307K\272\n{u;\364}\260<\023\037\250\275\355\037G\275\013\244\214=\267\031\226\274\005\336#\275\025\344b\274C\366Z\273r\301\014\275z\251\271\274\305\203\253<\035\316\304\274\036\t\232<\217\377\002\275\351C\032\273fJ\232\272?}\327\275d\261\347\274\356(\001<\202C\243\274v\020^;<\233|\275\273H\344\275 \251\353\274\212\205o\274\333\322\377<\377\336 =wi\260\274&-m=\0238k\274\343M\034={\352\250\275\231\376x\275\177s\270\274\014>\032\274x\n\346<\013\316\351<D^\231\272\366R\355:<\007E\2744\270\236=t2b\275M~\006\274\266\230\320\274\367\260\242\274\016k8<\226\347\032=\230\t4\275J\213\312\275\370\027\355\274\346\022\024\274\232\324U<\324\357\177=\017yQ\275\210\006S\274.T\3549VcZ\275\357\027\357;\376\276\\=N\220\240\275}y:\274\313g\371\272\2427T\275\237\202F=\005\306\213\273\245\225\\\275?\330\036=3eC\275\375\320\207<}\317\357;\204\'\216<\004)\242\275H:a=Ce\036\275\215-\324<.\271\021;\2374\033<\304\350\251;\320\0200\275\245\"\234\275RDS=\235\272\360\274\326\002\014<\240\3406=\222\250X\274 Y\"\273\006\356i\275J\366\205\275W\225\276\274\360\2044\275\307?\265<\203\344\366=\331A\377<\037+9=Y9\277\272@\320i\275v\033\371\274K\t\245\274\372C\005=GD\204:\232\'\202=c\237\260\274\355q;<\366\355\376<\035\351\306=\267\211o\275\312\324\236=\327M\214=Z\3557=z\216@\275\323\3527=\227\030O\275>\023\027<\351s#\274P\3107\274\3630\343<Y\365X\275\211\224[=\332|\205<\226\365s<\276;\361\275w7\301\274\211o\361=\006\233.\275\255\320\021;P-\374\274\033DB=\001\314d\273\2110\262\274\016F\243\273/\253\307<\006\204.\274\331n\001=\267\312\210\274\'1%\275\351P\321=\r\260\224<\360\344Z<\3529\245<\330V\014\274\244\025\226\273e\276\362\274JX)=\313\346\310;\te9=R\242\323;2\023h\275\002B\275\275*\020G=\353Wk=\277\333\366\274s\013\321\274r\205\364\274\r\311I\274CR><\014\2554<\243\351\335< \263\230<fp#<=\032\026\275\233\242\264<M\r\372<\265=2<Mc\245<{\376\351;\222\000\344;\357\254\002=YN\220\273Hw\306\273\243<\013\275\005\254\274<\227m8<\365\333\\\273\2517\267<U\350\356\274\343\345\317\274\316S\235\274wD\234\275\201\034\236=4\3032\275\027.\201<\367[\362<\333rm\275\027h\024\2705\220!\275\257\267\253\275\035xW\275C\370\367\2748\n\273:\353\254l\275\246\322\225\272\200\264$\274\347<I\275\202W\377;E\213\334< \263\007=K\211\216\275\374-\355\274\300\005e<\257\350P\274+\303\345<\304IR<\211\311-\275_y\024\275(\016\354\274\224\206\325;\n\310\262<e$`\274\224VZ;\311\204\240=\241S\036=\014\303\005\274S\271\303=\003[\003\276J_\371\274{%\247=T\231\327<;\335\217<5\364\024=\t\371E=\031+\315=,\022\025\275\261\270\231\272\014\"\027=\336\244\312=2\261\023=?\327\023\275\000\217\000\276\304 \227<\324\210\223=Z_!\273\306\035V<\2754\205=\205\201\332\274:l\237\273\334\354O<\267D\213=J\2344\2723\027F\274\262r\344\274(e\352=\r\246\310<M\335\202=\013\250\'<d\014N;Pmi\274\276\'<<\'A\346<\352\005\315<\346@\247\273l\014\222\2752\001\201\274\247w\341=\002[s\274\013\357x<\371E\331;j\225<<\223\313\214<\241\367,\274\342\352\214\275(\337\2729\033\334[;g\300\363<\325\321c\2731<[=\244i\006=-?\353\275<\2032\274\235\351\036\273\242}\002\274=\0340\275\023C\222\275\374\rY=8Q\222<=Wn\275\033aQ=6\026\343<\345\346V\275\335\374D\275\260\367<=\365\310\215=\301z\017=Z\300l;\311\215\005>Gf\300<\2620\006=\320\277\213\275\274\370\315\274\311\377\200=o\3256\275\206\3760=<\361\361;\320\236a=\03405=\204@\225<AW5=\266\025\204\275\324\346\251<\247\314\256;vA\226\275]\312\212<\3765f=Z\241r=\200H\357\271\241\264\367\272I\310\323\274Sj\317<\243\300\036=Mh\035=\341Ls<\264:\037=\353f\210=\202\233u\275bx\365<\002d\204\274kK\320\274\205\321\335\274M\004l=z\216\313\274\272\251f\2742l&\274\213\373\335<\021\255P\273hR\221<\300\242\262\274A\270\240<\031\323\2069\300.\331<\206\245\001\275\240\245\247\275\366r\"\275u\331\227=\033\n\004=\231\206\013\275\365\237.\275\034C5=7\347(<\216\371\034\275\244\2066\275\344\366\010\275\2122\307<]\226R=\313\231~\274\246~Q=o\200\253\272\363\233\007=\023^\010\275\352\307\355\273T\020]\275\230\311\251\274\332\303g<\275\267\256</\204\035\274\326P\235<\367\250U\273\317\\]=U\217\213<F\367\016\275\222\346\022=}\313R\273\247\363\356\275\374e\304<1I\362\274\033\210`\275\302\022\327<\365\034\237<`\374.\274l\2444\275).{\275\240\265\350=*\r\023=\212\237\r=\276\0375=\337\323\032\274\361\037\331\274\215\377+=\020\033u\275Bh$\275\371\203\251<Q\004\037\271\264\2764\275[\221\324\273\357*\341\274y\222\345<\230\230\324\274%|\246;\0368e\274\022\354\302\273\333\354-\275\323\343\215<\222J3\274NG\261=\310?&\275\021#\343<\336e\365\273\000l\365\274Y\022\025=\210\356\236=\201\352s\275/\244\001\276\243ap=\224Q\200\274\337\320Y\275\2634\306;\033\260\020\275\021\273\236<\341`1=\351\323\245<\312<\016=\200\245\371\275\367\333\204\273\213[\264<\371\353t<\024v\274;S\331\023\2744|\010\275\275\246.<dk\"=N\233\314<|]\223\273\202\305-\275u\242\236=\325K\365<\021\356\020\274\200\272\005=\247!\230\2758\353\322<\231\352\267\273\200{\324;\256\230\373\273\266\031r;:w\301=!\335\361\273j<\177\274\211\177\005<\365C\004\275*\305\230\275\201\017\304\274\206\022\003<\322\316\243\275:\236&\275\254\363\222\275\2507\267\274G\265\206=\352\205\230<C\2163\275>\321\343\274ty\257\274\r6\027\275_=\230=\307e\273=\204\3757\275\205$-=\373\322\240\273q\253\021\275\270Yi<\311k\027=\'}\001\275\361\374\333=\314*5\275\366L\202\275\347J\346=\002\033\226\275\204k\213\274\272 \n=\030\247J\2751H\013=\351\271[\275 o\323;\363\366$\275\305<\003\273B4\371<\217\2107=?P6\275>\020\341<\216\327j<C\251M\274\306F\343<\363\266\013\275\243\016\004\275\021H6;\363\217Q\274\361\002v<%tg\275\026\2001=\030\016z<\002(F=\307a@\275\355C\337<h=\225\275H@\312\274<t\032\275H\270~<=ya\275\316\'\214\275\330\256\350<\332\322\240\2759\216e\274P\321[\275I:\351<\331/\311\272F\003\223\273l.\253=\333z\212=\230Z\344\274\257=\215<\244\314\221\275\234)B\274\224_\361\275\000\014\215\275%\322I<\246\260C=\252\262\314=\022\221\303<\007\372{<\200\035E=Nq\022\274\304$\206=\234r\236\274\027B\275\273\375\303\230\274\357\250\247=\220Tb<\215\2327\274D\226\013=1\343\263<\315\326\243=_\307\247=*\231\274;\376\325\344<\333\244\006\275\270\220%\275\231\351$<\307\274\344<Bp\221<\327\247\302;\177\200C\274;Tj=\216\201:=+^\3129\266\314\306\273\363:\262=\2624c=\020\\\032=\231\027\207<g5\252<n\025\266<\322>O=\343\007\014\275\371\304\322\275y\017S=\327E\021=\357\343\223:\036j_=\271;\200\273\241|\352\274\275\277\220\272)\345i\275 NO=o\322]\275\257=^\275\245\203\250\274\277\r\261\274\302\324\247\274#yt;p\304k\275\315zo\275\346`\021\274\032\0017\274T\325\336<\354\263;\273\3424\021\275N\345\221\275o\272\203<\203w\207\2755\312\227<%4\232\275\234\316\372\274\235\323\212\2740#\002\274$\316\r<\033\007\326\274?\231W<\027\271\227<=\273\024=\373\303B\274b\033>\275\025N\022=.uX<n]\037=\252\334L;\305\001Z=\374\305\213=\236\364\314\274 \316\031<\371e\343\274X\200\\\273\n\037\202\272\017\030\335;\235\343\265<OCc\274bC\242\275Wd\302;\207\367$\275k\221\022\274\244\304\300<\006o\375\2734\323\241\271A\253\032\275\332}\003<-\324\231\274\364\250\242\274\316\235*\275!\247\004\274IK\272;IH\367\274C\265\355\274B\250\"\275\311\377\207\274\3230 \275\277\025\322<L\247\243\275\232\377A\273\r\354\212\274\340:\206\274\237\013\"\275%\343\231\275:e)\275\207\260%\275@\350\246\274d\005\375\274\026J\324\274\034=\303\274\372|*=3\000\312;8\321m=\375\250\335;\250f\211=\\r\274<\013\225\231\274i\264\037\274\220\334Y\274fS\275=O\033\006\275\321hN\275\267\367\245\275\301H\226\274\204\342\201\275F@\024\275\330\023\302;\265-+\275w\263m=\007w\263\275\322\344\257=\313\307E\275\350\'\023\275?\332\r\275(X\323\274\341_\257<\323\014\360\274\301}`=G\236\302\2747\300\331\275:%\335<:s\203\275\367\374H=\221\357s<\033\'\256\275F\260\313<\221KG\275.\247\220<\346A\251\274$y\367\273\235?\323=xX\333\274\031\260\376\273=\016\343<\344\003{\274\226\357v=\242\326X=\203\303\213;\314\306\217\275\267\275j=\327\024\215\275\257]\222<\233\031\030=\350\201\213=S=\213<\224N\240\275\244\001\226\274\256\001\213\275\224\310\233\274\307\357V=g\223O\272{1I\275\264M\020<\300\377\246\275\013\024\204<\311\302\266<\271\275\236\274\036\034H\275P\250\221=T\237o\275\205+#\275\246HP=\370\362\240;\345B\221\275\210\250\202:\352\022\217\275=\367\213<\352\022\372<R\313\356<\375\027c=Y\301Y\274+mP=\216\372e=\t\222\\\275\017,\024=\235>g\274\226\327\207<^\375\304=\216E\376=t\330\032=D\371D\275\330\253\027=\332\333\332=\272u\276\274\311\006\214<\020\327\312\274\257:\016<eS\353\273\0050}\275\355\250\017<E\244$=\205\014.\275&\305\315\275\316*\016\274\254\315\320\274H\361\246<8\002\222\274\306\2173\275B\256\375\274\234\021\002=G\304c<\262\034^\273\371\335\360\274\271\252\013=\243\311U;\024\013(=nA\213\275\312\335C\273jw1;Y-\347<mo\030\275\315\030+=\001\0259\275\337`\010\275\244\247\230<\316\3776\275\034<\027<r:\221=\361@\003\273\233\276K\274\312ie=%\375\241\275\001\363\200\275D#\314<\225\260I<\rD\273\272\027K\007\275\360i\364;\332\317&\275#)\022\275\306_d\275\346\255\303<d\022\031\274$kq\275\031\337\221=]H :\004\362\006=w\340A\274\340\016\267<\203\325\257\274~I&<\225\2526=YcS=\027\335\246;)QO=\203\265L<c\2750\274\316\342^\275\355u\240<\'\333~=Ub\210=\361hA=Gt\314<\377!\026\275\306j\316<\303&\303=\346\230\272\275j\005\300\274\204\250R<\313\"R\273kRu\275\363P\204<i\375\227<z\014s<\023Us\275\204c\213=D\354<=\022\360@\274\270\260\302\273\253f-=g\346B\275\276 !=8X\314;\212Q\215\275\370)\253\275\355H/=\006\215\272\273\3524\022\273\315\321\253=E\013\203:\246|\004=>K\236\273R\t<\275\270aB=\007q1=v\302\343\274]\371\003>\241Y\020\273\245\246<=\001\221\342<\317ZW=\266\377\247\274L\337\'\275k\246I=\035o\237\275\207\223\301;\276\303%\275\267m\320\274G\327P\275\010\204\244<\331\250x=+N\027=\252\276\225<\327\037\326\273\312\3322\275\256\366P\275\"\322P\275\027C\035=hr9\275\340N\002\275!\013\005<-F\202<\006hD\275\330\231\205\275\301m\016\275\360?\256\274\232<e;[\025%=\035-\376<s\004\025;\033\302\256<!\3446<\272\3238\275O\303\256<\246\272\257<\241af\275%\220\206\274o\264\316<B\001g=:\362\001\274\'O\237\275f\252x\275\032g\371\274av\"\275\355\277F;\177\036\314\272CJM\273B*\344<JE\234\275\213F\032\274\265a\226=\3574\206\272]\206\037<\303B\256\275\027\021\217=G\366\266;\201\243\353<l\302\022=\203Eu=\275\367 \274`\177\231<\253\000\r=\254_\234;OB{=Q\\\342\274\2668\367\274O\254\t\276jd]\273i\351\030=\311[\206\275p\207a\275\242c\346<XVk=\364[:=\266\262-=\263\024\232\274\354\207\017\275\350\375==DDY\274rl\361\274\315[\025\275\003\220\273<\'\262\023<;\251\023\274\367\340\322;\254\026\351\272IH\024\275\256\220F\274UV\224\274\365\217l\274(&\007=\352\220\024\275\255\273K\273\320\225#\275P\020\343<\237\336a=\277\271\344;\321\027?\275\261\024\006=\306Ch\275\237\024\236<JV\203\274#-\234<\022\321\007=m\035\311;\334\025\253\275\237|\010\275RN/<\005K-\275_\336\225=\204\n\205\273RF(:\025#\364<t~\230\275D\352\224\274k\217v\274JI)=\240\365 \273\2165\010\274\250\315\244=\244N\371;\310\274\\=\213+\242<\253\335\031<E\203\030\275\241p\217\275a\024Z\274tf:\275\264\313\363\2749\312\003\274\365$\363;O]\355<~f\255\275\241\235\270\273\214\233+=\273G \275\231\317\242;K!\252<z\313z\275\013\024B\275L\245\356; \366\306=^Pt\275\331s$\274\224\214\227;\345\300\212=@\314!=\225\005<=\366Pa\275\025\227U\274\34532\272M1\274\274i\276\"\274\230B\032\275Zy\004\2756}\001\275$r\266\274{F+=\'\r\253<\256\276V\275\313\233\222=\r\2441\275\237z\005=\367\366\271=d\263\273=\255\270\313<\330\331\030=W}\310\273\312\030k<6s\243\272\005\302T\275\2127\017\274\246u&\275\010\256\014<\350\334\023=]\232E=\335\215\332=I4\241<\301\313A\275N\231\346<G\245\243\275\277+\t\275B\345z<\272*\341=\322\010\277=\214\250\003=X\364\260<F\323$\275~2\307=h\275\203\275\264NB=\317S\272=PPe\274\302K3=NiM;)+h<\305Z\223=\003Y\233<-\373>\275\227\322q=e\325\035\2754t\031=6\232\036=+R\242\274\206\231\030\275\336\305\310\274\2720\244\275\342\241\265<\252\314\311\274\t\256\312;>Y\375\274z2\036\275\377+Q=\321z\202\275\352\202d\273\230bk\273\362\0370\275\017\311[=h\217\353:\"6\226=\366\276\367\274\307\'\223\275\325\002\t\275\266\371\301\273\203\220k=bs\265<6\266\355\27504\0349\273KR;\204_T\273\'k(<\205T\007;\213-@=\331RL\275\235\\\033=mL\247<\245=w\273\274\\\206=R\246a=:\256\210=\234\242\231=\236\343:\273\200\250z\274\305\3161<\324\235N\275\201\273(<\225\210Y\275c5\323<\2130\375;\232\303\205\2742@\240<\334\010\271:I5$\274\315G\344\272\203C\231<\340\021\265<L\351(\275\0305{<\376\326\344<\316\272\324\275\233Y\375\274\037K+=\3758\314:\002g:\274\230\266\333=F!\002\274\\\250\305;\235\022C\273l\205\240<\210\364\273=F\003\t\275\344\031u=j\240\203\275>\034\033\274\2567\201=\330\356_<3\374\204=\333\2608=\032r\027\275\222\272\007\275\257\254\214\275\237E\251\273\340yl\275T\217\357;\205\207q\275{}:=IK\243\275\233\266\350\274\337\217\007=k\240#\275\255\312~\2750\223\005<\245\304X=8\224\223=\366\365\020=\021\231,==\266\372;fvL=h\342\306\275 \036\327<\037)\366<\241\260\362\273\225eH\275\000}\230\275\370\372\212;\307\236)=N\034u=\203V\312\274\333H\034=6\232\213<]\304\305<\375\301!\275\272\371G<\245\353}<m\2206<k\213{=0SG=\013\313N=\005\323\020\275\220\307\204<K\375\t;.9\220<\211\206Z=|\343\326<\256N9\275\237\352\226\275\235\204m=S\367\273\274\216xu\275\312\270\016>\212^g\274\334\363\275\275\nE0\275\261\225\366\273\030\324\377\274\027\325e<\264lM\275\305\221\222;7\340F=\275\363\010<\2649\270<=\271r=G}\277<\342U\260<m\255\377:\034ez\274\273n\212<\244.\010<\351@\376<oEB\275\244.`<\3447\226=Y\326\3079\271H\224=DCw\275W\246\357<;\363-<\204\327\273\275\n\252]<U\360\013<V\n}\275\324\337\236=v\005\270<\335\035\225\273\214\004\236<<^\034=\307\316\222<e\206\204<\375~\225<\362\214\254<\256.+\275wL\027;\330\253S\275F\2367=\037,\221\275\252\230\343=\r\374K\275\303\332\224\274\3260\201\275\334\202\026<I\245\203\275\n\345==3#\351;\351c^\275\\\"\246<\345\351~\275\310\322\271<Z\t\272\274\010\032*\275-\300,=\214o\242=\357\265\310\274\374\252\220\275R\262\310\274\026l\314\274~&\007\276\361\376.=,\223]\274] \221\275\372\272\225=$\343\027=\304\221\245<\250\223b<\273\261@\275\205 \315<\007|\302<\244\275\025\275\363\205\233\274\035\260T\273\035y{\275t\006.<\377\273\307\274\343\235\003\274\225d\335\274\312$u\275\010b2\2755|j\274\260>\266\273\245\367\222=PKo\273\361\315\014<8\232k\275\346\0256\275\021\225\005<x<\032=\202H\311\274\375\274?\275\215P_\274Hn\021=\036\023\354\274\356\032\326<\320!\236\274\262q\256\275\243\244\222<\212\037\225\275\362\202\017<4x\034<\250\212\316\273\222\366g\275v\265\204=\354\026.=?h\200=\230q\204<\352H\225\273\272\342#\275O\027\035\275\014vv\275*(\021<}\350\260\274\314w\266<s\033\006\274\013\265\314\274\357vj<MR\210\274\237\214\317\273\333!C:\315\177+\275\213\002\364<\321Y\021\275\344\323\025\274\234\202a=\347\343$<\360\245\031<@\037\005=\373p\t<\264\037\007=\354Y\223\275\265\215\341\274\337\234\352;\337f\333;\210\263N\275a\211H\274w\206\206=\227\350\247<\212\327\030\275\337G\203\273\212@\207=\312@g=u\3200\275\227c\201\275\255FM\274\310\261\233\274\345\277\374\274\210\022\r\274L\216\310<\230\036\200<\240\232\345;\346\034\026=\005&y\273r\250\210<x2g=7\235y=;\241=\274\342\305\252<7\264\036\275\234\344\200<\231\003d<\007\2143\275\315~P\274\325VT=\257\022D\275\323\221\261<(\322\016<\177/\322<\323\364\310\2744\003\356\274\325=E=IW\014\274Y\016\254=\005\344\346<>\326<=\257\316\223=\332\021\037\275F\320^\275\225\024h\275\240\3239\274\253\021\002>\263\225\212=\025\317E;\035\".\274}\233h\275Z>+\275#\000\'=8\304\210<\272\024\260</\304J=G\270\213=\177\020\270<\\&\n=\335A)<\245\211\260\274w\220\037<c\\\232\274\026\245\026<\277y\225\273|\205\255\274\271\301D\275\251\306\347\274\244U\027\275\237\355\335\275\351\3162=L\370\303\274\247\251\275=\352\274\213\274\216\200Y\274\377\"\227\275;\013\312\274,\203\016;X\265\001=O\333\232=\2536`=&\353\301\274\236\027\267<\t\310\202\275l\320\214\273\376,\021=\037\357\242<^\214\206<F\246\240\272\211\014\251=(\372N\273\271\253\026<W~\000=)\032i=\346\357\002\275\350P\337;\275q(=-\313\324\275\230\255\254\2743p9=\233\3109\274\353 \205\274\222sn\274g\017v\274:\212\331<q\370s\275\'\372\302;\276\211\244\275\3468D<\316\340\004=D\266\313<\251r\317\275\'\275E\275i\276\n\274.I4=\313yl=\221{E\275\314\343\323\272|\037{=\3122\335\274=E\037<\232\230\242\2757L\265=#\023\303\275y\371\t\275\344\207\021\275%?V\274=\367\262<\314;_=\3123\271\274|\201\304<\020Q\215:\371\252\212\2751,\036\2754~\261\275\017B\331:\010\260.\2724\323*\274jIm\274F\264\367\273\316\201\017\275l\327\277<\325V\001\275W\321\251<\245\345\226<\333\311A\274\306\331K\275\371\202J\274\221\351\322\274A\360\n<\210\036\023\275*\360\277=\274a?=\340W\022<+\023\026=\236\304\277<F\356\263<Yt\035\275\230UF\274\004h[<\346SC<\221\371~\275m\275\020\275Q\021\203=Gn\177\275{\372\242\2758HT<\223\264\032=\177\364R<J\221\t\275s\202\205\274r\303\237\274oF\362<\261B\327\275\355\210\305;o1w=B\324\317\274r\362\302\274\254\030N<tQ\371\274<\255g<\243\327\311<s\235\305\272y\017\337:/,\363<\273\232\276:\212E\245=\2313.\274!\235\277\274\300\021t\275|\374\211=\177\360\242<t\377L=\025\263\353\273\017\225p\275\245\212}=D\002\314=yY\221\275\212X\254\274%\177B\273\rMO\274\242\032c\273\217\230V\274<\0365=\200 \363\274\257\233\216\274\2048\364<\341\244\312<\030\330\226<\245e\216\274f\266\325\274\341*\234\275\366\267&<\227\347\\\274\322VV=\272\207\003\275\350X\221\274\356\333\r\275\333s\223<\003\374\250\275\345c-\2759IL\274/\371-\271g\203q<E\225\324\273vj\033= \035+\275\275\0217=A9\372\274Fn\325<a\000\004\275\277\217\315\274\3277\317\275Y\255W\275)\347\257\274e\346.\275\001\347:<\275e\024\275\200\365\273\275 \306\022=\332\216\n=\233\231\231\273$\035Q=\371\244\223\274P\207z=\223\224\202\271\330}n<\244A)<\"\235\316\275?\315k\275\237\330D=\217\317\306=\000N\353\274hI\357\275\202s\357<M\024\351<\235E\300\274\367\347\220=\311\006\307;\317j\337=\364K\374<\355N\375<T$J<X-\326<\362\005]<\267\005\317\274Ll0\2750\231\314\274\373\335\323=;\274\240=\347\306\340\275\315?\341\273\307O\330\273J\th\274\177\213\020\274\n\323\370\273\314\323=\275\360i\014\275 \367\367<L\361l<\331\312\302<%HY\274z\362\267=Vr\n\274\220G\376:\353\260\264\274\031\010\337\274O\227f=\337s\321\274,\2759\275P\263\261\272\022\220\006=\262\304\014=\331\r\342\275\240={=C\350\010=\\\230\007=MU\324=\316\342\006\275%-/=\030u\3369$\034\024;\254\376\334\275\260\232\010;\260\377G\275\024=\236\275$X\277<\'5\237;*\"\214\2733\313\327\274\320\020|=]!:=\373\226W\275\376\234*=\361@\013<\007\005P\274T\303T=D\000\274<Od\371\274\321\223\222<\\\202?\275tp \275\216f\324\274\234\206h<h\222O\274jZ\'\275\345B\200<\263\370\323;\207\276q\274\"7\351=^\274\370\274`\303\300<\274zl<\264\345\312=b)\216<`\367v<\021\233\243<wtN=O&\211\275u\251\017\275\t\000,\2752\365\033\274\211qs<1E#=\271L\"\275\000\350S<\310a\314< _\002\275\201r\322\273@\275j\275\356\352\271<\330\361\216=\373\r\221\273`\262y\274\343M\221\275\347\353!\275\321\342\331<\323\234j=v\241\316=\202\227\345;\242\341\205\2759\361\343<s@\001=4\314K\274\\\211/\274\0306\013=\363\346\023=\344\377I\274\3707\"<\263\'=\275V\336\233\275Pg\013\275\241`\244=zw\247=\023K\r=\277\215\201\2757\232E=\3754\365\275`\313\244=\312\241_<\220\265\301\275<\023q\275`\243\373;lu\230\274\337\350K\274\264\217y\274\023D\255\274\260EN=\221\352\341\274\317wS\274-e\267\2740\345M\275\302B\007;.\262\027\275\266?\026=\311*X\275\241\225\265\275\177\3578\275+b\274\274\t\305\201;\377Z\342\274\356E\222<r\254\320<\234]\272\275d^\350\275J\3302\275oS\034\275\316\324\263<\374\273-<\225 $\275\360\2121\275BR\032\275Z\215\213<\r\336&=\340\002\271\273\305`B=/;\270<\253\357\335<\266\213\217:\310\307\021<R]J<9\213`=\211\251\362\274%\252\315<G\356k\275;\322\323=}\265\255\275\024j\310<\222\203\321\274\340/\242\273\220\n\330<\366c\251\275\017\256\246<\201V\262=j\024\035\275\016t#\275j\234/\275\375V@=$_\277<k\016(\275=u\323\274(W\021\275G8\257\274*0X=^\247Z<\244%\305<y\257\000=\241x\250=\271\031m=1\314\251\274\365\322\221=4~x\275\325\261\204\275\335\252c<X\243\234<\340\347,\275\351\303\'\274i\260%;\255H\'=x&\373<\362#\"=e|1=\302\362\236\275\032\031\302<n\"\356<\307\242\315<A\326&=BQE\274h[\t\276\265\347r<\336\225\372\272\006_\021=\375\342\'\275\241\266\210\274/^0\275yk\221\2738\362\206=\3366r\274b\265\206\275rE1\274\035\351\017=c\365\227\275\311\310\311\273\261\235W=\265\205\006\275t\001\007<\251a\212\274`\376\300=S%O=g\321\223<\325\337\232<7\004\323<Y-\315\2745(\337\275\352@\347;\323\332\004\274\270D><\242U-\275\310\302\201\275E\022\031\275\021]\037<\020I\205\275M\236\213=\022\026`=\202\017\260<\327\275\346\274\036\276\':)Oa\274Y\374F\273\274\236\010\275\267.\377<\367\225.=\252\027p\275\263u\251=K6^;\211we\274.\260@\274\"\213\200\275\326\374\031=\204\366\201<\265\203 \275\266\300U\274hji\274\370m\n\274X\3515\275\350P\035\275\340\205\005\275\364\211\215=I\251\305=\334~\311\275\211i\225\274h\317\276\274?\202k\275\242?~<\332-r=ZCQ=\302\000\t5\256U\264\274[\017\365;\014\014a=]8\376\273\210\007u\275\034r=\275z\321\327\274\003D\007\275tw\245=\226\r9\275@\246|\273\343c_<{\242\013=\263\\\321<\003\304=\275\201K\020\274v\213x=\010\210\343\273E\037\375\2752Mu<g\200\341\273\355#\304\2750`c\275\247\276\216\274(\300\027\275\004,\271\274\032\371\200\274 \223\336<\302+\214\275\333\013\244\274\225\035c\275u\007\022;Qt%\275-BT=~\t\003\275\035=\003;,&I\275\250F\032\275,\315\322;\013\036\017<\r\026\231\274D%\021=\241R\020\2733*}<\220\"\360\274b\310\025\275\2456\364<\264\266\021\275\217aH=\320\371\326=\304\344\230\275\261\004.\274M-\243\274\262\032\332\274\343I\310;(\230\211;\373i\231\275\366L\225=\215)<<5\204\341<\361R\036\275\262o\365\273\031\253\245\275\222\035 =b\033\024\275\213\352\202=\357\201\211\274\371*\246:\323\321\202\275\023\216\234\275h\301#\275vI\241=\361\240\252;PsA\274F\004A\273\235\330\217=4\243\277<\347\240\251=(\355\274\274\200\272\017=t\204\006\276\277?\336\274\352H\333<\365\364\212<\271\230R<\021y\332\274B\006\t=\234\342\006\275\273\374\344<O\202\010=\320&\302\274\226;\267<ud\034=>\364\264\274\020\300F\275E\227\216=\277\006\341\273\305\212\270\274\371\354F\274z\016\205\275B\214\231\274\013\300\205=\177\335\213\27461\355<]\020\203\274\221\266\361;Hh\266;;\333\003>}\367\230\274\375,\252=\201\344\247=#\016\376<KI+\275\341`]\275\016!l<{T9\275\t7\001={_\224<\345@\205=u\307\006=\313\230\262</\021R\275\223\334R\275cR\233=X\263\367\275\036~\031\275\235@\230\274\340h\\<\'\215W=\277\337\207\275\325\2050\274\232E\354<\332n\";O$\265\273(RX<3\341\216=\257\340\336\274\213\254\226\274|\336\225<\266\202j\273\007H\265\274R\237\211=\376Z%\274\306\306\202\274\223\220B=0\327+\274\244\211\267=\022+\353\274\374\347C\275\235\210\036\274\266sL=;\272\373;\376i\214;\316\272}\275|D\231\274\304\224\226\275{\216\311<\221]U\275em/\274\331uU\274\314\217\204=\357C\230\275C\206\346<\240\375o\275E\277\275<A\272\337<+}\270<\256Yb\275@\231\357<\214{\373\273\003V;=\251K\261=]L\231\272oAo\275\304\240\343<\221T\251<\343\337&<\364f\244<\260\262\273\274\232\013<<\257zp\275\242\030\262\275\034L\034<\035lo\274\341F\215\274Z4d\274\374\253\001=g\335`\275\257\364\243\274\271\277r;\020N\301\275B\236S<\r\317\036=\266\356/\27574q;}\322*=\350\024\231\274\364\232r\274\322\2513\274\033@\233\275\370\351>:]r\204<\216\256B<\300U,\275C\0138=\242\246\031\275\017\353\242\274^\362\240=p\376P=\177(\317=\211\270\324<u{G=6\221\260\272\\Z\022<\204s{<^40\275\213\326\355<\340\007\242\274n\354\017<U\002\247\274\262f7<3x\\\275\333\006\276<B\217\250;\025\241h\274;\244\200=[8\232=+\3471<[-\301\274\232\006b\275 \241\200\274h\344\374<\203\321\020=\226\341\371\274i\373v\274\224f\216;(\220\004\275\214\325d\274v\327\206\2754\346\364<\331z\220<\242\353\036\275\230=\223\275M\357\275<\335\331$=\217\270\274<\\\360G=\312\241\007<a\200\347<|\310f;#H\246=\203p\226=\037\003}=n\013\340;\315+\263\2754M\302\275,\251\003<\224\3614=\264\355-\2743\320}\275\203\024\254\273\276\031\037\275\261\236\356\274\275\010l=/\201\241=Qk\273\273F\321\000\2754hk=B\345\034=\304\337L\275\246\374\332<\215\021\312\274\243\333\'\275\266\0217=R\376\017=\032U\350<\254e\006=\026/!=E\316\032<\311<\205=\020\221M\2758\316\250=\241\352S=l\203\250=\374q\004\274\301\325d=\241\352\377;\032\241\317<\344Eu<\331A\004\274\026\371\306<U\3143<?M\273\274\221\235$\275FC\204<D\355\3509\035n\222\274\223\242O\274\3715\200\274\370\311\256\2733\277\221:\346\032\006\274!\302^=\007xZ\274\013\235\232\274=\376\244=\372&\246\274!x\025=w\350\013<>\330B\272`\304\337<n@\372;z--\274\346\260\244\275\210\336\336\274\210\224j<H\263\205=\300\223\231\275\376\0249=$\342!=\210\201|\275\274*\334\274\312\024\354\273\300\323\310;\240(\221=>I\265\275,s>=\375!\033\275\353\342O\275X\230O\275#\222\207:\022\241\240\274\341\366\\<\210\261\216=\265I\221;\024\372\204=/zB=\376\305@\275\3775\203</\271\275\274\004NY\275\225.\035\275\202\341\203\275\370\0227<~\345\244=\n\\\374\273\325\266\332\271\202\0148\275\273-\t\275$\35449\233\'\013=\201\"\304\274\002\0241=\371\261\276<\240\240a\275\016\027\017\275\307|8\275\001y\257=\355_`=*\353\341=\0349\267=\274\310t=b\346\321<\207\243\255<nJ\347\274U9F<\237\006\035=\260\205\001\275\314\344q\275\343\255\240<\'\322\310;0\n\375<\001\372/<y\234z\275C.\262;u\201C;\025\353\256<\2709\016\275Z\243\257<\333\246B\275\3734x\275\215\250$=\303n\332\272\333\263:=\212\252\026=\333\334\334;\273m==\007\336\"\274\343\236\322\273\027\366\273\275\372\201\222<\276\304\200\275V\321x\272[X\025=\247E\275<\2478 \275\303\003\327<a\345\276\275\204\327\226<_\367\022\275m\336\252\273\322\301\275<\246\244f=\2477B9\201\361\213\272a4\213:Q\245\002:\207M\376\274\203m\264<\031\016\027\275\252\222\205\275h\324s\275\371\022\250\274\262\212\361\273\335\016E\274\256\n\206<\260\320!\275jN\006\275nc\274\274AB\004\274\301\014\022\275c\313#\274q\n\355=\341\320u=\253\034\354\274\004Rz\2757=\"=\352x\262\275m<\264=\025\002\210\275]\n\020=\216\\\241:[\202\272\275\253\321\203\274\314\262 =`\031L=~\334I\274\260\3525\275\273\270\254\274\010)\017=\276\304\022\275k\240\3349\330\375\255=\366\315\263<\205x\233;\231*\016=h\313w\273\36124\275\222\2224=\177\232\010=\266\363\320\272\244#\224=\250j\343<\274v\035=|=\004\275\177:\t\275\365\254s=\232\032\334<Q\232`<\024\254i=Z\271(=\370\200\260=\200g\036\275\311\220\344<\356\2374=q\212\357\274$\214\217\273\214xJ\273%w\211\274.\266\206;\364\313\t;\014\223\265=\335E\235<\004\210\367<7\026\334;\357G\362<Qo\216\275\023$\331=\\\201q\275\367\252g\273d\371\274\274\013U\010\273\202>\215<]\233C\274\033\340[<\004\241{\275N\366\027\275\014g\242<\266h><\363\013T=_kL\275\255\206\"<!\356Q=l\177N\274\364{&\275\233\272,=\270\'%\275;\356|=\376F\177\274\212%\274<\2221\202=S_u:\262\235V\271il\242;\010\255]=\030\265\212\274h\256\313\274\376\256I=\365\001\244\274\363Q\200=Ams\275\205\225H;+\215><\305\360\250\275\266Gi\275R\034L<\3338\240<\333\214\016\275r\253\252\275\367\263\232\273w\001I\274A\005\217<\276\024\363\274[\262\214=\367\274\022<\350\263B=\365NJ\275\227Z}\274\214\201M<\375Xj\275f\3630<\253\302\020=\313-\314=\236\017\007\276\234\361\036:\375\263\221:\316u\203=)\324k\275\024Q\034=#\3302=tC\"\275\236\232\t\275\\nj\274\221\322\032>\211\376\255\275\224\307H\274w1v=Z\226\310\275\320\300\265<\022\311|\275q\371\006<\261\\\036\275,#\326\274#\203\020\275H\373\310\274`\251,\275\265\3661\274\267\253\304\275Z\233\250\273g\005 =\005\221\217\274\315\300\271\274.\226\032<U\025\203=\007\337O\275A\343\005\275\020\022\262\272\220\221\227\274\010\005\270;\005\276\257<\344K\336<\343\301\235\272\203\306\366<\325\224\205\275\026\362x\274\003\320\372<Kl\232=RW\0039\020\210\017\275W\275\227\275\261\330\'=6\276Z<\260\035\216\274\003+\233\274\265m\256:N\311>\275M\3357=\200d\314\275B\224\223\275^3\273\274P6\201\275\032\007\267;\2577\\\275a\361\262<\357w\005=r\'\007:;\341\244=\301\322\025\273+,\351<Lc\245\274\310\373:=\235,\221;\355\016@\275M3\251<\334\006M\275\274\nf:\25204\275\027\204\235;\236a~<do\362<\352\'\267\275\330\261\245\275%u\211<&\177\016\273r\237\246=CBN\275\271\223-<\260\323\362\273\352\277L\275\002\310\312\274BS4\275a\224\350;n\016\316;\330\004\350\275q[\235=X\3442=\0320F<~>)\275\031\n\216\273~u\336\274\017\320\353\271\372\250H=\225\366S<2\261\034\273\365\252\203;r\331\351<L\001\277<i`\032\275D\204n<k[h\275\233\033\344\274y\320\037=\330\200\264\274\244H\206\273K\247\324\274\367l&\275z\373\346\274\021@\317<\222\017:=e\226\274<\221\036,=_\370\302\275\3057\303\273\207\003\375<\351\2215\275\306h\226<\274h\217<`&L\275\014\250\221=\237\202[=\2173A=\332\005\220=\007\366\277;`j.\275\205\270\313<\337\017\306\274\315xN\275\267\347?\275]\014\315\274\311\334\306<\"\241\240:\232&0\275V\016+\275\337\377\231=9\325y=\017;\030\274\210\240r\275\236@\214\273\351\351k=/\220<=m\037\322\272\230\221\372<\370\330u\274\350\301Y\275[Q\217\275\351\336;=\2243\\\274\321;>\275\243\212\276:\355\2635=3{%=<\331\017\275\025\\\300=\310p\371<\342\206\022\275\211{\377<\022\226\310;\244\367\301\275\320\234\312\275\'K\245\274*\034\340\273q8\227=N\236\377\274\023\307o<\341\247U=\033\000$=\333\374_=\221\307\024=\016t\332;\212\222\307=\207\205S\274\260Q\003\274\356\305\222\275T\r\203=\353\013\212\275\252F|\274%+\241<\246 \216\275\352\022\005\271q=<\275\336\231<\274\223-\210<G\365\010\274\217\031\366<\325W\365\274L y\275\317)\323\273\367\372\227;r\357\212\274\264j?<\222\371\214\275\257r\326\271\372\235\227<{\302\241<\270A\206\274\327\226\234=i\327\241=^\026\351<\256\177f=\244\n\"\274\220\203Y\275<\336\364\272\375\213V=,\006B<\333>\r\275\263\345^\275\256h\233\275T\223\031\275\335\305J=\362c\031=\223\254\355\274\346\003$\275\220\024\304\274{\212\233=\273\250\241=8\354\201<\020\334\020\273\tx\254\273\314\317\320<\300\026+\275\226\r<<#\312\312<7%\200\274\243{\032=)\245\320\274q\374\027=?\037\235\274i\224\207<\260\2352=\341\352\255<\333\3561\275\306\177\361\274\322O\205<\005\365,</\226\367<i\020\177< \367P=\263\247\356\273&\341\345\274\2133Q\275\310~\335\275\340V\005\275\332\245\006\274\343 \376\274\373@\315\273\205\364\207=\374\265\355\274\3556\367\274\336\177\254\273O\232\004>y\0308\275\023 \314\274-\265\027=S\206\226\274#NV=o\222\025\275\253|o\274\022\360\231\272\361)?\275\320\315\225<z\314^\273\245\332\034\274ub+;6J\343<w\373\222\274\017\032J=\030\016\254;\307sg\275\341\315\300\274\251I\225\273\021\005\242\2741r\241\274\314\317+<\272\200\257\275\211\262\212=\345l^=\034\343\r\275[Ks=P\354\243=\263\261\004\275i\366\t=\272\367\254<a\340E\275\252\252\214\275YZ\255<\372\213\030;\t\262\274\272\031\024w\275\002\020\2738^\243\024<:\256%=\246\240\376;\251\242\010\275\363_\374\274\241\361\226=(|\313=/\'\374\273\017\356\207\274\332[\335<\247\031\244<\260\032\250=P\237\270<\r\016\334<gSl<%\320\204<m\006\021=\315\037f=\276\360|\274a\316\215<\225\242\272\275\374\301\320=\325~J\275\201`\303<S\345\254<g(c=\037\276\304=\263\337[;\r\367\364<\232\343\205=\317\235\267\275\016\n\207=G\233R\274\321\227\r\275\277\261\025\274\002G\310<T\230\202=\360\233\205<\3456\013\275&\000\361:9\004\003=aIs<|4\260<\336\270\321=\361\247L=m\343\037\274\363\372\340\274E%\325;\374\220\221\274\361\265\265<\3544k=\224l/\273\226\236`\274\363\267\275\275\017\277\303<\220\2140=\257\347\331\274S\274A=T[X\275f\241N=\027\303\241=\226T\315<S\234M=vE\035<+\340\363\274\211\300t\274K\312e:\202\246*=\375dP<\006%\\=\361\352\376\274\307\031\213\274\0141A\274\340]\354\274P\353\342\274>\026\206\275\24604=w\236{\273M4`\274\312\006\006\274\217\305)=>\243U\275\033\220X=\324\030\026=\016\200\216=i\261w=TU\262\273\343(\357\275\021\262\016=\223\242\000\27533\243=\201)\210\274\321\372\003=\265L\367\274f+\371\274\016\220\227\275\366\371\271\275\353v\037\275QU\217\274\341H\231\274\341\013\t\275\263\027\325<\225\301\351<r\027}\275\366)b\274R\352\305\275\023\276\267<K\017M=\304TR\274!\334\347<\305\233\214\274m\257\253\274\264\305\017=0d\016\274w~\303\274aL\245=\334F\257\274 z\020=Y\343\251<l\356b\274\332Y\201\274F\nK=\271\342\320;5Fv\275\017\004s<z\330\034\275=\361\317<\276\274\"\275AI\311\273k\205\202\275\214y><K\000r\274\323j\t\275\223\207\226=\213\217?\2756I\367\274\204\316D;\2627r=\302xn<\010q\355=\203\010\210<$\"\027=(d[\275M\034\022=b\364L;\254jQ<\022]\240=?\257z\275y\025\271<\272\311\007=\314\025\245\275\0366\272=\177\310)\275\347b\031=\321\345\315<sK\001=L\321\314\275\356J^;\025\332\237\275}\223k\272U;\222\275\035\226F\274\324\356[=\375M\r\274\371\032\223;\313i\224\27429P<\301\301\017\274\303\262\'\275\331j\203\275\034\360i<>\324\342<~\311=\275\007\235\235<l\302\002=\016P\227<\366>G\275\322i\300\274\345\201\270;\367=\256\275%b\266;\221q\354<\364?\030=\272\026\2169\013\366z=\374\247N\275\025&\242\273B\320R=\223\213o\275jWQ;\027|\217:N\207\216;xi\264<\215\236\310\275;\245\213=\252D\273\275\250\017\336\2740\270(\275Z\331*\274\342\222x=\256\tF\274P\257\331\274}-\262\2744o\010\275\3430\000=\226~\241<\013\350\001=\372\022\263\273\243\375q=\010yY<\325 I;\234\310\225\275\032?\217=\375\034\205\275\245/N=\301Q0=\247Wj\274\332F\004\275\262\220k=&v\223\2743\201\353\274\016<\302<\266\340\201<\210-\001=\301\220\352=\n\377S<\303e\332\274\371\"\211\274\003\013^<^y\325\274Wa\226=-\270)\275t\306\016\275\347\356\3169\301\246*\275\377b\302\275\341\256\355=\021\251\342\273\005\214H<\251\004\364:\314\345\251<\376\325y=\2451\211\275\236B\247<~\334\212=2V\316\274{\327H<\350\256G=\023\351\206=Q.6=\252\335$=\'\215W=\013\332\244=\3706\231\274v\332\202=\333I\262\274\255\236\330;^\263\017\274\226\320\204<\023\365\255\275H\343\213\274\005\261)\275\265+f\274\240\217\207<\303\353,=\301\275\021=\031\216\212\274\370{f\275/\010\212=\262Kk\274>\373f=|\365\240<\223\276y=\',=\275Qv\325\274\021\342\272\275C\367\307<#\350\021\275\320\373-=\370\031\343;~\346\005=\330\016\377=\256\235\334\271\3565\227\274\216]\014=\342\321:\275w\217\270\274\227\222\214\275w\027}=\334\200I\274\310R\346<{<\217\274\347,\343<\341\206\350\273q\314\034\273Q\314\202\274\026\r\024\275=1]=\224\025\252\2746he\275\374\374\347<\202\001\315\274\247\022k\274\006\344\035\274\323\345o\274\202\351<\2752\2709\275\274\372\336\275\353Kz<\354~\302\273\262\n\204=x\031r\274\230\260\343<\000+0=\252$\324\274\255\020\201<\303j\223<x\337\203;\336\005\260;\336K7\275\206\204\'<\214\220U<e\0138\273?\2229\275v\215\245<\335\371\032=tG\345\273\230\351\221\275\301w\275;\241#\031\275I\210\032\275`\263\r\274\233\212\220<<\010\273\275\346\t$=\202\267\354\274\306(\242\275\310\312\"\275\275\204z\275\322\030\005\275T\355l<\215\356\272\275\260n\"\2755T\237\275V7\317<\330U\025\275P\223\t\274\031|\231<\200\267O;\315_w\275*\361\021=\004\206\240;}(f\275\331I\025\2746*-=\265S\313<\314\203\252\273z}\373;\321\314!\275\013\\\010=\232(P\275\354$\212\275R\326\r\272\323\376\356<\274)\250\275\031u\274<\333\036T\275\216i<\275\260\211\'=\306J\231<a<R\275\267\217\261\274/\321\302=\220\206\346<\236f\327<\344b\020=#\335y\275\362\004\224\274\321b\346\274\371\211\215\2753\0270\275I\210\020=\324I\250\274\024\340\025;\210L\t<;\307\320\274\266\325\202\275\177\271\356<\256_\273:\235\3002=\036q\'\275\362\260\350;\203]\023\271\3048\207=\224#\362\274\203\035;<\261\302\036\274\245\315\355\274\223\212v\2748\007\271\275\232\323\250\274n\0213<\355\314i\275\212q\307\274\373\267\300\274h\275^<\010\017\374<!\365\025=\345\216\027\275\026}\364<\214\340\224\275\013\344\344<\227W\003=6\326l\275\257\310\"\275\265\n\222\275\217\257N<\016\221\020=q\306\032>\\i`\274\275\0304<6\354H=j\262+\275\357\337\220\273|\342b\274\2264\371\273`>\r\275s\010\271\274*\t\236\275Q~.\275\223z\202<\247+\033=g\321\212\275\261\254\200\275\213~`=\352x\225=\004\271\024\274\016\361\007\276\3107\036\275\314dm=\314\003\326\274,^\344\274DK\002=\320\313D<\013\255k\273\303\033~=\352\243/\2748B\326\275\004zm\273\352u\007;\200\205N=x\327{\275\2747\';R\203\244:\315Mm=\346\220\246\272#uY\275\237?&=bt\347\274\007B|=\022^\\=\316\226\034=\256\312n=\351\236\021\275\036\203L;\022\345\356\273\217\265\306;@\246.=\2711b\274\246\215\031\275SeJ=\254(\254<\240-\252\275$\003\371;\276\353\310\274\002\236n\273,\010\220:M\317\253<r%l7\317\020\302=#q\022\276c\222\362:T\251\014\275\233;W:\315\226\006\275\223\226\321<\3722\034=o\234\221\273\202\3644\275\266\303\252;\360\313\254\275\020\320\232;|/\032\274^\326\023=\n4\212\274\317\331\221;\232\317Y\274\372\340C\275[~\305\274=\026\221\275\310\'\013=(\373*=\345(\266:\236\341\231\275\264cn=\020\256\002\275E.*\275\370\262\t\275u \304\274p\003K=\223\335\"\275M\313\026\275\324\225=<N\r\365\274\321e\034=t\365\032\275\236\307\204\274[E\r<R\277*\274\205\362o\275\240\315)<2\025;\275\311h5\275\001u\321\274[F\031<\230\372\240=\314\371\222\274\236\231\325\275w\352\364\273?\231\003\275b\017|\274\327\223\263\274Q\336<\275\036\327\225\273\005\272\016=\373\010\006=\332\240Z\275\303\224><\225\013E=\026\351`<\265\337i\273$\024\203\275\257\005\316\274\317\207c:\356\252\223\275@N\333<f]\227<\237T0\275\r!C=U/\315\274\357>%\271\t\350\345\273Mc\004<\035d>\275\201i?\275\202\322\204=\226\304\200=7\243*\274\261P\366<\023\325)=\264\2117\2743$G\274\242\320\016=me\033=Z\330v:\007\207\240<\005\226\207=\016-n=\3260\230\275P\340\213\275\214\004\377\274f\272\352<\014\323\3749gc@\273\362\253\342\274\204\244\032=?\315\347\274\355~\212=$\323\274\273\321\231t<\212r\203\2751,<<\323e\210\275\307\345\255\275|dg\274\026`\236<_\366\341\274x\350\323;\227\253\377<-\005\n\275*\300\211=\264Z\315=y\216\211\274g+\235=\356N\210\274,\210l\274!4\317\272>\005/\275\266}_:\030l\200\275m\302*=s\000\022\274j\247F=JS\222\274\214\227\375<\342s\030=\031<\274<\376\355\240\273\316\354\213=\347=\367<p\245\010=*\224Q=\350\216\032\275\276z\235\274\220\304\357:A\333\032\275\301n\016\275\r{\320=/8\234<\216E\035=\263\3059\275\251\233v<\371\177~\275\263\317\275\274*!8=P\335\352<W\377\031=\365$\210=\373\245\317;A\213x\275f!a=w)\017\275\024rq\274-\345`\275H*|\274\243>\344=\202\207\224\2742&\250\275\037\314\320\275K\321;\275^$\253\274Y#T\275\267\032K<\302\233\347=\331\375\325<SI\221;A\014\264\275\334\034V:N\330]=V\306^=\272\371m<\014\365\320;\024\315x\275[\230\345<\267\271*<(\242#=\323\034?=\273\033)\274EX\252\275o@\016<7m-=\214k\301\274\005\212\206<c,\374;\223|w=W\312A\274\330\345\\=N\273/<+3\337=\342cN=\340\275\244=x\211\307\275\215\032\016\275\027E\312;t:u\274\337\002\202\274\256\033\202=\334\376\007\275\252>\220<]\203\223\275v\301O:\265f\263\275\374K\234\275\3422\205\275\274\325v\274\351\200\312=\356\251P=\251u\220\275\240\360!=:Z\025\275\330K\234<\252 \364\274w\000\223=\361\273\\=~@a=\024\236\001\274\2261\255\274\342L\017=\277b\220<\303\314X\275M\316\000=!e\242\275\334\246\202\274\356\373~\275\227\344\340\273gk%\275n\242\032\275W\340\300<\307\2219\273\232\360\220<\262gu<<t\274\273f\317\001=-\270\377\273Rj\241\273\230J`\275P\251)\275Q\262\277\274\361\306\007\274\242+\233<\213\210\005=hI\343<\357\301\323\274\273`\245\2746Kw=\201\364z\275Q\2034<\243\266\233\272\264\254h\275\267\314H=\241\252\021\273\026\344\002<qP\263\274 \262\023;\022\004\330=]\367&;\036\237\324\275\345\254\034=\366q5\275\254\203\246\273z}\301\273\264\217\017=P \205\274$7\253;\267\275=\274\217\202\023\275\342E\211=\331\003\311\274\331\265\266<\220\206i\275Z\232\233\274\372T\210:K\257\013=/\202\227=\017\333B\275W|\014=(\3463\275\375\267\037<\3353G\2730\366S<\223\031\336<\321d\206\274\'\335K=\373\013\027=\230\337y\274\362\354\033\274h\314\256\273\327\226\215\274Q\320\362<\2017K\275\324\264\236=}\242C=\322\344\016<-\357\246\275\273\270\303\274\2544]\275\\\255p=iX9\275\316\237\277\274+s+<$\2018=G\000l\274j\257\331\274\270\361\256;4\270\315\274\342\243\325\273\'#\203\275\210\2549\2750\262\007=\301H\205<\323\320\350\274\356)\243<\010J,=y8\"=\355\371H=\233\342\027=!\327i\275\321\237\344<\3104\t=\254\'\020=KMl\2757{\026\274=J\310\275\007\210\200=\376\027:\275\234E\346\274\377,,;\014&\377\274\026\275\203\275\244~\242\274\005\270\355\274\247\023\226\275\377\214\'<\357}\236=(\332\t\275\030\334\321<:r\215=\1775\202;\306\024\345\273\010`\313\274W\375\021\275c[9\275\376\271R;\016n\033\275\024\007\322\272_\271\232\274\270\316D=\317\006\017\273MJ\225\274ID\215<\313\377\251\2753\225\234\275n\316\031\275\351\223-\275q\252\203=\334\277\304\274E$\252\275\000Q\231\274\037\274V<\021\000\221=\221)\212\273\317\216@=\357\352 =\372$\177<\243\341\216\2741\361\251\273\214pp\275\220\217\214\275\344\260\245=\330[\213<~\2202\275qI\210<\222B\273<\337\270w\275\217(v:\255wL<:\000\021=\217\242\026<\032\354\340\274V\204 =\261\026\220;\301\264\034\275\353\020\301=\315<\007\2760+H\275:\347\033\275\030\345\334\275s9\275\274[\006\207<\365`=\275\033\327i\275\235>\226=\207\351X=v\225\260<\274\345\236=I\373V\275}+q<$D\r\275j]\204=~\206\340<\335<\025\275O\213y\273\342\240\201\275\300\264\354\274\303\203\274\274\336\225\025\273\375\223\224=XaM\274\244*^\274\213\322\212=;\226S=EW\207\274\035\212\325\274]\267\036=\370\377\000=t\230\272=T@D\274\037\023\271:\003r\203\275Z\262\215<\n\024\262={\310\242<\304\334V=z\357\323<\222\275\356<\202\234\010=q\375s=\006\340_=\223\213\337;[\212\220=\030\203\332\273(\205I=\3061\222=K\300V\275\223\252b<i\247;\275\311\247y\274\243\221\206\275\337\310;;\336\303\340\274o=e:\314\233\r<^\216\213=\331\304\223<\225(\253\274\340\030\317:\3629(\275\372\367\311<\362Jv:\270zT=\255\351)\275\367\330T\275\306n\177\274CU\253<\257\261f:\2329\236:\351R\r\275\003<\317\2746\n\261=~\024~;\246\205\242<w\201\210\273\010%\201=\211\310><\364W\260\274\013\314\204;\240\030\014\275z\375\301\2757\032\377<q\322 \276Q\226\253<\005r\361\272\361\177\302;\312\023\307=P\242\365<\305n0\275\261\034\205<K\271\367;s\357\221\274\236i\026\275\010\225\244<\252\005\344\274\230\227\360<\277\001\204<\006\355\030\274\004\207N<\226\243\314\273C\346\246\274.f\270<\010\207\237=v\257\n\275\000\014\016<`t\017\273Zc\265\275\223}\312\274\266Q\240<\177\332\223=3c\031=\331\264G<\370\341T=\017ek<\"\250\270\273\256\257\373\274\233o\262<\003\037\320\274z\352\376\274h\343\'\275\t\016O=\266\311\020=\363\344X\275kF\033=Nbn=\r\2272\275\265\0312\275\013\n\237<\310:\323<d\225\374<\243\322X<\025\251\221<\305\276\002<\352\254\310\274\224\371\303\274\2432\220\274#}\200=(\3171\275(td\275#\255\220\275\274$\265\274\353\215\213\275t\371\021<\303\320\216\274)\344L=e1\020\275\034G\323=#\265I<\330\256u\275\214\034\251<\221\033\356\272\347\346^\275\263G\360\274}\327\202\274\213&=\275fX6;D\030X\275otZ\274\005\251\331\274K~\036\275T\2466\274\255\216\235\275\014b%=8\356l<\030\010o<\235\211c=\006\257\n=b@\330\275\222j<=\366\031\221;\343\034\330<M\327D\274\3204\332;\277)\246=\306\'\247=\347\014\233<\376\037\246<`\230\202\273W\031\206\274\205\203\030=\037$F=\23362\275d\035t=.\244\354\274w\2063\273)\022\260\274\250\230\305\274o\2006=\207\366J=\370\025\370<\240\234\326<\244^\361\274\255\004k\274\213\375\362\273f\252I\275;\200J\274\274\2215=Q\245\315\274c}P\275\231\357/\274#\347|<l\232n\274\335\225#=\223[\353\274\2162\375;[,><\237\004j=J\372\354<oL\354<\243\222U=23a<\234\301b\274\217\021T<\232\373[\275\235\256#\275}/\205=\361\243\257<\315Et\275\330\267\006<;\240s\275-\022x\275\257c\314<\335\033&\275\272\235\t\275\340S\021\275+\267\211=\245-\031=f`\022\275\371\352g\273G\212<\275;\006\350<\210\247\260=\0200e\275\200\327\234=\344[\313=\304Q\204\275\210\344\327\274\177\321\334=\350\020\323\274\"\007\254<\201\342\002=P\204\277<i\243\013\275\321\315\023\274\221\010u=:\355\371\273_xm<z\373\020\274\035\221\332\275QF\252\275\216\001\037\274\237\016\375\272\000@\347<\311)\205\2752\224\335<G\214r\273\364C\025\275\342Y\000\273?+\232<\3403\315\274\006\2200=h\010M\275\363\225\225\2727)\220\273~\215v=p\313p\274\372\375\230<@\363u=M\016\376\274\035E\241<(s%;\024o\005<Ai\252\275c\003\013;\271(\326:\036~\331\273\004;\213</\206\236\274Qx\320\274\240\034\377\275\004\222\307\274JnH\275\031\261\310\273:\n\307<\372\204\372;\2305\204\275\201\333t\275zJG=\332[\035<E \306\274\346\234\277\273X\210\231;\346N\323\274\2255\002=\205z_\274\200\256\276<\273`\211=\000\247\206\275\222C\235\275\341P3\275\243$3\273\333\376\255<\273\331\\:\2467\210\273\253\204\201\275q\024\255\273\230\241\207;\374\325\251;\361\270\214<\243\324\261=\232R\214<\263E\022=:\254\201<\350\320c=\347\226j=m#\252\275\300n\230<\004\277\231\274X\202\000\275]\250\334\275\337\206\014\2757:3=\254\022W;\353g$=;E\023=xN\200<\316\357I= \313L\274~\007\332<K\\\261<\304\363)\275\306\261\272\274\341z>=kY+\272+\267.<?\212\017=\377\003\327<(\360\005\275\265\006\217=\001\240\277=\223\026\243\275\356\231\225=\261\357\233:u\302\202\275Si\261=\324G\221\273@\024\234\275\003\221\257\274\210\017a:Ym\227:\220A\211=i\372\260<\020\007\257=\246\r%=\"\304\023=&\347I\275\252;_=K\260\002\274\243L\202<\242\370\203<\363#G\275\337\320[\274e\016O=\364\001\363<\016]`=s\2615=\037\016\337\2731g\276<\331\010(=\313\000\032\275\361\204h\275&\306Z\274o\365\307<\327\270\324\274O\343\223=L~\304\273\312g\343\274\261\236r<\230\313\245\274\035X\331\274\020\340\014\275\371?5=2\246\211\274\033w\233=\n\036\357<\377\213\264;{3\034\275(\313\232<\354\236[\274V\201\377\274\344\214\344<\030\302\024\275\306\376V\275$C\213<\236\361\213\274c\2542\275,\246\006<e\311\312<\037nY\275YXq=\243\353\225\274E\333G=\340Y\325<\003\260j\275\215-\212\275\245\343!=\177\023\220<F\304\335\2744d\226\272\230aq=\254b\356;\374\365\177=\345\261\202\274\311@f=\024\211.\275\236J\007\2761\354Q=0\232\032=\377\200>\275\343 t\275\3237\010\275T\371\r\275\"\262@\274:;\255=\357;\365<\321\230\227\274f7\351\274!\205\203\2750\204\222\274\026\220\000=&\246i=kz\020<\033\325&=\013\356\001\276\206\\\220\274@;\337=\243dc\275T,\035\2759\312\241=\215\022h<\225\013d;\214\244\202<\366,8=}\203\202<\r%d=\220\361\234\273\352\305b\275\020\326!=\223{d;\350\014F<\373\376\236\274Q\232n=K=\032<\306\014\245<\201 (<\237n^=%\025V\274\231u\203\272,<\003=T>U=\264v\237\275\037~}=7\2320=U\245\035\275\0326\306\274j\363\026<\032\010\337\273:\023\004< \276\255<uf\211\275A\312\377\273\013&\347\274)\236z<a\300t=\336\032\257\275S\3749;\260K\306\274NYS=\235\032\023=u3V=E\301\251\275\257\221Y\275C\206r=\373X\246<e9\345<\003\254G=\206jL\275\350{\004=\304,\030<\031^\212<q\334\342\273\264\215\206=\'\257\217:`\234\300=gj\017\273t\372\221\274\301\315?=j\232\371\274_\363\202\274v\261\211\274\256\321@\275\351&\213\275\332$\235;\234\311b=\275\000\243\274Q\354\014\275\302&\312\274\326T\007\275F\262\311<\026\271\312\274#\246t\275\004*\304<s\030\233\275\365\\\236\273\202e\342<\344\255\376\273\270 \r=\321gd\275\372\365\362\274\247\264n=\374\306\010\275\203\303\177\275\355\212\374;\014\344@\274\035)\363\274`77\274\301\364b<(\010)=\200\022\242<]\343\267\273]\201\252;\3612\357\274zF\205\275\211\212\n\275d\206\320=\210j\200<\343,\224\275\005\367\375\274\317is\273\027y\231=\\\307\336\271\346}\203\273\023F\373\274\254,\022\274M\344\264\274a\030\246\274\000\336\327<\364\230U\274t\256A\275\323\'R=\2622\372\273F\026Z\275\321V\257\274\005G\261=\245\362\251\274\311qW<,\246\024\275\255\026\332\274\260\270\035<\362\334\007>L\317\364\2701\346a\274\316\324\263<_\351Z<\362N\217\275\352\315\037\275\231\211L=\374\232\242\274g~\255<6y\225\274\020\360\237\274=\237h\273\007\242t=\264\273/=\235\301E\274\341\017\202\275*\236\001<\223\013\303\274re\027\274#*`\275\370zp\274K8\n=\024\374\024\275w\312\212\275\272\326\030:ge\255<<\302\205;q/\357<\346D8;\301h/=/\251\263\275mIE\275\337\333,;\264\014\277=\361\322\\<2\231\267\273C\0017\275\300\343$\274\013\346\021<\2224t=\200L\221\275~\200Y\275c\023X=\224\203\373\273\030\013\347=\207(\021=\214\033\256<\020*:\274@&t=\235\243\213\274\312C\320<\031\355\243=\214\'\362\274\002\246\362<0\237\322<a\236\205\274?\223\204\275\n\3272=\013E\007\274\360\023-\275\204\231\2119\350d\204\273A\302\344\274}\204h\2744f\304\270\210S\260=\016v\177\274*W\212\275WS\217\275N\177C;\007\002\030\275X@i\273\323[X\274\360q\305\271Gx]\275\031\330E\274(\3003\273\234z2=\346\246\233<\333\220*\271\220\260S\273\365\032\036\274z\336;\275E\246\017=W\251\n<\331\033$=\014\221\216<\214\026\372\274,e)\2758-\327;\361\013\350=D\225K\275\370\253\3519\312\364\372\270\257\303\247:\344\0107\275\337\201&\274\036z\016\274\301\206\002=I\232\243=\207\217\322<g5w<\352!\222\275\346<?\274F\355\320<`4t\274\n\\\215=\2575\301\274\232\242\274<\322]\201\275\243QR\274\366\333\241<z\345\256\273Q@g;F\314\230\275\370\376u\275\024\326\017\275\364\311\272=Xj\376<\271&-\275\222M\207=\3735[=m\214\031\2753\376\252;1iG<\223\014\243=\350\177\306\275\333\350%\274\025)_\275\373\034\3649%X\254\274\332K\324\274\347\032S<\347\324\201<j05=\266\343L<\005\347\371=\242M\323=\365\336/=qJ7=\216\211$\274\340\232;\275\371\306\360\274BB \275\0224e\275i\240m=v\346\032=\354\2663\275Y\367g=)\010Z<\006\242\227<rF\340\274\030\210\234\275B\007\262:\321!k=k\031\230=(\025\200\275\004\216\365<;\375\333\273\362\213p;P\033%\275#\232\265\274A\242\t=\272\335\274<{\320\376\274m\277\302\274-\377\242=a\203\300\274\027\307\007=-m6\274\324\236\236\275o@(=\344U\314<\342\244*=P\034g\275:\2609=\017\234\026>]5\004=\257\024\340\274\025\215\021=\210\242\013<\004\366{<*5\326<o\246\231<\016\310\332\2748\013/=\215;\227\275}\177m\275]\3164=`\233U=\224X\027=\257\367\267;\004\271(\275\212\200*\275%\223&;\226qQ=4\244\274\275\rq\003\275\026dz;(\231\300<\022\016\272<\020\254\230\275\213\357\010=3c\232\273\004-\245\275\\s\215\274\361VJ<\035\276\365<\"\216\231\274~\333\301=\230L\202\275TC\347\274\207\014\022=\204\260^\275\247\001\027\275\336\221\325\2746\227f=\204Z`=g\004\034=G\t\227=*b\257<\347\302\220<\210\323\377<0\266\374<-\332\314\274\232\265\300=-U\340<tK\026\275\031\243\224\275\326[\251\273\3259\202\275\342\206r\275\020Q\025=\337\234*\274P\017\336<#\3613\273\202T\337\273\313\322\001\274\0240-<\260\236\266=Bk\232\275\347\334\030=\3410\032=\n.\265\274~ej\274#\022G=-\257\274\275\310a\254\275\321\033\003\276\376\274U=\207\374\373;\246\255\n\274~\303\275<\r\351g:T\325\260<\003:b\275>&\024<P/n=~l\253<\232\236t=j\005\236=L\240\236<\274\354F\275\210m\230\273jtD\275B\243\337\274&\353&\275\304W\200\273y\271\000\275o\205\256<%\024\023=0\177q\274\354\237\037=\034\\\303\274\330\331\316<\007\030\217\274\377\324\200=,\301\022=-\265\212<\370e\243\273G\354\253=\337\344\034;\364\372\242<=/\215;h(&=N\231\200\275]\030\326;\334)n\275:\205M=&\225Y\2759B\227=\233\350\t=4\372\205\273y{\200=\033\370\031;sc\235=\354?\303<\333\327\272\275\376\n\000\274l\2739<\210\223\035=7\240&\275\223:\203\273\355\345\221\273<P-\274\240\234[\275\346N\026\274\206\356?=\332E\004=7\305\343\274y\306\241<+\224m=c\377\323\273l\302\247=\212|\276;R)D=\230\031K=S-\237\274\363\242\263\274\200\022P\274\032>\272\273(\214\000\275i&:=\261\365\272\275V\302\263\274\3566b=2\203\366:S\010W=\032-g\273Q\263Q\273wm\233;Y\350\222<:\241\027\274\005E\332=S\346\013=\276\\\313\274D\001{=\356N\361<\032b\354\274*\007\014=\311Y\246\275\031fB\275C\227\031\275\355\000\256\274u\265\245\275\004\'\203\275\337n.=\306T\030\275\324\216\253<t\336t\275\034\226\253\2748[\204\273]M\003=p#\353\274\237\247\220\275\271\016\226:\300Y\220\275@\304\317=\005\n\017=Y#\374\2734F\030\275T\177\242\274\370\t\002\275Rs\320<\254d\351=\214ik<\365\224\237\275x\346*:K*\225<\010 )\274m\202\251<\016}S\275\014\235:\274\247\322#=\004*\231\275E\230\370<[nS=\344\252\020\275\276Oj<\276\346\301<m\202&\275\252\211\\\274g\2236\275\325\351\021\274\227Bp\273\241\247\247<\312\322\364<b\227p=f\326\273\275pCU=\016S.\274\377\034\343;_\315#=T\314\222=\340\362\252\275V\247?\274\002\304S\275\341G\306<\207\216\310<}.\036\275\344\002\342<O\025^\273C\302\013>}\252\254\274Y\263D\275\276\014z\274\030\t\030\275\300\256\224=\355\376\352\274\312\212\272;\262\345\306<\273\233\034\275\271\244/\274\331m#=\214o\032=\313\023\264\274\240\005\314=\240\342\350\273m@\240;\341F\321\2749\024J\272]\2172=H\356\344\274\034g\247\274\013\204\234;fo\n\275\274\202\367<\207\247\021\275\255j\200;\235q\202<\213\273\221<\036\256^<\356\300]\274\261\250\267\273\026\205B=\032\235\253\275\260C\224=n\256\021=GX\306<\203\305\347\273\371:\310<\005\307+;\343\020\277;\004\001\312\274]\353%\2750\215\023\274\030(x\275;\3651\275g?\221=\004\000\257;\032\365\252\273{4\230\274\025\t\217\274\017\372\376<\314v\333<\226p6=\316\273\t=\037\270\264\274G\371\327\274j\024\230=*\3309\275\365\212i\275\361\315_\274\213\365\251\275[\226\340<\207\255)\275v\237\002\275o>\034=`\313u\275\014\0313=\277\371\242<9M\237=j\236K=\3443\207=\225\017\363\274<y\322<m87=\220xH\275\341\272\236<\311\301$\275\356\234E\275\037\267\327\274\035\341\013<\260eA\275G\215Y<<\036q=z#G=\252\217h;\224\305\203:\026\3738\275\343\232\n;\327(\241=\031\200\346<\273\324\376\274\2059\225\274\304\373\024=\326 \230<\267\373\005\272\316o\020\275p\000;=ztG\274\035 \004\275\004\335\r=\010\254\367\273\024\021\276\273a~\n<\213:\327\275\206X\200=,\023\344<e\365\200=AM=\275\302\010\230<9\025\260<A\222b:\235\300\021=`b\227<T9\014\2753\325\224\275.\265\005=\317O\264=\335t\227\274\003ox<\253\356\362;\373\\>\275\2550;=uA|\275\346T\204\275\244\220^92\316\311;\016\300\243\273s\367\232\2758\344.==ZI=!\332\376<\326*\244<\315:\202\275^\230\032\275\375\374\003\275\361\025\000\275f\265\325\274\n8\020<\003_&<!\3709<b\245\277\275s%\n\275m&\244=\305\345p\2754\257\362\274\201N2\275Ye\360<\202\020]\275\201\376\242\275\356\321,=~\304\276\274\274.)=?\224A=b\2617\275\207%\203<\211mf<r\272\244\274-\366\257\275D\177_=\320\371\375<\371\305C\275\262\t<\275\260\226\005=\340\234\034\274\356xQ\275\370$\316\274tH\253\274\242\362\273\275\222\343\264=-\352\004\276\210z\206\275\303\350l;\354h\213=\335\365\034=\244\372g\275^E\277=uc\234;\361\256o\2745\320\000=\355[\215\274X@\335\274\231\375v;t\027\326\2746@\365=K\020\323=\236g\256<t;\227\275\374Wk=\303\270<=P\267\'\275\t\372_=\370\217\240;\373\373\010\275\021\315\315\274\2225X=o!\025=\013\355\005\274\267\271\265\272\223O(\275\037S\017\275\014vE<l\024\274<w\374\263=\n\355\372\274wEp=<\177\t<!\340\225<\305\367-\275\036K\033\275\307\003\020<$\250\200<e\364\275<0\035\206:p\244|\275\303s2\275\253\304q<\317\265O=\220\234\016\275\266\341`=}\242\034\274P\375`\273\256\326;=\251Z2\275\004\007a<\0061\341\273\332\3130<\300q\364=\026V\r\275\356\263\272\273\206\337~\272L\335\220\275,\365\376<IrY=H\346A\274\373\363\213<,\276\243\275\323\022Z\275f\256 =?w\220\275:\313K=\216\001\313=\t):\275\302H\211\275\352\037\335\274*\312\236\274W\334\266<\002Uj<^\365\216\273/\220k\274\236\361\007\274\321^\377\274J\220\024\274\263&%\275jhv=:2\256\275(@\350<\206\365\031\274/\013\210<\271\032\325<\"\245g=\262CM<oG\361\274\251F\243<\3355*\274DP\207=\212\033}<\335\013\253\274(Q2\275\377\244\"<\233\006\257=\006\250}=\035\001\000\275I\207\010\274\345?\304\274_\372\270\2758\276\206=\335\312)\2749\231C\2740k\231=\325/\262;9>\304\275-\027#\272.b\377<\252H\233;\350l\206<)\240\211\275\211\326\337;\331\244\227<\270}\241;\330\343\375;\365\032/=0\027r\275\254\253^\275\2414r\275\177IW<\221\031\310\273\274\3562\275\010\252\231\273\362z\201\275\271\271\334<\253\0241<)i\270\274\267\343]\274\362\037\201=i\244\022\275H\007\246\274\235\231K\275\277\'<<\217\201\343:\305t0=c\274h\275y<\024=\017\2254<\361\002\023\275\214\2731\275\243\363\265\274\306\307\342\272r\260\205<\256\275N\275\244\213\034\275\371Q\272<1u\255\273,\375 <1\267\033=\262\200B\275oWo=\260C\214\275p\267l\274\271\254\346\272\243t\342\275\267\202Q\272\202\243\267\272\234\353\007=\010\344\217\275G\304\177=\333\023\314\274\364\3139<\357\030\310<7\366\231\274\235\031K<8\004\207=\205\237\375<5\211\226\274\003c3\274`\033!\274\007\375\272\275;\202\220;\213\"\333=\276\343\244\274?\325\324\273wU\032\274\326hX\273@ \007\276\335\0054\275u$\343\273\\\211\231=^\344x\275\265\362B\275F\355>\275\222\005\316\274\201Kt9\227o\207=\336\263!=\312\226\364<\253_\035\275\337\261,\275Y\006r\275\325\2608<T\305,=\303^Q<\014\305\260;\rG\033\274O\201\216=\301;\020<\027\346\353<=\375\306\274\261:I=\345\024\\<z\245x=\030\212@=@\370\001\273r\355\321:\r\312\254<\216)\026\274\004~~=:Cx\275x\300+=\236\274D=\331O\305=\021\237\251=\337k\024<\355\362\036=\275\021\207<\256\210\203=9\255\302<S\2575=\276\366\216<\344/g\275\364\177\247=\024k_=\343A7\274\223\272\037\275\367\336\346<@3\223<6\300\237\274\217*\"=\266\254\r<\036 f=1\227\023\274\325c\204=L\037\373\274\300\037\204=\373v\016=\252\234}\272\351\"|=\371-\364\273(\316X\272f\307\031\275\376\325\254\275T\303\225=P\034\322\274#W\013=\273\324k\275 \366D\275\306B-<\257\350\035\274\032gU=.\223\205<xd\243=/\200\251=$\315\201<\016\306\220<\026\016\352</\252S\275~\224\016=\227\217n=\243\200\t=\330g\3449\340\233\332<\261\206\264\273\317\326\001\275\236=K<\333\346v=\260Y!\275\220\030\214\274\315\331\235<yf\214\275\361\234\031\275q\233\361\274|k\200=\237\330n=\001\221><\357Mm<J\234\265\274\351\254\177\275?\230$\275Xv\345;H-\345<\203\372\350<\222I\276=\330\252\007=\310\007 \275\007\370\031\275c\254\207\275\341,\214<`\024\300<0p\207\275o\232\240\274\021\265Y\275\360n\205\275{\262:\275\357\271\206=\275\251\\=4\230)<*o\210<\244N\241=\277\017\217\274\014\035\301=+Gs\274(uF\275x\351\271\275\031N\341\2753\262\003=`\336\223\274\327N\263\274\206B\213\275-\371\354<\017\366\023\273r\213\301\274\373\263/<\355\236\271\273\"e\356<\370\212\212<o\375\324\274\303\177)\275\343\345\\<\253\313\201\275\254\210\223\275\363\265\352:#\335\206<P\303\215\274BW\347\273\016i}=\353\302\231<O\250\243\275? \240\275\324\377\226\273_s\013=t\244\257:\223\252\324=\244\263\005=\312\360\355\274h\\\314\275S\037\t<\231\363X\274\242\201,\275C.\311\274\300\014\320<\010\355\206\274q@z\275\240\307\351\274T<\247;\017\247\030\274\331t\025=\243\311R<\302\310\305\274\031\371\250\275\202\250<;\346\334n\272\362\362\362=g\032\216<\224D4\275\277\037\033=\365\t\360\274\023+\026\275\216s\267\273.S\253\274\361\211M\275D\347\233\275\315\375\246\275\0027\215=\026.\313\274\333\273\226\273{]\266<\272\016\205\275\266\033\245\275Y\027-=I\025Y=\204\322l\274r>O\275\254\254v=\2527\332\274\215\307\036=\256f\244\273Z&}\273\262\033D\275\227u\006\275x\026\000\275\247\253\270\274f\317l<\244\352\314=zL\277<\352\237K\275\224\347C\275\240\2733\275\270\275\261= \273\036;\365\314\262\274\264mO\274\204}\301;\350\244\036=(F\274\273!\202\177\274P&\262\274\370\235\037=\327]6\275h\030\232\274\362\312\365:2\251o<\307c8\275\307\035,<S\210\327\273\000@X\273\271\354\233\275\233\211,<NyT<\025\236\016\275\226\r\205\272w\306\255\274\rS\303;\344\224\216\274\212\253\376<\353A\317\273\217\371}=x\007\245\274\261?*<\254\215\365\274r;\"\274\r,!=\r\267\373\274\0274 <\0231g=c\001K\275\037\274n=\212\234\241\273\231\372\320\273\315\202\375;\244\002\266\275\005\327\342<{#%\275~\241?\275#2t\2730\302\023\275\232\364+<\263\314%\275C7\221<\371C\204=\2142&</\366\213\275s\237^=\302\3150\273\016\'\337\275u4\306\274\\\tk\275\362\203\024\275i\031\210\274\276\376P<\302^$<\270\322S\275\346\224I<X\302v\275K\255\212\275\002\351\207=\240\313X\274n\213\214<\244R\036=\007\2240\275:\315f\275\215t7=k=\220;8=\302\272\260\214\007;\030c\r\275\030F\357\272&3<\275\302\354\005\274\305\357(\274\344\371\276<\260\311Q\275\240l\341;\014\355\003\273\376 _\275\244\000\336<\334>\017=\"S\215\275\260\tN\274\240&j\274\022A\205\275\032\016\037=-\244\374\275\262\253%\273p\204\331;^M\030\274\217\354\222;E\251n=\263\245}=\016\370s<\022y\214:=\020\200=%^\035\275\247\037\226\275u\357\203=\267\330g<\234\234\255\274\325\345\004\275\036\241\017\275\024\022\017\273\002E}=\230$\342\274h\201\344\275\024v\337\275\257\371\205<\257\004\256<j/g<\353i~\275\351R\262\274\033\n\202=\214\334n=\370\325\344\274W\024\273\2704\210\230\275\261\343\271=Q`\024<\362\034\"=\021bN=[c\034\274\236\0166\275ob\313<\213V\000<a4\366=\341\247\022<\353/\254\275e\t\253\275\030\2704;\346\264\320\274\334N\307\275CMM\273J\211h=/Z\254=\240\004\216\275\3040n<f\265\016\274Zq\226<\014}i=\314\214\243;\2669\317\275\254L\200=\341\200\374\275\020/A\274\361\274\256=\267\204\247<\221\346\353\272p\210\214=\364\2407\275\3110\024=\375c&\275GN\204=B\310\006=\351\034\356\274!\262,\274~\250W\275\262\234\313\274s]\367<.\325i<l\360\032=\255\234\364<\323\031\314\274\237\303\343:\t7A=\266\002\014\275\200\005\"\275\276*\305\274\177\030\325<\020\203\371\271\t\241\037=b_\360<}\030W=\343\262\372<\346\tW<\241\013\311\274\\\341\220<\325\241v=^\343H\274\374yb\275\002\3508<`\020\266<;\0326;\237\3427=s\222@\275\333cI<\023\336\350<\256 \263\275(\304!\275\rGn=\312;M\275\354\006\273<\351y%=\224\033\3429vI\007<\356;\213\275\336\222\013=\327\366\347\273I\031\302<\226`\004=\344y\265\274!\276V\275\004\353z\275\344N\300\274LT\310<XtR=A\355L=*\257\253<2\025[\2733i\326\274\224\302\307<<\3339\274\205\255\211\275*>/=\245 T\274z\"\336\273\360\350\004=\tL\207=\323}\027\273=\256\027=\264V\232\274p\364\206\274r\'g=g\217v\275\271_\271<\273\357u9\017\343\216\274\201\036,\275\366\364\202\275\230\321\246\275\031\353-\2752\302`\274\250\276\233=\276K\214\275b\260H;10\345<\303\347T=m\277\245\274\345\324Q<\311\377\363<\265\364Q=T/p<e]F\275[\305\203;w\351\277\272\232\244\362\274\311\226\272<;D\330;2%\256=aCW\275O\237\305\274f\014<=\331\333\355<\255\377\265\274aks\275\3672\367<\322\335/\275@\302l<\037<R\274\0300>\275h\316>:\230\217E\275\t\222\205\274\223i\323\274qsv<mgP;\3254\022=X\275\030=\314JU\274\252\354V<D\246\304\273\034\244o<\261\016h\274\270\337\344<\032K\306<.\355I=\265\363i\275;1\263\272m\013\310:\376\255@=\204u\202=^\261A\275u\361\007\275\347\317\\=\246_\3619\224*\226=-\375\017\275I\3170\275p{\t\275\217\252\276\275\350\263\243\274\274T-=o\3124\274\274G\363<D9\264\274=\314Y\275\235\260\224<\335\307\032\2753\200\345<\230\"!={Z#\274w\302~\275\362GU\274\337\311 \274S\014\260\274P;\270<w\217\034=,\302v\275I\340\016\275d\200\035<\303f9=Md\203\275\315+$\275\005\177\323=\244\210f\274e\313\232<\317\2172<\244q\325;\2745\246\275\367R\263;4\305\002=\224!Q96bu\275t\240\265\273+\272\344;P\316\272\274\374\275\301;\331<\340\274\334U]=\030\006\304\275\370\203\003=c3<\275^\211\230\275\223s\255=62\273<]n\231=K\274(;\0059\000\274\254`\273=*U\013\273\337\335s=2\315 =\215\n\205\275o\225%\275\266kF=\010-\277=\313f\221\275\216k\022=\346\271\331\274ky\215\275\351\016\307=zl\220\272j&Q=\356\244\301\272L\370@\275\206\205\300=]qB=b5\022\274\352\224\024;i\021?<\331`|\275,\242\031\273?\374f<\357Gl\2757\003\006\275,&\367\274\227\356\304<y\215G\275\276:\2339\364\232]\275\374t\231;\013\243\004=`\276\367\274\027:J=<\"\205\274\332\333\033\275\304\257\271:\330\223L=8\034\305\272\0260\007=\304|\004\274}C\201\275\271E=\275A\234\024=\301\201D\275\301\370\002\275\027\330D\275\"\226P={\230=<\200\247\331<(\376\275\275Y\242\323\273\356,2\275D2\321\273\033\033\210\275\023\220\321<\344;\344\274\302\213d\275W$\033=\r\3442\274\317\261\322\274\277n\252\274iiJ<\016f\023=\305\356E<\371\333\353\275\212\006N=[\214\216<\241&\332\274\273H\225\275\261\002A\275\373\313y=~Z\005=O\210\323\275\272f;<\203A\361<\027\367\222<J.\375<\307\t\200\275\016e\200=\2508u=v\022f<\337m =\247\320\010\275\333\372\215<\016\032 \275\360\331\001<\257\360S\275\237\370\252=J\013\003=\354\r\211\275\023n\214\275\331\306\033=7\206a\275B\223#=;(\313<\027\034f=\'-\302\273p%\003=\033\252\025\273S\346\312\274\226\235\207<\247kp\275\322I\224<\231\270\236=tj\301\274\225\246\233\272WcO\275\341\356\306<\'\274o=\036]e=odr=\236?D\275[\010\'=\355UI\274\347L\270;\177\351\022\275\305t\024\275\336\014\036\275\366\313g\273\t,n=\301r\204\274\354\2123=\215\253\216\275i\371\017\271;}4=0w\030\275\332?\207\275\373W\262\275\326\303\017\275\241q\210<\224DL<.*\363<{L)=\231(\257;u\237\014\275Mc\325=g1\227<\340d\231\274(\206\"=\340\321\317<\316a\020:\323V\237=\350\265\206\275\250\317\261;\022\007\352<\033$\233=\232\245\023\2740\027b\275\010\022\243\274\251\323\362\274\272\022F\274\342\004j\274\324\314H=\177\332\000\275\315O\210<A\323\014<\037ye;\363\257\022<\206\347\203<\346\024\212\275\244r\216=?\035#<\205fR\275\227/\016;A\225r\272\r\233\230<\202\007\032\273ee:<&\'\325;\025\255\222<-o\220<U\247\253\274\320#`\272i\037u\2741\330\213\275h\270\323\272}\3522\275L\016-\275u\210\243\274L\355_<=\355c\2740\361\227\2740\000\372\274J\266\210<bb\017=NW/=\351\234\364\274\010Rc=\005T\007\275\270\314\002\274\036\211\213\275\315\322(<\341\023\212=\356J\246\275\214\211\027\275\317\244 <\263\200\272\274\244\263\376\273\215\003\212\274X\223\216\275\257\362\254\2754\336(\274re\346<\363\214\353:\353\356\224;\3107\321\273\rP\016=?\347]\274\375\033\351\274\224\256v\274p\233\342<^\372\316\273N\335\212\275}\024\315\274k\310\230=\003\354\337;2G\262=\335\2172\275\271\332\031<\307\213\031\275\362k\211\275\370\036\337=b\235\035\275S\253!=\212\274\212;Sw_\2758\277\212=.z\267;\227~\264<$4\212\274\232)\341;Iv\207\275\365\202\341\274\304\r[\274\211\370==\232\233(\275x\272K=\006\340[=@fo=\351r\327\274\265ul=\240\222\254;\033\"\036<\201\313\222=\331\232\240<\270\370\257\274\334\006\022=\2166\246;:\217a\270m\323\350<r)\303\274\0162b\274\021\324_=\323\017x\275\206\204\310<\277\226\222\275\365\035\240\273{\"@\275r\002\207\273\303\n\357<\301\267\362<\275\231D\2710{-=F\230\265;&\266_<\2637)\274\271\251\255=\020ts=y\360\207\275\303,\212<\262d\024\275\222\0372<6\367\312\275\222\232\272\272\023\333P=\261dy<\330\363R<3|W:I\351@\274\251\244k;\325\031[<Q\221\007>\333i\360\272?:\217=\023,*=M\361\214\275\231\251\257<{\274\275<)\270\367\274Fb]=\213\270\232<\231\314W\272\257Ij\275\035C\324\274\205*\017=\026 \307<\005\265\"<R\327s=\262%C=$\362\240=R\351\373\273\333=&\274\014\337\220\275\232~\344\274hn\261<\351\240\270<\251\344a=,mf<\2610\274\274\254\335+\273\340/\361<\323\341\223<\212\370\276;\230P\330<\242\320$\2758e\225\274P\370E=yw9=\323\356\200\273\357\367\241=%9\223\275\374\262h<3-\237\274g%x;\022\364\335\273\306\302\327<\262\0038\2742\236\233\274k\247\215<\342\304\251\275\323\247\304\272\217\236\232=\003\252\264\273\236\3170\275D\003\351\274\270\343V<\026\243\273\274\3564\351\274E\210\356\275-\217X\274\020Q\267=J@@=\272K\257=\000;8=\253\262Z<\032\371\267<\350\315\n\274`\262\310\273\271\243K<\230\024\254<oz%\275<\264\202\275\227\r(\275\002\343F\275\216\310\240<\016\304n\275O\223\026\275\200\n\272\275\345\372?=Cw\032=\004hr\272\304\233\253<R]Z=V\376\233<\'\374\236;\215\304\222=i\014\313<\206\264\353\274\201~\031;7$Z\274\326\257\206<:#(=\321y\221<\241$\234\275>~\207\272\2664\256\274\317C\256=\304\222\245\275\241\350\t=\033\027\204<5c\332\273U2\202<\255n?\275]\354T\275P\017\312\274\270\2704\275\273\307s\274G]\350<\337\032\357<\311\347\204\275\313c-=\203\225^\275Q$N<\272e\246<\322\236\250\274\304-\026=\354\205\357<;\361\226<q\304\213\275\310\214\207\275\322\272\312=\356\221\314\274\306\216\270\275Y\210\226\275\274\356\315<X$\0319\363\307\036\275\250\337\233=\023\363\001=\310\335\001\2746\263\311\275\211\021\200\275\321,z=6\235\214\275\203\032]<\273k\":\265\'\333\274\243{\032=\351m\326\274\202\n\033\274Q\177n=\310bF\275\356\311m\270cB<=\231ll=n\271\256\274M\027L<\362\240\205\27417\341<\306C\035=F\020\234\274\037\013\242\275j\343(\274\230[\272\275\304h\024=\372\210\322\274\320#E<\321RL=\331\211\305\275\261(\t\275eJ\244\274\224\324\224\275\2113\362=(\021\220\275\276\253\355\272D\253\031\2755\266 =pL\355;Z\3351\274\360\243p\275\304\3572<\301{\270\275>\270\244;\210\332\213=\323\034{\275\350\235\306\274*[\216<c\273!\275\251o\224<\310\315\303\274#\036\270\274+Y\002=ns\262\274\203g#=g\311}\275y\335(\275\215!\034\275H\256\362\274\030\'\006\275\204\326\027\275\334\316@=\257C\014<\212G/=Y\215\177=\204\271\225\275\t\024\330=j`\007\274\254,\233\275\205\000\017\275\230Zt\274\025>\254\274hO\027\275v\035\212=\333\022\214=`\\\027;2\017s\275\327$:\275}!\220\274y\\\301\273\\\276\206=\273\360\020\274;\321~<:\213\222=\032\374\2169\201\370\340;\303\201\360;3\274\224=O\270i=\244L\251;E\274\016<\260\030\371\2734\323\263<Z@\347:\263\331h\274V:#<\310I\357<\266\220s=\373]\t\2750N%\275-$\232\274\267w\034\274\305w\203\274\211O\262<``\273\275\231\251?\273\360\341\255<gL(\275\025p{=\226\016\350;\005\010i=\033\262(\275\007u\262\272&\330\351\274\371\255d\274\325|V\274O\202\027\275A\330Z<\307\266N=j\355\016\275xH\325<[4\205<\261\0065=\000!\004=L\302\262\275s\215K\2742<\217=\305\265\377<\212X\355\274\376*\231\275\010Z\217=\342\313Y\275\321\220c\274mh\203\274\\p\311=\312&w\275/x\010=\245\245\000=\037\232\273<\2100(=\372\344\332;\312\342l\275vb\224\274~\2337\274\017\332g;\243\307w\274\276\007i\274l\311\330\274 yt=\035\037\205\275\355\t\353<LD\033<\254\252\337<\260\331;=\003`s\275\355\r\206\274j\3572\274\'\301\217=f\016\203\274B1\306\272\272\317\262;\236A\027</\t\240\274\247\210\035=>\252\\=\376<\014\276Y\246\217;\240~\022=\271P\000=\253\250\202=\023I\"<\333*\231\273\214P/=Z\\*=I\252M=h\300F=&\221\375\273;d!=\325\003.=\227\301\204\2751\031h<\315XF\273\364l\277\274\376-H=\226\223\253=\332\227\035;\212\306\214<\267[<\275r:\261=\036\232\213<\341?\017=t\212<\275\030_\300<\353FF\272\351=;=+Q\306\274\337\3116= \004\020=Q_#=U\027\223<\361\342\345=e\254\213<\311\t\257\275\375\007Y\273u\2206={m\027=\231f\235\274\302\010\237=\256\221\356;\216r\'\274>\r\321<\323\2624\275|\006\276\275S7\201=\200\017u\274G\306n=J\300\314\275I\200\353=\330P\021\274\333qm\275\022\324\"={\263M\275\255\272X=B\241\244<`\254\221\275\347(\267<UR\032\275*T%\275\313\276\205\275\303s\033<F\211f\275\244\0223<S\277v\2752L\243\274\204\336z\273\217\3721<]\3019\275\336\031g\275\214D\233<\200l\216=\363\250\303=\2741\322=\375Y/=\246\211\004=\212\214\001;CM\234=l\000\225=\230E\333<\360\005\003\274Z\017\230\274\241\307\255\272+\363\025=\017\023\311<J\033P<\000\214+\275\222\255\014<<\353\036=3\204?;\020\200p<\014\030\024\275\375O1\275\345\245\374\274\276o7\275\024+\301;O\r};\222\256\020=}@\361<\256\260\276\275Z\303\213\274\270\274\227=\331@L=q\246\201<DGp=D\355\344<\344\246X;Z\334y\275\023\346\311<\374\202\017\275\310\235\221<\336\367\212\275\023\024S=\271\226$;\223\261\254;[\220\004\275k\303\234<H\021\225\273\370\020\315=\024\362L\275\211\347\206<Z@\310\274\200/\304\274\303n\204\275\032(6\273\364\345\010<\271\376T=!\025\202<\356\274\224\275\324X\206\275\222i\354=\314z\031\274\014\005\310\272H\311\275<\275\3468=\362\332$<\224\210\205\275\006\204}\272\0107\005\275q\202\225\275w\354V\274\270\370\244<e\242\177\275\023\202;=\035\331\243\271/H?=\376\256\210\273@\275%=\227\2401\275\033~\360;\245\315&\275\260\316\202\275 \277\300;SE9;\313jh=\346\243G=\023\212\210\274\230\250\002\275\341&W<\233\202\271:Cv\214=\337L\241<\356\344\375\272&\371\216<\n_\303<3d\342<Hx\024<\202}}\274D:?\275\022\311\222<1\354}=\002\370\224;\325\373f=x\321&\273n6%=$\"\004\276\337\233\276\274\311\352S<\204\"\232\274\341\3576=\350\310\207\273\245\237G\273K1\212;\013\324?\275CHf<K\017\241<\033j\024=V\357\354=\305\327\202<\302\273\367;\335\\\001\274|\241\240<\247ZG<\322]@\275\260v\004;\354!!\275\342\313\201\271\274\235=\274\263\235\206\274N\204+\275\006\004+\273\276\'/\275xGa=g\305I\274\211e\250;\216\017k\275\253\314\340<\277W\r\274\"\036\014=\226\376\t=z\t\274=\361=\004\276_\2529\275\305\273\260;$\337\264=ti\363<[\370\321<\253\211-\275\276\363 ;\313Bm\274\0171\317;\213\304B\2742d\020=\344b\245\275\231h\034\273c\004\227=\262\007a\274\013z\247\274\206\027\t\275\264\235y=\270AO\275\344\332\203\274\003\372\215\274\360\264\222\2735\020.\274\376\325\003<\312\210\315<\370\344\035\274ckn<\374\346\023\275\311\325\222\274\001\265w\275\346\256\325\274*`&=\213,\316<d\236\221\275\275 \n=\023\270\177<~\221\216\275\007\213\366\274\004\320*=\231\331\263\275m\341!\274O\021-\274\377z\r\275\377V\226\274\335v\006\2750Zs\272\020\353u\275\257-s=\203\265\324;PW\210\275\303\006\272\273\'\343#<\377\305\001\275\356\022\211\274\000\357\203<\342_\260=\035g\177<\243\320\243\275\177\327\005\275#c+=\\\\W=Th\343<\320N\300\2744A\210=\265\211\253\275\240\340\n\275\263\244\226:?C\360<Y\325A<9\253}\273\375+n<\"\021\245=\333\344\206=&_\215\275\273\250\211\274j\375\302;\225\325\226\274\320i\\\273\216-\221\275\375*\231\274\344\342\250=\037t\202=\035\265i=\300\"\246\271#\t\231\273h\357\202;J\024\343;\244w.\275\000h\355<hj2\275\372{\271\274\033\232\'=\212\340\237\274W2{=\333\t\235\274\326\240O=\353Y\310\275}\316K= \357\313\275c\372\000\275VS\036=;\321G<\303\221i<\331\354\313=E\207\271<\230#?\275\005\242\014\275\257<\027=\313j\t=@F\"\275\353\013\246\275\305\370L<\230\014a=\355\257\021=\000\240\377<\372\365\227\274m\226\021\275\200bb\275e\307\351\273\242\301\214<\026\272\254\274\272\242M\274\257k\211\275\340/\266\275G\344\242\273\352\231\271\274]\237\307\274\314\225D=&;\275\275\247\231\323<c\205v\273\024\336\276\274\300\313\321\274\213q\334\273\003\2757\275\311\036&=-\306m<\0019\322\273lM\360;\000\350\230\275\014\376\"\274\247\214\020=i\035\013=d\327\003\274\037\021\036\275\307\353\003\273-\"\031\275y\314[\275\265\317\233\274D\213\251\275\321\347\324\274\000\253k<\3046\375\274\306\256.\275\350\177!\275\\\005\273;\302\202k<v\311w=\025R\364\275k-4=\344\"\250<3-\244=\323\013\r<\302\375\216\274\360[%=\271-\036=\371\033\032<\024\201\252<\321U\201\275t2\213=\2608W\274\'Q\237=\n5\255<\306\344\225<{\377\016=\315\237\021\275\0218L\274\0058\224\274\267\036\225\274\365x\221\275\364\"A\274\3232F\274\273\030\353\274\2717\265\274T\374\247<\337\252\223;or\037\274\367M\326\273\236\260^\275\246\001\223<\254t\r\275c\216B\275=\316\036<\325YA\274\245\2511\275I\204\251<qz\225=\261\251\266\275\004\372R\274\260\000\005=!\354\217\272\273\231\000<\316{\n\275uc2\275\307\2033\2750]\234<f\346\315<I\372\252=\332\351s=\360\253\002\275\017\006\214=\343-\007=\026?\247\273.\371\213=\030\036\014\275\3755\007=\234*\016\273\323\001\334;\204\003\314\274A\262\001\275\205\202u\275\327\017z=\325\253;=\331\226\277\274M\334\343<jj\342;\305i\014\275\277T\255\275\226\202\274=8?\000=Z\342\240\275\232.\214\275[\314\206\275e`2\275\n\242\372=#mN\275BC`=o\271\247<\030\205r:\215\312x=\2468);]1E=f\341k=\200\332q<:Y\240\273V\311\t=u\004\214\274\327`\263=\336\302\262<\271\260\343<\222\367w;\225^\225\274M\376}=\300j\2379\3078\362\274\2330\327\273O\314\200;Z,j<.\316\262\274i\2546=^\271\014=\273\355\306<z!\371\273\010*u<\213\242@<\240\004\242<\264R\016=e2\336=\020.V\275S<G<\271\035V=\033\353\024<&\000<\275\026\326C<\214p5<x\002\247\274\020\025\336\274=\303\256\274\3413\335\273\1777\367<\316\030\356\274\'\374\277=_@\002\275C\341:\275\206\261g\274K\005D\275;\033\252<A\260\300<h\370{=\272\245\177\275\363~\020=\244\202\371<6\240i\275\343u\301;\302;\251=R=\273\274\251\323\262\273F\350\022=9\022v:\337K*\272[8\204\275io\353\274\241s\355\274\232\230\237=\243\302\014\274\376\271\027\274\000\035\007=\'H\252\275p(\242\274\347\333\225:\004_,=\326\352Q\275ma\262<k\346\013=\251\364\205\274\036\364o=\373E5\274]\234\024=\204\342l\2759\347\301;E\003\"\275\215\252B=\237\365\237\2752\323\025\274\301M\214\275y1\025\275\365\364\016\275q\356\376\273\221ac\274\004e\032=\007\177n;!\261A\275\017\211l\273&\013\266;4\230\225=\373`H={\241\377\273!\235\213<*\317\202\274\304\350\362;\351\213\210\274\347}==sa\232=\335\014r=\274-\227=b\275\242\274\2302\030\275\323\030K;\322\252\234<\373EI;\004mH=s\017O\275\246}\206=C\323Y\274\240\270\330<\206wL\275\252\231\021=Mu&<\353\332@\274~(%\275\027\005\332\274mC\010\275\306\201\260=r3\235=!k\224\273HWI<\3304\373\274\250\200\263<\'\201\030=\240\002\302\274\320\341\306<\336\323\224<\034\352\316\274\375\256\234<0#\270\2734\230G=\320\271\267\273,k\353\274\325\345N=K2{\274wA\263;\004\177\361\275>\302\224\274\252C\367;2?\216=\340K\202\275\337#\335\273\315\266u\275m\303\024=\216n\216\275\352)\231=\370$\033=\256\036\'=\272\'l<\3018\223=\255\341\377\274\316w\000\275F\203\250\2758z;=\362\2603=\363\203i\274\201\260\010\2749\370[=pM\327<\363\313\003\275\323q\002\275\226\356\233\275\024\367N\275\202\254\314\273\222\001\005=+#\253=>\354\362\274\027\236\252=\241&A=\263G\204=-\211\311\274<\317E\274\353p\257<ME\343\2753\313E\2746\260E\275\345\352\215<\000\177\224\275\340\361\356<\\\365\340\2749\345\230\275\220\314\342<\205S\267<\227\037t=g_\264\274ZF\352<?r#=\271\311\213\274\037g\226=\033\321b=\345\355\336<\024Z\227<\035\262\356<\262\n\231\274\357\222q\275zb\215\275\234k\263=x\370\371<\231k\301;\275\270\336;\206\302\326:\0208\340\274\344\252\337<\212\240%\274J\242\005\274_w\323\274\242\276\266\273\222\213f<\215R\224\275\027[\314=\327\346{\275\033\244\322\274\251j\'<[\240\027<\252\005\002=\206j\026\273\363\371E\274\215\366R<z\254y\273\211\364\323\274\277\316%\275\220\255\331<\276z\255\274\233%\344<\013\213\260<J[[\274\"\315\000\275\027\326\037\274\014[\307\274`\353d=(\037\216\275i\335\212=\324\236\026=\226\305\244=\301\205~<\252\235\000\275n7\212==T\325\275Gh\010\275f,|\275\320\342\030=\242S\263:*k\370<#\327S=\221K\360;\317V\201\275\020\237\237;\001o\232<\272\335\031=7\362|=\272\t\007=@\221P=\344\340L\274\272\276\220=\367\\.\274\204d\306=|\274\241=m]P=k\314\002\275\272\264K<12!\275\367\t\314\274\270u>\274(\366\316<\352XP;\232\200\330\274u\331\242<n#\340\275\276\352\035=\365\206\355\273\257F\237\274p\327\275;7\302\021=T\345\257\273 3\220\275d\376\250\272\322q$\274\033%\024=\373\267\244<\313]\211<\325<n\274p\343\375\271\257\266\336\274a\226\306\274z\204\301<\016>#=\000!\264<\177\005\036<Z}*<p\350?\275I4\260\274\0240\010\2758\255\021\274\327\026U=\002|k\272jj\240\275\261\324\261\270\374^\n\275\212\273\372\274\367\344-\274\013\370\246<jD\025=\361\220J\275\234\310t=5\024\213;\307\274\332<NTK\275\n\23269r\020 \275yw\325\275\356Y\233\274\3049\215\275\226I\201\275b\310\t;w6\340\274\0135R\275\263Tz\275\0333\000=\227^{=]D|=\276\325\230\272\016\227\226\275\274T$<\332\0076\274\031P\360:\333}@\273\334=?=\210\201\215\274\311\233G\275\375\301i=\316\253\311=\275\320;\274\350W\005<\226z\271;\200\020I\274\3053\234\2753\203\371\274\345\255~\274\236q>\275\314\013\342<\203\0314\275\371\004\324\274K\017\221\274\272\352G=\331\215\232\275&E\316=\230\323\234=V4\233\275\030\364D<\216>\013=\247{\205\275T\023\222\274\361\310\212=he\263<Dh-\275\211Z\r=\227\323\037=\241\'K\275R\204N\275\247\343\032<\300\322\016>\220\332B\273M\203\321\273\330\007\226=\371\231\005=\265\302\\=kFs\275\345\227&=\243\2457=&\267\004\275\212\221T=00\204\274\314M\350\275>\010\270=(3G=4J\210\274u\301\265\275\262\305z<\257\277\230<\327@\223\274\227\254Y\275,bN=\301\247\035\274\257\245\000=K\017\021<\274\322\243\2755\322]=\330\036\035\2748?J\275J\363d\274$\245\325<k\207\362<\363`1\275\353 \t\275\311\002I=\261\013\223=d\031\260<;v\242<e\202)\275Y\352\211\273k\217?\274[!\001\275w\261\214\274\370l3\274\234\306(=\335\022 \275\221A\254\275v\364P=m\352\222\275\0242\021=\372\336`:\370\212\024\275\316x\275\274\367\330s=>\026\322\275Z\275\n=!\324\276\273\2529R=B2\322\2750\342\246=\236=\205<\212\325\367\274k\347\221\274\342sW\274\344o\233=V\221\306:Wjy=\237\376\307;\265\211\220<.\035G<+\177o\275o\3709=\212cB\275\010\023\227;?\246\260<\226\347f=\346v\177=\205e*<,(\027;b\336\354<\2749\010=\'\211\316:\277\350\215\274$\364X\274^F\236;\305\354\255<h03=\315\265Q\275XN\210\274\315\262\275;\321y\256\273\201\001\337=\\\315/\274\r\274\315\275r\343\252:T\207\313<\027\324\312;\261#\307<&\206\331\273\357\334\t\275\244\265$\274\237\347\355<L\'\204<\235\246\275\274p\177\316\274\373\t\r\275C\302[\275r/I\275\336A\231\275\234>#\274\276\207l=\004\215\005=\217\305\332\274\230\340\007=\2728\025\275l\337+\275m(\211=\260\370*9\026*\326;X\300\222\275\274@\333\271\233xq\274C\350\253; \217v=\221\3650<1C?=\304\'P=\025\035\341=\233\327\262\274\345w,=\332\207{\275\205nC\275X\'\223\275\262,)=*\005d<\237s\030\275\022\256j\275\247\321\263<\265\315\376<. \213\275\222\0362\275\022K\027=\333\273\207=\001O\203=\246\254S=\251i\016=\316y<=\367*r\275\033\245\267=\343)\004\275I\322\251;,\310\375:{\226\227<W\032\243\275\301\221\202<\336\266\311<\205\327f=\000\334\314=\"\216\342<\336\212\307\274\025\244j\275\0241\006=*\254\333;F/@\274\006N\005\275x7Z<ba9\274\300/\225;\322\357@\275\254\000\226\275w\376\357\274n\031\311<\333\270\202\272\311\354y=a\t\314::[\215\274M\024a=+\007v\275\205\324E=\017\321\003=\252\323\200<b\226\314\274c_\224\274r\312\214:\026\312\203\274\347\\\272:\232\310J=\350#\361<\267\203u\275U\213\311\275&MU<\246\255\241\275\335\322%\274]m?=#\3179<.\237-\275\361t\253=\341\357\3029pW\350\274\332iH<o\332&<\351\307\244\275<YF<\026\345\326\274\247\322\265=\223\221C<\333\223\001=\200V\264<\325\205\273<k\351\207=\331\221\336;\336\254\361\272\361\301\365<<\030\320\274\211\310r\274\321\207\010=\017i5\275\030@\243<\2774\245<w?-\275\346\223N= \216\376<\263X\232\274\316=\204\275L\240c=\206r\325<\214\307\034\275sW\200\275.\246X\274\345\221\017=\272\224\233;\307\234\303\274\271\351E\275\343#\204\273+\347\243<\203\323\363<\220\217I\2752\303|\275&\023\216\275q&\017\275C`\340=c\033\226<u\010\017=_\302\201\273n\020\213=N\001\203<\214\200%\275q\275\215\273\354\022\266=\306\201\314\273\343h\020\275A=\325\274\333\206\226<Xi\222\275\270\032\337\274\242f\230\273\277\326\324:\200\310\002<\257\356X\275F\346\203\274\002B\255\273u\237\241:\313(\003;v\315u=U\203\220<\022q\306\274\251\337\330\274\211\323\334<6\370a\275>\356E<\006\362\257\275\352\373W<\271\347K=\300(\233\273\022\344\303<\027Bl\275\302\342\264\275\033\354\305<\266<\312=-^\310=,\335\013<\305\235K=\177\t\026\275\276\324%;\242d`=g\343\262<P\317\177\274\353\326\373\274-\231\004\275|\245H=u\n\375\273\023\373$=\301\274\213\274\215\353\230\273\250)\242<h\"\350\274_\003Z\274b\354\212\274\3705\016\275\304\253l9\270\334\205=\307\207\243=\311\343\223\275\372\352J=\\\032+<\016\006\307<\000\032%;)/\306<\245\037V=\277wb<\022\324Y\274\302r\267= w\206\273a\252\332<(\221\202=\366a\334;\345g\306\2744\312\244\275\027\210\t=v\263M\274\231\317\253\273\026\244\377<\350\301i\274\225\021\372\274\317\242\251;\271\230\367\275<\200.=\r\r?=\261{\034\275c\343\261\275T\001\022=/\342{;\034?\021\275\253\263\017\274\332\247\205<~\277\235\275t\320p=\276\003\r=e\242~\272w7\242=\241\227b\273\343H\251=\010V\263\275\255\2404\275\026q;\275:\357\001=\370E\374<\256\320);\367K%\275\327\265\307\275\014TO=\0101E\275\337\277\302\274L\177.;\002\261\n\275Z\233K=\3469\371\274I\352t=\220?R=\2207c\273>l\212\275\223\343o<\243-B=\177\271t\275\013\250\214;.\304E\2757\236}\273D\353\017>\226\375\024\273\252\030\027\275\247\330\316<\204W\300<V\033J<At\027\272\215Q\\<\211>0\274\215\014\240\274\244\020\230<\262K\356\274\330\031X\274\232\316\363\274\264\'\311\275\215\314\013=W\240A=6%r<\274\375\"\275\363=\334\274\201\347\307<DG\205<d\330\267\275\343W7=\304v;<\324\267\237\274 \247\231\275\343\345\377\274\311\025E=\370-\026\275k\202\377<\007\001#=\267\243\004\275\367hz\275\217\271\375<\246\342\275\274\206Og\275\264\337{\274\255\026M=y\260\260\274\353\017\212=\252\241\037\275\224\312t\272\375\253\367<\306\360]<k\227F\275\322U6\275\352f\031\275\001%s<\377\t<\274G}\"=\206\0371=\360\356\250\274\243\220>=\220\271\307\273\276\316\033=\261\000c\274n\242S<\nm8<\256h0\273\205\354\350\274y\240\300\274\235g\301=\205B\271<\241g\032\274n\357>\275\345\216\253<\267\276\203\275\344\347k<m]T\275\213\246z\274\2145\300=\014\216]\275\333L\217<\017\245!\275\203<\214=aO\334<\241\232\021=\265\351\022=>]e\273\r(\240\275\217\206\355\273(l\330<\000\337\324\275\233\023\254\2733\026i\275\234\000\302;\235\363\250\274\000\310\257<\021\235.\275X\037\240=\002lR<\017\226U=d\350A=\23335<\206\321M\274|\272\272<\377\014\357\273\217 \031\275I\233K\271}G\273\274\320\336f=\200j\303\275\241%@<1\214\305\274}N\276\274p3\235\275`h\245<\247\360-=\031!\233\275\013\343w<6\203#<\343\314a=\341Y\264\274;4\026=\273g\272\274\230 o;@_\231\274\tr\214\275Yy==\354\316\342<\226\257\240=G\271\311<\266GQ\275\303\005\240\275\325Z\326<\321\005D\275K+\022<\263\234\010\275\276\316\334<\000\325\224<`\360\237\274\n\002\365;x\367\227\275\305\003\367<\371\021~\275\3315S=\253e\026<\373=&=q!\342<\200<\321\273\'\231\274<\224\205\264\274\264\014\026=u!Q\275\330\274\245<\230\211D\274]z\363\273\223\231O=j\237\027=\245\357\206<\207\020\'=\270\205Y=\272\343V=\225\021\341;P\201$=\001s\355\274\365\221>=`\356.\275\360\000\000=h!\020\275\277#z=T\251\\=q~\317=\354.\010=\035\\\371;\316@\322<A\335p<7\324\303\274G\300\352\274\273\340\321\272\260\235[\275\341\323\315<\240x\003=D\361\332\273\337\247\331;\207\024\353=\326c\304\273\237\251\330\274\371\020\375\274\224\300\256\274oC\326;\227\334\340<\372\365\276\274\304H}=E\350\367<H \262\275\005k\002<\021\004\204\274k\251Y<\366\303\275\275t:\005=\013O\245\275\243y\267\2758d\010\275\334X:\275\037\362\270=N\035N\275\377\266\027;\234B\260\273\343i\274\274f\017\"=\227\352+\275\032\ni\275\205 !=\375\237\246<\276S`\274\362X\347<*m\235=\213\262\021=\221\361\370\274\306\364\017=\267\"\222\275}JX\273rV==1\033\240=S\254\237<\356\243\201=\276[h\275(\225\325\274n\202]\2750\331k=\024#\006\276y\365\256\2733h\233=\255z\207\274\324M\207=\341\225\201\275\273\023:\274\312d\n=\266\327\222\275\002\231\027\272\276\317\'\275\276\356Q\275*\320\332\273o\257\226\274I\313\006\274\316\215\253;\344\352i\275\362m\014;\030\210&\275hfM\273<A\207\274HVl\275\000\211\227<\360o+=\250\246g;\036\267\246<\367\320\316\273I\244~\275\345\241[\275\327\005\270<\026\247P\275u\232\202\274\317\202\3779\351\033\022<\010CX=m\333\024\275\0031\222\272\356\266>\275)\200a=\037G\273\274\3543\304\274\223}\304\275\313n!\275|\371\371<\303\337\251\275\t\264\274\274\246\206N\275\374\235E=;J\006\274\027\\-=\335\243U\275\347\361Q\275\366\253o<0)2=^\004\001\2751p\376\272\355\010\263\274\312\202\374;\356\327H\275\355\321\277\274\177p>\2747\0040=z\300[\275|\255\323\275U\213\013=4\261\250\275\325\333\201\275\302vy\273\356a\275<\030~\310\275\342\010a\275\252\n\231\275\265\336\021<\253C`\275%\372\200\275] c=\032\355\211\275\242\310\014=\270!\221\275`\2646\273\303\3513=c(\260=\201Qd\275\372\271\025<e\005\343;\340\367\022=^\324\032\275\346\310\267\274\202k\264;\330[\264=l\332\221\274\325\\\226:u\215\r\274\003\275\346\273{\0379=\024\234\032<1\033g\275\207\'\240\274\274\244\006=\035\221\255;\224\"\301<\225\004\260\275M\212\267\275S\250i\274\235u\235\275\213_8<J\030\345\272\031\020\303<\341\026\305\274u\310\260\274\367\001\260;\353_\220\275\354p\256\274\276t\354<\000 \032\274$\371R=\"3Z\275\314\277\232\275\266\253\262=je\236\274\315x{\274\031\270\302\274\017\006\264\274\354x\345<\201\333\235:+\005\026\275t\023f<m\326q=C\346n\274m\211\233\273\177e\363<\366\235\251\2745\302}<\314\\H=t\313\016\275\211\005\"=\240\016!\275\374\3361\275!\026j:`nE=`3\306\274KV2\273\266\364w\275\316\304\333:\241\007\370=\217\204l<\307\317\315\274\274\3433=\347\220i\274$P\225<\3007S\275j\272\235\275\266\311\222<\334\264\335<\207X\215<\004\205\217<U\t\241<\212\022!<\315\0256\275\264\271\210<\\\323\237=M\342\207\274\222\036X=\003\330\234\275\361\037\253;\311\222\235\275\272V$\274k\376\246=Ha0\274c\212r\274\001\350\003=L(\223=YX&=\343\374_\275i\032j=y\362\204<\221\344\336=S\031\235=\302\356\211=`\3211\273\223>~<\006?\307\274;\006\363\274\300\023M\275\223\246\022\274>\335\221<\225\316\024<\273\234?<\002\3642=s\031B=\3454\254<u\266\207=\232%\022\275F\334\315<lp \275\243\263\026<\215<j\274\305wB\275\265l\237=\200\351\006\275\223>\225\275\272,\317\2740m\356\273\251\342\227<\256U#=\261Y\020<\177\230\037\275M\265{\275W\331T=\264\314o\275\031gq\275N@&\275.\0059\275\240\206L\2757\'n=\205Q>=0\213K=J\320X=`\3069\275\"\207\236;\227I\241\275_+\030\273JuF\275\232\0022\275\330\307\343<\261\266c\275\001\366}\274\336\347`\275\362t\230;`[F\275\330$\230\275\360\367\n=hYj\274\371\255\213=~\034\243\275S\305\361\274\352LN=0\010\330=\'\337\030\275L\334\010\275&\370\201<e\207\370:t\275\211=!\2560=\347z\212=\303a\010\275\032^\356<f\215\232=\207\025\034=\305t\022\274\3168\254<\007\0234=U4h=d\3613\273E\272-\274w\032X=\370\356\036\275Il\371<\225B:\272H\370\207\275a@I\273A\013\n=\333\334\027=\305\004B<\007y\211\275\016b\313\273\'\245=<ne\232<\025:\035\274P\240U\274\021o)\275\372\376\020\274QZ\276<\021z\227<\235\245\021:=a\235=\003p\363<\222V\024\275Bf\242\275+/\212\275\220\3720=\311\214\202\2714\201q=l\2220=\232\013\236\275\016U\247;g\004\235=\300B\254=\273\357Y<\351\025\203\275\356\313\304=\220m\216\272IO*=W\243Z\272\225\374\351\274\262U2<\007 \311\274]\363T\274\017\367\350\275\030h\255=G@\035\275\361(\272<\211z\013=Qc\036=\356\313\022=i \311\274\323\341\312<\274\331%=>\310\206\275\233]W\2743\354>\274\035NO<\375\210)<\264\251\n>\010\257?;\'m\007\272\346\310j\275R\372|\274\217\2577\275[g\211\272U\206#==\021\220<c\363v=iu\177<\333?\354=|\232\277=\214\270\204\275\330\252\247<\313\250\"=\017\2602\275c\246\237=W>\274\275~\326_\275\253\220H<\266\343\004=+\301\004<\014\252>=\333\377\326<l+\330<7\325\226=\361\267\347<V]\266\275\177\325\227=\261\017\206\273\273a\021<\250\302g\275\224\010\013=\212\351\013\275\270(\321\274G-\034\275Y{\010=\276v\221\2746\204\242\273\335*\t<P\034J=\372\t\372;\245\332\242\274\272\315\201\275n\237\232\272e\332\332<\003*\260\273\257%(<\227\373Q\275=\nx<J\316\023\273D\rJ=\225\376E=p\341o\275PBw<\036L\242<\236\213\237\274\214\017I<\205\363b=\333,\031\274\373\301\255\274\360U\255\274zu\231\274\301\305 =\365\030\204=\376\345\223;b\306>\275>\360e=\030\026\221\275]\013J=\326\343Y\275\347[)\275\0204\313<\375\317\220\274\210\347\020\275s\024B\275\206v\237=a/\266\274P\376\326\274\270\257\351<\010\345/\272$\221c\275\343\035\350<\031\010N\275q\312\206\274\247\277,\275/$8=\266U\010\275\352m\304\274\330L\265:\326D\355\274%\343\004=\272\307\202<\010\313~\274v\355\227\274.?M<\255\003n\275_%\036\274\351\213\225\273\361\273\212\275\366`\241=#`\\=\005V^=\025\020I\275\366\315q<\004$\343\272\013\255J\275U\261\n=,\222\213=4\3048<5,D\275I\225\242\275\376V_<x\340\357\274Ee\033\273\326D~=A}\223=\360\352\216<\346J\035\275Y%\305\273\262\250\255<5\314@=\332\326\036\275\313\334\271\275\307\330\330<a\256\023<\027\234:=K\367\206=\332\2321\275\247}\231<\353.\254\275\236\272\342\274\244q\320:\346\254S:bWo\275!\252\310\272V\253\346\274K\376\"\275G\035\334\273\026A\237\275\240\\\332\274f\305\207<CQ\035\274>\037\'\275\013\371J\275\251\007L\275\003j\"=3)\307<)%!\275\356?|\275\270v\303<\2429\362\274\2300\365\274?\360i\274N\372\303=\010v\303<\216S\005<Q\221;\275hm+\275n\001\216\273snW\275)\377N=\337\345*=W\252\251<gB\005=]\252\276;4@\224\275\247\333^\275X\204\031\275\362|\032<(\t6=*\0372\275\341\301\206\274\215@L\275\362\370-=G\000\315\275\002(\254<8\323\270\274RT\314\272Nh]=\370\206t=~A\250<\003\301\317<\202\'Q\274\376r =\252K\262\273\3223\212\274?\203\250\275\006\354e\275\256\331\016=\262v\375\274\000s\017\275\014\016\257<M\215.<\353T\366;&2R\273\202\005\026\275\345;\342\274u1\265\27498i<\306mk= \003E\274E\326\237\274H8\036\274\332\273\202\275\032\362\\=\026\'\244\272%{\214<\247w,\275Z\254\006<\345\253%\275\342\334\333<\323F\201=\222\036\331\274d\013J\274gS\027=>\316\277\274\350\026\033<\375+\323=\233K\272\273\3654\341=p\251\262\275I*\320\274[\'\371<^\202R<\325\235\260=\010\0311\275\357;X=\024%\276<\214\032-<\316?n\274D\306\t\275\222\236\313\274MM_\274w\311d\274f\273\302\274\223w\222<\311^\366\274\311\006\254\274\355\013\020=[$\365\273M\2660=\370\006\207\275\006e\201<\355\272\026<Z\251\340<\253``\275\331q\342<\003\345b=z\247\210\275\217q\375\274\276\376\206:\033\372\210;\264\341>=\220\037\333\275\312Q^=r\032\343<\032?\215=\302`7\275f\235\006\274\362\024A<\305\177\016=\345\007\262\275\240\225|=~\335\251=0\210\203=\346\331\264=J5\245\274D\277\032=\264\025\214\275\215\366\267<\273\017<;H\023,=!\317\340\274^\033-\275L\343\207\274<\207\265<\244\017$=_\324\241<\234>\025=\227\252\226\275\314\027\024\275\225i\013\275j\t\221<v\350C\275\200\364:\275Z\314\257=\326\305\022=\244\364\367<\265Q\217=0\366<\274\243\313\004=\263Vn\275 ~\247=%\010Q\274\263:%\275c\243\203\273\031\266s=\201\322\214=\032\033\333<_0A=\252U\314<<m5=$\236\262=\266\211\252\274\315M\205=\022\n\321\275R\251\270\273S\0371\274\371DE\2722\345T=\345\017\226=,\355\365\273\260\034\037=\\~S=\tf\r;\232\023E\273\2535\"\275\'\364\212\275\354\232\240<W\340\251=\224\236\213\274hG\017=>\374\003=F\002\250<F\222:;\002d\t\275\211\301\222=[\261\200<D\326\211\274\177\3233\275\263\345h=\274Y\307;e~\270<\235{T\274\315\3123=\260\025+\275.T\177\274)&\256;\023\024\217<uj\346\273\010\025\352<S\377\221<\235\324-=\312\250\037\274\307\025r<\205|Y:\2669j=\3441\334;\'-\027<\343\351\227\273\023\277!=beI\275\031\234\363\2759K\376\274A\2437\275\233\351\334\274*\375f\275\344\023\037=\205\035\312\2740\2013\275b\022N\275\004\257b;x\255\205=\375\253\347=\263\210\324;a\330\306:hj6\275\364\306J\275\347\320\037=\t\222\007=I\345\220=\310U\311<t\246\020=\367F\304=\343\247I=\250\212\310\274\031\0102\275\007r\002\275~\372\027=\n\351\365<d\026\t<,\367\221\274\320\335\002\275\367\336A\275\362\212L=o[+:y\207\241=quo<\325O\215=\336\246\033=\217\375:\275\244\246m\275.\307\341<\357\264\226\274gBj\275\005z\246\2740\323N\273zF\306=?\236\035\275I\2522\275\300o\035<\261$w\274\303\252\201=\316W\000\275W\347\263=\362w\300<\2723\201\274\200\243\373=\235 \263\275\243ZX\273G\3271\275\263e\032<}y0\275(\332\221<\366\236\346\274\272\311\017=]\377\031<K\035\222\275!\200\376\273\206P\354<\334\377j<\271\255(<\352\346\323\274\201M\273<1\362\\\275[\232\313\274\351\005\'=\235\233\256\274\256\2103\271\\\004\325\274\363\361|<\032Ej=\336\303;\275\002\345 <HU:\275P\367\202\273X\202*=\377\177\316<\0375\266<\210/\274=\274\262\335:\0052\205=CS\227\274\272\372\027\275\317\347\325\274e\022\000=!J\001=\342\336\\\275n\325\277\274\226\376\235<\360_\002=\032\367\364<5\317\353\274\036\031\364\274\315\243\214=\033\' \2744H\313\275\371T\221=\343X\'\275\006[\353\275\024\277\234<M\227\013\275$\253\014\275[:\313<\010P\030\2752\237]\275\023l\215\274\177\256\211\275\375\320\034<\276;\205=P\203{=\352\313f\275\316RO<\027@6=\202w\210<>\032\254<\204)\327<\274D\261\272\256\205h<\245\362\036=\336\335g<\363[n<\014\261#=\316\n\364;\277jL<\021\242\227\275\215\354.\275{\263\033\275]=\034=\203\364\003=>\235T\275\205\301\022\274\371\007\026\2759`\354\273+it=\026\225&\275#M\036<\001\361N=\312\2444\274_\365\036=\031\233\242=\220*\213=\203\245\333;\370\214\'\274\020\227u=\013vS\275e/3\275\317s\233=M\313\235;\020\356\325<\203\245D=\00243\275\231\005.\274\223~\025\274\327\200\224=\235f#=\313\303\350<7M\261=\236\tS\274\311$\312=M9$=\036\342}\275\206^\205\275t\247H<\311\305\356;\357\2656\275\334\247\257\275\252\256\247\274\344\022\220\272\365\300+<\350\223\016\275`\260\034\275?FZ\275?w\302;\307U\255\274\231\301\207\275^}J=\241&\276\274\256\013\356\274\000\313r\275d\217\303\274Y\3239=\311\370W\271u\363\327<+J=\275qz$=\222a\221<gh\001<>\2734=\233\351\275\275D\252\223=6!#\275\026\251\322\274h(\241\274\237\325\224\274w\377\316<C\235~\275\023\202Q\274/\350\237=\345\210A=0\2029\272\354L\201<\345\340\240\273\201\033G\275X\024g<\277\233V\274\312\226\342\275\314jC=\204%\275\274K\372\247;{G\206\275\323\350/<\301gf\274\240P\236\275 \255h\2756Y\'=\024\247\263=\267)A\2756ct=J\316m<@}\312;\314\033\225\275\221\344\022\274x\376\032<\243\254\036<&\301C<\320\230(<^\272\227=qD\336;\241\245\342;g1\341\274\033\371M\275B\202\203\274\031\322\205<\016\230\261<1\270\350<\310\203%\274J\265e\274\205,\243:\211b\331\274\232\235\343<\217\013\373<(\347\224<=S\r\275mQ6=\033\354[\274S\251\244\273\214\202e=\250.\200=UN\345<\257@.=\252\352B<\324\372\262;w\002[\275%\342,9\"\023\206<\234\264>\275\311\031>=H\211\324\275D\357\245;\345\032\t=\261\017\201\275\220\304\000\274\ny\276<|\304\n=\244\264\013=\277\n\351<\332\256I<c\3250\275\263\021\317<\372F\037=\236\366\246\274r\036\241\274\224\017\t>Q\345\177\275U\275\3048\261\255\331=\302\354\202;,\314\235<\301\252\372=_Y\246;\014u\224=t\237\007<\356mK\275\023\202\201=\221\314\302<|\311\352\274vW\305<v\300\236<\235p\312:\nT\226=\010\214\006=ul\001=a\372\\=LJ_=Q\310\032<\356\202\231<\275I\230\274\220J\336\273\034\303\201<\177\254Q\274\320\260X\275{\017\321<\016\302\177=\203\317\323\273\241G\212;N\357\231;\355\313\300\274 \375\271\274\006\033\241<\r\360\010=\342E\t\275(\353\233\273\342E.\275a\232S= ;\271\274`\330\366\274\003\361\353<\227\373\227<\240\336\222\274j\274k\275@\376\223\275\352^\205<\3047)\274q\337\346<\231!\331<\321\321;=\213A\351;i\240^\275\244\346\345\273Y\333\354<\332\206\022<\346!8\272\316U\223<\342z\032<\004\tu<&\356\'\275W\242y;\220\0131<\021\336\344\273\253a\t<\361\375\304=\341Rh=d\315\226=|\227V\275\253\203\026=~\303.\273\026\227\024:E\342\265\275\032\300\014\275\\\2730\275-\366 \275Ke\354=\366\233\364<\274\267\331=b\262\027;\215:\235\274\311);\274\361\207\277\274\346Q0\275&\220m\275$\303\201\275\315}\222<\377r\323<2\217\017\275RKM\275\352\010\335:\016\222\361;\316\217\311<\241\003`=\"\203\351;\313v\326\274z\301\205<\336U\333=\003\314?\275\224\263\032=\270*\035<|U\371\274A\013\342<\235\\A\274\001\021=\274\366\272A=\211\303)\275\335\235K\275\376v\244=\370%\025\274\370\002,=\t\017I=\"\314\r\274\213\327\354<.\252\206<\245A\336<\345T5\274\364\241n<\3100\274\275\207\351\313\274\201\313\333\272\312\336v\273\225ks=\223\353\'=S\303\337\274PR\300=\273\324\233\275\002\313q\275J\353\252<\241a\277<&S\262=\\/\321:\371b\234\274\2354\004\274\273/ <\301N\366\274\340\240\034\275lE$\275#\t\207=\227\315\311;J\305\217=h\364I=\256\020\026\275\274\"\327\274,`l\275n(M\275\233W\353<G\270\357;\014\325\345;\346\374\211<\312\375\030\274ol\223\274\234\353\206:E\320\014=BE\221=\212t\000>\276\202\355\275\254%\301\274\263e\006\275\024\336.=\354\326\225\274\330\277\354;\305I\r=X=\031\274a4 \275\0146M=\322\023\202\275\307\236\004\275\267\330\t\275\016\262\364\275\221\372\331=\200\002\027\276*\224}\275\356\375\237\275RT\036=\364F\253\274\320t!\275.\317\244\273KE\254\275\245g\312<\017\367\324;Qw\177=6\037\321;ev\235\275\237\013\251\273tw\'=\372\3540\275T\372Y=\037B\214=\322=\270<\340\251h<b\316\341\274\255\252\364<\000\203==\025\340\014\275c\230.=u\301\216=\240z\262;\323\207\310\2746.\215\275\024v\241\275}!\002=\216v@<\203{\244\274\013\353D=\256\232\302;\2768\023\275P\010@\274E\343\216<\255\372y\274L\311\374\273\345\271\345<\206\270\177\275\261!\022=p\002\365\274S\217]=\361\335\\=\273\346\022\275\0160*\2757\306\313<\257\320\213\274\032\324\306<V\315\026\275{\370\007\275\303\005\217=k\206\236\275F\014\263<c\364x=y\206\355\274\205\334\223=\351\355\207<\251\005\365\274|\347\321\274\353`\373\274\226\277\303\273\350S\001=\031\365\253=\246\267\232\274\tZ\016\275\016j\264\272\003\271\036\275\274C5\275D\367(<\253\350\001\275\333g\361\274#\337\014>[\305\346\274\243\340\262\275\347\033\304<[\340\217=\235\340\264\274\313\007\363\273Z\226\350\272\316\236E\275\017\312D\275\347\320@=F\342\001\275P\261\246<NSU=\027\021\320\274\034S\234=\354l\036\275\212\307\206=\351\2761<+\364P= r\305<\\^I\275:B\030\274\326M\335<\312_\006<\360*\016=\330U\233\274@\360\035=\266g\010=[G\177<\252ip<\343\244a\275k:\020<\231\265\341\274\353\243T\274f\227\241\274B\256\203=\252|?<\262\333\004=a\306l\275y\313i=\365a;<\365d\303<\216c%<\206\236\300\274\022\035T=\232\306\205\274x\371A\275\213\360\017=\316\233\373\273\355\355:\275Z|\357<\327P\016\273\202\301-\275\212\244\033;\0379\020\275\315h\000;\'\340\255\274\334\267\'=\212\200\322;\225u>=UO\210\275\3224\240\275\226/\365\274Z\222b\2752\034\203\275\t\325:=\325\357\213=*\316\037=\247h&\275]N\362\273\353\214\'=\301\215\206=8\366\273:s\215\261;\340\211\212\274\013\221&\273d+\262\274\003\217\236;(;\023\275jW\014\275\032\246F\274D\207\245\273\371g\222\274U\025S\275]qT\275\310\205\245\274\226y\332\274\234\265=\275l8\344<1\254\320\274\231\366\317<6\037\346\274\213\023N=\374\372\005<\257\355\355\274\372\206\220\274\037\3728\275W\302{\274\024Nl\275\235\305y=<\207\351\274\324\317\217\2747\222X=\031t8<\177\320X\274\243\346\037=Ii\001\274\\\223v<\274i\003=\376S&\2756ON\275\211\023@<\0204\003\275cwp\274\234\336i\275\246+\211\275\221s\356<o\311\246\272[\342\345:\2235_\275\373W\030\274\271\315\017\273\355\2745=\362\217\206<\322\245\317\274\364\025\237=\206t\234\274\217\352\031\273\227\224T\275\332g\361\274/\241\320\271\013#\211=\307\311\377=\'7$=7\242\002\274\336i\211\275\205\032\266\274\370 m\274f\257\322\274\265\332\320\274\245\r\201\272\316d\215\275}\220\311\274T\374\030\275]\315\336\275D4o\275GU?=%#\204=\334\313\311\274\024:\025\275(\300m<?\334\304\273\363\326\3339\362\371\262<\035\354\272\274\223/\362<\335\026\266;\330\223\r=\324`\375\274\306:%\274\325-e<\245\007\201\273\246\311^<.\226n\272G\226\266\273k\246\006=\275\007\200\274uu\243:\225\246\227\275\265\000\306=\234\342;\275\215\322e=\345(\033\275\362\252\"\275\022d\007=\303\356!\275\355\'\035\275\002\355\344\273-\277O=ud&=\034\353\365\273\367`\357=\267HA=\253\217\207\275\251\330(\275\274\222c\275dH\315<\322J\221<S(\230<e\3306<\311\2340\275g\347\205<X\320\362<\314\310\017<\224\211q=\203/\035\275V\335\037<\270\214\272<\256\314\013\275O\374M<@!\271=S\343C=\277\021\035\275\376\307:=\323_\000\273L\224J<_F\213<\2645\310<$\255B\273\3564\324<\027LA<`K\245<\317\332\334\273\030+\327\275\262\027\245<\220\303\305<\334\014\201\275Wp\002=\026\310\202;t\261R\2750\306\261=\325\337\342;e\3637\275\300\345\006\274:\342-\273\2648\n=R\266\220=\225\206@=\376\373\306\274\0251m=x\025&=$90\2747\250\360<\336\235l<\331\006\303=\035\2023\275\314J\247<\362\213\220;\002\212\333\273\010\341\270\274k\013d\275z\024\334;\260\336\370\272\275W\332\274\246\265\251\274\366\301d\275\000pa\274\224;\210\275\'\267\231\274\365\"\344<\020w\"=\255\031M=\031Z\356<\227\217j<`\262!=\244\003\260<cr\355\273l\337\'=^c\332\273\3574\010\270\264Gg\275\r\216\260<\272\227>;\245\204+9\335RM=\263\205\350\274>\006G=\372u\002\276wA\252<\327@z\275\276\376,\275\313\261\004\275\241s\006\275Bk#=\332a\244=\270\360%\272\274n\026\276O\350\200=W\327\303\275\320\325B\274\2627\344\274\300\341\016=\216\213\217\274\342\017r=\362\227\013=\004\204\246=\350B\374\274i\310\303<q\225 =\001\367\263\274\364\000\300;\355\275\037=l\220\263;\203\237\211\275IF\277\274M\231\242\274\227!\213\275\301\010\202;\303\376\211:\272\260\334\273\3679\245=\331]\"=\224#\315\274\307\330<\275@~%\274\221|\205=\207ZN<\322KW\275\n\307\305\274\251\025\371\274\347\312\363\273\036\032\321;\301\2047=\253\235\237;\321\271R\274\361\265\376=\242e8\275\234P\"\275\0178\020<S\301\345=w\370\221=\000/4=\250\236\037\275\010D\177<\336\372\231<{-\223=\021zc\274\211\212\337<\357Q\213\274\307\200.=\007N\037\275V\270\223=\341\333\212\274\366x\030=\"\214\202\273Ic\263<\023mp\275|t\005=0\206\324\275\tz\031<\266\376E\275\2056N\275\260\277\371;\250\014\3239\251W^;r\343p\274HV=\275\323\260\303<24y\275X\252\025\275\307G\323<\352\272\376\273\036\226\377\274\221\315\r=y\260\276\274r\217\026<\024\271\021\272.<\320\274\241\220_\275\220\210U=\346\351M=\223\252\361<\245\235\007=f\244\300\2747C&;\353&6\273,\232\222<aIY\275\036\244?<\361<\357\274\224\304u\274\3722\214\274 \2601\275\204\220\252\274D\321\010<\352\002\320< \267p\274\326R1\275#\347\364\275iV\347\274V\355\270\274\250\224\004=\016\271\232=\003\262\'=\231(\256\274B\252\363<\272^5\274\366h\255=|f\036\275\272\0261\275Y\013\240<\227\376\003\275\037E\002\273\222T^\275\"U\300\274\324aw:o@\243;\226\262I=\356}C<\006|\225\274\336\"\033\275-,2=.\361\317<\322\366\013<\034h\202=\233\350@\273R\372\001\275\216\025\351\274!\266\336<9\233\365;\270\266\020\275Sa\021\274\005%f=\214\202{;Hr\274<,\357\353<\';2\275I\347\004\275\262h\245=\320\272\354\274\267\374\205\273\303\207\026=\371\263x\274\1772\214\274\r\213\231=\034W\320\272\222\247\361<\242\021.\273l\303\316\274\253\031\022\275U\2168\275Z\004\370<\020\336\034=\336\t\372\274\262\253j\275,\"\202\275\327\007\240<\364\226b\275\023\225A\274r\2047<\326\3039\275\003\230\016\274\317\326K=\356\254\265=\224\245\000<\2175\347<t <=\006\223\331\273\224\363n=\204r\372\273[1L\274ezZ=\207\376\250<\305\256n=Ih\001=r\2435:\001\255\250<\230\276S\275\354\231\200;\276\026\026\275Q\207v<8y\276;}\246q\275b\311\211;rI\r=\001\332\'\274(\312\322\274T\"@=:{]<\363\261\2159\'xX<gP\"=\276\261\357<|:E\273\016\025\023\275\023\006\022\276,{\375\274M\253\212<\005\370v=\250\207p\275B\220\215\274\"`\244\274P_C\275\346#\323=R\017\263\275\326}\035=\225t1=\322_\017\274\315k\'\275\351\232C=\026\266=<\315\342O=[\203\236\275\304&\'\274\3073!\273\241\341\024=v\202b=*\341C=[+B\275\223\\\236\274<2\215\274\255\010\264\275\'\034\332\274\256\330\242\275\326;\031=\203S\356\272\362\021\017=z;D;jT\347<\244?^;A\014|=1\303O\275\"\332\263\273i\227f\275\375\017\203<y\316@=\235yP=\202\036\003=RPk=\272\210\257\271K\322\013\274\3211$=\'\252\000\275e\327\352:\022FU\275\271\356G=\024!=\275\256\336G=o[\222=\232\321\201\275\255\2617=\336J\266=g9[<+\306@\275\025 \262\274\037M\253=\302&Y\275\t\211\262\274\261]\242\274\331\370)\275\2449U\275\347]z=\360\317;\275\210!\216\274R\346\232=\345\014J=\352\177\033\275\000+\335<\252\252<\275T\265H=O\300\346=\237l\227\275\333r\357=\256}>=\0225\366<\252\204\001\275\310f\266\274\031\002(\275\305\201[\275\207A=<\263~$\275\240Q\200=vn?=\341\264\006\275;Q\250:\342\014|\275\005R\005\276Sa\003<~\277|=Cj\265=\3079E=\214{\330\274\301\217\206;\177\341\000\275\274\273\367\274L\235\305\274s\224r\274N\177\014;K\035c=\221\231\357\2749\0249\274\325:\354;\3214f<\303^\213\273\3756\343\274\252\227h\275Z@!=\367\020\355\274\207X\336\273\364$\242;\360\332.=\245\031\203=\214\251\223<W)\316<U)\210<xyB=\273\274\354<\246\344\020\275\321E1\275r\312u\273Hd\007=\300wo\2756\036$\275\343\202\244<\376\327\304\274=D\307<d\204>\276\357\331\204\274\343?\216\275\003U\261=\301\342s;\216\334Q\275\000\252\250;\377\363g\275h%H=5B\320\275\227;!=\313\202D\275!\341\t\275[\315E\274}W6=\377\273\321\274\221\357\240<\235sw\275\302:\225\274d4a\274t7\213<\004\227\334\274t?p\274\017\016g<>\353\277\275\033\204\026\274bg\273\274{\313\363<\351\\\236\273\202\003]\274\337\330\033\275\244\337J\275\033\335==E\272X\275\266\035\336\274\326\257\326<\300_\243=\200\270R\275\311,\312=D\013-<\361\361=\275\360f\345<6\002\332<\272\342n\275\373\'\224<\311r\370\274\023aY\275\223\201\377<\374\261\233<e>\006\276\3654\217=\000\206\030=Y\241\327\275\n\240\2108\354\351\014\274\211a\205\273\243\351S\275=\216\361<O\270\350\2734;\267\275.\206\306\273f\322M<\327\277x\275#\2315=\t\tF=bzF\274\260%\341\273\215\006\223<\354a\374\273b\246\023\2739\377\002=\246\263\277\272\367\004\037;h\375\376<\034\344?=A)K=#\236c\274\\\n\';\345\241\220<\215\035\n=2\305f:\003\264\335;#UK=\006q#=\263\307\027\275]\267\314\274\302pP;h\225\337<\"\257\357<6l2=|;g<q\021\037=\317Qc=\017)\3719\256\215g=\342U!=\366\374\023=B/\366<shW=\230Z\341\274\202\355~\275\003\000\364<\345\0066<\004\364{\275J6\302<\234\003\'=7)K<\263\007\217\275\266F)\275S8\222<};\004=\236>\350<\344\363:=\340\250\033\273/d\013\275\344\316\265\274\221\375\203\275T\302\340<\347\\J\275\331\n@\275D\371\235\2755\343\031<\177\025\261\274\265<v=0\023*\275\261C\273=\214\216\374\274\361\262\244=\353\303\211\275\215\327c\275T9E=g\326/=\344\301\227<\022T\231\275>\307q=g6W=\271~\004=z\024\243=\034\376r=f|!>}\021\260\274\223f)<Gm\341<d\231\262<\323I\246\273\216\226\262\275\270\263\313=\324\225\223\275\222\244>=\372\034&=T\353\000=\270\207\031<9\355\n=*\230u\275\022~\217=K\0342\275\030\333\r\275\305\2654;\2203\317\274j\261#=\360\t\220<\007\270\245<\031pZ=\333\036N\2755A\324\274m\'\250\273\203\374h\274v,\255\274\262\366m\274\230Q\r\274\237?~=\271\325^<\2346\203\275\362\2300\274\020\020~\275\252 \211=\240\376\342\274\201\221\232;dh\267<\232\010W\274{[\262=6i\341\274T\332$\274\357\256\215<\316\265\004\275\002\367<\274\207\362}\275\346\345\207\275#R\355\273\220\300\227\274\352\2208=e\362\002\273\253\334\214=\"\2118\275\215\217\007;\207\340\202\274`\227>=\034\013>=\327=\247\274\333\317/=\306\225\210=\004v\312\274\375\025R<\343\366\355\273\006\200\270\275Q\003\221\274\2752h=cl?=\226j`<*\264\270\274\241\227]\275\236\321\276\274\330\031\356;\315\202\023\275AD\365\274GcH<\331A\033=(>i=#}*<\227\214:\2751\304\036:\301O\013\273(F\266\273\027\375[=\346\024A\2752.\267\274e\225\353\274\001\006\311\275\333\327X=\036\035\254\275v$\230<u\371\000\274\252\252\006=\270\223\252<\300\332\240\272\35575\2733W\201=Y?\207=a\301\223\274\320\233u\275+\366\244\274\344\340\211\274\347\252}<\031E\234\273o\250R\274\000\331\220\275\3719\256;\370yc;T\216<<b\332\226\273\253\204F<e\266b=g\261 \274G\277\242\275\024\205\005\275\t\301\213=}\177E\275\316\036\r\274\353*\014\275\034\361\213==\020\\=\035\374\037\275RJH\275\270\270E\275+2\006\2758\263\355\271\004\333\002\275\372\244v=\3313\266;!Kz<\342\341\262<\303d^=\257+g=\023\374\213=\342)0\273\370\226c=\316Zd\275\217\027\311<\232\331\214<`ux\275\237ry=R\220\266;<\305\313<\237\024k\274\t\352\211\275{\376\261\273I\340\032=\370\022\222;\252\031\353;\025#\233<\327\230\r<\200YI\273\212{\312\273\344z\327\274/\372\315<\314a\010\276C\237\337<n\2032\274\262\2450\275G\3350=RM\321<\010\025\361<\225\343\224\274\262\021\000=\365u\340<\354\332\301\274\006\003\006=5YT\273\206\026\000=a2)\275srW\275U3\004\275\001\335\251\274\311\255I=\027)h<iW&\275\221\350*<\007UO;\322 K;\373s\022\274\023\206\364\275\034\314\245\275ia\016\275\223\353\257\275&\006\277<H\234\222<\251\376-\275\017/O\274F\340\270\274\313zP\275\260Z\221\273\306\305\005\274\343G&\275;\214\360=\324\\`=;\210\267\273\326!g\275\"\317\013=H\221f=F\021\022\273E02\273\310r\006\275\033\2622\2755\270\204\275\310v\332;\367;\005\275\276\303V;m4\265\2740g\222=\237\336\">\343\221\210<S5D=\342\n\004=%\2362\275x\373U\275\271\237\242<\367\0103=U`.<\014a\260<\351\207&\275\227\n\332;\321^?=.}\002\275s\010\244\274\027H\023;\232\347X=\r\241\273\273\n\005e\275[\307\376<\276\243?=\270\317\002\275O\r\261<[\342\261<:\347\215\275}\033Y\275BP\377<\316,x\2749D\204=\346&U\275\007o\024\275\t+#\274\372\335\336<v0\213=\242z:=\365\213\241\275\275\036\0369\275\265\003\274\351\371\231<\306\257\305;\267\337M=\360r\"<w\007\263\274@\252.=\377\004\202\274\356\376\206\274\003P\010=\276\025\245=\007\340\227\275\263\010\235=\377-\203\275\320\211\220=\200\220j\275\363\"3;\227\376e\2752\321\240\275{~\272\274\351\221E=\350\225\206\274M\251]\274\323{\331<T\026\345\274p:\317\275\353\327\337\274\010\227\023=\270L:\275F\352\331<\274\255\223<\330?\027\275`\027\316< \032\023\274,mV=\315\3330\275q,\026<\323\251\217\275}\233\350\274\205K\024\275\234\006\210=VZ\231=\260\323\210\275\234\231\307;\210\333\362<\262~3=\001\013\252\274\201K\326=\204\215\234=\337\020\225<\362\255\245\274Lu\241\274\341\026\223<y\242(<\n\274\033\275#v\220<\321\3238\275\274n\271\274\220\005\031;\021\376\177\275W]\3118\262\271\000\275\372\270/<F\347\r=\244\205\n<\345\2063\275\243o,=~\035A\274QW\003\275\202\3004<\006\221i\275\243\013\366<w\202^<\217\237\022\275\311\201e=\310y\007\275 \277\033\275\234\375\371;\255\201/\273\266\026g\275\365\377\207=\250\303 \275\2501\263\274\306\345\225\274\0222 <?\332S\275@\331\032=\367\270\315\275\214\037\000\275g\344\357<\300\214\002=\305|g<\365\013\327\2749jb\275\270\256\244=\331\250\r=\324GI\267u\250\365<k\210\021:\"Q\035\274~\256`=Wv\n8\3228\235\274%?\232;\374\310H=VO\312\274\234\264\224=\373\005w\275\302\333\260<\027\273\325;\365\200\030<\\\324#\275\377\'\263\275Q\210\350<i\036?=\236U\'=\006\014F=n,\226:\003\037\243=\236\014\254<\247\255o\275~K\310\275Z\275k=\270#\021\275A_\005\276\035\rG\275\233m\321\274\2415A<\326\270-\274\204\017\342\274\001M\024=_\005]\274\310#\322<\337=m=k\351\310\274)\345\177\275\002\374\274=\266-\324\274\007\025>\274\237?t<\003 \274<&\314\303<\201#\214;j\272A=\013\017\234\275\313o\002\274\326\010\203\275-\374u\274\231\361\202=\344\377\261=\\O?<*}\000\274YWT<\307\017\177\275\271U\031\275\034\220\226:,:\211\273\212\244\241:j\243\255=.\030\246\273\277Uo;\345V\266<\r\263\272=\326\311\247<\032\340w=\316/W=\202\332\333<&\307\\\275\304\355\000\274\247\342\364\2750D\325<\226\236Y=\242E\320;\302\310L\275\341[=\275\317Z4=\037\000k\275\251\257z;\271\277\261;\365ri;1\014\210\274\267=u<\2702\301;\024\332z\274\332D\250=\246\374_=\345\206+\273\216\207\201<\275\243\230\274e\0359\275\034\365\236\274=)h;\251y\375\274By\364<\0271w\274 \"\362<\353\"\305=\237\367\016\275\'\'\254<\225\312\020\275\326\327d<:\314\316;P\213 \275\261\231g=A\305\375:=\354\312\273-\232\237<,\014\336<0\232\253<\025.\311\274\227WA\272\356\253w<\210{A\273\020\323\354\274-\\\337=~\307(\275\230\025i\275\224\323\207\275VaC<\001\370u\275\355\257~\273\272\224\022=\177\371\374<\333\013`\275\365\004#\274Z3\317=\344p\363<L\315k\274G\276z\275\024-K\275\305Y\t\275\371\244\207<o4\030\275\023\3120=\210PS\274P\204\004\275\260\0301\275r\275\213<c\213P\274\307cL<\023(R\274\260I\030>t\374R<\2076W<\333\r\023\274\205\022\023<\256\243\276<\311\336\022\275\334\224\'<\022\016=\275\017\344y\273\350\322\373\274\312s\024\275,\304\224\2735\032\026\275\230\215\354\274}L\362\273\305^\365\274\366x\t=Q\234n<A\200\276\274>X\231;\210\376\374;\3566\036\274@\3333;vI\264=H\264q=}\353\201\275\3661\236\275&\211><\377\312\017\275\204\253e;\000\353c\275\223T`\275\237\256\373<\361>\n;vs[\275\265\223\210=\364-\212=\355U<\275&\3661<?9m=\212*-<%\341+=\214\207\226=7\260\374\274|\300\253\274\004\211\021\273\373\313R\274\315z\211\274\025\216\214\275\032\321\214\275\303\3671=\303U\027\275\r\2153<J\225w\275\365\006+\275\370t9<\342\230,\275\2759\031=\230\373J\273\274\230Q<N\341J\273g\227\202=\271@\241\275\244\255S\2752\361\014\276\005.\226\274-\004h=8\356W\274/\270\253=\244]L<\333\361\013\275X\2552=|\353\305\274\205\214\267\273|\000\237=1\031\177=\372\260n\275W\034\335<\272\0003=J\2124=\276\250^;3\035p<\275?\320<W\233\\=\016\314\251=\226\233\260;\010\277\320;,\242\351\274 \201\255<\022\312\305=\353\360\220<\340]L=\236 \204\273\275\370S=\034.\"\275V}\376<\247I\210\275\373I\334\274\356\256\025\275\345\240\005\274\264\262\257=`\335\243\274\3777\225\275\177\256&<\252C\300=I\260 =\301O\r=\035\377I\275ht\310\274S\032v\274\311\332\000\275\234\025[=\3136\353<\263)];+D\300\274\206\257\326<\243\006o\274\236\241\001=\031\363\316\273\302\004V\274\237O\314<M\331\343\274L\237\223;\353\005a\274`a\217\274\003d}\2751\340\'\275\250>\'\275%H\220=E\322\225<\270\3605=Z\260\217=%t\023\2753\227\202\274\337\240(<\203\341\257=\362\361\313=\006\004\310\273\304q]\275F\r<\275\002]\372<\212\307\237\275\025:C=\004\341\032=\220\303\230\274\373b\213=\360{5\275\356\026$\275\321]=\274\244J\'\2741$\014=\n\237\341\274[\\\205=\212\210q\275\257r)\275g\255\243\275\210\362L\275\341\357\017\275\305\254\006\274(\241\304=W\256\313<\2722\276\274\342F5=e\2065<\225\311\364=\034\310\360;\315{\036=M\007\343<i\321\316\275\207\3458\275+/[=\251E\006\272\215T\307=5\035\245<)\2704=Z\020w\274\375\251\027=k\023\\<\252\234\340=\374\224\341<Z\365\000=\241}\205=Y\314R:W\226_=m\025\203\275\361Y\214\274\265\027\265=|Z\203\275\374(\3328$\202O<\355\007\023\275QG\336<wjX\275\340s\277<E\007\206;G\236`\275+\210\013<-\325\355\273\265<\230;]\340\213\275\"7\217\273d\331\311\274\374G\257=3\314\024=f\023s\275\341\334\315\274:\222;\274wt\365<\327\357\247:\304\217H<\245\212,=\005)3<J\324\311=\223\273\034;O\"\273;Uy\210\275\206\304p=]Y\014\275?F\307\274\203U\337\275\366\2041\275\001\006U\274\000\251>\275:\336R\274XDQ=\350\350d\275,5\311\274t{\220<\305\300\215=\252[\342\274I\352\324=L@\207;Fy\355;\203Q%\273\356\006\200\275\233\035\311\2755\362\303;W\034\013\274\272/\024=\230p;=\273d\\=\311Ho\274?\213\231;\t\001[=3\337\266\273\375\216\324\274\035\255\231\272\213\221\'<\014\326>\275\245\210\347<X4_<G\3621={\030\001=\200/\032=\204\346\\\275\033\367\021=\361\355\343\274\231\311\002=c\320\363<}L\201\275\277}\204<\306v\236<\216\'k<\214\315_=\013\3436\2759l\332\273\372\356\310\274\355oC\2743\224\017=\230\355[\274\312\325\317<\277\t==<\020\244=\220\2370\275\354\366|\275\342\271\354:*!\305<\204@\233\274&\262\035\274\230\305\241=Pr\022\275\265\211\255\274\271\2227\274\000\217\024\275A3\336=S3\371;\024\265P<\312Gb=\000\225\236==\201\215=.\261\316\275Tw[\275\377\367\363<Q\014\200<\342D\343\273\206O\215\275\342\013x\2721s\320<8\323s\275_\224\255=/XC=\207\252\320:\365l3=\354~\342<\271\3501<\316(\235\275\033\366\235<L\217\030<&\274^<\030#\351\274\024:\\\2751*\363<\335\246\315\274\203\337\201\275\263\t\240\275\233\022\234;\330\323\302\275\206\226q=,vO\275\211\361\005=\222\007\214<%\010`\275\267Jt<^`n\275Wq\210\274@\300@<\276\006\001=ets<K\036\324<\"\235h<\232\273\222;}\255\307\274\276\333\331\272\022\212\267<\261\177U=&\222g\275R\242E\275\217m\321:\207C==\212\322!\275x\303M=g]!\275\331\214\036\275\315|\353\274\326\215\245<i\325u\275P\246\t;\333\317\374<6\220/<.O\345<#C\246\275\302\377\242=o\307\307<\023\013\264\274\215\244\230\275Y\036\211<)\032\266;i\201\312\271\272U~\273\214\2359\275\032\"[:%v\230\274P\341\021\2757\346\001\275\3540%\275ux\301\274\"5\257<\022A\243;o:\224=8\030\031<\316JH=\327\\\343\273\234~\\<m\2617<RB\004<\202)\021=\240\300Z\275]\216\212\274\372\234+=\363z\244;\2158\220\274l\347\376<3\334p\275\242\360\242=\254|\303\274\316g6<\363\207%\275\035\256\371<\227\0005\275\362_\360\273\370i\244\274\353\376\231<\235\317^=\010\242\363\274\312\314\006=\2038i\274\254:?\275\316\007\371\274\323X\'\273\017\326G=\304\273\347;c\217V=Yv\200\275\325\240\001=\303$\230;\275\034D=\240\361\354\274\216\206|\275{\325\357<_R!=\304K\337\275S\331\244<n\270\212\275\242[\026\2753\230\035\273\375\307\027\274\357\034C\274&\014Y=\276\263\022\275y\312\267=\245\220\212\274r`\225=dZe\275\243\311\034\273\215\017\020\274\313\332\206:i\2512=9\227\236<\375lF<mp\202=,\273Z=\211\356#\275\321\034\370<\352\007\010={P\325:\025gM=P\226\310\273\204\227\247=\235%\036\275\027\374o;>\310\273\274Hz\350\274\321\343\211=\'>\217\270\356\373\003<nh\220<I9\201\275=\332&\274\302[\231:\247x\271=\314\030S\274)A\244=&\210\311;\366\025u<\0077\034\274>\004\021=\203\255\236<\332`t=wB\347;\007Z\010\275:\376\031=\303\354 <\017,\257=e?\035\275\3305M\2746\313\262<2U\254<9\253\002=\266\205\336\273\321.b\274\003>\266\273\202\233%\275*,x<\275\344>\275\360\016\343\274\330\241\316\275\007f\272\275:w\224=$T\340=\255\3415<2\266\264=\243\277\200\2737cg=O\340\r\275\007kK\274<\200\256\275q\347\340\273C\025x=\255P\030\275\0247\035;\370\313\023\275o\323\360\274\237\205\207\272R\207\331\272\324\276\226\274\310\226\001<\3008\364<Rz\277<\242\362\363\273\234\005\177=n\374\036=\377\'\215<t\200x\275\273D\003\275\244$\027=\333\203#\275\212\017\262<\346\3728\275P\002\020=\211(\234=\261\177A\275\370k\211=(\234\245;\253\312a<_J\204<dT\361<\000\005U=\361\006\317=\2328\216<N\031r\274@\306&=\215\324X=\324S\243=~\375\216;r\310@\2750\213@=]\210\020\274y\220/\274\207\0147=)\037\224=\322\344\035=p\222\216=\256\376Y\274\022\245\276\274\306~v\274\035\032\345=\272\306\002\275\306\273\000\275\tU@\274b\001q=uu\356\274\026\216\037\275\3348Z<\277\016#<6\207\206<\263J\264\272\222A\252;\301\302\t\275Xn>=\\\365K\275T\362)<\013\257\000<$\255!=[u\362\273!\013\025\274B\257\343;J\277l\275\265\"\255=O\274:<%\270\002\275\220\375\027\275n\254\\=\006\223\235\274\315n\252\273\273\337H\275\210\264L=\340\365\207\275\262\327\010;\234\273\034\274T\005\371\274\244\347\030:r\023+\273\374\335\307\274\372\340\'=\034\302\006=\000Lx=\255\321O=CN\261\275y\265F\275\030\213\327\274\250|\013\272\212\305\246\275yHt\272\270\353\244\274>!M\275u6U=w\224\000\275\232@T<\\\262\207\275\2511\243<\"\323O\275\035 _\274i\017\035=pYA\274\207_`;\023O\362;E \252\274\321\3074=p!\337<\352Gr=\010\035w<\027\231\205=\363K\276\274\354k\234\275\307\275\254\274\252\017t<\202\\\r=\2130F<\211N\320<F\243\021=\030\214\255\275\275\035\031=\365\342^\275\245<8;\213!\004= \2222=|\275C\274\346\274\220\275#\t`=\024ZC\275\373W5;yY\247<tzG\275m\317\333=78J=\364\003\010=\177k\362\274\260\367\220\274G\301\265<\233\314\026<]\264\266=\326\317\206\275\020\274\226=f\234\007=6w\334<\315\332\351<\304\n\270=\311X\007=\325\240_\274&\251\204=;l4=\326E2\275\3340\001=\013\2755=\377\265\253<h\345u=\"\032A\275\355\350\002\275\3478\352<\354\2078=\236\022\214=T\357\016=\353\251\344:\270TB<\345\373\341;\035\254\266\274\365\330\002<\36796<\261\276-\275w\273\306=\361\'\372\274{\017\272\274#u\202\275a5\340\273\352\205\313\274e\305L\275\367\262K=l)\215=\352\216\304\275PJ\325\274\213\r\253<wb\345\274\345\356H\274\022c\221<h\200X\273\007\330\260=\013\213#\275\366\200\350\274& %\275;Q\224=\023Hx=,t\304\275\274\264L\275]E\212\273\037\350C=\275\362c\275l\025\245\274D\320:=6\325*=\204\351(\275\314l#;\332\273r<\235)\032;yAG\274!Q\243<\251\305*\275l\310\263=\2742\014={Z\324\274V\306Z<\324q\016=\376=S=\n\221\313<D\310]=*V\370\274\354\250\357<)\\\315;\337\035\\\274\345{\013\275a\324\325=\016l\317;\276n\342\274&(\016\275\350\031\204<\353J<;,C\330\274\006\227~\275\016\200j\275\227\211?\275xG\030<\230n\003=\236~\004=\214\243\245\273\371ly=\347B;\275\276\0179=\213z\370<\327\317\020\274:\366\366<\340?\243\275+\010\177\275\345\033\335\274\225z8\275us\003=\316l\253<\307\334\224;\203\343-\2734\377\022=d\2040=\263\247\217\275\220b\202\275n\226\234\274z\323\245\275AU\301\275(\001\351<\253\271\221\274j\204\214\274b\262\000\275\r\256\241;\233r=\275\032\032\273<@%j\275\"|\233<r\014\004=\310\313\226<\377\316\214\275\320`I\2751\013\241=\363\355\352\274z\252\031>\237\006\266\274\002Fa\274\216<\010<\024Q\255<B\253:\272\345\241\300=p\024\310=\223`\371<\320\200\325<\032kq=\022/\250=\224s\324\274\370\2213\275\317<\222\274!\237\247\275\362\370O\274\230\314\226<\250\330\332\274\357\244\323;\310\302D<\321\333\214\274\255\321\\\274oG\202\2750\234\000\275\255e\223\275\206\036w=~\261\274\273I\214\253\274\361\034\207=\360`-\275\251F\214\274y\031z=v\305\232\275}\201\310\274\016\360D=\266\275\010=\"\361h;!\006$==\277-\273\234\371\n\275G\357\033\275\3063\334\273\326\n\357\275\253)0\275\227\327l<p~+<\241l\206=K\236\251\274\355\256h\275\227{\030\273>1\371\274l\002\033\272/)\233=N\246\343<Iv\004=\370f_\274\376o7\275\006\300\300\275\331\r\016=\274\366\242;\233g\237;\224\t\204\275\3679O\275\331_\311\274\211\345\331\274{:\234=<\347{<\244\271\230=\360\013)=\0350T\275 \223Y\275A\346\013\275\202\212\320\273Ij:=\315\206\"=9\207\t<\332\254]=\347\2521=\200)\200\274\004@\226<\220\003\201\272Vf\322=\233z*\275\035\324\335<pB\330;\377VO\275\201\300y=}\374\274;3\267\376<\336\237\311\274\277\326T=\375f\021=\233\345\356<l\326\227;FC\323<\017\221\010\272{6\333\274.\277M\275>\'X<]\362`\274\264$\000=g\311a<\2520H==\226\233\274\330\223\206\275\336\344\004=\016\374\032=`~L\274\213\034\324<\313\332\007=Jbr<\232\010\000=\326*\033<\031|-\275\341\222&<\223~\375\274\013\306+=\331\206\241=\024\021\257<\214\257\317<\317\342\004\275\263\252)=\214>\213<[\316\307\274K\365E\275\010\211\030\274\353\363\277=h3\314<\331\336\016=3*\242=g:7\273~\301\360=S\005y\275\317\207p\275\262\326\245<d\005R=OO\320;\220\275\237\274\345c\356\274\307\375\216<-]\205\2758N\247\274\330(I=\276JH\275\314\021\210;C\007\031<I\230m\275:C\020<\213\005G\274\230DD\274r\007^\274\276G\207\274\337\267j\275\007+A\275\340\346\205\274\377\335C=AG\235<\271\027\317<\332\315}<\213\264\267\275\345}8=x\001\206=rY\027\275\307\212b\275o\367\330\274\343\034S\273\270#\022<\365cQ;G\311\336\274\224e\323\275\377\374\266\275X\207@;\352~\363\274\306\331\304\274^\255m;\243\314\245\273\0364\255\274m\202p<q\"\002\274\014l\"\274\236\006\206<\247c\307=Cj\337=\273\r\335\275\330r$\275o\373\014>\256\301^<#\020H<X8G;\220\204\010=\255$,\275\306\251\006\274faE\273&\344\223\274\227R\314<\017!\224\275L\343q\275\254=p;\014\211\022;\234\241\017=\224\265\221<o\326Y\275F4\266<\270\234\207;T\022\376\274TK\233\275\315\320\357\274\220\271\244\275\313\341\253\275\026\231\r\275\353pR=\235\n\306\274\377\026\232=\240\257\t=/\267\033\275\026\005\265<S\325\266\27427\216=\267\032\316\274\034f2=\215\030j\275\nMN\275\245\2124\275\252\322M=\220\\\200\274\362\036\342\273yu\352\274%;*\275\033\2722\275\013.\003\274\326\312\227;%\202(\275\321Gf;\233o\206<\323E\375<\304\325`<L\006\256\274\202G\225<h\261\261\274\373\344&<\224\"\220<v\021\026\275Q\274 =\020\003D\274\261\004\017\275\326\037M\275[*o\275\272lX=\343~\350;\371\3314\275\2740\334<\236cZ<\356[\241<r\267~\274\376\036e=\252 b;T\037\375;\272\351|\275\260/\013;\312%\376<p`\002\274\310\201\324<\035\347t\275\035\r\353<afr<\024\230\036\275@\024\021\275?\253\205\273%8v\275\022\353\247\274\211\222\207=\222R\023\275_\013T<X\235\206\274]\201\027=\347\226\260;\225 \\\275\302`\016\275V\030\226\274[\223)\275\373\344<=f\035\220\274\177\377\277<\201vo\274\347\234^=|\241\222=\312\370\340<|\261\317\275\206\201\177\274o\264\203\274\364\023W=\256\207\323\274\034\247\217\274\325\307\303<\231Q\214=\026\276\277\273\202\305&\2751\300\321\273\357\004\000=P+U\275\261 \230<\244F\212=J\362\362\272\247\220\352\2729[\025\275T\"8\275\257\261\016=\245\221$;y\024)\275\032\211K\275X\213O=\3415I\275[\223\246\274\307\266\314;r\323\316=d\241\312\274\004\026\202=8y\254;/\262\277\273\215\320\033\274\037M\255\275\027w#\275\342\262>\274M\307\204=I\024\212\275\t\331\322;\310a\205=/\221\246<\320\323i\272\331\303e\273c\336\216\275\'\345\020=[\352\036=\315N1=\"Z\221\275\341QF\275\201\237T\274o\327K\275?\001\001=A\237\214<E\267\361<\231{`<Z% ;\357\277\345<\225v\027<\342v{\274\360\332\260\275L\277\\\274\306\234\347\274\265\242==\3154\300\275\251E\351=\277\210\016<\233\013\001=\211\305_\275H\320\200=\005\320\250\274/T<=9\340R=\031\035\353\274\330\031\303<\027i\377<\332\265\030<\t\223\313\273\005\233\277<%\274\'=\017s7\275\361Q\222\275Z\251\320\273\367\366}\274%\214I=\326\344\303\275[7\"\275\251\210b\275\320\372\231=\207k\244<\377\306\253\274\265\210\253=\367\274\023=\323\007\343\273\220\273S;>\326\023\274Q\3719\2747\312\344=\230m\021<\033\312\327\2749X\334\274\273\310\246\274\316\217\003=[/^\275\212v\313\275 \"m\274\215\276\003=\"\031\035\275k@\251<\252\254\022\275\326\355\"\274\274\307\274\275!\004\252<U\0042=|\034\313;\223\027j<a&t=\252tD<\330_\354\274g\202|\274\325\345\373<\022\222\205\275jQ==\t\317\300<\026\226E=\300t\220\273\235\250$=X\307\005\274R(\222\275\rQ\366<`~\246\274;\226;\275\200c\255\274\205eI<\302\360\207\275\n\215\274;\rh\375\274L$?=\244\230\322<\321\243\362<}Q\350<\007\365.=\376\363\0329\245/\t=\3343R\274\031i\317<\272Y\234\271\251\027\002\274\273v\336<\373\255}<-m!\274\206\326\254=w\021\316=\2429l\274N\356\326=W\356\214\271`^?\2757\200\215\275\331\005\035=^\252\365;\345\212\334\275\240\317`\274\206F\212=.YW=V|\321<@\221\216\275\273\317S\275nR\265\274\300\312\246\273\024A+<\304\317\350\274\233\363\200;V\310\314\275Z\004X\272\210)c=\276\360\016\275\3369\036=\202\023\240\275\222\233(;\312\240\230=t\026\'\275Z\241|\274\025\271\201=\206\351*=\036\016\263=3a\201\275J\204Z=\023\026\214=\202\264/=^\236\020\275\360\255\210\275i\217\272<pb\260\274B\300\230:\3778\262<5\223\324\273\235\027H=M>u<\321\220V=5\315\257=+=m;\237\014\033=_\026Q\275\\T\217\275\020\323\237\274\347\216\337;\377\250\026=\021*\225\274\363\005\235\275\\\332\341=\016\207B\274Q\336\375\273\370\032\201=\3116\216\275\t;0<\253\2306=\360\263\244\2735`Z=3\023\030\274\245\020\245\274\232G#=\335>\202\273\255a\261<v~\216=\340\016O\274\004\325p\275\022\0142\274\350^\027\275\372\257\031<\314\360\221\274\265C\t\275\366\006\017<ep\206=\216\351w\275\323<\345<YB\223=/\310\r=\266\314\355\274u\270_=ek\213=9\303w\275/\023\030\274+c\364\274u{\323\274\312,8\275\316xN\274\316=\'\274X\3674=\'yP=\230/f\275\201\347\013=\244\341a\275O\026U\273\033D\372<\255\365\007=\345L\272\273(\020\224<\220\200\337<=\265\003\275m\016\373<\217\227\227\275\215\345\351\275\203\344\315\274\361gU=\303Z~=\357\267\003<\236Q\212\274J,\206=\322QN=pn\377<\243\367\010;i\253*\273\244%(>T\243\001\274\210\007\251=s&\177\274\276\206\235< \313x<C\374\220\274\261\300\307\274\324\177L=,gr<\020\025\302=\261c\251=8\367\205<\236\273=\275,&p<\216\000\014=\360\025\350\274Wf\336<\356#\254<\020\203\333;Ip\334=|\235\026<\241\344\n=\2121\002=\177\033&==f\017\275\242\373J=#\177\231\275\371\212\2669!\336\274=\246\007Z=+f\016;\000\300\344\275\213U\205\275i\307\354<\'s\372\274\214a\300\272\303@\345<\232\360\025=)\025x<\230\317\221;\257 .\274\013\370\236\274\rW\001=\206\266\202=\324\215\264\274[\317~\274\214\320\300\274\206\350b=th\377<\035\235\235\274+\346\204\275}\234W=\370\\\206<\212\221s\274\014E\252\271/\313N=&[t=\324\021V=\324\316\201=\352\032\332;uV\325\273],C\275\035\0344\275W}\226\275l\310\035<^4\026=\327;\277<\302\254 \275mz&\275\036`\001=\342J\274<\375\344\354\274\256_\260\275S`\302;<\2261=Ok\272\275r\217Q;\036u\022=\266M\250<\007`\253\275\205\214q\274I\256q=nx\305=\243\237m<xw:=\300\253\331<\317X\322<\365\215%\274\227\177\025\2749\222J\275\037\020\271\274l\372\017<\356Z\273\273\333\252r<t\203p\274M\\S9\364\206\005<\027\202\376\274y\217\037\274~\362\221;\003a\346=y\302\234;b\002\274<\016\001\201\275J$\273=H\247\014<\366\331\002\275RI\024=g\214\000<S\261\250\275\037A\013\274\313\034\201\274\222M\210\27507d=!\327\001=\230H.=\206\237?\275\367\375\032=He=\275\rD!\274\305\367{\275\017^\246\267\230\222\031\273\001\':<Q\202\236<\266\210J<\351\354d\275\202\327f\274F\006d<\320\013\315\273\312\372\322\272qg6\274(*\254=5\310O\273\352\342\243<Zk\274\274\336\203\234<\374\373\205\274\322\031~={Nt\275\226\001\225\275\002\314\273\274\002Qn\275^gM\274\177\370\256<W\225\367;\177La<V!\357\274\262\206\312\275(\253\024\275\025\005X\275\376\332\004\273\363D.<\302v:<$\304\004\275\026\261\006=\301\025\035=\327\204\021=<\016X\274q\355\267\275\364\3121=\030\354\241\274 \227\210\275\321\340U=.\367\211\274\027\002\236\273IW\226\274\302\236\305=\274\214\304;,\303_=0^|\275\255\332<=4C\222=3@-\275\007m\004\275i\224@=\323\036\036=^W*\273\nk;=\305 \221<z+\224<\232~e<\023\372\020=\337\020^\275\263\027J<\373\316x\274\226\034\372<&\242\311=\356%\234\274\'\230s\274\013\341+\274C\345\007=\360\3352\275\227\033\211\275\017\003@\275\347O\210\275X\200F\275\213\241\022<~\262\022<\212m\260\274\261sK<\342?\002\275\014\3370;\344\376B\275]7\307=\344\342\313;\"]\224<\033#M<6\304H\275\"\301#\275-\206q=PR\207=\ttr=\353\276\230\274\257!/=hVm;\260\265\024=\356Y\204=\353\346d\275\n+\030<\353\024H\273K8\256=\362t\231\274\233Er=\"\223\233\275\235+Y\275\233?r=8\350\214\274\235\252\252<\313\244c=\250\341K<@U\333\274\364\230\020\275,c\251\274\364>t<\0269\275\272\377\2077=Vv\343<%@\212\273\320\365\034<@+\371<\270\224\365=\222K\000<\312\310\204=\020\250i=D9@\275\034h\360\274\336\373D\275?[\276\274\324.y\275\267\317m\275\246\227B<\006\235\303;\204\232t=\321\274<=\240u\317<X\335;\275{\033\203\274\372\371\240\2752\261\324<\013\001\336\274\200,\n=\022\006\010\275\212\336A<e\275\014\275\323\3772\275\tV\275<\212\321c\275\364\224\243=\001u\326<\'#\006=\243\006\377<\262\2728\275\350\3248\274]\000\245=\216\241\320\274\313\265\361<\333\301\214=4\243E=F\267-\275\272\230\346\274x\2321\2735\233g<\016\021\307<\020-!=\212h\330;\272|\212\273\317\273\362\274r\360\023<\364\242\231\275w\235\201;\'\216\022\274\374\334\325\274\344\354U<<\020\261;\370\321\305\275\206\334\026\275-fr\275\2235G=\'0\'=\244\016e\275\213\325\215\274{\361\314;\356#D=\\\010\214\273-%\003\273\032\241\224<\311\337\333\273c\215\317\273\0312[=\2727\363<\204\244]<a$i\275\325\243\277=\275\247K\273\013g\014\274{D=\275Ws\221\275\357\003E<\006`\265<\365=\251=\203\231_=\347\362\312<\360\331\267<L\'\226\275h$J<\333\267r\275\"\002\253<\333\024\r<\343\333\203<s\021\240;\347s\010=\205\2051=\325)\\\274Zj\273\274q8\231\275\251\345\371\274H\222\005=S \216<\301\262\021<u\315P\274m-\023<\252\367G\275\251{\274\274\331\350\214=\243YW<\250\324\251;\313\025\253<\232s\303<GE6=\230p\031=\243b\027=\320O\033\275,;\027=\347q\357<\301\344%\275{;=<\324\361\234\275\017u\275<\032\336\254\274$\rF<\263\220-\274),b\273I\307\245=73 <\246\250\013=G\036\222\275Y.\010=\n\351)=3\024\005\274Kl9\274TV\037\275\275\030\204<\341\272\306\274\275\265;=\257\337\020\274\323(\231\2752n\341<r^\272<\227\027\353;ns\224\274\311\034\251=\276\341D=\266\210~<\356\316{\275\333\334t\275\177\235\035=\361\214w=A\330\303=.\0376=6\305\251;\032\256\216;\022$f=\2148g<\005\356\215\273h\224\004\271n\342k\274\303I\262\274(6$=\323<4\274\024\275\251<M\226J<\002\370\341\274S\223v\275Q\357@\275\310\2770=1*\023=\360.\315\274^:v=\240.\257\274\200\033)\275\254\014\246\275\"B/\274\273+r\274\317\223)=\014\006\216\274\350\311\353\274\265\266\314=\306 \273\274\262\203`=\222\265\356;\276\201\355\274\005\214X=\263.\000=>TW\275\351\223\366<\024\302-\275k\265\033\275\356\256\216=D\032\216\274f\250\276\274\033D\237\273\203\371\320<~\231\020\275)\201\250\275\013\371\"\275GjM<\022\222V=i\023\276=;r8:\203\211A\275\225\026\035>B\250\016=A\233\236=\337\025c<}\307\302;kA\272\274\\\304\t;6\205\247=\247\274;\275U\365\224<W\247\031\275\356\312\"\274\242\274h\272\177\213[=\277\035\251\273\2526\002\275\2535\035<\260\346\223\275\334\250&\275\014\030$=\022!\3069\234V\003\275\374\003*\275\037\224,=e\232\262<h5\254\271\274P\216\275v\351|<\001\035)\275\264\341\241\275\273\307\376\274`\r\266\275\252a\007=\017\246/=\222g\213\275\263>B\273\260s\303<\032\016\256<\t{\247<\266\352A\275\275k\346<\352\311\254\274\006u-=n\032\001;^\376H\2756tj\274\377\355=:_\341\001>R\247\334:>\205<=\371g\204\275Lp\203\274K,\007\275\037\367\213=\016\317:<\364\205\n\275\350A:\275\2344\327=\315\010R\275\346\265\034<l\035\007=sTJ<.\334\204\275\277\330\246;\342D\000\276\335\001\311;\334\256\301\275\230\310v\2746\002S=p@L;\322\221\227<T@*\275P\251\220=\323,\337;\2207S\275\317+\234\271\002\277\036=\365\314\301\274k\377\366;,x\334:\222\210Y\275\202\2428=\215\372\260\273\226\3425=\376\200<\2757n\227\274~e+\274\010\252\016=\261\205\234\274\204\367\230\2747f\251<W9\234\274\220\331\373<8^49H\226A=\377\210B\272\332\333Y<(\306;\275\"u\002=n\025\3669\n$\230\274x\225\356<E\251\036\274\264\351\311<\234\305Q\274\026\035\350\272\'^\005=\037\003\240<\031\001\207<=\341\270\274\252B\267\273\263\017\346\274g=B\275m\273\202\274Gl :iI\214<\031\004\326\273\312yX=7\346\010<\246\375g=\305\242\005=v\202\200\275\034\027\025\275\020P\246\275lt\263=\301M\\=J\r7\275\375\003/=\203\372\177=\325\274\247<\335\333\256=[\"\010\2743%5<Mu\027\275\301i=<\263H\236\274\000\002\325<\366\217\211\275\312\2242\273c3\206=\211\233l\275 4\014\275S\'\360<-@\234<\355u^\275\035\314)=\326\353-=\241~\216\274\317\316\274\275\264gC\2746\023B\275j\225\343\274\304;\327\274\300\236\025=\352d\235;\341\221V=Y\315\204=*\362\002;\2208\267\275\034\322\\\275Y\337/<e\272\252<\203\272T<3\214!<.\024\025=\232\n\n\275\231Y1\275I\r\376<`\215i;\010\240\246<d\262\210=\026b7\275\251.\251=@\305]\273S\255|\274I\374\n=\334K\351<\2235\211\274\347\2733\274\365D \274u^e9A\nP\275y\267\204\271t\207\354\2747S\262\274\221\371\213\274\356&/<\3622\025\275\203\206\234\275\312#\034;\333\267\032=\006\033\250\275\003\262U\274{\342$\275\341\026\220\275^\031\037=\374\223\256\273u8\225\274\"\377\340<B\003\305\274\372\036?=\245\215V\275\303Q\325\274\234\3436=\351\324\346\274!a#;S O=*\036\212\274\340o\037=F?\231=L-\374\2720\343-\275\262\337\257=\202\021+<^\353_\275\335\2770\275\2157\270\274\330\207\306<O5\201<\242\245G=\251\241~\273\013\270\206\274\256\035Z=.&\213\274\252%\233<\025;9<3\\F\274\373\330\310=9\020V\275\241\237\222\274u\243\320<\250\322B=\204\343X\274\r\013\274\274\320\300!<\207\3536=n\326\262\274&\0178\275\002\3710\275\207\253D=\322\366?\274\311C\344\274\243\344\026\275:\355\'\275\016\030\354\274\tM\333<\2631\232\275|\nW=\212(\344;s\"\334\272\330L9\275\332\317\305\274\361\225\003\275O\371\005;\373\251@:\215\204?<\245y\321\273\346&\247\274\005\260\231=\244\307\275\274\271\224\261<A\'w\273~\341\221;\377~\233<\n\0337\275\361\226\263\275\247\313\371\274\340 \361<0\013\026=(\336\007;\014-\244<W\203M\275^\355\213=F\207\241\273\307\007\346\273l\307\367\272\377\334\326\274\362\307\217\275\346\350\204\275z\307_=.c\323\274I\361\002\274\304\221\315=\003\2105=YT;\275,^==\323\310\234<\242\244@\273\335a\221\275\203\340\362\274Nb\242=2\372\342\273\3541\230\275k\335\374\27419\312\274\342JB=\260G\033\275\303\037\325\275<\271\014=\022)\352=\270\334\315:\026\t6;\'\342\316\274\350\034\365=\220\036\251\274\360\002\205\2743\177\377< K\227\275\246)\254=\300\354\360<\246N\366\273]\307\"=\240\307\276;\357\305V<\257\313n=\243\343\023<\314\204\236<\221\016\207=;\255z=\222\315\237\273\272\267\214;Mzr=$\345u\275li\020=\005a\325\275j\206\327\273\024\376\215\275\230\331\203=\277^\016\274w*j\275=\354\027=\305O\225=*\372\030=\344\233\305<\206hQ\275\255C\257=\330\202.;\007\250\330<\337\270\177=b\267\333\273\3121\023\275\372\370d<d\347\003=*\003\254\275\017\025\302\273K\322\237=1\261\244\273Z`s=\326\035\r\274\323\335q\275p_\271=\222z\256<\210\316\020\276K\033I\274K\214\032\275\351*w<\3676\376=\211)8=\335^\302\273\230\344=\275\252\254\034\275\002\250\247\274\000\341\317\275\325Q\265=\216\230\312;\021\3344;\277\036\n;\t\367}\275\250\205\254\275l\331\275<\306\366h=.\377d\274\251\330\006=\217\323\313\274!;1=\235~\205=\257\214\235\274\342\300<<\376\363\230:L\224\261\275=\"!\273]\304\353<\201\362\032=4\364;\275C#\002\275\335{^\275\351\020\025=\344\262\261<\\\234o=\334\320-\274\204\0026\274#YU\275I\020I\2747,\355:\274&\232\273M\266\214=\\7\277;\016+\205;&\213o;\001g*\274^\364l=\030S\364;\247\240\275\275\232\021\205<A\027!\274\224j\277\274\002\312g<\265<L\275\267\334\022\275\250s\232<f\032\210=\342\355\273<\314}q\275\007\241\373\273\205|\326\274\2726[\275\357h\263\274\216\252t=\233\222?;=p=\275\002\233\242;[\370\206\275,\221\035\275\302u[=\306cP\275\342\207\205\274\t\352\002\275\357\212\232\275\372\276\341\274)\001;=E\276i\275\217E\201\274V\312\330;\254\267\200=\336\206I<\252g5;\226\024*=\304\353\272\275\032TA\274\234c\360:a\322\021\275\317\254\277=g\377\206=.\237$<\030\311\262\273\r\211g\274`\335o=B\036\250<P]=\275q\207\303\274\234\233\207\274 \226t=<\022\032\275\302\370 \2736p\261<\322\243\r\275\022\216\036=q\\7=\253\357#=B\350\373<\346\217$\274\374\365\265\275~\005\211<\014\003\354:-i\346;\2563\021=`\314\t\275\2612\013<\233=\233\274am\217:\325o\307\274\245@\220;C1\267<\343\325]<6w\022\275n\366\332\274\347\232\255=\267\276n\274A\324!\271\2315^\275\274\002\234\274\316\3116=\253I\303<5\227\240=R<\306<\333\365\202=\221\'\211\2758\355_\275*\203\366:1P\002\274>\215\241=}%\220=\376%\020=|lW\274s\013l\274\323\232\316\273B_\220;1\326\223=\270\0258=\301g:\273\245@\256<I\034\203<\326[\361<\371\034\260=R\337\014=\310\0033\275r\207\232;Jx\261<\303\006\370\274\365\025\005<[U\\\275Z\'\177\274\306A\343<u`\263=\017\336*\275\221!\235<\343B\341\274O`\030\274\265\253\000<J\207\214:\206!\301<y\306\222=,\257L\275Y\341\342:\006*\006=\027\203\277\274v\330\265<\217\277\265=\273(\\\275\370,\037=\300@(\275^z\231\274\016\250\021=\202\274+\273\354\226-=\304=\324<z<\266;\302/\201\275\004\2553=\220\227\206;#\264\017:\200\272G:5|\010\275K\243\333<\016\026%=\013\221\365\274z\217\362\274Bnd=\274>\201=T\220\301<\334\035\001=\264\244\213=\001\242\255=q+\234\274\270\201\212\275CA\334\274\335\360f\2754\230t\274\371\334\n\275\027\2345\275\014\342\325\274\\\004\212\275\242\340\021\275\370\240#\273o|\033\275\231f$\275\315\035\242<\3143\033=}\377\014<\t0R\272\331\t\246:\203w\215\275:\334\323<\032\204\374<#\377\240=\325\004\256\272\247\371\200=\243o8=B\362<\275\320\300n=F\363\222\275X\327\007=!\036\372\274\305\321\021=\275\030\003=\'\235h<2y\201=/V\317<\274\244\021\274\364\371\025=O\256\365\274\254\273\014=i*&\2748\3108\275\233ev=\365\264\177<\216b\202\274t\223\326<\327a\236\2753\036\205=i\331;=T\315t\275C\000\220=\271\331\362<\252hb=\344t\340\272\037g%=F<|;\304\037\177<\314\221\266=QV\225\272\222\302\276=3\002\243\275e\357;=\224\273\376\273\266\016\264\275\027\267\337=j\225\004\275\366\323Y\274\341l\230\274\204\177\334\274\226H\352\274YY+<\252.\027=\366\224\260\274\371\007\312\274\213\247\261=\322\221\352<A`\024;\034SE\273\322]f=\223\037(\275Xtd\274\'Z\3339\231\351\033\275k\013\255\275\t\304\342<\205\225\r<\351{\020<]\264\213\274h\243O<\234\037G\274/g\213\273\304 \322\274\262\327\322=f\2130\271\202\\`=\025\366\330<\270>\320<\231\376\221<}\370\2558\n\017\227=\177\233\252=Usp\273\016\006\245\274\205\336\301;\2527c\272k\201\322<\275\336v\275\340m)\275\213Dc\274\346d\n=t\203,\275\"zU\275\242n\223;\tK\353;Z\316\021\274(\252\335<\223\312\250=\323\233~<\247:\310\274s\242\223\274\305,7:\025\201\021\275\345R`\274_\331@;\0249\005\275\301\307==\231C{\273\336\030\027=\260tG<)\233l\275~\317;=5\316\275\274\245\325\303<ckS=]\316]=s\025\210\274\264\347\201=i\014\261=\\\020\014\275\335l\242<\357\'\266\273`#\347<s\002\235<\010V\243;\352z8\275\326a\251=\310\313`\275\372\t)=\220\036\t<-\2138\275\372\2437\273\006\326\232<\302\332\364<\316z\200\275yV\260=C\024\355\273\003S&=\213q\217=\001-\230\274\247R\\=\266Fd=\254\357Q\275\'1\r=\245\311\033\275J\004\224\274\360\260\225<F\247H<\340\262\016\275\311\0221\275\017[\223<\231*N=\237\030\214<\326$n;\254d\010\275\003\332<<v\032\242=\371\277\276\275\317\363*\275,(z\274!\007\223\274:\254\302<\245\271%\275N\320Q=9\324^:\345\013g=0\337_=\217\362\035=\255\234\301\275\323\013\314;\345q\255\2752\244*=\375h\370<\317\260\352\274\314\325\264\274\211,\033=~\n\262\274$\275\214=m^\265\275T\271\200;\201\2157\274\313\337\301;\253\020!=\023 \314<\0107\213<\236\213\237=\373\036]\274\003\324}\275z\237\005=\232G5\275\241W\251<HL\220=\352g\240\275G\323K;@\351/;\333G\010\274*Gw;W\376\213;(\264\250\274\353\264&=xG\235<\243\304\230\274\374\3044<\n\345j\275h\014)\275H}\266<`\356\340;\000\033\260=\351\035\025;%/{=\002\243 \275\260\177z\275\374\261:=\357\036\031=46h;\333D\005\275\257|N\274\222`\177=v,\352<\277\233};\371[\t\275p\251\255=\272\213\221=\276/\203=\232\365\276<\250\320\321:\365\024P\275t#Q<\003I\225<\371\372\235\275\372.\327=5>\331\274\211I\256\275s\343\026\275\311\265w\274\217\231\004<\353\306\354\274\334\260\266\274\231k>\275\346I5\275\306n\256;e\371S\275\202\3134=\355\3654\275\017\017l<x\252\233<\256\211\214\274h\002\220\274X\037\272=\277;i\273\203\373\'=\3516\213\275\007\225E<\361\201\235<\275\375r\273\004B\303\275\212t\247\274N\345,\275\002\3416\275C\344S=\234?\237<cz3=M\351\273\272\344\355\340<\235h9=\251x;\275\206\ro<WV\267;\265\361\372\275\235\265P=\307x\275=\n\353\211\275\225\0234=Pz\343\275\232#<<\013\270o=x*}<\251\305\024;/\224[\275\305!\260;\177\007\003=3\'\335\2733\267\233\275\001\355\271=\331D\235<\263*\343<9\255k\275\230\222H=\0160\264<8)\355<\362\027\214=j=\206\275@\363*\275_\276\222;1 \307\274\356I,<z\030\220<\212\333\250=\302\257\246<\327$\206=\351\311\236\273R\243\267\274\331\003\343\2753\246S\275s\327\037\274\261\205H\271\336\210d\275\023\230L=\223@\241\273\020\333\004:\034\360\n\275\233\3500=\344m\310<\357\320\310=\327Z\003<a\222U<\360\267C<[\277\220\2750\240\336<U\021\007\274n\257\224\275\270\262L\275\310\360g=\365\254\203=\016\335\027\274\246M\n<m\272\335\273y\016\227=\004\243\233\275\005\316#\275H\212\326\274\027\005\243;\246e\034\275\210dS\274 \333\023\274VG\005=\340m\202<\272\035\010=\226\303o=h\303C<<\221\375<z\003\255=\024\205\257=\007\237(\274+B\211=tz==\251\272T\275\223\nb<0B\370\274U\251\327=\270+\022=\310\022\255\275\003\315\3349?+\203\275\316\216\204<\233*\034=\361\370t\274\372\225\001<\376R\341<\377@\247=\301\365G<\204\"G=\313e\345\275\336\300\302=\364J\372\272Q\361[\275\232\006\360<\266\215\314=\354O\217\274f\352\024=d\350\022=H\317f=\233\272\350<\252N>=D\245p\2741u]<h\212\257<\354#\0349|\'\257\274X\241\335<|E\"\275\350\236<\275\250(\220=\252\247\214<\305ix;\262\001\335\272xW\037\275\0279\213<\246\267Q\274\326\322q=\003],\274\007`\245<\266\367\032>\302\3534\274\373\360L\275\262qZ\275Os\237<\002v;:\022\312g<\260P\270<\nY\214=\370\265s=\221G\006\275$!\276\273\250\322\373< NI=pnr=n\026\361\274\274G\337;\300\376\222\275\301\027!=M\212\241\2744n3\273\316~\377<\320S\030\275q\322l<E\207#\275\200\217\022\274\351\264,\275*\2171\273\361\236\275\275X\032\231;\271\205\243<F\035x\274c(\231\273F\334\234\274\274\362)=\013\267~=\034F\314\274\236?_=e\372K\274\352 \211=\026\034\304;\317\350\005=\2604\312\274\357\'7<\312\001N=\031\360\215\274<-\360\274[0B=z\363`<\365K1\275(\001g;\374z\227\274!\235\023\2752#\235<\252\250\220\275%\367\366\274Bq\204\274D\317\203\275\210k\364<e`B<\224\205v=\013\004\002\275\201\244a<\346d\247\274\253\033>\275\035we<\375n\253\274eA,=\205\214\027\275:`\n=\223\3474=O2h\275\377\231\034\275V\275\005=\341x\023;\225\261\331<+\206\215\272\035Z\342\274\215|\257<\235\016\223=\024\317\353\274\307\265a=\340C{;\037\212G\275\3764\037\275\376\022\027\275\377\346X=+\004\200\274\371\350>;\337\246\257\275b\203<<m\264\345\274\356\253+\273\233\233\306\274Bb\351<:i\366<Q 5<F\001l\273)\371R=lo\244\275\320\263\370;\242\337\260\275\272\2721=\232\211i\275\233\356E\274\354\261K\274S\344\r\275r=\321:\335/u\275\304\306\000=Z\'#\274\364\374*=]\260c<T\334\003\274\025\365\204\272\n~h<\271\352\002\273\343\223R=\275*u\274U3\n\275\0175R\273(B\242;x.\266;\244S\034=!$r\275\330\246/=\033\331\227\274\242\225\214<\231\333\220\274F\235\341\273Nav=p\037\214\274\214gk=\2150v=8u\265;C\370\200=H7\244\274\034W\345\274\203\215>\275\334\224B=\207\252\277<\223f2\275<\254T\275-X\245<\270hC;\340h\246<\330\245m=\373@\277\274>OA\275r\345\212\274\226\313\034\275\360\257q<u\374\232;\000\242\200\274?\275\013=*\205\201\275\206\265\036=s\017\250;\213LC\274b\004\207\2759\223\252\274m\332\275<G<\323\275\313\201I=\247@\345<H\275\362;h\263_=\210=\371:\014\265\242\275\200`0=t\t7=\201\324b<\307\246\020=S\235J\275}\306\233\274\210+\201<\034\247\\<L\241\342\274Q\243b\275\024\327\247\274\326K\215<qu\034=\256\306h=\311t\"<RzU\274\206\320\017<\366\002 \273A\345\003=0\000\'=\375t&\275\311)\215\275th\323;Y\240\247:\302\361\364<\354\312\305\275J\343I\2734\242\264<\214\265T:8\021\343\273_\321\017\273)\370\035\275\031\2751\275\024${\271r\265\350\274\227\270\314\273\204\270\202=Y\242\300\274v\033r=\241\243\241<;\344:\275~(\240\274\216\205b<&N7=\261\233j<?\251\326\274&\2706;\357\361\357\274\346\275\036=\247&\251<\356\262!\274\305\345M\274}\023\013\274\335m\374;c9\375\274\221\246\221\2742\013\333;;`e\275<\227z=\252\021\034\275\320\211\024\274\304\242\271=\304\t\024=&`\000\2759W\222\275\3660\233;n\"\017>!\206\223\275\313!\000\274\334\270\301\274\027\331\230<\016QW\275p\"\276\275B\226\005\276\210\330\217\273\n/{\274o\250\036=\206\275G\275\243\344G<\354\333\003\275t-~\275\332\325\341\2753]\003<FZ+\275\375\261\020=\312\356)\274\272\007\203=\256P\214=\n\322\';\224@\202\273\371\255$\275\230\365&<-h\271<\201\206F\274\200Q\000\274\250U\027=)\t\222\274\207\005\215=\346\020.<\2316u\275\272\2018=zf\346<B\233q\273M\243\271\275H\313\005\275\217D(\275/\350I\274wR\207\275\305n}=\323\373o=\327\307\313=\324\030\204\274/\200c<7\205&\273\231\007\210\274\320\267\216\275\307c\220\275u\301I\275Vj`=\003\316\217=\0342\273\274Kd\320\274\344\214e\274\304\262\005\274\251\320,=\331C\200\275\262\231\020\273~\367i\275\263\211)\275\356\235F<\233E\024\275<\217\311\274\036\214\224\274\311>\261=\177\306c\275\316*C\275\215\217\213\273\263\204\235<\\\212\023\276\347\320\344<@OU\275\266\007\006\274\367\250\212\273\341\253]=b\031\260<\223\375\360\273[\251\t\275@v$\275\323K\205=\025\203\r\275z4\214\275\346o\243\274\351\306\035:r*\240;\350\336o\275\232\251\016\275\373a3==D\324<\364\002\265\275\241N<=\353\202\007\275T\317\031\274\376\270\037<N\000\005=n+\225;\202\242\003=\016I9<\263\221B\275\310\344\026>\312{\325\273z7\336\274k\025\265=a\361\335\274\331E\016\276\254\303\220=\350\275R\275L%\221=\216\341o\275\006a\0029\215\262J=\367\371\005<\236*\334=\350\244\345\274\365\334J\275\332\310\017=\270\000$=&y\001=\021\247\304<|\264\"\275&Z\205\275K\301\277<\204\253l=\236\354\007\275s\031\250\273!\246\021\275\250#\227;\233VO=\223\307\200\274\235f-=\203$\274\273\357\333O\275\277\003p\275A7\035=\331H\201\275/W\020\274(a{=c\316p<\305ZJ\275\333\253\234=\211x$\275\034\274\005\275\013\2205=\307$\360:\323\r[\275\242\334\270=\372\251P<\377\211\223\274l\025\034\274,\275\340=\232\361\256<\373\304|\275\375jU\274|\356\007\275\\:\226\275&\010\"=\271\323\022<\372n\201\274K\2311=\320\373\231\274\376&{\2736M5\274\277\321\3639c\241\244\273\336\215Q\274\001\370=\274\360@\312:1-\313<\303=\237=?.h\274\324\027?\273\332\246\354\273Zzv\275\362f\221=\233`2\2758\342g\275_]j<\312^\020=\0029\261\274\307^\022\274a\320\177<C\240\023\275\376\2162=e\335?\274HS\244=f\336\257=M\236\013=-\222\230<;\372\235\275J\000G\275\024\221\223<\301\324y;T\"\237\274\311:\316\272t\3530\275\330\367\036=U\366\312\275*L\240=:H\235\275C\022!\275\243\206\023=B\032.\275\243,\310<\211\310l=c\347\325\273\271b\220=\341\272\217\273\300\224\207<\236N\311\275\271\037w\275\256\276\013<\371\376$=\312\001\3359\031\007\242\275\273\202V\275+\327\202<pIU=\247\342\'=X]\361:g\245A=\227y3\274\0300\330<\347\245`\275r=I\275|\374\032<\265b\261\274\246rb\275\325\332~\274\013m\027\275\014\016B=a\0056\2755Z`=\325\353\374;\361c\330\273\312?\202\274\202_\203\275\027\257k=\217\272\204=-c\232\274C-\025\275\352\244\263\274\232\343X\275\017\001[\275-.\232=w\360F\275\332g=\272q\256\327\274\017K\204\273\361\243;\275T!\026\274\n\367\276\274\354\0175<\302\225\273=IMg<U\204\232\274u\253\317<n\322\213<\276\310\210\274#v\312\273qS\030=\226g\241<\235*A\275x\314\240=\242\327H\275`\255\345<\270\"\332\274\213\037\200\275\265Q\271<\303v\017;\356Ht;n\021\322;O\231\342\275\366s\241\274\305t\236<B\014\016\274\034\346B\275:\274I=Q\021\217\274X\013C\275\207\230\344\273\243D\241<\266\022\261\2758+j<\nP\365<\007\246\247\274\271\222\255\273\331\321\251\274\335D\270<|\222\";\322\301\374\274(ne={QZ\275$un\275\003\330\002=\214`i<n\372Q\275\036\352M\272\347\020\363;Q\206\036=\251\212\017=ll\233<\275\014\346<\331\207\200\275\241\"\277=qd\276<u\345\265<\\~m=W\372E\273-\246\000\275\313Lz=\344\226\026\275\362\\\030\271*1~<\324;\344\275\271\316\310\274\\\314T\2752\021\r<\030\305\316<U\323\250\273\343.s\275\304y\261\275\212r)=\001\234\225\272/\237\300\274\223}.\275\225V/\275\273\350\021\274_0\211\275\332\024\377<\016\352\271\274\3068\232\275\320aB\2754\302\302\273\264\032\265\273x\313t<\230{\272<I\232]=\335&\260\275\343\246\260\275&\013\005\275\310c*\274\214z\355;h\265l=-\036\025\275(\246\301<\321\313\314\274\250\330}\273a|3\275g}\221<\342|h;\266\023n\275?\031\375<%\365[=\031(c\275\017\343\021\275\237\211@\275jK\030=\377\237\022=\327\024}<\035B\264:\376\021\212\275\363\255\002\274\273\231\224<\237\253\004=G\355\037=UR\n;\250\267}\275m\343\023\275\233\347\341<@k\271=)p&<\376z|:\250\023\350:g\030\350\273\002je=\022\316\370=\002\313\302<\341;\206<\227\206\205=pJ$\275\336\004\236:\347\245\256=\343F\207\275,\025\317\2746\213R\274\035*\314\274\221\206\213\275\0177\315\2735\267\212<;\240\223\275^\2334\2754u\n=\n\216\233<Z\037\331=\316\230M\274\267\271\340<\\\267\244<\000cN=\372\315\364<\220\022\n\275\371\376\265\275]\222\356<&\024J<\026~s=\266\3442\273\302\032\334:\341\323\213\274\220ik=o\267b\275\0071\215:R9\302<\376?\201<\007\354\355\274P\0375\275\333\'\253\274\266\234\207<\013\177\335\2747P\254\2754\333\004>b\005\220\275\247\335\234=\177\222\252\275P9\211\274\242kr<\r_2=\305\264\376\274\003\373\347<\252\260^\275\303TW=\2610G:A?\023\275\341\352\320;\234f\006=3\371\303<BB\366<\rH3=\177\344h\274\337M\326\274C\334\365\274:\264+\275\004\2075<\014.\312\274\316j\340<9\005><E\240\014<s\001K=\006\220\244\275\005\266\246;\210k7=\207\027\005=<\306\366\273\337_p\273m\253\214\270\002\246i=\032\226I\275\031)\337\274\376u\207\2751\221\303\274EP\025\275\024\234\221<i$\234\274q\027\000\273\242x\252<\227\213\003\275Q%\307<L\235p\275u9\n\275w\201\342\274\334\212\266\274\277\305/<\345\261\216\274\254n\300<6\316<=0\020\216\275!\2463<\236\334\374\273\205L+\275=ZR= \3433\275yZ\253\274\nI\336<$\201f=\312U\342\275\313\226\265<K\037>\2753\025\001\276\305+K\275\334G)\274L\261\354<\377\321v\2758\255\305\273\310\327\033=\177\214F<\216C\020\275\334\272N\274\353\002\346\274\363\361\210<\363Y\3109\360Tt=\377`4\275P\357\313\274\306f\200<\361\214e\275\316Q\332<\345\212\323:\216\225\301=\024\254-=\016z\210\274\255\021(=\324Ea\274\354&\231\274+\020\013\275\001\201S<\032\372\203=e\314\031<\340\205\320\274T\374\223<T\030a=\376\360V\275j\232\376\272\371H\030\275\342\303D\275\'\204q=\212\307n\274`k5\275\320w\231\275\266\217\230=\277A\231=v\340W<&\006\036<\354n\370<\241\211\017;\313 \246=\241Y\002<\227\2732=\223\000\255\273\025i\256\275\362\010\025\275\276\232\006<m\233\242=\017\262k\274}\033H\273\345\014/<\312\353(\275\217Xk\274\026\340\010=\206t\320\275U\326\366\270ZW\n<\036\317Y\274\222\254$\275)\257S\274\305&K\274\036\346T=\020\373\200=\313\341\266</\346\372<\223\313\025;\364Gc\274\226\203\250=\306\272\007<\017\201\257\275j\262\017\275\207[\351\274\0377\\=E\177\353:t\323\017\274O\374%\274\366V-=\005&\236\274<JF=\233\361\2059\300\276\256<LC\333=\266\323\021<\233\000#\2753\375n<\262,\256\275\257$\025\276\013$_\275b}\030\275|\357\204\273\311\207\226=\007\2065=D\317\216=\335\316\230\275\215G\027<E\302Z\275\002\322\260=\212\337$=j\301{=\017\355\030=\r\376\367<\354\t~=j\250\334=\3053\204\275\024\264\247\275\247@\230=H1^;B\001<\275p\030K=\354\023\224<B\002\272<g\215\366<\021\263\002\275\272gF\275\354\255~<2\006\242;\332E\024\274\316\346P=\210(^\275\203\305\234\275\211\3301=\203\004\271=s\030+\275\336j\347\275\265\002\256\275\262\017\203=\272_u\275I`\006<\354\270\340\275d\363\206<&\373\317<\252\334+\273c\256t\274\201@\375<9\230c=\353\007\000=~\250%<0\270\200=\265\0232\275\337\t\273=&`\001\275\0171u<\361u\016\273\214\242\373\273\267\313>\275\260r\300;\321]4\275\0139w\275\354\'J=\356G\021=\n\325\205\275y\023\343;\031\257:<\210\254Q<[\242\252\2714U\313<\332&~<k\254\263\274\250p\232<\271\\\036<\307,G\275\265\277\347\274\\\237\200<\257n5\275\234\372t<S\347A=\372f[=J\330\030=Y\247\353<\\0G;iP\263=\303~P=\331\351\347\274\235\224L<\2060\035\274\005!K<\303\256;\275\310\027\334\274m\2250=\251\tr<}\276\200=\330\246\t\275%\250\336\274:\230W<\305\366\035\275\'g\027=&,5\275\2446{\275\3775k\275d\032M\275\314$\010\275\240N\302=\343(\370;\022?/;\211\037\306<Z\216\245\274w\346t<\355\\.\273\371 @<\3335\035\275\276\027\333\273W\032\033=\017\020u=}\014\347<\205\302\321<4\202\014=g\332\306\273\232\277\337\274\202}\213\274\005\214\351<`\214q;\242\241\226\274\246\017\003\274zb\022=~B\310=+p\"\275\264-|\275\323@#=li\354<8=\322=,1m\275\020\243\n\275\020\020Z\275\223\367\232<s\311/=:\212&=\263\301\'\272\245Bg=\277V\336\273!xB\275\246\216E=#\356\225<\341=U=c\362\022=L\342i\275k\353\272<\330\306<<\245/\327=9\223<=, \212\275@,\237\2741\243\033<\\t\207\273\365\\\017<\360,\201<N\022\010\275\303\032\356\273\212\032)=\335}g< s\370<G\266\226=\365&\202\273\016\206a=\037\371\t\275R8\033<\274(\201\275\3450~\274A!\314\274\265\313u<D\236\277\273\236K>;\347rC=\000d#\274\363\2140\273\236\244\212\272\251\203r==/T\274\2717\260<\032fO<\216\021\300;\263\372\n\274\316\306\210\274\t\363\037=\033u{\274m\007\203\275\237\351\030= \377n=`\337<\274p\254S9\0222\033<\245=\352\274\2214I=\'\262z=\270\024\235<\373\212>\273\003\3114\275\230\005 \275g\221\326<\336\211\254\275q22\275\027@\007=\360&o\2757b\"=\343*\007\273\007\244\205\275\204\261|\273\306k8\275X\016\202\275\246\355\005<\240v6=n\310P\274h\305\326\273E\001#\275\267\365\223\274\354\207O\275&\000A<\324?\235=\204\236\365\272\346\272\252=!\207^\273\373\351\331<<>2\275\242\235\014\275k\305\351\274\321\036\031<\234\217\002<-uD=\203\330\246\273\013\277Z\275\270\277\212\275\014[A=]\360\032\275K\364\325=B4\355<\226\177\233\275I*\351;K\313\347\275\371\025\343\275uy\373<=*E\275 \275o\275\302MR=b\177\025\275\224\031G\275\257\\\262\275\353\037|\273\344\315\003=\351\246z\275\300\351\002\273\250\033\213\273K\326\335\273\317#}:\260\301+=\267)\020\275\311Fo\275\324i <\277\251#=G\357\203\274\264\346\020\273\3165\n<y\020\033=\3213\202=\2228\\<\226\367\357\274\230/\354\273r\206n=\204R3=\323{\263\274\242w\340<nBe=I\375\237<\272,`=\177N\003>\252\267k=\2444\200=;4\212=b\207\371\271\256\347\247\274\224r4=\327\276\210\274vL\270\273\237L\305\274O\351p=\004\377\223\274\305\322\254\274u\017\177\274\266\273\017=\205\260P=\252\n\002=\347\006\013\275P\347z:\306o\322\274q\262\352\274\0305\025=f.\301\274\263O\306<\322\353\224\274MD7\275\204\177\201\275\270fw\272o\302\200\275\351\373`\275\303\215\346<k\370\360<\253 \246;[\024\002>mJB=>\211\027\273\376\304x=\326\2413=\366;\315<\224\263\256;N\360\036\274OXc\274\0063\033\275I(><\204\274\'\274\223\266\221\274\342\351\331<\204\355F;\'\317\252\274_~\305\275\023\030\346<\254\275\240\274D\373\346\274\207\227\031\275\014\333]=\256\014C=\264A\263<{\233\265=/\311\321<.\3117=\300\251\001=er&=f\273\021\275\002\"\365;M\022\353<0\233\223:yb\037=\016\375W<\\;\373<\350\302\277<{$E=\242\350\202\274\355\267C=|\216f\275\201>n\275j\334\213<\374\025L=_\335Q=\246P+=~\026\340\274\204\304\024\275\235\223q\275\253\343\331\273Y\000R=\305<\244;\216!\262<2r\375<\371f/\274\007\206\204\275\322\037\242\275Y/\266<\313\304G\275\263\031\340\273AG\t\275\326\331\261\274\310\310\t\275\276\265A=\214\207\227\274-\376|\275B\001\263<k\256\301\275 \211f\273D\006\024\275\333Ze=h\025\006\275R}\341\275\217\320\240<It%\275\224\323\037=\237\254`=\260\225\014=z9u\273\335J\202=<$\341\274#\034\333\274\177js\275k\203r;7#\246\274\033_\206;\237\236\233\275\037\346=\275&\"\321\275q.m\275\236\014l=\276x\206\275oFz\275\266\010;=\225\342\314\273\357Z7\275t\327\004\275W\003\026\275\316B\005\275\372\244w=\317\235\340<F[\247\274\241a\r\2754\276\352\274l\240\373<\227F\254\275\253\330a;a\327\376\274\364\0269\275F\312\001=\207\234C=D\215\022=;\037m=U\202\206\274\234G.\274}\333\312\273\234C\252\275(\252g\275\220\342\312\274\202,\240=\317\324\352<\376\035\270<\\+\030=\300@W<=,v<`\033x<-\267C<x%\014<8\346\244;\277\212\020\275f\003l==\257\360;\217\273!\2740\035\304\275\254\001\030\275\000\243m\274\374S\216\275\344BB=\014?\333\274O{\r;\2444\254=B_\364\274\273\350\266;\316\307\037;\214I\352;\342\032\301\274\210\020\226=\230c]<\334t*=\3216;=\2633\217\271\361\277\257\273[\354\226\275\346t.=\262^ =\361sS=x\327\242\274\236\257:\274!\r5<#\222\372\274\321K\243<z!|=v\016V;\0330v\274P\023z\275e\221\232=\262 %\275\273F\250\275\254T_=\365\022\333;N\375?=l\253\326;\371\312\207\275b\217\002\275A\352\264\275\350fQ=\221\226R=\300\235:<\212\235%=\020s\224\275\331\t\033=\033*\032\273*;\031;Z\276\010=^\244\226\275-\257S\273d\255-\2755N\366<Q!\255=\374\253\301<.K\200\274\307\303\024\275\326\261N\275r\355\261=\037+\201<w\'y\275\354N \275\020W\037<c\271*\275\346\313\220\275\247===\321c\227;\364&\232\2744\361\037<\375\017\301\274i\307\33696\337M\275h,\001>&\026\n<CDc<`\007T<\244\330\273\274\377\034:=(\346\235\275\213^\237\275\256\313\227<\365\016^\273\006\266V\275\336@\227<m%f=\377\305=\274w\357\272=B\346\274\275\312\3313\274&\320*\276\215\031\360;V\014\'\275%\226\263<i\362`=\243e\323;\350K\3579\331\361\317\2747w\243\2751o!=.\025\310\273\242>\224\275H\357\001\275\345\203\253\275Cp\362\274\311\226.;4a\256=\036\014\351<\206\224k<sp\277\274\2556\035\275\347q\213\274*pV\275w\211E=\364=\014=\246\244\300\275\270Q\301\275|\370\"=\0106V<:\245\372<\244Y\365<\241P\337\274\232\377\332;\024\226_\275\351\013\006<\351m\216\275\367?\321<\251\341\241<\257\000;=\014j\210\274\210X\221\274\035w]\275\301M\313<\245s\036\2744\323Z\274+\350\310=_\376\313\274BV\331<\246\021x;;\261\330\272Yd\215\275\272\300N\274\025\312t=&?H\275\256\332\0309&\3116\274\3460\274\273\314\253[=M\001r=\202r\014\275\202\222\200;w\234\030<\212\333\037\274\205\232\034\275\212\216]\273\rf\272\274\201\255};GL\325\275\377\303\004=(7\017\275\361)w8\261\003\260=Z\224U\275\221%o\275v$\025=*5\025<|{\037\275\202$M<\250\321V<\330C\274<\26288;\350\347h\275K\267==zt\205=8\3509\274\021\247\311\274D\371/;z\242\005=\303\312\r\275\374\247\000\274P\347\232=\224\215\375<@\344/=\300\275\037\275\210\276r\274\277\344\345=\242\r\000=\336T\353\274w\260\225\274\214\217\002\275\342\034A\274S\246\031\275\205Q\352<=\325\017\275\256\323\026\275S\237\261<\372U;=\333M\001\275=\2676=\260R.:\323\305\322=\201\232\021=\307.l\274\026@\346;\010\206\311;b\247?=\037\246\334;\344H\354;\257\252 \275G\235\'=\264\314\021<\377\336\031=a{\274\275\r\017\215\274\333.j\275=k*=\277\310s<\303\027\362:\332B\265\274\\&\036\273\317\033#\275\365\345A\275\026g0;\375\261\214=\230rT\273\207\004O=\345F?<Z^W\275\345\325\201=\2272\364\274A:\315<\265\356\266;\225i\216=\312/\215\274\177\034r\273\351\364\001:\t\203~:\373\375\231<\362=\363\274:\335A\275\337\"\023\275V.v=\026%\352\274\\\316U\275&\tp\274\005\237\352<\212iF=\211\303\264\274\253\201\020;G\327\'=\341\017\t=,.\250<o`\247\275\205\0143=\211\221r\275Y\257\331\275L\231p=\340\364\214\275\202\304\203\272\020.N\274\347\257\312\274W\221\233\275\362\025\225\275\3108\206\274\214\034\345;\255\024d\274<\207\032\275U\211-<\271qw\275\026#+<N\306w\27544\355\274\306\0013\274W\355l<\377\263\352<h\253\203=\275q6=\031\222\307<<@\004\274\3528\270\273\343\266\204\274\256U\224=\337\014f\274\355\250\002\274`-\271<\007s\004\274\335\253\311<\335\250\005=\332\023\007\275\362\030\344\273Ke5\275\tf\225;Q\253\205<\036\217I\274\336KC\274\177\275\241\274\337{\302\2712<D\275w\214\017\275\361H\300\274\323T\334\274\327h\200<W\250~=\354;/=\250\200Q\274I\3600\275r@\276=(\355 \272\035\246q<\0356s\273\361\351\352\274kU\313<x\320\306\271)]\261<A\220\220\275V\310I=\317\225\"=\211\202\322;\307g\264;\311<\022<_\230$\275y\342\200\275?\2555\273\202\241\202\274b\362\"=\300\326\246\274Lcm\275\230\205\031\275`!\350<\266(Z\275\236Yb\274\207\236(\273\222G\230<8\2456=B\300\360;;\027\211<=\370\304<8\207\303<\362\375\266<\326-\216<8\n\022\275omq=0\200\273<I\251k<\240\310\214\274\353\010\255=\021\377\230\274<%L\275\351;0\275\230\371\327\274\3375\236<\222P\276\275\002hN=K\256;=\202\365\025\275\302l\023\274\247\234}=@\370\364\274\337\346)\275cy\313\275d\272f=\356=\213=\370_\026=\275B0\275\364\201\223=\030\350\036\275\014\370[\274$\340\r=SO\210\275\230\017\232<\306\246|=\224m\355\274\014\307\006\275\352\224\234<\031l\237=\026a\031\275\023\250\r=\257\311>=\204\266\377;.\341\252=*1<<\206q\234=\317\tT<\242\231\323\273\213~\203<m\370\312\274\034\000\302\274>\315\023\275\217\030\263<\202!\213\274\272\340\217\275\277\307\326<{ 6\275r%\265\272j\236\355\274y\335\034=#\234\346<\257\372\306<\355\323\220\275\2735\240\274\311Z\364<\010\326\221\275\277\234Q\274X\274\177<\341\000\t=p\013\321\272\331G\177<?\263\326<\236\261:\274\017\364\300\274\2215\245\275\257\033&=\303&\372\274@<\364\273\2309L\273\327\241\343\274\240\r\345\274\360ea\274\006\313Z=a \241\275\243\036\300<\255l\262<\332\t\221<\302D\331=A\323\260\273\000\241\300=\274}\330<\250\305\204\274\272,\203<\2559\264\274\266\327\230=\243N\263<\316fh\274\3255}<&2X\274\023O\260\274\265\263\276\274[{\253=>G\324<\315\263\223\274\346v\304\273M\031\336<R\205\214\275T\300\201\274v\316\304<:\362V\274\033~\204=}\206C\275\3358^=5a\364=\307\310h:*\227\254\275(LM\275\030\013o=(D\315\274w\032\265<\266\243F\274\014\263\033=\325&P=\305<\021\275mZ\243={\326=\275\273\337Y\2758\205\352\2743\344\237;V\034\333<=Y\260\275V\325\275\275\375\232\347<\0173\364=.\236\260<;0i\27461G\275O\0303\275\3734\210=\237\005\236<\327\340\200\2745Bx\275\373\345\324\272&B\177<\325\350c\275\310\211v=fm =W\3647\275\353\027\\\273=\374U8S\221\203=\201H\214\274\023\236\220<\220\002&\275#{\234=\006B%\275Fg(\275m\034\220=\236\001\262=pz\265\274,\3233<\242\210\220\275\3110\237\275te\035\274\220\365k=\265:r\274\331[.\275r]\207=|\005\202\274_W\332</s\374;\316?\010\275W\3531=\037\302\212\274X-\037=\311\032K=bPR=\303\221\206=\360V\'=U\240\314;\3721\235\274\266\303\223<\000\244\246:\322\276\265\274\342_\365<\253\033\337\273\346\336B=\232\201\021\275\256\007g\275DL\031\275\250\317k\275\342##\273\312H\t=\361\241\212\274\237\357_\275\241\351\036\275\036X\240\275\277\332\035\275\225\nJ\274\304\310\256\275\237\346\267<dR#\2757\356\270<\3621\300\273\273\220\007=\254\262\265;m_\300;\304\265\303\275e1U\275\254\233\317\275XM\272\275\032\355\253=\240S\245=\273\033\220\274\026\t\201=\240I\205<h\252\360;8\276\r\272p\317\262;\306\372\234=IO\304=\030\303C;\332\335F\275\244\355:=\007\304\346;\0105\275<DQV=\007\346\235\274\207\027\236\274`\345@=eO\017\273d\206\326<Hda\275<\321\025=Zt\014\275}\320e<y\274\206\274\206!+\275\222U\317\274\2379\221<C\374S<S\236q\275\010\236\335<}X\350<\275u@=\r|\036\275.\223\246\275gI/<\245\214\351<\\\211\265\274m\267\231\274\375yL\275\263\347\256<\266\217s\274\363\360\244\275\240\023\215\275\017\265\364\274\'\223\210=C\365#\275\237\'\310<\275A\363<C\370z\275\'\016\253\274>\2560\273\r\345\216\275\351g\355\274\024\204\303<I\327\353<\003\220\t\275w\2005=\271x\273<\322\031\324\274/\324a\274\304\037!=\033]E\275I\303m<\363T\213=[\300K\2751\365\031\274b\326\007=\356\352\252<*6\345\275\027\033i\275\327\256\235\273B&\021\274\230\350\367<_\257\333\274\213\360\364<d\324Z\273\267\203R\274QC\233\274\202\210p\274x\201\333\274E\304\013\275\272\340\\\272\344*-=\364\016\340\274\344\032K\275k\251\203=\370\350\017<L%m=\263\353{\275\023#\260\275\376#\231<\245\311\023<i\243\354\274\017\307\300\273\254\364X\272\242\233\232\275mD\005\274iYH=\235\246n\275&\'\254\275\314\275\225=*d\206<\253\216;\275\223\262J\275z\235B=\333\001\324<\357\313\305\273Iu\257\274\376}\200\275G\251\n=\271\367%=.t\035=\035\365r\275\213*\235<5\267\374\274\033\3733:/\356\352:\313\304V\275\272\347(=\265\254\227\274vP\264\272.\377k=\350\274\255\275D\260y\275\322\016a\275\337\330\2539\362\334\204\274[tn\275\025\002\035\274|4\341<d\021\364=\00474\275\320\242z\274\225\277\214\274\276\245\225\274\310\332\275\275\264\341%=>\232e=24\247:\367\310\021\275\230\323\004\273\245\t\246<\004\317h=\236\234\254\275Ml\264\272+E\300\273+\223\321<\223t\253\274\316\251\262\275DG\331<\206Z\270<Z^\364\274\331\343^=-\3127\274\325J\251\2752\254\331<\017\376\017\275\302oQ7\341\364X\274\006\377\350\273\343\257u<\345\263!\275\244\215u\274\004\224y\275\302(\324\274M\255\216\275|\305\020\275{ \201\274\333\217\211=\r\237s=\201F0;\014f.<\005\t\235=5\336\307<_v%\275\000\016f<D\225\257;{\311/<\255.\035;\"\317S=\320\210\314\275R\007\335\275\315\320\013:\302\037H\273o\020\213=\234\036?;\370\n\025\274n\302\213\275e\245\317\275@\270\357<&L\326\274\202\216\213<^\nO\273\252\333\n\275=o\267\275\\\336\'=-X5\275b%\234\275\017h\212=a\230E=[\357\023\275\351\335==\033\224\032=\016\370\242\274\375~s\2750P\322<\364\2658=\323\237\347<d\367e=\257\252X=\312V\010=-\022J=\376\300\255\273\026\262\363\274\214\031\251\275\273\276\210\275\031?\230<\017\006l=\347\024\010=3\235\216=\303\365\256\273\301\037q\273|\360V\274\220\334\024=\265\336\337<C\212$\275\213\306~\2745\306\321\275\372\267y\274%:\212<\312_?\275\177\034R=!v\272=8\244`\274\265\313\222<\223\370\207\273x\347\250\275\230hj<\354\310\030=D\320\214\275\322\201\363;\177P2\275X*.\274+\021\335\273\240\2137<\271\242\005\274\304\225T\274\265\004;=\333\324\357\274V\374\216\275(\205{\274s\027\256=\270\326\013\275\027h\214<\217\210\233\273\203@\252\275{\375u=\203an\275\022b\000;\010\324\341=\335\027\204=\316\311\214\275B\202\206=\204\013\203<\213\027\036\274\2276\215\274Q\333\t=<\342Z<\366;\031=\271\351\001\274\222\336\312\275\367\357\201=\267\250F\275A\254\253<\3611\005=$a\240</S\225=\2513\216=\314w\230=\305z\017\275@\262\211\275\300\002j<7\025\334\274\363+\343;\346\237K=\017\216E\274\373M\217\274\017\3310<\367.N\275\0337\216<j\\4;\302\365\035<\350\224c<c\342\030\275\341\206\006\275\214\216\037<^\306\206=)\352j=\303|0\274z\177/\273K,\032\274t\245J=\376\300\006=\324\245g=IW$=\014z\324\274\334\271\000=l \235\275\207\240\235<=&\271\275\354\275\220\274_\023q<~\320\264\275\364\336e=^0^\2743\300\263=\261\276\022\274\026\001\345<bS\345\274\310\004\276=\337(\220<\021\264\210=\375\034\256:\262\375>=\242\257J\275\345\262`<\023\030\261=\313A\206\275\027m\367\274\220\000\362\273\271\350\327<r\250\"\275\324\246\326\274\234\021\204\275J\000\037\275=@~\2742\307H\275\253WH\275\021\305\277\274\244<\367<\377\334\0339J\303\227<\371|~<\233\273\376\274&\336\262:\311\233\242=S\024\225;\333K\254=b\010\244\273\277n\033=u\376\033=\215\230\207<o\210\335<G\222\003=^E;\275\247\031\354\2741*\211=\246e\013\273\224d\377\274\372\324<=\313\362\373\274\266J/\274\271\300\325\2749\230:=\340\230 =\352\365\323\274@\006\240=\360EQ<\356\014\247<RzJ=\347\316\232\275\242\221\217\275\320\246\313\275\314`j\275\230\006\211\274\247\355\301\275\362\016Y=]e\226=!g\336=\014b\025=c\216\026\274M\212\016=\315\000>=\307\207\243\275\2322\n=\3735\007\275\275r\257\274%W\220\273\022\n&\275~o2=Ip\203\275\306\331]=\017z>\275\255\357\004\275\342\3607\275\303\201\322\273_\023\025\273\205\377\031\275\371$o=\260\340\346\274#\310\367;\032\'g=\020\274\205<\210\245\235\274\351m<\272\232\267\274=\370\255\221\273D\242y=o\254\253=\246@\n\272\016$\n=C\340\271=\214y\272=\331Ak\275\267\001j<\331k\251\274/\316\031\273*\007\201\275\347\016\022\273M\347\216\274\035\034i;R\356\220;\311y\350\274i\345\325\274i\232\272\274q\004\036<a$\032\275B\030h=\202\025l<g+-\275kX\274\271;\224\003\276\030\342\000\274\360_j\273\2310\022=\212\234%\275\361\201\230=z#7\275\310\346\003\2756G\'=4\022\311</wV\275G\031\017\273\274\316\006\275u\347\366=\240\357d=\260f\313\274\3277\211<E\274\014\275GM\373;\260\320\327=\272e\210=I\276E\275P\354\337\2746ib=e\340t=\373\242\220<\360\017\214<\234\031\"=t\313K;\021\316\t=\336\364h\273\314\371-\275+k\034>\254\010\201=\242\306\026=\0045=<8\307\321<\364\360\034:\377\331\224\275\200>\254;\337\255\206\274\222F\026\273\r\213p\274\204\246\310\274\302\016\331\273\007^x\275\256\010E\275\366d\017;\277\200\232=\354\002O\275%\352\315;\375\373y\274\267\024\307;\333!\313;\265\256\206\274\376\273\225\275Jh\032=%\013\250<\005(\234;LQG\275\023\354\347<\247\'\344\273{\033i;7\307\374<\353{\021<y\244\320:\031\311\r\273\205\000.=\n\2039\274\231\217E\275\213\230\227\275\275\354\023\274\304\322\276<\314t\030=%S\036=^\267\002\275+\020\000<z\364\246\274\355\235\304\273\370\210\037\275\np\n\275\275\202k\274\270\232\207\2744\266\365\274T,0\2750+\267\275\3125Z;\202\323\265\275>w,=b8\245;F\3001\274H\234\203=\205\007\356\2749rD\275\346\361&\274[X\036\2744\341s<\"\276\271\275\032\260}\273\323\327i\275\255\277y\275\027\004\355=H7C\275@\245v<\326K\007<\237\022>\275\274\000\342<\353bg:1\345R=\347A\305:\014\317z=*\362\200=Z\240\035\275F\264D=\340\234}\273U=\244\274\254\020w<\006\345#\273\271\260O\275#;\226\275\271\004\313\274\\j\211\275\205\3441\275\304`\226;U(\235<\263\354\353;N<3\275\316E\017=\212\270)<9I\237\274m\213\270<\224\2770=\223\252~<\035\374\201<\302N\255=\233U\017=Ow*\275\323v\305;\007j =\33300=\004`\356;\277b\226<*\025\217\270\022\250W\275G\233\177<?\003J\275\340\037=;\214\352\317\274(\'\010=\356DT\275\\\311+\275;\030\310<i\225\177=\344/\213<\267j\021=\233>\213<rLz<Dvc=9\177\202\272\234=\207=\374\337c=c\214\234\275\032\230S=\215\225%\275\313\367\267<v\220\307<\354Ns;9%\203\274\320\210\276<\025j\214=+|\222<b\007`<!\253c\274J\266)\275\222b\013\275\344DT<~\216U\275\001&%\275\205\014\332\275\375\\\221<q\376<\275\267^\275;\265\002\301\274\212\325\236<^\211\003=\331;\223=5\372\245\274\372j\326<\311\330Z=\014f\034<\302?\274<2\353z\274\260\243\t=\032\321s;\252\222\377<3\372\200<as\255<\352qF<\220\243(=\324_\200=\036\246%=\244c~<\267k`\274\216\3417<\321If=\203\213\031=ie\256\274\361l-\274\265\350<=\267\021?\275\311:\304<\364R\214=\rT1=\214\327\350\274Z\305\266<\252t\242<g\360O=\327@\255\274\367\356\225\274\351\030%=w\240@=\240A\001\275a\264\240<x\033\311=(\327p\275R\265\351;\r\332\314;\376k\356\273\2206\236\274\240 \277=\340s\245\275wF\241\275\212\325Q\275\226\350\t=\177C\333<\220B\036\274\251\256\212=1\036\021\274\363\250\000=7W\245;+\252\327\274\034\217\210=\257\337n=\326\240\300\274\336E\220=\002\204<\274\2305R\275\331\022\236;`R#=\001\313*\275{\370\024\275\213\257\n<P\031\310<I\351$\274\006JJ=\235\324\351\274\004\330V\275\264\316\025<\201\227\215=\222^\201=\2459\202\275\234\223\t=xn~<A-:\275\233m\200\275h\355\201\274=`i=\336\230\340;j ;=\360\005\227\274(\372E<\231\364\362<f,\327\274\034\204];s[\025=\"\371\240<\262\255}\275\364O\024\275\014\274S\275=\235\216=\207\231]=Z\360\034\275\372\2271\275\333\210\223\272E\351\035<xU\020<J\356\303=i\304]\275,\300*=D\021\353\272\277\300\3077\362j\003<szi=uf\255\275:H\234\275.\331U=E\377D=\303\237\n=)\372\206=\260\324\313\274w\272)\272\274\3316=*\230B\275!\006P==s^=\020\037\226;\003\032A<w\357f=n\366m\275\322e\027=$\221D\275\">\363;6\223\350<\247d\222<\257d\004\275\213\311\261<\325\301\345\273[d\325<-\370\200\275\243\010\230=\206\333\242\275\266\235\257=a\266\005=\233\251v=G\314\201\275\231\264\226\274\341\242\202<(\330O\275\344o{=?$\007\275\276x\023\274\202P+=\235\263J<\256\246\341<t\217>\275j\347.\275\352\332\214\275N^\017\275\203\335r\274\254\245\221\274\272;W\275\275\365\004\275E\376\004\275\361\r|\273!\247\232=\347\366\317<2^T=\305\2332\275\303@>\274l|\025\275\345uO\275\n\021\221=\030\026\004\274 \344{=\010_A\275\266n3\274@\275\301<\322\250c\275\203\327M\273\276G\331<\020d\201\274\254\302\r\275\333Ts;>\265)=\025\302\024<\367H\363\274\034y\216\275{\361\032\275\212\037\323<\310\333%<S[\314\274\217\274\215=\367\321\010=d\226m<\351\201Y\275k\375\256;0N\251=\273\340n=\227\312\254\273AC\352<\326\302\340\274\315<H=\254\"\306<\276\260=<\313EB\275\321J\004=~\034e=\034\235\n=g}@\275\3768\265\275\241\331g\274Q\024\020\275|l\304;\256\344\204\275S\275?\275N\252\345<\356\336\204\2754\267\232\273\276\357\204\275\256\321\362\275z\367\205=\363\323\\=\215\262\265\274\305\300S\274R\260\n<F\227\250\274\211\032\004=\351\216l=em\267\273\034\246\345\273\317\336R:\245n\207=\n\301a=\267\005\004\274\331\353\343\274\300\006\266\274\243Br=\234\304\336\274\274\266k<\234\234\247=\013R\000=@\201\311<\346\250\266=\273\213-\273(\236B\273|k\037\274\316t\221=\233\364\007\275\371)\"\274,\214\027<Fit=w\305%\275\330P\271=\337L\327\273\301\370\364<\223n6\275\224D\031=\373\224r=P\003\222\275DB%=\263\\\020<\227\365\205\274l\362\016\274@\337H=\224\006`<\025\355\242;\221\347\240\275\206\327\227\272nM\007=\"1\025\274\026\031\202;\3502(<L\366\310\274A\211\230\275\207L\273<Y\002\035\274\n7\016\274\267I>\271k\035\212\274L\003)=\346e7<v}\355\274\354p\004\2734m\375;0\342\276\274\206\271%\274]\352\'=\327\262\032=\331:)\275\016\205\254\274~\036\010\2741B\310<\310\026%\2751\343\276\274yT\222\275=\255\345;p\242\352;\235j\337=\375\341\316<^*}\275\222\337\020\275\372\025{\274\355i\264\275\354\372\371\274\3115\3208\017p\345:\271\025\367;\373b}=\344\236!\275\257^b;\n^0\275p\235u<\010\310\336\275n\201\250\274\374Hs\275z\200\252\274\210u-<z\003q\273[X\'=M\365\202\2750u\226:\220L\212=\030x\315<\213\320\300\274\033\270x=\307\342\324=\373\236K\275\240\335\020\275\273\036\275\273C\216M<\224\322c<,6\205;\267e\224=\351\272\204<\2750\232<\220\204\247=\245\320\352<\305\226\331<uj\225\273\377\320\022=\253\326f\275]\r\360\273\243{\335=\352\215u\271/\\\322<\255Z+\274\326\006&\275\330\252\334=T\217\207=\360\221K=Zp\210\273\241/==\006\261\237=\372\313\031\274\000\325@=\273\332\275<\004:4\275G%\022\2757\352\023<+\034\237\273(\253\272<|\t]\273D\371-\274t.V=\370D\242\274t\374\324\274\247\202\201=\214D\016<>\217i<Z\251\240\275+\221\263\272\247\365\231\274)\326o\274\227\004Z\275e\3777=y8k=f\230\026=\266\256H\275!W\314;\373\213l=\202\037\305\273\372\216h\274n\302n=}\036\223=b\030\032\275\202\321t=\342\257\330=\347\014\020<\033s\213<\022\264\270\274\304\373e\275\374\216\017\275\265\211\342\274j\274Z\274\374\037\260<e\000\t\275\223\300r<\263\216\001\273\256#|=Mf8\274(u\264\274\032\217\030\275\260q\212<d\276o\275\337N\217\275\262F=\275-\333\246={X\257<\262\311\250\275\231_\t\275Sm\025\275w\357\232\274\217DE=\021\2406=\022\220\212\273=\002\020<\224s\256\274P\177d<\351\260N=\222\366\221\275\264\326\007\276[G\210=mL!\271\300g\264=OBd\274\tG\212<\230-\017\275,2s=\027q|\275>^~=5\345C<\216_\255<\362\250\010=\213\314\241\274\023\277\005\275w\241\020\275\t\344z\275\244\272\277\274\251\246n\273h,\321\274\331<\245;z\346K\274\317\0255\275(z\377\273G$\205\274f`\014\275\350\346r<\206\337\013\275J>n=8\330\330;\361\351R\275^p\014=%\325\324;\236h\323\274\022\013s=W\3767\275z=6\275\031\305l<\277\264x<R\253\234:|-\231\274\231qv\273\353h\300\275\247\003\201=\211$\000\275/\304\017=\251\247\311\275\236aV\274\373\005\340<\330\270V=\242\2615\273\353\017\354<\236\375\301\275\363t\000\274OG!<\033\003\205=<$\341\274\210\013\n\275\351%I;\333f\325\274\370\tA\275\214\253h=\343\327\335\274[^I\274\216^\361<\304V8=\026\026I<\264\271L=\341\211$\275\365\3441;#\003v<\021\371\247;;x\273<\0262\206\273\232I0\2755\366)=\261NB<\276{\010=\255\035D\271Jr\257<\366R\n=^\233\371;\033;?\275\262\373\227\275\363\362\024\275\007\244\n=\217l\212\275m\221\257;:\203\242;\000Y\340<a\346E\274e\337\222\273\354\255\227\275\0216\030>\022\304\252<\255c\247=mb\300<>,r\273\013\220d\275\371$P<\362\221\026=\241\304\007\275\003\342(=x\330\270\274}\225\324=\277\223c\2747\n<\275c\t\030\275\242\030\025\275\177\037\351<\335\351\203\275\271O\225<\001/\'=\022\252\336\274\030\014\306\274\304\246J=i8\243<\006\325Q\274\310\255\007=p}\003\275\341\273\n;5\013v<}\202\315\275\215x\021\275\300a7=\221}\023\2759\323N\27453\3168B~\216=\327/\205\274\225\313\306;\204\344\225=\n\245\250\2731\347A=\245\355\261\274\3277/\274]j\265\275\200]\000\275\342\330\245\275\265\264\214\275\376\265\314<\326\302`=\200ZS={%U\275;\2222=\004\275\260\273l\t\265=\254\227\207\274\311\n\272<I\261\3068\2538\243\273*g\272\274MQ\255\275\034\363g\275I\210\251<KH\216<\351\340\033\272\244+\\=\307]J=\327L\315;0i\033\275\316\tB\275\243\020/\275\030\016\227=v\370\353\275U\220g\274.Uq<\220\2479\275\215\344\335\274\n\312~=uBB\274\353~\363\274\036\003\251\275\246\343\307;[\242\030\275,\340\321<\232a\036\272\275\241\"=9\242\247\275\317\3121\274\336t-\275\350\356\3379\335\333\216<F\300P=_\267\317\274o\236\255\274r\000\267\2751M\215\275\264P>:G)\031\274:\302\034\275u\3027:O\354\227\274x\231\020\275\032\245f;\006\206\271=\257\302p\275Qu\215\275\274\271\245;5]~=>\314\224=\272V\r\274.\237);`\313M=\312M\000>\3040\022\275J\324\300;\313>\362\273\0047d=I\220\245=\220\237\366\274\215W\027\275\360\020\231=\247\177L<\244;\037\275\032\000\255\274\341\002\"\272\312\003}\2756\224\355\274u\214\256\275\370*\324\273\352\037=\275sUm\273\313\374\014\275\254!\"\275\024 &\275\305\252\267<\360\033S=\002L\272\273\001\\q\275_l\265\274^v\021=\232\371[\274/\310\211\275\213\221H\275=V\004>3\374z\275\331L\223<\007\272\313=\014\320\231<\265\361\310\274;\014W9\027\266\033\274\347\206\362:y\326\215;\006+\207\275W\004\255\2738\216\013=\365\232C\275W\234C\273k\304\340<]\323\247\275\325](=M\246\311<Z\2575\275t\341\206<\372!\366\273T\325\315\273\017\332^=I\234\037=\352\360\314\275a\\g\275X\023s\275\203F\235=~\225\221<X\265\031\273&Jv<[6\207=^G(\274\251\306\314\274\206\327\343<\273\0143<\242\204j<]\352\206=\276\253\222<q\\\024=(\357\237\275\301\316\030\275\3736\037=\352V\223=\023\266\316\274\377\034\205<\371h&\275\266\301L\275\277\265\n=\256\206@\275\023\264\200=]=\213=eH\022\275M\263R\275\367\307\213;(\265\213\275\206Kv=\350j\217<\336$\341<\317%\204\275gX\274=\nL\014\275\243\237\226<:\274\335\274E3>=\240\036\346\274~0\006<|f~=\356\247\204<r\350\210\274\250I\342\274\237y\210\274\364\204(={\374\014\275\2676\250<\370\013\021=Q\001S\272F\274\221=<\347E\275\342\007\\\273r\201\014\275\316_\222\272<\003O\274qd\306<S \232\275\220]\020\275\305\204a<\260X\201=\304\347\244\275o\262\372\273$:\363<\200\0301\2754\004\257=o~\266<0\216j=\363\031X=\353\377C=\374\006\307\273\341\324\2408\202\267k\274\351\216\260\274\375w\n=ob\265<\305\277C\271W\t\343<Q\354\200\274\034mb\274\000\235:=\r\224f=[J\020\273.\345.<+\260\022=>\037\013\274\245o\245<[\343\020<\354D\207\274\353\244\347\272\346\322\225=T\343\315\274\207\226\n=\224\"\342<\374\320\007=\262\324\243=r\2119=\272Ke<\274D\202<\367\"\224<b4h\274\242\331\247\275+(\371;VdM=\363\363\235\273\314L-=\245\332\022\274\032\322\353\270^\307\245=G]\013\275\241G\262\273?;\302=\321\365\261<\225Ye=\257\010\001\275\244\355!\275\260y\007>=\030\217=QIr\274\334\254+\275A.O=\306C\005<\201\026F\274\317+\241<O\2214<\2049\037<$9E\274v\014\372\274\035\260\373;\261\340\254=r\234\254\275\347\337\000\274\346 H\273\350p\306\274\210\336\376\2743\004.=\030\236\022=\312\354\221\275\200\030\275;r\251n=}\021\336\2732S\025\275<\305\233\275t\312\221<\014\304\373<\234\376\254<\000B&\275\235\312_=[\200\024;\025\261R\275w\247s<;\247\204\274\371\'\016\274\214\2304\275Qg\253=\360\275l\275\023\253\370\274\007\023\334;\216\361\315=h\250b\274!v\245\274\210/L<U\357z=\262\340&=\262k\254\275\202\337\0239\033v\234;\336\343X\275\314\352\\\275\224\311\241\274\232\005I\273\3554w;\347\341|\275\254\365\332=\331\201\016=\304\032H<\344\323Z=?\257J;r\314V\274\366\216D\275\247\331&<\227]D<!\344\024=E\317\336\273A\336\220\274\023\225\n<\233\270\353\272\023T6=\373<\353\274\247\2051\270\261\256\237\273u\365\204\274\212\323\200\275\010M\275;\205\362\243=6^@\275\217\230\n=\346\036\345\275\344GB<\003\305\377<5F\366<\241T\310\275D\022p\274b\r\342;\0201\324<\001\036\035\275O\033\026=\237\343\227\275\245\342\t\273^1L=|\342\262\274X7\342\275\2562\273<\0141\030<!\314\340;\025\376\t\275\331\266\240<\313\211\235\274\373&\020\275l]\307\271\3604\202\274\330<\207\274\221\365\275=\272\376\207=\2622~<\026\327\'\275\352}\257\274bs\232;\357\342|=\377\262\235\274\244g\324<\177N\232\274\357\373+=(A\337\273\r\031\211=\353\246\205\275 \277\222\275a \255\274,\311S;\225V\373<Q%\222\273\234\330&:\354\205\217<\202r(\275=?\236<\333fE=\307\263\033\275\316\004\253;\037\345\243\2751\343\266\274\204\354\360\274\277y1\275\032\017\001\2769UQ=\007\003\237<X\352^\275^d\273<\347\365\216\275i\341\014\275z\372}=\202N\246\274\327z\014\274\003\201\021=\212OR=\023//\275\033\213\215=\267(\343\273U\347\271\273G\346\343\273\370pB\275\263\304l<q\304\214\275h\316\\=\207\224\274<\203\263X<\001Cy<\35480\275<\311\326\274\315\261!=\244l\220\274\263%!=\237Y\243<\326\004\317\274\374\372\223\274?\377\260;\033\376\253\274\273\030\203<\327\020s<\007\3269;\221\221W\273tG\243\274\022\357c<\363\301\336=\275\332\272\273|t0=\003\361N\275C}\204\2741\230\310;W\2366=VP\225\275\221\005\005\275d\264\222\274\373\251m;\370o\322<\224V\346\273\236E\007=\005Uk\275\363\341#=\332\0049=\352\262\310<\036!\243\275\243\334\003\274+\035\343=xR\257=nC\203;\364\006p\275\016N\033=\373\001\220;\267\354\003\275\220\232\311;\277\330\322\274\321\324\277=@\253\"\275w\377g=\300\244\236=\177\352\307\274k\025\023\274\247\306G\275\222qM\275\'#\307;.\004\274\274\013Vl=*\357\273<`BQ\275\033\206\257=\325\251\341<u!\271<\357\253[\274\240\214r\274\207uN\274\303\225\037\275F\271\026\275xo\330\274A\336@\2757:l\274\372\0136<\245\212\314=\313\360\211=\373\022\014=\234\205\341\274\332\274\273<\272\365\231\274x\004-\275t\243\252\274\230(\010\275~\343A\273\3659\262<K\215_\275\324\021\236<O8\035\275S\264~\275J\004\005=W\246p;Pt\362\275\201\357W=\357\264S=\303wA=.\n\253\274\231\354h\274l\374\270\274\370\"\337\273\271\307\000;\317\352-=g\237=\275X\220\266\274\230A\204=\033\243C\275\357\237\024\275\366\205n\275Nj*<~\227\246\275\236h\203\274\342\340H\275\347n0\275\207\230\036<\363\312\020=\354^\t\275\022R\226=\230\030\346\274\343f\t\275r@\237\2748\002\307<\254\312\215\275\237\007\007\274\300\367\230\275\0257G\275\336\253\344\275\315\377\373\274-;7=\240w\331<<\251$=\351\305\221=?5\322\274\202?b;\035\2179<\265\373\242\274\364\322\004\273\t\006,<$\232\247=\221\\\325\273\370F\035=>\263\036=\317\275\243\274D\274\316\274\027a-\275\254\247\244\274;,I\275\305\251\341;\326\n\333<\311\027\347\274K\326\204\273\217\302?=A\365H\275\255w\376\274\367\177<\275\356o\355<Y\205%\275\333N\225\275\207GD<G\264\014\274\352\261\212\275\310d]\275\354\366l\273F\364?=m(L\275M\367#\275\301\200M\274Y\223\203=k\363\275=\277F\010=ay\264<\360g\023\275\230\371G\275\007#w\275d\367\250\275\220\232F\275\363\365{\275N\234\304\272\211\211\373<%$Y<\000\233\231\274x\204*=\224x[\2730\301\213\274\316\350{=\367]\304\273\350\373\333\273s\275\263;\375\353\335<\356Zd=\270\004\215\274S\027\302\274\237\307Z\274\235\364\327<\315\316[\275\206\262c=\350j\177\275\343\224\263=A\244\210\273#\254\220\273K~G;\nk\334<(\303\204\275\365\006L=\030\206\225\275\251\330\303=\275\374\207\275\315\302C\274\276`\271<\315\267\234=\253\"\321\273\347\302\263\274\211~\323<N\263\257\273=\300\243\275uB\240=\362_\207<.D\005=\342\256\n\275v\352H\2758b\374=\337T\207<\304b\377<\330\224\273<]h%\273\2179\216=\237\t\n=\357\202\350;\346g\300:*\375z\27433<\274\345\241Y\275y\361\262\275\367\257\364\273l\010\177;\305*C\274\200\314\022\275\230\254\376\274\033\341\"\272\252\005\252\274\360a\001<f\001Z\273\032\313\254\275\330\216\021<\304\360q<*k\377</\213\202\275\311!\374\274\305\345\246\275\332\221\223\273\022.$=\327\004~=\2467\237<\354\306X\275\020\216e\274,\006\222\273\226\303\350=\344\253\362<^\325\206\275\312^o\274\034b\260<\3435\215\274\2462\"=y\1774=\200\202\233;\243\226\001=\235=M\275iG0=w\316G\275\377P\020\275\210Pk<\216U\264<\360\233\006=tU\313\274\014h\t=\241#\212\275\276*\316\275\t\224\363\273\361u\350\274\307\2250\275o\356\214\271\014\0105<\0011S\274\365\255\346<2\334\363\274\326\024\032=t/\035\275\271E\004\275\347\342\350;I\'s=\010\200\264\274\313\236\003\275\204\0227=L\022\226\275\300\3048\273\023\352}\273\252\304\224\275(\254\212\274s\007\351<l\006\254=w\334T\273\250\314\016<\325\017\211\274\0371\022=\023\245\364<\230\243\r=\314\355\255\274\034\034\347\273\360|\220=\230\360~\273\001E\022=\026\211\026\275\202\332\371<\343\010\251=\215*8<\344\032\227=u\227v\275\000\263g\275\227e>\275\212H\305:\362\214+=\254\305\260\273l\240&;\207\030\013\275r5[;\333d\240\274*\355\035=\242\364\016<\0309j\273|\005Z=#\230?\275\370.\232\273\312\245{<\272\2379\275\274\350\303<\331\'\344<\243gU\275Y\244\323\275&Q\254\274:y\305<X\360/\275^\002\033\273\220\360\354\273\035y\204<\346+\r\275N\013\300<\256-\375\274<\211\033<\257\224\002\275\032%\'\2740</\275\223\271p\274\365rx=[\334\253:\357Lw\274-\364\317\274\307_\322\2743\240)<\357\211|\2754\356\n=\251\346\303\2745\224\200\273D\214\251<?\210\026\275\010\2349\273\366\037\037=\245+3<\267\036\300\274\367[*;,\261x\275\255|\226\275\356<\363=?\205\272\275N\322\203\275Cm\251\274S\224\226\275&p+=\232\221;\273j\265\303\275D0\207=s\247\223\274\236^(=\361\033\276\273\245\322\035;\241\222\236\274\223\274\322\273\313\355j:\317\036\305\273\033\r\256\274\020\274\206<\\\256[=\030\023\2319\214\377`;\271}*\2747\275w\275\351+@;\3751\025\275<(~=[i\035\275\322f?=$\034\r=/E\372\2752\312\316<+\3177=\030\n\036=\275\020\204\275\030\240\237\274\330 J\274d\364\321;\231\207\364<s\024\003=\351\250~=\225g:=\345\276t\275a\"X=#\236\026\2750\334]\2741A\253\274\373\310_\274w\363\031\274\277\"I\275\222N\333<\2301h;\262\361\003=\324\313Q\273\227\206\214\273N\301_:U\336\205=\262\257\373\2746)\267=(\036\324\2743N\342<\241\204@\275\376\t\331;X\316\204\275\003\377s<\220\264X\274\340\307D\275+\334\236=\300\366\317<\215\271\224<,\346\237=\007\202s\275\366I\240\274\202\324\013\275\257\317\373\274\357b\222<\033\223D\273\000\236\243\274\010\365D=\277y\365<-\363\264\275%U#\275\263\020\214\275\225\2742<i\037\014\275\022\242$\275\270j\242\274Q`\235\274L\263c=\335\233\037\270\306%\232<\223\274\306<\317\254\001\275u\025\276<R9\t\274\207\241\362\274\215\266\317\274\336%\233\274\200]`\274|\232\312\274\217[\020=\375z1\275yX\001\275\266\372n\275>\307\226\275\200\315\343<\342\322^\275M\276T=\343\323\242\274\265\365v\274\3154\331\275\200@K<s\354\005=-\347\267<\356H\302\274\256\302\205<s\036g=E\370C=1M\003=\350#\200\275\254\344\001\275\3107h\275\270{\254\274\251h\037<X\013\177<-\320\235\275\313\343\216\273\003\306\307\273\251\n\306<!\201\000\275+\343\361\275\334\2653<}\033\243<q\247d\275\356\332\263<\333}\017\275\010\365\037\275k\360e\275\332r\370\274\270\032\334\273\206\312a=(\0031\275\t\347\\\275\225,\323=\340t\311\275\014U%<\255/n\274$Sf\2756\333\371\273&\307\014\275\353\236\321;\375\'\267\275\202\255\342\274Ll\034=\242#\214<\252\337\327=\024\341\211\274Dx\211:6V\003\275\253\005a\274\257\360\375<S\'\224;^\"z=\334\250z=\227\245\336\274\005\027\254=j\201\367<\223k\024\275e\334\022\275\213e\233\274R=9=\250\236\277<\013\220\232=\2112\372\275\342D\246\274\354\200K<\351N[\274\036F3\275\241`G\275\025\033-==?_=Q\321s\275I$@;\237\312\244;\000=.=>\377\241<\274\000\'\274\201d\343<\361\n2=\3309x\275\376\025z=\t<\032=\037fH\275\2258,\275\203\223t=\232\275-<jN\274\274-\204k=\243\2631=\'\204\234\275\246\214\325\274\243\312C\274\334\025\030\275w\032\242\275\250\222\235\274*\327U<\373\203\266\274\373&\226=\223\025\207=\300[\274<\033\344\314<\321*Y\2759\321\340\274\2076\371\274\002\263-;h\213E;\201\373\243\275\026\021\277=\334\312O=[\341\212=\203A\177=\352|\235\274fJ\212\275\031\rk<!\306\352<:\034\257\275\316\006Z\274\315\211B\274?em\273O\025%\274\306Ux=\313\277I=N\226>:\350\010\263<r]\224\274Q\360\250=\001\243\030\275\037.\2109\021_\003=\376\233-=a\276\304\273\350\200\222=\004\300\270<\364\346Q\273K\020\224<\375\376\314<\2525\025=\351u\206\274\277\027\311\271\213J\276<\271\244O=5\303\271:\200\t\027\275\204r\263<\300p\342\274#\0343=P\345\203\275\r@\365<\003\265\244\274\253\214I\274U\221z=\275\2262=\353*O<&}r\275\n\303\301=\205BM\274\253$T\274\275a\353<\373\231\222<\370E\n\275\242s\320</\272\345\274y\311\356;\207\027\023\275De}=H\336\334=\350\307F=s\030)=\247\013?\275\211VD=`\204\336\275\320\372\253\272\006F\014\274\254\240\022\275=\300\222\275>\3422;\033\271\241<\364\203\253\275?P{;\033\370\357\273t\230\365<k\376\007=\266\311\r<L`/=1f \275\207IE\275[\340\006\276#\344\024\275\370\r\240\275\342\214a=\367\250\270<\336\200\354=\351\2466\275q\000\206\275\273Um\275S\273\312\275\246\333\004=\307\327\023\275\2329\370\274\203V\000=Ge\361\274\2758E\275%d\220\274\252*\232\274\370\364O\275dc\260\274m\334T<\245\320!=A\312\025<\214\016-<u\255\025=\004\264f<m\316q=\002j#;!\345>\275\036\222\267=CL9=\376s\334<1\264\037\275O\215\006\274\343\361H\275\305\205\254\274\245\231\226\275\263{G=\313\322\220=E\210\233\275\002*\037\275:L\237\274Y\342\'=\307\352\231<\031\017\231\274\316\201H=\241a\334<\246\354t\274\305*^\275\334_\306\273\340\030\206\273\376\305\231\274o\220\022=\262\034\250\275a\306q\274\004\004\264\273\032\266V\275/J\346<\274\334\323<\222\312\267\273r\261\311\274]\034\351<`\272\227\2740\223\247<T\017\202\275\227\375\275\274C\255U\275\343\006\211\275\377\231@=\315\273.=C\322\302\274`\203\322\274\0370o=@\210\256=\252G\235\275\366`s\274\262\363x=\354\341\010\274\020<\362\273}\304\\<\221\033\221\274\365V\237<\205\315\356<k0\324\275qF\272\274\006\240\234<\221@\224\274e\305\210=\3424\004=j\376\204;\352\005\223<\344\271n=\210\301\363=\337-\254\274\254>8==\352\364<\032\325\315\273\212\336\010=O\310\305\272Oq\346;\273\217\340\275)\245\302\274\312!\003\274?\022/\275*\267I\274\312\2213<\377\211\313<\355\265[\273\213\240\313\275]\016\203\275\024\343@\2740Z3=\373}\234\274\250\024\003\274\332\347\330<D\252\024=A\017\024<v\245\206<m\372\374\274\220\024\004=Xjp\275j20<\365\357\022=\2736I=y\337U=\022\010\233=\370\361d=q\210\240\274\030\205\273<\312=\017;p\343\273\274Xb\241\274\361\362\213<iV\t\2753kQ\274_\302\355\273\347p\217\273\027\003\000>\360\244\007\275\'@*=\340\212\251\2758\3121<\246g\212\274\247\023\207\275\242\2769<\210_\375\274\010\322\231=\221\234\023<\201\211\006\275\230\022\224\275\235\003\246=\216\231\266<.M*<\276\201\343\274\036Hv=\307\3321<\030\230\314\274\3478\026\275\313\200\331\273\310\275i=m\225R\275\035&\017\2757G\353=\t\214\315<\261\322\216<b\247z<\247p0\275^tK\2759\367d=\374n\n=\347Nq\273%b\003\2755\267\007\274\'\251b\275\236\371=\275\273\036\246<G6\246\273\036T\366<W.a<j\244\263\275G4O=\244Ge\275\3226\311<\345\275\n\275\270[\026<\t\251\260\273\r[\033==Nx=l\314\006<\336\356\033\274\302\270_\275\326\252\246\274\025\256\337\274\221r\024\275\226\272\035<\336g\261\273\007\203M<.\272H\274\233a!\2759R\025=\354.K\2754\005\236\274\220\344\224\275\215|\263\274U\"\231<\010\344\257=\263\"\t\274d\307v\275\267\366t=\275!\236=\217\354\201\273#\003_<\3302\266\274\346y,=\200\3159=\305\0028=\006=l=\357q\000=\t(\212\274\226\244\014\273\216\375\r<h\300\343;\t\262\200\275\260\304\243=\354\3304=\223\210\217\275\233h\255\275\030`b=e.\037:\234\252;\275\217g\336\273 \"\337=pS\326<j9Y\274\202=\361=\346\035\333;\235\341\016\275[\211A\275\341\222\207<S|\243\274m\017\214<|\3654\274\223:\264=G\310\351\274\332\340I;\002F(\275\220\226\022:|\270\026\275\324/\t=?\206\034<\r\312\234\275U\236\216;\214J\244;f3\213\274I\205\342<N\202L=\007}6<\'\252\025\275\277v\334=\\[&=\2361\t\275Q\360\031\275\376\332\344=\211T\006\274\353\274=\275W>+;[\214\274\272=\371C\272Y\237\'\275^\272\214<\334\263t=v)E<\324\'\231<\244[\316;\310\321\306\274\241\335K=\311u\260:\031\036T\275\351\250\245\274\303:&\275[u@=E\222\311\274\253\2070\271\207)\014=\206\004\030<\027@\200=@\240\207=y~\375\274\370\320\022\275\255\234,=\253)_\275\223+b\275Spt=\243K*\274\317\014\302\274\365i\210\275\342\030\344:\210+\277\274j\326\273;\356\006X<r\215R;\252\'\313:\347|N=\261\347\017\275\027\243\300\274l\246\232=\327\376\027\274\232\266 \275\354\247\301<W\307\205<,V><\361,x<\246\206\312\272\330\"[=\001\013P;\266@\371<\306j\221\273\300\341\340\275\233\332\374;\261\240\322=q\366\273<\350G\222\275\010\224\231<\207\323 <\203\210\202;\333K\331\275\277<\217\275\202(z\275qm==\355Q\262<\'\004\207<R\334$=q\031@=\224mg\274\212`\373<\3025`=\214\361\240<)\034\274\275\3333\344\274^\312p\275\316\367\320<\"\251\317\274\322\3074\275\302\006\257\274\021\022\030=\020\324C\275\365\1777=\024E\226\275\374\031\274<\tX\025\273\036\327\313<\026\270\027\275\352{P\275\216>\255\275\247\273a\275\363\023\214\274\020\031\271<{\223\255=\344\212R\274y\014\374<\207P\236\274I\232C\274\276!I=\204G\n=ZaD=\273ui\274\266\362\217\275\273\361h9P\231n\273\243\271\204<\273P_=i\364!=l07<\307\027\305;J\376\016=\024\006\273\275\000T\346\275\373[\324<\211\361r;\227\202\n\274\261\360\342;\020\356\327\275\244\307\206\275\235\265\230\274\347\266\033=/\314!\275c\332\022\274\377\010\234;~\027\002=\324\233t<Qh\306<*T\205=\326\370\245<\357\321\3039J\026\324\273\357XQ=>\362\025=\260Ee\275\321\t\245:\202\233\032=\007\365/=\032\236\275=\2278(<a\213\365<\314\220b<\016lG\275\204f\274\275Qu\344;\321RL=0\016\335\274B\005\324\272~\361V\275j\2473=F\3604\275Ca\336;6\311\020=\330\223\034=\377\'\374<h\242\311=\277\370\301\275\333rf=V\331\226=Q\357\362\274x\326\245=5<D\275r\2334\274\205\005\231<:\016n\274\226\333\262<5\022\203\275\306\241\201\275mV\216\274\016\227\311<~1\222<$~\350<\341\244_\274\225S\231<\207\013<<_[Q=\000\250\376<\023\244\034\275\2221\243<\002\355%\275\351\2461\275b]1;[R\017\275q\207\'=\350\212+\273\t\205\357=|\0218=\036\310\226<D(\332\273LD\215\273\023_\"=+\026\270=\024)\246<\234xI\275\305\340+=\025\222\022:Z\363\022\275\266\225)=\241\371\025\275(\\Z\273\277\014\000<M\016\025;\237\327d=\357[\236\275\223\231\242=\322@\017=W\000\021\274\313\031\376;\216\240Y\275\n\262h\275\010`\344\274khB<\010\362\316\271\177\370C\275U\000\355<\273\345\023\275%M]=\252\306B\275^{\270<`\334u\273\223\304\206;\356A\000\275&\371\263\275\265\304:\274l\004\003=\241\364\025=)\327\252\275+`\237=\201.\265\275\352\236 \275uKI<\030\314\232\274H\204F<\325\322q\275z\003\301\274}o\215\275;\344\205\273\271\0310\275\257\005\202\275\202=\006=\005\241\257<o\362D=&\234|<\274\220\351\274\006\271;=\215\010?\275O\036\331;z\276\200=\207\n\334\273h\313\354\272\302\253\273<\314S\314;\000`u<Pd==L\2558\275\203\253D\275\334\325\202<\327\306\326<\301\246l\275r\310\376\274GV.<\320\004E=\201\242\267;\247\022[\275\276\214\301<\221:\242<\246`\310<\327\225\000<\323\014/=\344\260\031\274\337\304X=\257\334c=tc\201\273e\247\237=x\306\265\274\272:\335\275\020\337\231\274\266C\007=\370\201m\275I\0341<\364rO\275\222D\332<\214\250\247;\247N\256\274\236)2=\244-s\274Sl\300<\312s-\274\324\032\212\275\032\230\254<\365#\357\274\016X/<\274\323T\275\311^\"\2741\375\327<\263\347\370\274\\\016\236\273\215\234\235=(M\237\274\236\230\256<P\267\314<\334\373\014\276\362@+\275%\307O=\340m\322<h)\236\274\255\301B<\007\243\000\275\002\257/=\317\323\234\274\022\275J=ny><\317(\003<s\033\251\275Xf\204<N\322\326<9\003W<\3378/;g\rD<\221\255k\275\207\277\361</\327&=\230\312\r\275U\301\354\274\262Vp=\027PJ\275\204\266\320\275\230\257a<}\366\220\272j\2167\275!\326_;\374\314\"\273\351\323 \275\264\263#\275<6\211=\307\305E\275\021\231<\275\374,\270\274\036\033\021<\336\254\312\274i8\241\275\256;\317<_\224I\275t\224\207\275\342pE=%c\347<q\223\014=\353 \003\275 \261\270:hd*\275/*\267\275\252\365\240; \035\314\275\313\023\241=\256*\274\273\241\320E\274\356\324,=\241\021\267;\356\032-\273V\005\233;\330]\024\275\357\234\240<\023\265\267\274\342\220\233\275\313\317\007\275|\212[<[\360t<2\036\372\274\371\t\230;w\340\331\274}w\260<\260\275\n=\370\026\037=\237\216S=\023c\020\275\032\'4\274PX\235\275X\235\337\274\031\006\033=9\354\030=\03781\274\265)!=\351\315:\275\340\213\027=B\323\326\272\245\360v<\261\263p\275\341$\371<\t\322a\275\272\350g=\nJV\274?\326\016\276u\367\207<xI\034\274w\215L=\217+\330<\340$\321\274^\240\303=\264\224\315\275\310\300+;Jf\027\275\306\221m\275\371~\360<\'R\312<|\251\301\273A\221\262\274E\316\372\274h\321\270\2744e\201=\367\266Y\274\010?p\275xN\001\275\270ZY=\264tz=\223t\016\273\225\207\217=\310<*\275\354\347\001\273\360o9=\362g\005=\r#p<\316 \251;\277\346a=\301E\366<\265\366\215\275\332&\257\275\346~\006\275\2578\033=T\250g\274\023(=\274\016\003(=\253\'\006<\207\213Z=3\372\356<\303\312\222=U\206\016\275\232N\347<\312;<\275\373\3019=D\240_=\010jU;F\361\211=\231\312:\275\350_O=\364\303\373<b\004\356;\254\264\233\274\337c\210=\0310\230\275\275:\227\274P\277n=\246BG<#_A\272Xq\241:\263\262\231=\365\230\315=kv\304<\031\276H\275\r,\264<O\236\006\27383Z\275yE\244<\376\013\355;\2156\201\275\264\016\002\275\225\332W=\265\030M\275\036\345\014\274*s\266<u\353\253=\246\256\243\272}\260?\275Y6M;\207E\224=g$\376\274\251P/\275\273\262\212=+\370\031\275$\211\203\275B\376\312\275L\026\023\273\224)\022\275\300N\231\274/&\255\273P\230\277;D\0317\274\320\201\2249\343:J=\345^U=4\330 \273\270hu\274\352zH\275\226z\261<!\037\000<\264\313\333<\204\203W\275c\334m\274\320=!<p*\204=\332\301\320\275\270\025\360<r\360\010=f]\266<\006|\231\275%\\\265<\334\344\226\274\233\372#=\317\201\325\272\t\177\266<2\354\322\274\321\005\222\275\334`f<\032\212C\274[\334\321\273\002\301\200<\rn%\275|\201\241\274\213 W=\021\234\031\275}\336)=S\225.=\326\266\313<\025\312\365\273yQ\255\274\r\344\215;9\365\3129\022\237\252\273Y\032\334<]K\343<\343|\324\275\306\003\002=\303\333\252=\241TQ\275\004D\265\275y\357\030\274l\020\017\275\361\236\334\274\202B\347\274KX3= _\014=+@\034=\013\312V\275UQJ=\326\302\301<\342\374/\274r\302\034=\271\271\373;F\310\243=9b3\275M\330\002\275\346\225\242\275tES\275z\342\001\274\325c\333<\273\020\254<\303\355\200=\r\353\001\275\315\331\263\273\344\024<\274U]\211<\2112\005\275\342\244A;\035\342\242\274\315\010t<:U\004\276\277\324\303\274\266v=\274h_\204\275\033\204\016\274\306\357\354<\265\351X\275\341F\353\274\255S[;\263\034\310=;\200f=q\nK=_^5\275F\215\202\274\016\361$\275\242M=<[gu=\020\241\351\275\300\246I\275K\003\363\275\337\272\300<oCS\275\201\364^\275\315R\316\274\003\'\215=c9\215\275&\n\240=\007-M=h\311\347<\244\252\224\275\240\020Q\275\264F\323\274\231\021\271\273\014\033\276<\210\243r=*\267k\275$\254-\274~#\353\274X\237\177<G\034[\272\322;o\275Tl?\275\007\302\236\274\001\001\235<\246\207t\274\257,\266=\365\253Y\275\310\322\206<b\256\255<\2310\242\275Q\366G=\322\271F\275\274D\317:\274\275Y=p\0358\274\033\344\017<\312\035t<\\\000\212=y`T=\327^\032\275H5$\275\374DG\275\205\231\373\272Q\013y\275\354\312\007<\005A\027\274\225\025s\275\236\016\322;|\206\030=>\366\226=\177\245.=$\'Y\275\260\020\260\274\264\373P\275\346\313\313<[\004\001=Kk\005<_l\255<\312\000\352<O\023\356\275]k\246<\n\231\335<\266\263p\273NY\367<|2\323<\275\010\001\275y\031\225\274\261\377:<L/R\275\344G\205=\302\021\025\275\211\235\035=M/&\274\025\000\203=y<\221\275\330\251$=\tt\247\274\332\217\270=\021\303P\275(\344\376\272#\333f\275\377\027]<d\227B=\2723\340\2740\322\262;\0279\003<\366\234^\275\204nU=M\202r=Mv\007\275Q\316~=\354\372\203\275\240\335~=\267\036\016=/\361q\275\241\250\322\274\204\024*<c#`=\312y%=\317w(=\310\352\005\275;\256t;-\220\262<\217\020\n\274\365\026R\275\201\364><\246\023\001\275\005qR\275Uo\245\275\026\367\246\2748\322\214=\231q|:\235}\250\275u\301l\275\332i\327<\212\344\233;\323\216\314<\247\340=\274\220\217U\275\306l}\275&\025\222<3\2177<GaP=\'\027\351<\317d\260=p\230\235\275\322\212M=\333]\260\275(;\006<\336\362S=I\223\254=\037\026\"=t\005$<U7o=Z\254\363<\024\016i;jK\255<d0\316:\253\3412=0\222\367\274\217\272\217=o\360\276\274\232j\305<\006\3363\275\243\013{\275\272\2408\274,\243\253;HeZ\273\221_\205\275+\260\264<\024\353\203\273w\326m=\222\023(\275\002aK\274u:!=g\026#=}\3036\275P\356=\273\217\230\001\274\023\247\243;T\256\206<\007\276\332\274\233\300\211\275\212L\264\2732\332\220\274\353\217\247\275=\r\331<\233\254\353;z\204&\275\216\014\267=V\"\002=\032\374\277\275\tP\274\274\330\265\"\273\342\310\354\275\273\220\211\272(\\l\275Fe\374<\310\343\276;2\227\243<\016\246\233;\335E\225<\356\273\033;\235\374\030=\217*\222\274AX\336<\355c\272\273e\243\201=X\333\237<F\036[=\200\356\330\273\351#\361\274+]\377<\373\264\314<\206\276\241\274\316\030\235<S\206\314\274@\340f<\327q7\275d8\302<\001\355\256\274\014\257)\2743LW=\336\210/\274\200\266q\275\275\331\013=\3657\221\274\330\260\010\274\234g\220\274Wi\234<;\014J\274\247\037\336\273\n\322.\274/L\227\272G%\r\275V \352;\242\372\337<\0040|\275\222\177\316;j\357%=\251\241\226\274\212X^<\327\006\000\274\367\\U=P\375\037\273HK\016\274\340sC\275\023\377\010\274c\354\324<\270z\235\275\246\262\315\274M\023\017<Ef\200\274\245}\304\275\323+\301<\327\315\363=\334\345\227\275(g,\275M\036\344=\325\327&=p\233g\275h%\224\275\224\341\204<q6\211\274\233\210\375<\266\235\"=\324\321E;=\324(=\342\010x;\037\210\367\274\276\234\231<\017\330\206\274)f\376\274B\r\234=\"\001d\275\202\313\352\274\013\372,=\202\rd=3\377\244=Z\020\263\275\360\274\257\275\003\n\243=X\220\205\273\r\035\217\274\017\264\331<\374\307\272:6\326\r\275\003x\023\275\311\360\217\272.i#\275\247\313c=\341c\021<[\023\256\275\222)\330<\271,\220\274SD\224\275\361\262\351;tw3=\010\003\377;\021y\036\274}\200\334;\246\026\004\275-\2031=\350\201\234\275\2236\203\274\306\017\205\274}\376P\2734\005\337<e\n\361\274\016p\263\274\233\321\270\272\300\242\316=K6Y<\321b+\275yZ3\275\254\027\334\275\343\017\377;\365\356\214\274\201\211\0109Y\244@=\377\271\031;P\301\006=\247\001\255<\3676-\274\224\000\013\2754\323\374=\272Vu=\275\301N<\345\r\303\274\026\243\361;i\277\226=\026\217\000=q\233\236\273<\272F=+mY<7\275\226\275\224qI<\032I3\275\221\327X\274\341\331\227\274\240\355\373\274!J}<%\003\026=G\370\210<@a+\274\213\235\243\275\253\225\224=%\017\235\274\346\312&<1Ln\275\002\314.\275\207Vh=\037\264\024\275\312\230\362\272\220\257\315\273%\337H< e\204\275\026#\031<Z\214n\274\326\320R\273?\026\177=\236X\203=\207\333w;w\204\350<\254%\'\275\305\304w\275\374l\350<\rL\016={\326V=\222\001#=\021\207\373<&m\300\274\224e\245=\004\361\337<\365nR;!\275Q=\301x\344;\257\3572\274\301*\225\275-\257\272=\260\364\217=,\250z\275\003?\'\274[\263\030\275\306\303\200\274\365\241\004\274\325$\306\273\325.\037=\316\020C<\242\352\366<\243\231\224=O\010\355\272\241\024\227=c_\005\274\335S$\275q\2452\275\237\314\236=\356#\017\275\353*,\276z#y\275\371-,</\3258\274\350\023\244=\351\016\355\274+\253\036=\t\360\247\274\247\251\021=V\002\231\275\211\331\301\274+\365\311\274\247,E\275\227\205\353\274\036\307m;P\370L\274\203\271#\274;\235\256;\314\200C\2748+\223=\355\262:\274\3113+=\366j\306<\275\2334=\243\2358\275\310\206\3418\260\374\357<v\263$\274\247\231\205\274\016h\005\274!m\210<\306\374\251\274\317^\032;Zp\275\2744N\032=\263\250K=k\376\002=(\231#\274\316\t\377<\264c\205<\230L.\275LNe<\356\224\271;d\332\370=_\363\3679;\177G=\232\355?\2752f>\274\204\346\262<b\341\"9A.^\274\323<\241\274\354\253\027\275\302\274\"\274\340\020\240\2757\315B\274>3\324\274\3662\247\274\177XH\274F\323\340<\345~\033=\371\214\322\275\366\265\213<\327\240\023=\3714m=\003sA\274+\325f<7\3333=\325\372U\2744u\321<\300O\364\27500/\275\253\242\235\272\336\236\240=\271\304F\274x\356\021\2759O\232\274\203\263\347<\246j~=\320\242\333;\344H\221\273\334?\227\274S`%\275?g\310;\002 \336<(j9=\224\363\n=\365Q\021<\344q!\275\035\377G=\354\244=\274oY+=\004\013\230\275\022\014\244<\362~P=\000K\205=\320\334\213\275Bc):V\2778\274 F\234\274MK\213;\257V\243=\316\021r\274\346Z\264;\314\n\027\274^\302F\275\344\273\232=z*\271\275\263)\035<\005\377c<]\260\316;\225\256\303;\024\006V<\263\261\232\2740&\005<\232\333\014\274\257\037b=Z\233\223\273qmk\275\016S*=zS^<f\232N\274\231]?=\252\031~=+\206,\275\275\256@=\031e\r\275\262\006s<\230G\341\274\211\327#=\202\314\342<\265\246\204\275\262; \275\213t\310\275$I\316\274\310,\372;\251\333\021=\226[\322\274\316\273\323\275\372\356\221;\300D\312\273\233\3243=\2119\033<\362\321\023=\363\302~=\352\222I=}\352l\274Y\234\007<\241g\33490O\244;\226\275w\275\223\320\213\275\205\245\214<\327\276\237\275\350{\224<\316\006X\274.`\214=\376\016&\273?E\253\274\211\352K<4\273\r\275\364\262$\275(\363N\274\002rF=p\000\247=N\030\361\2736h\260;uvt=\312\016==6\211v\275\314\233\310<\346\263\n;`\355\247\275\301\334#\275\275\032\363\274r\036\265\274\227Pv\275h\324\315<\264=E=\237]\204\275\267\016\024\275\246\023\235<UeJ<\252\010\314\274^~O\275\245T\n=9h(;l|\222=\353\333\214\275\261\371\266<\224\356\032=:l\026\274\0374\347<|\222Z\275\220\013\202=\230;s\273\213V/\275\225\035\213\274}\321\213<\263\022Z=\000\234\240<\311=%\273\366t\263\275\020;\024\275\241]W\273d\234q\274\334\002\025=c\274\004=`\272\010<\365\212\255\275\336$a\273\324_\271<\277|S\273\211P\276<\356\306\024=\032P\210\275b\334E9\2547\375\274\322{\325;<\027\234\275\037Z\251;L\364C\275\241d1\273%\303\234\275\246\235\027\273Nnw\274&\263\223;\315\305c\273\233\301\022=))\356<\251I}\275\216\305[\275\017<\337\273\326\213\244\274\361\273\344\273+a\367;\327\211\232<ujH\275\375\014\343\273\216A\344;\305&\306\273\232{\204=\311Z\266=\316\017/\274\342H]\275M\'\205<\324]\212\275P\252\330<\265:\265\275\211\265\222\275H\304\271<\314O\036\2740;8<x\002\212=r\006\351\274*\025f<\037\207\231=\344\233\006=\317\204\001\272\302?[=\366\224\037\273\207\"\030\275\225\355\361<~(\365<\261r\007=r\301\006=\"\313y\275\206h$\273\366]\017=]Y\213=\241\320j=\035Rm\275be\364=\366\223J\274\2007\013=\226B\036=\337\3127<9\375v=:\233\261\274\344\004u=\304\\\224\274`\224\020=\016\334^=\032\224\337\274z\345\375=\277\366\263\274/\027V\275\023\376\325\275\021\275\030=\340WB\275\177(\017\275\222\320\214<\217\374/\275\3705\230<\006\357\034\275\245\277\262\275\257\355!=O\242\237\275:\274B\275\007^7<h\231\246<\236\267\020\275\250\006\037\274\306\253\374\273\305\\i=\236\372$=LnT=\r\026w=x\0361\275\334`\007\275\257\227k;!NY=Z\310\371<5MW\273\3616\320<@\346\324\274s\017\341;\316,\270=P\310\354\273\254+D\271^\321,=\037\273\"\274M\3152=BI;<\033\023\031\275\016{h\275\213y\010>\207t\227\275\035\277\365\272@|\342\274\360\362\247\2750\324\233\275\232\242\021=\215\321\245=\3268\277<~GQ\274\"\274\375;w74\274u\017\367<\354s\003\275#\337\347;\365@0=\3656\341\275R\347\204=mhz\275\324g{\275\203H\233\275k\036\000<*\2760\275\233\017\301\275l\0062=\373!\201\275t\004f=\346\3017<\232\365P\275\274\224\206\275nx\226=1\363\300=\362Y\256\273\3213\256<\262\223-\275\030W\017\275t\000\016<\202\225\252<\3109\003=|d\211=\331\005\323\273\327d\016=b\366\205\274\314\2177=q\022\322\274,A\023=7\225h<\276\203\372\274\363\250\344\273\0215o\275\024\3647=M\267\326=Z\243\255<T\370\255;~&\212\271{\272\206\275hgG<$\013W=\036U\343\274\265s\232=\374\203\000\275\235\242\347<\352\232\202\27471\270\273\212\356*\27595\024<\263\357\372\274\376MN=P\326K=N62<\3706\266\274\254U\370<\244\276 =\306\273\237=\030\323\r=\233?\033=\305\310\206<\006z4<\260b\200\274\254\260\302=(\332\206=\025\315\240<\035\277\214\274?G\234=\334\212\213\274\372-\226\273_\254\n\275\331\337x<%\355O;\353\2522=\rS\222<<\227\233<\325\235r<\263\263?=\371\3511=f\241\322\274\025(\013=\032\316h\273dh+=\206i?\275\330\316\245<\324\205\355<p\013\202\273\312\315\255=\261\216\250\275j\351f\275\253\000\247<\000\200\036\275\345O\205\275bX\\\275\277\005\034=\227BY\275~Z\313\275^\353s;^\373\361;\227\031o\275\322\037_\275\202I\202\274\260\301\001\275\331\232\223=1\007\024<\303\277\255\272\330\214.=\"\035:\274\037\360\332<?\332\004>4tl\275\317\214\303<q\357#\274s\361\021=\255\251\312;\034\312\375\2736h\345;G\226\030\275\367\323P;o\245Q=xv\275\275\376\235\364<\037a$\275n\252\232<QC{=\270\226\301\273eA\230<\220\260\n<nN\021=\264\0268\275\316\302\013;\\\344\272\273\022\315\367\274\233b\366\273}K5=\272\352\235\275a\247\246<8\322Y=z\211L<Ef0\273\270\220\213\273a\271\365\274\'\021\2578p\325\211<[\nU==\002N\274\0277\344\2745\227\026=\360\243\036\275\372\210\221\275\n\2766\275]\243\257\274\215~\007\275K\207><\353\232\326\274\260G0\274\253N\337\273\2256R\274\"Q\277=\n\035u=-\267\275<\035|\242\274\036\330\211\274\1776x\275\316\265\272\274\223g\237\274f\252\362\274\035?D\274\310l\200\275\310\010\231\274\301\310!=\271x\367<_A]<\302i\373<\211U@\275\000\201\203=3\303b=\234\235C<.\303\'\275\337 J=\246\010G\274,\321#=\216\210M\275/\352[\275\344t\217;\033\3229=e\213\031=\342\005\022\275SY=\2739\362u\274\344\370W=\272\001 <>v\327<ai9<\314w}\275</L\275u\0366=\351=\225\274\005\221\214\275&\326\244<\364\320\322=u\2719\274\373x\006\274\311\326\250\275\244<\177=\245D\202\274\342\000\377\274\262\346\016\275\311\002\360\274\322\244D\275\265\302\017<s\264\223<\322\326\222=\312\356O\275\334\203?=yxZ\273 \237~\274\325M\273\274\366~\177\274\336\2407<\214\261\024<\0232O\275qp+=\222\252S=\003\002!\274\321\347\023=\343\177\204\275\222\250\332\274\326/\314<\325\ts\275\363\374\305<x\354\007\275\365\236\t=\340\306\230\275\177\367\232\275 \262|\274\313\336\270\274\327\243\003\275\310\216\205=/gh<.g\004\274;\343(=\201\250S=G\256\220\275\271\232\342\274\341\222\020=\313v\220=\375\177\227\273\346\020\272<\200\204D\274\371N\005<\'\364)=d-\201\275\2665\270=\021h\264\275\212<\237<kL\003\275\276\256\210\275~\232\353=*\231p;p\247\266\272\3136\315=\212Z&=\306=:\274Ek\r=\266\272\227\274)\336\233\274\310n\214\274\210\365\230\274,y\341<,Q3=\225\2228=\030RS=\247\232\027=\234\300\351<\226\253\255\274\354\341p\275jc\236\273~4j=\033\257\245\272\\\\U\275oBW=<A/:B\017\t\275\222\"*\275\352 \\=B>w=a\330}\274DE\235\274\355\204B\275\034\257\212\275@>\310=\"\266\330\273\225\362\014\270\253\323\247\275\344\310\022\275\036\354\003\275\001\016o\274\004_%=\025NM=\315\261\016\275\227\006\363\275\343t\262\274p\270\312;\366\242=\275\276\203\247<\266\001\037\275A\\\237\274c\337\315\274\001>\234=\007\262\215=i\366@\275\035\260\276\274#\276b\275\3051\004<5\234\340\274ub\345\274\010Gs\275\006uj\274c\220\302\272vn\017\275J\261\266\274\016\360\303\274\220\204>\275D\314y=\257J9\275\0065\352\273V\310\221=\321\272V\275w\210\222\274\306\277\337=\352\245C\274\371\370\217<\217Gy\2757q\257<\361g\242:\0335\030<\225g\235\275\227\277a<\265\251\036\273\005\244{\274\212\307\230\275\260\003\343\273\014\305\007<\323;K\275M\350\364\274;\211\342\275?\003P\275\265u\026\275\216\376::\264zr\275\257\333t<\247$\036=\305:$\274\022\360\353<\233a\260;\244Z\235;\365z\370:\327P\241\2751\303\010>\267\261\211\275\357,a=(Pf\275f\313P=\320$]<I\333\326\275U\342\210\275\200,\300\273\256\033\351;EWR=T/H\275+\221\200<y=\367<u\2062=\361e\314;s\214\343\274&\205\350;\336\365\312<\250\306\244\274\203p\002\275\0177\020<\030\324*<\221\025J=\325\375\215\2744\331\031=\313W4\273\360\260\234\274\311s>=\361D*=\014\224{\274`\311\253<%*\253\274\005\201\336<O\332\242\274\r\220\352<\202\321@\2750i\010=1\304\370<\272HH=m\225T\275}\262;<^\376g\275\023\300?<yT\006\275\000%\330=\032\272\202<\317\177W<l\236\273\274h\'6==\314\034=\323\3535\274\236\307K9O\215t:\336\345\226\275\371<\376<~<\200=\314/\022=\330\346k<\316\361Q\275\324\313\034\275\335\325\207=TQ\330<\375yh\275j\006\226<Z\336Q<)Zb\275\206\305\023=\3162\200<\261\272\372\274\215/\026\274\227\315\204\275\031;W=#j\"\275\205\024/<MN\316\274\r\224\357<l\234\255\274K\2551=\217\037U<E\206>=\220\316-\275\224.\356<\367c\007\275m\312\205=\000\333`=\365\370\\\275\370L\314=v\334\010=\'\nl<\255 \023=w\273a\274\304|U<\355\251U=\313\345\230<\177\250\025=\260N\032:\336\276\250=\317#\362\275O\373w\273\020\326\210\275\336|\"\275#\037\242=>\314\266\274wV\327<\006\356\215\275\301\025\363:\020\304i;A\235\374\274`\317\016=$D\201\275X\315\343<\231^K\273\352\010\316<\263\326\225=\346{v\275\242[\247<8\346\361<\302\314Q<\"\352R\275\360^c=L\033;=\213\367\315<\017s\007\272FcH=\213\353\377\274hG\235\275F\013\303\273\006fC\274\250\320 \275U\261\275\274\2272I\273{p~<\016\004\226=T:S\275\341.\244\275bay=}/\332\274z\2123\274@\177\177\275\324&3\275\302\243\250<#\206\007;\373\001&\2750\261\223<\021ou\273\006\314R\275\237\2354=\360\246`=\t\n\273\274Jv{\274-}@=\344`\274\275\237?9<\371\222\202\274m2?\275\315\323\036\274\017\275\215=U\261V\274\3328\035\275\344\002\202<p_,=\244\363\204\275~kc<\245/\010<\367\017\002>@G\367\274\260\001\237\275\324\201\206=m\351\332\273&\361\340=U\331C\275\024\270\204\275g\231\205<\361\360\007\275Xz\250\274q\000\254<x\373\213=\256\300]\275\2566\004\275*N\250\273B\227\215\275\262r\003=\255\374\207\2746zM\275\306\211\n\275\310!0\275\231\240S\275\201\305\002\275\367\351\225\273\272\356\207\275\205!6=&\016r<\217\322\024\274;\3075\274\255\202R<j\366\t\275\002C|=\304\233y\274\335=;\273\033\"F\274C5\254;\025\216|\274G/T\275\3013\327\274+\315\327\272\267\275\200\273ZB(\274\227\366\020=\021\343\037\275\274\350\377<>6#=F\252\214=\200\177\200\274\016\233t\275,\353\275;=*\210\275\325\206\023<}#<\272\321S\355\274\273\027\272<d\310\':\327\263\305\273=\3525=2\356C;\227n)\275\3467\220\274\232\333-\274\200\204\030\275_[T;:\366\370<LTD\275@\'7\275\331\302\301\273M\374\334\273\367\310\307\273W\346!=\003\210\020\275\001\216\004\275{\252I<f\026\201<\270<\257\273\036\355?\275\370\346\352\274Zk5=\251\364\234\275\344\027\236<\253|m\273\005\337\226=\351\351\034=\265\005S\2750F\001=\262\361\342;\251\213\340<\246\327\357<\363\240\275\275\335\215\341;\250=X=\305\211\213<\373\006\264<?\'\275<\030\365\237\2753xa<\262\253P\27508\361=T\2560=\303\203\325\274\347\\\317\274\010gJ\275\312s~=0\323V\275}\002\376\275\033*#=\367%\236\275\020%{<FS\031\274~ts<\372\2376\274\205\353\330=c\315Z\275n<\000\275J\342Z=\027\323(;Q\020\207=\373.I\275)\200\301\274(\216|\275z\200\037=\265\242\266\274\347\217\264\274#\346\272\273h\261M\275\226\334\313=\227\317W<\032w\003\275\031\366U<\271[\321<6\032\350<\272\372\005=\nN\267\272\260\200I\273\223\rF<kp\211=Er\253\274\325\224d<wJ)<O\257\273<\302|\206\275\246\265\231\274\227s\223<d\026\353\273\312\324\213\274\317\212}<=0\272=\027s\264;\\\000\210;\203\372/\274(T\312<0W\331\2745\331\016\275\031\3366=G\007\364\270Z\364\247=\271w\252=\367<E=\377_\222\275\250\334\032=\340U\004=\273\357\000\276Y}\003;HL\325\274 \274\026\274\367\035b<$\347Z=\332d\314<\340\252q\275?\236\036=\202b2\274\244\212\036\274\034}\226=\031\215\242\274\247\271\374\271\036\352\224<+\357\361\274nj\323<\0306\220\273\232\336\004<\222\324k\274\026\205\230<\306&\320\275\345\201\003=Zel;\036\367\247\275\275\230\000\272\t\032\n<\336G\231\274\343\275f=Yr-\2759\301f=\370#\372;\372\373\002=\277\226y=B\232\233;\307\271\363\274\225*\341=o\343]\275*\261\244\273\270\356\n=\337\316\207=\347\225\206=\350\376\003<m|\032=4\234B=\334Mf\274\337c\322\274d\215d=\314%\177\273&R-\275hF\310\274\230\205\201\275\253&@=\332NY\275\202I\240;Z\0227=j\352x;\202z\207=s*\236\275\374[\347\273v\362\266<\354\300]\275\377i\005=[\2259=\360\260#=\266?h\275\323W\277<5I\301\274\363o\310\273\022-<=l\371\212;\323$W=\370] \275\032\243_=\220\020p\274\225\220C\275)\343\310\274\221oC\275\3731\036=KX\204<[\225\213=O\006\"=\364\371\276<\262\245\317<\027\350\033\275\371\315q\273\205Tp=s\005\215\273\271\210\250= \013W\275/\315J\274`\353\035=\366d:\273\020\322\222\273!*\306\275\337CA\275\r\225N=\241\326}\275\276I\341=\267(\214<4BG=\200\374\257:\306ih\275\372\201\314<3\311d=\341T\240\272\200C\346\274\335\374&\275\267\377\213=\203\001)<\026\214K=J\325\316<\360\347\022\274\333\332?\275\200\273\007\275\251\000\010;K,\206\275Ml\027=O\341\337\274\031g0\275\361\336\226\274\3516\323<>\262\311\275\247\344\223=\030\306[=\261\201:=\366\304\333\274\025]J\275\247\222h=\006\200\257:\303e(=Fn\243<\352w\326\274-&\345\274?\026\037=\262v\206\275x7\242=\314b\347;\014v\222:\372F\216;\211\313\354\273\001T\376<v\r3\275M\354\031=>;\300<\224\373\"\275\322\213d=\370\363\245\274\222\331\241=\255Yh\2757\033$\275\217\377\010=\265.\020\275\037\023L=f^-\275(\303\241\274\007\333\010\273\002\222;=\200`\357\274\3569f\274t\003B\275}\321\262\274\201\"\323<\250\341\325<\324\313\217=\301\342$<\321\351\025=\225\3230=<\345I\274!\202\246\274S\265/=\021~:\274S.\320\274\247;\255<\307n\212\272\221X\254\274 \240\346\275O\274\374<\251\354*\275\177r\222\275\246\255\337=@\316/\275>\250\233\275\376\377\032=\356\226S\273K^\316:\245\026\234\275b\000\232\274\213\273\034\275\024\253\267;\366\210&\275\033\242\327\274\335\037\377<=\357\222:\207\237\272\275\033\251m\275\304,\303;\205\022\261;~\254\236\274\271\2434=\007gh=\\\364\317<\023\033\245=\002\332\371;\325\317o\275;\225g=\023\333/\274\220\256L\274\347\341v\275\032\364\260<a\354\314<\244\245b\274\2533\251<\002p!\2745\002\020=\342\234 \275\337\3479\274\2311\032=\307{\304\275\216\226\222<]\257\242=\030\007\000=\'\243\021\275p\316\t\276\010\320\312\275\364Z\027\275\002=c=h\276\235=\r\244\225\274\250\020P\275\354\327^\2756p\227\275p\227\207\274\367\270\225<\227|I\275iR]\275\334\315\013\275\344\256\035=\'\377\204\275+][<\306\"\205=\177u\253\274Q\273\006\275\000\037\213\274\361z\000=\2272\233\274\342EH=\004\230\320\274t\315>\275\004\201\351\274\356\0055<s\257<\2732\346\033\274\r\206I=\031\"\027<\000\357\014\275\350\355\244\274\223M\031\274R{(\275\235j:\275\022\261\356=\347\206=\274\021l\017;\253\r\260\2758h\225\275\235\310\312\272As\006;)\314/<k\t\362\274\200\267k\274\312\031\372<\245\3239\275\233\030\222=O\377r\275\202\244\036\275\026\3105<\3537U<\257p\n\274\362\224\317\274}%\315<8\376 </hS\275\207\007o\275aLI\275\303\026\333\273\237\320\213<X\346\224;\r\037W\275w\362\225<\253r\324\273\350\t`=l\270\277\275Z%\t\274\303\r\006\275S1\003\275\354\236I\275X>*\275&\300\017:w\235\240<\036h\203=\036[\010\275_\353\256=\235\025\315\275WX,=5\374\211<B\250\372\274\264H\t\275en\203=\234\247\306\272\363lJ\274\363\016\322<\247K\365;{\343\t\275\212\351\351<\311\330\264<\255\274\227\273B\rZ=<\354\246=\301\2276<\3228%\274\236\247\031; K0\272&\247i<z)?=m\222\026\273W(\273<9Q\275\275\037s\224\274Jm\023<*t\025\275\201\221\221\275\352\211\260\274;\250\262<\364\221\300<\204\020\204\274\324\310\307<\365\035\202\274\347\307X\275\372\3431=U\276\200\272,8\213\275\277\331\214\274T\210\031=\363\362I=v\225\204\274usk<\243\375l;\265\316\332\275S\231\034\275L\375\265<;\237\350<\356,\016=\310:\360<\017p\037=E1\220\274u!T\275\025\277U=1\352+<v\357\030\275\370\306\371\274\014\030\231<\262_\013=\243J*\275\357\225X<\351 \007\275\364\203-=\031?\025\275\325\302\217\275a\026\374<ok\240\275\211\'\025\275Y\214\024\275\370\023\2379\251\261\313\275\025[x=*\002\202=\t49=\253</\275\204\245\000<\316u\226<h\017\246\275\321\365V\275\337\242\327\274\003\334\352\274\3043\261\275\342\331\330<\264C\334<\350\034\252=\345*\261=\315\321\226<i\276Z=\2675#=N\204;\275\022\312\343\274\234\250\315<rh\362\274\254\331\223=^\330\233=\200\244\266<e\277\222=\212|F\273a\021X\275:\265)<x\211\257\275HW\376<K\337[\275\006a\"\275yrX\275\016\340\032<\211\372\236\275bD\320<n\213\300<\220+p=\276v\320\274\333[-\275Z\037Q\272h\367\203\271\013\377\"\275\031\212\220<6qa\274\236\375M=\004i\247<F[\357<A@5=\273\222\317=/k\236\275\366#\215=)K\004<%jU;Y\027d<\207\376\356<\343\023\237=\314Q7;@\303\265\274<.\346\274n\023\r\274J\325\342\274E\310(=\371\326Z\275:\\J\275\241\006\226\274\357\310r\275\033K\025=\363\360\033\275\340c\361<\322i\317=j\351\214\274ZpO\2754 o\272yyq\275\300\002^<\005\232\\=\257w\261\274\327\251\2108\326W{;\3219\302\273\344\321\330\273\022\210\356\274c\014\177\275\201\235\013<2\314\371<\222/\360\274\226\221I\275\2165\374<<\212\262<\341\252\346\274<f\177\273\233a\272\275)\364h\275\373\255\302<]\014\212<\237\331\342<\034\010\316\274\224\371E\274\244\305c\272\020@L\275S<\302\273\315W\272\274\360\211\226:S\3218\275\370]\037=U\211X=\200\262K\275\371\224\030<\367\332\326\274v\220\271\274z4U\274\264\013\230<.aE=\337\r\245=\376l\202\275Z8-<\355\312\202\275u\272\022=\374\234\025=V\321\233\273k\221\216\274s\254\264\275lF\217\274X\251!<Q5\000=Y\367\304<c-\265<\346\016j=\010\000\202\274%\315\242\275\007\375|<=\226\177\273\236M\273=\0039\t=\272\274<\274-\300\305=,\375\240\273\214\nE\274\003t\030=3\200\007\274;\016-=\261\005S\275\201b.<GyB=\332\227\240<M\312\333;\372\267M=\034\311+\275!\206\342=B0\251;\020\"\022=\207\217J\275T\3269=\321{#\275\332\302o=\322I*=\230n \275\312Al\275$\020-=7c:\274\033\010\032=\263\016\242\274A7\023\275\330b\246\272\355\306L=\226\347+\275\304\002\303\273\227W%\275GLj=\277\216C\272\360\314\272<R\344\324\2739\031\304<W\216\001=?{\330\2742\352a<\000\332\022=\357\207\335\275\232\346W=\002\216\004\276\344@\234<\227e\236<\346P\200:h\2302\274n\215\212\275W\257\017=3[\"=1\203)\274q\021Y\274\237\352\333<C\353\210=*\'\034\274y\"c\275\003\n\n\275\237C\021\274\2467\307\274[M\231=%\004\215\274\350\3603\273L\256\237\274D\216\311<}\021\316<\265\016-=2:\267\274H5\251\275f\024\n\275dZ0<\313\362\"=\377xr<\013J\235=N\3148\275-hL<\225\243\374\274\034\321\221\275\363\270\003=8\036\023=D>\200\274_\204\213\275!Z\030\275\177\201\260<\004\014\371<\337\367\241\274J\341\022<\232\340\227<GFl=l\277\001=$\263\262<M\354\304<\313W\272<1\r3\275}j\010<\034\203\340<!gu\275\273\014\227\274.\270;=\276x\005\275U\\\n\2756\215\253=.\253\236\274\212I\370\2742\314y=\330>m<N.E=.\312|\275\300\300\212\275\252\204\250<\322S\274<\353\202V=\346\324\262\274\325[\001\276\320\2502\275\372\324\226=\330\246\006<\023\030?;O\263B\274!\034\031\2755|.=\357\367-\275\220\250\237\274\354\366I\275M\364\234=A\333\225<+y\016=\330z\303;\247S\r=\246g\003\275\006\226\341\274\032\346\177\273\261\205\212<\323\362\232<H\377\251=\3457o;vM\033\275t\221(<2\344\350\273j\031P=\363Zh=\215\203\000=\363w\202<BXZ<p\254\003\275\033&\253=\031P8=\302\320\207\273\376\373\226\275\203h\360;\362\261\207<);\206:\177\273\006=\311\022\007=\024Z\224<d\232&\274\301\260u\274\026l\276\273\217\306\r\275\254i\223\275H\226\3259y\242x<\025\343\206=\005&%\274Nt\346<\213p8\275r\3423\274/\013J<C\335\241=K\217\210\274\236sB=\327\330\343<\024\027\301<\210HV\274\356\016\314\274M0F<(Fm=\371\340p=\337c\321\274\025dJ;\373]\220\274mG1\275\315\270\024=\327E\024=k\024\207\274\032^\177\275=\225\021\275\261Iy<\014]1=IO\002=\3624S=\224.\255\275\021\206\224\274\013&\034=\372\254\027\274\345B\213\275m\365J\275\232\'3=\264@%\275R6\313:_n\363;\254\326}\272\371\013\014=P\017\003<m\304\217=[X`=*\360\327<\357F\261=7\204\205<\246\335\021\275\037y\204\275\374\361\300\275\t,\261\274\317\345\251\275G.\264<\240$\244\273\220Y\030\275\246\320\312\274u\202\361<\210\237:=\267Ln\275S\303\024=Z\372\'\275\224\344K\275\264j\255\274>\226\255;\315|\260<k%&=\013e\322\273u\267-\275\306R,\275i\007\276\273\254\321\331\273@\341i\275\345\007}=p\272\251\271\276\200\355<9s\374\274\301\001\203\274\310C\r=\t\350i\274\000\347\003=\322[\213=\034\254\236\274\347\024\275<9\373\201;Q\236b\274\370\010\251\2752{\213=\014\366S<\250\310\262\275\310\177\257\273\346\252}\275\353\t\243\275J\335n\2722\200\273=\326\r\243\274\222h\334<8DA\274A55\275\247\304\305\274\024\252\030\275\t\030Y<\233 \373\273[(\334\275\263t\342<\321\026\210\275Y\177\232<Z\207\253\274\320>\347=\246\205\204\272\365@\366\274&`\210\274\032\331\221=7\202\013<b\326\003\275vj\251<\311\023\327\274\335_\203;\035\325(\275g\333\322<\354Hd\275c\320\020=\243\235I\275\377\367x\275\224K\361=\377\232d\275\335-\013\274I\032\242\274\267;\270=\274\352%=\020\033N=f\021:\274\365\032\301\274]\3639\274\312=\\\275\002\262S=\354\352\210\274\215\252i<smK<4G\242=\252\264\224\2742\254\251\275j\036:\275\270C*<\025Z\302\273\001\216\026=\035\014\250=\317\020\222\275\351\256\231\275\377\\\303<\233C:=\204\007!\275rL9=\236\312C={H\027=\361\036\\<\266\227\231\275+`\220\275\362\355\313\275\320\245q=\224h;\274V\201\035\274\350\323\340\274\251\204N\275:\243S=\353\341\210\275\246\243\364=\313e3=\250\357}<:`$=\302g\337\274\361\324-<VE\364<p\361\003<w\346\226\273{\205U=\221\354\316\274l\276\224=\340T[<\214\223y\275\214\325b;r\0222\275\267Y\216\274\376t\234\275UN\326<\\s\331\274\261\003\254<\362\307\216=Z~\016=H3\021\275X@\255\2741\304)\274\313z\233\274\331Yy\273\3708\326<\256b\245\274^\245&=\314\305<\275\002RM\274[\220\211<\227*,\275cY\257=\037\362\322<\302A\252\274\360\031)\271B\344;\275\376n>=\366 \031\275\363O\206\275|\267_:{9u=\370\322\234\274\356Z\327<\246\n\264\274,\335\022\275\323\006\356\275\346\362\236<\305O=\274\376\003Y\274\224\0218<\002\177g=\25784\275^\326d<\003\366*\274\341\346\277\274\331\220\246;\022\373N\274k\205\022=Av\231\274\317\013\206\275`\257\310\274\350\205\326<\304\375\006<\024Ws=\220\221L=\351\266V=\030\375\347\2739\276\256<A\r\351<\004@\317<\260\367=\274\220\202\036=c\320\231<\302|\246<\263({=\3243j\275\350\343{=\265\2346<\347\267\367;(tz=\023\351+=\370B\217\274\241\244\203\274\234\256\022\274\317\324\254=\316\331\230;\367\333\237\275B\274\206\275Ay\212\274\024\003\017;&c\013=\377O\005=\225\245\313<\024O\030\274u\010\234\273\344\201$9\216\356\311=\"+\313<~\013\223\275\2514j=\314\301\027=RE\246\274]\r\177\274\033\240-<\242\266\236<\036\017\245=\300(*\275f\331D\275C\245\236\275\231\236\223\275\007{\257<\t\001\356<n\311\312\274xn\002>\323\304|\273\367\034\205<\342\251\252\274o\240\301\274r\253(\275\311\346Z\275\262\016\364<)\341\241\275\204\237\"<O\025\257<\370\361\001<a\244\"\273P\014l\275a*h\275\225\375\275\272\034 \t=\223%w\275\351[O<\276\'\271<\201\331^=\260B\231<\312\311\320\273\217\243q\274\332\361F\275\350N\263<\322=B\275\001\375\276\275\343\365\304<8Q\210=#\347w\273\"\0215;#\234\310;np\313\275\233\314H\274\271=\372\273\355\342*\275\310\033\217\274\254\354J=t\327\212\274\373\312\342<\223YI=\373\225\305<\341{\002=\317[+\274]~\214\275\337\230\007\275\262\362\224=\222N]=\301\351N\275\241\376F\274\016\250\357\272o:\246\274\222\314!<\336 \300\274\345\033|\274\252\005\216=\032)\006\275\276<\r=\271\366\325\273-\300W\274d\036\030\275\367;\022\275f\221B<0\376$\275E^h;\232\0162<a\237\371=\273\360E\275g\247{\275uG\003\275\034\n\256\274\367\243\254\274\322\233\353<\247\234\335\274\325t\214=/i\232\274\007<\255\274F\207\257<\004\371\270\274\2164\316\274\365\233\272\274\264jR\274\212\330\323=Srr\274\037\207S\275#\227)=]\370\362\274\"\207\013>&!\353<<\210a<~\307\324\273Q\304\274<\317\227\232;H<(\274\237\267\027<\022\260J=c7\224=Q\217\020=\373\223\306\274\324\3210\274a\'\271\274\213fP\274\264\\y=\203\237\251<\2765\016\275Y\370\266\273)\000\373;\211\314\034\275\002$!\274}\302\215\275\312\340.\275\263\315p=\241\025\244\274a\362h\275l\310\312<\000\343#\273n\225\300\275\363@\333\274\243$L=E\204K\2759N\034=a\270Z\275\206\337\014=]\020m=\321#M=\246l8=4,n=\212\362\005\275\327\260\206=\362t(\275:\371.\275\nH\207=\024;\231\270T\'\222\273k\031T\275\331\220\252\275\205\2330\275\237t\354\2724\316~=!\377\370\273\021\331^\275\300\036\r=\215\302\235\274p/\341;\314(\031=\207\361J=\271\r\266;\000$\216<\243\264\346;\022x\226<\307\245\220\274\002\302\236=\025\240\023=\351dT\274\233\003\364\272\352\356\316=\353T\253\275\202\315\237= \302r\275\255/$=\r8\207\274\316|N\274b\307\265<d{\3358\242\323\036\275<\224\314\274\017\260\230\272\024q6=A\3667\273bt\222<RTK<\242C\242\275)\336+\274\264\325\234=\353hb\275\200\211\261\274D\311\335<\345i\222<\'\230v=\3532\200\273\343\010\201=L\013\014\275\337\335\246\274\207[@<u3\326\275\220%\236=V\313z\273%\017\371\274@\r\002\272vn\316\274\252\223`\274\303\001\245<\364\274H=\033\227\223;\355km\274\030\3453=\311\377\261\274ZQ2\274\325X\214=\267<@\275;I\254\275#8\365\274\003\363\257\274v\375\'\275]\253\231\275\031\003\027\274(\266\n=q\313`<\367$\001=C\252\324:\260\220\220;Y\232\371\275,\224\035\275C\254\027\276\2321\007\275\021\032 =\265^\336\273\313(\374<\360\213\335\271!u\241\274G\274\346=\256\250m=\223\310H\274\212\363~\274\\\372\365\274\2533P=\227\201\034<(\'a=\226\260O=\343\243m\274\351\305\202<D\273.\275\034\247\205\275\325zF=\t\366\":\031\242\203\274r\247q\275\356\345q=\201\313\237<\304o\202\274\001\257\267<\261\323\251\273!\353\312\274\214\'\340;\361\302_=\204\026u=s\376\330\275{\2271\274M>\276\273\221\35059}%\200=b\337&\275\317L\205=\025\326@\275^\0171=\"\270K\275\010=\225\274\000\310\205\275^\314\375<\354\321\321\275\025\336\004=\214\245o=$\271:\275\306\035\243\274\304%\367\273\n\002/=z\351\215=\232\246P=n.>\275*R\203<\357y\032<\201\362\016\274G\004a\274)\222E:\203\370\367<\210h\303\274:\347\007\275DY\256\274\2120*\274\032\264\270=HOj\275\351%\031\275\274z\245\274kV\025=y[\272\274y\204\247\274\202\3357=l\254J=\034\036\302\275\231\213\351<{\027[\274\354\226\016=\254\177\342;k\347N\275\341\365\363\274\261)g<\327\310`<\027\201a=\213\233-=+\226\022\273\2033\223\275\252#X=4Vw\274~\236[\274\004\266u\274\202fb\274\\\003o\274\216\327(\275W|\200\274\315\353\337<\t\017\321\271Y\021\221\274%D\037=\006\232\021=f\246\023\275y\377D=N\005R=\347\345\200\275\376\344\246=\220O\322=m\313\000\274\202_\213=\355\246~=@\235\364\274\243\375\354<\217k9\275\230_\302\275\335\322\366\274n@\202\274\320\362U\274r\246\024=Nt\020\275C\206\221\275Qf\326<@<\2117^\223\241<;\026\303\275\246\007\252=~4p\275nw+=H\352\341;\035C\035=\034\235\222\275\235\347\256=\302A\344\274\232\323\201\274\220\367,\275\304\"\003<\367\314b=\025\377\251=\321\326\227\275G\316l\274\323\330\235<\224a0\275\002,\237=\013\342\216\274X\017p<\221\017\226\274\034\007\263<cB2\274Z\256\231=\321s\304\274\352\234\231=\020\350\215\275B\242\t=w(\207\275\005w\245\274\212\206\204<\345v\321<\362\300l\274\215n+=\250eZ=\345\200c\275iT\242\2747\331Y=w%\211=\240*W=d87<\222\036s<^~\241<\004\002v=Y\375%\275\357\026L\273M&Q=\032|T=\031\005\371\274\250\2149=\261,\200<\215\2541=S!\212:yw\346\273e\010\234<|\226\036\275@M9\274UO\316<3(\315\275y\354\020=\324L2\275++\307\273\202+e\275Qg\260\274\241\252\r\274\"\224\256<\021\006\303;\313\0267=\221\004\233<\330p\n\273\347_.=\337U\311\274\342\235W=>\346\271=\037\205\324=:\311\215\274\262\322\n\275\022g\263\275\rU\001\275\355Q}=\252$\241\273 \013$=\367\022>=%\026 \275FU\022\274\271\313\n\275\367\202R\275mw\027\275\302Ou\275^\2512<8\000\356\272\3735\007\273j\200l\2743\235\206:\326:L\274\313\200\261=\037T0\274\232\001\332\274\224\332\333;\300&\247\274<1b<\257\232N\275\362\366\227\274Q\007 \275J!6=\201\272\363;\334\216B\274\365\004\326\274l5\207\273\035\2109\274K\352\236:\333b\321< \264\037;\313U\310<1\227\327=\326o\247;s\200\267<\255\353\306=\337(?=I\354\301=}-\036\274\2174\234\274Z\344\225=Dv\210\273\335\237\233=\303\006\035=\202d,\275\345\350c\275N\024n\275t\240\207=\371%\3379zt\035\275<D\216\273\350\245\315\274\036\001\256;B=\234=\003\002\365\274\345\322\255<\373\332m\275Q8c\273H\025*=\354\221,<\270\017+\275|6\203\2754\364\365<\323\304\263<K`N\275\033t \275\351\271[\275\226\311\305\274\324e\276\274\257\305\244<*\333\267\275/\241\222\274a8\203\274\375S\035=\330\232\307\273\310\274%\275\263\214\310\275\246(+=\224y\200=\212#{\275\323\037\300\274\232e\263:\357;5\273\313\377,:\202\302\346<\217%,\275T7\201<C@\201<Y\225\357=\305\"\335;\275N\341={/#=\242\341\235=,\032\254\273\007\356\207\275\325Y\373;\203T\022:\347\266\250\274\037\r\032;\031\245\024\274%Z\355<\250\262\256<\023\2524\274\206\241\205\274\356\337\322<L\t\320<\271==;4\017\013\275qv=\275\366!a\274\016\353\322\271\257\010\365<\204\033\217=$mg\274\330o\252<\031\260w\275Uc`\275b\262\266=\260\013\312\275\343\303,=L\210\316<jZ\246<*.\265\273\3718\222<\014p\362:\323\342>\274\206\014G8\222\263O;r\213<\274\347\242\013\275\337RU\275\357\372\342\274\302\235X\274+{\203\275\345\275^\275\010\255S=*\301\305\275\221\250t=\2164\214\275$\264\305<\210\rJ=\316\230\233\275t\037\013=\341\007\265=/1\241\275\341\r5<a>@\275\326D;=\030\251\300\274u\313a\272H\361\305<\252p/=\r3$<\373\346\220<~\354p<\364\330\212<v\242\315\274\353C]=-B\264\272k\210m=\226\010\025;S5M=\344\244\300\274\373\025W\275\036D\247\275\257\034\230=.\237\307\274(\305\217;\355\241W\275\271e\354\274;\004\343\274\007\375\224<I\214\346\273z\261\227<\231\3430\2750a\367<Z\023\351\275\206\207C\274lJ\277\274\014\032}=`\345\272\274\316\017\376\274a}\237\275e)\242\275\250\215\242\2752\371S=\023c\030=\373\210\274\274\3650\025\275&\214M<B\222N=\370\274\003\275\r\356i=\2724\001=\246P\275\275Y\016E\275\270\250R\274\014\322\003=<k\n=&\317V\275H\203\020\275a\224\006\275\023\315\376;{\342p=\320\223\357\274m\363\262<\272\027\367\2745}\355<\306\273\377<\222:J<\346\233\240=\220\243\007\275\233\006\024=\020\361\215<\341\346\255\274\014}\004=\373\ne\275\014.\275\274\325L\215<\262\224\223\275)T\205<{Kg\275\331\007\377;\3103 \272\032\022\\\275\231(\234=tV\214=\356\tA\275\245\207\007=\033\'\036\275\331\212\211<C\365\361\273\303\364\251\275U\220\272\275\202\031\265\274\0250C<\252\224\036=l.\377\274<\247p\274\205HS=fr\371\274)\006\372;\000?p=\232\033P\275|D\020=\303\205\364<X\201}=R%k=+\376&\275\360\251y=\223&\323\275_\273s<,\230\316\275h\325\r=\347\362p<n.r\275\267\207\036=.\327\205=\270\262\004=oP\234\275k\346\220=\274\370\323<\317u>\275\312\246\014=@\005?<\031M]=\224\371\252\273\366*\034=\326\345%\275\220\270\201=Z\307\025<\366\271M\274y\271\372\274\005\273E=K\025h<\205X\r\274\257\364b=\214\353\230\274]s\205\275\302\2506\275\220\036D\275\364>/=\270\335\344\274>9\361\2678P\210<\033\027\244\273\360\311\001\273\374\016*\274\233\333\303<`+\373;\236f1\2759Y\274\2740\222\204<\306\205+\275\335\371\354\274\3037\204\275\335\020^=[mi<\3100\251<\177\325\217<\005\013\374<\001\037\"\275\026\261!=\232\264\025\275Dj\344<]d\020\275q\217P\275\363\324\n>\234o\213<\300+\014\275\212\212\270<\225\212\212\275\013@B<\316W\274<\333r\004=\254\201\330\274\253W\202={\322#=`\363\227\274#\014\004=F\005\205<_N);zb;9\251w\021\275\001}\236<\"\246z\275jc\333\275\356\310\003=\352\322P\274eF\231\275\030f\215=)\004\342\274\305\301\202\274S\347\215=C\3545\275\274\006P=U\271j<\373\307\337\274\247Q\315\273n\345\033\275\331i\006\275\374`\304<u\006\224=\206}\032=\2429\027\275\242/\250<\225\037\326<\230\340\373\273\275\361\221<\314\302\227=\277O\300<IV\240<b\355\226=\300\023J;\266P\004=\205\036\261=\374\010^\273n\376N=0\321\220\275\037\201\277=\355\274\234<xh\223<^\370\324:\t\365h=\202<\210\274\t\305/=\004\235\250=\022\037\230<\240\322\245\275\217z\240<\370\210\222\275)\246\321\274<\026\326\274j\233c\275\353\240\025=\231e\312=b#/\275\014\254\207=\006L\262\275\245`}<\363\343e\275\031\323\022<\233z\2469\252\005\020<+R\021<x\254\310<z\324o=\360\222\022\275z\235\022\274\264%\246<4\266\263<:\334\200=\262fS=\306\276\234<\007\343\031<\311K\033;\027\016t<\314\267\225<\366&o=3\005\337;\372(\350\274|\331\n<\337M\344\274\240\322$=\235\313X\274\240\005\001\275\221\364X\274\031u2;\005\3671\275\001,\257\273\320\372\333<+\223\356<iX\t\275\037\235_=`\026,=\013\0144<\211\200\324\274\225\022&\275H?\254\274m8\032\275\006~\251\274\271\223\216<\212LA<\370\233C\275\326\321y\275\226U\373\273T\351u\274\036d\013=^a\001;\203TK=\200\320\257=\017\345\222\274\210\262\314;U\272\363\274\324\275\032=\275Z\304\274\034\326\317\274\033\363\253\275\220O\213\274\r/\362\274\'|\265=\206\360\265=V\353\334\273\375\\\203\273\010y\341\275\344\355 \275\221\322@=\214\355\222\275D\340\325<\207Ye\274{\034\302\274\310\216\"=x\330~<\256V#;\222\361\214<\035.\221=\274\010Y<`n\340<H\335<=\340\207\016=\211\"\036\274\340\366\347\274\230\213F\275x\337P\274:\357\213=\216|\234<\005R\365<\007y\222\274\207Y2=M\3461\275\202\021\246=\275\200\352;\313PV\274\226r\200\275\333\247\233\273&N\301\273<\234.\274\333\332\244=\rZ\224\273C\310\213\275\236\310\254;|\240\340<\231\003D<\335V\344=2\310\020\275\205\334\202\274\251O\276=\362X/\275P\374)\273\247Z\236;\225@\t\275UAw=\260{\023\275D\212\002=_\205F=\307N \273R\334\267<N\001b\274\275\345\222=\202y\254<\257\241\220=\nu\226\274\001\272Q\273\340\376\204\274\215\016\320=\275\330~=\217\254\300\274\206\375u=>@y<\302\302\352\272\342\327\376\274h\356\357\273f\301\263<Xb\221\274\006\007q=$\230\267\274\257\357\244\275\327\206Y\275\017(n=\2103]=\211|\013\274\353\202Q<\201\226\221=\013\211\307\272E\273_=\3130R\275\217SZ=\t\370 \275!uW\274\021\271\340\274\374\025-\275\\\201\361\274W\276\021\275\340(Z\274\330\272\206\275CX\360<\350\344\234<\035\004\221\275K\271\034<\253`T\273\345,.=-4\343\274`1\325<\000\314F\275M\372\201\273\344\2363;\316\347\325\273\247BP=:\224\277<\206\263W\275w\234\032\274S\203w\274\260a\365\2742\300\n=\216O\362\274\211v`=\230\355!=\"D\025\274\200\220(\275J\036?<V\203\223\273\314f\027\275Iz\220\274X\nI<\3201\206<\271\213(\274\323\272\n\276\003\223=\2751\263a;\207\324\013:\346 \315=\302\021\211;O\333L\274?|R=\34286\275Y\261_\274\223\330\352=\310\200\254\272\235\204\301=r?\355:\212\267\200<\014\302\364\274\206*\220\275IC\262\275N\010@\275\365\002\334\274\002\232\020\274^\324C\2746Z\231\275\232\355#\275\002\200\317\274\034\351\016=\323\355\270=\373\265\036=\225\334\331\274%\375V\275\276\357\206<\354\203i=\237\031\272\274xP\235\275\010\277\013\274\340b\366\274Rz\301<\255\n\013=\023\272\255=\362)\'\2750\231\370;.\232\252<\273\010\313\274\244\tl;\222\010\340\274i\315\226;K\257\323<\356Y4\275\271e\266\274WY\261<1\244\037=\014\t\"=\207b*\273\300\3409\274\212\341=\275<\3665=|n\326<\263\204a\274\030s\203;,\200%\275\005H \274\245\201\256<\3558\263\274Ot?\275z)\236=/\37199\305Z\261\273i\314V<RZ>\275\235\262\220<+\301\356\273!Q\014\275\352\377\245\275}\267v<4\335\002=\34689\274O\211\035\274\325l^\275\252\202\212<\245\227\362\272\214\350D<\325\355+\275f;\007\275h\327B=\357\010\260<?\344\231\274P\344e<(\246\362\274\005\272\375<-\272\206=\330(\370<\222\226\215\275VV\250\275P6\231=\240\264\202;0+(\275T\330\301\275\261I\177<\'\275E;\000IP<5o@<\253\016\321<\321H\242=v\362\201=\341M\234;\003\320T\275z\347Q=\022\020\301<\322\020R=[\006_;SC9=d\221<\275\332\222\351\271\364\"5=\230\014S=\252\013W\2741y\017\273\272\211\013\274;\272\245\274\372}\013\275q\317M=\020\225\362=\270\337\212\275\305\373\002<Q\371{<\327\322Y\273\376\014\245<\025Z.=\")\322\273:\221\333<\362\314\034\275(y]=*\371\026<K\026\210=\242i\253<\010e\332:)\276\261\274\235m>\275\272\321\222<_\t\217<\327J\240\274\276\\\247:\252\214\250\274\023>\360<\027}\242<\020\247\253=\266fp=\352h\262\275!\3563=\351db\274\222\352;;\273\270\247<\225\227\304<\346\310w<\023k\241<\370\323b\275v\'\233\275\r\005\023<hgQ\274\367\314(\2751\017\303<\262n!=\033\005R\275\260\373\211\2745?\010\274j\342\034\275\242,\t\275\264\n\331\273\316k\t\275\242J\200<\347Z\370\275\321M\177\275+\373\225\275\001\203P\275\274Y\004\275I:+=\2079\311;\010e\037\274f\216\303<\004%Z=\336\211==\275.\227;\374\243\322<1\2754=\216py\275\247#6:\211\241\323=\300\205\t=\212\373\003\275\371\310\307<\251\257e<\177V\251\274\250\303\024\274\227|\252\275\307\014f<K\226\366\274d\360\233;\376p6\275#\246\224\275\345\346\205\275\353S\340<Q\351\323\274\354\316:\275+-}<\243mJ\274vv\220\274\263=\211<\374\365^\273\3735==\263\376\036\275Z\203\324\274\001 ,\275\327\205\013\275\034\214\314\273\377\014\221:$<\020=\366\320\212\275\362k\'<ky0\276\355B\216<y\001v<x/7\273ZU\264\275\001\377\310</\251\027\275B\205%\2745\233\361\274\352z\250=\327L[\274x4&=\314x\237\273\253=\265<~\214\212\274\0219\337\273P\341\202\275\"\361t<h\237\201;\211\274a=]\372\376\2744\233#=|\224f\2744\237|\275\251\036\200:\274\234u= d\177=\365\250\377<\013\270\202<\272\201\255\274!\272r;\272\261X=\243Ty=zr~<I8\356<u\036\013\275V\315\254<\324\t&=MNB<\005\220`=G\245(\275V]`\273\331]\375<\217R\234\275\310=/\275\231\342\252\273\373\226\"<=lw=\n\212G<\2478x\274\302\\\032=z\251\227\274U\311Q=\222c7\275\357\356\016\275\223\nt=W\035\363\275\030\367\277\273\344J\213<\032\201%\275\335r^= \275\337\274\327\260\003\275\370TQ<\006\310\354<U\003k=\230\314><\261\254/=\270\346\307\274\377\364\255<\036d\n=\335P\204\273\266t\255\275c\"\031\276M\345\314\273\377\006\214\274\264\320\215<MV\356<?r\224\275rN\225<\363\020\235\275\277>e\274\375^\232=N\323\316\274\310\217\024\275)\000b<\367\334\217<\335uD\274p\226z<\032w\256\275\322d\207\275o\201\217\274\236\303|<\353/j\275\371\233\236\274\023\232!\275\020\232\254<\247\n\020=/\267\014\275\202tw\275hj\241=\201\344\252\2757\320U\275\252\251\232\275\177\303\035\274={B\275\276Y\307\2748\006\201\274\2716V\275\320\263\365<\245\177\246=u U\275A\025f<\265\033\213\275\335l\241\274\354\347\202\2732\323\001\275\371\226\016\275l\326\240=\200\314~\274\331\364U<%\036\033\274U\211\227\274\205\243\325\274\337\313\306\274)^H\275y4\373:%\342\340;\005\024$\274\240T\373\274v\201\234\275~\000\335<\260b\322<\250?c=\271\356\214;u\207\373<\314\310\250=\353\326\351;\01483\275\316\364\021\275J\270\247;-)^\275T.\336;\023o\014=\370k{\274\364\276O\275\365\266\024\273\230\334$=\247t$=\332\301\330\273\032\275\356\274\262\274\031<<A\206\275V\264\016=\202\321\000\275[j\365\274J*\273;\357\253\272=m\244\261=M\350\241=\267\025\002\275\256<*\275+(\252;@hn<s\254\\\275q\3018\273\217\276\207<\013j\035\275W\233\356<{=\016=$\'l\275Y\346\226\2758Z\214<,\266?=\372\304O=E7\211\2754\r\024=\307\257\017\275$\365\010=\326v\034\274Q\330\312\275\344\307\007>r/1\274~\277 \274\253\006\227=)\031\210=\273\365\035\274\rM\014=\356\370&\275\237\357\301\275cG\230;[\275\026=W\006l<\260\316\246\274\354\340\025\275\237l\310\272\020]\257\275\342\014h=\364\325\303\274(\001\r\276}\223-=\035\254\215=@\265!;Hu\272;\t\214\003\275 2=\275n\2232=a\030.=i\304\032\275\240o\355:\t\252\242=\246~\260<9\333\271=\301\2348\275-\245>=g|D<?\365\245<\360\0131\274i\255\005=\244 \357\273bu\240\274\021\023<<]\0334<\332\260\332<\275\270\265\274\322\275~\2743\373?=]\007`<e\361T<\362\035\372;mI\033\275\301\313N\275\331\"\322\275\357Y#\274\370\322\372\2749-\305=\200\367\t<\266\320\023<?|\350\274Tq\377\274\360\220\301<q\357\003\275\366Nu\275\272\024)\274\356\257Z\275\243\313\312;n\341\210=;\256b=\235jd\274\300\345@<\266\215\027=b\2433\275u\245Q=\005\264a\275H\367\350<i\342Q\273\0317\276\275\254\201\273\274\306\303\223;\342t\262<K\261\007\276\360\325\246<\340@z<jJ\002\275\024\204\033=n\346\237=\271\223\337\2742\340I=\244F\026\275\254\320-<\347Qy\275\255(\335\271`\177\373\274\320s\350<s\007\231\275\224x^<ij7\273\032m\212=\372\252\204<B{!\2748f\242=:\243\203\274-\300\004\274\200Z\360<\270\352\337\272\257\334.\275\323\365\n\274Tz\235\2751\342g;\035\375h\275v#\023<\272\320\265\272\362\006\272\273c\030G\275\345\276\365\274\277\233\346\275\363\322)\275\337\2158\274\033\025N=w&v\274kCI=\3249<=p;\016<I\261\360<\027\353\325\274\022\317`\275\"\356\312\267k\270\017\275\364\240{\273yL\265\275[4\303\274\347w\233<\205\353\307=`p.\274\211\016\234<l\r\n\275\205U\322\274\370S\340\274\017\367\225\274\306\217\306<|*\364=&M\264<>\257\230\2758\314\315\274\251\003&=\247\2556=\312\316U=\234\n\204<yu\024\274\336\262\356\273\207\243\235\275*|\262<\266\013\250\275R\027\201=\004WP;)/\333<^k\366\275\342\010\323\273\215\327\244\273%e =\222\356\266\273\313\024\326\274P\315|\2741W\224=\327/\244\275Tl\244=\300$^=\032\3350\273\377\261\331<4\245\231=6J\022<\204o\004\275\206\033_\275\277\241W=\311\006\217<G\016\221\275\317\020/<q\320\312\274\247:g\275\r\230E\275\017&\"\275\305X\206<\311\375(\275R\202\'\275\220\205\200\275KTP=\270\362\335<\005TM\275\250d\335\273\335\0352=\010e\240<L\351.<\327\364\245<\007\301\2779\301\357;\275\0305\313;\361\023\304<\330\220E\275\337y3<\310$\340<K\004|=\224\266!\275]\302\230=\233S2=\010\207\016<\250\252\260=\n\235\362\274\306\221\255\274\321 c\273[\3134=B\251\323\274lC\177=\t\242\262;\030c\302<\307\360a\274\300\tY\275\304\325\202<LE\231\274ur\265<<\373\311\274\035\3501\274\267s\020\275Mx\350<\235\003W=\3721\312\274e\264\241\274\351\013`\275\336\361\330\274,\031Y\274\3107\213=\340\377 \275\220l\265\275\305>l\273\323\372{\275\243*C\275\302\253\004=!+\342<\347\247^\275\240\021)\2747\315\027=\314\n\246\273>\200\300\274\204\020\217=1\224\202\275\273\200\205;\035\311\024\274H7\211<\374L\023\275\n>D\275\256\316\033=\211\340\023<\231y\006=buQ\265J&\215\275\316q%\272\353W\263\273-\224\257\274\263j\320\275\203bC=\352_u<\363\357\021=\205z\032=\304\"\234\275\236-\034=\320?\242\274G\242*<\362r\232<C\037%<e\3379<A~T=\202\243\305=\277n\250<\340>\365\274\366\353$<\261X\315\2749t\257;\343\226F\274,\321B=M\354\333;Q\000\224\275_H\366\275\227w\016<\374\324\270\274\210J!\273\360_*\275\325\274\225\274H\314o\275>\003T\275u\036i=\375n\203\275K\252\226=\237$B\275@q\004\271\326\321,\274p\205-;@\026\312\273\326\345\021=\'\346)<\213\300y\275K\251\005=\246C\261\2751\022\210=v\3626\275NLU:\364\221\007\275\345\212w\275LFt;;M8\275\375\275\261=\326~\"=s9\024=_\311\347;\372\367\267<5\210\246;$*\264\274\231\035\237\273F\265\t\275^\242\330=\277\270\256<\277\250\245\273\261\2608\274\214Z\213=\3259\343;\273@\236=N\222\213\275\224\244\236\275\272\202:\275\231\253.\274\035\272\025=\017\307R<u\372h;\301\010\263\273[;\253:\000\377a\274\367\367I<\t\360{\275V\251k=q\224\277=r\177\260\273g\221\016\275\212\272|=9f\003\275\312\010\341;\006\305\223\274\271\323\336\274C$g=P\354\357\273\255\214\373\273\242\001==1\221n=\233\005\224\272Z \366\274\177o\242\275\273\256*<\273`|\274F\313\272\274L\207\033<\200\367\340<\001Fr\273\322\023\252=\257\232\250<\253O\003=m\211\357\274\210(\254<\010*^\274\346\325\271<\231\002P\275\261\006\030=\200$j\275\250i7;\334](=~\332\027=!Fb:\n\332\210=\266\262\002==\002\202;Y`\252=\327\017\207;\"{\230<\020\246\244=\311\\\243<\030\301\372\274\252\271\216\274\340o\024\275^\333Y\274\023\261#\275\177I\335<\350,\024\273|=\310\274\246\375\225\274\022\276g;\010o+\275\263\037\207<\342\217\231:\021\322\247\274~x\262\274\340\205\233\273\205&\335<L`\371\274\016\300\211=\333\037\203\275\260.4\275Y\312\206\275u\235v=\331\3416\275.\341\324=\244\277\017=\304\273\203\274z|\260\274B\260\013=F\215m={@\260<\371 b\275\360\034\342\274]\205\212\274\251\304\027\274x>\223<%\303+\274\365`\220<\023\360\241=\206\342\r\275\225xL\275\224e\204=\330b\225\275\330\250\260<\000Fw=-(j=\347\223o=\234\276\233:\t1\177=7~\'<\234S\033=%.\337<QD\374<\376e-=v\330\351\2711@\332<\037J0\275@\217s\275=\031\360<c:0\275C\331{\275\222\367Y=\253\246\010\275\303\221\224\275R\222\313<\364q.:z\177\362<\361i\330\275\014\217\335<\331\3001\275_|\326<x\212s\275\253\205\250<\270\341\2619\233\334M<\252\266\316\275\002da\275\316\252A\2746\034\256\275\222\270+\275R\022\355\273R\337\222=\020\004\034\275\307\007L=\224\321%\275\263\202\225\274\337\204\350\274\177\221\252=\336f\212\274\354\312=;\311\030\271=\206\245\246\275\035\246u=O\203\233\272\372\347\230\274\315\356\017\275y\352\006\275U\202?\274\326\331\224\275\330\304%<\312G`=\251\026\001\275\250\276$\275q.t\274[\2479=E\256\262;H\3226<\244\271k\275\022\263\246\2757\nD=,\306\326\273\310/\033\275;\351]\275\357\264\223\275\250\332\310\274\205\365C=Pu\021<^\2418\274\000|V\274>s\264\274\325Rc\275\215\375W=\023\254\206=\326\2361\2751\316\275<\301\205\3519\260\313\206\275\326\257t\2757\301\003\275\337z\352<j\227]=\353C,\275J\007\200\274\005\010\210\275\254G\331\275\317-?\275x\014Z\2754\253R=\343R\317\274}\014\262\274\007\024S\275\245\250{\274\013\355\257\275\2305K\273V\324+\273\034\036\365\2736\032\205<TW3\274\363j7\275\201\303\204=\266\334\031\275x;p\275\002\310\203\275\360\335\027\275<)\272=\221\3069\275\367TK\275$\307\037\275\235\341J\275\377R\323\273\321[[\275\2670a\275D\034\333\273K\003\247;\320*:=V\001\243\273\t`p\274z \236=\\\261\003\275b[\277\272\225-*=\313\371\345;\203k~\275\217\254X\274\\\325\206=KC3=`\2676=\350\0258=XyZ\275\216\321\032\274\326ml\275e@^\275\257y\t<\316^p\275T\251\201=SB\325=v\201/\274v\337\203=wi\244\273F\231\022\275%\037\007\273\020o\n\275W\203\017<\r\302\t;\354\364\203\274\337B3\275\233Jt\275\000\301!=\010-\334\271\376C\260<\363\222\217=\3757\215<j\360\271:\260\027\271\274\375\006\\\274l.9\274\340\226M\275\237\273\020<\3748\324<\217\036\354:,\231%=~\034\264\273\323\357C=90\225=\rf#<\001\335\306;1s\007<<\305\237\274\203R\276<|\t\314;*\205\334\274\344\232B=\366\322{\275CB\332\274\003\223Z\274\343R4=\016\323\032\275\257%\016\275\371 M\274\362M\302\275>c\"8\033\257\376\274\314\230\300\274\316\241\220=\254\230^\275\276\257\214\275LB\200\274~\265x\2753jV=B\316\220\274l\207J\275\306\356\312\275V\360j\275\235C\303\275`p\204=\024\030\367\274[\373\224=>\214\231\274\266\252&\274\211\242\247;\230\361\253\274\036\336\316\274\267\211\232\275XC\"\275\016\240\232\275\255@\205\275\200\212d;\274t\032\275\336\037\205<R\366\267;J\251\253\275`vX\274\200\254=\275S\371\311;\210!d\275\230e\371<\202UM:\343+\321<\333L\256\274,\357\203\275\207k\226=\224\330\353\274\202.\263<\336\343*\275\261\n\234<\323Q\037\275\323\266\233<24\202=S5U=8\365\316=\276\t}=xJ\343\275\263\271*=\005\357\327=\351\007\212;\253\332t\275\201\242\352\2748\t\200<\2733\253\274\000\206\241\274\022Q\252\274\231q\324\274\031\032\260<\236D\010\275;\017\330<eG^<\332\024\250\272\324\230\243=2\316Z<_\304 =[\373\361<1\177\361\274\227\210\216\275k\374\267<\214\243\3049\233\325*\273B\024\006=\'r\327\275\241\326\252=:?\377<\325.\021\275\036\332\205\275O\017\216\275\236\266\344<c\232\204\275\340\266\305\274\222\371I<\324\325\031=\243\314\007\275K\250\222=\2734\254<\340\217\033\275l\267G\273\337f\315\275h\365\323\275\310\304\326;-\353\266\274\t\340\236\275\231\262\320<\026\245\210<G\024\256\274\331k\210\274L\332\273<\321\362\211</\307\001=\242f\021\275ta\022=\373!?=\337\020\363<c\352k=\367\310\021\275\021\325\262=\314\220\254=\213{6\275\326\013)<\312-\227=6\326\031\275\205\023\355\274\036U\017\275\315!\255\274\265j!<T3\\=`s\367\274\243\322v\275G\337-=\340\212\265\274\371\"\274<`=\217\275\335\027\351\273\371\037G;\251dP<\241<\321<*\260\271\275\243\223\305\275\214V\002=\267\312\372<\010\2509<\345\007\033<\207L\230<\256|\256\274\220\225B<5\2722\275;\3060\275\0046\345\274\310C\234;\253\270\025\274WY\341\275n\2211\275\227B\354:\243\004\245={K\217\274oc\004=\243w\013=\341\321\370;g\260\233<\335\307\232=e\326);\202\342%<nX\254\275\016z\251<gf\034<oI6\275\355\302k=\203\013\201=|\275\324\273\374qj\275i?\334\275Mr\004\274+\221\371\273\032\245h\275\016|!=\231\262\024\275\226\177Q\273\2171\364\274P:\177\275\233\326:=\242p\355<\3634e\274\303\245\366<Sj\274\274\035\263\021;\370c.\274\016\001\'\275$\3161\275\024=w\275\234\224\001\275\312\0329\273 \272G=n\230\335\274LC\010<\265\213\021=]iO\275D%\200=^\3012\274\022\247s<\212\004G=)Za=7\200,\274e+\'\275+\323\020\273@,h\274;\346\230\274\315\215\245<\266\n\337;`\r\346=vX\326=\356\3475\272\026\023\352\274K\241]\275\333Ii=&\237\351\274\252<\225\274kc;=\037\007\223\275y2\362<\177{\001=\361=c=\267\235\332<\323\214\302;L#&\275\223\3220\275e\322\033=\"*o=\230\037L=>F\013\275R:\356\273=vX\275v\235v\275\273\332`\275\376\220}\273\244\032*\275M\270\207\274\301q\212\275;Y[\274\270]\353;\3379\020\275\355 S\275\241%C=q\177\177\275\377X\213\275\205WC\275\357\366\322<\017+\254=\217\000m\273rvI=\203u\215=~\237\261<\315\020\221\2758\210y<\324\235s\275\226\037q\275u{\032=[c\030\274B\033J=o\260\216=\230=*\274IBR\274i\230\255\275\036V\206\275\3715:;\345\257R\274\303$\304<\245\3048\275\007M\224\273b*J\275Z\275k\275r\266\303<6\026\330\274\005^\301\274\203\204\263\275i\353\361<~\352\301<\241K\001=\334L\017<,\031\247\275\006\235\222\275\323\002\252=b\371\013\272\016\311\200=a\223\223\275;\235\n\275s\027j\275g7\354\274\315\221\351\274Yw\010\274f\313*\274\2034\016\275\317\223H=\013\364_\275\361^\332<\000\036\277<\027\303q\274M\322\207=b\246\317\272Ez\253<\215GT\275\025/\203\275\013X\224=\325\004\242=4\024d=\353h6\274\222q(\274d\230H<\251\023\265<9\360\014\275F\031\201=|\201\255<\333.\372;\216\\0\274\263&\340\273hI\000\275:\237m\274L\334U=G\002\034\275\250\202\003=9\310\257;\013*\023;v\221\001\275\200\210\230\275HE\317=\372R\325=\214a\375<\2045R<6\310\3239\365\0214=\360\300\276<,+n\275TG\006\274\201\353)\275\004\371$\274\366Mw\274&+*\275v\030l=0\377\031\275Z\200\335\272\307<B\273\227\010\r\274\245\213\360<\206 H=\277/\037<\000\260\210=\315\347_=\020\221\010<0\346\360;D\342s=\177&\001\275\307o\361\273\356\215\002=\237\375\033\275\200%z\274\343\007(;\021*\265\273yQ\327<5j\022=\273\032\227\275\000\370\232<\010\226H\275f\177\225=\260}&\275\003\221\001<r\350\351<\232B^\275:\354\240;\210\233\320\274p\275\203\275\220( \275L\237\213=\275\177\237<\207\304>=0\266W\274QP\024\275\313\243\220<B\010\242;\306\327T<\264L.\274\323>\023=6\254E=*KJ\2747Jl\275\246H\213\274\361\364\350\2746@\024\275\027ru\274\021@\244\274}\317\225\275\274\"\315<\3255\263\275\267~;=A\311\030\275\303\347o\275\036\233,\274%\266[=:\322\026\274\206\336\306\275\310O\377\274~\000\313\274x\335z\275\374\"Y\275q\370I\275\000\303\244\274g\000B=>\335n\275!\3376=\235\263Q\274\354d\210<GC!<\202h\263<\217\n\267\273y\\\020\275~ \312<\315.:\275\002\002\335<\376-\370\273\273\277\207\274\201\364f\274\'\216Y<Lk7\274\346&\240<\351\036\235<\225\036J;\001\266\"=y\214\036\274\346\202\214=4\350\240\274]\365,\275\016s\305\273d\305\020<\303xD\275\235\345\332\274\365Kd\274\321\346O\275O\220\235\274\265R\031\275o\374u=\214\310#=_e\203;-\370]<\202-\037=\254Q\247\275!tt\274P\274\220=\234N1\274\340Y\254\274Rm\270:\347\2116\274\225\313\343<\274n\220=\013\202\376\274\367\352n\275\234\312\255=\245tz<\366b[<}\003\001=]\267\235\275\272\257\216\275\220\236\226=\000\375\022=X\316\232\273\016\326\357\273\026\022\234=\346\306\300=|8\363<\317\326n\275\361s^\2747JR\2756hM=\340\014\262<G\\\t\275\223\221\006\275\313\216\325\275\352\205\355:a\330\010\274\355o\021\275R\003>=5\216\234<H\301{=+\205\217<\026\007A\275\337B\021\273K(e\274\220;\243\274V?\033=\363\210T<\001\362\236<j7\037\275:>\"<d\262\205=\322\367]\2747 \222<%~\212\275|~\021<\277\257~\273w\001U=\r\374\026\275\361\3162=}3\023\275\244\300V\2742\262T\274\327H(=q\263\331=\013\377\257\273\250_J\275dF\354\275\262E\034\275S\242\210=\340\313N\274(;\253\267OsA\274\363\263H\274\262\014\002\275<\222\241<\010U\377;<S\310\274|\202\013\275\033u\332<\303\211u=\035\033\0328\205\026+\275\304\010\226=\362\252\220\275\257\256|=\353\250\254=\330\006\277\273\006\364B=0\200\223\275i\036\335<p\234a=3\246I\275!\016\013\275\362\355\025\275\014a\272<\352\301(\274`e\232\275\226`\277:G;\211=vb[\273\267\026\372<\261\005\215=\335\014\352<G\201R\275\342> 9\343\304\001\276\331\317\247<\022\026\001\275\2136\232=:e\235=\365\'L\274\333\333\260<\340#%\274j.m\275\266*\032=\306\005\232<\263r\001\275.\263\207=FE\344<\203,\013\274\257&\226\274VV\372\273\212|\307<\220\243\006=\226\342F\274oP\036\275\365\364\345;\334\340\270\274\213\271\235\274\231 e=\023\226\250:%\267\356;Bs\355<0\256]=\002R\233\274@\3271=AA\371:\253Zj\274\246\214\236\275#\272\025<\205{0>#\\G=4\365\227<b@\216=x\276\312\275&\252\327<\216\360\221\272u\211\'=\2724=\274\323\321\251\273\311+\003\276\244\254\252\274(\265\347\273w\233\321\273\001\261\233<?T#=\251\014u=:\300\243\275\266\255\233<\177I\t=x\024\024<\001\300a\275\212\324R<\256\364\264=\013\312\373<h\223$=\367N\002==7\220=%:z\275&\336\337\275\207\305C=\331\343\202\274[\237J<5OL=eH\303\274\361Xl\274\373ND\275\316q\272\274\243\240\270=\325\363.\2735\"\001\275\005V\004;I+\363<R\321^=\347\303\233<_ab<\362k\214=8\322T=\007b%<\223\016\214<qk\036=\323$R<x\212\262<\'\351\237\274\260\2120\275<V(=\371W\031=\007\321\005<\330\020\007\275\310W\010=\224\270\264=n\342(=\343Y\357\275\266\207\276\2741\231}=\031T\330\274rnI\275\200\222h=q\2213<\252$O=\246\375T\273jLT<\t\302N<\375j\274<\334\367\010\275\212SY<\316\n\242\274X2G\274n.e\275\203\310\272\275\367I)\275\240O\035\275NG\263\2747S\352;=\036|=;\342o\274<^\177\275,8\253\274\253NT=\236\321\231\275bd\263<\'\225|\274\303\204\315\272>\205\221=\020J\236:@~R<h\263\002\275G\031@\275kG\004=\366C\304\275\220\362$\275\264\232\305\274u\022\363<\267l\037<\241\345\000;\311\365\246\274\212\034\272=\330\3077\275+N\006=\3762\232\273\030\340\007=b\246-=\256-0<M\200\312\273y\254\305\274On\315\274\272dD=\312C\355=h\201\206=\3122\022=\310o\002\275-\270e\274\260\230M\275\351\325\315=\225\232\022\275\207\224\271=\263\244\001=\037\237\257:k\330:\275@\361\004<\375\020\374\272\246\001\324;\354\343\025=tm]\275\311#A\275\034\022h;\034\350\354<\017>D<$%\231\274\304\307x\274\313\310\234<\247\013i=S\333\361<6\352?\274S\013\343=\300\t\265\274\324\036?<\347b\205<\006\260\t>\347~\272<\005\367b\275\341\250\037<ikf\275S\t\207\274\031\350\221;O\356\014=G\326\007\275\263\336\333=:\302}\2740k>\275\t\335\303\274\301\367@=\253d\310\274\302\3759=\335\251\226\275\343\304q:h\020N=\361\323D\274\370,\025<\257p[\275\201\017\025=\017\022\307\274X\334\215\275cp\370\273\375\241\000<$\tp=u\213k\2742<f<AzS\274\365Z\343<\237\310.\275e\330\212\273-n\320<$\272\273\274\325!\225<\271V\020\275\357\237\241=\357S\364\274\027\371\267\273\244W{\275\376\374W<\272=4\274$\246(\273\2233 =\226\0072=\324\254\273\274p\233\223\274\0276\001\275\271\030a\275\203\003\250\275\'\0324=/\230\321<8\347{\273J\344^\275\200FD=\324W\211\275\354>\276=\220\223\204\2749|$=\\\333{<\266m$=\232\215\003=\311]z\275D&[\275\310\255`=XI\322=F\025]\274n,\226;\002\313\024\275{\201\313\2745F6=Q<\247\273i\002I\2749Yc=\237\327\231<\202L\315\273\312\377r\275\356=E\275W\037\206=\2524\237\275\252\271\207\2758\212\031=i\375\243=<\032\234\273\211NH\274\264\002\334\274\007Vd\275\363[\363<\022bj<\034b\254\275\334\377\270;+g\253\273,\252\276<\233\315\273\274\000\375&\275\307\033\277:\341!t<\276\255\013\274\275\366\366\273\331B\021=C\031\037;\203\365v<\nBK\275\217tj\275TV*=0\313\211<\017\256\334=\321\213p<a-Q<+p\350:\312\334\226\275\353\347\277\274\026\273r<\322\254\026=\r\204L=\351\317\235\274$r\036\274\212\005\t=\331\353)=\203\275&=\200\000$\275\036\364q\275V\306h<n\\0\275P\351\253<\3327\237=\345\317\250\274|\035?\273]2\302<C~\327\273\342\263l\275\347\236-=\201o\017=\261\277$\275\004k\317\274q\203c<\332\325\216<k\006\025\275\307*\207\275\335]\243:(\235\233<x\016\202<\024\"\277\274\237\026Z\275\3048P\273\312\242\225=\366\343\330<z\035\264<\300\223;\274\226\360\000<L\256\277<\255\337\211=\245\224\304<\223\327[\275!yx=W\337v\274\201\232\332\274\377\215q<\037\027\241<(\330\003\275Q=\027\275\230d\262;I\024\023\275td\302;!\377\340\274\320_\204\273;\311V=2\033\255=4cc<\256\332\202=\355\267\323\274\275\354\\=z\020\222\273\200#S=E\360O\275\317\\5=}Z\214\273\'/|=\202Z\346<\316vk=X\223z<X\303h<\271g<=K\203\202<\237\222\311=\035\035T<@\273\234\273\215X\262<\277\334\000=l9t\273mu\206\274\337\207\2529o\333\261\275|\300\254<\257\026\013=\241\017\230:\226\203\205=s\277\243\274\330\004E<\245\2257=k\257\347\274\364W\245<@W?=\350\'\250<\224i)=n#\254\275\021\230\241\273?\217\221\2746z2=<ep<r\371\021;\n9\336\274\320-P=\326\0260\272\265\340i\273\203\0049\275\3216\251<\367y\321<W\301\376<\3373t=\314\\a\275H\364L\274\370b4<\004\223B\275\0073\213\274\272\\c\275\302\347_;\254\231\037\275\350\235\253<\350\n@=al\270\274\264\"\242<\254au<k\346\"\275\377\362a\275Q/k\275\020\206\365<\240\252Z\274\211\244\346\273Q\007\350\275\274\003\233<Q\243e<\222\212\237\2742\320L\275\330\226\243<\'\251\203\273}\025\264=\352.j:\002C\237<\232\'^\274\275Q\252\274\257\026\343<\251:o<_uz\273\373\031\210\275uw\023=dH\210\275\t\327)=\3201R=\213^\014=\2611.=M\215\213\272\3027Q\273E1^=\262\207 =c\277\205\272\266;;<(br\275\301\254\251=D\177\304<VG\210<\252\336x=`\330\311\275\355\272\353<\356\222\227\274\233\262\272\274t\202\363;\314\240(\275+\303\210\274\350\374q=\250\3625\275\236z\212\275\346\344\035=B-\224<j\230\244\273$\202$=\'\374\236=\001\274\222<n\005\356=\224\247\221<y\317l;K\336\205\274-\241\236<\01046=\r\357\314<\341\212\226=\365\277 \275\032\177\353<\013b\361;|\030;<\024\204\017>J\235b<\000\031\232\274\253\331\215\272)\312\266\274\037#\372\273\247\223\363\274H\257b<w\024\242;\374\t\345\274\260\241\331< \250\002\275\333\355\003\274+vQ=\025\301X<\265\010\242=\347W\026\275Rd\\=:Q\007\275\203\234\371\274+N\346\273\321\376\000=\330\321\226\275K\036>\275\243\002w;\271\030l\275HJ\215\274ggR<\263t\261=\315\364\200\275\r\303D\275\377\224\310<\034E\212\274VF\025\274\0023\223\274\334\307\026;D\t\201=\230\321\312\274K\200\265=\023\375\354<01\205\275\347\213\314\274\313L\362\275\234\201W<R\035?\275\207\354r\275R\255?\274alL=:\252M\274\275B\224\275\331\230\030=\313\367N\274h7\315=\217\322\235<\034\232\252;\213@\016=\014\334_=\231\311\207\270g3\261\273MA :\243>]=et_\275:\324\235=\254\216\203=\300q\251\274\213T\215\275\013#\264<Fj\203=\032\305.\274:]\210\273\\-`\275\231\335\000\27565\200\275\223\346\037=eA\205\275\036\305\222\274j\2459\275i#9=f\260!<\0178p\275\037+\373\273\252\263\356<ce\207=w\213\t=\033\212\373<\346b\233\275\226\'\'\274\211\301\316\274\335\301\305\274\235\\\363\2743\343@\2753PX\275\214\352\270<\353s\351<\336\005+\274\020=\336<\346\306\030\274\t\245b\275\354\313\225\274U\320\347<\277v8\275\202\207G=ESL\275\257\226\274\274\251\351.\275H\253\256<\365\254}\274\250!z=Q\006J\274\331g,<\315\332%=ngV=m\236L=\274\206\375\274\215\304\251=\211\006@<\252\257\216=\222\261i=6\206\013\274\334\342.\274\351/\270\275\303o@=>j\237\275\037\034\363\274)>\214\275\2361H=\331f\251\275\361\227\324\273\017(\226\274\001q\037\275Uc\234<2\312\231=p\204h\273\256++=\3032g\275s\311.=\250V\026\275\205\325\235\274\003\252+\274!v\'\274W\tl\273\202TP\275\330W-=\026\006\254<\036\271\240\274tK\300<\243\331\300\273\304j\313\275\330\3566=G\222\215\275wnx<\240\3112\275\233H\330\275\260\301\316\2733\224j<\004\327\303<E9\300\275\356\371\027=\221\343\263\274\nr\243\274\335\320\034\275\002\260\275\274\311\254`\273J\212+=\326\254\"\274\217\361\031=\337\327G<\234\237\231=\275\024\034\272\364\021@=@\336b\2755\307\344<yw\303\275\034\254\r\273\213\304w\275\210\014\237\274\264r\374<e\202X=4\207\307;FZ;=\004\350\207\273\273{\362\274\024\317E\275\207B\336\274\363n\211=IY\305\274\350=\242\2738\234\315<X\251\\=Wq\340\274%\217\241<\367{B=\214\242*=\010\350\252<\234\300\001=\341\305\312<t\2701<f\326a=\322\260\343=5vL\273w\004w=\235\257\204\273s\354\242<\005\216\266\274K\256\250=\370f\230<gP\352\274\037\263\222\275I\3740</\213,=\200\2713\275\267\023c=\000z\220=S#k\275l\177\321<\255\323\344\274{\352\';\026\t\320\274vp\222\275\215^\331=\301oO\273\264\203\274=\234\266\033<\226L\250<\236|q\274\305\267\355\274;\217s\274\032y\004;\252\316\035=\217\270C;Z\204\231=kP&=\241\256\257=\267\250D=n/\002<\006*Y\275\230\242\315<aZ4\275\246\352\377\272oB\371\273\014\322=\274\251\327\264\273c\226\256\273\002rh\274\206\255>=g\3524\275\026E;<GjW<\344\227\034\275\223\256\317\274\020\300\231=\006\243\253<*>\260\274d\346\006\275\255\371G=\\r\271\275g\037\016\275\224uh<\\\334?=ZzE\275\233\3409\274_(!\275\024R\211;\026\343<\274\244H)\275=\277\314\274Pt,;\377\223~;\210O/9\217/\250\275\264\351\323\274\323\374*=\'d|<i\334\022=N2\217\275F\207\226= )\215<\014\376v<c\274{;\003\300m\275_\0203\274\351VO;2\333%\275\307\221\013=\177\036\250;\262\211 <n\246\274<e\342==p\246\221=0\242\314\274\340\372\021=\r\366&\274\261\350\003\274O|[=p\232\000\274@G4\275\335\272\025=fA\001\274M\270{\274\243\"\224:\357\201\313\271\203\016S=\366\211\304\274\323\264\002<\277#\220;)\302@\275\031\351x\274QY\010\275\234\373\271=\035\003=;G\247\371<\243A\315<\222uF=\261\036&\274\245\302\003\275\007y\307<\201\235B\274:7\321\275\212\235\006=0\214\000>J\232\326\272J\376\243\274\030\255\201\274u\265\206<m\020v=h\341\300<\256:\030<pH]\274\200\370\276<g\307\226\275\227\221\317\2748\215M\275cN\312=\243\232b;\367\352\223;\263(\000>\313\213\177=\024/\207=\010\025:=\214\260\242=\030\3356;:<\312=\222\204\030\275\253\267=\2752Q5\275\231\030v\275\345>\211\275\341\270\340<\267{3=\035,\313<\326g\251\273\345\010\267\274\036-V<\333I\221=\337.\246\272\177\025\021=\306\213\366;^yz=(\001\225=(\347J=\367R\003=\326e\342\2743\020g\274.\"\307<\315x*\275\230\320\331\273\345\222D\275\325\343p\275\231\242q\275\315\005\315<76F=\037\236\261<\2642!\275\000\224\246<\001\233\025=9\342\234\274\352\031\001=.x\233=\026\265M=\027G\016\275\221\305U<n\242\304\274\214\013\321\274)\020\333\274\277Z\373\273T\344\226\275\224\204\357\274\223\257\020\274\375\314\370<\255\235\341<5\202$\275\323C4<\310,\235\2744_\232\274%\342\266<\230\224\034=\300\030\356\274\272\267\273<}\223\330\2721\353\275\275H\241\262;\025\026P=Mw\225=5\253b\275\037\301\237\274\303+\201=hy\032=W$\256<\202m?<\271v!\275nE7\275\240\017\232<\r\2341=\320\357\220\275\033\202\260;E\225\252\275\3071]\275\001\301_<\211L\275;\270C\034;g?@\274\261~\263\275\007\035\242\275\3162\330<V\"\210\275\346\256\001\275\272\"R\275\236\363\223\273N\274#=X\036\210\275\017\240g\275`\323\207\275\2157=\274\301G\251=O\022z\274\353\204P\275,\2551=]\010\303\274\371n\224=\203\t\035\275\244\312\036\275]\370V=,\236\374\274|Dk<\200!\223<\265\372\355<I\233d\274d3y<Y\311 =H\234.\275T\177}=\216&\221\275\211\314\227\275aE\310=Z1\207\274\354\230\217<\027\355\272\274}\374>=B\232\245\274D#\211\274\033\303\\<0\036\351\274+\210\212\275\336^\251<!\340)=N\231\353;\315Ln=\330\024]\275{x\261\274\300c.\2759\035\r\275\371)\341\274F>\346\274j\210\222<V\364\004:\016|\330=\207\261\355<t7\320<\360\301\000\275kZ\212<\335\304l\273\016\365\253\274\0360\264<\244\240\231\274V\357\033\275\2059Z\274\013>&\275#\274c<\030\305\311<\212s\005\275\177\237\213\275\270\277\200==v\201\274\361_\036\276\370\262\341<\255/\315\275\220\307\301\274q\244\243\275\030l\363\274\215\301`\275\2626\376<\366HB\275\302\303)\275}[Z=\346 \334=\020\363Y=\306\303\007=\324\226u:\304m\222=\315[w;\271\247\237=\355IR=\261qf\274;E!\275!\333\032;\302p\262<\361\010H<\262H\013\2737\346+= \210\313\274\356*\014\275u\261=\274x\264\301=\006\301E=W\241\252\275Z4\305<_n\344\273\023\370\320;#\323\345;*\267\002\272\300\201\032\273\005\271\021<8.h\275\201\322d\274wN\002=\375\335:\275\317W\270=\333\356\345=\2071\335\274\016\035\234\274\332\323\212\275h0\373\274\345\222\240\274Y\211\230\275\270\032\260\274\340\356\335;\333q\261<t\r$\274PV\212<\205>4=\010\020\204\273\247\177\236\275\243\350@=\331z\334<k\r\360\274\n\266\204=X\025$\275}\001\252<\320\027\325=\361\244\204\275\202\3630=j\020\026;\335\237^=\213\030\321\274\365\242\014\275\315\220\016\274\362\270\331\274oS\315\272\310\335\026=<\2234\274\221\254c\270T\363\r\275\034\017)=\257)\262=\257\303\326<\217\007\361<G\350\000\275d\207\005\273\354qT\274\'\261S=\205\022\317\274\035\003H\274\257mM=\001U*\2753n\245\275\324{,\275 ]!=p\336\212;\0217!\275Z\350\243<1l\200<%\344\375\274\224p\341;+\361\373<\204\333\336\273%\271\232\274\300\205\217\274\306k\203=C@\023\275\201\310Q\275\220\264?=\327\0211=\334\233\366;\020\005\346<TA)<\300\030\205<\323\370\255\274\375\005\323<\364\333\017\275V\022\021\274\027\257\261\2759Q5;\375c\330\274\257.\233\273\265r\352\274\333\372\255<\255\334\344<\373W\201\274 N\200<F\263L\275\24283<\'8\323=\331\0047<\301\3264\275\353\341?\275\271\250%=\270\rv=\223\345k\275\327F\244\274\351\374\237\274\266~:=\226\354o<g\330\223\275FrV<\004\033\274;\213\217D\274\211\321\262;\307s<\275\251\372\020=\022\353.<\217\\T=\311\352\007=b\376\312\274\273\274l\272\r\253\231<\330t\025\275\2759\215=B\353\035\275[\341\335\274-\000\177=s\362\002\275\014\260\022=^jl=\177\204\235\275\343\232\373\274z\222\034=ID\215\274\370\272\027=\374\200\303<\217\255\227\274y\203\234=\324\336:\274eI\235<\306Y\207\275(\031\216\274%+u=\225P\273=\357V\022=\211cJ=]\252\343\272O\274o\275\260L\335\272\026\024`=\213\325\026\275\262#\205\274q\304\222=A\262\310\2745}\322\273-%*=\320K\277\273\013C\255=Gpf\274\343\324\004\275\226\245\360\274\304\'m<e6&\275`\027\343\274\013\327\267<\256\304\205\2754.\232\274s\325T=i\370\354\274\372\235\246\275\335\245\311\275Q8\233<y\253@\274\300\033\235=\343<\001\274\336e7\275\n&\302<\373\204\211<\211h\305<\304i =|v[<\n\332R\275h\035<\273J\367u\2741(\275\275\351\367\231\2757\001s<\336~\213=\3132\251=\232\037\010\274<\345\322\274\255\271\215\273\031z\214\274M\010K=b\363$\275T\230\315;x\310=\275\302\227\357\274\263\207\207\275u\020\236\274\232Wj\274\367O\210\275}\276\010=\375\320W=G\254\r=\210\227\000<y\220\366;1Q\217=\333-N\275l?\300<\365\366\272;\016\377<\275\246\353\026<\022x?\273 \021\370\274\265\'L=&\310M\274\010\212e=\n\034\234\274\354\343z=\004\313\252<\344\014\357\273=%4\275\017\363)=\370eN;6;:\274\362<\260<\246)\267\274w\241u=\250\262\210=\313tZ\273\245hY\275\271\364\010<\331\234\251=\334q\000\274A\033_=\203\351\367\274\020\203\031\275\330\t$\275\350\316\252\274\031(\236\274\016\200%\275%\342#\275@M:<\344\360[=\225R<=\330jc\2745\204[=\365\275q\275\t\3415=\025\273o<ic\222;U\341\271\275=,(\275k\251\177=\251\031D=5\325\201=\361_ \274\0324\221\275:&\234\274\356U\352\274\345\316\271\275\243\177I\275H`\003=\010\022g=\003O\373\273\331\344v\273\223\327\241<1\2737\275\244!6=\334\254\246\274\r\312\272\274A\320\261\275\363\251u<\372\314\223;\217\243\224\274\314\313$\275\266G:=\217\344\361\275\002W\014\274\204*\370<\252\316U<\020\233\314\274\371\373m=m\023\230\275\321\251\372=\343\027\247\275\353\331(=\0149c\274\305w\331<\202Q\026\2736e\367\274f\223\207\275\203\213W=G\217\"=W\344\007\275\"r\026=\214\224\010=A~\336=\315\342\241;\350`\240\273q\366\205\274\2749d=\236B\221=\031\261x\274x6\253\274j\351>:\"\355H= \352#\275Y\210\035\274~Bg=\377\002\342<\273\273\014\274\245b\366\274\317\277\332=\014\201\347<\321\240<\274P\361\347\2747\353\016\275g\'f\275\334\024!=sN3\275\271\303y\275p;\336\274\315\347\036=\221\236\327\273\271^]\275\337\301\345<\223\'\210\2757\324\000>\324\316\310\274\251\177\256<\245\375L\275\340\360\303\274,\365\r\275\206\370\207<\030\315\000\275\346\272\371\273\232\242\343<\375{\315\274\211>\230\274\224q\226\274\377e>\275s\2672;\222\023\001\273\312yH\275\311\214t\275\256\373\211\273K\270\266\274X[G=%\320l=W\200\320<\356pH=z\014\314\274\227\266\"\275\302\310!\2756\270\\\274\322\233\326;\203N\241=\2106\354<\215\007\364<\001\005\227=Y\\3\2751\325\024\275\233+\201=w\205\206;\234\317\231\275\337\303{<\213\367u\274\016\013\211\275\032~\202;&\260J\275K?x\275C\316n\275+?Q\275\234\247\022\275\260\234\230\275\305\264\236=K#\373\273\374a\241<H\270p\275\317\273\313;\357\267\225\275`u9\275o\004L<\256\302*;!\034\302<\246\020\030\275}\237\255<Yl\014=\275\203\272<a\332\275<\343C\314\274f\233\004\275x\016O\274\251\351\272\275\020\325\211<\265\311\000\275l\317\207\274\332\263\200\275\373\232\371<J\016\321\274W-\205\275\002\330\355<\354\330\362;&\010U=\227v\204\274r\226\017=.GZ=\313\275\205\274\371yr\275\014\'X=\205\317&<\003\360E\2749a\005\276\261DF=>n\207\275\347jl\274\035\353%\275\373;\342=\037\267a=\3727\324<w\355+\274#.\214\274\250e\307\274KcB\275Q\266\364\271\020\351S\275!u\336\274\030\310\207\274tD\021\274\265\022\302\274\335i)<ZSY\275BJ\346<(P2;\000\236\257<\365\370/\275\365\325\032=\252\253 \273?v\222\273\340\027>\275\327\305\241\275\306\032\204\273\203\205\r\275\303\333\323\274\372o3<\242\2144\273K\300\201\275c\205@=\203\355Z<\245\364W\275\303\n\207=\340fN<\327\036\275;\243oN<e6@\274\235\237\t\275`\327j:*\2005=_\273m=\324`\243\274-\376\345=s\272/:\022\014\013=&\340\346\274o\022\362\275\256\322\036\274\226{\274<>n\220\274\007Sp\2707u\3219hs\225=p\222?=etl<\177\243\204\274\245\233A\275Lw\262\274\200\305\307<U6\317<\3004Q=?\2475\273\215`M\273\026\250y;T\313D=\036\374\353\273\3414^\274Kk\273=\307^\221={\023%=\305\362L\275\335s\014<\375\262\246<\032\370\026=\300\242\035<X^\363\273\312\261\035\274\342\351\311<\246\272\033=\317\344\215\275\244\256\035\274\232r\300\275\211\n\003\275\021>Y<\276\231\361;\3629$=\215U\257=\327\3439\275\303\217\r\274\371]\321=2\004\350\274\350r\323=\314p\360<\310\241\363\274]\316\220=X\030\247\275\247\262\264\274\361d\313\274\036\262\020=\004\353\251=l&\375\274\017\270g<?\\\365\274\231\021,<|0:<\260\026\216\274\256g3\275\377\034\372\274\334\221\277\274\355\302\362\274FnH<\t\216\207\275^\030{=\343\272\277\272T\342\n=\226\264\216\275\3361s<<2\004=\036\346\025\275\302bl=w\t\203\275\002\300\323=\200\026\367<\0103\203\274\003\177\200\274f\251|\275\026\266\020=\017\345\212\274!\221\277\274T\330$=\376\256!=\276\213\231\273\241\327\241;\245\024\222=wU\032\275\254\344k\275\303\2505\274\334+F\275\tT\257\274\264W\036\275\316\212q=Nq\241\274=\034\230\275TA\352<a\377\235=)P\236=\023\326\377\272!J\255\274\260\213N\273\272\204P=\316N\320\274h\347*<-\367Z=\354\204\235\274*?\247\272\231\241><QE\254=\347$E\273z\330A\274\007T\014=]\2049=\2729\3529\201\323(< \257\206\275\314\3740\275YA\303\273\202\356\204\273,\332\320\275\267\224\327<\025\343W\275\007\354\231<^mL\274?\202\251\275\345JU=\001\364l=V\340\374\273hh\213;\310]\331\274\2761\r\275\250n\033:\347q\255\275\326\021\332<\336M\255\275\306P\204<U\004\013\275E\335\010<\316oE\275\033\014U=\252\342\271\274\250\031\375\273\204\"\322;t$@\273o\262\007<\267Q\215\274\026\037\236;?\332\225;<[G=c{\020=\212\034\203=\316l\325\273\2453\276\275\311\362\360<\3606^\275\255$\223\273\"\375\033=\253\211\217<\247\360\205\275\375\013\223\273\363\271*\275N\307\025=\340\263\242=\2577\256\274\351\312\204;g\376\261\275!\035_<\352I\256<\344h\226\273\300\207\231<\001\005\263\275q#\304\274K\233\224\275\322=\317:\225 \211<\032\344)\275\003\221\350:\367)\037\275\034\236.<\333Jb<xt\205=4d\304\275\275\203\200=\006\354\034=\023\014\271<\261\203m\274A?J=\016\000\206\275\344s\t\274\266\261\'<\236m\030\274ah\335\274\224Q\340\273\2617\n\274v\256\013\275`\246L\273Ihe<\222#<:\021\263\374\274$In\274\303{\226<a\037)\272}\004\211=r\210\020=\206\376c\275\005N\016\276\307\207\201\275:\025};2\275\357\274\365\204\267\271\025t\264\273p\342r=\334\275\210\275\010^\001\275\342\203\202<\365\230\273<\345e\377\274\234p\352\273i7\204\274\321\365=\272A6e</\342\330<\262!$\275\217\245V=\036\200Y\275\302p?\274(Z\346;=\3602\275\022.+\275\027\356A;\307\004\377<\340=\347<\214@\217\275aC4\275\370J\330\273\027\240\331\274>$\212=\346\341u<W~\003\275\355/.\275L\216\374<+\022x;\004\331\372<\215c,\275^Y\004\275\376\217J\275\262\037\275<\031\024\202<\330k\001\275X\230\225\275\207\251r\274\222\344T=h\375\275=\365+\n=b\360\203\275 \230\341<\343\357;\273\t\274\275<ffm\275\007\315\221=n\236\222\274j\217>\274.I\255=`0d<\n\245\034=m_-=\207X =\253\037`\275L\227\255=W\343\262<7I\n=\330J\240=u\275\004\275S\360\001\274\326\014.=L\003\236\275(\353[\275;\222\336<%F\242=f\371\214=\027\2579\275\2309?\275\320[\340\274\322\032\006\275E=\331\274\326\021\332\273\026>Q\2740\254\205<4B\342\274h<\000=nu\035<VX7\275@\037\303<\347\322\022\275jb[;\275\333\2769\203\007\027\275\352\221w;\375a\321<\252\265\002\274\334}D;lJj=\264\177\333=UO\305<\3637\263<h_S\273\365\361/=\367\253@\274m?\366\273\3766\221<\030o\270<\231\344f\275g\264\210\275\022\024\027=\334q\275=\224\004\224\275>\327R\274M\373\214:\375U\220\274\002\310\225<)Kk\274\370\355g=\020\354s\275{w\246\275OK\351\274}\323,\275o?\014\275\202\306x\275\234\224?<\321\245^=\271?=<\220\345A\2754\267\217;\276\315\371;N\211\222\274\325\340\316\274\374\230f=|:\206\275A\241\217=+\017i\275\205\346!<\261(|\275\355\264s\275\340#\272=G\252\363=\276\372\035\274^\315\316\274Z0\200\275\035K\225<\323\023\004\274`\005V<\037\032\316<s\324A<\002\027\021\275A\321\272<,$\273<\216\247O\275\340|\371<A\361P\275\216$w=\362\216\006\275\341u\264\274g\307H:/X\367<b\021y\275E_\373<6\022\226\274k:\311\274S\247@\275\314\361\371;\323\002\327\275\177\342\r<\007\246\264;\267o\036\275\331\254\232\275g\252\026\274\215\336\006=\374\035,\2752Q\241=\225\"\013\274U\207\222\273v\271\236=\027\305\232=\357=M\273\374\006\201\274\335\225N=\214|\227\273\327\256\033<\365d\r=\021$i\274\271\357\023=\3317\033\272u1\236<\t\362\230\275\252G!=\026\020\222<\2537\240=\375Y\361\273pg\363\273n\005\032<\025\022\200<\344O@\275\351\212\026=m9\304=\243/\224\274\005\314\305<7\262\220<\313\331~=\373\275\312\274]\3475\275\214\242\334=[\332\351\273):\336<_\307\256\275mF\030\275\021\rk<\34584<\330#\254<\217\331B\275\340TR\274\3614\225<\030\321K\275\3111`\275\321\313?\274~S\000=\252\\\253=>\024B<\251\264[\274\372\303w=\333\251\266\275\273l\007\275\205\023>\275O\323\347=\225\023\\\275%\223,=y\246\253\274M\243\323<E\231\006;\255w\274;y`\230\2724\231\253=&_\307\2749\0048\274i\242\264\272\357\210\247\2740`\215;I\262q\275\005~3:}%\\=L\004s=\244\244\017\275e6u\275\340\374|\274\337\003\301\275\362\344S\275\024n\316<N\377\r\273Y\310 \274\303\323c\275\3004_\274\345\253,;\r\312\335\275L\2544\275\322\327\234\275q\246\\<\243\021\341<\225B\231\2754\217\307\274\'\363?\274\215\"\241;\270\273w\275\230\023j=#T\311\274\22165\273\307\031Y<\231\304\323\274\351\321\307=\376\264,\275\225Bk\275\311K\177\274\230o4\275t\365^<\215&\314\273>\232u\275<\344\246<]\277,<\257>3=\265\202\245<h:\365\274\374\006\224\274\'p\241\272\321\272v<\034C\315\275\032\267\330\2742hu<\272=\266\275\321\246\215=\363\255\256<\307X\346\274M43=\227\234\320\274\t\255M\275Q\274\223\274\366\035\204\273(8I<\315\311\272\273\336l6\275\006\267\342<e\010L<\031j\236\274\322\022\007=\007\241D=M\002\364;!\014\212;\211\273\350<4\214\003\275\246\375E:2E)<~B\343;\215\010\200=g\016\211\274JS\025=\235\270f\275\237\322\n<\357\237@=\313\332)<7X\273=\307\345R\274/3\274=\246\214\301\274\262\207+\275\210\217\032<_\265\336<\002\302\222\273\225L\212<\363\030\215\272MS\207=\202t\216<0e2\2749\324\274<\036\245\226<o\203\363\274\031\205^\275!\350\216<\303\026\033=TD#\275\373\377\007\275\3548\365\274\274\376\002=\306\'\\=\023\032\033=^\323\250\273%{\207\274\003\353\'=\356\005g=C\325J=\026z\312\274\330\227\320<:\373\221\275a\361\001=\037\3437=!f\014\275\013\370\312\274\371\270(\275\301g\200;;\231\212\274:\315\030=\262\007\200<\274\255m\274\350T\370<^\252a\275\255\307\237=\256\021\317<\217k\031=\304\245z\274\004\017\004\275IHg=\215\302K=\262a\010\274;\341\252\273t\337A=\241\221\220=r\336\210\275\025\323L\275\341\333\227=\340\265Q:\247l$\275\006\006,=\334\370\237\2745\322\365<\2373/<>7?<\360\3149\275\023\363\270\274\342=j\275\331\362\330<\226N\244\273V[\333;{\313\266\274\302BB=\017\255\253<\263\025\351\275g\014X={I\003\275<\226\233\274\337\315F\275\243\370\340<W\027\373\274\001\300G\275hk\316;\373\217[=\225:\013\274\377t\023<\002HF=\256\265\315\274\301\350\272;j\\\251=\324\210\323<\016d4\274\253HC<\220\352\254<\373\332!<$+\252\275\266h\'\275<|%\275]\333\031<]\272\217=\026\033t\275\257\226\247\274w++<\247\003\\=\323 \303<\357\302K=\006{\227=u]\020\275\344\004E\273rb\032=j\n\217<\330\233\006=\217&?=,\313\233\274\256\326,=\211r\357\274\r}a\275\235o\246\274&\223*\274\3127\347=\274\246\347\274J\250G\273\324wH=\221hF\273#\250\265=\346fE\275U\206\207=\244\003\344\274$\361\033<\\\317\353<LA\014\275\\\335\263\274~x\363=\361\003\201\274\330\r_;I!\332\274.\235\341=\\\3076\273\264d\245<|c3\275%\305\276<\2643\213;\325\3205\275\224\300\256<m\333\250<\321\312<\275<H=<\240\'\033\2756\003\216\2752X\"=\366\'\216<qn\315=\374R\250\274N\014\231;@8C\275\033/f\275\345\247\205\275\332\375\310\274\326\203\260\273>\037\247\275\253\356\177=\207w\354<\017\023\003=a\353\246;\032\317\010\275[B|<\342\245\321\273XM\204\275\367>\242\274\240\024\242\274\373lX=\253\020w\274\361\013\264=\357\267\034\273\t\251\035=\007\235\275=\232X\203\275Mn-\274\001\222-=L\014:=\342\307\003>\277\366\021=\335=\266<\242\341\322\274x\332!;|\301\n=_\002\254\274\206\222$\275\322\3517; \377\357\275!\307\240;\215c\355<(\223\351\273\354\241\340;\327B\252<I\317\r=\261\036d\274\316\266G=\205@\351<B\373\232\275\277\025X\275\331\252\001\275\030\254\254<\276\025\267\275\033\344\344\272H\'\253\275\203\227\334\274\241\204D\273`5)\275\237;\230=\255\303\026=A\315\021\275\037\213\014<F\256\332\274\333\311\214\274\331\177\351\275W*.=Z\251@<|\273d:\260\353\n\274\357\206\177\275mV\330\2732@d<\023\257>=\206\233:=?\361\240\275\243\277<=\211\020\260\275E\017>\274\362!\226<y\346\330\275\254DW<\246\215\r\275\325\231\363\274\246\237\252\275\ne\226\274\3163\226\273\331\224\215=(\222T\274E\026r\274\276\266\017\275\200\030\205\274\350\254\264\272.j\301\274e\010h=\227N\'\275M\324\310<\225|\234<\357\331\272\274\t\337A=9\313\263\273\311\314r=\304\2356\274\345\377\342\275\321\362\217\275\036\226H\275\202\374P;\316\272a={<\227\275\024\320R=K\271\216=gG\363;jC\200\275\334J=\275\367\313\215<@i\020\275\204\016\036\275\213\302\025\273\213\237\333=`\3430\275\320t}\274\250H\321\274g\210\347;\325\322+;\260\220p<u\272\000=)\234\013<\3003\036<o\024\021\275\243\314\215\275\203\361p\275\273\001\257;\331 )\275\002\312\314\273 \3141\275\334\265\032=\260c\017=\300\003\205=v\032g\274\274\227\354;.\212\024\2746\345\014\275\322\274\253\274\001\000Z=\3060\010\275g\211\216\275n[L\274\312\227e=\234\000\213=\002!\250\274\010\211l\274.\2455\275h\256_<\314e\020\275\216>;\274\352\205\227<.:i=\354\002*\273L5\022\274\354z\372<\271X\330\274Y\311\226\275\200\315W=\336\276b=\357\257n=^\3262=\021\206\256\274\241\263c<\320y\006\275J(\017\275c\010\321\274\364\370\010<\334]5=\254\215d\275\356\374\306\274\271Q\320<A\204\202\275)\330#=\220@\331\275r\027\320\274!\260\203\275/\027\231\275\370\323\033\274\214\354\023=c\007o\275\2773`\273b\262`:&w\020=\002\002\367\272\373m\226=\004\000\037<\034i\247\275\003\225\304\273on\322:Q\312\237\274\231F\013=\210\347f=R|a\274\312)\210=\314\177\004\275\271\224\277\2756\360(:\257SN\275|\230\243\275\327\256#=\350\033\026\275#\300\027=tLd\275\260\343d\275\262;\027=\377\321\226\274P\244\033<`\2664=\217\361\202=\023\344\362<\362\3020= \367\023\274u1\345\275\021\244\272<\360\217\031\275em\202\275\300\325\315\275?PL<C\213\366<l\240\241\274\226\357\221\274\256w\303\273\244t\037;\375\325L<\374d\306<\t\201w\274F@r\273\030\242\311=\207\340\266=J+\311\275P\366\312\2746\374\367\274\025]\020\275\270\212\373\274~j;\275\306\017\221=\352A\227=\335\225\\<\224CF=\2244\033=<\351\234=\003\353\277\274b\354+\274\264\354\014=D\022\242=\235\247\217\274\375\246Q\275\240\235\003\275\337\236\341\274Ci\355<\203\362\203<\347\006H\275]\225\340\274\"DM=\032\350^\275E\361\360\274\356U\211=d6,=\372\237\t\274\353\330%<\240\311\243<\263\021\025\275\302\220\202\275\376x\r\274\361]\036\275\031@\306\274\226\337\341<\"r\002=R\260\336<@X\272<\353\027\220\274?\rT\275\357K2=\333=\031=\nF\270\274SW.=>\321\331;?\243\216<\236N\031=\375m\035\275\326\201\230\274\017\231`\275\365\330\262<\362\334\007\275n\370I\275O\353\202=\253\305\323\273\304\340J\274\t\324\023:C\021\230=~N\221<\372\312\357;\322!\355<\3723s\273I\362\213\275\311y\021\274\357\236)\275\371*\214\275h\234S:\224^\034=\256\372\260\274\002\277\316<\362\213\345\274w\221&\275\303\256\347\274\347\334\020\275Nb\362<A\330\035\275\244_1=\277\037\t=S\263\214\274\236\370o=qw\363\2758V\354=\233Gc\275J>\344<\311\204\252\275\301\346\013=\260,l<\326\240\022\275\231H\036\275\300\246\273<\345@<=\245\272\235=\277\357\2469\001\3423\275\002\243\000\273\257\025g<\210\005\365\273\370*\200\275,\314y<\223 \232\274\360\312l\274\t/\001=\2521\200\274i\337\246\274s\271\275\274?\324\215=2+\370<}\257\024\275Ui#\275\013\376\205=\313\261\261=#`\234;\025\t1\275 \340\225=\004\"2\275\310\323\257<F\321W<\206\255\343<\361\'\244\274Vd2<\241\203\203\275\201M\325<5Y\033=N\200\034=:` \275\212\323\207\274\312\253\013=/\341\002\274\r\021\215\275\363\020<\275x\025|\274\326_\345\274\240\233\223=\305]\202=\022S\336\273\246\263\204<\204+h<\343=\233\275*\013\013\275\221%9\2753|\201<\332\216}=\301\002\020\275\321\243\346\274P7\020\274\253\201\264<W\025m=\230\005\021=\220\3158\275\350\030V\274\034\346X\272\026\0066=\2444\236=\210\211\007=T\221\223\274&\033\013<\326\323\260<B\277<=)?.\275\027\265\275=\t\234\032\275\221\006\373<Zd!=\330\324\010=\306w\256\275\212ie=\376H^<\260\370H;\306\264C\274\210=9\275#I!\274\251\306\225<F\036\036<\000z\001=G^\232;\212[u\275\307l\006<\325\353\250<.\235\005\275&\211\244<\214\230i=R,\0358\333\343\017;\202\203;=Bd,\274\021\367v<\260\3456=\005\261!<\263L\005<?\325 \275\020\271\026>\263\254\205\275\266\202V=\342\327\255\274\213\003\274\274\027\240*\2752\027\340\274\262\342O\275\307\243\255;ZY\260\275\261\370\323=\345\256C\272`\304&=4\2556\275\016\3417=\240\355z\275\340+\323\274\211\231\036\275w\210\031<\265S-\274\267\366C=0}\307\274\"\271;\273\260r<\2754\'\232\275s#\206\274\316\013\001=\000\276\375<\021\350\252;\002(?\274~\230|=\010\027\216;\257\307,\274\253\373D\275Z\347\243<\252\332\220<\255\367y\274\nd;\273)\275\247\275`\310!=gd\010=\347\323>\275/\001\320<\371\310\213\275\275\372(\274\350)\312<_\262\215=\212l\023\275\257\r\031=\366\277E\275\350\361\261<\375\212\243=\356j\024=\033n\037\273\006\235\232<^\230\003=\376[\322<\003\024\313;<Z\"=\310u\001=\243\266\027\275\257,2\274\275z\352<\333\203\247<`\343P\275\237 \262=\361%\346<O\3731<I5\262\274\203\277\215\2756\216\203\275\345\231\203\275\026\356^\275&6\370<\256%C\275\007\223\323\274\200\337\305;&\032_<*\301\206\275\216\204z\274\201\224D=V\r@=X\354U\275\2468J\275y\266h=\227\250#\275\335L<\275\022`\013=\360\371+=wgC<P\344)=\246\000\311\274\221\352C\275\353\336\332;y\307\332<\376\020\016\274\"h\243=$7\020<t\t#\274\375E\231\274\'\344\'\274d\177\002<*\332\033=\037hP;\204Rt:r\277\032=\373Z\345=\307\335\264=\303\"\231\275\260\025\277=K\000\314<\355\034Q\275\223r\335\272\272\246$\275cqZ\274C\242\366:K\037\335\274\242\341`=\002f\017=\300\006B<\231\354\223=\253\306O;\032\3441\275Y\306\230<\250\301h\273&\031\300<\241\274\264\275m\306\250;8\365\035\275B\253\370\273\200\036\003<\345\312\314\275\272 \214\275[\000\006\274\003\364\365\274\374\305\251=\324\230?\274/\273\260\274\247\313\206\274\343\2276<\314\277\276<\267\200\003\275\312?\346<W\022\024\273\235\243=\275(\324\202<G\235\376<\207\345\267\273s \036=\225\017i\275\013\347\224=9)p\273]\341C\275\003\'\207=(q\361\275\344\342\371\274\030\212\264=\252\310/\275\343\363a\273\006\361\270:l\017\205\274\374\360\030=\336\300\007\274\002\225\330<\323W!\275\026\201\275\274)\253\006=J\025\204=E[\240;\354\n$\275\241\023\006\275\031j\004\275e\231\241=@\356\254<\026~\204\273\035,\214==(4\275\022\313\314<f\273\177\275U\201\037=\320u\310;\r\n\236=0\\\251\274\035{\005=-eP<\220\241\243\274\235O|\272\226>?<\323F;\275\027_X;\255\377\036\275\3053\230\273f\223\203\275\021\246\311<\rWF=fj\271\274\303\265d<\353`\363\274\267\003\021\274$\325\204\275\017\225\307<G\241\351<TD\244\274\332\007\234=\357\375\213<\'\244\000\276\"\251\235\274\001\321\270=\3037J<]K\"\273\374\024\366<aN\"\2758\350\300:d+\215\275\370\225\327=\332\352\304<\302\027\327\274\350\342I=2\221\021\275\\\260\265=\034\216c\274\334\315z\273\3644\034\2734\355\302\274\251H\222<[\271N;\350\244\211\275\364\000W\2735nV\274\024R#=MD\207\2750\261\303\275p)\006=\321\247\213\273H\276\023<OF\243<\036\343\274\273*\374\315;\rS6<\305P5=\343\330\000\275:u9=\001\3109\275FN~=\235\212\202\275b\037\327<\303\217\257\275\264\334\257=D(\370\274\346z\231\274{\254\313=\217=\234\275\213\342p\275{\366\006\274J\2740\275\'\032\340=c\305\206\274\026\2038\274\3627\221\275v#M\273.\351\231<^\037\023=d\223\224\2744;\214;\352\036\204\274\027\335Y<\243\200$\274\353i\010\275\223\033=\275\322\357.\275\275\334\007\275g\325\017;8\213\013=\376\307\245<\261\354\307\273K\217\006\275\t\225\304=p-y=\302C\206=@\312\003<\372\000r=\303\260L\275\244\262\213<e\372\n\275\016\354\332<\305\254\356<\027\364\216\275\332\354\330<Q\317!\275mjV\275_#\256<Q\260c=\252\030d=\267\344\324\274\257\243$=\3557\217=\007\256s\274\024t\375\274\345\237C=\350\244\227\275\236\204\372:0\326\223<A\371A=\204;\200\275\304\037%=\024Ok= \373\206\275\370\264]\275?\031\221\274\245z\347\274\254\226\000\275\320\217 =\030\203*;\204\315\244\275\234;\247=\301\002\030\275\311\267\375\274#\014e\275\263\306\377\272\235B\245\273^j\214<\277\211\003\275\324\226\220=$\201&<&F\032<\337\374\341<Z\016\"\274\360\231:\274\252\244\246=\0257[=\325\036\250==\251\202;\026\326+=\232\365\234=\236\255==9\370D\275\344Q\260\275\374\033\r\275L\311\301<\252\336\206\275\364pf\275\366Y\024=\031\322m\274\240Z?\275\344\210(=k\037\271\274\201\255_\275\261\r\326<\233\351\3758\211\346\016\275\256\001\205=\247\332\212\275l3\306\273\261\307\255;\t\377\227\274\034\\\323\274\036\271\372<\251I\203=\253\332\026=C\320\250\271\304\212<\275\3567\312\274\353Uo=\364@G=y\313\331\274\243\340\202={\nW\275*q0\275\030\337%\274\0268\021\275\355\331\375<\363h\336<\336\261\343< |\326=6\373\306=\266T^\2752\307\265<Sg\236\274\353\320\210=\207SJ<\365s\355\274\340(\300<X\017n\274\217\214G\274\230%\002=L\340X\274\010l\277<\307\002\017\275\240\270H:\363\007\213\275\343q\";\023+$\275\023k\237\274\213V\211=|\223\260=4\244\026=\305\006/6\362\342\320=\376<f\275\316\310N\274E\332[\274\000\204\024\274V\325\372\274\020\270\217=T\347\275;\231]\235<~Y\335\274\320[\366\274\257I\236\275\363U\364<\274K\235;\000v\002\275\342\367p=\306rD=\244\320F\275\353\307\372;eW#=\004\343\274:\213\352\020\275\253K\026=\344\361\016\275s\002\367\274\362\366\262\274U\027)\274@#C\275\2656\300<c\0177=\343\216\233=}\350\025=[zc\274\2534\222=^<\013\275?h\r\274\230\371\361<\t\2625\271\"\033\374\274\324\252\247\274\245K%\275\220\375&=\020\320q=\304W\004\2756\034E\275q\236\246;\311\363L;\032\341M\274C\234m\273\317V\026=M\000\211=\215\177\216=\215?J<\233\'\017\275\222\005U\274\035!D\275)\304\231\275\003J\275<Ww\232=3FA\275z\262\215\275,\346T=q\251\221<p\316\260<\254\004\245\273\357\314\245\274\376\376-\2757T\241\275G>\304\274\242a\223\273\032\320.=\262O\200\275\002\322q\274\222\177>=K\026\343\272\004O\016=\002\213\n\274\325\025\214<!9\241\275\220F\217=F\001l<\204c*=\003#\264\275\302\210u=K\247L=\366\361\352;~\235\313\274\200\216\364<\262\221\255<B\260\027=!\355\025=\310\016\023<EkC\275:\237C<\242\200\367<0\0232\274\304\207\231\274\253\374\316\273\333\232\016\274eq\227\274\177\351\037=\350\271\223<Q\356\323\2753.\222=\243\272\303<0\212\264\273r\262,=\277\366\235\275\016bm=\177/\303\274\022\215\252\273\236\212\203\275.\rH\275u\374\220\275\024\222\032\275u\374\327<\264\301\'=\313\t\036;L6\347\273\365P\257:\371y0\275o\345+\275&\374\n\274\257I\336<m-z\274\374\035?=T\033\007=\240\n\220=m\013\310\275\312d\264\274T\022)\275~\005\275\273\031\261\377;\006\327\255<\362\373\254\274\302\265\247=\242@\272\275\365\014:\275\257\201`\275\270\302\020\275>ER\275nr\260=1Ow\275\311\303\320\275\360\223\000=\352\242q\2730+\212=\037\tE<\323M>\275Nkf<\014\212e\274s\374@\272\243\030\264\273|]H=\001\001\252\275\'7U\274%\010t:\305\324A=\3334\232\273\337\007\005\275c\334\245\275\204\260p\273\366\003|=%\327\251<\260<\263<\250i\037\274V\016\312;\326,\035=\r\241\210=t[\266\275b\tV\273m\314\303\275h\327\333<\016\013\236\273~\005}=\305\277b:m\266\305;D\273\215\275\375Y\377\274\353r\001\274\251\274\202\275\264\375\232\274\302\026\320\274\350\274\004<(\211\262\274\356w9\273\371!\r\274\026%\t\275B\263\257<\220J1\275\231#R<\321\357\312\274\346\014\372<\313\032\014\274\337\342\363\274r2V\274P%\037\275\244@\377\273m\276\323\274\213\254\362\274\010\340\375\274\036j\325\274|\"\221\273\233\t\271\274\277\302\330:\227\017C\274#\257\305\275\233\373\374;\027\364\304<\2773T\275)ii=\037\253\244=)\034\222=\177\374!\274P\313\377\274F\026;=\267Y\013\275x\035\023\274\020\262\343=2^v<\366\343o\2755\244#;=\2048\275\253\223W=\302\365/\275\212\270\021=#\272^;tU\275\274\036\336\031\275\342 (\275\250\3564=\227:7=\266\272\023=\023\317i\274\317=\315<\226\303\300<;\331\001=\370|#\275_\222\316\274\327F\246\274\256\204z;\312\265<;\242-\032\275\273\366)\274\300o\310=\005\273\301\275\202\020{\275?\221\001\274m\320\213\275\370\312<=<\006\232=\267\215\264=G\177\323\272\\\253\356\275\342\013\200\274\200A/\275\242\327\323\271\254~>\274^\255\237<\010\233\330=\002\003\230\275T \374<\335i\033<\016\245\324\2734\252\226\275{\254\202==\373\276<\367\t\215=\232\020\014=\202\205B\274\301\310(\274l\300\254\275a\200\254\274{\210\207<~fY\273\263lT\274\367\313\253\273a\364\032=-\017\247<|T!\273p\351\234=\342\312\230\275OlK<\364[G=r\302\235<-\255\264\274\020m\243;\205\034\260\274\205\000\351\274\264\024\320;\376\301A=;\324\223\275\305\217&=\027|\301\275\216\374\343=\330\215\022=nN\312\274f\027\335\275>\204\247=\225 \201\2753ZS\274\200\316\220\275ix[<O\376|\275\352\223&\275\023B\310<\203\221\205=\305\220j=\223\243\304=\371\027\250<v\023\000=\030\374\006<\"\017\023=\\\255\257\275\346\370\335=\360\207\003=\217E\244<N\020\n\275\204=\232<\332Jx\273S5\200\272T/L=\324U\225\274\326O#\275\215\002\371<\333\2530\2751=\223\274\340-\010<\373\253\323;D\324M<\254aG=\211\320\202\274|w\262<{\263\036<\013\n\213\274\213b\021\275\344\337\t\275\034D^\275\220\022\315\275.[+=t\016><\364S+\273\320\206\252=\322\361q\271\310\277c\275\237.\232\275\211\331\252\274\234\035\374\274\370\365e\274\251h$=\305\231\353\274\271X/\2743\353\211<D\366j<2\"m=hj\317\275\336\310\263\275qR\266\273\235\"6\275\257\351I\275L\240l=\210\032\2769\347~\354<\347b\317\274\221i\332:\354O6\275\273\343\364<twz<P\216\266<\304\216I\275\021{\003=*\007\306;\rR\357\273,e\300;@?\212;\205_\031\274\266\037m=\\\347\273<r\201W\274{\242\000\275\271\213\324<\036n\316<,\250\025<\021(\035\275~V\017\274\342(n=-\236\215<S\356\265\275\375F\020\2756\n\033<+P\226<\331\031\342\274\237\250~\274y\353\210<.4o\274<\276\350\273[x\277=\250\357\205<\n)6=\252\347\334\274\221C\010\274E4\232\275\312\201\307<\244xG\275\013\022\241:H@J=>K\340;\255\373\211\275\037\0233\274\205\2413=\227@\227\274\273\231\306=\254\007\033\275r\2409= \205\234<\364\274\030;>`\302<\222~.\275\007\354\354<\304\342\272=<\016D\275\273\030p;\326\315\314\273\025VY=\r\032\202\275\324\327\211=\205N\023=\017w3\274\226\277\023=\351\3577\275\314\006w=\364<\216=x;\231<\224n\233\275a\022\273\275\216\317Y=|\034\362<\300\030\363\274\315\321\325\275H~\020\275Vc\210=.\336\205=6\024\031=YU`\274\254\262\364<M>\201\275\376\321\032\272\367\367 \275o\277;<\007\243J\275\275\256\246=\025\017\326<\322\344\317<\311lP=9\023\014=\247\245\225=\367cq=\265E\203=3\367Z=\023\354?\267o;x:\2768\t=a\240U\275\274\365\322:\327\242\232\274\321\3713:\257\002\0228N#7=\273W\016\275\270D\365=<\033\264<Hw\234\274.|\262<\250\335\233:\277>\226=\350\213c\274d\217\025\272V\255\237<\032s\207\275\272\266\241=|\0034;\3704\345\272\276\370\000\275\215\214p\275\364\023H;\332\250\245\274\325ZT<\300Nb=\265Z\036=AH\256<\201f\217\273Q\3168=\377!\212\273\037}\243\274\021b\351\273=0\307=@\352n\274\301\017\240\274\3052\013\275w\273l\273\310\220!\275\235\020\276<TB&=\374\037\357<\267B\302\272\201\335q\275\320_\215=\312\321\204\274k8\005=\033\260\375\274$$\007\275$<\350;\304.\247<\227\366\001=gm\377<)\215\327\274_\337A\273\027=S\274\364\261d=\243]\215\274\'h\022\272\225\306l\274\323QC\275d\250>=\276\271\006\274]\033B=ko3\274dd\210< @\014\275\224\257\327\274\365S\223<\023\302j=\037\256\315<\245\327>\2740\372Q\274F-\225\274T\202f=\2401\222<\3535\027\275\313\314\240\2746\311\026\2758\271\300<q\214\210\275\231\036\340\274D=\237\274/4\230<\354r\036\275\227e\032\274\321\014\3149\315JJ<\251\240U\275\237K\274\274\034h`;\263\t\277=\343\245\356<\036K\364\274\016D\224\274\031\036\224\275?\247\326\274Ek\227\274\002G\203\273\177\330\264<\311\201\372\273\240\3574=\3650\276<\267\271#<8\223\337;BC\'=c\310\031=;3\016\275\321\016\257<\232\361\256;\202\234\306<\322\232\201=\304Q\332\274i\341\335\274\277lg\275\002\3536=\026\212\217;]W\245\274\"\255m\275;\273\n\274\345i\314<\321\346i\275\021\303\244<\257k\026\276\200<\352\274\320C\203:B\2222<2\021\246=\316\375\351<\005\342&<\326\004\035\274M\3308\2732\303\357=\345u\032\275\3401\221\275\305u\022<H\206\336;\315\346\361\274@\327;\275\252\263\351;M\212\251;s\t\367\275GO)=\324\233\210\273:H\341;\246\220&<|\001\3259\232\215\263\274\252\336\251=\010\"\030=&g\031\274\327\316@=\276\226\211;\324:\266=x\375F\274\267\202\305\275ehz\275\257@\253<\275\374\343<+\227\203<\242\1776=S;@\275\373\226\037\274@N\000\275\2311\235=\034\3255=o\352\303\275\345\2163=\360\376\034\275\313r\003\273\315\207@=\024\221\313<m\370D\275P\346\222<\310F\224<\377\255\205\275\217\201\213\273?j\214\275C\274\'=P\272\204=;I\337<\352\330\336;\367\177\356<\367^\322\275\201]\276\274\010\2269=\177\005\023\274\232\214\347\274\236Re=\206>\021\275\352G\026\274SsO=\201\363\036\275\025\032\217=\227\372\273=d\367@<^>\025\2731\372\246\275\005\000\217=}?\357\273\313\033M=\347\306\270=O\t$\274\000\334\221\275g>\317<Tv\331;\030\305P=j\\\262=w\366\240\274\221\315\244\275\347vd=\314j@\274\301\200\305\274\251\231\261<\222\344a\274\241\250\307;J\357\304<\233\0358=B\263\017=\024Hj\275\256\240\226=a\374\032\274\352r\277=,\341S<U\273\277\274\177\243\377<\2641\003\274\246+\341\273\232\311\013\275>\305\236\275q\270\303\275D\321J<\210\026\224<\225\321\002=AB\273\274\372=W=\353kV=\266\'\r\275\253\"\310\275\216T\037=O\355a=\314\307+\275\201\361\277=\235\341[\275{\211[=N\204\337<\006\221\242;\225C%\2754\353n;\215\320\342\274\343o\202=Y)\030\275\017\347\007\274\243z\262\274\224l\322\274\2572\227\275\206`A\275\201\313\327<\345\212\237=\261\264\002=\224\263\237:\245\236\201=\t\275\336<(RS=\203(\224;\312\273\020\275j\266\216\275a\370\360\274\221\247<\275\200\342%=\240\365\225\274p}6\275t\201\037=\376Qk\275\344\302\245;Z\370\243=`0>=\003u\253\275\317\324\310<\222\223\274=Z\314=\273\000\226\342\274\002T:=\t\321\371<\211!;<\316\242\230=/yl=\2401\014<:\245\217;\2165\237\275\316\276\007\274\2664\336<\013\204\030\273\212\264\340:\310\317\215\273q7\230\275\217\237\372\274~\241s=\206\361\001=V\021\035<\017\247\204\275\210\r\222\275\3663\225\275 \273\032=\313q\017\274\324E\321\275\\\237\237\275\210\0259\275\344\004\226\275\302\255\377<%\004\007\275\312=\244;\347\303\230\275\274\356]\274\332\026A=\234a\242<1\3550=\207{\357;m\3230=y\017F=\355\245\221\274N\362\240=\210\004\235<<\022\r\275\362\217(=\037\252\370\274y\202\356<\2116\205=R\362\373<\333|\375\274{m\254=\251~2\275\035\346\366\274\2127\370<\247\314\250\275q!\237\273d7~=\364.\035\274G\\.\275\016\345\216\275\305\233\257\274\200+\252\274\336\244y\275\350\277\034\275\215\367\225;Bi\021<P\211\267\274@\311\306\2741\265\221=,\267\305;\006p>=\205\014\230<F\266\212=\316\346e\2743\312\335=o\241\217;\251\017r=m\233\010\275\204C\24497\353m\275d\030\267;_\'\323<\251\236 <.\305\374;l~d<\327\230\t\275\242\247\236\274}\030$=e=\352\274\367\2713\274}\326\005;\273\010\222<\245\251\014=e1\231\275\306\314;\274\222\263\017<\271X-\275Q\3733<&IM\275\034\\\234<\r\021@=\215&\366<\370&A\275\354}\r=\323\274L=]\307\210\275\\y\225<\016\0023=\377\333\345<\306\301\313;\352,\350\273\304\224\204=\222\375M\275\364\345[\275\217\300\243\274_\330\006\275\327\221\232=\221\350c<L\327\364\274\030p\025;W8[\2755\274\230;\235z\271\274\325\373\232\2756\211o<\030v\217<\220\307\207\274\t\353}<,X\343<\220:T\275\0266\335\274Q\036r=\310\307\254\2755\267\211=\265!\024\274\010f\240<4u\021<\241\275\353\274p%Y\270(,A=\034\312\020\275\343XM\275\204\301Z\275I\234\236<\213}\n\274\247a\355<s\310\212<\204\215Y;\217}@=B\253\250\274KV1;\000\242\336<f\264k\275\231\217\225\274\203\001\274;\336\335\350\274u\344k\275\340J\320\275\345P\027=5\317\260=y\377\316<\216\017\005<\010*\302<o~\255\275\374\230\021<\367\310e=\305\3024=\262\215\273\274\363\371;\275\023\016\246<\010\002<\275[!\006=\354%*\275z\2317=\312\301n:\377\264F\273\366L\035\275\225L\002;\345\343%=\275MU\273w\272\214=yT1\274D\213\036\2749\252\236=\001\315\002\275\270H`\274\364f\035\275\316\032\337<\330\310X=\030\201\007<!\314\217\275\327\252\355<-\365\032\274@\325\245\275m\t\004=\356RV\275/\030;=\262$\020\275\2560\005=\000\312k;\t\362\366:L\031\007\274\343dU\275O\014\002\274gW\025\275R\241U\275\026\033M\275\307e\257\273\017\357\300<\330\036\000\275\242>\244<^\363\211<b\263 =\\k\321<\3362\215\272\336\022g\275\021@H\275\306Z\200<\245~\t=\214\303\332\274/\020\350<@Q\t\275N1\030\275M\251n\275\014\347\t\275A\205g<C\243\251<:\021\002\276\246\036l=\332\021\010<\242\000G\275\233\266\361\274J\271\251\274\261\334\347\274\235\3156=\353\276\032<\333\210H\274\205\321\256<o\013\347<\236\235\265=\307\311I=\236\365\236=\01069\275\037\200\233=\227b\317\274!\221 \275\036XT\275m\306\225=m-\264\274\263\304K=\006\274\206<v\373\230\274\225\303`\275\376G\264\275\305\335\333<B\2333=\230\307\307\273\007`\252\275\326B\213=\345\r\027<\t\341g\275A[f\275\270\205\214<\245\316\342<1\262M=\372i\305\274\214v><\003\245\214\273\255}\213=hf\017<\0279{;Us\241\275\300\214`\275]\342\233\275\203\025\215\275\362\3228\274\3569\355<\333\246\243<R\0220=9\257\336\274_,\233\273\332\006\254<0\242\351\274\324\375D<\347R\033:\203w-=\360y\244\274\267\353x\274\006\031\226\275\016Ni\275\253\233\000\276\325 \232;X\364\275;I\273\"\275\340l\302\274 V\022=1I\375\274N\224\213<\300R\n\275k\375\324\275O\315\\\272X\002\246=e\230\372\274T\357\211\274\232\320`\275\305\207q\275\352\337[=p\342Z=h\256\031=\'a\005=\343W\206\275\365\021\351\274\376\252b=+\254\227;\374\261\221\275\247\013\036=\342\274\202\273\305\010\023\273=/y\275\373\034`\274\325dK:y\203\"\275e\246\213\274\2143*\274!\0037\275\366\252\203<\252\250P<g\005i\2746\024D<\225 \220:\226\225O=\034^\010=\275C\026=\262~\n\275\2248c\274\031\177\355;=\2766<\216:F\275\307\301\003=\336C\234\275\321\214p=\226,\235\274O\032\3669\336x\275<\275\215\000\275\371\035\310\273\365k7\274\204\233\371<\275\330D;\004\261\255\275\256\342\234=\220\363\206\27542\001<\331\031\210<\372X3;&rT9\211O\026\275a\217\201\274\367b\211=\246\341\221=\t\242\026=J^[=\276\272F=Fh\274\274\235\271\362\274K-\233\275\005q7\275\250B\217\275\217\"\240\274\037b\032\274\241X\312\273\351\310/\275\037E\342\274\376\214\230\274l\322\274\275\014\036\310\274\234i\253\275*\234\377\274\312I\206\275\246\243\r=\312\210\272\274\342\324\254;\257<\250\274\2043\333=q#G<\233\214P\275\361\351\240\274\371\235\271\273\231\224e<\306\230\342\274\340,\212\273\006\220\266=\214:\245;\252/\002\274\257\220\200\275S)\242<!\355\375\273\333\362\231\274\013\361\000\275\007s\352<\322\333\007\275\265\215\334;\325\257\036=\036P6=^\207h<\314a\007=t?\322<\251\372\203=\302\335\267\274\205H\t<\324\207\251<\213\245\312\274\234T\210\274\322\376\334\274\317\364?=\306p\033=\025\006\277<\202\252\033\275\313\rL<3\263\010\274\256(\251\275c\245\233;\372\305\250=\211\215O\274\313y\271\273\375\273#\273L\351\244=w\307\"=c\214\r=\353`\375;\210\231\023=\254\326\356;\3330\'=\222\\^\275\247\256:=gx\335\271\276\022\266<\212\243c\275\357\267\234<\031\r\217=\347\234\206\275\010\210\301<s\001\023<\037\261\003;63\007=\330\307w=\331\341\300<vMO<\230N\002=\032\326I\275\271JY\274\024\262x=c\357\352\274E\367\263\275\034\340\345<T\240O\275|y\031\274\r<\367\273\343\0178\275\345C\210\275t\034`=\347o\303\274\000h\244\275\2143Z=c\244\250=\344\243\326\274\357\3534=:B\222\274\272\230[=\232)I<} 0=w\275\"<\220I\224\274\346]\270\274YB\235\275G\241\037\274QM\005\273\337\243n\274\345\221(\275\357\315\031\274J#\212=\261\3634\276\037\2233<\005&\"\275rkY=\234\203\327\274>\373\322\273<\263-=\377>D=\206C\321\274\014S\367\274\366B\361\272\001\032\217;\340\266\210=)\035>\274\364\370W<\277\256\022\275\245VN\275@\227\352<\330*Z\273F\321\007=b:b\274(5\316<\362\n\020\273\327\027\365<\207\246\231\273\303_!\275\034\346E<\321\314\226=\207\033L=\225R\322\273\240\250z<N\316F<\212\225\222=\264\372\221\274,[a<l\362\254;\021\372?\274\357Yk=\311\307\253<D\013&9\'\336\211\274\274j\026=\305U]=n\0308;\334\266\236<3i;\273\340\t\020\275\001\277\312:\301?\'<\366\032:=\232}5=\262c\035;r\272\226\274\316\253\n<\376\325\235\274n\020\271\274[\001\346<\203\246\027=\350\032\t=\203\202C<\315\250,=FG\014=\252\007\304<D\271\224=\340S)= }\034=\216<\232\274\326\307\274<\214\320\317<4m\\=\242\345\304<_\230H;\320T\227<\327\035!=O\2054=\344)J\275LN\266<\255+\302\275\315]\261<{_\247\275\263<\314=/\t\353\274\023/3<k\033\\=\275\341!\275\240~\305<[\312Y\273\177\n\221=6\305\207\275B\360\312\2743\275X=\331-)=W/\364<\245O\315\275Q\377\n\275X\"\024\275|`x\273\377\036/=XP$=o\360\304\274\003\207v=;\254\360\274\027g&=\033\307\214=\375$d\274=-\275\273\313\345\022<d\310\341<\307\327A\273\373\367\325\274\277\246\327=\351\366\200\275p\263\223\274\244\321Z\274\354<\\\272\2233w\275\023s8\275?\232\331<_~)\275\263M\217\275@\2404=v\377(\272D\334/=\347\276\224\274$\334\373<tYF=0G\310=\306&\030=\361\375\257=\346\370X<\253\272\000\274\007\373\007\276f\307B=64/\275\005\016\247\273\353Q6\275\"\235<\275\036I\210<P\002\205=\371\343\207\275\235\240\021>vv\213=\255u\342\274\226\014S<\0071R\275\225\035\255\274h\350\233\273d\354\254<\317k\276:\0042\340=\3459o\2758\rK\275c\251\204<0je=\300}q\275#:\030=\010u\244\274~F\006=\005\020\237<\252o\346\274\232\252\033\274\325\003\220=\212r\220=\337q\242:b_\205=\215P\360\273\267\202\032<A\372<<G\310\371\273A\345\224<\222\212>\275 7\266\273U`\203\2733h\222\275\343\3221\275Q\326\371<\270)J\275\203\003\246<\236Cy\275!u7=2qS\275B\326\332;\316\370R\275U\345\253\275\036\302H<\256r\024=c\207\027\275\204\276\025\272\256\302\013:w*n\275)\235l=\\\274\322<#m\315\272\2320\235=\372\256\025=\260\217\220\275\330\245\254<\312\235\262\272\262\250$\274\322i\217\274\326zp\274\006K2\275\227s\245<\300\206\205=?\303\313<\002\363\217<\274\216\304\274Bh+\274:\331.\274\350\347\332<g\356\\=\306\314\037=B\260\214\275C`%\275\266b\215=\265G\312;\307yz;W\027\274<H\024 \275\006uj\2743\233\310\274\201=\033\274\013\351\004=!4H=xd\267\274\344\321q\275\263\244\3309\224\214Z\275\273\005\212=\367\364\356<\251j;\275\321\305T\275W\344\030<\316U\262<\217\213)\275\372a\216=p\241\203<a\220\325\274<\307\353=\317`\374\274\322\377\021\275\003P0=--O\274s~@<\211;\356\274\031,F\274\203t\271\274\370\241\010=J\n\213\274]G\000\275\034%@\275k\373\274\274fh\201=s\301\306\275\343^\242\271\014J\200\275\306\331\200\275\262\035\'<\035\016\214\274\325\030\224\273l\243_\275\241\324\221\273\201\037(<aU\245<\301b~\275\275\302(<.\267&=\014<\311;R-\205\274!\024\016\275\201\357^\275~\016\305\273\005\026u:\201z\340<d\332;<63\204\274\007\322\334\274b`\301<\010W&\274%\332_=\262\023\372\274$@N\275\336jJ\274j{\205<R\204\311<\354G\236\274\241%c\274\207\226\335=3xl=\263c\371<\013#\262=\217\r\353<\277\244\303=\206w5\275#H\314\275\275\201\305<\341\357\302<\307\257\020\274\324m\341<V<\024=\353A\213=\017\3167=~&\275=\324W\344\274/O/=s?\207=\356\021\211\275\252R\350<\272\250\220=\370]\034=\351\364\001;\033\361\021\273Qp\264\275\254BA\275)\214\225\275\262\035\253\275@\255\360\275V_B=\201\212B\275M\304w\274\014|\273\274\350\204\207\275\252\264\215=\302\316\341<\366\325\313<xw\312<\220&f\275\031\334K\275l8\256=\264?\204=H\344d=y7W\274\316\335\302:,\2741=cf#=\340wO=IZ?=%*\227=\256c\364<\207F7\275\034]\247\275\234_<\274.8\311\274v\356)<\201;S\275\227\307\204<-\016,\275:\033\252=\275\301z\273R\374@\275\350\343\256\273\367\321U<\324\241\\\273\221 U8M\034\316<\264Tf<\017\242\203\274+%\225\274\032\320\021\275\337WU\275\001\355\331\273\334F/=\3601\357<\233\265I<F\267X<\006:R=\204\"\262<\250\311\203\275\326g\220<\362!K=\275\347\022=\355\r\254<\232\311]=%\363\264\274\333o\002=\211\300\374<\264\241B\274x\254\227<\326F\272\275\366?\223;q\245B\275\375\363\212\275\272\302\326:\337>\340\273\030\311\361<\t\230\330<Zj\223=QS\023=\203\231\313<:\355O\275\325e\221\274/\221\265\274\302\035\221=)\260\020=*\266\325\2745\021;\275\210\301$\275T\023\013<Jc\021>\330\013\004\274\211\371\223\274\361\243\220<\024\025\206\275\231\312\231\273\226\014N=\367\274\302;\316\260=\274\340N);_\307(\2754\322(\275\300\023\024=\207\332\200\274\300p\376\274\221V\327<%\365\'\274\376]\242=\253\266\206=ar\217<[\r*\275/;\313<)+ \274~\373\356\274\212\347\373\274\r[\307<\305E\236\275n\327\207\274\235\214|<Q6\271\275\326US\275\034w\255<B\324p\275\017\034\226=V\017\216\275@k\257<r1\013\274\032\331o\274.[\036\275\362=<\275\3409\234\274\352M\t\275\321M\240\274\3124\271=\214\347\004=\325\276\016=\350\373\002=\253\275\005=\314\022\216\274J(\260\275\203\213\260=b8\010\274\326|\211<\321\330S\275\230\346\372\274#\354\314\274_gU\275}\346\202=\221\036.<\013x\215=\332\351N=O\340~<2\210\366\274\257\313\236\274\246\340#\275=6\233\275\024\245\032<\000W\206=\352\361x<B\331\235<\277G\302=\3412\214=\354\330\245=\033~/=\377P\203\274B\027P=d\252\303\274.\232K=\310`\204\275\332\235\240\274\266!\323\275%\032\372<\231_\240=\030\277\352<\350\312\004=\230i\027\274\275A\032\275\351L\373\273b\\\222<\374yc<D|\242=N\010\214\275\355D!\273\353\333\224=\260\207\350\274\226)2\273\30027=\303\247\246\274\244\255\351\274\036\223\344=\264\376[\275\371\0335\275\003\377Y\275\246&p=\014\344\305\273\t\240\224\275\236\260\212\275\001/\270\274;\362[:-w\202\275\020Z\337\275\0055{\275\274\272\321\274 \2175\275\372\375\244\274\227..\275\266c\006\275\365\213\231\275\311\021\013\275\007\312\372\274;=\036\275\272\354\312\273@S3<\034&\'\2744\337#<\265@\205=\323\236\202\274\264\224\r\272\367\254!\275\303\353q<|V?\275AO\212\274\214Jk\275\271Y\034\274s5\210=\032\003\245\274\226\001W<\002<\355;\267S\230\2757\"\031\275\322.q<\036\267\314\274\355i\231\275,5\252\2747o\372\274%\307\315\275\232%\221\275\371 \014\275\302,\365\274(-I=~[\264\274\261\355r=\320\301\225\275\201\235r<\366q1=P~\014=y\343W\275:\016W\275\322~W\274\235*\"\274S\205\203\275\254\221\206<\237\355\236\274\r\036\251<rE\244=\250hR<\304\221\207\275\004\030\212=\210\345\007=\351M\314\274\'\327\177\274E\010\275<C(><\242co=\373\226\252\274\235\262\212\274\266P2\275&\373\022\274\254{\233<\000\0055=S>\303;M\tq\274{-\003=I\177\027\275T\016\300\275\001\274\306\274\001\214\205\273=\235\026\275\306p\006\275\032=\217;\310\243\306\274J\277\323<\266#\226=6i\312:\234\333Y=\370\201R<\310\254\225\273\003\206\316\2747\212>;\023\003\252:\330U~=\317\311\001>\232\026\224\275\272X\373\274\215\370\253<\013\231\017\274q\010*<\347\2731\275h\341\233\274\331\022\t=\307\t(\274\262\324\254<\017?T\274\260\211\376<\350\235\332\274\201`|\275\360\204Z\274\216.\311\275f\020\274\274]\322\032\273\302\375X\275\274\017\311\2753\337\241\273\326\340I\274\033\334H\275u\310\262:\265qO\275\275\356\244\273Q`\316\272?+a\275\t/\304\274\335\314\005\275\261\'\034=\262\2451\273N\363\340\274\004\331\333\274\313\356\307\274\242\r\242;g\017U\274\317\342\266\273\006:\322\274\020y\332\274=\265h\275\023\355\212\275\304\246C<M\223[\274\355\242\246<\323i\253\274\0270\323<$\231s\273\304\337~\273@\025\225\274;;\000\275q\022\207\274\270o\013\275\367\235{<s\000[=\010\350\350\274\335\201\277\273\375\247\035\274\203U\223=B*\210\275\007\237\250\275\353/c=\177\240A\275l\224o=KF\014\275\364$\226<|\271\205<\251\277\003\275\034ld;\'\375\225=\016\300#\274T|\310<.\"\267=\220\0204\273\2310\220\274\303\321\354=2E\206<4\026\262\275E\335F=\271\025\035<\035\3477=\200zX\275\235\227\177=\372\334\021\275\265e\241=\372\037\265\275\317)\370\274?!\r\275\352s\302\275M\002\322<\022\201o<\350\224i\275Q\235\256=\205\231\224=\214W9<\345=:\275#l\206;\331\236V\274\213\\\014\275\313^\035\275\261\244\234\275\3340\323<S\210 =\206\007\035:\314\262R<\364>C=\220\354\255<Q\312\251\275\035*\347\274dl_\275\256g3\275w\200e\275!S\313\274\3116\364<\376\035P<,\3654;U\364\024=:w\031\275\240\344r\272\224\022\356<b\036*;\030\211M\275#\352*\275\'\342\330\273\255\263\224<\237\320`\275\203{]\275\\\257\214\2751\313d=\320\332\324;\276\331\227<p=]=D\207n=\265\201\324\274\375\261\'\2754A\206:\327\010\242\275\315\244\025\275\003K~=\254\227\331\274\265\277O\274-\231\307\274\010F\002=t\324Z=>\312\275=\355\204\313\274\323\003=\275\030A\017\274$8\345<\365\345\207<y\257\373<N\373\020=:\241\371<\256\257\021<\3143(=5\312S\272\244m\264\272\323\020\002\274\353\326!=\350J\274\274\321\336\275:\"~\255;\t\3009\275[,\363\274\342\035b\275(\022\222<\350\307\215\274\313\375\202\273\272o\233<\321p^=\376~*<\030\245)<$\363\315\274\321\240\374;r\3332\275\334B\210=\350;5=\000\352\220=1\224S\273\366\026J=\371\241\263\273\313\377\017\274\302d.\275j\030\255\275\344l\345\274\351\rn=\026\233\215\274\241\3117<\322u=\275\007\004\320\275F~\007=Hp\006;\363\334_<I\215?\274\300,\360=/Xu\2740\365m\275Y&^<\354\341\253\273\000\256\177<q\333\036\275u\256\351\273\323L \275\to\307<\262\303\335\273\243\236{<\276O\273\274b*\326=\311\313\332<\350h\027\275\221\222)\273\205\227\201<n4\022\275\023\255\033=\262Xr\2759\371\023\275\337G\022\275\244\263\245=\025\361\031<t=\265\275\317B\"=\316\342\212\275\2155\240\275\320\232_\274\250\253 \274L\207\372\274t\215\311<\377\254F\275\212\273\367\274`\272\237=@\207\256\274\275\264\363<J\337\016=\014\023[\275A\374H\275\034_N\275\320\352K\275-\250\035=\263\260\333:\270\337\357<\352@\217\275\267,=<*[\356\273D\0273=\331\347Y=O\270*\275\202\264\314\274\025\263H\275\360;\203=\357\230\254\272\302\363j\275\007\2176=\364.\235<\201\003\343<\2506\026\273\332\220\t\275\037\367\276\274\220#J\275^\017\210=:m\030\274s9\323<\330\341%\275\305\304\246\273\003\2119<\351\3071=W\366y=\255\2264<\217\275^\274\244\2404=rw\221<\237\\m=4\254\216;\206\216\234\273\r\203S<=B^=g@\005<mS\220<\331\344\342=\342\345\216\275\230\340\t=+\203\341;q\207\n=\257\002!<#*\201\275\334\276{\275\334\264\333\274`@\267< \241\031=\341\r\375<\221F\002<\257\324N=\243<\370<\212-\266\275\034s\320\274\034\210\236=\212\337\263\275\360\236\235;Uo?<\220\300\013\274\222\255D\2742\002&=\304\023w<D\211\360<\226LZ=p\005\243<\343\025\224\274\242\266X\273z\310\315<\371\016f\2751\342+<\002\307k\274\202\025R\275\341#\221=\233f+\274\035r\311<\232\234\205=\177\342\341;\354~@\275\270\223\370<\017{O\275\214\312\352<\355\346\025=\364W\300:\014%.;\310\316I=\360\202\306=\337\364D\275f\373(<\330\212\031=!\313\022\273\331\2271\275\2113q\275\001$\231=\367\177_\273\272\267\026=j=\275=\363\322*=\0231};\177\237\220\274\016\013\206=\327\221\206\274\366\0134=\327>+\275\232\312\346;\203\230A=\230\302\206<k\024\024\275F\366x\274l\354\327\273L\204\036<\374\330\212\275#\031a=\227\350 =\230.P=\243\253N\275\255w\014\275\336\336\367\273\377\301\020<a\257t=\362d\332\274\344\250\005\275j\212E<\014\215\004\274\016M\\<\034\361\203=\351\372#=2*\305<?\2438\275wd\344\274\347\306z\274!\273\211\275\342\322\233=\'\232\365\274+\373\311;\2756-\2733\372\300\274\254\271\013=J\031\224;l\016\300\275MFC\273\n\200p\275\250\222<;I\255n\275\273\211\311\274\n\344\231;\037~W<\350\232\025=CL\255;Ng\341<:xY\275\254{I=\216\200\376\275\023\023\237=\013\257\347\275_\004\027\275\264\316P\275\234\241\266\275\351\360\202\275\3369\322<\315\202*\275\352x\323=?\"N\274e\302\030\275v\344\030=\251\227\321\274o\345!\275\377\361[=\177\220v\275R\372\331\275\372#\320\274\233\026\322<\345\240\327\274\237\327\033=\010+A\274Q^\376\274\353*W\275\374Z\233<\273\375\226<\t=\224\275\216\227\246=\177\345r\2742\000\025\274\2024N\275\234:\203=\310\035h=O\033\256;\364Q\006\275E\335\260=\224\354\375\274\207<\247\274|l7\275M\r\'=/\320\357<\005\223\231=C\230|=\222M\240\275[1\206\2753S\034=\301\031e<\236\251\027=`\211\207\273}0\276\273\335\266\210;\"\025\221=wbH\275\265\237\315;\320\206\017=\362r.=\325\343*\275W\211[=o9\"=n\222\010=\322\364\204<\2552\235=$\245i;[!\003\275\276\024S\275c\353g\275@\356\324\275\232\201\\\274g\311\346\273\211\3502\275\013\021\203<j\017\337\274\207\210\335\274\336o\374<\303 +\275aU\224\275\301\374\017;#\324\006<\376S\204\274\030i\314<5\267s=\010\320\205\2752\025\206=\253\322\227<\356\247\035=\323h\207<\344\326\034\275v\314I=\333\305\370<i\264z;\"n,<\206\224V=\355u^=\204\'\326<j\240\\\274\321f\206=R4\345\273&\177\342\274\n\2103<\305\212\225\275hFn=\220\237\230=\313\313w\275\244\232,=$dA\275@\344j\275\355\216)\275F\264V=\344\0360<\233\226\235\274\353\037\273\272\377\367\236=\234\031\271<\375\300u\274/\213>\274g\361\252\274\202s~<\377\252\214=O[C\274g\020Y\275\031/\374<\2265\274<D\313\237=\016\032\227\274\205Yl\275\326G\211=8\"\246<6\005\245\275\324\235Y<\322}\224<A\243\362<m\232\250<\200\332\273;\263\266U=\334\240\213\275\315k\366\274\007\020\272\275\272#\272;r\232\206=\372e1\274T\'?\274i\321\261=\352\365C<L]\001\274\220w\262<^\255\304\274\340\230(\275v^\260\275\3254\251\275\025\221I\274\220\336\306<X\2268\2753J\211=\027b\256=\236\242$=\216\177\357<\252\272`=\305G\303=\317\344*=\023{\333\274\302\2279=\n\033B=\270$\216<\213\237\221<\206\241\037=c)\247<\215\020\352<\315\210}<\231a\024=_\034\033\2756m\261\275\030\317n\274r\245\263<\330\357\261;\225C\034=\316\204\016=\234\3513\274\362\030\352\274G\323\216=\222\276\t\274\355]\316\274\350\0024=;\246r\273(\277\\=\201\354\271\274FBf=\211\375\360<\350p\024:\nlF=\302\244O\274\027\205\344\274\3223\004\275pY\332<p\005*\275\366\371\364<\033\216~;\311\263\341\273[\360\262=\235&a<\321\362k\275\211\307%;\346e7\275\346\355j:G\262\336<\231\333\236\275\345\271\375\274P,\r\274\274\363\243\275\177\030\300<\034\316`=^\014n\275\342\360\353<\271\362\030\275%8Q<q\013s\271\"\001\275\274o\373\302\275\231\026\014\275N\312F\274U\027\001\2751S\336<\263\236\247=?Qe=\230\026[=\212b:<_\322N=O\300\346<\227p\261\274\367p\365\274d\337\004\275Ci\014=\231\303{\274\314\232f<\020\370\237\274\336\207\270;\224rx\2750\214\334<\320\313\213;,\003\366\273\000\025\364;R\273S=%\253\177\275\2779\363<u)\222<\270\234\021=A\217z;/@\232\274\273d\216\274\370\376\310;\241\353\003\275\367%\266=\311E7\273\347z\027;\224\255\273\275u\230\336\275\342L\215<\345\r\272<{\257\206:?\273\356<\353\353\r\275\251\003B=-i3=b\226v=\241\221\203\274\261\326\245<v\356+\275v\0268=u\250\364\274D\257\361<\242\270)\275\317p\273\274\227vh\275k.\231\275\027\242F;\205g\225=p\354R<t}\224=y\324\374\272\351\246\345=H&\375\274 \211\n=\271<\243\275U\376{\274{\353_<\0234W=;~\214=z\227\321\274\001\243w\274^R\032\275-\342\013\274W:\026=\376\260\2179\243\306\000<\235\323<<\037\345\244\274\214\022\"=[v\316\272c\033\257\273*\270\030;\275\224\006\275i\"\264\274R\205\266<},\227;\2174\341<\306r\000<\336\274\236<\227<@=7\256\337;\271^\210=\225\301\000<\333\202r\275r@\245\274\274\350%=\203\315\223\275\367j\350\274@<\207<\337g\005=\202hq\273\340\257\260=\354\363\276\275\316\234\353\274i\025\211\275\032\220H=[V\021\275|\026/\275\376\313P=3\223P<BU\035>\273d\314;\335\341\202\275)\271W<\006\tN\2750\342\247\274^R\312;\203/\211\273py\364\273a\234\247\275r\307d\275AA\034<\315\345\n\275gm,\275\215L?<\376 \241<&4\217\275\353:6\275\204\3022\274\266%\001=\177\316O\275\364bX\274f\305Z=\372\216\301\274\323m\315\273\355\224\226\273\205\376\r\275R.\221<\361\240\323<&\'\243\272\340\216\341\274\317\003{\274<x\347\274i\225\217\275\223[\250<o\314\223<\372p:\275\245T\225=\275\233\353\274\326\232j=P;\213;\310\256`=\321\272\343<\227\227p\275m\221\305=\004\245W\275\252\303O;e\032\231\2743 \022\275r\226\210\275\202\346)\274\305\255<\275}3\251\274\334\336\023=\320\262d=\216\247\225\274x\256\322\274\027\301\330<\031\377%=:T\013\274\017\251\016=4\370\203=y\272%\274\221\336y\275\314\273\240<\010\224\302\274\277\037L=\234\243\253\274\231\0338\275kI\365\274+\010-=&\3608\275\263t#\274\244\025B=\237d\033<P\0268\274\307\253p=\027.\241=\241\344H<\264\005\311<\222$S=#\033\020\275\316\303{\272\345A\314<\264V\021<^\374\362\273s6.=\027K\003\2725\034\227\274Xfj=\321\245\304<\346\305y=u\241/<\3558S=~\234\336<\2667\324\275}\226\220<\013\271)\275S$Y\275\023\201\261;\225\010:<\255\033J\274@9\010>\206\313X=\243u\372\274cO\204<\014\270\342\274\272\000#=\301\\|\274\216 <\275\361x\006=\301W\361\273\036N\007=\327\r\267<\205\233\230\274[[d=o\331\354\275\301\016\032\275^\253v=\236\206\232\274;\305\245=5%l\275\320O|=\233\334\226\274e>2=!\003B\275\316%\354=\246\035W\275\365O\005\275\235o\277\273\273 \217\274o\361#\275\375\207\n=\262\313\024\274\212\312d\275\342\311\262\274iE(\275Q\344\244=R\255\017;\003\316\210\274SZD\274\340:\223=\325\006\253<\274\n:\275\371A\212;7\357\275=\303\'\203;\374Z$=L\3143=\025\300\273\275\224K>\273\374O\334\274\266\267\330\272{\2263<0\202J=\274\311\256\274\301<%\273J\017\233\274\362C\210\274\317Ak=/\021\246<\317GL=\016\207-=\316\366\274\272_\374\244\274=;\324<\016hv;G|\260\271u\340v\275\217\231\013;\317\241\r=\367\022\317<c\330\223=\005J\'\275\245\253F=\275\205\335<\033\231\314<\306.\342\274\2568n\274\246]\214\275\335\351\010<\333\232j\275\351\032\271\275\265m[\275a2\207\274)\334\335\274\270Z\276<\236\216\010\2766\230\271=\204T\223\274\223\032\304=qX\215=n\223\314<\004\356P=\345C\360;\301\214\250\275\376\252==\2725\366<\314XB<\316\032\177=\345\r-=Y\363l<\300\276\257\275\223c$=\316\306\307<\'\373h<\216M\362\273\372\374\250=\302\362\241\274\327\3113\275.\020\n\275\275\024\250\274\202\020\026<\352\002\217\273[8\251\275\035L\340<\301\347\304\273\360[\004=\033&i=D\275\203=[\206\202\273\240A\222\274\230nr\273\354\252\005\274\356\345+\275\320!\225\274-\222\201\273O\264\037\274\010\006\357\274\351\351\222=\265\332\231\275\370;\252=M\nz=\223\336\207\275\025u2\274\352\231\006;\316p\232\2750a\236=H\315b=\003j\031\274\2244.=\300\022\205\274y_#=I\316\377<\232\306\207=K\356\233=\203\214\030\274t\274\210:\355\357^=@\210!=\222\002\030=\351r\030\273\333\351\314\274\347H)=\241K\206\273%\321\272<\221\021\000=\335\301\354;\025(\241\275W\014G=\366\321\203\2753\323\271\274\341\262\210=\"G\021=\350\206K<j#\261\274\352UU\275\2477\233=\342\245L=:\230\022\2738-3\274z\374\346<O\206\001\275q\214Q=\3151\026=r\320\000\274\016K\"\274\230\234J=\300\006\032=\327\261b\275r\207\213=\025F\307\275U\005)\275i?\201=\261\365\036\273\013\236\021=\245\257\357\273.\253\036\275\2365\351<\340X;=\304\243\020\275\307\264\016\275\253\321\000=V\256\341:\274+\257\273{\370S\273\234\276\321=\330\330\300\274\350\242 \275\004\250|\274S\3527\275\322I\323<\274\232\212\274l2:=\343/\222;a\262?<l\314[\275%\343\372<\351\350\252<9?\311;\177\021{=$|\250=A\375\005< s\337\274\033\307c=\350\034\014\275O\232\031=\303>\026=23\361\273S\021\326\274c\220\242\274\371\234&<\374UP\275a\006#<U7\004\275\3317\230\275\272\026\177\275\302\017n<\256\016Q=:\315-\275O\226^<\373\356\354\274d]I\275\331\265\317=\030~\334<\000}\\<\221T\204\275w\250A=e,\033\275\262\246_\275\200^\346<\032\256\020=2\313\242\274\311\317\021<[\243\307=\301\2615<\347\212\247\271}\n\370<q5\027=\277\253G\275L-\231\274\201E\006\275\305\335\036=\340\025\223\274\233\177\360;\177s(<\340\016\233\275V\033\325;\261\336F=\234\243e\275u\314\347\274\223\332\211\275.c\275<a \344\274\032\320}=\217g\215=\255\r\260\274s\356\260;\031wc\275\244\270i<a\222\200\275(e*:\321\t\210<jW\204\273\253D><a\036\251;\234\307\267\273ZAR\275,\232\261\273%\236\321;\277\010J\275J\007\233:\247\370\004=\341\256i=c\206\217<\226$\202=\025\2541=\214\251\254=\026\247\234\274\240\242\262;\306\252\216\274)\3235<\320\007\276<t\214\203<vB\214;\344\321\010\275\270\\\206\275DZK\274\007\220\344\274[N\222\274\217\2251=\207\263\374\274L\034\223=\231\366\240=Y\030\306<\326\274\277<\364\033\261<xo\033=;\375\211\275\325l\027<\244\336\240\272\246l\345<o\301\220=\237\201\207\272u\364\233\274<\341+\275\366\210\246\272\240n\324\2744\206\361;~\273\031\274\321@_\274p\222#\2759\266\267\273\340V\010==\035\026\275\003:\212=\345\232+\275\320\267d<\204<\002<\007\220\326\274\247\001\233\275TCB;\343(\005\272\223\004\026<\205\371U\2750\257\314<\251\305\213\274]\014q\274\025}\253=\3218y=0\371\034\275F\177\230\275|sp\275|\264\222=\233\024\207\275\306\310\000\275\2608\233<\321\037\303\273\20360\275\257iK=\0319_\274s\2532\275\313/\203\275\215\224\n<\302=R<\2408\366\274\336\034\n\275\254\013\204\274f\252 <\207\n|<\315\2570\275\207\034Z\275\333\315\321;\367X}\275\345`\212;\023T\372\275\206@\221<Z&\216\273\030\022e=W8e=f\356\342=7\210g=\344\315\343;f\311\030\275\223mo\274\311H\322\273b\305)\275\026}\267\275\212+\317\273\345\r#=\327\347\320\274i\337\332\274K\3541\274R)\344;\241\203\345<PX\001\275\233\311\013\275\214 \243\273\327\0210=/M}=\333\225\367<\270\312R\275\305O\210;P\336B\275\230\317\217\273y\035\257\2737\207\014\275p\316\366\275\325\344\202\273R\256\341<3K\030\275\265\212]=\263\205\262\275:z:=\335\226\000\2752H\001\275[\371w\275\325\332 =n\275K=\362qg=D\267K\275$\217\325\275!X7=\364\313\031\275.\222I=\\]%\274Y\002A=\"\006\272\275\035p?\275\227}P<\260\r\022\274\337\026\256\273\244O3=WL\330=\357\326a=\250DB=\226\222\361\274>\346\277<8\"\371\274\270N)\275\263N\235<{MY\275O\004r=\362\1773::\355\224\275\327\256~<\001\353z\275\373R\340<\025\246\265\274\336\360\005\275\345\300&\275n7\002;]\370\356;A%\345<\211w\237\275\'\273\342\272\234T\013\275\242\324z\275\217,&\275\377D\252=\205\327\260=\034\235\220=\206\263|=u\356\345<T|\372\274\205\354\022=\2118S\275,\212\016\275aE*=`\231\232\2750\201\204\274\340ZH\275\017\373\223=\013\261L\274\313\300\224=5\177\214;R\350\034=\203\354\204=K\017.\275\234\327\332\275vM\261\274\213\016:\275\242]\202\275\035:i\274h\264\322<\016D\251\275\"|#<\274\205\330\275\021\025\236\2751\303\376\273\263j\305:\323\246!=\354\346`\275\346\330#\274-j\230\274\027\024d<s\267\370<)\327\024\275\232\357\317\275L;\326<\374\365\327\275\014\267\030\275\023\234\256\274\361A\374<\2311\216<#\235\006<p\200?=\247 \027<\n\"(<\370\031\030\273|\247\330\274\303\037\314;\274\300\272\274L\246\030=r}\222=\032=\004\271\345\034#\275_v\005<\026\376M\275LV\026=in7=\'\261d=\376.I=v\374a\275\027\027Z;\276.S\275=\037\177\275\343\022\206=$\350J\275\356\265\006<a\226J<\315\372\007\275\031\273n=\323\014\\\275\356\266 \275\3061\351\274/lq\275\3140%<\203L\363\275;h\346\274\370%B=\300\261\252<\252\306\023=>Z\213\275\245\342\356<\215\364\373;\330.\223\273j\037\302\274n\246\023=\341\037a=\263\345j\273W5\215=\334$\222=\272b\356;\366\2776\275e\203Y=\326\001\000=\340\320\007\274\271\256\356\274\217\320\223;\267\005\230;8dc<\205\212\353=c\2766=\t\366\211=l\027}<=\023!=:\350\244\271\245\201x\275\3746\340\274\234\t\262\273\263oX\275\006s\243<\006\202\340\274\230\336\217\273\311d\223<\241\000\312\2745\310\333\273yV\226\275h\224^\275\267\272\001\275\261\304D=3]x\274}7x\275<\3549=\363\210\205=7\201\r\275=\352\004=lz\351<\236\352\225\274fTi<U\r\215\274\200\310J:\213\213\223\274\000\221+;\322\276\222=^\252\223\274\037\353`<\rK\003\276\020\322p\271\020\022\025\274\230\306(<\320:l\275\266\317\260\274\023\342\241\274_\331\005=`\370\000\276rD\214=\221-\363<\246\202\304\274\021\350j;@\010%=J\344u\275X\025\220\275\200\376\213\273\246\025\031<\037\277X=\220\330z:\003\024\221=oS\300\274\377\005\201<\344T\233<\224`\203\275l\363,=\345@\020=\365Cf=\2263\271\274\034\023\236\275\000\311\001\275\337*\010\275d.\217\275\031\256b=\254\002\235<\346&\240;@)?= g\372<\017\271\212<iW\226=\372\312\350\274@\327\211<\221\352%\275Dz8\274\223$C\275\264\023\204\275I\376\234<\346\010X\275x\247\214<\232E\275\274/\3370\274t\360=\275\304\235o\275R\344{;\023\335]=\364\272\204=\212i\326\274\n\206L\275\\\264\376\274\366w\271<D8\230=\001\327A=x\253\230\274t\333\2369\211\336\271<\206\001K\275\n`@\275\325\003\317\274\203\252\207\273\373P\021=\271\270Y\274\000\262\221\274\275\373\210:\213\201i<r\364(<a`\010=\356\274\347\274h\374\264=]\343\257\273q\312\030\276\275t\021=$\214\250;\215\004C\274\353\324\254\2749_\325=\347g\214;\234\r6=\327\270~\274\023\204m<\214\241\004=\230\324\007\275\276O\217\273\261\230o\275\307\n\'\274\310\220\256<\243n\356;L\322%=\177\034\210=\257\263\211\274\242\372\003:\234\017\237=\026\335 \275[R6=8\3303\275\356\260\215\274G\330\021\274\337rj=/-?\274\227\227F\274\235\355\324\274\233\341\225<\340\002\261\274NA\225<w\276\347<9[9<\t$\000\273nU\301<.9\\=\2722d;\230 \037\274\262\243\214:\234w\362\274\302z7\275\016]\322<\0356!\275d\363\304<\373p\260;ZH\336\274b\031\177\274c4\225<\016\373\353\272R\3130\274\253a\t\275\306\024\023=\330\224\333<\345\001==\217.\353=\030\003\231=\310\310\276\273\347\222\004>\313\212\217<Dy=\275yQ\342;\036\217\201\274\371\201\027\274\254Y\251\272\377\037\221\274\201\254\250=~\215B\275t\276\203<T\013\020\275q\347\323<1\273\212\274\226b\346\274M\030\001\2752@\332;A\245\272<\013\217]<Y!\243<\241\027\215\275\362L\033\275\231,\005\275\224\262\210\275b\022\327<\226d\270=\3525\377;\25301\275GeH<3&\244\274\\d\372<\3211\004=\036\254\365\274\216\010.\275)\274y\274\342n\232\274\201\"\230\275\325\230\311\275u\326\226\275\265\373\263\274+\274\032=\217H\234\2751\322\031<\300\231\324<;\3676\274 4\002\275\033w\316=#\223h\2758\3234\275j\'\260\273\377\005\240\275?u\230\274\340\261\331\274t0]=\277\350\360\274\233\321\370<\020Lq\274\266\316i=\253\341P=\"\\\276<\024\327\211\274\304\2268<_\277\336\271\213P\321;\345\014j\275W\267\017\275\326\226(;&\007\343\273t\036\324\274t\225\273\274M\033\033\275T]T\274\002\336b<\0343\307\274gBL\275\211\"\013\275(2$<0\031)\275&\326\246=\344M[\275\332]\220\275\244\275\341\274\374\260\264<\215\247X=}\332\033=\031\215%<No\371<\315k\224<[^\232\275C\023)\275u\276j\275N\322\"=}4)<\240M\246\27358\335<aJ\354:\332Bk9p\023^\274\313\007}<\263\027\007<\257A\275=\003\035\007\275\346s\360\274L,@=\276\003\263;:\2078<}8\025=\265\220\254<\372\277\246\275@8\315\274\212M0\275Vy\214=\324O\244\273^\334(\2742\313I\274:\221\307<\333\212J\274Jm\363<r\372\205\275#\310:\275\375\360\371<f7\345<c<\321<\020te\275\212J\203=x\215\271=E\010\003<4\306\354\273\241\'2\275\223\363\250=\013\362\254\274oh\201= \010\341;\252\271\202<s\025\245\275\232\253:=\3701n<\306pR\275\210K\247<\212\205\216\273vw\030\275h\235\353<ud\377<\255\201\232=\364\0203\275\305\025S<.w`\275 \206W=7a\360<\0105\214<A\217\352<\216\310\231<\024\270\025=\005\314t=\000\260\033<\322\353\240<!\360\205\274.\205\360;\306O*\274\224rT\274~\362\320\274\322\206\266\273\302\375^=x\034\220\275J\266\272\274\252p\204=\300q\331<@\r\013>\367\364\021=\233.\033\276p.^=\231\250\n=K\377\235\273[\037?\274\231\330\036;\243v\206=\346\207#\275>\320?;\020\305\217<\264>\020\274\350\221\207\275G~\251<\315I\242<S\253\224\275\340\325\345<\017\317\256<\027\343\217\274MJ\222\274\245\024\025\275s\300\235<\253\374\034\274\256\240\216\274\340Z\223;L\364\224<X\221\002\276\233:\230\273[\203\364\274\316q\213<\202\356\315=\213\256A<-\213B<\347\272H\274\337\222\005\275\230F@\275\007\033~<Eo*;}oI\273\314\327\330<\272/\312<s5\202=\266*\327\274\257\254\022\275\006\216\271\274\230\326\331\274\233\310\200\275~\253\004=\0011\276\275?\330I=\022\317\035<\332\372\243\275CZ\332<`\337\034\274\304\320W\275\006\204$=?\272\321<\257\231V<\266R\020\275\264\206\350\273*\tf\275Bo\033<\336\227\331\275u\213\220\275\377\231\377\274V\274\222\273\010}\256\275\t\304;\275\247\350\005=\324e\215\274R,i\274es\213=F\230\303<3\270\031=\242\223\323<\326\306\335\274^9\262=1n\031\275\322\222O\275z7\036\274\325#\226<\342\250\023\274\335\315\033=\265\375\371<#\265\230<m\316\235=\303\235U<]\310\260\275\266\006D\273{\372\343<\222}\310<\205.\354=\2476Q\275\355\360M=\264\264\306\274C&0=~\220\332\273\327\333\243\274\373\3257=c\301\264\275\343F\230\27326<=\034X\222;\226\323N\275\370\334 <\342$\306=\267\371\277\275&\273\206=\346\004\006=r&8\274\242\226\322<\251\206;=\351\257\312=o\366\356\274q\006\342\274\367\177\032=\222*p=A\231\312<\342\265\330\2741\022\310\274Z\251\252\274\024X\305<\272\316A\275#\347\307<Q[\210\275r\272&\275\307\324\013=2\351\013\275\301\236\211<\330&O=\323vV=E\217\202=\232\256 <\263\247\271;\264G~<\\\241\263\274\tpQ\274\311]V<\\S\035;\000\037e\274g\'`\275\304\241\210\2747\321\351\274\373\310\276<\350\231~=U\235\364\273\365]\265<\200\250\344<Q\363\243<\000\027W;S\255\016\275\2672\343<\000B\254=\207\263\305\275sS\276\273\211NO\273\272\364\355<\372\336\205=\210\\Q=e\213k<\317\212\027;Iyb=\332\r\304=.>\302<8\034\211\275\232\002\354;\027O\237<\211%\356\274\370\033\203\275\340v\354<\343\312\344<\242\"\203\275\240\007\322\274\021\222\263\274\277[\307<\343\310\240\274\342IO= \314\235\275\202\177\026\274\252}<\275\255\255N\275\332\266\005\275\367\035\234:\370I <\227^P\275\246x\254<\251o\020\275\027\327\020\2754\313\377\274\233z1\2751\220\365<\210B\335\274p\265d\273\206\"z\275\177W\333\272\\G\224\275\032\327\243\275\351\261\370\274\3158?\275\017q\202=\265\310\270\275\232\021\026\275\321@\177\275\305\237\025\273\314X\332;H[\336\274\340\277\304<=)\024=`Z&\275\032I\007=_2P\274/\214p<\311\034\003=\242\224\234<\216m\227\274\245U\030=B\277\004=\217\305\r=^9\345<?\013V\273\371 \313\274B\326\275\274\262\022\360\273\367}V<\025\001\037\275X\327\234<\262\225\260\2741J\013\275p\203\235\275\010#\275<\\_E=(r\377<CW\366\274%\353D=\207?t<\272\026\004\275\211\313\233\275*>\246\274\222F\275\274\327\004\020=l\341\025;D\037~=\006\262\243\275o&\210\275CR\216;\327\3073\274\264-)\275\277\022\310\274\347o\205\274\261TM\274\271\217\212\274`\206\245;\262\242\251\275\333\327\231\275\226\350\013\275\344\324\206\275\272\275\232;\340\n =\034\361c<R\330\322=k!\003\274\326]\223\274V&\302\273\273\370\257\274*\2504\275m-\255\271\034y\312\274\316\321\307\273\213\030b=\267.o\274\271b\017\275\033X\341\274v\017\013\275<i\262;\360C\\;\301L\005\275\240\266N=\316\177\220;\210\213\276\274\212EK=\265\355\3069\255)\244=\241\321\224<bvm<\353\200m=6\253>=MQ^=F4\206<k*\255=\343\235)\2731\005[<-\027:\275\261C\357=,T\231=\250\014\227=!y\307\274\266@T\275\253m\244;\346\267\t\275\224\032}\274\374\351d\275]\365e\275\365\207\310;iAh\272\210\230\255\275?\004\276<O\204\206=qvP=\203\004\255<\326$\025=Ge\225<\016\321\333\274\032\246\335;\010\366\000\275\014\332\t\275\017d\330\273\244\361M<>\353\245<a2R\275h\256\224\275\316\312E\275@\033F<\254\372\r=g\235\211=\332\267\222<\212\372\006=\316\261\244\2737\3668=\213P\253=\312\035]=\333Y\351<)\227\227=\230{\322<]\234\265<\261\031\203\274\034\325b\274\331\277\314<\006.\272;\032SX\275h\230B\275zd\221\275\376\331\t\275\237k5=u\331\244=,@\373\274\256\177\360\273\3077\361\274\023\022\322\274V\210\002\274\241\014\031=\243l <\266L\277;\364\331\267\274\303#\233<a\034\363<*#\214\275\373\000\370\273\373#\340<\321\234\022\275\340\352\264\274n$\003==\264\n=7\252\350\273\242\217\255\272\216\375\244<\024\010\204\275\033\211\270<G-\000\275l\025\341\274\331\017\355\275\324O\222\275Z\222\025\275\211d\202\274\242\377\\\275\\\035\001\276K\363\303\274#\351\030\275\360\025u\274AD\236\275\277\023\n\275\002\244\221<R\357B\274\357\214\233\273\353V\244=,\253\262\274\253(\241<1\231\334<c\254\227;=\021\227=]\2109\275\235%#\274\275K\233\275\t\240\204\274\201\010==4\322\204\274Q-\347<\374c\r\275\362e\270\274\373=j\275\366`\207\273a\020\244;V\361\036\274\347\360\313\275\200\024g=Gu\n=\372\3415\275\265\002\216\274\323\027\003=+\365\370\273\260\264\367\275)\350@<\334\347\316<K\346\325\275XGw\275\303\227\250\274\003\302B\274\324\324\313<$\366\335<6\235A=\266C\005=\310k\256\275\217\014(=Y\323\236\273\"\315\347<\347\316\n\274<\0269;\332a\007=\205G\224<\n\344y=Pw\212=1\230X=q\276\005=\2120\305\275l\225\301\272\200~\313\273\022\346.=i\216\031\274\013s\212<=\275\224\274\213\331\265\274\354\034(\275\264\3247\274-\335\253\274\222\207\270\2756\\\360<[\371\220\272;^\244;[\362\203\275an\316\274\315\036\333\275\'\240\226=O\0030<\330\010\263\273\224\240\301<a\205.\2746\315T\275\365\t0=\333(\226\275I^@=\217\3135=\230\002P=\230\243\264<\304\"\000=\232?\036<aJ\340<\304\326\200\275\342IO\275\257zG\272\223-\245<\243}(=\254\021\343<v\344\005\275\273\357j<\332\205!\274w\274\207\275\206\350v\274\270\265j=\362\330\022=Z\362K<\333\327\324<\305K9<\022\331-<\372\364\274<\277\362-\273\023\247\200=\375l\026=D\314\206\275z\tE=\216\261H\275\336G\355\275zn\177=s\265\315;\316v\247\272\371x\274<a7V=\035Y\207=\031f\247<\256}\031\273~\372\177\275\024\255\001=\357T\375={\034|=\206\303\303<gU\350;\274V$=\315\303\241\274\234}7=\372\314\335\274\020\357i\274\t\242\206=\215C\033=\014\342\216;\341\030b=\345^:<\312\211\022=\316\247\016\2739Z1<h\021\025\275&\201\013\274\256\000f=`0\212\275o\030\266<\"\377\021=\376O\231\275,\267U<\353\345\373\274\362bn=?\373\254\275+R\306\2731o\213=\222\003\037=\276\367\234=F\251\271\274\005`G;\201\246\232\275\244\213\037=\277\036)\274D\351L\275\332x\214<\030vG=\033\346\357\275s\327\036=\255E\026\275\317\336\216\274Rz\002\275\223\017o\275\232\321\001=\355\2150=\037\371W=3L\320\274\231\354W\274R\337\267<\244L\220=.>\206\275p\013\266=\234\266\006<\361\375\200=\023\201\t\275\335\312\251\274\2372\371\273\230i]\274fX\262\274\305;\371<\023?\352<\002u6;\252\271Y\275yg\341<kP{=\031\257\234\275\211\242\230=\343R\014;\014\302F=q\200\316=j\256M<\201\365\322<T*&\275z\277\022\275\032*@\275y\367\177<\212\354\037\2752\377\225\274ZV\032\275\307\027(;f\355\013\275/L\017\275V9\263;\252y\336\274\374\261)<<\271-\275\252\224\362\274\r\203\014=*;<\273\302\324\236<\277\264g\274\347\201\346;p]\263\273\256\362\206=\234\003o\275\326\265n\275L\235\004=5\261}\275\t\370\214\274\276\206\325\274>\016\277=\201L\355\272v\376$\274\357w\334<\nq\241<XE\231\274\301w\244=\002U9;Q\223j\275@\2230\275\005p\315\274 \030\023\275\352,\333<Z\271d=Z\203\263\273z\273y\275E\3064\275kNg\275=cE\275N\202C\275\271\370\357\2754\213$=\245GX=\317$\305=\224s\210\275,\004\016<\n\251\232=\033\377>=X\3318=bgu=\312\225\026\273\265\307\017\274\331\267\277;\217\303#;\3644W\274ci\365\275Un&\275`-\335<\214k\243\275\352\344\022\275\240!=<\364 2\275)\003\204<\216\354\345<\353\037H\275\262\271\243<\243`D\275j\337\273;\267\251.=\3466\264<\231\321\211\274\266\022\275<u\0229;\337\030\367<[P\200\275\305Q@=\335\233\037<\254\213\265\273\032\312p<\200\0343=\335\342v\275\242\006\246\274n\0204\275\270\322\333;\022\345\222\274\267\236\\\275\251\2010\275\221\256X\275\336\371@\275\245%\014\275\366\326\303<\2206\317;\204\252/\275\2758\366;#\355\220\275<7N\275-\337\256\275\004D\002\274\256\227~\274\231\243\024<\004 S\275\030,\255<[\002\255=\311\036@\274e;m=\337\302\216\274Fu\267\274\237\312\276\275b\352\230=\327\212\007\275z\361\317\275W\373R\275~A\315<\364M\353\274\014R\353\274\201\002~=r^\215\275\244\270\272;s\237\020\275\317H\225<\327z2:\342\222\232\275\261l\353<\310\002Z=\241*b\275\272\321\010<\010d#=2\201\276\273\267I\261=\315nQ=\226\343\202\275\346\2047=\305P9\275#\313\343\274\025\2449\275\211\030\020=\341\260k\274dP\212<o\234\\=aG\264<\202\007{<\365\310\225\274S;\230\274!\321\352<m\274\014\275\331\227{=\230\245\313=\264\334\000\275*:\273:EY\311\274\272\354m=\'|\017=\020?\034\274\202[\002;\216\016\200= \004N\275f\327\004=\034\273\024\2759\025\037\275\226sJ=Ot\225<i\216|=\203\257\004\275\234w\024\275\273\nQ<o{\017\275}\224\226\272\r\275\300\274\323u\201\275\000\264\377<e\361\'=]\201\022\274\241\2274\275\035T\334\274\0306\360<\260\277\313<0\376\032\274\374C\353\273\\\237%\275\t\006\240\274>kL\274\350,\026\275\251\275\335<\206\342\331=*%m<\321-I=\214F\204\275\003\t+:\374g\302\275\262\373I=&\367\227\275\026^_<\013s\177\271\005\020\270\275\223\243\307\273?R\006=\302S{=\265L\353<N\336\206\275\355\313p<L\022+=\026\250\'<\274z[\275\223C\365;\024\276\350\275\263\310\017\275]\305;\275w]\201<)\354\315\274\226\347\325\275\200Z\366\273?\016[\275q\356\202=h;(<p\357m\275J\336l=\255\223\306<Q]\306=\204\244\333<\014\271T<\222\3361=\270\024\022\275\327\242\253<\345C\"\275\375\206R\275\342m\306=\223\206\247\274\001\'\326\273\232g$=\315\263\'<\234\227\020<\350\031\362=4:K;0F\322<\305\322\204\274\220F\336:\354%j;vK$=*7S\2758\214H=b\366-=\t>t=\002\315\004\275v\347\333\273\240\303\327<\354\036\263=\360\331I=\304\324\207\275*\376S\275\'e\025\275\271\002J\274\210\345\327\274h\257}=4,,=\314\250^<\266\232g=lL\222\275-\332z<\377z9<\344\374~=\206\267\251=\321!%=0#5\275\007}5<\036\350\340\2751\036\216=\255i\206=\341O\272<\002X\021\275\273\251]\274\320}\264\275\234\235x==\375\006\275<\r\322\274RND=\274{E=\0257\227<+\243\320;H\220/=\371\301Q<\031.j<\003x\036\275\006P==\000\3376\275D\235\262<\317\377\020\275W\272\365<\372\016\231<R\221\355<\255\221\214=v\373\005\275\013fd\275 s\215\275\216_\270\273Ab\333\274\355\177\264<\031\311\017\276\344\241}\275\325\3108<f%\303<\010\230\351<\000\006\236\275\002\263\004\275i[\313\275\311_\036\275B\215\235\274\221.\001=\243\303q=\303\023\210<\237w\017\274\351\206\230\273\214&\003\274\361d7\273L\225G\2754\023P=\272\345\213<\375N\031\275\262\203\242<\233\311\262<\223\'\026\275\276h,\275\355\250\030<|\327\025=\267\253d<\223~\211<MlX=hx-=\224\263\031=\037\311\026\275\036\034\233\275a\310\312<\273\201\\=\244\255\252\274\226~\216\275>o\016\273\251\244\014=\306\032\327<\030b\272\273.n\262=\260\021\346<XaF=\316\355\222\274\200\020\004=?\244\255\275y\247)\275\355\253t\275\2575#\274\306\334\'\274&\302\312:V\264\274\275/\251\032\275\215o\250;\353\'\014\275-\255\300\273\337\270\300\274\301a\242\274\2306\355:\301\261*=C\225K=D \274\274\264^\341\274\035r==\253\331\217=}\257\005=\033\373{\274\313\256\355;\226\271t\275\213|\314<P\205\225\275\352\'\201\275[ZS\273\227\275\307<|J\355\274\0004\330\272!\021\272;W\333P\274\222:#\275j\021\212<b\227\201\275\030\034>\274\264}1=\362\206\023\2742\217\350<\266\242\321\2741z8=\253\237\200\274El\003=\360\2303\275\357Z\000\275/\005Q\275\330k\272;Ty\003==\256\234\275\206Y\027\272[5\303\274\210\246\035\274m\370\n\275\3662\032=R&^\274\354\034\365<\262\357\346:T\303W\275\376(\346\274\020\220\320\273\317*v=\310\352\314\274o5\314\274\220\315w=37\224<\243\333)\275\215\334R=\353!\232\274\331\213\022\275UgP=0\361\027<\320W\332<\211\200\274<\254\344\002=\367\r9<\232\201\007\274m_*\274\266\241\217\274\004I\r<\314\332o=so:\275\231w\032=\376\315H=\361u\033=?q*\275\026\363\004\274\322\361\277\274\016\353\302=\177{a\275v\357f\275\226Ex<\022\211\346<n\252~<\222\344$\273\366\355\212;\355i%\274b\235\243\275\004\260\216<\341^\201\275\007O\375<\207\3113=\333p\226\272;\260\250<\326\320;\275.\tD\275\362\242L\275\023\277P=\211J\037\275h\203\304\275r\303\361\274\200\352\214<\311!\320\274\326P\214=I\352H\274\003);\275\334,#\275\351\364\255\271\033W\250\273\303=M\275U\034\235\274\2303\360:\323\341\364\274\212\276\r=\247\334<;X\232\250\275\307\370\021\275\353\327\203<(\366\255\274\004\240\255<W\302\217\274\264$u=\366\234\244<O\223L=}\240\236\275\315\244\225\275f\037^=\356M\207=\262\274.\275\322\304\376;Mc@=\020\327_=e\374\302\274v\230?=(\3347=\267\367-=\014\202\251\272:E\254<2\274\364<\364\374\231<\2301\034\275\262\024\003\275\264\350\212\275\232\'\331<\376,\350<\006i^=O\031\265<\000Ra\274\227\305\206=\032\360A\275\267\270\247\274h!\333<\272\333\345<l|\301<\306\344\326\273\203\245\332<\253\343\001\275\325\373\267<\324\020\311;U0S\275\314G\355\272rAS\274\016\275\205=\354\275v\275\231<\311\273\317\250\375<J\310\210=\345p(=\227x1=\354\367v\275\302\245$=\020h\235=Xj\n=!\036\014>\325\320:\2757\023d=e\373\267\275\035\030\025\275\0178\004=\265bv\273?\3126<\321\252\206=a\220\253<~\2602\275\214\3521=7\027\236\274z^\022<\013G\222\275)4?<\370\244\013\276>@\277<\326%\361<\346]B<\277\\\'\275\276\256\201<\275n\247<\336\375\320\274\023\370\243<\216\264\264=\014\370\330;wU\025=0\014\260\275h\362\255\274\017\324\003\275\264\203V\275\301\031\372\274L\375\372\273\'\233j<\210\267!<\017\324\'\273\335\345\214<\030\352\255\272(\316\337\275\205K\310\274\207T\242=\254\215\342\273\345\215\375\275G\205\363<\364\234\266;\323v\026\275\233\0356<\370\370L\275\351v\030\275\036%\267\275\230y\313<\355\251G\274\212D\265\275\002\266C<\206\267A<\247\252\353;\366a\\=/\213v\274\027T7\273\370_$\275\240\372s\275c\272\250<=\246\227\274|H\375\274\260\034\322\273D\310\020\273\322\365\311<~\213\274\274\234\t\255\274\037\365\262\273\317M\256<Ig-\274\300K\225\275\246\033\305:\316\370\217\275\3071\320\274$\030\025<i\016\334<\302A\264\274-!t\274w\234=\274\370p\207<\257|\215\274\252^\342\273\370\243C<\020\235\033<\246m\210<\027\321\260\2746\036R\274\256\007\026\275\242\232J\275\275\314\332\274\030\274\t<qb\212;`\245\213;\002\024\307\273D\007\223;\201\362\343\275!\241\226<\360\352E\275s1\375\275\234\302\240=\263\250 \275$o2\275\245m\315\275Jr\023\275\261\211\266\274\217%\034=Uwo=m(a\275\356J\274\273\221HL\275$\246\224=\030}\032\275\334\006\353;,\212\361\2743~\342;\010LM\274$\032X\275\361\374$=\277y\356\274\245$9<\211EM\274\314\206-=\325v\001=\254\213\214\274\240o\005=*7\033\275bi\013=7(\035\275\330\300\327<\006\0370\275\202`j;\030\026\323\275\221_T=\301\335\322\274\314\371~=\311/\214\273\004]\010\275)?!\275\203@\016=\376\313l<3#Q\273\205\345\032:\036#\312\274\237A\342\275\027\265t\275\300\257P= 5\020<@*\250<\242\256\307\272\252\273#=\037\010\014\275\3542\377<.\016\r=\2465]\275\230\rC\274\223\241\272<\351\375\314\274\334\363\321<I\263\326\273<\026y=\277_C=\314\003[<J8e:\321J\243\270\317\014\025\275\266%\215\273\016|w<\353\031\217=~q\223<Q\236\032<M&\177<g\322\266<H;\337<yB\014=;Q <a\245,<\241\376/=\177\213\001<\204\003\262\274\375+<\275@X\274\274\267\215\275<\031T\036\275\316z\333\274\310\205\314\274\226+\027={\006-\275\036l\256\273\3634\223\274\216\247\350<\324\320\n\275\321\026<=&\302\026<\226\227\204<(\350\273<\326W\023=\322\340%\275\241\221Q=\0275\234\2757\244f<\302\344\221\273\301\222)=\303\225\025\276\217\017\355\274\211v\341\273\353<D:\017^\315\273\325\2211\275\274x>=\262\374\351<+b\030=\212}\213\274\375%)<Bjs\275\23265\275\335e\227=\200\244\374\274\370[\374\274-X\262<P\372\200\275\317 \001<\022\312\212=r\'\224<PW\330<\305M\316<\363\227\225=b9\207\275T\024\353\274\305_\264<\275\000\250:\020 \242\273Y\227\245=\214]\003\275d{\331\274\267Uu=\330\211\t=\330C\016\275P\355a=\005&\024=c\332\n=I\352\246;b8\201\274\020\216~\275!\017\215\274\257l\007\275%\203\231=,T\014\275\263]\344\274\213\333,\274\222K\345\273\270\363#=\003WO\271`=\037;4\234\255;\324\373\323\274\370)\025\275\342\013\206\275\250\240\007<\033\241;=U\000|\274\233La=>\335&=\033\245\004\275\241\036^=CP\201<I\241\361;d\222j<?x\332<\335\345\226;\232\231\321<\233\327\210\275\017\224a\2758\262\362=^&\202\275\352\263/\275\227\331\205\273\372~\267</H\304<^\243\n\276\207\221\033=\362\243\301\274]c)=)<\004\275\n\255\007\274\235\001\007\274k\313k\275v+\227\275n\374\202\274P\250\233<\022c-\274waY=\356O}=I+\026\275\337\311{\275\ny\260\275\271\t\273=W\277S=\026W\357;o\315\241<b\274\342<\030\326E\274\231\217\204=%\252\336\274f\350}<wU\247;\321\037\236=8r\200=\311.\214=\202\316_<\221\n\014\275\344\264u=\035\006\360<\264\252\023\275W\0354=\270\006n\275g\255i\275\252F\037\275\017\002q=\026\246\364<\335%\202\275\206\306\340\273\236/\211=-Q\255\274w\004\007=WlI=\375$R\275\316Z\303\274b\362[\275\260\234\240;\'\301\314<\206R\351<\350\0202<\270g>\275r\227\243<\211\327\252<\022\3603<u*\344\275\340\201\270\274\205J#\274\304\264t\275\016\031\235=\227\240\026=\342\304\000=*\343s=\222\022(<=\251\200=\362s\272\2747\271\204\273\014\035\007=O\016\336\272n\230v\275\017\315\246<\345\371\220=\3653\247<\366\277\001\274\324rB=|c\217\275\261\361\205=\336\210\216<\303z\301=\"X4<\"8\202\275dK$={y\330\273\026\226r\275(\302\227\274\360o{<\250:\313<\375\357b\275\320W\321=6c\204\275\274\030O=\000\036\225\275\345oD\275%\016\013\273\013}\321<3\324\344<m\325X\275L>\272\275\024\274\362;\374\240\307\274\372\'6\275\363=\302<cp\237<\213\335\251<\366=G\275\0364\t\275\220\356\004\275#t\'<\264q\n\275++\304=\261\241\003=\004\022\007\275\313\360\365<\337\342\257;\257\312t\275Z\342\323<d\371\373\274}\247%\274\333\3603:\3160+=\366y\272\275\257\302\272=\214\007\000\275`t~\272\033\310U\274Mv\237=\021\261\340;nN@\275\n\254\322\274\315\246\203<`\2335<=\003\032\275y\345\231\275\350J\257<\002M\323\273\275\346:\274\307vM\275\320\213\253\274+T\324\274\331\321e=\262E\371\274e\315\017=\217(+\275\030\266\n<\355\333\263\275\375\210\224;\031\350\232\275\255\0301<S\200\364\274G\255\006\275\211,\001\274R\303\300<M\n8=B`\206\275\233\346\002=\256:\230\274\364\371f=(\263\360\274\322g\303\275\203\355.=-\027\021<\245Ni\274\301\006\302=Y\370\221;<\360H=6\273q\275UUT\275\202\276\252\274a\256\037\275\3641v\275 \266\\\275\243\200\033<M\303f=\227\264s\274\035\321-=\213\202\324\274\363\232\310<Y\032\322<#d`\275\276\207\372<\025\024Q\272\273\301\306\275U\020u=r\373C\272&0?\273\334\341@\275\004\341{\275\322\275_\273\260@\257=*\365\253;G3\253=\341\237\"\275a\250\'\273n\255\374\273\033\200\236\275\224\243\223\274[\265\204\274iYB=\211\006\330\272\377\353\240=\205\217;<iF \272\265\352\316\275\246\262r\273\215C\304=]\204\003\274\272\207\267<t\231p=\026M\371<\231\033#\275~\351\024\275\356\366\214\275\025\014\220\275\273p\335;\360\rv\275tF\030=\216\317\016\274\010\301\331\274(\374\213\274\272z|\275n\251\004\274F4\254<\037=\207\275\010\360k\275\261\273\372\274\366\224o=!j\261\273\245Bn=C17=\202\314(\274[\005\240\274UK\257<y\212\004<\343\242\021\275\001\321\316<\334\213\306<\276\351\221\275\037\366\261=\307\307r\274[``\274u\363\246\274E\322/=\246\307\035=P\010\325;\010\025\005=\342\031\252\275Ax7<\354\031\215\275[ \r=\264\236\251\274\313\2156\275\363\211)=\350\307g=\316\267\200\275F\234\177<\351,\220\2748b\366\274\367;?\274\213\331\264=&\350\253\274\202\211@\274!x\270<Za\226\275\310C\274<\342\260r\273\240\2648\27482\317\273\362Sg\275\327\0027=\345?==dK\344<0J1\276\227\267\354<\234*e\27447U<@\215\227\274G\207\305<\371\005\261\274\276\245~<\313\331\025=]\364\002=\217r`=+\351\\\274\330<\365\274\314~o\274\345|\225=\367\025\376;\321\357)\275\252\243#=&l\223\273\273\276\302=\3252\251=\031\000d\275\032\223\016\275fU\266<n\007\316\274L\340\246<\366~J\275W\212\023=\307\301\277;\375a\'=\311/\005\276\'\334\233\275\210\025\347\274\254~\311=\006T\010=\0028Q\275\320\303L\275\340\3425\274\320\2233\275a_W\275\311l\262<\305\234\244\274\"~\204\274\023`\303\274qT\362<\237\031\031<G\217L\275\260\"n\274\223_\016=\2310\210\274)\264\211\273?\275&\275\375l#\274\336at\275\276%\224\275:\207\275<\322\360\312\275\313\305\236=\325\200\r\275\325\245\"\274\277-\211\273DL\231=\274\207A\275\0246{\275l\001=\274eA<\275\265\003=\274Dh\315<\244+\335\274.\207m=\014\314\216=o\010\000\275.\241\236<Wo\013\275q\336\355\272\324f\017<ezK\274{\263\254\275\027\340O\273\340\357\273\275\365F\375\274\212d\001\275]\014k\275+\027\304\274\024\365N\272Lv8=\237\2505=\t\225\001\275\244g\223<\030j\n\273\223b\250<1\016\311\272\202q\322<1\025\236=tr\014\274C\t\017=\224\327N;rC\365\274\n\300\010\275u\026&=\276=\004=\2146\204<u\254\026\275\306#/\275\\\245\261<.\216\201\274\211\003\335;\344\314$\274\316*6\274hz\253<\326\231\204=\"#\236<\353t\255=3VB\275\233\271\370\274\310\357{\272\017\020\370<\274\326\250:;W>\275>\262V\274\375\312L\275\035\341\250\275\215\027\201\273\030\247\270;\325W\027=\260\220\277=\021|I=\334*[=\251q\n\274\324\321^<\203U\211\273\217\335/\275B\256s=\023\004@\275\207pX=O*\021\274\326CY\274ZI\373<\371i =wT <\213\343\213=k\274\201=f\232\031\275[\217T\274\305\274\004=o\022\013\275^.\243\275,\000\016=>w4\275\016\034Z\275\352\275\270<S&\224<\351\220\013\274\257\373\263<u\\&<\327q^<\243\314\177\274\271\202\330\274\306|\035<\261\337#\276\tn\270<\035!+=\365\313g=\357(\036\275\034\3224\275\270\201\346<\3308\214=\371\2605=GD\346<\014\256i=\347\301\354\274zs0\275;F\216;\014\312\265\275\215D\177=\322\241\267;]T\017\275Y|\031=\366\264\235\274\264\251g\274d\3319=\205\035\237=\200\342\234\275\213d\022=\375|1\275\037\021\216\275\002\375\361\275\377\205\345<\233n\277\274x\226\004=\207[\206\274\33159\272\223\244\317\274\202\266\340\275\205>\200=b\004\243\274\247\031t\275>\022>=\225h6<\244u\225<`@{\275\010\010\361\274\214?\306=pi\373<\213d\346<$\013\027\275?\276\300\274\277b\334<\340[\r\274n\343\347;\'\360\237\275G\275\225=0\267\205=4\023\343<\215-\023=\343w/\275:\003\271\274\323\014R=\267\242\003;\370 \023=3\370\355<LJ\215\274\243\361>\275\177\330\014\275\261`S=\337\214\025<l\3648<\033;\303\274T2\003\274\276\351\240<\357\270\377<\210\020\223\274\210b\256\271\214\277\217\272\220X\026=bZ\323\274\237>\270<\007\374\221;0FU\275\004\337\017\275\037\221\306:\0240P\273\301*\023:=\r]<N\247\254<\327\242\"<\016M\263\272\037Y\232\274@B\255\275\214]\270<\357G\033<\236,\221=\'\235\250\273\221\0217<\000U\003\275D\374\244\275\230D\215\274\202\206\376;\340\316\321;\023\004\017=\220\010,\274+\r\027\275\036\035l<*D\315=\314)\301\2742\341\370<\014\016/\274\246!\360<\270\224\177\275\342\016\241;H\031\020=\373?\302=#\370\020\275\365d)=\233L\363;\2418\316<\324\323\300\273(T8\275\237p\007\276\254\324\367\273_\335\276\274\214\226s=\203\365Z=\343)/<Rq\222\275z\035I=\301\200y\274\330\375h\275\"\303\222;\342\006T\275PYH\274\255n\\\274\302e\006\274Bc4=p\216\007\2754;6\274L\016\037\275\255%\031\275\264\337\236=\023iL\275\303S\230\273{U\006;\217\376m=\3359\355\275\3570\247\274\322vd\273\300\010;<\211\001\010\274\330\210\036\274\331\270C=6@\225\275\351\336\272\274\035\3669<\000\222\330\273\007;\016\275\2726\222\275\335\300\213\271\177\001\303\275\346\250\242<\232$(\274HN\215<\215T\315<\304wJ=!\270\211\272\014wg\275\357\202\013<\030^\336<\263@h=&PH=\334\030\035\2741\272B\275\371\343N\275\363\335%=b\261\325\272\230\252C\275\235\020\321<\220\346\271<\304\341$<\242\321y\275\271S\310<\352\002\356<\360I\226<\371\024\223\274\322F\303\274\245\245\233\275\372)f\274\257\030\306\273\307~\t<4\341\263<\3460,=1xc<\314\027e<\213l)=\352_6=q\005\241\273z\022\264=j<\030\275\036\272F<\210_\004<_*^\275lO\372\274:C\251<\016J\234\275\314\340\230;\037R\237\274r\251\331\272\335\300\001\276O\255\264=\213\3551=K\325\220<\016\347\272\272\302\266\306<\267\271\205\274\320Sc=l\314\023<2\357\005<_CB;A\3621=\356q*<\303\270Q=\360\344\221<\021,\000\274HVa\275\241\025`;\030\265l=L\337\233\274{Y\354<\216\t\275\275\313\326$<\314\232\216\275\350TM=\210\201\261<\256\007+<X\230\313<\310\240)\275@*\001;Z\231\021\275\333x\351\274\317\215\340<\230\375\243=6\016\274\273n\321\307\2735\350\313\273)\3068=v\271\247=\007~\354\274\310@\030\274\261\020\215<\207\376%<y?\216=\231\307M\275\\FD=\002x\031=\337\215\334=\262Y\246<\213\372@\275\247\255\033\274\r\032\227\275m\003<<`\034\205\274(\344\025<\332LR=5\003\313\272\224\245F\275\244M\201\275\243\335\"\275b\007\3109\216\301W\275\032r\343\272\226B/\274J{~<\222;O<DL\316\275\265{P\275z\266Y\274X\210\231=\027&.=\262\264\222\274\216\262\206\275\315\330~\275\t\315\253<\035o\210<\354NC=yB\316;M9\327;\340\230\352\274e\003\373\274\231Yj=6\017\244<\332g\274\274\350d\221:\262ZI\275\037hq<\341\237\223\273\337\2326\275\255G6\274~\355\200=\261\223A\275\370\302\256\274:\252M\273f\246\017\2750\"B<\251X\225\274\006\021\257\274\315\316:<\240<\250\273\274\313[=\021]\213\274A\347\254\273\037\332\227\274f\260\206=O\327@=\323\323!=\221n\334\274\341-v\275\311\272\222\274\014\365\204<\270\0024=\313]y\273B\207M\275p@\250\274\177\225m\275\330\325\225\273\021o\234=L\271\275\273\320~\366<\231\242H<H\313\005;(\325\342<Y\326\346\274H\005\212\274\342o\035=\254z\222=\230cr\275#Z\237=\331\037\240\273\355(\337<c7\030\275\222 ]\275\016\231\226<\036G\206;z\365\000\274K@3\275\020#\266;,\353\222\275\232V\211\275\307\201W<\023\323\226<\244\304t\274\271\206^\275i\245o\274a[J=g\2529;\266-\236\273\007\315\271:\371x\340\274W\253@\274z\031G;\252u\247<\0035\003\274`\251\330;X\007\025=\273PT\274\234i\261\274V\274.\274\367-\303<\205y\266\274\314\211\216\275+\340\254=\0334\013\275\345\231\004\275\266\032\202\275\202\250\222\275\354\270\243=\001\013A=eym=\312\220\n\2757M\202\274\334\025G=\006\327x\274\372\001\033\275_{:=*\267\362\273\360\036\342\275&$`\275@\227\205\275I\232\207\273\254P\270\275\264T?<\371\230\037\275\237JF<r\367\200\274T5U\274\244\325\203=\\\260\224=\213\032\002\2752_\216=7S\221;!\310\322\275\321\3271\275\0068\261=)\222\211\274%-\335;\200\322v\274\003h\214\275\304^\312\274\262\345\202=\220\003A=`P\327<\211c9\274*\326H\274\037\213 \274\240\2106\275bUO\275.G/=8\307\357\274\211\351\007=g\364N<\241R\377;\336\341\251\275\333\366\275\274\252\006b\271n\346\r\275@\006&\273\250\313\014=\352]<\275\271\020]=\354O\270\273K&I;<\240&\275@`R\274Z\202+=\265\027d<<\rV\273$\337\263<A\314\220<a\247>\274\035\320H\275\t\220\306;^\\\263\273\227\r\227=j\263\265\2746\014\036=\0038\212\274\t\337\235\275|\303\007\275\304N\371\274y\326f\274i\336\302\275\217\342\251\274\033\203\004<\247,\242:2<3<wd\017<_\260`\275 g@\275\354q\214<\2456\205=0\231\364<X\357\024=cI\251\275\233\341L\275\003\035n<\251v\025=\212\307\226<b\253\211=\225#-\275~m\313=c\0358=\014gN\275\373,7=\325\026 \274\262\263\035\274(_O=\376\302%<\275{\275=\031z\315\273\026t\232=\366N\014\275p\374J={\302\301\273\020\221N=dt\311:\361yC\275M\230\005<j\350\276=\355\222 \275\376\264\021\275.?\020;,\234f=\226\\4\275-\302:=\256\242B;\035X\272<.\234\237\275=\231E\275X\'\227=\216\356L=\243\031&\275\367`\342<\373j9\274\331C%=hs\r=\247d\\\275A$\345\274\342\365\036=\002\252}\274u\317\n;\310\346(=\276\232}\275\255&\032=\300\014\351\274\275\253\031\275\302\324\252<_l\231=\267\225\200<:\330\030=\002\265\223\275\262\266\\<\357\2214\275\2632\336;\200\017\223<v\232N=\377\374&=\335U\205\275N:\302\274\356\356\220=\\\230\336\274\337\264 \275\354\366<\275B.\357\274\237S\270<4K{= \014$<&\217\257=\025A\207;\007\\d=\320\021&=z\352b\275\010p\\<M++=\025\200`;\0245\207\275\301\340o=?\360\217\275\260:H<\0215\322\274Z\3070\275,\t\275=\315ds=LWH\275~\323\014<~(\036\273\276\346\271<G\230\233\274\233\257\217<q\\*=\370\272\202\275R\3075\275\247\342\205=\017\237\255\274,\326\030=\217\371\214<\221\334\315;\210p\200;I\373\233<+43\274\335\033\202=\300\2766\274jG\254<\014\266\243<\263\035\2139\001\227\203\274w\220[=0#\252\274\321I\210=WoA\275}\326\361\275\336\320\211\274\364\350\237\275\354\237\365;\322\340S<\302\245\177\275\3362<\275\'\352\r\275\373Y?=~\245X=\007;\035=\255\361&\275\177\316\367\274z\206]=\213\014\200\274\223\337\203\275G\370.\275\353>\256=+P8=\276y(\275\247G\007=\226]A\275\234J\243=Nn\222\274.\362H\274\246\0223\275\272v\217=\023\366\023\275\357\365\177\275\225k!<Z\n\310<\241<c\275/g\324\274\'\234G\274\366\253\036=\223\257\230<c\313>=\020=.=\2466\306\273\336h\335;\337\313\217<\361\030\214\275\207\253\346<Op\r\275\270`T\2747\275M\274\005f9\275C\'h\273\035\034\'=\005Qk<\266\340\271;\241\202\222=\306\217\002=\373\003\333<\363\256!=\307Md=\364\356\335;\0326\274<\214vP\275\021\225E=\203\256X\275\303Z\020\275\346c\020=\227>\242\275\360\013\263<\316\344\345<^\346\025\274\2257\023<K\213\241\274\223\236\234\274wR\210\275\202-2\273\345\200a\274\006 \214=\271\375z<}\223\021\275\377\270e\275 \237\203\275\360\352\262\275\367\311\002=\365\331\213\274\227C\226=\323k\213\275y\324\000=\211\266\374=\236]$\275\021\025\224\275\326\037\005\275MhN=\330\312;\275P\005$=F$}\275\202zU\275\373oc\275\323\241\207;\362\250\005\275\236\211\004=P\017Q\275T\026q=\367\024{\274\216\016t\275\205\003\314\274\341\351\022\272\010#\231<r\246\350\274\223\327\263<\202\220\354<d\037\251;\002\313\026<\000\017\233\275\034R\221<Gj\314=rZu;\263n?;\020\221\212\272\2213\313\275D\370\354;wx\233=s\223\254\275=3E\275\241\343]=\311\203H<\006\036\017\273\370\273\325\272N\236\023=zzx\275I\230l\275E\023>\274\255Z\016=\207c5\275yvp\274\314?\352;\254\305\210\274\207\250!<0\223M\275)tB\275\002`%=\203Q\234<x\250\351\274\367\223\276\275\014~\201\275\327\0241\275\345\326m\275\262\030\225<S\211\3018\317e\306\274[\320.<u\032\3509\263:2\2745\223a=\303\210\245=\343\211\256\274>k\360=y\206\010\275T\0178=\223u==\022\333$=\242\005\245=\276\213\232<\350\"U\275_\336\230=\022\023l\275\017=\017=\371\317z\274\361a_\275_.&=M\254\007\275\302\262\363<\361\272:\275\017l\200\274l3\227=\361\353U\275BT\223<Mx\326\275\237\'\373\273\004:\270=\255\342\207\275\302*\250<\266\220\032=#Y\371<I\331G\275\333\203\256\2752\316H<VW2;\277!n\275-=\272\273\201\026\177\275=<\021\275\310\010\216<\034\006\257:\225.\233=z\316\215:\037\006o<Q\255s<]\301\031\275i\302\327<\324\247\321\274\013\212J=V\230\366<\247\206\346<\034\254{\274\253\251\214\274\256\210\013<5r\236\275\362Ug=\r\327\314=\331%b<\340Y\352<\257+\210=\014j\033=3\362S\275\240\300$=\311k\313\275\354Ao\274l\212\356<\243\023\212<\025W\212=\024\t?=nr\272<m\327\204<\262\n\264<\244l\030\275\006\010\321<\322\264\306\273\313\0251\275\n-\213=\260\242\230\273\\,\231<\345\203\3409\227\324b:\030\341<\275\005_\347\274\320\325\312\273#{Q=\331E\357<[\"\263\274\267I\215\275\2103g\274*Z\232=#NZ=\321\001j<\222o\267\275/z-\275\360\375O=\347\020#\273\257\206\301\274R\255A<\376\025\214\275;\3252=\334\'&=\342\211\007=I\002\221\275\370i\342\274I\177\024=\257_\210\275|\272\347<\035\227g\275\037H\203=\236-\257=\227l\271\275z\207\274=\266\250f=D\327\362\273\364\217\265\275\3754\017=\256\237\234=\240c~<\311\327\030;\rv\212\275\032\203\356\275\236\313\233\274@f\035;|#\030\275\236\037,=V\024&=\222q6<\242CC\275R\357+\274\306\350\245;\335\234\273\274\333\311\347<\177\331\n\275r\307\240=\204\234F\274\344\337\227;\227\225\274\275\252\317\206<p3Z=\252\204\223<Q\332\250<\341dm<\026R\225\2755F\216\275\273\025\037\274\303p\243\273\317\236\007\275_\260\027\275\032\357_\273|\367 <\332\341\226<T\216\313\274\\\367\330\275\022T\337\274\357\311\313<(\313\"=\300\004 =E\001\242<\367+0<>\226\207\275\344\257\320\275\022\364\340<\003\322\323<\301i\027=\237X\326=t\200H\275\245\023\343<k\3268\275\353\256\204\274\213\016\204=\263\010\002\276\177\246\211<\316Gf<L\201\216<w\232\263<\267\266\325=\357\366\272<35\351\274(\337\022\275\271\232\001=\225cI\274\206\367\005\274\366\312\014=\006G\354\274\356\345z\274sB\340\273\231\024F\274#m\202\275\262\277P\275\337O;<\304\364\n\274Y\304\342<]\211\272=,3\341\275N\227\255\274l\220\346\273\242\315\227=\312~\277\274\244!\235\274\351\200\r=\255/\244\275f\211\021\274\035\357\217\275\255\337\242\272\360&\006=y\321\231<\255j\247\2748H\362\274l\206\024=_|\007\274H!\330<p\273\341\273E4\333\273F}\221\275Z\024\337<\334\364\213=\263\010<=\025o\342\273)\276\332;p^\323\273<\037\210<\227d\370\274#u\001\275\032\020i<\335\274\220\275\275\200*<\217\377M=\276\366A<\3558\375:\256ME=\346/\013\275)h&\275\025\307r<1Z\350;\373\005\265\274\230\007\310\274\2601 =4\277?;\336\202\016=\022\016\374\274$\360\211\275?x;=\026\000\305\274\013\251\016\275\206\230\240=\224v\224<x\035\233\273\223w\371\275q\'\033\275b\346\356\274\362W\034\275\342\332\316\275\372A\223=|\004\241\275<\253D<\260\211\205;G\177\304<\243z\035\275A\367\261\275\255ft\274\355\005\022\275\342\031v\274\314?\234\2740\353A=\325\236\224\274R\325n\274\2522\'\275\035X\345<.A\222\273\231\332\002=\326\005.<,\212\213=8\271D\275\306\334z<\347U\370\274\227\010\217\274\323\211-=\263\254\274<~\320g<x}\347=\271\345K\275\332yh<\330\360\005\274\344\034\214=\216\235c\275\317O\020<\214\310{\273\030\231\320\272\214\210\003=35m=4\013.=\340\303><?\310X\275\364\375\233=\365\243\373\274&\374\231\275\302\312\356\274)\207\235<\217l\200\275j\304\017=\004\034_\274\033Pu<\230\006\226=\344b\365\273\3678\311<\203z\025\275\231{\3539\241\240<\275-\354:\275\331\034{\2753#R\274\213\025\321<\324M\216\275\240\261\217;\234\253\232\274\352\205\242\272.\305\246;\353\242\264<\360*\255=.\343}\274\033\277\332;RH\223<\362\2269=\307\014\'\274+\217\023=I\347\207\275O\360\325<\2721\005<\223\207U=[O\234\275\036\247y=\335lp=\013C\214=w\221\362\274%IQ=\340\036\321\275\033\366[\274S:\271\273\346\250\'\275v\375&\275\027\202\357\273\351.=\275\315\261*\2746\342\023:C%\004=^;\027=\231 d=\2101:\275\343\245<\275\245b\022\273\333\300\242<\300\006\334\275L\366\027=\304\350\030\274F\360\002;\276\036\002\275bh\225;\3567a\275\350#\314:\313\303<\275\210r\251<\241^\302<\264\376/\275\247w\224=\227h0=\'\2016\274\206\262\017\275\205t~\275[\207}<\220\354\213<.\230S\275\370\342/=\316\006\032\273X#\'\275\267\"v=\254\240\251=\223\336\257\2754\220\256;\365\356\002\275\270\0373=;\202\022\274\025\206\232=\214L\275\275\361I\200<p\355B\274J\240O\275\033\266X=\243\256\301\274a\024\316<gr\026=\237\305\270</5\351\273o\037p\275g\240B<\000\3021\274\245\014\t<D[\214\275z\224\350<\373\2200=\3673\335<\260\\e=\303\253]<z\256\224<m\211\231\274i}\233\2756$\311\274\342T\303\274\350\353-\275\212\260\003>\036\221w\274#\346a=C)*=s\201\252\274\253l\275\274\264\310^\274Y\214g\275\000\220\244\274m\312\234=T.\306\274-\2100<\326\r\345\273^\323\265<\352\370J\275\220\351\307<\276\005!<\212L\220=\200\360 <\323Xq<\253\020T=\222\\t\275\333RY\275\0014<\275\246\032F\275\265L\214:\216L\024\275]\263\301<\307\005\364\274\245|\010=\260\250\217=G\027D<wt\225\274\273\226\020<u\333\213=\3308\236;\363\377\245\274*\214\220=E\035\001=\205>\330<\005\277\277\275l\022\252\273!=\214=zq\2739\200\266\017\274\023\274\261<\320\241\251=n+\205=\004\324\236\275V\263\270\2748\006/=\357\256\245\2740DG=\027\267j\273\3744\307=}\366\201\272\000!T\275M-)=\020G;\275\2268\027=\226\241\347\272N\347\240\275\213\225\226<\247\360\262<\030\303J\275.i\207=\0365\372<3@\003\275\344I\'\275\376\303\033=x\3762\274S\316\036<\260\311Q\274`\302U=\220\262\352<\351\225t\275\374\304z\273\327G\351<\224\272\275\274\207\034\035\2755\367\020<\202.\367\274y\003}=\357\364Y\273P\354\020=(A\225<\277\"\221=BO\223\273h\322i\274\266vz\275\242\2528<\\\334X=K\333\177\274)\306\350<\354Tx\275Q\306\346;\257{?\275S\333y\274VU\302<O\337\244\275_\017\272\267\353\326\301\274\260\207\230\274N\306F=S!\201\274\031\244#=\007\366\331\275N\256\277<\035|\211;\030\365;=\"_C\274\327\307>\274kb\201=l\352\352\274G\311\004\275t\2519\275\0031\312=\364\027!\275Iu^=Bf\027\275\307\262\024<W\270w<a\362\251\275)l\326\273^\324\301<I\363j=\304\201\351\272qZ]\274\266\374\032\275\030S9=@*\211\273\020cm\272:Q\346<b\346\n<\256u\030\275N}\234\275/|\211\274cI\t=\220\357\337=4N\002\274E\260\242\274_v\005=0\342Y\274W7\217=B:\025=\0230\004=\360\210F=\036\250\242<\371W\376\273\200i\215\274\343p\246<V\272\300\273\253\365k;m\350\306<\030s*=\365%\360\275\005\020\275:w\323\207<\014\025\202<3J@;OS\203<\035H\207\274\331D+<x\206\377\274\303 F<\206\324@\2756\231\301\272n#0\275\313\355\'\275\370*\232<\013\352\021=J\375\217\275\037\226o=\334y\342\274\3207b\274\266xf\275\204^\236<4Cy\274\253\247e\275\314\342p\275:\3125\274\215be=v\217\361==\031\376<\004&\036=\321\010F=\301\357\034=1\177\235\274\223C\r=\032\265\273<\337\322%\275\234$.\275m>s\274\343/\223\274\030O\006>e\t\344\274j\354\263=\032E\267=g\345\211:\262L\271\275\0039\316\274Q2 =\353\232\222\2753\333\202\275\366\002\274\274\033\207\025\275t\031\233;%\207\200;\035\227B=\336\022\023<\233\354\003=\336V\t;\214\302@\275\3714><\244\225<\274\314\323B=\212i\220=\357^\014<c\235\022\272\312\323\373\273\205\000\201\275o\266a\275\256g\007\275\221\031]\275\212W7\275\270\255_\275Z`\315<l\206\361\275\346O\216\275\374\215\364<\313Bv<K\200h\274\365|\t\275\234\231\025\274\212\241\247<\321\000\r\275}c\246<\251f\251\272\234\002\027=C\304(\274\351\026o<a\027\274<\326\227.<p\306c\274\204\355j<\021\017\263\275\034UR;N\255\310\271\261\330K=\305\274\234=\327\210&\275\006\255\364;\026\301+=t\2509<\002u\224<\231Gt\274W\321\345<\005\237\225<$\234C\274\247[@\2740;\246\274\243L\224<x\002\346\275;D\035\275\033\274[=\212a\232\274\226w&=2.\264\275\245Vw\274\354\322<\275\371\335\236=[\355-\274\307\366\324\274\002\347\373;\312O\017\275\016Uk=\225z\213=\024\335\315<>\360\330\274\237$Y\275\002c\023=\351\200\027\275C\345\270\275\263LK<\303\344\342\274\376v^<Et\010\275[\267\274<A\337\221=\373\271\224=\312\257W<\272E:=\247\0042=\357\264\204=\266i\370\274\322o\265;\276\273x<\036*5\274\035\022\273\274*>\356<\352\215\254<\325Nl\274\231\331n\275c\204\002=\312\361B=<\363\231\274\310c&<\261\253=\275\242\314\017=\010\227\326\2747YI<\031\334\374<\330x\335\273\361C\217=H\003S\274\2653\253\273Z\267\016=\371\365\210<\322P\023<G\312\374<\\{\0279\304\376\207=\315&\375<\231 \232:\262\211\'\275\273\017:\274\3577~<-\310\220<\374q\365=\332f\205\275\340\317Q=\305\307^=\220xq\275)\003\200=\331\334:\274.qZ\275aSA<B\252\207\274Hx\013=\177\353\233=\211Wn\274~/\"\275\032.B\274\330\333\020\274o\355%:&\361M\273\304\334\t<\"\037\263=\344|C\274k6@=W\373\033<\276=\014\275\222\321\246<\t\023\320<\010U\376<b\212\r\276\312\212\306=$%\200=/\022D=\r\310\177\274\353\325\372;\325s\022<3($\275$c\305=\023\204\214=\234\237\200=\355\260\261\274\353\261\023=K\262\n=\270K\364\273\226Kz;\t\262\263<)5\310;\253\032\247<\234\007\007=\226\350 \275pJ\033\275\334\267\235<\253\262\217\273\001g\307\274xz\310<^\273\'=\306\245\375\274\026G\334\274p\241\313=\273\234\231;\230\235\247<\300\230\245<\361\365\304\274[\310v\274\026\372~\272N\001\251\275\325Y\006<\210\311-=@k\272\2759\205&=\023,\345\2742h\232\272\262\332\345\274W\317\226=T,|\273Y\211\324<\004\274\204=\354\203\266\273\356\260;\2756\007\035\275z\232\323\274\253im<\352\305^\275~\220|\273\"\223\203\275r\255_=\352UW\275\274\027z;Xy=\275.\244V\275C\026\245\273\351e\026=\t\355\014=\370\261Q=\300\215\005\275\323\203\027\274\215\342\216;%\322\332<\214\226\004\275\336\272t9\224\216\305\275=j9=\032.\301\274\257\211\345<~3t<\370V_\275R\341M=\002\341\356<e\212\253\274Cj\307\274Y\325\205\272\312k\352<\225!\313\273$\330I\274Wm\006<\320\277\341<\247m\213<\036\t?=\210\346\263\272\336\373\026\275K\252\357<\343\345\215\273x\3638=\377\027\355\274\333\355\306\275`d_\273a\003\243<\374\010+<n\030\327\272y\275\264;G\377\264\275&\362><\224\216\373\273\255G:<\031\215\237\274\244:V\275\213\314;\274\301]\262\274\210v2\275\'X\344<p\2068\275\304G\321<\300\265\031\275.D,\275\201C\324\272\240B\310<\364\\\220;^\017I\275N\224\332\274\245\333\327\274J\251i<\255\257W\274\003\266\\\274$3\242<\272\222\236\2751m\316\273s:\025=\345\2427=\321\211)<\261\335:=\250</=9\251\367\274\224\0205\274\340\004\214<o\201\202\275\003\354T=o\034\021\274\306\342\300\274M\t\336<I]\334\273\346\326\216<?\270\316\274\027\204\307\275 !U\274\177\010@=\307A\343\273\347\337\243=\301\334\202=\370S6\275&\372\302\274\355\257w;\373-6=\346\252W=\235\031\023\275\010z$\275%\300\035=|M\252\275\"\357o<\240\264}=\275~4=\251vp<[\266\261\274\330m\342\274T\344m:\r\221Z<:&g=\270\272\364\274\227\210\357\274\001\207^=t[!\274\034<\035<O|\002\274\022:><vr\034=\023\315L\275\300\236\314=.\207)\274\2736\326<\302\030n\275\341\033F=\333\362\204;\371\247\035</2\260<4\355}<\261|\322=\363g\376\2741\230`\274\267\315\377\274r\222\034\274\306 \246<\2115e<.\260+=\033\305\320\274\031\276\313\274\354\344d=\023\267\303:\2124\204\275\277>\340\275\366\254\301;\267\031\'<PC4=\264\010\t\275f\260e<\333\367$\2756\205\273\275R\264\\=\316aJ=\022\354==\337\344\316:\247\224\275=\022U\277<$\315,\275~fh=\274\264#=\346\256Y\275\367w\336<$]\236\275$u\224\275\024\204\317<\033\315\256\275\202fJ\275\221\'\007\275\3035L\275\002\016o\275\376\033\036=\356\306/=\t\347\367\274lG\363\274\037\204/\275\325\210!=X\372\206=\323\006\037=]\211$=\033\352<=vc\003\274\313Kw<\332\271\003>`\027;\275\027\265\263=f;\223\273=\005\237\2740\331\243\273L\373V\275\332Gl\274\310\216\267\273\371d\223=0\245f\275\025\210i;\354\341\302\274\331\210\201=\222\204\253</O\027=(\326V\275\276@\274=a\017\236<\261\026\001=&\214i\274\215\005\203<\242\273\017<\260V\273<\236?\320\274\341Ew=\027\324\034=\271\376\225<ODG=\330\237O\273[\302\307=u\332\225\275$\236\021\273}\t\201;\254\364\350\273\304\030\302\274\006\364,<\303@X=U\202\304=p\316u\274yS\030=cXP\275\311\212*\275\3468\203\275\006yD=8tL=\346\371\020\275\217\235\010>oO\013\2756\363\213\274f\377,\275\233\237\363<\022\246\355=I\323^\275\310H\005\275H\366\372<\211#\236=\270v\316\274\343\255\367\274F\013b<\313\033=<y0V=\244\306\000;fg\273\274\306\370\364<Kwm=\032%\025\275\272\354l<W$\267\275\224\030\223=\214kc\274m\266\304<\244\234w<\244%\\\274\037\3102\272(\263\023\274\205\023\200\274\2271\225;\255.7=-\357\352\275\340\232:<\250t\010=\302\302\227\274\236\367\366\274\2640\n=\344\243\223=x\2523=8\211\022<\307\372\263=\202GL\274\0207\250=l\367v<\326\367\212\275\277s\244\273\032\370\354\274\266f\200=\331\225@\275\224\227\261\274\274\034\261\274D`\022\275Y\244\210<,0\351\274\037\025b=\000\r\026\2755\347h=\357\026\316=\221\234\306;\333\321\036\275\324\r\007\275\377i\224;\331\345\035=oq)=-b\241\274\363\322\035<M\3247=\371\234\304\2746\325\302\275\220\366\243\275\301jC\273\307\334+=3jc=0\321s=\327\246\316\273*\217V<\302\244\213=\320\264\020\274\331\335A<\372Z\\\275\346s\232=\025Q\232\274\237\216\323\274d\300\276<mg\225\275l\270\244\275k-\203\275<\361\021=s\205\224=\357\362\213\2753\003G\274\020\333\312\274\211\320\250=\204\017l\272\310\024\223\274\367\341\036\274\355\344\315\274\243m\235<y\342\344\274~\371\213=\017\247\207=ys#\275\214lH\275\024\235\341<O\201><\302\243U\274\351\027,\275h\240\212\275\"i\230=ZlA\274\344g\362\273\250\365\211\275\025\365\210=\306\215Y\275\212~T=\023l\007<^\324i\275\026\340\327<\037\202\206\275U\310\204\275\307\203 =a\023\352\274\242\0042\273\334\236\225\274?\\\333=$(\206\2758g*=\0048\272\275 \014x\275\037!\t<>E)=\262\223\036\275\355\254\220<\213\360\t\275\226\331\272\273\340\215\027\275\216\035\002\274\303\037\336<x\000F\274/.\037=^\330\356<\202\274i\274\036\221\301\274\317\212\026=\201(\001=|\036\034\275\364k\312\274\325)l=.%\226<\210\227\007=\005yO\273\277\025\267;\2433\000\273\204\337\216\274Y+o<\305\354<\275\323\232\250=\274\310P=\270zm\275*\321\n=e\206\206\274O\300\312;7\265\274;\226\365 <\302\346\301=d\335\234<]8\032=\352\036\325\274\376\204h;\316\222C<!\002-\275\365\036i\274\342Q\000\273\003\313q=\216{\026\273M\237\207\275!\025\033=\245\211\332=Re\241<IF\022=\2457k=\341\302\240={u\240\275\367>\025=\345\240\037=6\247\246<\230\021-=\211\0205;\235\305L=F~\030=\214x\327\274\000\364\206=\366\255\252\275\273\215\207\2755L\320<ok\304<+sM\275\324\3740\274\250\274\202<\355A.=\036S?<\337\323.=L\242r=\",h\273%\250\231\275\302\274\341;J\217\017<\306\376\323<\200\303s=x\366\033\275\\\013l\275\275\315\013\275\352\333%=\234\327\262\274\202b)<j_\214<\306\211\001\274\334\245\030\274\321`\204\272\252\\\335<\026\251/=\272LX\274\362\034\205\274\320L\360<u\371H=\365\317\364\274\323f6;yq\313\2751\352\226\273\203\305\240;\320\304u\275.\231\301\273$MS\274!\025\235\275u\333\000>\'\274\032;\214\201\034;\324\257\033\274\2614\';\353\306\241<\302F\n;\'\333x\274\223W)\275_E\306;<\2741;&\304\322\274\372\233Z<(%X\274\034\255\t=\343\307\002\275R\314\236\274\253\345\215\2758\246\325<\247\374\303\275\207u\315\274\276\261\360\274R\302\275\274\264\036x=\236+\257\275\217H\'\275\t[f\275\301\025\344\274l;\332\275\312l\002\275G\207\264<AD\001<+i\004\275\252\rq\275)\211\307<=\362\212\275\034\033!<\266.\322\274]\314\341\273kd\320<\246I\242\272=\202\004=F,h=\210=)<\315\256\325\274\'\215P\275\260\311\034\275\007\'\035\275\220\262\206\275\243G\354\273\013\270\344<<\303\256\273\030\324\017\276.$\036<\355\364\253<\315q\032\275\026\305r\275\316\326\263=\316iJ<\336+\200\275[\235F\275\210\337\374\273d\035\227<\301\0246<cxH=\215\256\014\275;\224\235\270q\301r<\201o\265<\004\006j;\3472\307;\331\245\016\274\335\370\035\274f$y<\"h\331\274\265\271F=@\314C\274\250\376\222=7\036\203\275m\026\035=\351\223\027\274c\306D\275\256\236)=]d\260:n\363\204\275\324\007\245\275\346\364\317\274s\312\237=\350d\233\274\364\241\230=]b\270<x\2320\275\2716@=\253\260\020\275d\337\177\275g\234c\274\240\023\000\275sp\377:\271\242\247=&\231\335<\243m\t=\210\312\235\274\033\373/<\010\371\006\275\360\030y=\021\222\227\274z\360\024=A#\036\275\206s\250\274\363\331.=\374)O=\250%\212\273\202\237M<\326\227\"=\027\266\351\274tlw;g\206\245<\254sA\275\270\336\234\275\023Z{<\223\215O\274\247g\272=\361\313\250\275\216\335\032=\\-\227=\364y\270\274O\241\202=\004\217\321<\352\200\277\273\262\201\250\274\373\005\317=~rX<\2508\263\275N\207\016\275\342J\031=\216\021R=\300\230\214\274g\262\345<\2654\255\272\007\325\203\273\013\221\303;\006O\373;\265\246\215=\311:\260\2747a\226\274\260 \352\2730P\252<F\350\024\273\374\316\031\274Vn\036\275NH\310<\251\"\262\274\271\361\260=\035\004\027=]\004\344\2722\000\305<\325\231\024\275\341\251\313<\232\236\004<\364{\364\274\276\221\336;V\372\235\274\334\257V=\275\204\036=\255qo<u\007\310\272\231/\301<C\2650=MZ\240=\"\322\014;\334N!\2759A7=\276L~\2744\026\265;I\336\334\274\237\365\271<\t\034x\275\002>]\275\334\t\346\274\310\027<=wj`=\317ir=\3039\375\274\306\230\274\275&U\246\275r\373\315;_\210e=\316\271\n\275\3049\257\274\351\004r=?\355\236=\325r\352<#l\267\274\002p\275\273(q\231\274\327\212\332;]9]=\276\340\303<\203k\357\273f\256\356\273\346\244\032\274\372\034\222<0\217\243\275\373\017\374<\306\0148\274\225d}\274\336\364\230\275[\262\251\274\357$\006=\307\341\213\275xr \274_c1=\013\023\241\274I;B\275\227\257\245<u>\301\275\300\323\211<\204\311\035\275\033\317\025\275\323f{\274\r\030\315=\2237=<\207\346M\275\2158G\274\356\277E\275\264h\010=\004\307\324\274!\225^\275\377\354\037=\t\2078=YK.\275\211\305\336<\017\177\246<\352\330{<\235\376\013\275?\226[\275\375\234Y=\246>\371\274\031\313\217\273\307\246f=\032\350f\274\312\337H\275\207\226*\2753\360\247=5\017|:\341\3709=j\347\245=\367e\326<\372\231\237\274xi\204\274\237\276\244\274|%\375\272]~\334\274\345R+\275\2635\264\274g\332\372\274\256\336\023\275\210E&=Y\243\020<\255\357\031\275o\243\315\274c+\251\274f\224_=\322\002O=\350\276\'=\017\353\022>\303N\271=u\356x\274n\357Z=\006::\275MAW=N\221\216\272\205\352w\274\t\257\235\274[#\336\273\037t\363\274\362\030\r=0l\323\274=\355\020\275-p\214<{Ne<@\022\234\275\360\007\021=[\003\002\275G\231a=j\352\205=\25610=\223\373\315<()\n\274\237\246\247;\3138\010<\213\206==?\306\030\275\356b\n=$~\204\274~A\376=\240\"-\275o\251\005=\245\325\317<\313c\001\274\314M\266\274\257\337\004\275\330\2736<*\224f\274C\217\336\275\263j\253\275E\365\203\275\231\276[\275S\343\254;NL\025=T\022\025=NT-=\301S5\275\310\253\003\274\256\207\023\275\245\240\034=\362\324l\273`\r\210\275|5\360=\311PT\274P\233\263<$\021\317\274\241\0248=\226\033\213\274Hl\345\274\014=\005:\354\244)\274\000\212\343<%@m\274\024\017\233\274\034\272\003={ \274\274\322\340e<2\321a\275J\263\233=0,\267\273$\220k;\361{>=\342\235\363\274\220\372\204\275\326{\275\272/\373o<\013\236\343\274\3561\301<\372k\353<\250v`<\376\366\202<\001I\335\274\266S\214\275\371Z\r=pi\017=,\275\376\275J\350\313<5\240\367\274\364{r=\300O\205=T\226\347:\013\374\310<\303\372\005=\277v\034<\340\2428<\351\311\332;\323\237\245=\312o_;\231\341/=\366\301\243;s\213\023=36\223\274\307\031\206\275\225\304g\274\207O\221\273Yn1=\222\212\300<\211\2616\275?\260\034=f\353\311=\216\376\226\274~Of\275k\367D\275\227\002g\272?\313\257<\243\370\244\271q\336k\275\221,\010=\246\203*\275i\251@<\215\200y\2758\241q\273\243\303~=\207e\250<3\375Z<n\235\205\274\023?\217=\031y\260\275\304f\317\273N\265^</]9=\036V\376\274\356U\207\275\027\020\255=\247E\361<o;\021=\356\335\365;\007E)={\356}\274G\312\\\275\001\333\233\274\025L\'\275R\271 =~\312c=Z\257\320;pc\312<\242\010n\275\342VO\274 \301\005<\235\352\230\275\217F\270;2\314\r=\330c\322<J\nU=\033\215X=\224r\016=/[\021<\025\231\236;\'\315K\275\250Ig<N\362\211\273\306@n=\356h\303\274>&\233=Sg\274\274\237 \\\275\177\007\370\274\275\204%=\177\260\252<$\333&<W\340\264<8\273\213\275\326\231\230\2751\376\013=\356\355f=g\'\032\275\375~\267\275\326\"\316<\366c\205<\242!\216=\204>\251\275\022-9;u\"\022=Z\335$\275\334=\003=\232V\304<\230\203\003<S\214\363;_\246\n=\217\303\026=_h\211=I\335\203<\361-\036\274\"\252\313=\245.k=\272\205\255\275\223\260F\275\272\233\362\274\276g\310\275\217\227\376\2749\214\237=hj\255={\2264\275l\220\004\275i\2357\274\312n\236\274\r\312\262\274\230\306\033=]\261\261\273\251\224\242\274t\204t<c\350\023\275B@L=7\254\365<+\007\014\275\3153\306=w\002R\274&>><o\202G=\352R\336\274\376\216\316<lU\206=\212V\334\274\264(\355<\246K\326;_\023S\275\236C\207<l:x<\n\006\300;\356\024\357\273}\002\272=\004\023\271<\003~4=h!\201<2>\026<\2101\226=9\347\023\275\364\032m=\177\036\334<\226\225\316\275\036\017\016\275\242_\016<\254\250z\274>\032\376<\002\332\007=\273-S<\2456\242;\n\020X=\214a\351<m\035C\275gB\211=W\244Y=\242Da\275\276\'a=V\337C=\266\355\312;\314\353t;\373\014b\2742\207/\275A\201\243=\232\334\256;\234?\001=?\365\203<\252l\343=\027\232\030<\t7\224=p\0237\274\251\362\343\273\337\266\350\274tQ\246<-k\261\275\301\215\217\275hA-\274\332T\021\276\311I =\335\233\036=r\273\303:\330\374\271<\250\023\022=%\211\225\274l&\232\275B\237`=a\372M=\177\205;;\002\371m=N\222\261;\314\307\300;\217\255 \275\256\177\341<\211\265\374\274\331\315Q=u\364\001\275N\241\304\274\261s%<\300W\\=\3253\240\273\266dh\274\374[u;\031\3049=o\263\r\275\201~|<\340\353\335;\217\351\204;\364\364)\274.W\246\275\266gN=&\235\254<\307\205\035<\016\221[;\024@\305; H.=\361\323\035=Uw\207=\217\r\361\274x\204a\275\207\351?\275K\336\305;lz*=5Cz\275\252\312\010\274j`\243\274DtI;B\007\014=\307\224\220\274Y\331\313\273\276\250+<\320/\255\274MM\036=0\220\275=\026\200\265<\213\205[=\217\334\221\275\324n\232\274\302\0255<R\351*\275\304\032n;\322\267\331;^\317k=\177\325\352<\215\337\206;\231%H\274\316\022\302\275cLI=\375V)=\253\212X\274\347V\234=}\037\355;\275\320D=\212T_=\000J\214\274\033\3158=\267S\222\274\237\331\226=\205\262\033\274\010\357:\274\220\325\226=9\375\013\275=\200z\275x\260o<\305\317\316\275\n\371\244\275?m\014\275\\\350\226<H\217\211=\271R\001\276\376\365\320\274\347\303\024;z\234\034=\351Xa;\322\243\313<\t\233\251=g*\204<\323\231\030<\250;\023\274\276{\316\275\301\254*=\004\'\256\275\252\213\222\275\210\037\272\274|\"\215<\216\n,=\334\274\260;\215\207\266=\316p\005=u\002\337=$=\016\273\234`\334<\266\354R<\022\027\242<\r\221\336\274`t \275.Cc\275d\351\351<:1\372<\202L\205<\214\216\346\275k\217\354<%\"\"\275T\331\006=\376\006\005\275\261n\372\274v\211\307;\270[c<\316\366\227:J#\326<\206\250\026\275-\337\232=\250\205\210=\304X\331\274\006k\261=>?&\2759\200\313\2749\000-<\362\017\370<\246\032G:Y\004T\275\347V\302<\356N\032\275\373\364\\\275\230\2179=\324\217\033<\001\251\336\274\270\246[=\016\377\223:\367\375\016\274\371\241;\273,\362\t\275\251\020v=v\220\213=\201\322\232\275\2060\n\275\252@\322<\216\r\234\274\360\216\001=\307c!\275[\371-\274h\374X<\336\313\371\274\354}\254<\177[g<neF<\325\240\205=\200\241\303=\214\371\'<3S\242<UE\262<8-\207\274\010\215i=\262\222>\274\351\242\360<\344\250\036=\'Q\213;u\314W\275\364\367\030=\005\022y;\237\226\223<\314\3412;\310;\026\274\220\243A=\324\272\t=|\250\330\274\3273P\275\270h&<R\0233=5J\000\275\274\310\225\273\013\302\312:\035\256\233\275\374w\206\274\324km\274\005\030Y=o\272%\275\002\225!\274\334+\000<\311\330\004<\336`\267=\214\2069\274\223Eu\272W\363\360\273\344\031\353<\333\316\207=\002.\303;\035\207\026\275\355\263>\275\031\2258=\2148\301\274H\375\261<\321\374H<x\256\206=\004\243X=\304Kp<\344x=\2751x\315<L\311);\304\235\321\273}=\344<)h\023\274\"\310O\273\266c\213<\247\250\251\275<\321\037=[\033\244<U\347@<\3156|\274L\005\317=\344w9\274\256*\264:)\177\034\275\242\337\237\275<\220\217<*G\273\275\355\363\001\275\246Z\336\2757xO\274g\273\027<\305PZ<\353\231\307\272!\264\214<\000`\n\276iX\203<\316\236\346= \207z\274\0279\256\275\\\013\320\274,\333\225\274\353\263\000>\244\304\211=*\007\032=\332O\266\275\007\323\022\274oxV\2747\225B=\271\222H;t\002`\274\201\274\300\274M\027\237\274\211-\361\274doz\275\312\262I\2742\206\022<\345\214[\274\232q\317\2747\037\034=\326zV\274\025\241\247\274&\273\227;\340\0228\274\262\n\200\275\325\014\344\274\320!\025\275\226\214\265\274\207#\007\274\337}\306<]\254\004=;v\205\274.N\216=\246CN\275\277\231\355=\212\356F<\000\226\324<\314\277\037\273\363\005\212\274\362u\020\274\374T\017\275|o\215\275\266\356\032\275\026\247-=A\3445\274D0\016<\002\034\215;\320\262|=\326]\275\274\235\225\340<h\240\345\274E\311L<\265\021\346\274\031)\321\272\237\273\254\273*\3306==\177,=\377!\275<?`\307\273\233Ll\275]\254\006;p\357(=r\235\032=m\337\222=\034\271\332\274\356\231\225\273r\362\371<w\340\t=\244\316\263\275n \002\275B\002_\2758N?\275\003\255&<\372\322\251\274\354\365#<\225 \334;\316\212\240\273\033U\013\275E\320\321\274\220<\352\274\024L\010\273\0224b\274\213\207\262\273l\277\356\274\354\377\026;\314\350U\274\330k\277\274,\267\025<V\006h\271\233\226f\275y\337\037=\031\307!\275\003M\310\273\033\033\300\273k\006\303=\362\255\327<\363\006\302=Gh\317<\014\326\371\273\"A1<F\202\244\275\307\370w=\234\2003\274\027\221\211\275y$\016\274\004v\225\274C\226V\275\334&\2279\017\363A= &\014\276\032\0149=\3661\241\274\200\322L\275\264\247\246;\254\302\037<a{\r\275\264\343\335\273M\364/=b\3424=P\333\356=\363\035\220\274\266=\200<Qtw\275\265\016(=*u\301;\tz\024\274\r\203\244<M\307g\274\371\032u<\224\233\326<\021\366\353\274w\202\306=\3732\222\272\036\305\205<\353\241\214<\213\363\n\275Y\177\306=P\374\"<=F\324\271q\343\037;\235\331Y;\342\207\353=p\252\034\275\177\214\274\274V)\344<\252\244\277\275\243;^9\317\313\002=+\t\211=\036j`\275\224\210\361\275]\314\310\274\002\255\347\274\223\353\277<\240\013\336\273\\\264\211<\361\007\006\275\314\250\005=\323\332\021\272?\200\200\275\325\334\250\274\370 \325;U\"\020\275Q\234l\275\361\316\224=\244\213\n<;\227\206\275V\261\245\274\276\274\022\275\001a\214\275\213\t0\274\007\031\\=\366\n\360\274\242=\333\273~K\010\275\037\212\004>\347\003\264\274\314\2511\274QR\214\2759\215\266\275\003P\321=+^==\273\377\335=\250\263\207\273t\355{=\37738<Al\021\275\245W\322<\n\275\204\274\022q\305<\263\'\225\274`4\3059?[L\275D<p\275\221BD<&\231|<\372\301\247<\272qG<\"\222}\275J\235\252< l\270\273\317\271\361;\365\335k=\344\037j=\241O(<\273:\333<\332\332\331\274\246A&\275\034\256\036\275\373\252\240\275\216\352C=\323\007\002=.\031o<tk0=\231\365\253\274\265\300\233\274\226<\240\272\344\017\347\274|\271\177<\277(\317\274<%\013\274/p\"\275\3578\245=\212_\276\274B\210\324<\343Ji\273\362\177\363\273=\274\224<\230\341R\274P\200\335<\204Ib\274Yz+<\003)\0107\235\204\237=\355w\001=\024iI<\022\334\366<\354\243\315\274\335T\212=\252\232\256=\315l\207=\'\023\225=\217O\356\273\245\032D\274\327\271\023=\361\351\334\274\257\304\r=\243\221\004=\025\315:\275\323\373K\271fn\231\27359\"\274l\330\352<\273=\326=\363\024\227\275\2573\323\274\365pm\275R\351\243=6\363`\274\261Ab\274\316\374%<\354 \177\274\234X\026\274F\376\277<\300\010\377\274\016\r|\274\236\265\237=\030}1\275\335\366Y=\t\244\034=\354\337\203\273\017>\343\274\253z%;\215E\236<{?\035\273\254\327\245\273m\311?=\361\277S<\247B\204\274\362\276\373<\275y0\273K\323f\274\016\227\271<\004\214W\274\372\350\272=\356\334\360\274T\177\215\275\326\312\006\275\025A\226\274(\017\337;*c\014=\275\364\375<\001\3214=\276\026\013\2750Z\032\275\325rq\275\302\203#=\271\223\330<\000\206==\274\001x:\301\316\250\275\376\016W=\267\024\221<\210[}\275U\342\231<\026\247\250\274\"\003\333<c\210S<]f\207<\"\027 =\312=\022=\013\347\265\275\331\304\225=d\360n\275\342r:\275>*M=\177n\265=\362\204#\274\325X\372;\361lG\275\304S:=\267\301\033\275A\336\206<\004\017G\274\3347Q;\370\363\210\274\325\243\220<\006\214\273\275\350\355M=!\2076\275F\246|<Q\222e\275\274\360t\275\300\035%\275b^\267\274icM=\211\2325\275\2120\t\275\002\037#\274\330\t\311\274`Hu\270 \375\225\274UB\004\275\272i\341\272M\364\272\275\212\367o<Io+\275\241H_\275\031\267\\=z1\323\275\337\315\207=\005s\203<\211\363\252\274\316n\261<\377\332\317\275\237j\266\272\240Ik\275\037\233L\274R\2233\275Qg\264\274:p9\274(l\270=\032{\032\274\346\346\227<;{\246\275\n\305{\275\341/\335\274ht\022=,\332N\275\2413~=qd\003=\r\2630\274#o\202</o\007=)\371\025\276,|\362<\037\370\257\275^c\000\275\240\002\255<H\230\"<\214\343\032\275\177\335\354\274}q\273\274\005\243f\2758\027\235\275\2524\231=\264\220\332<\330\3034<K\240\257\275\352F\343\274\254\345\231<\202\3233=\341z\203=\317 \221=\315\177\236=\007@\020>\237z\353<1c\354:\373k8\273ZD7<\261\247]\271\033\305_\275\026?e\275v\243\224;54\214\274\305H\255<\024\230,\275IN\204\274e\332\264<6\000D\275\024\023\007\2757\330\257\274\020T\013\274\266\205\217=\374\322\377<\335\033O\274\004)\202=rO\215\274\023\230G\275r2\333<\234Q~=\241}\364\274\\\016X=Q\000\307=G\'*\274\364\026\201=}\246\205\274\363\254\207\272\362u\257<\n\274\332\274\302\243\030\275\022\341\274=s\321\032\273\315\312\207\274\244<\027\274+n5;\"\271\205\275\215\243\027=}\267S\274\237\030\306\272V\030h<\017-\016=\237\374\366\274dop\274=\221\263\274\227\204T=\241\033\027<\371\302\214\272q\002\220\274\t\004\031\275\250\232Z\275\002\325\205<\034d\236=\033L\261\274\306\032\276=8\362!=o\035\001\275\302\301\230<\332\225;\275I\236h=\323^\361\274\200\215\217\272$\355\324<Q\350\263\274\365#`\275\376(\336\274b\351\230\274H\315N\272*\325e\275\227\230\014\273\223\261c<\351\253b=\235/\204<\341<\024\275\325\007\357\274\251\314 =\256\225\235=Hf9=\n0Q=)\204\'=Yv\027\275w\245b\275\205gB<j\242L<\\\356\363;\334\230\003=\325bs\275G\211\323;\003j\201\274+\n\250\274\274\260\212\275\273\007\216\275\n\017-=\313\0052<db\232\274\003X\355\274k<\033\275>\261d<\014\031W\272\244\002f\2753\310h\275\244n\275\274Gm\035<\312<\227=\243\371J<\334\362t\275PG\326\274\177N\263=\341\2242<m\261\033\275<\250U=\"\264\230\275\363\202\020\275!\000\010\275a\307\016\275\245\304\020=U\212\016\275[-\340\274&\277N\275\321\235\325;1]\377\273Y\210W=^F\216<=\023\344=\0034\235\275`\230\342\274\262\201\365<\361\331\302<C=\034<$(q\274\325\315\213\274\303C\225;\322\30659\005.\024\274\014\225\260:\223{G<x>\304\275\035\356\262=\307\341(\275\362\275\255<\033\364\031=\017\346\336\274\224\000H=\303\374\030=\377\013\217\274\247\227\377\273#\210\306<\244\010\264\275\244\253\025=W\352C\274\276\225\010=\324(S\275\306}\255=\262:\202=\374!\236<\244\212\373<\330jB\274&\004\001;~5\021\274\004\370\215<\257,\343\275\275K\250<+\303\030\272\3104d<\r[\261<\374\026\010=\321\246\314\274 \264\253\275\272/H\274\267\266c=~\322$\275\256\026T\274M\327\350\273\242Ld\274\221ea:\371`\244;\244\001\221=?\321\344;\"\001\321\274\360\360/=\231r\304<\264\250|\274\305\270\010<3\220\200\275c?J=\241k\225=s\225\003\275\017oZ\275r\311\r\275\004\252\\\274\035\350[\275\305.\031:nI\224\275\342\275\026\275\025\3055\274\276\250\\=e\262T\275&\3511\274\007\326\037<N\024\262\274Q\327\204\275X\310\314\274T_\205\274c\027\266<;6j\275\341Q)\275S2\005\274Q\033N\2745)z\275\030R*\275\326\260o<\340\323\331\273\333\217\252<\024qJ\275\303\025V\275\326\036\306<\310}K=\2304x\274\217v\'=\236\366V=\243=\320\273<j\267<\3411I=\3641\026<z\324]\274\333w\206;\331\310{\274?d1\274\344\312B<t\016.\275(\365:=\364c\035\275u\254T\275Jan\274\231\t\331:\214\024`\275\306\020\267\274\377\356\021<\210\225\037\272\030\241\\\275!*\211\275\272\307{=r\363$;N:\t\275\326\263O\275\345m\322<\362/W=OA\024<\206\264\345<\320\247)\275\353\000^\274\254\010\214\274\312\343\346<\260\361\251=\341\330\006\275\263=\322<\204\244\257\275 \030\233\275b\243\377<\033\365\352\275\325\373\361\273\375\332\004\275a\230\017<\240w\256=\211Hk;\341\373\220;_H\230\275?\001\270=\326L\311<l<@=\000\'e\275\240\313\212\274\204z\333\274\207\306\226\274\030;\266\273vD\010=\351\341a\274u\272\374\274\241\350\r=\255 \023<1\343(=\245b\304\275A\251\n\275\300_\235<\223V+\275a+\215<S\207\006<\254\302(\275t\371\302<\277\246\337\274\325i\243\274PhG\274\260U\320<\350\261\263\275\001 k=\312\210\365\273\331\372q<\320\322\302<1\251\210=\242\332\246=\025\255p\275O\354E=\332\362y<\013\332Y\275\341P\360\274\3669\236<\257\\\013;\025p\251\274P\000\013\272\347\217\034\274\275\317\377\274^f\250\274\0236`<\246*7<\354\205\255<\206=-=X\020\327<?\177\215\275\323\237\321\273\327?\020=\357\243\202\273\014\204\247\275\250\251\324<\350\025,<\365\305\361\274^\265U\275\352\374[;\363\022\271<\'@\240\274\317\257\013=\341<P\274\322\271\261\274\216\257\026\275\207\3116\275d\361\252\275\232\3539\274\334l\004=\275p\023\275\367\245x=\222\330\177\275 :\2049\262Tw\274\245\315\336<sU5=&\264x\274\364b:\275\230\274\340<\261\242\242\274\274\243?\275G\'\262\273a\204\325\274if(=\3616j=u\322Z\275N\004\224\274\3427\345<\224\320\242\274\007\001\017\275\252\223?\275\367\r\264\273{\302\220\274\0338\361;a\375\316\274\021g\316\275\323\020T\274\017\005\037\272i\244<<\362 ==H\213\002<\376\263\036\274\223\t\344\273~\307B\275\222:\031=\373\014\204\274\026D\372<\257\010\005\275iFU=\2328\373<\207\364\323\273.\265\266\275al-\275$\010\226=\2358\302\275\240\036t=\347<\212\274\252\274\354\274!\007\r\2744\306 <%\344\221\275sn\233\274z\351\277;8\022\224<1\003\317;\315\325>=Mm\246<\315\256\215\275:\305\240\274\341\274(=\351\226\262\274\272\205K=fc\243<\020B\320\273Vb\037<\276\377\014=\201]6;\302\323\206\274\242\313\022=\237\377f\275*\314U\275\242\357\354\275\305T\003\275AhC\274i\2616\275[\203>\275\266y\255\274\312/\225\275\021.\310<\031\367\037\275\211\023\324;\006\202\252\274\026\226\241=\016\033\321\274\241\236\231=\027\302\243\274](\206;\244\323\243\274\313\271F=\335\034\307\275\"V\033=\335\353\241<rz\235\274N\332\304\275\333Di\275\014\037\363\274\306\375\276\274\352z\350\274)y!=\356_\005\275\002\270\265<\212\003\212\273\250P\362\270s\322(\275fa\342\274\rI\302<j\347\255<\300r\031\275\n\265\206\275\027\030\221=\010\321\373<\335\240\200\275o\237\201\275\032\301\232\275ks\t\275\\8T\275\343\370\311;<\243P<\323?\230\273F\357\n=^\267\313<\013\255\335\274_\333\247=\303\320\354\274t\245\010>\304i+\274$a\031\275\245\312-=5\337\216=\356\315\367\274;H\264<T\201\312\275\344\332\022\275Dgi\275S\253Y</\213\303;AI\213\275\356l<:\035\264o=!\350}\275u\304\272:\2429\005=\301\237\220=\344\372\367<f\316\264\275\272\200\030\273\331O\277=X\0323=\006\307Z=\312\021 =\266\346\274\275\266\033\247\274\262{\256\275\331\025S;\216\246\252\274\362\377\372:Yg\375=O\236\267\274yw\260<>H4\275\225#\266\274\005\205\261\274\025\225F=\337\334\200\275\236\030\316=+\213\000\275=P\016>e\313\210<\0042\016=\253-\256<\001\'\245\275\3518U\275\244\316\347<\010\303\251\273P\253,\274~\251\346<\2139\240<e\261\177\275pV\203=z\352\303\274\201T\243<\206\350\000<\003\213B\273\313\275F\274\251\014#<\372\260\001<\200\202S<\033\246\322\275\367)\325=\261\260\006<\221\377,\275\013{\266=\022y/\275\375\352+<\200\210\344<\254\205[\275w\214\005={\3539\273o\320\t<\027\342\335;d\2324\275\206T\037<C\210\331=\035i\205\275Hb\000\275\357\362\"<\222\365?=jO\r\275\272L\304:5\330\211=l^\211\275\035?\200=\274\230\354<\317}\224<c\006^\275\006\303Z\275\264\003\001=HS%\275\271~\214<\036cP\275\255\020$\275E\270\212\274\310C\203\275o3\301\2750\235\347=\313\254e=\r\352O<#\316\327\274jE$<%\220\t\275\246<E=\t\337\022<$F=\275\321/?=\245%\255\274\277t\234\274r\352\254<\305\3756\275\240\017Q=\\;m=;\013\017>\302\315\212\275\356\276\244=\023\336E\275\271+\334\272\206\224^\275\307]\357<\356:\226=\351^\010=\033R8\275\244\333\233<\267\004\025=\254\000\214\273.\351\320<\325\2048<w\244\202=:\313\210\273;\\\224<KAL=\227\217\236\275&\213\335\272k;\000\275yT\235;h\351C<\303o\236\271>\306\304<\t\265\304\274b\272V\274#Kv\274\243-\241={]*=.\232\200<\024=m\274\346\370\\\275/\305\262=^|\314=\0311\033\274\302\371#\275\335\232\270;\017\003\255;B\266\027=\224A&=\202\222A\275I\020\306\274C+A=w\246\360\274m\252D=\220\3677\275\204\270L\275\034\363\367\274\300=\222\273\237\n\016\2757\343\257\274\214S%=\222\356\001\274\226\177\260<\354Y\316;\332\202;=\336m\3529slI=\350\014\300\273a\014\276\273\005\026\240\275m\261\005;\335k\362\273nW\227\275X\353\207<\026\\(\275\273\256G<\344\264\347:=N\231;oB\201\275\264\221\027=\004\313\253=\301\231\037\274o\016\235\273n\207\200<\377<\221<\376\327\316<Q\020;\275\256w\321\275\201\'g<o\370\246:-G\246\274\227*\252<B\263\275<\033\345\037\275\317\"y\275A\251,\274q\0379;\305\333\317\274u\r]\275\223/\\\275\366\373\302<0\324\245\275Y\375\245\274wU\330=\3253\030=\'W|=d\025E\274\021\226\033\275t\035\311<x\257\223\273\r<\215\275\025j=\274,\305\263\274\'\243\231\274\030\234*=\375!3\275\346\n\272\275\301\274\322<\204&\300\273\026m\243<\033\342<<#\007\375;\374\035\332\274\013\273l\275w\273\326\274\213V\334<\257\245%\275\275\217\014<uL[<*E\233\274+O\367<[\376\300\274\201\001\006=\243b5=_\213\031<\002\350\205=\226\210=\274\352\353\023<.\014>=\r\224\030=\037\360\252=\027\312\244\275E#\271=\324\270\242=\006\223\344<\273oz\274\010.l\275\330\322\204<m\032\264<\370\007#<\016\316B\274V\312-\274\243YA\275\311\n\\=4#h\2747\032\204\275\224\3272=\rh\211<E\260f=\r\353r;\324\342r<\010\305\216;F\304\341\274\362h\241< B\337=y\260\204=\333\202\007\275\326\004\217\274N\217\350\274{aX\275\244\242\217\2755T\303<\016\250\211\274\215Zk\274\236\360\327\274\r\305W\275\350L\031=\264i1=\232\004\200:\362\030\032=&e<\274Ea\023\275\206\314\326\274@P==1zR=\340\266\311;^U\211<\024\257U\275@\232\246=\207\227\036\275m\017/=\025sL\273m\223\037\274(\370\021=\251\320\237<\033\330\316\2752\035\036=\326v\204\275\203\032\256<\006\211\201\275\334 ~\275\327(\010;\273\235\250<Mq\277\274h\226}\275\311\001\225\275\223\022h\274\037\374r\275\372\336\222\275O\225\213=\35781\275C\272\334<gi\253\275\353\265-\275\210+\366=\005b8\275v\205\354\2746\030\253=\353\236\370=:g\206=k`\221\274\244\306Q\274\322*{\275\221\203\307<\362\254\225\274\312\177n=\001@\236\273r3b<1+\022=4X\324\274\244#_\275\263\236\302\275\3567\256<}S\346\273aL\225\2741;\014\275$\2007=o;\247=?c3=\273\034\247;\240\023\227\275E\343>;\277\337v\275\367\217\371<\207/?=W\326\234\273\3579\216\275h\356\n\275b\351\\=j{X=\242\036\255\272k\t\365;\330~\004\275\272\023l=Rn\217\274\352ib\274]\270\360<\255\232\231\273\240\\T\275t\355A=;l\341\272\t#\006\275\020\300\335<\367:\023\273\346Y`<\262b3\275hot\275\036\337\320;\214+i=\333h`=\332\356X=)\320\r\275\265>\346<\325\335\241\275\276\304\223=\344\374\217;\177\3235\2757\303\371\274h\017z\275m\377$=\277\010C=\235E\232;\324\301\223=\243[`\273:%]\274j\245\321\275\2245\316=\"M\031\274\221\263\244\274\317\006\212\275\324\212\236<\256n\261\274\272\323\271\2749<\315\275\247\331\200=\243m\356\274`p\217\272\\\266\200\274hYk:\351\364N\275g\232-<\361\270\217\274\201oU\275\016\006]<\251\023\216=\367r\001\275y|\207\2752\346\314<\251B\243=\317<\272\274BQ\210\274\226\037W\275vS\306\272\026\177M;!\035\360;\270\377\033\275L\276\177<\\\223\235<I\353\215=\356\300\034<\344g\033\275\r\251\334\274\037=:\275\205[\035=\245\275\344\275#IE=DBl=\260\007\312<|i\336\274\t\271.=\203\256\233;0\303P;=\323\t>{P\360\273\316\246\344<2\236\\\275\303\266\221<^\212\035=\337\324\004<:\253Q\274L\030\207\274\361\177\t<#\007\031\274l4\250<\203\337\357\274\304\232~=\377%\351\274x\317Q\275\345Fp<TMG\275\3248Q<\327bu<\002\216\222<f\027\213;\366\023!\275q\\\336\275J\2132=\010u\315=\274\254\202=\365\231\352<9D\003=\231\032\003\275\275\253\235\274O\236\t=3i\207\275\022\003\022\274\215#\372<;\237X\273c\221\023\275\257\333\017<?7|\275\344SC\275\246\037\211\2743\313H\275s\230\344<i\322\227\2732,\327<k\252\264;\"\271\264<8tn=\266\2430\275\240\033\034=PcO\275d\221\035\275\215m\214\275;\262f=L9=\274X\267\014;\253w\215\274\201Oh\273\260\3710<,\303\332\275\024\270\261:U\364\r\275\223\207\322\274\005\032P\273\260\354@<\017\3068=+\000\265\275\253\205z\275\356,\021:\340d\216={w\236;H\'\337\274\320\321\250=:=\005\275\272\336E<Dcb<\315\316\372<Ik\"\275\273V)\274\371\007\357;\312\316U=\001\322\"=\314\326h\275\362)B=\340\3325\275\232\332\366:\303\265\377\274\0041\371\274\263\224\'\275\366\345c=\032n\014\275c\214G<\277\202\014=\334\324}=\3471\307\274\r\034F\275\314o\254=\201\273\317\274P\220R\274\311\252\256=7\322\013\275\242Cq<}\326\213\274\350\304\273;\262I9<|#q\274\022\365b=T\352#\275\302\375\262\275\303\371l\275\315XD=\0046\244\275\377\223\223\275\2632\t\274\361\311R\274H\375\315\274V\245\372<\276\366)\275\314L\225\271G\304\n\273z\256\312\273\256DS\274\327qH\275\242\004c=\"no\275i8:\275\234]\241\275\277.L<\254\316*=N\271\247\275\216j5\275wN{:\022n\246\274Jq\027\274\236\363\314<S\267R\272\250\320S\275A!\202;\267H\362<r\037\026;.\025h\275\nRH<\265\273\313\274\300R:\274T\201\311=\210\013\002=\205\3451;5\354\344<g`v\2750\263\263\275{ \001=b\330g\274\206F\t=\301\267\272=Ap\013=\202-\241\275?\351\037;\373\254\323<\237\324\305\274yr\004<C\247s=\275\373\034=B\325@\274\254S\322=\336\025*=\346\203P\275[j\201<yu\357;E\005 \275\307\354\366<lYN\275\022\355\217\272\2533\013\274\241rP<S\001\217<\354\001\234\274\000\003\203<\377s\343<\323,\'\274\212Q\334;q\216\227;@4B\275\031\274\221=]\214\354\274\016.Z<\255(\304\2734\275\007=\0130;=n\375\231<\270xD\274\276\347\014=g\226\214<xW;\274a\t\227\274\347L\251<\200P\037=khs=\222\2652\275\003\313M\275\347\tp;}\335U\275\240T\264\275\023\256\023=\3550\256<\340_\376\273L\324\200\2751\370\352\274\305mM\274y\337Q=\330\223\032<\227wS\275\236\301g=\331\236|=\253{1= #\022=?\3316\275\004\330\233\2747\336B=\206C\275=\324U\302<8\237\253\274\364g\"\274\211[O\274\376\323/9\264$\270\275\031\257\331<\200w\325=\353\353\233<#`M\275z\216A\275\"54=\261f\306<\343\301\220\274\037\216\344<9X\315\274?XT\275\314W\206=f\243\305\275\222\032\314\274\221y\'=se\204\274\022\346\353\2742c\023==x\234:\250\277\247<\316\177\361<\002\223\020=XN\025\275\001\254\370\274\214.\'=\233\256`;\206\240\024=\241`\214=\345\262\346\2744\376\035=kE\365\274\002^,<>wq<M\363\256\274\240\201\260\274\002\007\221=\347H8\274\206\334\300\273\201\360\013;\374\211P\274}\037\333;\221\224\306\275\236\215x\275\216\207\250\274\302\030$<\025w\r=\236h\035=_\250O=\213\027\334<7\240g=V\343l=\333\362\303\2745\010\000=\250\227\314=dk\016\272\323\330X<j@H<\364\226]\275\201\262\017\274\317\221\233=Ot\220=\235\257\256<\370}\007=f\257$=\235#\354\274\0272$\275kY\234=&\006T=Sxx\275\340\001\235=d\232\2429\211\336\223\275\260G\215\274\005PM\275KK\031=}?_<F\346\333<\027[L=\224\230T\275\340m`=<\026\212=\270\322\227\273p\260\236=h\344\245;5\206\032\275\031nU\275Z\345\213;\374?\234=\377\274\024=\205\244\340;\007V\225=^\271A\275\203 \006=\272v\237\274\242\204Z=\277\342\332<\271\303_\275v\353\300\275\200\2013=\302y\202;\331\201m\275A\347\264;9\027\323\274f\033\225=V\247\214=#|\021<\214!\233\274\323\207\320\274\210\202G\275\376\035\362;m\177\277<\223:\230\275&\014\252\274Z\211\036<\377\177U<x=\270\2749\213K\275\312\232\210<\002\255\333=Z\357\201;N\361[=\2531\330<T\017W\275\227o\276<\263\t^=\364`\025\275]q\025<\r\223\004\275p\222L\275\326<q<;\010L\275\370\335t\272\354\342B;_K\244\275T\276\017\274?\370|\274\206\031\346\274Xj\253<\315\212\251<\213$\246<X0F=\327UH\275\324:0=\3439\'\275\273\227\003;t\236\205=\235\377j;\375xn<\240\317E\275*\242\232=\335\000{=\263\346\343<\277wy=\363\214\212<5\003\357<\265\315\266\273\306\2118=G\345p<X\232\216<\363\317\300\273X\0266=0\226v\275\n\370^\275\315\376\241\274\210D\262<C\317\377<M\313;=Z3\352<\3242\257\274^\247\221=\034\275\360\274%\2216=1\273\270\275W\313?\274yeg\275J\254\247=\260\357\272\2736\257)=r\221;;\222\212\314<`\321\236;\265Q\020<\033\341\364\274\371\306\204=\214.\031\275*\022g\274&.\177\273\310\r==\321\245%\275\004\231\275;\365\264\204<\205\026\204=\225\010C<}Z\370\274\014\317\221\2756\377Y=J\267\306<l\312\242\274#e5<\370In=\354\365\360=Y\205\272\273\350r\332\274\233]-\273\\\003o\275e\'\026\273\251v\315=\347q\226\274\274\2142=\274\275l=\360\214\005\273 u\225\274\267\3360=oK\215\274\250Y\232\273\026\265$\275\373\315\'<A\331k=\206GO\273\372\331\314<\311\325D=\336k\"\274\330y\007=\305\351`\274k\343 \273\371\230\356;X\206\216=JW\276\274\237{\r\276~R~=[s\322\274\3320d\275`\351\300<\270\335\236\274n\034\204\275W`A<t\211f<kt\215\274b\206:\275\001)\274\274\217\201\310=SI\262=W\243.\275R%\326\274\322)\226=?\356o<\226\303\227<\244c\020=\270\030\236<ra\226\275v\\\250<c\004\343\274G?\211<\301U\222\274\254\330v=\016\220\014=8\010\311\273dh\006\275\033\265\276\274\0273\340<\320\364\206\273\216\340\267\274\337P\212=\214\370\231\275\200t\327\275#\365\303\273e\023_=\311Y\263;\210\361\313\275\326D\367\273V\266\207=\276\320\006=]\310\030\275\330\036^\274\235\371\206\275Jc,\275\210Y\225=y\310\322<PS\037\274\270\351\351\274\316\222<=\207\346\241\271\206\246\237\2758\252E\274S\007e\274\251\323\"\275\360D[=\235\177\226\273z\302T\275\344\362\007=%X:\274\215\275d\275\300\010\346\274\243=\266\274\000\3711\274P\326\331<r\306\301\274z\202\232;\247J]\275\221\226&=\216\204\242\274\215\276>\2750\232w=oV\013=\365 r=4\313\305\275y\351\232\275ms[=\256t%=\203\003\231<O\214\252;\321^\337\274\314\004X8eM\213\275.\313\350\274}\267\335<}Q\227\274 o\t=A\323\206\275-\201?\275I*\204<j\n\022<\264\177\031<+\334\265\274\\f\214\275\313f\310\274\344\261\365\274~t\262\275j\231 \275\2637\t=N\021\236=rI\252\274\333RN\275\330\264O=\375\363|<#\336\375\274o\253%\275]\262\236<\025d\336;OH&<G8\216<l?\226<\020\036\212\275\226\331\276;U\223\367\273J\017\267\274\302\304>\275|)R=\313\313j=!]\023=\227\306\034\275\332#\245\275Z\'g\274\337W-\275\212+a\274A\320\300\274\312\202 =\257\002P=\304\337c<\254;m=%\361\356\274V@}\273\005{\244:3\023\r;\301\346\210\275\332L\215\275\254\214\207=\246\007\271\275<c\244<\032Qf;\270\2764<P\336\214\274m\244\263=C\332\034\275\357\"b\275O0\211\273\rC\221\275\272t%=;l\222\275\013@l=Q\267\034=.fF=\234{\200=_\250\322;\305\335B\274\345\300\261;\254~\317\274\366E\027=)\307\035\275S(1= \253m=\013\001}\274\273h\207\274\271&s=\333\320\023<\304Qf:w\217\251;\260\241W\274\246K\366;\370\2115\274\034\304^\275\201~\313\273\334\375\322;]d\331\274\266_\"\275}\267\213\273\346R\315\274\257\n\333\273\324\357\\<\r\030J==\245\321<\302\315\222\274\024\035\t=\242\201\267=\212?\\\274\313\326,\275>\276;<\357\002q\275h\3044\274\223%$\274o\222]:\376AO<\357\220\344<\316\234a=\266\220L<=\217Q\274\031)\010<\351\233X;\202c.=\214^\005\275\262M\264\275\335\216$\274f2\351\274\330\357f=_Y\357\273\301\\\257\275]\323\271;\020\232|=Q$U\274\305G\255\275\225\\\354\274v\317\352\274LC\034=\266\353p<u\225\212\275>\233D\275\'\241\213;\231\036\030=\037\362\311\273\317[k:\352\252\246=8\214\265<\2103l:y\022H=\204\021\021=\305\245\263\274\261w\365\274|\232\331=Z\346\202\275\263\251N=\310\323\235\275\337^\234\275\366w4=k\327_<04|\275?yB\275\245\255\242\275,\002}\274\257\266\225\275\234\201\034\275-0\205=\024\336/=\324<\371\271\322\262J<\200\330\240=\210\232\306\275\342\3422=\r\'\221:\252Q\213\275\306\t\237<\241\253g=\314r\200\274\354!|=X\216\310;eQ&=X\277\246\273D\214b\275\010tH=2R\371<\\e\247\275\354\026\343;\244\021\262;\264\002\313;\244pC;\004[\031\275\275\332\024\275\3715\236\274 \330\267\274\323\375\031=\201\345Q\275\354\300$<\270*\024\273\3662\305\274\211\2147\274\353\'z\274\317\201F=\363\340\205=\377\344J=\375P\316<\036x\363<;KE=\235\t\362\274\010-\007=9>\322\274\2132/\275\350Y\014\275x<\305\274\033\254\261<D\262\257\274\341p\031=\005`\303=$\374\200<U\321\023=\347y\036\275Y_j\274\035k\201\275}U!\275\036\243\375<\\/\310<\000\246)=\017o\271\274\000y\n\275\002\305\203\275\275,@\275\"b\201\275uni\274\351\024X\275oY\220=\377\177_\274$\204\223<\267=\307\275b\275I=\312\232\212=k\275\324<\375\246\020=f\376\344<!z\266\274\264R\001\274\337\252\220=u\304e=\030\270\207\274\3631\025\276D\362%\274M\277-<\263\267\334\274R\002C\275\022\305_=S\246\344\273<\343\257\274\2418<\275\033A\264<W:\236;\253\3248\274\275\217*\275\304Av;t\034\363;/\235\202<\n\312\004=4\206\302;R\351~\275n\3248=\212h5=6It=\016\\\355<\314\343\341\274H\271\034\2752\246\201\275RY\267\274\275\367\326\274\362?\266\275n\272\366\274\334\211\353<<N\367;\371\344~=5\247\r=r\353\006<\356\352a\274(\335\222\275E\373T\274\241F\303:\241\226L\275\205\311o=\364\005\256\275f\204a\273\362\'O<\007\347h\274@\263h;\214\307\205\275\032\2754\275+\243\205\275\242\000\356<\2404\200=V}\352\274\244\311\333<r\3567;\223z\266\275\321\315\243\2742\303]\275O\231\003<\312JF=\210\r\312\274\226\013\275\2751\2373\273r_\203\273\323\316\266<\367Y\242<\355r\207=H\202\027\273!\021\212<\371xz\275\014\370\217<\032\227b=_i<;&\327\364=\377\261i\273\277O\301<G\250\000\275\251\211\203\274(\021\025=\245\374k=Y\201\356<\224Q\261\274\264\303,<\216\256\337\274\023~\014<\013\244\327<\344\375\344\274\262;\210<\2346\226\271\013\030n\275\375,1\2727t\364:\363\006\323\271L4\344<)\260\270:\356\326.\274\034\000\207\275#\304\001=?5\344<\340\234\275<\212\246\305\274*\345\326\274}\\\202\275\204\242\207<\330Y\265\273\2656\310<gG\373=v\030\234\273\204\370\025\275\240\255d;<\262\264\271\322D\253\274\275+t<\246\233\261\275\014\273\334;\215\254\026=\322\022O\274]dI=\302\352\356\273o\325\010\275J\227\227\271g\223\337<\007\353\023=M\021D\275:>\252\275\204\2612\275NY\017\275@\225\265\275\325\217\003>\217\202\r<{W\224\274\230~\207={\351\003\273J\245\014\275\232\367a\275\035\253\001=>\257\027\275DoG=\320\210V=\312Y;=\353b\256<\311\005\262<6\025\350\275\223\275\230<\353I\345\273\271\036\204\273\357\213(=\022<\303\273\2658#\275\032\345\207\273\367Q\320<\316\354/\275\020\330\273\275\014n=\275\277A\t<\276\333\000\275+8\224\274\206\235\016\275j\352S\275\037\324\306=l1_\272P2J=\310\315\202\275q\023F<\014{q\274\241l\316=\322\023\005;\351\255\343\274\314i\252=\253\331-<8\214t\275>n`\275\336\237\003=\'X-\274\t\341\303\273\314oM\274\002^B=\220\215\353<q\207\032\275B\226\243\274M4\024<}ed<\354\202{<\007?-;S\230\t=\324\224\242<\352\275\264\274\254\323\030;\332\206\030=W,:\275R\235\232\274O\214\252<\315\324\323\274\233\360\371;3x\017=\300\331\"\2750\241u=\300G\234;\303 C\275\204\262c\274\341\002\257;m\036\230\275A4\217\274\234\342\252=\372{\306<\207\370/\275\3772\014=c\243\226=\305\317\"=\242&\033\275i\344\270\275\255\247[\275p\276\274\274Mu\215=k\006}=\213\214\027\2751\\\224\274\031\273R\275\204\301\344<\370\376B\2750\032\201<\250\234e\274\022\265Q\275\021>\223\274\242\337\320<\301\3077\275\031\032\303\273My\n\275ys\221<\207\324\274<\256\376\237=\374\375\374;\331\251\370\273\030p\003\275\362\322\024\275?XH\274#\312a<\321\312a\275\211\301r\275\361J\022=\303\242\212\274\260d\202\275\263\372i\274R\\\032=W\nk=\016\373\344<\354c\343\274\206\353A\274\364\364\244=v\254\321;\252P\243\272p\\<;\037%\225\274]\244\016\274\00768=(\204=\274#\332\330<\237\002p;2l\255\273y\265\035=B\337A<\345\030f\274\376]\344\275\274\370\357\274\230F\267<\233\271\n\276\277\234\223<H\000\246\274\326;\215=\301^\246\274x\366q<\351G\224;|`\251<\277\016p\275\205}q\275\216O\236<\256\032\263;\313\230\322\273\352\270\221<\324\204\224\275\000\214\257\275\364\320\247<\037\357\020=\233\222e=2M\212=\317LQ9*;\036=\204\005\323\273#\375\013=mA\237=\215\206\211\274\360\351\212\275@\312_=\371\254\253=\225\207\022\275\374\216$=gY\361\274N\017@\273g_`<Y\237U\274_\274H\2742C\035<\036Sl\275\377\337\031;\262\313\220;\267\331*\275\367d8\274n\306\341;\241\345F\274\256\227~\275\321\251\247=\340D\007\275\214Y\022\275\031\".\275~x\036\275\265?_\275\301n\t\275\010\2407=\364\273N\274\313\2358\275s\326\030=\336)\233\275\336\267T;!\237\253\275\261\370\020\275\314\230\227\274\3103\362<\3009\235\275\021\265B\275\351mS>{Av\275>\351r=\3433\201\275\317\232\004\275\262\265H=3\357\026\275\313j\201=#=\305=\326 c:\327\336\247\275\226\305\030;7 \200\275\366\2037\274\372\3070\274/_\344\274rU\343<\027\002K\274\201\335\254<(~V\275\013\002\262\2741,0\274C\250#=\213\324_=Z\211\177\275\266\201\014=\2550\232\274\336\242.\274\005\373\014\274=\'O\275\007[\330\274\231\324u\274)\302\343<b\211u<\317\315A\275L\023j=^|-\274\321\266\342;\325\177\220<z\256\261\274\341\'\213\275\342\343@\274\312u\234\274XVM\274\321\0238\275hy\021\275\301A\334\274\350\257,=E\0221=\034\251\005=\320V[\274\354\367\262=e\315\371;\261\273\362<\010I\272\275\033j\265\275=b\263=!\377\350<E\027\323;\336\250\365\274n\202\200:\267O\216=[\373\355\273\2546\230\272\320\336\031\275^u\027>\363\025\010\275vWH=P?\202<<\245A=H\251\370;c\3224\275E\342\202\275\'%\333;=\035\275:\270^6\275f\2577<\254\217\025\2754\314\241=\220\3177=\227\316p=_\334\263<?z\363<\027n\375<\344s\205\274\231j\007\275\257\267G\274\346(\234\273|\263\254<\t\212u\274\0348I<\302\251\244\274Sl\370\274\366\016\257=t\r?\275\250z\266=\261\003\276=?\262~<\370\250{\273[Fv<\033\t\342\273\244\277I<\254iF=\220\'\306\274\007\224\002\273\300l\267<\325\030\241;]\274\345\274\220Pv\275\202Q7<\212\343\376<R%\302<\016\244\021\275l,\005\274\233\210\223\275\250\314\267=h\217\226\274Q\320v<\321\374\323<\010\022~\275\375\331\341\270/\247\027\275?\275#\275\003]\373=\327\t\200=\017\240\010=C\376\'=\353r\\\275MFY\275\300\035\321<8^/=+\277\221\274\344\037\216\274\375E(\274\224\017\371=\244\304_=\017\t\030=Lz\236\274&\233\331\274l9\250<&`@<\3035\025\275k\221\n\275(\014\203\2741\036\206\275\323k\231:Jc\234=\257@\207==\023\200<\003\265O=q\377\276:\371X6=i\002\321<\310\244\274\274\333\233e\275\235\303\030\274\010Le\274\311 R\274*c\246<\023\347x<\354\266\302\274\001~\"\275K\266\313;Cs\026\275<Ho\274\365p\366\274\010[\303\275\264\035S=y\300\367\274!OP=\250:^=\310a\031=\260^\345\274\252v\302<\006\240\222=\370e\032=\216d\'\275i(a\272\301\260.=R0V<\0145`\275\374\375\204<\222]\264\274\303\270V\275\347f\027\275B\310\215<\344\376\320<\376\304\037\275\326\325\333<\246Z\000=\246\265,\274\316\206x\275\025\274\363;\257{K\275\220\007\335\274\007\236\344\275<\237\006>]\352\023<\317\335D<&\300G\274\344{?\275(i\335<A>\210=\"GB\275\251\003y<\240\242\306\273\034)b=\352\247\256<IE=\275\2474\232\275\327j\236=\367\031\262\275\366\004W\274\025\333\252<\231\374;=\373\207\r\275\0317:<_7*\274\333\344v\274\336?*=\360\225V=\010\222\235\274\243ak\275\014\324\244<\240\320\277\274\301{==\004\013U=FZ\277<S\007}=I*\204<F\027q<\010x2=\371\312\331\274\002D\023=\036\361\323\275\350\000n\275\313H\312\273I\240\272\274w\212\224\275\353\276\204=u\371\237=\324\362\300\274\206\013\356\272N\377S\272\251p\250\275\324,K\272\352\005\313<\255\234\216\275J\031\310\273\260\367\213<\"\335\352\274\355\307\324\274\320OW=\333\036\212=\247y/\275\323\t\326;\262-\230;\310\240\032=\3214\270=\031l\334<j\317!=\272\'l\275\367\247\225\274\257D/\274\236\332\216\274\366\245\365;\266\364\325\273\360v\261\274C\010I<)\243s\275\2563\036\275\244\253\316<\310Q3\274\"\035\201=c\021d;\366\212\246\275\245\323`\275\332P\006\274S\2403\275\262\245\343\273\213\363\023\275{\357\240=\31493<zgP=\222\306\265\274\206GO<\'\313\017<\003B\031=\304\212:=\030_\016\275Q\0265\275\032\233\224\274\352Et=0m\352<hlC\275SB4<\300\n\215\275\234I\001\275\265\003\263\274M\023P;ec\301\274\235:\326=3\304 \275\353\210\024=s\033\'\274\320U8<\245\227\210\275\302(Y\275\202A&\275hu\227\275\244\244\310\274%|S\275\366F\246=\346\251`;\315)\037\276kxB=\327E\203=\376q\264<\177b,\275\262\240\255<\300\201\320<\376\017\214=\374\320W\275\372\347l;*\374m=\023\264\360<?\032\337=\021G\023\274\207\275Q<\302w\177\274\360c\311\2747\242\365\274\212\205\256\275h\253\372\274\020K\331=\331\307\357<\375p\261=\316G\024\275\351\375\260=\352\252u=|\261\226\275\356\364d=\000\367\025=$\221\337\275\362\270\215<\230\374N\274@\021D\275[\361\357\273\201\373\361;\033\331\034\275\320\264\253=\263\033\371<E\231\276=\004\337\200\274\241\022\r=y\213\t=j\365^=|3\352\274}\311\010\275BTK\273k\243\336\273zva\274\014Z\211=\310g,\274\221\323\022<\232Y\353\2742m\323\274\343MX\272K\346]\274\034\275j=T\351 <\251\246\335\274r\321+\274\373\2117<8T\332\2743\n\032=\307b\223=\324\373\210<m\345e\275\243nV=\212\020<<\036\016r=\256\236\332\274\3037\372\274!]J\275\264\2556\275\366\206\227\275\277\307\t=\270i\305\273g[\002\272\r\020v=\221\342\\<\372T\204\275\177\336i<\216cd=@M\374\2711f\304\274\276\037\n=\003\024\t\275AZ\204\275\202\234\242\275`-\"<l\321\232\275\253\261L<\356\332L\274&\226\275\274M\212\324<\207-\371\274\002?0\275\263\351\307<\305\001\023\275e(\327<T\207Z\275F58\275\254\202\250<\230\037*<\215\265\261\274\310\223\210<\341\207\361<\302\017{<f&@=\264\275\302<U\031O;j\266b;\256\213;\275\024,\002=\332\364\r\275T\000\277<\357?)=X\374n\274\260`P\275l\315\250=(\361S\275\351\025\205\274\212\006\374<\361b\356<j9:;\330\212\337<\273\306Y\274\225\235\317\274\313\207+\275\345\033\243<\323u\323\274\230\226\207\274Xg\242<\340\322\370<\201d\222<V\002x=Euh\275\263\263\230\274\220p\005;f\360\\\275\024\375U;\236\241\000=\001\366\265\275\235s\3509c\n\360<\303\210\343;(\026:<3\301\246\273)b\351<\357 \215\275\247^:\275\266\304d\275\031@\325:\224^\t=`\200\264\274\230\266c\275\324\343\020=\r\217\313\2733\316t\273\353\006\307=\312\\\207\274\255}\360<\020\204\302=\265\351\355<-<D\275K\003r=eh&=\017\013\217<\026o\033\274\340\371~=\225\207\024=\204\244e<Gf\262<\027\004\031<w\315\354\2759\230\263\274\246G\357\274k\033\234;\261\030R<\244\344\023\275P\003\366\274\201\270\373;\324\020\226\274\241BK\273\243-p=\366\007h\275\221\314,;p)\021<\345\005\263\275k\007\222\274F\277\026\274\327\027\036\275?\203g=O(<\273\265-\356;\216*\240\275\261\276\235=Ep,\275\014\241\005\275\344\021\022\275\021\026\010<\305*\271\275\222\202\031=HS==\377\020==\335\0228\275\264\250\310;\037\375\002\273\"g\212\275e\235\006\275\022-\301\272S\311\202=\265\307\325\274v\240\010:r\313\237<\026\222\031\275\303\220|=\026\331e\274\322\365\306\273\177\256<=\021\230f=\366I\021\275k\010\214=\321O\253\275q\'#\274\205Wu=\007^\r\275\323\"\236\274\256\334f=\230\247b\274=v\016\275\241Q|\275(\205\034\275\326\210\2069\345x*\274\336*\t\275JH\243\2747\245\037=p\212\225\274\315\375\273<8\373\031\275Y.x\274\340\031+\274\004\204?=\212\227\202\273\246\254\002=k\346\252=!\230\232\273\374\214\357<\344\232T\273]\002\272<\255Q\210\275\274\330\322<\341\005\231\274\315\240J\274\300k\373<\334ka\273V\225*=\343l-<\315\004\214<j=p=\335\315\221\275?$\314<\007Hr\275\002\006\306\274j\376U=\255\222h\275\222\037\010\274\256\032\031\275\366\204\t\273M\363S=\263\274\350\274p\264\251\272\214lR\275t\256\326\275\374\026\312:\267\230\020=\027\3755\275\325(Q=\035v\232=\362)\027<\221\366\205\275\2072\001=z\264\225\274\004\315)\275QC:\274\270sc<k\302Y\275\251\"c=\232\022\345<\240\277L\275q\007\343\274\233\315\334=\242\030G\274\035\370\215\273.\337\314\274\037V\210\273\230=s\274\017>/\275\315\177B=\017\200k<\324\014\'\274\203s\325\273\307\303\021\275w\202\235<*\232O=~x\305<>\0306<q\253\241\275\364\326\266\275I\2318=~>A<\235%\272\273\n\360\213:\307\017\353\274\323\037\232=U\306\231\275@\"S\274K\004N=\373\'\332\273\357I<<\261\307\267<\270\210\247\274\362/i\275X\226\232<\024\354\036=\025M\227;\373\3344\275/\3152\275\3409\221\27407\242\273\270\220\207\274r\350\036=\357\036\212<2\315\007\274:M,=\365\340\326\275\020\321O\274\245v?=\266\035\017=\253g\232\275\332\202\233=\357\026\003\275\3618\017=\014g\031<l\245\227\275\330\217\240=\322\242\342<\353\001\007=\354\236\250<*\031\024\275`\211\235:Q\321\244<%\335\010=V\217\217=:2(\274_\033_<\354\350H\275a\370\026=\346$y=2\344`=\322\364\037\275\236\237\213=~%\364;k\225\206\275\201\026\001\275\260\'\025=\262\223b\275\303\017\322\274\020\366\030\275x\022\233<&=\356<c\2172=\264\362\320\275\"0_=\272o\306<\304K5=\342,\207;\270O\314\274\202\035g=\345\344\355\274\354t\272\273\323\300\323\273\330~\207\274\357t1<\221^\337<\353\020\330\275\177}\374<\340>\300<\266>\317<\273\031\325= vR\275\246\267\\\274\220n\232\274d\310\251:%\333\273\275&=\234<]\353\214<\211\036\r=d\321?=|\347Q\275\0169\027=\024\233\337=\243\337\230\274\2731Y\274\204\202\366\274~H\214\274\323\300\222;\205\241l\2754\210p\275\335p\265\275O\311a\275;\327\262;\230\247T\275\034\305\035\275\272\336(=I\244\344=\026\274D\275e\333\215\275\325\032\205\275\303\315\020\275%\246\342\272\311\327\240<\366\326H;-\234_\275g\\\345\274\334\214\300\275\020y\234<\374\207k\274j\021\201<\262>w=\230h\'\275\217\336\201\275\205y!\275\346\177<=\302\177\344<v\255\311:`\203\257<\362\311`\273\307gE<r\341p\275\305\301i\275}\266\220\274b\346\202\275\375\226\023=u\214\030\275n#\322\274\377~u=\234\332|\275\375g\376<B\321\262<\256@\037=N\232\343\274\316\017`=o\356z\274\300\217\332\274\303\220B=\010\037C\275\006O =Of\257\275q\000s:\235\201\206\275\256\010<=\177\250\265\273\375\320\327\274I\213\200;\325A\237\275_n8=\233<\240<\256z\027</4X\275P\264\005\273\266\312\034\274m\321\361:\315_\034\275\207\206\217\275\035\234.\274\327/\013<\346,\351\274\2416}<\034\013+\273\363[\033\275\277s-=\220\006\276\275,\001\237\275g\211\304\275\036t\312;\331\246\025=\330\220\205=\335R\246\275\243\341k=\230\226\252<\010\335><\343\340\330<\335%\261\274\252\250\363\273l\022\177\275\202\216\236;J\177\334\274`]\306\274\230\360\210\275\233\210*=\243\340\350<\326I\321;\215E\032<\367uU=\254\r\025=\270\022\267=\331\306b;\266\313\026=)\n\036\275\000\322\021\274\311\376\377<\r\373\377<X\242W\274\350\013@<\264iU\275v\206X\274\372\177\204\275\305EX\274Yk\307;\t\004\207=\311\210\222<\315.\036=\260\220\276\2748\324\245<jz\214< \363G\275,\336P\275K\037\312\273\203X\307\273\357\244n=\321\326\265\274\307\241\343\275\370s\334\273\323\213\"<kiH\275\357\367\201\275\355\230\331\274\374\014\267<=\371\024\275r@\341\274(\351\320<}\233\314<\3778\200\275\002\350\206\274\310\200\200:\223x\234=\343\313\277<\247\251\361<e\033\253\273\242\035\306\274S\363\231\272\250;P\275\304\207\226:\2277\307=\013\361\214<\315,\366<\255$\311;\347y\303<S\262?\275& \324<\"\224\251\274\364\200q\275\032\300\301<\021\203]<9\'\277;n\272o<W>\022<v\327\372\273\301\263&\275FC\026<\345\203\031\275\305\332\371\274d\245\210=\320\362\326\274\034\250\250\275[\341\036=wo\237<\364b\017\273\026\001\020>\362yY=\256\210\023=\tL\344\274\362)\367;\3374\270=w\177\027=\024\3205\274\013\371\217<\r\347x\275\020E\000\2743\357\333\274\005\216\210<\206\250\251\2742<\241=o3-;HAK\275f\3620\27488\035\275\261$z=+7\263;L \357\274nN\272\275`.\356;\347\376d\274\001\\\375<8\320\020;\200i\220\274\231\014/=%\371&\275\343\250K\273\2544\271\273\333\267\362;\320\\\265\274\226\256\205\274N\362E\275\334\233\370\274\376%k\275\3779\236<\311\\.=RH\334<\274\366\346\274\261\207\227<\016\335\217\274\275\305\007=Q\265\221<\372H\n<\260\237\221=ib\301\274{10=\363\'\014;\217%}=\257\213\255\274\262\214\213=\225I\336;\335\262w<\021\225\250\275\214\321\271\274\324\025,<^.&\275\355\340\255<xQ\237<\261\314\367:\220sj<\252_\263\274d\335\220<\206\214$=\211\227\264\273\265\004~;${*=<\026V\275\3635\234\275\345\345\222\274k\252\212\274\031\232\023=\212H\372\274\213\2102<\257q\276\275\320\032\206\275\031\345\367\274P^\244<a\334>\275\241\304\223=\000\177\234=\346\021\343<\030\310\214\274\005\312\257\273\036\022\270<\255\314\300\275\025\033\006=\334\003T\275}\245\002\275O\331\271<\311&7\275\355\231\244\275=\025*<\205\262\'=\031\302A\274\314E \275\341\246I=!\372\245\274a\355O\274l_v=\2760D\274H\020*=\253y\327\273A,U=\004E\020=\243\230\213<\331H\222\274\372\221)=;\331\220<\256\272\026=\023w\263<\201J\020\275\300Sf=\021\035\262\274\243\216`=jc\265<\213\254H=\305S1=\226\261^\275f&h=\256~\217<\257\253\245<\nm\021=\206Q\037={\321\232<a\027\215<Y\202\365;r{\275\271\033\353\022=\257&\025=V\250\314\274\326>K=\241\310\244=\244\027\003\274\212A\333<\\w\003=2ej\274Y\237T\271\330Ty\275\366%H=\2167e\274X`\324;\200\310(\275rz\216\274H\016w;\215\220k=X\221\245=LR \275\252\365@=\3673@=$%\030={\360\264\274\233\215\003=\344\331\211\273S\207\312\274D\237Y\274\246\006\314<\251p\213\273c~%\275+G\3376sj\006=\240\335\032\275\377@\235;\034\212\336<\213\332z\275\0329\210=\030#\235\275\022`\017<uH\202\275W\313\252=\333\366\227=\027\316\201<\333`\340<\210\\\206<\327\243\265=\225\273 <\231\201D=\342;\212=\036B%\2744\016\276\274|\201\205\275\227\374\01795\374\253;\0266\224=\335\202\014<\270\305#<\371\331Q<un\255=i\201\254=\023\345\306\273\033\272\226\274\037-x=\027\230\250;\326\034\274=\304b\302\270\231#\356\274\330\241\355\275\214\261\211\273\002\343J=\243\270\242<\314D\001\274\372\333\277\274\366#\022<s\353\235=\352\365\274\274\211i\322\275.N\300=\325\372\334\272\271-\202\2755a\023=\322\356\016=\t\352\206\274<\245\226;\341\237\374\274qg\025\275\027\212\r\275\215:9\275\245\374[\2738\367+=L\231K=\227\300-=\253\007~=98\036<\320\264\351\275\206\227\256=\031\200*=\265\374\024\275C\367h\275\2471\010\275!\333\n=\366T\230=\023\230k\275i\344\274\274A\2658\2750\206\343:6\356\200=ux[<=\017s\275\325\004O\275u\215\352:\334\264\335<\230\303<=\006\035\346\2753\355\326<\tm[=\232\372\317\274\201\033\326<\253\005\205=\210\245B=\016\0064=k[\305\275X\356~=\204\260\013=\270\331\035<\351\362\273\274\234\261(<\372s\253;\325pu\274\024O\013\275v\353\013\275\312o\247<\373tf\275\302\262\024=@\225\233=.K=\272\007\203\000<v\226\365<\035\0130=\324lk=\304\034\235\275\254\3226\275/\n\277\274q\277\270=\333\340\355\272{Y\224<\237\212\247=\235e\006=\342\335q=K\036\267\274\\C\305\274\213-\321<\262*\317:yV\316=Q\332\351\275\3073 =:\336\n\275B\227\223=h\270\360\274\305\031\273=/\250r\273\363\231\332\274\301\353\034\275\317\324\360<\0162\320<\021\305\010\275\207\265\253=\252\262\014<\035\277\032=\307\300W;\023I\016\274\363F\023\275\260\n\273=H\315\r\2736v\242<\227\367g;\332J\237=\002\3608\275\033\353\231\274u4\364\274\242\227~;\311\\\r=\360j\006=3\027\233\274|\346\257\273\243n\225\274\031\322)=c\216P=\2712\371\274\202W\020=%\233&\271\357\356\215=\002\220c\275\247\244\346<A\235~9\274\371_=B\261T\275\022\231%<\272\n\342<\364=\276<\357\302`=\020\333\222=8-\032<\207\242\357<B\302\341<d\324\264\274\n\213\310<s\033%\275\212\030\320<\342\254\351\274#\013\025\274#;\243\275\300\365%\274\232\360\033\273yW\022=\t\213\203=\210\350\216\274p\331/\275\013\354:;\256;\241\274\t[\255=93\276=|\243O\273\231\r\304\274\013,\007=\272.\025=Ls\200=\2133\264\275\307T<<\361\312\240\275\372\212\225=u\244\032<25\271\274\205\035Z<|O\317=-\362\003=\310\330&\274\341ym=\247\\\252\274J\247\302<SU\372;\275\026\033\275\336}\362<\335\r}<\217\221\211=\356\366q\275\247\346\207=;>\246\274\276\271b<\341\220\023\275;N\207<\256\326\246\274\205\3318<\t\226\255<\266\216\361</\023=\273g\301\213<\372\275^\273\006\263\r\275\206\256==\332\222\241\275\377\317X<\363\013\334\274\232\331\245\274\000.8=\266\263@\274\244\322\361\274az\023=\347\212;\275\311\230H\275E\264\033\275\031\325\355\273a\326\215<!\323\224\274\263\000\230<\374\341b:z\r\211\275?\315\334\274\254\202\376\274`b%=?#\247\275\221\235\256=\005\231\224\275\225\211[\275\343\253v=3\'#\275\216\017\311;\364\253/=\334\030S=Me\332;L\347\021=\276t\354<\214s \275a3?\275\356o\243=p\216\'<\311\273\236<#\014\016=\n\177P\275i\377\251=e0\037\274B\204N=|N\212<\213^j=\364\241O=\332:\207\275\376\265d=|\325\307\274\311g\313<\324W\005=d\031\303:\210#\335\274\231L:\275u\331&=\237my\273!\334\324<!\363\346<\354\353y\273g\0072<t\rV\275Ab\242\274\352\256\253\275m\303\017<\320\202{\274\322\362)\275\314\016\264=c\270\007=8\220\005<\314;^\273\255l\007:\255_I\275T\276\032\275\215W\223<^G\026\273\312\305g\274\323\007\342<g\252\345\274@\310\305\275\211\332D=\210\244\231\275\r\034\375<\027X\342;\317P\237=\315{`\273]\032\273\275_\246\233\275\254u\341<\035\210\034<\202\334\324\273>\"\252; bg=\025<\260\274\335\233\214\274\014v\177\273R\016\325\274\353\227c=|;u\275\213\264/=\267b1<\273\315\227\274d\303M=\245\357\200\275\361\2202\275Z\352\301\275\226 \272\274\344\363\217\275\257Q:<\357\'\002=\234\007\372\273\375\264\223\274\272\032\351<\221\311-\275.4\255<&^0\275\346\350\325\275\215\2202==\213A\273\302\222\274\274@\316e\275\222R\206\274\301|\322<\362\341\206=Q\206\263\274w\264\265;\231\035D\275(*\204<-\376\013=\340\001\007\275\217\2147=\337\022\031\275\240\314Z=\3346\277;\364\356\222<\224\\+=\211\215c=J\301\204\275\341QC=\356|\353<\367\340\337\274\214\006\234\274\256,\216\2750\037\340<\355\256\275\275\235\025\037=\211\273\367<.\022==\"\344\272\275\2268\242\274\234[\034\275\233*\033=Z\331\310=\277\n\021=B\224~<\204S\267\274\314e6\274\004\276\2175\335\212@\275\365\037\300<\253(\002\275\372\356\272;\2712\335\274\317\333]=$\027p\275a\306D\275U\360\201=!\006\030\275\252\214\005=\257\267_\274\202\273\316;{\265\230\275\320\270\340;t\274\316<\027\2363\275\333\n\004;\227\257\233\274\002\2725\275\375\250\010=\327\221\257\2749\035\037\275\345\027\233\275\306\251\345\272(\361\027\275\266\024\273;\342\017\376<a1\206<\000\226m\272\230\001\"=$F\270\274F.o<\332xl\274\031Zx<O\026\006<\0057\006\275\031\305\037\275\026\264\320<)i\216\275\316\275\333\272\244\265W<tj0==\335\252;@M+\275+\254\001\275\205\006h;\006\214y\275\252\305k=\315\250\377;\021\222\021\273^\331\026=\365\315\232<\271\033\010<\326\253`\275\262\3416\275C\023\210\275\306j\034<<?\230\274\214K\264\275\026>\003;\214\345\262\274g\000\225\275\227oT\275\036\360\003\275\177\224\n<`z\332\274\230q\331=\2469l\274=\353\263\275\017Q\322\274\227\352\006=,=\n\275\314-\303\275\272\014^<\376\246Z=\357k\353<E\t\244\273`N\227;L\034\334\274\266\375\212\275\242/\242\274\260Q\237\273x\250\303<,\317F=\230\004\243\274Qu\245<\031\254s=\221\255\221\273/i\210;\356\375\375<\025\210L\275T\375\023\275\253\2458\275\357\367\230\273\000\341\351\274~_t=\317\314\023\273W\362Y=!%x=\327~\272\273\331\307\213<;\362k\274z\360Z=\3355\210\274\266\311T\275W\3720\274\341+\t\275\346GQ=\314(\325\274f\027\003=\222D\024\271\367\211\363\274\366\310\273<\252;?=i\320L=Z5\271;\230\376\330\274\226\240\251<~\030\n<\222\324%=n\n\"\275?!\017\275\200\300\016=k\036\317\274E\261\307<\337\264k\275\263\275\335=`\255.<\362bG=\323Y\027\276tV\202=\201\371`<u\345q\274\275\250s<\326)[\275\022\300\263\275\363D\\\275\177\020\017< x\333\274\nz\201<\277\326\377;\342\326\260=X]\022=\232\232\031=\377\027\254\275h\313\317\273\020_\225=\247\352*=p\024E\272\032\007\244\275\207Y0=#F\317;\007\375s=,\313\336<SJ\036=\024\232\010\276\270Y\033\273\263\026\352\274\305\025\346\275i\225\226<\342\312m\275g:Z<\215\302\341<rk*=\022G\031<\317\225\372\273[\010f\2742\236\222\27533\316\274u\025_\275\223;\272;\003\007\303=}\340\334=\335\344A\272\3638\207=\256Z(=\303oB=\323\2538\273\275\025T= \251\262\273\263\330>=\202\001~=\321\324+=\214\316^=zk\345=\344\177z:Z\344\340<5\307P\274\265\342\347<X\337Z<;\2065<w\013E\275\3422\313\272\\\306\177\274\273\007\215\274cPA\275h\010\013\275Gc\331\274\rb]=\343\214\360;\362^\211\275\'{\016<\335\304\000:\366\335\034=\0315!\275\311PN=\025\240\033=\236\355\006\275\226\201\256<\025\267H=:\004\000>f\r\232=\000\251\247\275!\324/\275\367\304\214=o\315c=\343\351\177\275\253\000\001<\221c\305\274\214\3447\273\000\020\230=@\033\203=9\271\312\2744\204\032\274W\250\360\274r\034N\275^V\334=3\257\255\274\000\203\205=\261 \200\274\254\244o\274\265\207\260\274\273\0374\275R\031]\275?\'\027\275\214\266#=\370\n\240\273P\3260;v\265\014\275\323\226\245=\257I/\275\336\022h;\277\376\252\274_\357\027\275\000\230\006\275\351\326\362\274\214\001\0076\376P\306\273\223[\324\274c\030\307<2\320G\275\305\231\304:\244*\265<\010rP=l\022\367\274V\247\302\274\307\001\t=\"\314\201<\257\032\307\274\034G%\275j\230\247=\216\377l\274\266\205\277\274\006\025K=\254P\332\273\227\3162\275\254q#=9\355\210\273-\013\227\274#6\225=Y\330`\274\203\337E\275\34755=\332 \247\274\213>n= n\220;I\\\263<\205\262c\275\\\351&\275\243K%=k\201\007=/q<<\n\362\337\273\305t\025\275\023!\224:\301\353\350;\031\375\266=\010\"\220<EF\322\275{\010\204=h\267\275<\226o-=\321[~\274s\253@\273\340!d\273\361\241j<5\336@\275\200\234\222<\006yv<\226\363\003=\260\247\354\271\367\335\247<\"\023\200\275\217\260\236=\030\225\035\275\037\022\260\274Z+*=\261r\350<E\310\272\274\201\273\014\275\210\364\035\275\\q\271=q^\227\275\345\222:9 ~\211\274\340\234v=\223\217\020\275\251\223\004\275\342\251(=I\026\241=p]\347\274\333a\t=\326|\355\273\016\365|\275\265e\226<\345\361+\273$\263\263\275\315\270\220=\022K\001\275\033\327\026\275\021\037/\274C\2330\275\356[\236\273\nG\317<x\214\202=4\025\236=$O2\275.\221\243\273\035I\240<\002\207\210\273\n\370\242=\312\347\226=\213\ti\275\013\217\206\275v\244\032\274\22547=\037\330\007=\235\001\200<\'c\377=\254\375\313\274]n\306<B\022O=\375\354\352\274\373Gd\273E\353.=\005\275\264<,u\324:K\364u<\372\307\177\273`b6\274\346$\262=\316e\322\273=\036\313<\330\346\006\275\003\375\337=o`\312\273\364\342\206=y\356\276\275\345\221\302<NB\017:\026\263\034<\270\"\223;\261q\305\274z&\016\273\305[\223\275Ue\212=\036+\331;Q\252\203=\350\313\314<7\246e=W\323\252\274\236fY\275\315\020\345\274\\\227\217<>\272\026\275\006m\220<\010\314\006\275\002jz<6p\254<j\257_=\347\241D\275\275\313\036=U\247\000\275\377\020\200\275!\350/\275\275\335\000=1\263\'<3\335g=.\245F=9N\230\274\364\347\231\274-s\n\275\237u\341=\235f\320\274h\271\327<\242\tQ=S$x=\312\320\222\274,\332l\275\357=\207\274I\360\233<\256\003\272\273\222\335\340<\373?\212=\276\260\013\274]_\006\275B\316\354\274\274\001\301\274_\242\n>c&\\=\255X\373\274RN\233=\363\206t\274/\305\256\274\006\264S=\301\3371=\371\016\313\274\214\316\323;K\300\310\274\005\007\217<\3363\240\275\027j\032\275\036\005\310\273\251\363\237\275X\r\341;\277\273\232\273\316\213\006\275\317\334\023=%\233B\273\n:\256\274hn\n;\334\372\306\274n\034K=\0268\217\275\006P\245\275\314\367\371<\231\n0\273\233\307\373<\001\243,\273\270U\255\275\236\306&\274\035\010\215\275Q\311\002=\302\240\216=\276\371A\275\016\245\272\274\2255<\275\2522\227<\347\333Y\275\227\013\247:\243\342\234<\300\354o<5\266f\273\247\220w\274K\202s;\254\253?=\315\032\271\273\203\'\302\275J\226\017\275\016\202\017=L\027\271\274\363{\261\274\313U\221=\270\353\203\273\366G\307=\344\211\024\275\034++;\300|2\275\235/\214<!\254\301\271\017\327\021\275\230&\352;r\223o==tc\273\371/\365:\356\235\316<\261\372:=\220\260\356\274\336\021p=\260:\320\273=w\007\275MR^\275\342\277&\275\3535P;\336\360+=\n\206+=\221\2427=\377\024$=.\312\211<\013\360\317\274\003\351\300<v\206o\273\274\300s<\200\333\005\275M&F=\211v\337<\032\305r=F\365\200\275\224w\215=\230\"\035\272x(}\274\313\232W\275h\257\'<\207\304%<O\252\214=*\023\345\275\031\033\232\274\374\304\255=\266j\342=x\2754<\001\036v=\2142\224\275\315\254y=\344m\240\275q\006\010\275\311\337\357\274\353\206\216=\217\237\002\275pE\026<\365\262T\274!\251\r<G\3616=\217\306\272\274\275\371\200\275D\016\346\274\3140\016<\223\021\226\274\360\333\032\275\352\232\240\274E\037X\275n\217\346<\235\025M\273\344es<vU\000=\374\222\251<\226%\210\275\326g.;1c\353<\216)/<\023\233\246\275\320\277\000=:\006\013\275\274\306,\275\312\203\010=\220z9=F\204/\274\316\373\311;\021A\211\274~\373\263<\355\"\201\274\260C\r\275 )\234<\375:\342;6`o\274S\177==\302\262\226\274\2171 \275\325\001\351\274\312\232\246\275A\241\334\2748\336\007\274&\013\036\275W\202 ={J\215<\205\0305\273\201\254X\274\014`@<O\341\334=\006`\033\275?\034W\275\32448\275\000\313\200;/\rd\275\023\210\263\274J\025\224\274<]\246=vj\370;\374\235)=\215\232\027=\304kM\274\326S\"=\374H\321;ViO\275\257`\353\274\257\310`\272\'\340\013\275N\326\241\275&\343Q\275\334\022\360<\203,&\275\353J\310<\257$\027=\325\363L<[\373=\275\201K=\2751\000\256\275\272\307\206\275\256\324\375<\341\201\331:r\303\270\275\200\007/\275\364g}<\025\237\265<\220`\302\274\245\0144<-\357\023\275\003\333N\273T\226l\275q\021\007\275\006`\t\275*\032G\275\367 \002=y\202\344;9\325F\275\356{&\275\035Y\206:\022Z.=\203+\373\274a\305C=\032\0104\274\351\003\210\274#\247\225\274\334(\306\274\342\006\334<b\330}\274\335>\233\274\341\244\220\275f|\036\274\362\200\031=\374\355b<k!~<\3231T=\366L\314\274\225\270\321<t!\341<$\355\002\275\204A\217\274\302\3402=Uo\213\273a\346\027\273\274\220`\275\222\3357\275\255\361\206=\244\324\033\275\027O\320;&\177\222\275\251\262\240\274s0E\275V\254\357\274\264X:\2749#\032\276\2003}\275\021e\217<W\036\253<X\305>=\t\233H\274\227\000\t\275c\nN\275OAj\275\357\"\023=\'!!\275\\\221\250=\244\203\233\272ifl\275}L7<v\310\311<9\210\376\273ND \275\')f=h\220\261=\034\214\221\275\222\307\037<\207\025\215=\016o\326\274\245\265\304\274\220\323\312;Fp\002\275\207v\226\274\311f\014=\004&\357\274\234\331\254\274\010\354P\275\377H\327\273q\313\265;6@\273=\027\177(\275\341\272^=g\'\210<Rk\273\275{\t\210\275}\217\261<k\200\014=s\007T=\022O\212\275\350\370\023;\360\016\215<\007,\262\273N\213\205\275\022\365\233\275\326t\370=\216FN=\000S\206<\253\370\\\275\244\255\235\273\217\010J\274\313G\273\274\236l\023<\233\233F\274\276\312\326<\345\022%=\225\3429;\235&\362\272]\034\004\275\304P\003=d\204\242=%\364\204\275=\003\313=\302yA\275P3\001=|\272\376<\313\002\223\274\350\247\306<\026\201\261\273@\270\013=R\356\370<\230\306\002=\326B\376<@\236\344\274$\320\032=C\234\362\273\201W\242<!eD;\235\340\232=\266\215\177<\024\005\216<\274\334\314\274\334w4<\276 (\275;\251-<\312\374\337=\273S3;\014Mc=\2024d\274\236\207\301;\235\\]=\236\353\317\275\363i\225\275\017\360J\273\206\342\000\275d\027\240\273\345U\231\275\013\201k=7\t\222=f~F<\375\360\261<\203\034\301<\255:\006<L7e=\314\307\023=\351\264i=\201P\222\275\235\004\220\275\006C\001\275OQI=l\355\227<\024\361\031\275O\352 =\353\274\324<\257\371\021=H\316\027<\202\247\036\275\217\267G\274S\034\337:Y\001\271;\30658=\324&\254\273\370\024\031<;\372(\275$\356Z=\333\323\225:<D\000>%\334\244\274g\244\034<\270\027\034=\303F\202<Z\211n=\341\177\253<_\304\273<wG|=\003\035\210\275\337\002\253=j\261\323\275S\235A\275_\307\371\274d\277\337\274\233\033\212\274e\020\240\273\035\325\362\274\3509\262\274\322.V\275\272]\245:\r\277\023\274\257\357O=\257-$=\341!D\2755IM\274)\267\031\274\226\031\317\274\230\031e=n,\373\2741\3773\2726]\357\273&\025\001=\344\3319=\205\300\370\273\013\2130\275\274\'\301<\220\005\335=fX$<\243l\240;\245\254\367\274(\003u\275\301\260\207\274\257\360y\273\214\2507\275\005\336\343\274\314X\\:\200\212\216\275\013\020\200\275\346\361q=\251\331\326<i\373\300\274\026;\265<\362\347\235\273\014s\217\274>\324l< \230@=G\302\014\275\341\235\n\274\032\330j=\252\270>\275l\373\270<9\n[=\035\343R<s+\030\274\275\271\256<\256rb=y\025\303\273^\337\243\2756\022b<Gn[\275\207>R=1\2639=\201E\301<\244\371\016\273A\346\365;\246\203\301=\375\210e\274\3368i<-_\362<\342\374\013\275\3721\220\274\210|\232\275?5\351<\2350\004=\251e\177\275K\312A<\304\370*\275\252\207\004=k\323\217\274\260\366\213<G\320\241\272V\333\001\275\006\305\312\273\001Rz<tPV<\213\224\225\275ck\207\275JD\334\275\376.\021\275k\020&\2759\256\273\274\3622*\275\353\347\202\274\275py=n\'\327<\366Tm=\374a\216\275\366\302\233<\034\320L=\032\322==5\254\242=\216\311\374\273\226\251Z=\023(T<\233\346\272\274R\330\024<\212K\216=\307\354\222;I\\\377<6\305\030=\3548\215\275-D \275\276\300\026\275\004A2=\361V\346\274V}\307\274l4\223\275\241\264p\274\177\330\273\274\020\365l\275\233\244\\\273\030@\311<b\016j=\304!\265\275\347\377\211<\313\177b<x\277&<\265\327\266\274m\204\212\274\177U\244:\231\322\231\274\024\3052=\t\310H\274\240\226\016=\320\341\022=\n\254\201\275\013\247\364=\334\317,=\030i\014=\016\326\005\275E\026p\274qV\235\274,\036\301\274G\016}\273\037\372#=}\330\301;\373\004B=mv\234\273\376\022\006<\354e\377\274\233$\364\274=}\211\274\223\3462;\272\003\005=1bz<\267O\236<\255\346,=\233\347\346=\356\215Z\274\022J\357\274\022\034Y\275\t\205W:@J\010\274\254W\240<\261\314\023=\204\377\342\275\244Y\031\275\0041\205<F\316\327\274\010\204\033=\207\r\234\275\351\272\207\273\303\304\350<;\257\243<\353oW\275\226?\204<\020\260)<\032\323\027\272\r\247\322;\223b\016=]\222\321;\367\002.\275\353\r\203\275\376\024\212\275Ixp\274\315\325]:\334\212\310\273uI,\275y\036\212\274\036K\256\275L\333s<\357\371\020=8\332C\275\027\334><o\037K\275\360\277\242<T\020\n\275\006\347\304\274\322\375\303<>\324\200\275\000\202\355<\034\237\020\275\311Q\022\2739A\002\273\356W\317\274S\006\367\275\270z\235<I|\340\274]&6;\005\255[=\212\236V<\024Gp\274\257\010\301=\265\363\033<\27450\273\320b\320\274q\032\216\275y)}\273PQ\010\275\301k\250<\"\313e\274\\\n\252;\025\000N\275\371\262_;\270go=\334\254,<\211\022\177\275!\211S=[\322b\275\204\370\251;\354\036@\2758\233=\273\005!H\275\200\200\300\274\344\006\327\274\226\244\021\275\261\023\255\274\037\372\235;\266\277\352\273o\267\307=\302\360z\274\254\256\222\275\006w\n\275\3179M=^\246\251\273\213!?\275\026\262\'\274\nd\242=\357\206 \274\202\301\254\273M\345\030=\214\017\247\275|4\244\274\355e\027=\307\004\336\272\332\rn\274\014\246\211\275\003\3079\275\313\273X\273^\n\206\274P\301F\275\301E\216\273\266\223L\275\214\307\303=\313\205\275;V\267\304=\304~\010=\035\216j=W;b\273\261x\355\274\267\370\377\274\322\253\262\275A\347\317<id1=#\272)<l\250;\274\375\013\023=\203^9\275Q\230\341=\005a\323\274p\010\200=\217z#=\326b\005=2\3263\275\033\357\210\272\2505\025<I#><\306Kk<\265\244\234\273\030\360~\274\352\025\271\275K_z\274\2461\336\273\305*F=\305\235/=\016\256\030<-\2742=\373 \337\274\024tz<\303\\$\275\244\211\207=\270\332Q=\257\033\372\274\3445K=^c \275$\206)=\234\306\010=\267\357v\274\007\265@=MZ \274\332\255\323<1\351g=\026\236\212\275\260\317\322\273)\331\273<\217n\256<\261\261\245=\375Y\253\2744\273\321\275\364ep\275\234\245\r\275\267\343\367\274\177\342\r=;\3072\275\224\006\227\275N\230@\275\321\036\241\274\202\356\322\274\022\016\215<\301\345K=\341\\\002\275)G\315\274\335\026\000=3\311}\275\016\035B\275aM\233;\245\020\206\275\374\217Q=\362\222\312\275z=n=\232\360\206\273c\212\230:#-\274=\325\207\355\274\207\014\320<\001\351\351=\252\021\303<\370fa<\3154[\275\275^\310\275\332\001\271\274\227\"\306=\302\210\233<\022\361\225;\"\370\035\274\352!^=\005\241\307\274r\021J\275\311e\t=\252\216\235\274\277\027\345<cc?=\3312D=:j\300<\306.R=\243\342\023\273@\004\327<P-\260\274L\354\265<r\374X=\312\324\354=\'\030\214=\211*\025\275\241\304.\275\337\376\337\275<\255\254=\213\t\033\274\0256\351\2744\207@\275U\312\253<\0170\007= l>\275\250\037\300=-}[=\007\n1=\022m\324\274\224\320:\2757\254/=\022]U=9\220L\274\340bH=\031\356J\275\002Q\204\274\302\340\215\273\330W\006<\273\030\277=%$\353<\305;L<\324\276~:z\211\\\274z\235+\275\314\237\004=/\351L\274\212\220-\273k*\n\275+/\231\274\266\300\231\2754\374K=\206\343\337\273\313\367\227=\033\271\013=\352\036<\275\000K\326\273\211\276+\275\2627\025<Ca5=\027Y+<s\216m=\213P\312\274,\271\344\274\372\264\323\275\203\264\313<\021[\204\274-\267\r;+)\n\272\000\234c\275(M\201\274\243\1773\274!\302\351<\361\316D\275\356\311\237\275K\320\321<\362A}<Y,\353\275\271\277x\275\205\025\365\274\353\342q<\267\215[=\177\005t\274`=\007\272\325Z!=\271R\221\271\345\266\001\275\270=4=\261\262=\274p\242\367\273 c\263\275\240\t\236\275\243W\352\273C\252u\275\353\267\035=\376\233\326=6\236\345:\266\033\'<\337\352T\275V\017\372<;\305\210\274\200\250w=\303\242\223=\3037\206\275r\332#\275*\255\360<\023\220`\275Y\035 =\354\004\301<\031\022\246=\271\363\310=\231\2452=\273\354\370\274\303\243\342<\270\332\216=\201\270\327;\217/9<\203\263\314\274\005\307\235<\255\252\322\274u\360\374\274\205\357\226\275\305\014><\035\017\003\275?\352\201;-\234\244\275@Q\330<\232\316^\274\272\364\262\274\245\003E<\330\250P\274\014S\224\275\3172\235=QTy\274\025\316+\275}\225\227<\377S#\275Y\312\237=@.\271\275\206\201,;\\K\274;+7\200\275_\025\025\275\213y\013<\031\216\262=sh\2519\312\275[=\333\204\036\275\245\252\266=\023;}\272r\233\017\274\006\010\026\275\351\211\2139\277\317O=0\347D\275|\214\336\274\365\3711<\312\226\334\274I\024-=\364A\334\275\341\351\277\275ow\217<\3431\322\274\351=\337\274\250,\226\275\266\372F\272\236q\334\274/\341\233;=\233\364<`R\027\274\366\023\237\274\373v\226\267\210@u\274\354\"$\275y\'\217\274\343\024\016\275\310wo\275\014\243\236<\0140\203\275\2344 \275)3\241\273:I\010\273\024\327\332\274\030sP\275\373\026\212\275\203\327Q\275\266lg\275\273U]\274G\000\275\2749\256\030\2754\'\261\275=\027@=\220\006\005\275[\323\000=\365n\002\274A\242E=.6+\275\264\212\241=l3\220<?q\315<\023\361M<\324#\233\274\274aw\275|\370\343\273\341\245\275\274Fop\275\351\231\242\274??\212\275\334Y]\274\311X\260\275\307\272\300\274\331\004?\275vl\000<\362\324\025=\372s.=\255\266\263\275\233\362;<\320\314\223=+Y\206==\303\257<*\376\242\275r\341\215<y\361\030<\304\245\037=\207o.=G\3125=\260#\317\273\224_\224<\341\232\032\275B+\212\274\375\232w\274\004KV=*\207\237\275\223\325\001\273\014\207\322<v\316\213=\022%i\275J\023\022;\0045N\275\312\251A=\n\305\371\274\346l\005\275\263\007\351\2742\242\034=\022\333\325\275\336>J<\254\255\214;H\324c<\272Pw\275\304{\377\273\300\335\304\274\217\267C;b\371\230\273\366\000S<L\252\n=\256sd\274T\333[=jZ\275=3\201\210:\350`K\275\0229\237\274\350n\206\275\231Cj;\0014@\273\213>\271:\200\333\222\275\230\333H\274m\277\342\274[\211\261\274+~F=`\026\020<\227\333\265<R^G=\257[\210=\302`\327;\016\224_\274\350\272\267<\024\337\337\274Bn\346\274\321\001\035=\374$N\275D0\251;\003\270G=S\370\r\275yj\005\275B\320\316\275n0\355<\300d\356==\343\310\274\001\010\n=\317\312\202<5\356\205\275$^\251=\314\272{=\255n\243\274a\2643=\213.\201<\"!\002<a\022\201\274\024f\264\274x\004]<\374\324g<5\254x=_\026\'<0\001_\275\007\367<\275\324e\206<)\230\024\275<\243R=M\3125=Dta\274\310j:\275X5\016<\343\246\345<)\017\236<\274\306y=\362\262\025=,\327\236;\335\317\236=\215\332;\275\252\021\333\273\262k0<\273i\220=\360,d\2733m\364\271\310\363\203\275\346\204\313<\306t\336\2734\006\273;[4\026=\342\002K=\264\r!\275?!\307\274\t=\364<\2205\021<\321\204\271\275\250\272\261\275\207\261\314=\214\307\016\2749\303\220\275\374*a=~p\030=_\250o=G\233\307\274\364\315\221=D`\t\274\'E~\275K\017\336\2749M[=\333\353&\275\354\343w=\217\002\243=\355a\312<\\ \274\274s\210\240\275\275\324\271\275`\350(=#%^\274\237\217\221=\302\314\030=\200\ra\272\267\"\215=E\233j\275\205\t\303\274.]\355\273-5X=\247\342\010\274lk\264<o\265-=\275\"\360;\275\032K<\317\236\036=\013C\304\274\254\034\034\275\213\312\326\275\251\013\035\275Q\241\202;\3373\213\274\272\010y\274\005\227d=\360fr\275Y2h\275\037ae<\177\232\350\274\225\222\017=\001\020\324<\223\013\003\275\266\232\370<\357\223h\275nPX\275\020y\037=\242\365\217<\322\023\253\274)\362\260\275\364\354\231\274\323|\327\274n\300\200=\022)\007\275@\014i:S\032$=\206\275\206\274\373\025J=\216\200\373<\307\315\031\275K\266.\274\231\325\205=Y\246-\275\340l\251\274h\365\325<\027R\375\274Tt\031\275\370\221_\275\214\203z=\025\357\013\276\030\266\362;\254h\350<\027\361\2249\220X\024=\300n\033\275\272\017\206;S\023\336;\232\272\257=!\211\037\275\227\245\327\274m\315\334\273~dG<F\362\361\273\025\273\307<<\326I<\246$\227;\207 \033=J\tm\275\331o\304\275/\331\201\275\354\305\250;\251\245\001\275A\366\027=\313\275\233=\305;\376\273TP\277\275\224\241\351\274\225\260\005:e\030E=\301O\302<\355_\202=\036@\343\274\237)\205= \336\224\275\245U*=\255nj\275\177;\306\274\'`\274\272\317\336o;?\321\376<-\220\207<\355k\231\275DY\240\275\345\003i\274w\215s\274\240\355\237=\222\013%\273\001\246-=R\353t\274\246\\d<>\305\326\274\360\343\010\273~\000\314<\363\206+\275M+#=\222\330\006\275\201\276U=V\010\333;\315\220\355\274~\222\270\275\307\245|\274\227\366~;\360\034H;\370\212\220\274\023\037S=D\251[=}k\374<\277Q\217\274\201\0063\274\na\271\274\021\222:=\352\023\003\275B\217\265\273\261\266\330=\241rx=WYV\275\265\356:=\302\263\020=\331t\221\274\302\225\252\2740,\223\275\267\340\277\2748\214\221<%i\363\274\222\275\326<\030\2177\2727\226\204\274GC\316<rxR\273>\376\\=\221\231w\274\234\013@=;\312_=\253\344\224;E|F:\036\204\007\274\310V\330\274\035\371\321=\303\265\276<\352\265\347<0\027\250<\207$\224=@\344\031\274&\240)\275\022\234\366\274j\345W=S\261\014:\210qE\275~\'\361\274\320NM=\177\216\260\275\240\323\257<=\223\234:\207\217\203\275l\323\233<\332\352\337\274\354M\275\274]\220\200\275J\000x=g\326\252<ps2=)3\253=\277-\004=\370\344\271<\'\350\013\275\326[p<\211\314\205\274\252\331d\275\370:\344<\351b}=\234\023\333\274H\353\257=\256\243\026\274\345&\036\275{\322\262=\256}\002\274\270\277\343;D8\251:\334\213S=4b\230=\2733A\275\270\251;=kM\371\274\252\035\266<\210x\024=\360\025\201;\321\322!\275\341\377d=\245\n\230;O\026\330=\242#\010=\320\022\025=\303\257\036=\036\326\226=_\325\223=\013t\266=\305\315\207=z\332\220;\364cg\272\374\233m\273YI\203\275\342\303\201\273L1\236=:\023/=\3348\215<e\214\211\273\320\266\362;\013C\332=\273:D< 6:=\372\327z=\346\033!\274\245\231(\274\333\005\201\275|\223\212\267A\221+=\273\022*=r\241!=q3A\274&\310\261<7\243\005\275\241\356\r=\277\031=\275\321\362*\267q\302\025\275\320\272&\275\327Ou\272\221\204\360\274\314oS<\306\233p<\312\326;\274<_\364<\256\177M<\2409\254\275\337\246\344\274\345\tl=I\3746\275\013\035\275<\\X\005=W\341<=|(\256\275\351\364S=\275\356_;|u\017=\352\376\203=.L\217=\334\036\222\2743&\320\273\335\313\035\275=@\t=0t\233\274Z?\033\275}k\342:`H\'\2754\316\341\274se\202=\365\310\274\274\362\023x\274x\210\246<c.\032\274\331a\370<;\213\216\275\030\301f\275\372\242\220\274\360Q\357<\360!1\2724Z\260\274\2506\222<\037\226\\\275\010N\n=\2344\224\275\371\243\201\274\023\026+=\343\221f=\343\206{=\tx\201=i\003;=\007\317Z\275\370O~\275=\240M\272I&\240\275\230_\302\274{\272\325<G\024\2349\260+\353<\222=2\275A\0071=\320\022\242\275\267\253\022=\246a\204\274$\025>=\202\267\350;\372^\232=\275\374 \275W\364\177<\033\276.=\250\250b<\007\231\243=\007\003==\032a=<7\rh\275r\270\302=\363[&\275\003\237\260=\2130\355;,\014\273\274\363\243\021\275\020\237)=Qp\315;\027\342&\275\207\275\022\275\300\323*=\005\252[\274\265\224\251<B\332h=\236\204\330\275Q\246\376\274\345-E\275$\021\275<\347\371\023=\263O\216\273K\237O\275\367\364\222\275\343P\306\273;\332\035=)kj\275S\244\205=\037\017\304=\220\2027\275\320\211\023=\017\220\030\274\344\210\r\274\202\\X\275E\224\215\275\305\352G\274hJ\347=\377+\211;\275\232\000=1\263+\275\221\267^=\2026\276\274\236\253\010\2759,h<\210\035\215=\274\364T\275\333(\t\275@`\3439\375PY=\237\317k<\272}\276<\241\305\315\274VqE\275\177\356n=\030 \000=\241u\240<l\370?<\233\276\244\273\362\315~=\304#\224\273n\021V</\234\230\2747L`=\314\351V\275\206Td\275\321W4\275\262\231\010\2744H\016=\271kg\275=\254\265:\002m><\346\333\276;v\372\216<>\223\223<\204\310]\275\300\026+<\220d\365<9\017\274\275\033\271\221=\266\035\212\2751\365\363=0\221\232\273\243\376\310\274\335\347\345<\266\301(<:\000\337\275\365\204\'\275\"e;\274\371\247\222=\203 \304\275k\326o\275\373i\213\274\240\377L\275]\204\356\274^\003\226;cT\245<\255\302S;\376\376\307\275\325_9=\022\023\374\274\321\271\032=\245@F<\275\214\274\273\256\216\"==\242\324<x\244\221\274\000\201G\275\020n\356\274(\323\263;\206\377\232<\024D4=\241\313\335;\312\355\212\274\001\310\371<\327\225\027<\224\230\005\274e\243\322<\311\376==Xp\241\275\375}\243=\264Y\226<tz\203\275\276\003\r\275\335$\211\274\031]\013=?zG=\330\220\236\274\213\377\265;X`\200=n\336\n=Z\267\222\274\264>!<Cp4\274\036\373\311\274\245\262d\274\275\004\013=\27054\274,\000\003=\006C[\275\357\t\241\275l\224\205\275\2719\211=\335w\306\274%,\352\274O\243}<\277[K=\327\301\004\273\267\277\344<rQ\243\274\325\360\216=}]O\274\2604\353;b\302\n=\263\200j<\253m\025\275\211\236\337;\004\200\375\274\263\005\364\274\275\2177\274\307Bb<\262\315\333\274EV\320=\227}\322;\252\3501<\n\026\246\275\223\2431\275\370\375\372<\354\257\223\275\341\256\001>\363\224\211=)\222\274<\3257\013;\202\323\265<\327\017q\275\323\3163=cBw=R-\007\2750\263\034\273\246Y%\275\005\351\325\273X)\325\273\333 9=b\0131<\232\336\010=\212\336\020< m\272<\202\243\315\274a\355\264\273@y`:\352\357Y\274\017\004\n\274U\255\\=\024\246\007:2[\345\2736\316\202=\332\330\207;%\207<=\2367\014<\272\226@=\305)\004\275w>\031=\375\230\224;\276\030\230=\207g\315<\333\031\205=\224:\r\274\006\221\243\274\222]V=Ek\364<\313\2408:\013>\017\274mT\245<\270_\302\274\315q\307\273\233#j=\315|T\275\346\252\227<\276o-\275g\354\362\274\310\204\211<\363\303H\274-\361\311\274\272{7=\260\232\256<Q\2231<I\273\252</G\332;\242%\'<\251\334\307\274M\264&\274\251E\271\274\244\255\036:\225D\346<Y\000\210\274\310.z\274Gw\277\274\214\361\243=X\213\207=0J\010\275\230\242\225\274\220\371\300< X\205=\316w*=Vw==\325\267\244<\237L\257\274\370%s<\322\022m<\210\306\336=3\322\213\274*\344\316\274\306\202_=\306\327{\275H\377n=pET\275.\321P<Ex2\275\344A\005\275\352\352\306\275 7\326<_\251\220\272\037\255(\275\357\304\';\346u\032\275\315=b=\r\245==\236\353p\275\257\230\034\275q\002\215\275\211O\343=\314[s<\271Yw<\014A\243\274\314\006S\273\227!N=\270\361\205\275\342\312U\275\227\266\"<\232\231G=~\246a\275\337T\016<\213\370\246\275\366\020\203<\274\304\267<z\264\300\275[kz9!Z\211\2749\002\226:)@&\275\243\354\234<=\263\236\274\212u\220\275\\\230\370<C\211\025=\236:\250\274\306\270\267\275\233&\324\274\362_\203<\344=\254=9\217\021\275@*\006\275pk_=\027\272\266=oY\225\274\232O\271\273Wiw=\324\356\325\274\367Q\347\274\253\306\347<\227[\267=}\214\327\275\356Fk\275\216\017\200<\373\364G=!\362\345\274\245\273A\275\370\340\242\274VYh\274e\335\207=I\234\023\275@\023\031\274\220\236\325<D\261\244\275\310hS\272\257\202S=\335R\025\275Y\221\317<0\035c\274d\275Q=\270\353\210<\007\277\025\275\260U]=\370BO=.1|\274\237\342\006=B=\262;P\006\255\275\247wT=\240(\204\275\001\006g\275\216\271v;\253\376\246<H$\337\274.$\232;\375G\r\275\231p\006\275\241\275\243<\006\273\317\274F,\215\275\035\313_=\253_\227<\033f\"=\202\3643<.c\277<\235\356y=\327\366\026\275tC\254\274uc\347\273\013\032\227\275T\264\'\275rW\213=#9|\275@R\360<\0278\231=x\221\323<+\355\221<G\302\210=\266\007N\274B\031S<\237\276\373\274i\373\374\273\213\030\224\275#\307\331<BJ\305\275\355\026G=b\376\263;\327\205\357<\271O\001\275\206\0308=k_\316;}\035\336<\251+9<\006\366\364\273\347\235J\275KhW\273\033v\177=8CI=\036A\020=L\212\216<\\W\242<+G\257=I\243\372\274}M\346\274\251\332\247\274\211/S\275e\330\272\275\325\306\371<i)\306=\326\376\240\274YL\234<\352#W\275;B<=\246\"o\275(F\321:\006\240\372=\340\032\223\272\354\273\347\274\201\226E=\005g\324\275\360NP<\317q\224=>\213\207\274Z\006\237=\324\020F\275\352\364\330<\260\330\326:\335\362\021\275c\211\241\275\310\036\370\274\222\2666\275\243W\003=\230\244\202\275n-T\275\242\360\2678\334\034\030\275I\301g\275i\004m\274;\2112\274G\3216=\273\227\215\275$\335e<\307DC\274\221\213\\\273)Lj\274\002\027\320\2746S3\275\027X\215\275\333^?=\004\201\253\272>\000\202<#\234<\275\274\325\307<\250\261B\274>\2378\274@\030=;\220\023*=\330|\"\275F\014\325\274\343v\007\274\334&\356<\343\377\033\275\250\242f=p\304\221\274\306\347h\275\265E-=u\353\213=\244\344j<(\330R\2720\360,<\334\2562\275#\2700=\326\333\255<\036U\203<\007\371\n\275<\261\272:\023\002\255\274\336n\261\274+\360\000\273\t\332\271;4\377\212\272\233\035\022=L\023\331=\'\0047\275\"\221~\275\236\253\246\274\'\252>\2727\364\006\273\253\271\255=/$\013\275\003 \261\273\363Bf\274|\357\"\274\337\255\251\274.\347\204=\220\323\226\275>\223\247\273\240\270\201=\240}c\274\224\245\225\275\327:\301=\351\262Q\2759u1<\231\013^\275=\216O\275m\246^=I\320\031\274E\177!<\000#i\274\205\360\251\273\273\346O\275n\220$=\333\002\215\275\362;\020=\310I\221\275F\031\225=\304\236\227\273\257\316\253<\217\"\360;=/{=GW\024\274Q\356\300<=\005\307<\227\'+\275\355\360\305<\242\020F=nu\222=\211\374\347\273\200&\343<k\361\266\275\007\321U<Y\252h\274\313\250N=\360\356P=U\210 \274,\200\230\275\253\273\337\274g\020\010>\033\316U\274\341\2608\274\037\212\023<rs\376\274\364\326\004\275\377<\221\274\230\265\235<\333\352\037= \277.=\313\304\020<\036)\000=g\216\251=\335\025W\274\244\031i=F\337-<\014\t:\273\251!I\270g\210\\=\331\272H=\344\323;\275d\304\235\274i!.=Q\355\n=\364tD=\270\202\022;\222[==~ou\273Or\354<\032cZ=r\235\234\273\205^\341;\034-\026\275\001\3434\274\005\'==\003\'\272<\005\223\227=\326\260+=\344\361\244\275e,j=\257\367\004=\005\256\207\2748\250h<\025\214\004=,g0=\270t\216<\021\303\216=\230E5<\003\267\026\275\307\216B\274\204\253\020=\2542\r\274\221!x\275\"T\257\274~nI<\213/\221<\274\346e\275o\243\227:\035\273\336\274\2761p\275\204\273\034\274\274\313N=\264\365\307<(-\234=\360%\217<q\036\037=;F\245\275\231\374\2619\370\237\r\275\0040\341\274Q\022\023\275G$\331\273\314\376\035\274\243@\246\274C\"G<\033\365?\274\300=\223<\004t\232\2724\306#<]e\241=\014E\032<\211\3301=\217\233\363<\206\216\260=\022\243\352\274\371\261\210=\222\326\016\275>\236B;\357;A\275\035\275]=l5&\275\342!\262\274\340^_\275\243Xl<\375\030\275<Hp\235<3\177}<\202o\213=xf\030<\005&\371<\342B\270\274\344\336\250=+\326\201=\017\004L<E\212@\274\361\262\034<\025\250\003\275\256z\257=\206\324J=c\377!=\010\207t\275\247\247\321\274\023\243N<\200T5\273b\"h\273QZ\332<LAJ\275\362\227;\273\266\tr\275\221\030\231=\0109Z=\210\nP<\252G^=\262\364o\275\016\031\225\275O\3128\2712XE<\343%\032=[\376\225\274v\215\346;\0242\202\274\221\277\327\273\033\325U\275\013/\224\274\336\247t<\007\363\022\275\227\353\221\274>\255\251=(1\235\2735\252\006=;\240\037=\037j\305;\374\371z\275&q\243\275^\\<=Ww\324<<\225\207\274\270:U<R\367\356\274\206K5\275\217\345\233\273\032W\235=T\033\221\275\377\2744\274\250\'O;P\227\364;\367\331\002=\\\t\213\274\0168\316\274\007\303\033<5\016g\273mHu\274\313\242\376\274\202\246\276<]\215\250;\373\034\257\275\205N\267=F\206\034<\024\027g\275\276\365\007\275\265\370\346<[\312\250\274\353\273\202;\255x/\274\331\357\362\274\306\342\370\274:\267l\270-cL\274G\202u\275\r\013d=\340\316\023<\004\026\023=Ov\226=u\031\304\275\352\317\232=\'\213@\275\322\360?;C\325\355=w^\245\274#w|<\230\375\'<Z\254)\271\006\271\034\274\364\342\265<\206\370\373;\350\272G\275\375\271\351\274\372\317\r;\2154\206\275\021e5\274\3102U\275\214v\013\275n\264I=\026\003\013>P\340\014=\3118\200=x\236\247<\251mL\275\321\326\262\274(l\222\275\002S\273=X\3413\275\223\250\027<~\214\002\274\342ui\275\330g\357\273\327\323i\273T\030\206\274\3510\020\274\352\\(\274\362\013\337\274\246gx\274\303\373(=\352Z\304\273\375na\275e\331\203\275\215\272\232\274-P\215\275\232\370\036\274mO9<\231j8\274\037F\023\275sK\003<]\240\265\274\364\023\311\275|Y\227\275\326\333@\275\3733@=\216\245\310=\213\372N\275/\375\\\272]\273\032\2755\350g\274\252f7\274\262j)\275g \251\275\036\376\252\275\255i3;\333\227\353<Xe\320\275Jg\335\272\007\376u\275\"TJ=\307\203:\275\266\257j\274\355T<\275)\001\350\274\324\024\227\275\216c\207\275\357{\212\274\310\375\001\274o\216\247\275p\222\254;\343F\"<8\364\372\274\375\251\316\272\243\231\210\275V\315}=\007\271\227\275v\374\003=\247~e\273\336\350r\274\023\343t\275\332\306\352<\000\214^<7y\257\275\337\246d\275[\262\240\273uT\271\274\025\342\303<\367\277\260\274\036\270q\275\205\254\310\274\371\271\344<\234\024\004=d\270\335=\321\355\001\274_M)=\025\267\344\275\366\314\254<\323\"\220\274\267\250\325<G\354s<\2308\024=\005\375\330\274E\306\220=\324%j<\337,0\272\304Zr\275\323k\250\274\224\367\367\274\027X\246;\331a\204\273\201\033i\275\020\331J=D\022+=\310\266\201<\304>\033\274b \356\273\3039H\275x\353\024=5\203\020\275\341\267\340\274\304\300\237<X\357\307<\223\355\206<\204S \275?38=?\224{=\177\317\202\275\375\262\332\274s\324\317\274\371k3\273k\207\303\274\024\330\003=\352\203\017\275\222Z\025\275\323\315O=X\353\220\275\225N2=\307\025\032=\336|\334<\322O\203=us\226=\020aw\275\324\343\000\275\322\360f\274\313\002>\275\265a=\274C\0310\275\325c\025\274\343\244\360<#\377N=\364\274Z\275fY\324;D\315\001<X\277q=\335\322\027\274]K@=\177\022\235<\275+\034=\255\364R=\252\244\003=\227(g\274Z\007\267<\355\243*<1\305\222\274\327R\'\274\204\033\266<\207\350\305<\351\000\202\275\005%\007;\334O\210\275\237;\255=l\177o<\374e&<\206\370\304\2747\027\303\275\364\273\032:R\272E;\276b\211=U`\327\274m\233-\2758z\t\275\241\311k\275\021>B\275\262\024o\274\3735\230<?\301\264\275\367\014\266\275\016:\375<`nJ=\264O\222=R\010\250<\375\210]\2755\226e<\227\313\214=cU\330\273\324\330\215\275\321\333\311\275SYh<>b5=6\331?=\352\204\224;\3764\022\275\014\266F;\237\005\206\275\242\240\265;\035[\004=H\301\010>\026J\377<c\006\231\274e\244h\275\302}\242<\260\234\t=\014\003\361<\3671\243=6\023\006\2759\"\006<Q\350E=\"\354q=8b\273<p\214M\274\310\254\177\274\237B\262<\000\345h\275R\274\320<\341iD\275\352-\020:\366+F\275xC\"=\224i\n\275\363\344D\275w\037N\273f\327E\275\302)(=\022\244O\2756\212*\275s\230\203=j\242\222=\210L\325\274\3241\236\274\234\207\254\274\345\220\305\273\336/\320<>O\'\275\254\302*\274D}\t\275\220\260K\275\027A\016\274\323\327k\273;4\315:\023\205\n\275\200\314\004\275/\017G=\217\353\355\274\215\352\245=\316\215W=5~\316\274\252\367\204=L_\341\274\345\010t=\332\226\214<\312\336\214\275\356\263\204<\026\347\327;m\207|=R\004\366\274l\270D\275`\350n\275\326\361\256\275\246\332\217\275\311Tw=\003}c\274\277|\245=\346\362\216;\367\017v<\207%\013\275;Y\353<\204H\007\275\'#\307\275,\350\244\275\243c\224<U\364Q=lHs<k\026\221={L\016=\034\237\262\274c\010\245=\334n\205\274^\202\200\275\030(C\275\346\n}=\177\227\337\274\274\2627\275\320\023\"\2758\004O=\310\200Q\275\033_\243:\211\025\013\275\201H?\275{N\223\275\312w,\275V\014\000=\260\254)=\344&\240=\206\304d<\234K<\275]\307\263\274\224\0220<\017\034\206=\014\343R=U&3\273\271&\210=+\304\022=\345\024\326\273\267\033\350=\254\005*=\335@ \275\335\211\026\275g\2565=Y{\211=\272\273\022>e\033d\273bz\005=\034#R\272\261B\240=\247$/=(\r\017=\340!\262<\'b\357;\364\016\261\273\001\0329=\0062\031\2753\002?\274\324\221#\275V\214\260<\367\215/=\321\302[=\360\344O\274=\024`\275^\336\034=\273\227#=Q\016\r=\335\205\325<\027;\002\274\246\336\206<\020\'\302<<\210\311\2712\257\2658\275Vf<\274\244\225::\245*9I\023\213\275\301W\303<,\030>\275=\276\325\2742\037\360\274\201\311\016=x\360I\274\235\275\234\2751sL=\027W\260<Z9D\275\225\332\264\274#V\204=\321-\233\275\255`\372\274\205\215\027\273\026\340\035\271\241\007\n=\346\016=:p\r\234=\313\231Y\275\250\312\300\275\301$\356\274I\312\351\274\322\031u=\252fH\274\000\376O\274\037V\212\275\257\2120=8\024\225\274q\233s\274|p\021\275K\245`:\260\263\213=BJ\256:\307\013\341\274\254\375\005;\223\375{;\322\016\263\275\336\t\207\275\345\016\202=/c+=6_\300\273\225\377n<^S\016\275\256v\217\272\3113\n=\\\344\332\273\307],\273s&\021\275\251\r\000=\304\017\264=4\364/\275\003\374M=K\305V=\267\032\213<\223\003\346\274\373\022I<\271]\227\275\373\211G=*\323\224\274\224C\224=!\030\341\274\277\253\264\274\256*\224\274u\"u\273C\323\205;e\245)=\333\271L\273aC\326\274+\350\334\274\237V\271\275\226\211\367\272\001(\212<\237\340\000=\031dh\275\002DT\274\"W\221=\310\256\244\275S\265\t=1\002\007=C0O<\210va\274\351\236\254<\231\244O\275!\021\306\274nI\221\274\210/X\275\264\255\372<\027i\375\274\274\205!\275\371\013\300\274\370\3642\275m\022`\275\343\244\351;\322_\231\275|\312\343<\271\034+=n\202\250\274\rkD=\363\350\251=3/<\273\217\237\240=g\014\340\274A\2240<N\301\"=$\325\263<\"\230\253<\031\376\224\274\204K\222<y{=;2\370\214\275\"\222\211=}\220+<\303\033`\275h\"\270\274\004\241\306\275\313\364\370\273cL\256\274\211ya=\'g\226\274\230\\\224=\330\266\234<\300\253\216\273\000j\221\275y\304\207\273\257z]<\004\352\341\273\222\205H=\234IS\275\322\236\277\274\310\341\007:\374p\306\274\237\336\230\274\314\360\331\273\013X\032<\250%>=\343\237\212;\343\204\301<\211B\350<\225\203y\275&-\350\274\301\221\316<X\345\331\274\007\215z=\240\n\"\275\273\326\276\275\206\361Q\274\337\336\232\274\374\r\233<\004[s\275\312\224\361\274\272\222\022\274\271\221\224;\3776c=_7u\275\314Q\006\275f!]\273\270]\370\275\235\365\262\274\211\016K=\322f\234\275\r\371\235<nD\352\274\312\"V=\214\227\335=$\022\357=n\273<=\223s\347\274\266\376\275\274\300\226\263;\302\004\2438\323i\350\271\004\220b\275\235q?=/4d<\326\371\210=\370\336\377\274;\021\321<bJ\203=\007\371u\273A\322\352\274\303#u\274\275\n\311<\361\304\032=\207&\307\273))\236=D\215\272\274k\247\273\275\330\377<=(\\\255\275\005\367.\274\207H\257=q`+\274\367\234\206\275\010\260x\275\007\324\020=\317(\236<\223O%=\330!98N\340\274\274^\324$\275\024\375\206:\261\236\230\272\030\253\232=Q\024\236\275\202\274\226\275\326\261\256\271\343\371,=a\377=\274\236;:\2753\'\342<,\226\232=\r\302B\274w[\375<\217V\344<$\223\227<\244\201\333\274\223!\232<P-P\273\377va\274\341q+=\251H\271\2757\034a;\262\324\220<\216\255\245<1k\270<\225\251\356<`h\301\274p\3313<p\3518\275,a\216<}\223\230<\307\376\206=\314\222i\274m\326\216<\373\250\212\275\340K*=\226\363\217\275\031VQ\275\001C\212;\004\177.\275\345\214\340=\340\224\021=\027\234g=\252(9=\375&t<\205 \245\273.)E=d\370\372\274\t\2460\2754,\031\275\367H\221\274l\350!=(6==\345?\355\274I}\205\275\010F\252\275\266T?\274\271\307\337\274\332\276\027=\237\037\351;\231\273\265<\370\027:\275wnC=\235\345\235=\374\220\333<\235W\024\275\252\333\343\274\031\273Z=xD\231\273\344\002\365\274\353\313\251<\006\311\261\274-o6=r$\277\275z\340(=\267Z\3459\235q\0329.\256\215\275\030\316\302\274&\320\330\274l\301\007\274.\277\266\274\322D\377:\217\231\231\274\375\223q\274_.\373=\351:\230<l\255O=\2429\037=}G\035=\322\t\226\274\244\247\333=x\274V\274\022\'p<\314i%\275R\\\003\273\271\375\371\275\306\255\006\274\030v\255=Uj\232;_n|\274D\021\315\274.\251\037=?a\352\274\253Y\224\275D\204\251\274\231i\353<\352\021\n=\246H\r\276\017\214N<\225\341\203\274\243\257R<\017\267\001\274\r\213494^\306<\032*\025\275N\362\016=\266\024\3618\023\364\267\273\274m\245\273\356\2631\275\302\264\234=M[\033=\'8U<1\265\376\274\2204\266;\316\2435\274\317\r}\274C@_;(\351\030=\314{!=\231=p<n\353\'=\334+\022;\321\233u=l8\330\273\252\002\271\273\200+\263<\340g\252\273u\322\265=\361\245\260<\243\237\016=p\350\272\274\365\2616\274\331\244\t;\333x\224=\010\211x<\263q\206<\032\323\177\274\221)@\274x\357u<\260\327\246\274\204\355O\275\231\002\002=\375\355q\274Q\236\277\274\236\244\216=\362\007\002=+\022D\275\251UD\275<\214D<\021\334\024\275+W|\275\002\321\003\275\351\347\034=\230\331b\275\244Md<\365\203\331\274\211\241B=\2516\374:\266\202\300\275\3326\362<\037\202\211=\2552\354<\003\322\331<\371\321[\273D\243\252\2741\327u=\325{\353\274\200\240\214=\364}D=\\\361\024\274t5\251=\242\360U=\014\337\004\274\356O\233;\362\031Y=\n\370\250=\'}\341<\352a\327<\037\014\007<NR\237=K\\\034\275\372\246\226\274\237_b\275-~#<\017.;<\374?d\275\372\317\221=@\225\375\274\022\001\260\274\370q)=a\256\370\274!\334\217\275:\260L\275\205\001\203\275=\2421=\265\265,<\001\260\013=U\324\210=c\351\230\271cY\274\2755\327\212=\244\374\327=D&\240\274\375\004\030\275\013\360B=+\022\024:rY\223\274\212\376\004\275[\330\347\274\010\233F\2753Q\232;w\2528=\223\230C=\035\001\266=!8\001<]\203\231\274\276\276\255\275\030\237\004=\326V\336<\312\306\323\275\'Z\206\275\016\007/<\016\251r\274\360\314-\275\310?\346<\037\327n\274\256Q{<\312\210\365;{RF\275\"\327\357;\361\335\\\274\211\332\375<\223\017\251\274?-\237<\271\334\223\274\260\017>\274\266\'7\27499\253;\372*\247\275\004\036\203\275\303\032\r=\242h\245\275\333H\037\275\000\357\215=\355\244\273<0\217\003\274\360\030\226\274\270U\210\275\332C\326;M\340D=Y\333\275<J\310>=\247o0\273!X\225<0\260\254\273\354;z\275\005\252\037\275\004G\'<Q\253\377;8\000\024\275\214\260\212\274~z\264<\327Kh\275\016\023\202\275<z\001\2756M\003\275Jn\205\273\032&1=\272\274\243\272\342\017\306=avX\2754cJ\275i\342\217<j\312\304\274y\245\277<A\217\330\274\223F\034<\031\177\263\274%\302\205<\247\301(<\251\r\211\274_\345\211\275\222\343\371\274\026\2410=\230E\021=v\346]=\234\203\344\274\327N\'=\250z\257\275\330\306\325<\353\316q=\261\034\030=\031\310\371:\013\263\037\275OwB\274T\242\\\2742\273>\274\337zB\274\306u\334\274x\250\236\273\037\375\352<\027\342\017\2750\354\322\273kjS<S;a\275\260\312\251=\372\002\316\275ab\207:D\336\216\273K\217\370\274\004\352\366\274\005S\305=qU\276<_\370\006<Gh,\275\235\341\275\274\321\363U\275\211\203\215=\350\030\224\275\321E\314\274\251\344C<l\373\213\274F\251&\274z|\252<6wo\275\251\245\031<8\021\244\274h\342\035=\276P\220=FP5=\331J\270\273\270x\024\275j\354+\273z\207\251\274N\246!=\375Ig<\254\244\002\275\324\222\005=n!\212=\247Eq\275\353f\216\274\035\360\362\274~\315\201=@\310$=\027\260l\275\211j\240\274\315\377\250;nS\242<\311c\315\274!(\003\275\345\227T=4y\306\274[r.=\241`\237\274F;j\274\024~\217\274\354\321\003=\270E\244<6\334\250\274YI\312\275\336_6\274\207\377\215=\003\360\231\275\340\236\225\275\324\342\272\274S\'\220<\013\366h;;_\347\274\253x]=\324\013\004>\247\254\001\275\372&G;\366Ni<\356\353\017\273\007%\353\275\372\302\320<\362\310\246\274v\022r<\256\216\027;=/\305<\3628\276:+\257\221\273F\207u=\313_\'\274f*-=:\357\223\273h\n\255=c~\234=\200\312\275<\371g0\275\357\177x\274\026Tw\273\317\234\216\275j\264\010:=\236\031<\333GD=\251\217\004\274\026>\200=\360\n%=\244\266\016;\202\275\211=_|\014=\021\332\276;\306\272\273\275\350c\r\275\207\007U\275\273m\340\274\273u|\275&\301\025<\306\271,\275%\254\253;6\315\250=\212\237\326<\253\014\276<w\360\336:PM0<\"8x=\007C\233<\207\017\263<\334\220Z\275ff\240<\316\271G;@je\275Cv\304:\257.\r\273\363\343\003;V\215%\274\256R\303<\272\214\322\274\033\251@<\"S3=\017\251\225\273\033Pb=\237q\020\274\221\231\313<\027\023w\274\344(\004=s\3372\274\365K\\=\024D\"=x\321\365\274\006\221\266=W\014\353;\014P{\275\354\232\265\274~Cm=X\301N<T\227d=\3146\272\273\032\227\372\2744-\006=O\307\002=<\020\366\274Z\363N=S\321\203\275\020\3031<\006n\010\275\242H\252\275\307ER=\010zb=n\014\016<\"\315\203\275\223\265c=\024l\027<h\263\332\274\265\206\331<t\365z\274\316k\000=\261:\242<\235\372\207\272\222\227\217\275\371\320\215=\275\337\342:\277\224\266\274(\013h\273Q\357\202<\321\315\240<\340d\343<\034m\017\275f\273A\275\2338J\275\020\251l<\3360\223=Y\202\226\274Z\345\225=t\213\014\275\357\267!=\214\351\036=\223\026\213<\263$\247<\247\001\341=\020\245\274\274z\341\001=\260\000\010\275 \304\320\274\010s\374\273\014\307\222=\344\270Y\275\374\246;\274\357V\236=[Wj\273\031\234Y;H\030\202<\271\217\\\275\301\220\211\275S\244\200\275%\276\t\275\260\345\235\275<$\235=),(\275l\262\";\220V\260\274vDr<\315\213\205<3b\375\274g\323e<\324\370\317<p\3355\275\373\302J\275Q\023\013<\014\246\357<\276\r\t\275\003?\243\275\2023\033=-V\265<\032\373\262\274G\301\215\275\317y\274;&\347\320<\331\245\305;\351\301\025\274\256\360\331<\034K\234\274\\Fx\274\216\252\234=\014\355\207\271\223\311I\2753\331\221=.Hk\272\376\006\224;P\232\304\275\200g\347\274O\253\017\275\375jE\275\215e\362\274:8A=U\020\005\276\025\266\262\275\336\370\003=i\211\361<\260\n\373<\277\010\026=\347~\271;\246\022\373\274\020\327\215<\002d7\275\223\231\330<j\354\232\271\t\201\257;Fqt=T)%<\240\325\221<\237\303\245<\010\000\212=\"xC\275\276\034\214=\204s\311\274{m\201\275E\253.\2750\310\215\275\321;\327:\360\363\014;i\260f\274\277\225I\271\247e\010\275pHJ<p\223\320\274\310E\200\275\021\242\\=\352\020%:=\031\232\275\221\365\222\275/g\220<\245\356[=\342\274\325<x\023\022=\352\221u=\235\020\270\274m\013\205=#\006%=\177\244\2379\3479-=\372\036:=\200\020\271<\014^S\274}\251\300\274\335\177\006\276\213f\200;\2076\354\274\221g\206\275\017\261\243;\252\225\023\275\217\3034= \002\353\274\335\311\007\274A\017\212<\035a\021=i\247\270<.\030\232\275\320\257\222=O\253\213\275p\r\036=\016\253\253\274`\273-=1\035t<D-^=\325/!;&]\223\274\226F\341<\375\331\205=\301d\301<9GJ\275\256T\264=\024N\220\275\367\3610=8|\270\271U\203\346\274\354?P=2\000\002=[\r\212::\211\276<u\216\351<\341\223\216\275\222\031\225\272+\225\004\275\254w\220\275\342\223\n\275\332\n\242<\203AA\275 \216Z={J\003\275\246\337\263\275V\321\340\274D\315\005\273yr\332\275\032\337\377\274l\025\027=g\032j\275\024\362d;\340\330\273\274*\357F=\023\246\210\275\222\244\321\275\004\246\250=\332\271\250\274\327\2774\275\276\242Z=\r\007\307\274D\345\304<\357\177\232=N\323\366\274E,\001\275x\323*\274?)V\275\336B\274<|\033c=\314)\355\274b(\342\274\003\216\247<\356\206*\272\274u\006\274`Ff\274\324\257m\275\310\205J\275\220\265K\275\377\243\n=\346\224\002\274\007\201\260<\001n3\275\202\272\364<}\311\335\275\276\332q<(\0064\275\320\216\0359;C\007\275\240\271H\275\277\227\264=4#b\275e\235R\274/\245I\274A\352\202=\230\362\373<`K\373\274e<\231\274p\274g\275/\020\206\274\250u+\273O\320\253=\265\361\326<\322B\314;g\220\002\275\025\347\254\275\367Y\313\275\351O8\275o\254a\274\313_\317;\247\346\035\275\017\256\310\274\362\215Z\274\357Dt\275\375j\t>\3042\206=\274\2555\273\310\315@\2750cM=u\376\017\275\234>\271\274\247\340\240=\327\314\252<C\n\261<Dg\267=\r\3330<\242\251\256=\225\234W=M>\224\275\265ZB\275\224\204\362<m{3\275\314\344\266;6\016E<\341\353\242\274\316^\220\274p\361\204\274X\237\030\275\300\266M\275\211.`\275\227I\203=\014\234\362\274\343\370\024\275\217\277j\274B=\345\273\200\001\026<\\\201Y=z0\237\275\346\032\253\274\027O\236\271\204\376\305\274\345\276\030\275\232\233\273<\033\231\232\275\270\202\035\275\323\253%=\270\254\343=\325\220\261:w,\344;r\2508=\366\376\261\275S$\252<\006\221\260\274/\201\305<\337\362\016\273\342\260\251\275\265\332z=xN\372\274\221\221\344=\345\335\237\274\230#\340<\343\362*\275\177Q\251=\027b\355:/\0221<\370\200\243<Q\035R=TQ\302\273]q\032=5c8\275o\216=\275E\326\264<\351\316\226\275YU\236\275\345`\317=\234\330o<\210\263r;@3\226=[!\315\274|(K\274\003\262\255\274\0047\215\275\305\320J=\272\212\030\275.\025+\274\245\23719\030\364\246</VC\275\233fN=\305\002z\275\267c\342\273\025\361\233<\221\325\320\273\233\213\242\273\013Fm<\277\360\262\275\244BW<\301l\013\273\352\016{=.\370\356;\331\3437\275\007\246\314\275\305q0=\251\257W;\244\307`\275X\232\316\274}\226\034=Z;+=t\265\223\274\231~\272<+\353\211<!\363\357\273F%\312\272\342`\026=\003\365a=\257\325m=\372\\\253<\003\2076;\\\006\301\274nB\013=sP\037=\353\300\270=\302\267\236=o\276,<Rl9\275z#\261<\037\rj\275.\202\271\274\211\022\257=3{2=C\320-\275\277U\231\273\222L\340<\r\215\000=\350\036\020=\274\367\201\2745r\242=\307\272!\2740f\322<q\020\220=\256\0073\275\337\260\234=>\277b\273\376\331\214\274\265\214-\2756{\364\272uD\257\274\321\247\212\274.\365\263;\375\220\010\275\210wD\275X)\351<\021\247?\275|f\366\270\361\022\214\275\261\315\014=l\274\\\274\266b\322<\224\326-=\032\264\306\2754\017 =\321\223m<l\346;\2759\366\200\274\010\361\346\274p=\276\274\231/\311<\317\366\200\275\322\257\213=\256\204\270\274\nj\n=\215s0=\255\303\001=W\t#=\2665\035=;\204\267<&\257\032\275\246U\273\275p\343e=W\363b=i\324G<cM\256\274\335\320\013=z@\326\274\233} =\271\276U<\016\025h<\332.\031\275\033\004l\274v\372\365\275\367\362\234\275\273\226\006=\3618<=0\024\322\274u\246\025\275\031\314\273\274\207\213\304\273b\266t\275\305\263\311<\226\264Z\273\226?\001\275\232\301H\275\300\353\220<\274.K<\235;i=\356z\237<0}\026=\234\357\221<\202\325\257:\2465\213\275\223\251<<v\2348<\326j\215=/\354\245<\356e\273\274I\210\215\275\224\221\201=\370VW<\236\366O=\232m\"\275Pi:\275\t\352\350<Rg\035=\270\013\026\275<\377\177\274\016\211:<I]\214\274r\351\001\274}\177=;\246\207\277\274\240\350\034>\037\2126=d\2751<\003#\241<\370\006u\275\245\371S=Mu\250\274dP\337\273\3160&=\373\027\253\274O\350\241\275\3567\222\274\224J\026=\353\200\300\274\331\340\206\275\267\274k\275\317\002\327;l\263;=\274\356\341\273x\266\332\274Ku$\274\205\023\264\272Lk\235\274l\325\355\274\314\024\255\275Y\312U;\013\003\215\274s\032\206\275\263\240\203\275\031\262\340;\227y8=\242h\264\274e_\013=\244\246_=>\262\013\274iYc\27577\032\274\001\355\222\273\360H\216=\371\357j<\236\207\241<C\325\371\274?9\003=\254J\327<\327E\030\275P\323\033\273\344Qj=\366M\213\275\300)\017=\341\035\323:\010\232\201\275\333\0041\275\340\314=\275\022G\375<d\235\307=NN\031<C\240\303<\226\354\007=\255\274\226=\205]<<p\312K=\000\010\201\274\035n&<\276\310\020\274\001k\032\275\265=P=\261=)\2754\245\022;\201\217\270\274\332\275M\275{\267A=\240\340v\275.0r\275\031\315\227<\357\222s<\333\344>=\315ab\275-\'\305\275\200\221o\274\371J\205=\017\0362<_\341\354\274\236\277\222< \034\252\274fV\242=2](<\313{t<\235\022R\275\203j\036\275+\343\013=\016%\241\274v\230Q\273\036\r\201<\211k\354\274Q\013\\\273g{t<z\363\354<\361\353\352\275\223\266n\275\270\312\'\275\311v\025<S\r\256\275\264\364\322\274\rG\265\275tF\344<\310(\203\274 \353\371\274\205~H=N\346U\275\215*\212\275|}\271\274\023\244\245\275\230\260\235<\3603\357\274\244\022\322\274n\225n;06H=\256\3417\274\014\276J=\225!}\275\344\356;\275\342J\275\274\037Z\352\274\315\223 \274`\232i=\371\343|\275\237\251\272=\256\256\260\274r\345X\274\322\351\303\274\215\373\000\275\367\375^;\177O/\272\372\272\025=\\\305T=\246\243d=\036\2324\275\213mk<\203\374\224<L\243\262\2745\354\227=\303\345\026\275\026\330G=*1\217<3\225>\275\235%\207=\271{\306=\322u*=\261\263\205\275jx.\275Xa^<TD\337=F#(\274%2\207=\232\274e=\224H\205<v-\317<4nF\275qh\035=ryv=\306\246\033\275\255N\211\275\177\215\000\275#\016q=\2769\313\275\244{\377<c\300!\274\341\270\303\274U\377\347\274\3724\354<\205\343a=\205\346\355<C\357\206<sO\305<7\317\237\272\216l\354\2734U*<@{\230=w\231\254=K9\013=\270j\211\275H\344\234\275\033!6\275\022\301n=C\230\020=SJ\\\275\320\374Q\274\"\025\272=\227\303\220<\341\202\270<\215\022\266;\247\016=\273\3118\236<[b]<\353\027\206\275)9\020;\026\032\257;\374\343\314=Xl\242\275R\r+\274Z\324\202=\345`!\274\353\367K\275\001\251\261\275\310 \272\274Q\002\202<(\304\334\274\260\333\210=\304VO<(\212\310<9\022-\275\354\031\006\275\023w\231<\302\376\310<\3320Z=\346\250A\27557?=\242\257\036\275\257\237\\<^u\234\274T\307\016\275PQ\216\274\022\212\370<b\021\231;ryv=\177\365\026\275\215\346\364<\322\221O=q\245&=\317\326\016=\336\004\303\275\306\203\032=9\372\366\274\331\254\302=8\310-<\001Y\003\274\271(]=\242\1773\275z\236\336\274\003\210\032\275\364\264F\275\342\2520=\302/A<\235a\233<8\277\022\275\304\366\030\275\254\241`<\333\205\222\275{\362I\275_X\031=\360\316@\274\0019T=\324pH<(\320=<\273C\330\274pT\027\275G\371b\275O\261_<\207\260$\275A\034\211\275m\255\272\272\320\036\273;}z\326=4U\206=\343\357l\275)0\344<O\014}=>a]=\t\312\227\273\275Z\257=\t\355I\275\263\257\224\274\314R\217<\226\302\027\275\233\232\327<\235\002A<\003\314\253\274\321\026==n\224H\274\246\243\365\275\032:\217\273\272\242\345\274\3274\001=\202\000\205<\237\030\273;\240\213\002\275\020\301$=S\350\220<\371\0047=\370\371\305\275\013\233\244\275Q}\"=\236\365\304\2757\214\007\274P5C\274\211\214\223\274z\003\032<\363Wx\274\222K\246<\357\362h<\016re;1{\024=I\177;<U\231\233\275j\277D\275\220\203=\272\rN\237<!\354\226\274B.\317<\371\3620\275\351b\277\273\022J\177;q\257\251\272\307d\277<Z\366\242\2745\t(\275\026\006\202\275\243:2<\ts\243\274\350\246\n=\000\2061=\353\231\227\273(\352\001\275\352\211\374:\306\324\347;\230\372\225\275J\307\024\274\312 v=\362:\336\274\312pK=\345\360\271\274\010\273\324;\213\200\266<\324s\022;\334\216v\274\002\340\274<\342\036L\275\342\003?\274\277\036\327;\222\216:= \254S=6zv\275\225s\244\272hr\200=m\3032=}\r\260<\371\',\275z\010\214;Nk\356<\247\216J\274Ss\004=F\342:=\252,\245=\265\266z\275M\351\264<q\342\370\273Z\\\355\274B^V\274y\345\244=\255\316\323;\344\377\211=$\367\243\275\353\265\206\273\355\340\363\274\264L\205;\244\215\321=\013d\221\274\205h\322=\301kL=\374\370\006\274\021a\t\275\"\335\350:\226\230m=\247\311\006<\314\364\257=\301$\215\274\212\372\303\2747\243l\275\256\276\365<tl\025=\332z\031\274\264\311\330=\217Gh=\262\236U\275M\034\324;\0052\017<y\201n\274\032\031n=-\027\275;\010\302\321\274i\031s\275\305W\203\2753\010W=J)\016\274\006\340\201=Z\316\253\275P\353(=\375zG\275\320\264Y=\310\205\021\275\356\276G\275&\330\026\275\356b\234\274\366\3314\274\237\327\201\274T\205\206:\371\0341=\344\030Y<\312\013\240\273\324\254\\\275A\0008\275S\3326\274\314.X\275\327\226I9\251\3745\275\351\215\267<\177\244\335\273\374i\244\273g\000\370\273\350\371\243\274\024/\016=?!t\274{j;=@\010\316\275\016j7\274\272\307\016=!j\217=?\2149\274\032\257e=\347?\014\275\177\"N\275<X\204=\352\265x\275u\275n<^fu=\231?\\=T\303(<J2\314<\370\252<\274J\032\203=\032\224\251\274<\313\320\275\005\223\010\276A%\215\275\006\247\204\275\343\250\252\274F\275\235\273\351\227\346</\226H<U$w<\361K\317;G\215#\275\270\347\233\274]\365\300\273q\233\021\275\271j\266\274\360s\211\275\013\367\242<\033F\266\273\366f\225=\'\034?\275\"}R\274\366\265#\273\306-l<O9\210=\273\367Z\275\020\337^<=B\355\274\222}\007=\374\031\035\275\305\233^=6=\031<\000@]\274l\3624=\300{\230\274\371\315\034\274\272j\233\275\321%\231\275\211\037\016=\030\231D=\252\263\031=PY\372\274\215\351\330\274\347\007w\274>\027\226=\326\317\270\275r\221\221;]\316\317\274\3542-\274\337\231\326\274\331uy\275>\235S<O\205\370\274n\rG=\267\2334<\364\360\207\274`\025?=x\217[\275}i2<(Z\303\275\376\025\332\273Q\334\357\273\251\250\004\275\201\273\222=X\376\225\275\371\365&=I\306\334:0\017\214=\272N\355<M=\314<\242\260\256;\345\310\320\2742\035\035\2754\200\034\274\255\207)\275P\310\217\275\177a\000=\202JK\275Xd\237\275\200\343$=\227\370l\272\374\310\024\2751\212\017\273\"\267\014=\337\254\327<:\277R=2\232?=\301\032b<\274\3503=\235t\350<\312\363\004=OM\366<V\\\356\2733\216(=E}\276\275\260\363\035=D\227\016=?\006\205\274>\352]=[\253\034\275\317\260W\275\273>\331\274\307\322\222\273\262E\225\275\250\017&\275\203\020\253\272\261\\\204\273\024Q\256\275|$L=u\311B=O!^=\3622\030=\017)\004\275\372\031m=\317\033y\275\373\212J=\325\375\032<\266\367l;\332\265\300\274G/\214=\025\\};\230:w\275 \351\177\275z\337\032\275\324\210}\274\013\303!=o\237\034\275<\372\265;\312F#=\235\243\203\275H\037\265\273m\206==}.#=\275\312\265\275\034}\251\275\350\272>\275,\332\216\274\255\251\243=\303\352\353\274F@\240<\304\205\363\274v\022K;\010\357\260\274?\300\233=N\347\351;\242\013\221=tn><jr\023=&\215y=I/s<\360\306\223;\001s\013=h\3776\275;\230\314\2747\217\371\274\\W9=\2735e<:\331=\2750\231\313\274\235\246\341\273\221\317\035\275\261\014c\275g\373T\274NK\000\273(\002t<-)\323\274\264\330\t<\217~\253\273\353\023\006=\367\367\200=X\'\330=\353o\013=%\343_=\337\"\214\275$Q\024<a5\347\273\2564\006=\014\226\307\274d\347\r\275\3561\203\274\023L\001\275Y\263Q\275Y\273]=\323b\037=\027\"5=\320\204\232\274\304m\252\274\312\010\344:\275B\230\275\271\346L\275DT[9^\014Q\275\270E\363<\2078\213=ZE\332<\300\275\"=\327\346\010=\277\322:\275\314f:\273.\305\225<\372%\336<wB\301\274;\366\353\274\3011\217=9v\322\274>B\273;j\235Q=\036wp=!\325\243\272:\033\227\274\340D\000=\371\346\325\274\361\233>\275\277R\355<\305\361\204<|!]=T\366\233\274\225\361\265=\016\347\310\273_:,\275##>\275\2722\242<n\370\204=TyP=P\302\243\273j\010&=\003\326\005\275\022\316\024<\361\n\033\275i\371\033\2751\270N=\006hp<\230!\232\275\317\225<\276c+]\275\371\302\250=\260\344\005=\306\231\t\275\\u\247;\271j\014\274p~B=\264\310\257\274JJ\376\274\360\204\022\275\244\330Y\272\301\327C=\0017\263<R\332\232\274Cb\303\275\336\317\330\274\332\245\325;Sg\213<j\3336\275\220\026\206\275O\226\213\273\352y\237\274b{\030\275U\255\222=Un\263=F\330\223\275\255F\362\274D\013\222=q\242M=\244\253\250<\242\214\221\273\316R\205<\255i\254=I\272\326<\244.\334\274+\200\222=\217\310\025\2753xt\274\326]\013\275\370\027c=Y\265\034<\035P\034;A\030a\274R\363 =3\004B<\374\3532=\030\231J\274[\373\214\273\350+\027\275\010o\264\275\207\3762\275\343\010X=4\217\223\275\036\254\343;\367\222\033=\001g\224\275\002\341\221\275\271zd=\367\370\235\275\377x]\275\005\336\222\2749=\204;\246/\304<$\261\n=\002\323\307<\212\004U<\214\240\021=\244\343\r<\255\264;=\353\3328<WU@=\210\375\372\272B\344\032\275#t\031<L\364\223\274\003\356\033<\333\233\330;\264\341L\275\202\322\205\275\237md=\033\264\262;\037[<\2751\201\317<\264z\330:\"\030\304\275:K\025=G\307c\275\375\322\2039\023H\035\275\252\013-\275\2535\322<H\252\234\274\031p\300\274\007\271\355<&\267\264<\265\037\231=\022\307i=\010>\001\275\366Vv<b\347?=@\211S;\n\364\330;\006\332\271<\220*q=\030)\247<\261-\027\275b\260G\273\223I\201\275\210\344 =\2307\335\274,\263\230\275\340\256\227\274\021\0065\275\232\374\214\275mdr;\306\334s\274\325\003w\275\334\026\004>\033\253\326<F2\017\275\233\326\357=\334\347\310\273.\361\263;\\D\307\274\334\320S<\006\260\340\273\367\\\357\274\n\356l\275F\243\351;=\027\020\274\274\023\325<\2715\010\274A]o\275\270sI=\240i\026\275\334%\317\274\244l\360<\366\357e=\306\336\333<dk\275\275\233/;<R*\315<\251I0\272\256\352\315\2746\311\230\275h\227\346\274\303u\266<\035<\220\274\022z\251\273I\033]=\234\002\034=;\214\206\2754}F\274\307\372\271\274\235\240\221\275\315\354\313\274\r\370\247;\321\343\200<\327\022\202;[\'\224=#\020)\275e\210\031=J\2551<U\211\326\274\356+\016\275[c\216;\260\364.=-_D;\354\374\232\275\336Q\337\273\270V\203\274\202\356D\275\336t\000\274^\354A\275\205q\205\273\273Z\242=\254t\266\274\030\317\000>QL\271\273\214%\240<\241]T\275\257\345Q<\211\033\370<+8\026\275?\333\211\274\"\250\315<\271\036<\275\221\341\025\274\347\356A\274D\\]\275\337\252\205\275\003\'\261<\013\333\235=\232\256g\275y\032\316=\002\232.\2742\312\252<\262\321&;X\355\306\273P\331S=\202VU<\013\307&\275Y\2766=H\307\010\275\341\236\301\274x}\007\274v\231\317\275\033\306j\275\231\322H<\343\335\377<\206N\003=t\274u\275;\003\250\273!cs=\021\263\222\274 \207\247\274\237\004\306\275\330\3315\275\035\r\022<o\266R=:x\274\274l\2268\274\013\367o;t\366>\275)]\223\274\357\276\036\275\2506\n=D\216n<w\312\244:\210\326\214=\215\'\260<?\025\231<\032h\324<I\235\350\274\305Ii=\275=\000=\372B\350=\027\323&\275\334\257\202\274\347\313\203\275\3110\300=\245\324#=|lR=\210\025\214=\017\213\367\273u\323\214\275z\273\266=\241\240\020=\234\306\242=2\324\255\275\237_2\2756\033\031=J\237\266<HV\356;\354BO=m:\003\274\022\272\270\274m52\275\360W\257=\005\323\371\274O\000\277;<\343;=b\206R\2751[\244=\310\345\357=\362\325\231=\321z\367\274\241\311L=\002\275\221<\355\265\204<\322\324m=\0318\325\275\207\200 =\253\334>=\200gJ=\225\271\301\273\303\006>\275\2002\201\275!&l\275\266a\260;\026\222\305<n\2629=\350\n\232<;\236\225\2740\013=\272\205\260A\274\022\020\226<\227*\253\274y\336\346<\373\277\337\273\n\362V=u\312\333;41\227<H\227O\275,\316b<\377\002\366\274]\010m=\212\341\214<\334\r\232\275\226\332\301=\242\246\277<\371;\255=\022\2622=-\211\n\273\336GJ\275j\2307\274!\227\231\274f\353\267<GE\200\275\367q@\275\323h`=\351L\037:\247x\016=\\\'\200\274n\212+9t;\231=\266\247\253\275IF\273=X\301V\2756\211\006=B\301\373\273>\031g<Z\214v\275#K\225\274\032\217\005\275l\000><5\343\251\274\214S\313\275\344`\'=#\361A\275\362|E;\007L#\275\345\220\223\274\333\010\215\275\360\004\330;\212,\373\274\r\3450=Z\3637\275\321\345H\273\330\236\323;\323L\226\275P\336\200\274\367zu<(\314\202<\036\306[\275\000/%=\336\326D\275\006|\036:\025;\r\2749@\037<49\202<\232\316\267\275.\n\t\275\251\025\214<k\302\\\275\\\303\276\274\244\333\316\275\024\324<;\017,\261\274A\006\320=q\365\371\273\026x\206<!\335\262<\366\255\261\274,\216F<{j}=\351\306\343<t\324\321<\r\274*=A\337\374<\245.\013=\216\277+\274yw\023\275\345\335\n\275\017$#=\372\316\344<\213E*\275\221g\226\275\266\261Q=E\343\314\274h\023\007\274\214,@=\014Z\206=9wx=P\247\215\271FN\034\275v;\227=\022\3016\275b\251m=\255,\205=\006\257\327<\266\202\240\274\t\320(<\262\247\314<\241Vw\275)\231\210<y\014*\275d\333]\274\202\030\311<\000\300\335<h\0231\274\300\013G\273x&%\275\2277}\2742\021\214\275\323q\206;\232\273\376<X\323-\275\314x\233\275\031\204g\273M\245.\275xi\212=\034C\311\274\030\254\'=\241\254\225\274\324[\317<\313\210\234\274\024\252\224\275,\346\304\275\013\372d\273\325\275\272=\234C\325<$\340\214\274\036=g=~\350\205\275\"(\007=\274\022\205<\246m\243\273_\252\216<\321y\371;\331\236\006<\234M\266\275\227~\375\275\257\377(=(\032s=\266GM\274\003\263\360<|\324\000\275\213\257\357<#o\370\273Ur\323\274\220\302\034=f\202?\275\230|\342:\264\033\206=\030\303$\275\236L\021\275\363\250\r\275X\027k\273\363w\227:CM\377<%V\222\273\270\314\033\274!T\232<i\177\274<$\264>\275\177\254d<\304<\347<c\3106=%\226\221\274\2572\025<O (\275e\322\370<\2619\236\274\323B\350\273n\016\207<\2331\036\275\0342[\2747\210\245=\232\260b\275\270\311-\275\317\256\235=\346\214\237\274\004\322\016=\330\212\007\274\237\227w<\237\3748=\023\030I=\243;\000\274\034\262&\275Jt\257<\215)a=\014\004d\274\224#\2479y\266!\275\257\230\245\274\322\033\200=a\273\223\274\037\274N=\352\3762\274\032\005\014=\243\314\342\274\371(v<: 6=\237<\332=\363\365&<\202\303\230\274\000\014\336\274^\377\304\275\217\360\236=\332\270\242\273\305\002\213\274=?\370<\220\264\033\275\261\267\000=u\037\326<\td\230\275Yz\246\273\t\014\\<\321j\212<\236e:<Q\241N=\216\323\373\273gS$=2O\020=^8\030\275\274\r\311:\362|\336\274\217P\024=\331\245\332<b\246J\275+\232\307\275@\240\"\273s\316Q=\010!\214<\235\203(\274\265y\221\274\372\027\250;\275t\225\275|\027k\274\016\337\221<aj\215=\265\346\213=\"\275\007\274&V\r<\365G\322\274\241#s\275\345\007\020\275\372a\356<u\001\177\2752\354\371;nD\253<\205\315\211\274\270K\257=\234\221\345\274b\3562\273\227\211P\275\000\2640=\355Y\220\274\352\036\320;\247b\245=-\206\324\274\020IJ<t7\306<\252w\311<\226\203\021\275\030\226\232\273|\221\315;%\207\225<\355\225\247<S\210,\275\316\026x\275\332\331\316\274W\210N\275\275\006Z\275\013\263^=#L6\275\200+\345<\001\215\234\274r\032\312\274\315uJ\275u\2717<\223%\254\275\265\212\365\274\356\250\030\275\032DX=\362\334\033\273\013\036o<\244\376F=\034\n\335<\363\231\254<\177\362\025=\356H\213<\200$1\273\206\010\236\274\017\251.=\221\211\021;\356\261\'\274\245.\271\275$\036 =\331\204\003\274K\250\265;\211\314<<e\350+=:\230/<\334\206\243\274\027{\344<\215\037\347\274\312\021y=\361\036\335\275z\321\021\274tVH=\\\2161\274\244\302g=\345-\346;j\251\034\275\357r\030\274a\2615=\225\004\331<\016\374t=\211\3264=d\265\302\274\274\220o=\216Up=\321\020\227\275A;\017\275\227qi;1\027\r<\231\021f\274\0033\262=\312\244\t=k3I<\3322\317<\032\327\235\273\320\215F\274\235\223r=vB>=\275\323\033\275\352nr=\033\201\306;\230\357\006;RH\031\274\242s\215\274\371\245\332\274\211\360\272\274`3\021;\"C!\275Ku\222<\010\351\233\275\273yI\273\013Q\221=\201\314=<\266M&=-\202N\275.\023\363<~\227N=\034\330\257=B(\216=\236p(\273\213\256\333\274e\304j\275\t$1\2759\253\222=\254\317\236;V\033\320:f\320T\274\315f\235\275h\365@\274\373\345\234\274\250J\223\274\250d\276\273\036@8\274_\263\225\275\211\032\260=\365\215\020\275\216\n\341=\353K\026=\205\376g<\032\206\376<D\205R<NU\364\274Y\333\230\274t\357N=\025\264\037\275\202@?<\371\300\235\275\261T\307\274\201\304\304\273\314G\274\275t\325\220=\350T\037;E*\251\275\367{w\275\264*w\274\310\244\331<]\247\226\275KUz\274c\001\"\274\340YY\275 \246\\=\300\274b=\225I\320=\r\032_\275\020pQ=L\334@\275[\354\224<,\374O\2752q<\275V2\032\274\221\267\360<\311`\314;i\350W\275\321\341\004=\254o\206<\215\353t\274\211=\246\274\321T\203<I\354\017=\324\014E\275\332\2535=6_\210\275@\027\203=\205\214\240<D\036\224\275__\005;/\265\371:\330\033\233<\253.\257\275\331\263\013\273A\025\302\273\001\0142;Z\235l\275\347\341\022=\240\002\216;\302Bv=s\243\005=\243)\000\2723B\254<|5\023\275\032\374\267<o\010\211<\307\365\032=\003\230\322<\033/\366< \244\001=t\244w;\247I4=N\027\353=!S\245\274 \002\244:\233\232}=k2\316<\2559\317<m\035z\274[\244M<\202\200D=\273\'\002\275\332\222\225\275\033\336>\275J\270\216\273\311c\215\275<1\246\274\334\207\211\274\255Q<:W\036\255\275\322\251\220<\304\233\307<\272\330\253<g\321\006\275\0328\004\275\321J\017\275\023\236\323=}\327\321;\373WO\275(Y?:\267\234U\274yM\010\276\372+\021\271\331\035\355\274~SA<\221.\r;\232\270\024;\206\236&=E\327\221\273\005\225\371<\335\231\033=\216s\337<\311\343\320<\366\225\310\274\223\023\010<:\3300=`n\233=\2511\202<@2\343\274\350hS=7\366\243\275\000\212\n\275H\271\252\274\223\366\207;Q\367_\275!\216\272\275R\272X=\365D0\275\\\030\216<\213\003\376<\350\320\225=\373\tc=\234\263\372<\242\371\226;PH\311;I\266\221<:?\010\274\271\213\207<\361\032\270;Fk\213\275\372\270\340<W\367\203:k\234 \275\"\024Q=\316\342\300\275P\333\377<\301\322\370;\235$\016:!\207\314=\210Mw\274\\\344m=V\260\306<}\031\212;\\\351\253<\333\343a\275\277n\035=\365\240\332\275\321\014#\275\264j\215\275T\303\010\275\201p\032=\214\016\210\273-~\014<6]\266:W\310\250\275cFf<\352\2363\275\360\316Y\275\320}v\275*x9\275\335v\202\272ESN=f\312/\275\250\273\221\275\231\353\307\274\276\376o<\247\377\267;\223;6=\302U\234\275\300l\255<\367\212\232\275wk\272\275\255i,=\000\013u\273\003\002\017\274\247Y\351;\357\357\212\275\206H\024=\304\262\207=v\027\022\275\346\010\362\273\314\277\344\274]\223-\274\250\177q<\377\017+=\\\370\032\274\324\237[\275\020\304\215<s\330\227\274\312\356\263\274\322\306\277;\251\272\322\274\243p\307<\343=\230\274\366?e\273\244\251\314\274\355\'\252\274\'[\n=@`\023\275\233\241\355\275a\030+=d_m\275\001\253l\275\373`\234=\371&\374\274\365\210\001=\274Ht\275\323\237\344\274\377-4;\203\026B\275\335\322\253<_\346S=\345\325\236\274J\363\034\275\326\035D=s\304;\275\nB:\275\000L\225\2752JH\275\310\213\032<4\002\035:\224!\025=\202\2209\275\230!\236<\326X\032\275\307\005\n=|F\316<\271\345~<\246n\004=CO\362\274\022*\337<)\227+\273}q\306;X\2238<>\320\347:CU\367;\030\017\217\2752)\316\273\013m\316;\222\364\267=\260\2545<\177\332\014=\253\177r\274\257\r\345\274.y\236\272\241\277Z\275\360W\t=o\253\n<\263V\360;\350\214\332<\272g\027\2748Ww\275y\356a<\254a\211\275\271\275\212=\254\264S=\013\002_\275\205\\\037<\207^-=\310\377\257;p\345\001<\322\315\364<\322\305\035\274\270:\375\273\261\242\304\274\216\206(\275\225\027\031=R\240T=\376w\177\273\022\225 \273\364\335\266<\221b/\275\246\036\227<\353M\017\275\325\207\365<L\314i=S\301(:.\004\016\275\251\210\243;fQ+\275\254\334\264<O\360i\275\373\267\260\275gG&=\224\372\355;jF\033\275\371Ze\275\260\330\376;\337\377\260<\312\342\353<\026\210\222<\361@\036=\316\022A<\313i\233\274u\253\235\274\271Y\000=\366\014\225\274\230\324\245<k*\222\273\365\033\235<c\037p;o-,\275\366\003\273\273u#\005=\032Zk=(\353\024=$\211\251\274\220\032\234<w\221\233;\360 9=\300\303 \276\364\210\024\275.\371P=\361\222\304<\273\304z\275Y\350\351<\212h\256\274\244\323\230\275\363[\324<c\246{=\020\314\024<\341\252t\275\247\345\212\2754\223C\275\263\266\001<\334\252\010=\314\246\350<lP-\274N\217A=S\220\365\274\203o\036=b\217\005<Q\210.=~\375Z=\355s\203<\372\347\026=\020E\326<\255!\202<\345sK<\005\277\274<\r\\ \275S\247\350\274\265\253\325\274\020\3176\274\321\036#=\370\262D\2742\335\212\2747n\356\274kmm\274\203\200,=\242z\250=\275\364\\<b.K;F\312\024\275-%~=\306\252\317<\000\271\346<\321H%>\000\322M=@n?\275B5\006=\250c\027\275\303\003\266\275@\241`\274R\243\243\273\221#\026\275y\261\344\273\332\222\375<L\250\207=\372h\027\275\212\177\266=\201\263\\\274\301\r\240\274\257\177\222\274+\323\2779\017DB<\251\273:\275\347cW\275\276\233\315=%\266h\274\323\200\211\275~\323\313<\016g3=M\237\366<\n\251y=\344\257)=\276\355M\275\033 \276<\\i\001=\265N\001=\354p\021\273G\267\321\275\236\223\213\274\345a\333=\007\315\321\275\nu>\273G\372Q\274\313\303\267\274#3B\275by\023\275\264\004\035\274\247p\254\274l\321s\275\253\r\223\274\227\001\274\275\002p\270<\212\016W;\302|\311\275\007\335\322<\336!\320\274S\3348=\016\201\340\274\370N[<$4\243<l\330\005=\230\367O\2736\034\374<\325,F\275y\350\226\2739\024\010;bg\\\2747\037S\275\361x\\=\250\371\201\273\262\246(\274fRs=\330I\210<\201mp\275\267h\263;B?\272=\303E\r=\t\367\301\272\242\241\023\275ws\370<\233\220)=\330\377R\275\366\252\226\274A\006\220=?\344d=\016^G\275\003fm<\317j\206\274\326\3104=.\3470<$\277\033=\265\226J\2757\337B=\353\347\213<\035R\362\271\346 \246<\274!\332\274\376\237\243<\251\037\240=\301y\236\274\013\226\215\274\211\300?=:g\341\273H\023\002\273lG2\276a\336>=?u\004=is\322<`p\207;\372\034O=?\034*=\240\331\213=\376\355\250\272P\335\223\275\352\245?<xQ\373;\234}\346\274\255\265?\275j\357\376\275\025(m\275\370K\362={\246\255\275\210\212h=\023$\035\274\247\276@\275H\315\240\275\262M\264\275\277\334<\275{tZ=\336p\036\275\242\204\371<\372:R=3@\377\274\020\374\303=\267^\023=\355=\256\275\302\326@\275K\220=9\246\312\344<\205>\233\274\241@6<\376\327\260<\372\031\200<\366L\030\275\242\203M<\323\267e<a\363*=U\024\376\272\242\340\372;\026\025\031=Mr\336\272\357\260W=\312\346\001\275Q\365\315\274\220W\013<?\247\352\274_\363\315<\200\277k=\353\215\013\274\016\\8<\346n0\275\340\276\330\274n\345\037\275P{\312=:\233e<\233,f<\332\302\267\274\226l\270<\312%f\275\220\ni\275\361\\\355\274\317 9<\030\341\221\275K\006\021=\304\337`\275\005\370\234\275\321:\'=E5G\275\222\327\301\275\014\004j=\332\225z\274\204L\006=\275y\332\274\243g\t=j\307W=5\244\014\273\007]\257\274i\332\340=\246B\t;\0046\345<Q3B<\234(#=\024}\216<s\275c\274\007\036\342:\276\254\177\275\035(\223=J\325\371<\327|\247\274\374R\256<>\224V\275\265a\316;\2770\342<\331<4\275Q\322\023=n\372\224\275S2\216;\356_\206\275$\250\331;\002q$\273@[\213\275\265\342\245=\332\327?\274!\000\241=6[\264=#\307\265\274*l\356\274\252a\220=\350\014\005\274\021\226\006=\354\234\212\275\201@\024=\006\357\353<\365Qq\274\364D0<\201\310\010\273\203\263\245\275S\330\304\275}\021v=ONB=E6\226<\260\035<\274\270 \260\275\361\265\177\274\016\241\237=\241W\340<\277\025\253\274C\031\206<\"\214\'=v\330\201\275W\211\216<\263\020#=\352\324\337\274zp\327<E\266\250\274\244\3764\275*\226\273\275\272J\210=\375\371\314=\025L\030:d\334\251<\225\312R=Fj\032\2756\305%=\024\370\272\274S\315\223\274\311v\033\275\032\270\221\274\332\2332\274\311&F<\352\220\306\273\276\225\260\275\207\262\314\274\037\'\220=\314\376&=\357(\021\274\237/\314\273t\326\211\274\321\230\004;^N%;\340\207\034<\245\023>\275\215\220\014;Z7\340\275\321\004U\275\367\323)<\232\357\037<=(A\275\330\272\031=\304\206)=S\346\243\273\206\032\214<\273\3300<F\230\032\275\310\242?=;^\377;{NY\275\256\010\310<D\327\030\275\231\036\211=M\001C\275n\271H=1S\006<r\0176\272\005js<\035\257\245\274\204\007\276\274\267\320v\273\213G\032\275\266R\030=C]\204\2745\323_=r\252B\274[\312*=\267\016D=+0)\275yK\200=\303\2676=\362j\230\274Aa\211\274\350,\266\275\332\262&\275\t\013A=\2431*<\342\"\246\274\026\023\200=\177\212\223=\220B\201\274\220\320\235\275\371j\231=y\370\323\273\211\2633;\305\310Q\274\231\216F\274\216\267\310\274\234*I=\356\306\001\275\327\2220=\021\327\242\275\242\034\216\274[\255\024=\210\026I\275nx\272\273^\306\244\274\3609\213=\004\034\215\274\300\262\005\275<\226\311<7\201^\274\344\204\006:\030\031\'\275\362O\243<\035\235~;s5[;\376\243\343<D|\212\274\332)\014\275\013?\241\275\351X&\275\207\236\264\273\264\227\204\275g\202\232={\266l=-\363\264\274Y]\240=w^\034\274\372\343\322\273,\216?\275\345\370\217\275\336\010\310\274ED\005=h0F=%\323N=\217\2528\274\010\354e\274\303,!\274\216H\311;,\243\023\275\t\\\300={g\201<K\265\221;b\304\'=F~$=n(\021\275\331UY=3\225\217\275\232@\022\275\0148\240;\024y\t\274\007\322\t=.\r\230\274\257\343u\275\264\325\022\274\177\226\322<\'@\201\273\241\250\013=TK(=\3124\233\275\037\351\022\275~-.=\242y\304\274@\350\"\275J\273\277\274\346:\204=(\202\210\275\000\300\300\274\370\224@<\256W\220=\207\024\213\275\211:\206<tJX=\273\333\002=\020\354X=,\366\024=\331a\330\274\nq\350\273\355\313\311\274\306E\';\177Y\005\274\232\007k\274\020\020\352\274W\212\326<{\270\016\275\017\327\023=\360\311\215=\272\013\265<\332\206\261\275\016gl<\222hW=e\271->KET=\212.9=\341]A\275\313\334\241\274U\004\272<\236\335\220<%\234\316<\222\302\037\274\326\337\201=\312\310 =\340r\242=\2233\214=;J*=\265\311\214\275E\342~<\344Y\214\274obM\275C{2;\206\346\337\2747Q\340\272\277\037T\275\337}\305\274\241\253\317=\272\224\200;\364\006 \275,:d\274(\233 \274\020\002\272=\250\255]=\356\235L\274m\360\370<\235h>\275\205+\301\273$\000\371\272\023\001\231<\3336\333<W<\032\275\316\256\341;\200\367\023=?\211Q=\303\327H=\323\315\217<\261\267R\275W\275\206\273S0C=yPZ\273#\240\203\275\361\316\256\274x!\026\274\317\253\213\274Wu\212<544<\264\027\272=\201\252\206=\010\230!=\231`\237\273\331\320\357\273\253\271\377<\025OQ\275\027!\242<\231\322\201\275\003T~\275f\324\337\274\367 \332\273H\304V<3\3661\275\357TP=\033\333D=M.4=g\022\306\2750\345)\275c\261\352\273\353 \t\275\016i\351\274\016\341\377\274\204\362\260\274\013GN=\261Bp=\245\010*\275\035\320\"\274\0167\360;\362W\253<\272F\220\274^\000\214\275\265\325H\275\177C\001=l\311\267<\256\'@\275\202cJ<A=\r<N^3\275V\321\342<`\177;\274\2654\354<2\366\223\275Y\010r=\274\350H\275W\002[\273R02=\367\361J\274O\211m\275\304\346\254\275\244u\253=\367\213\010=\020`\036\275-\236\250;\335Z\303\273\024p\235<h\343\005\274)^\306\275\207\340*:\036\017R\275\027\317\312\2728x\032=N\253-\275\256\227O\274\300\350\202=\355c\317\273S\000\335;Bi0\275\351Y\262=\005(+\275\312]\256\274\2044\177\275\202w\347=\227\345\262\273+\254t=\243y\224=\354\177\212\275i~\205=\201\242\212=\337[_\274\312A\264<d@\206=\032\201\205\274G\036\223\275\230\255\177=\034\003\207\274<\245\021;\314#\220\274PY\227<\361\214\021\275 \273\277\272\'\022\255=\261\363\223:2\362\277<\301\370\251\275\316l\000\275&W\203<\275\177\274\275\304\240-<d\317\221<\306\317#\275\200\037\223<\265\r\360:j\r]\275\035\027\364\274\255\363\223\275@\273h=\275\004\t\275I\357\205\275\243P\016\274\274\032\217\275>\013\030\275ZR-=\255e\204\274\360J\207\274w\213\256\273_\013\233=:\303\210=sD\236<\225Fk;~\276\212\275`\017\366\273t\301\331<\202\344\340;\321\304w\274\036\253>=\234\225\214\275-b\205<\016\326\225\273R\215*\275\257j\250\2746}N<\274\016\317\274<\265\207<\233\326\023\273\306\272\270\274Ew&\275\333!j=\371/Y=\023\375N<\317\277\260\274\277|X\275C\313\'\275\321\262\003=\367D\005<\005X\247;o\264\361\274\004\271\033=\362!\236=\315\366>\275N\347\016<\332\263o\274Hv\004=\335\324\177\275\224\374u<\316\363*;z\231:\275<\307\352<\363\030\245\274\310\220\331=;\255\243\274\357\335g\275\027\270\203\274\324\211\256<\024B\254<\276\333\370<M\372\023\274\370k\234\275\231\267,=G\323V\275\353\n\327;$\225X<\273\345\315\274\'\236\331\274\375\223\207=\321j\014\275\355\316\033\274`nQ=\210co\274\300\003\275<\261F.\275\027\024\306\275\023a\263;\326\253\037=\345I\236\273\\\335\334\275\267_\3758\224\301\200<V\330@\275\353!k=\217\211\204\275PV\303\273\274\232\022\275\233q\026\275SC:\275\240\241\200<\325q\035\275\234%\034\275\333tk=\246\334\265;\354\233X\275r\024\025\275)\014\271=O\257\257\274\234\016\016:\222\277/\275\366\207\247=X\026\340\274\007\035\3179\320_\272<-\344\226=\214\204\253\275\320\303\345<\t\227\212\275\275\244:\275\331a\232=\2061\242<\035\036\260\275\367\374\033\275\261\367\205=h\254i=\352\002\0149\330\210T\275\261y\237=R\254\212<\022\204P\274!\206p\275\025\177\255\275[\006\233: \216\002=\335\013\302=\206)\030\275\'f\235\2754\350\217\274\340\375=\275*Q\275\274\242\325\356<_$#=\331~\250\273\036aL\274\253\370\034\274\\\254\035<D\325\205<i\225\271<\364\375T=\365\tN\273HCY=d\316\274\274\026\363j\273\353-\000\2754\201\370\274\334\205H=\271\345\250\275\340|\014\2753\227`\275r\327\231\275\022\362\367<\000\326#\275\315$\022<\367s\226\274+|`=\016\370D\275\245\337\016\275\361\327\315\274\304\003\200\275\nX9=.C\364\274\333\322h\275\323<\253<\325 ;\275\321\231\311\273p\nm\275\356\206\372\274\336\033_=\264\256\034\275\303M)\274\235U\366\275.\016\037\275\322mI\275T\253\374\2740\013\334<>H\020\274d\221\260\275$\234\326\274\365Ji=\210\366\364\275\223`\202\275\274\344\010\2752\2476<\004^e<\253K\221\274\367\236\t\2750\350\276<$\276\233<\320@\010\275V\206\223=9Or<\256\014\027=*\211\214\275\321\351Z=\364\271\266\274_\232\306\274;~\224\275\211kO\274+;d;I\254\002<\034%\271;\307\255\232:\031\"\241<V}>=6\236\302<\233\314\224=cAd=\034\035\212\274\024F\006\275%\355V<\270\310i\274\203\264\017<\026\273U=\017\010P=\234\203?=\n\347\241<XV\314<\253\226\250;\"\263\037\273\316P\247=\211Q\013\273\232\026\245=\335\360\024=\020\0137<\206}\357=3?\014\275\222)\324\274n\317\354;\351_N\274\244\275*\275\2622t\275J\247;\273\217\251b\275\334\301\274<,\036z\274\375am\275\311N\020<uq)\274\201]U<\307\332\251<\252\333c\275\010\0027\274\034\200y<\253V\016=\343\322\250<TX\225\275\234\342\237\275\316\003a<%N\240\275\373L\200\275}d\000\272e\006\260\275\020\250\272<\340D\251<F&\255\274\352\234\002\276\307N\031\273+\375\t\275\300\244\300=\340j\266\274\r\007\276\273\036\242L\275MD\221\275t\224\032=\366 \234=\337\215>=\261y+\275\301\3468=\306\253\326;<=q;s\030]\274\264\032$\275\005\310\341<\322\361\004\275r@g=\207\351\272<\261G\202\274\017\217\032;\',\237\274\r\347\230=\331\032\036\274\330\313e\275\246o\243\274\244\214\013\275\270B\213=\352\001\010\275\277\371#=\3440+=\270B\272<\017\230\260<V\200\312=\0072\216\274\035\367\017=\270\340\206\275\035\226x\274d\371\265<#\274i=\353pt\274\250\310\026\275\265\361\204<\213<\037\275v\000u=<\3400=:8\344\274Ck\213\275\357\270\223\275\347\271\216\275\211\263\340;\n{\242\275!iR=\2352\027=\252\323u=B\026\244=\372J\354\274\264c\024\274\n\364\031\274\033\365\255\272\260}\267\273\210\025\3667\370\022\221\274:\013>=\032\252\035\274\367\225\343\275|=[\273\350\016K=\202O\373<\270M\000\275;l\202=~\311\014\275\245:F\275\rT\265\272\205Q\003=\235\263\034\274\371?\204\274w\366\314\274=\030\373<:?C\275]\371\345<A\327i;Z\235\337\274\274\031-\275\372i\201;w\263\310\274LL\335\274\271\222g=f\217\n<6\037\246\274\230H\200\275g\372\027=\031\260\362<!2h=\206\350\356:\007\" =\\\325\016<\203c\340\273J\373,=\245\355\246<\225g\022\275\312\247_\275\031n%\2745\024D\274\266\352\000\274\371\013\025=|~\220=\227E\352\274\350\037\035=\342\262\260\274\314!?<\005)N\274K\317\250\2724\266\261\274 !\'\275\021Cf\275\303\327T\274R\016\363\275j\325\241\274N\355\362<-\241\327=\345\266Z\275\033a\247\275\'f2\274\240\356\321\274\304\312\326\274\253_\266;8\000\016=D\336\367<\310\264r=\226X\233\275\"\226e=\3167R\274\366\355\221\274\244\263\213<s\205*\273 \340\034\275\267\273N\274\352\344\313<\371d\242<\322\367z<\350\271\023\275\332\n\304\274\201\007\022\275I\301\253\274\034\035\236=\211\022M=xC\237<:\\\307<\237\273\242\275k\343q=\311\322\222\274\ne\350\274\010\257%\275BE\371\274\363q8=_\362\345\274\377\177?=?>\362:\223X^\275\354e\n\275\222\263\305=\263\345\202\275\004A\225\275^\004_=Tl\017\274\211z\221\275\3412\375\274\227\362\333\273\007_[=\273\374\237\275\361\\S\275\020\241\306\274Dc\n\275\307\202\017\274(\205\366<\355\261\357\274\217\025\354=\217\342\350<\250\345\025<\017\030\370\273N\354\022<f\244\n\275:\332*\275\373HD<O\013\254<V\007w<\266\213\014=\243iw\273o\367;=n\377\355\272(1\200<\352\212\326\274-\001\316<\004\241%\275\314)\030\276uzK\275v\366,\274\367\234\003\275\035\332\206=\270O\250=-\350\271<Z%\023=\331DV\273\350\360\007;\325\024\233=^\333\241=\363w\275\274\260\205\200\275\267\036\032<\200\307\241=EJ4:\026\212,=\215Ib\273\001\360\207\274\366)\201=\003\373O\275\230\300\021=\361\372\021=\222\307\016<Wj\004:\212\316\216\275\270\334\232<Hfz<;\334\036\275D\342!=#k\253<~z\277\273W\364\006<\000-\375\274\262\357\002\275\251\031\267;\241)\350<[M\266\274\177\363G<v\307\016\274\203=i=)!\274<z\213\213\2754l&=8\271F<P\240p=\323\201\275<\241\275\206=\005\215)\274\025\220\225\274\003[w\275\261.=\274\235\252m\274#]/\275\336o\275<\333\204\000\275>1\\\274\026S\227\274\327\236\n\274\027\006\312\274\301\341D=W\350A=\232\356y<\004W\n\275\222\371j=6\301\201\275\216\341\352\273j\367\373:\347Q\340<-)\330<\367\325v\274\030h\224\2742\370\221\275N\010\340=\017B\253<\010\217R\275\340\275\257\274\311\351q\274\343\022\036=~\203\371\273\027\024\235\275\003\010\232\2743T\033\275Y\227\314\274;\300F=EB\273<\304\277\250<\304\257k;\221{\255\275C\261\257<\3778\n\275\2258#=\253\207Q\274\247\347\262;o\263\331\273MM\312=\032\023\237<\212\217\250=&Z\331\275\244a\225\2752\227_\274\375Y?=\202\030\341\273\236\244\n<\326\303\036\274\031o\200=|\331\345<\246VS==\333\007\275\321\n\215=\254\226n\275DT\271<\336^\016\274\305\356q\274\310*\030\273\200\267\005<\222\3637=\334]\235\275\357\2640\275]\243\200\275\232\307\267\274\367\271M<\014\362b=\305\234\322<\234P\345<\236\271\271<\211\337\252<\327\037\246=`\"\216\275Q\220\026=\326\202\016\275\252\341\025=a\323\230\274_w\003=-\014\253;\027Q\224\275@\236\t\272F\343\024\275\254\250\332:\347\226\321\274{\355\273;M\200r=\233z\320\274m\215\306\275\346o\266\274\272\005\352<\362\202\024\275F\016{\275\002\2118=0\t\275\274\\\\\214<c\212\214;Yn\323\274D\353\243\274\263~\330\274u\017\205<.\360\263<n\277\215\275\220>~\274>\362#\275l[\235<_l3=\215%\035=U\314\333\274\333\\\020\275z2+=\307R\327=l=*<aI\245\274?>\001=K\305\200\275\240\232\366\272\373\200(\2742\303\020=\254\223\312\274\n%\016=\0375\332\274W=d;\256\003\257\274\205}~<p\210\301\274\344\377\371\274\254\'\253\274\265\247><\321\014/\275\034U\227=\273\352w\274\357\2334=\245;\004\274\211\363&\275\014\n\245=\nJ\026<4\344\250=\033\\\224=\313\233\013=\344f\001=\257\253\241=\241\202\362;\006\235\336\274\2749\236<j\367#\274\345\362\217\275\027o\013=U\362\201\273\315Q\252\274\345\3166<\216\374\344\274\014\220]\274\235w\263\274\262G\367<\350\225\232\273\347v\267\275\000\230\020=vsN<7]\267<\331t\230\275`\3538\274\307M\207=7\372k\272C\310\273=O\rb\275B\315!<\352\327\246\275[\330h\275;6d;\032M\325<x\232\'=\034eh=G\360\200=ptY=|\023\376<\002\241[=USP\273f6\236;1\010F=\210\3730\275m\217\201\275\236qE=Nu0\275N|\301=\262g]\275\352G\216\274\2039L=\263\237Q=\216\033\241<dS\311<\244\0321=\0052I\274\361\363j=\\~\334\274Y\367\271=\2771\255<\222o@=\227\027O\275\3627\315\274-=\204\275\360\336_\275\255w\347\274|\027\225<i\033\341;\355\227\002=g\3615=.\n\207=\353\243\t=\274\343\222\273\361\212\305\273\302Zt\275\230\246Z:p\010\373;%\306Q</\033p<D\010\252<\344\252\014\275\347\2574=\220\3763=\365\263\244=E\031\221\274\2254\237\274\362\264\246\274\214\262\370;\0316\260\274P\023\307\274o\314\266\274A\010n\275\262\031c\274\214\225A\275\032\222\240\275\330\304\222=\366cI\274\'D\262<\032\rk<u\342\007<\263\327\256<\204Z=<e\325^\274\271\3018\275\240\226m=\322U\343\274\241\223\014=l\341\276<\225\224,\275\302Xy\275\032\300\355<\024\306\026\275kZ\233=-\220\030=-}u<\2415X=5\027\311<\2631\343<\033\270:\275\034\nd\274\326\230@\274\024\325\204<\201\023Q=\203c\346=\333+^=\277\267\022=\245\251\363<3b\265<\177;Q\275w}\304<N~\301;\004\201J=\255\3200<}\275\347:\037\372\306;\241\027==\240}\370\275\275\342C\275\317%\216\275Ip\360<$\347\215\2754>\250\273\256\257\221\275v8\263;1\260\233:\355\236\'\27498P=\275T\024\275C\013\355<k\310\234\275t\350\221=!\305\306\274\320\005\t<\352\274\264\274\362\327\177\275\n<\"\275j\032\313<m\030\n\274&\213\033<mp\250;\200\360\377\274=6\252\274\311?1=\356}\016=\242WO\273=\017\n\275| \021\275\362\360\345\275\021 &=\325\235M\275/\007\222=\335\252\001=9\235/=\217\270\006=;\254\207\274\035\001\374=O+S\275\016\276\207<\250\375C\274\222:\002\275X\331\200<\312!{\274p\320\347<\375-h<P\331\214\275\354l\345\274\365\340D=\206\303\233\275\372\313\272<wV\215<\326\261\213\273\301\'a=fR\004\275\342+D\275\365\323\301\274\346PR\274\352\013\303=\314l\376<P\'\020\275\312\370\340\2731<u\275\303\252\336\273\213Y\342;D@\307\274&\022\375<\027F&\274q\253\247\274\340^?\275\207\306\204<E\027\240\274\364\242\264<\350P\t<a\264\030\275C\342\234<\214\204*=\237\232\360<\344\331h\274\270\306+\275?\237\321\274\330R\024;\304[\373;\346N\243;\366\245\002\275\003\311\232<\ne\270;\032\214\274\273\024\320\247<\'\014\312=-;T=\210\200F\275\3545V\274\0225\345\274t:\332\274\301\005\232\275\3658K=\201\263\343<)\201\274<\256\035\355;\305\223u=\316\000\333\274k\230\212\275\007\357\031=:\332\330\275\205\253\214\273\007\262\314\274\234Aq=\005\210\003=\'\304 < IK;\244\344\236=0\260@=\037\310\202\275?N\244\275\022\363a=]\212\026<:W\231;er\310<\325\240\264\275\320\221\365<\037\373\323\272\246\036\240=\250H\335\273\257\263\t<i~\037;\026\342\020=jL\224\275v\3612\274>\236%=\375\221\204\2745\247i\275\233}\244:\215|O=\367-\253=\251\231\230\275\366P\351;sM==\257\356\034<\233\334\007\275\177\177s\275\341\2114=r\177\343\2743\023E=\215hP\275\323*\232\274\245\311\227<\027\246\020=\355pZ;[\305\230\274?K\351\274\253\242b=H\264y<ss\202=md\231\274dr\004=\316\217h=\320\330\300\274\317\265U=\341\217\365\273\345/(\274L\013E\274@nS\275\323x\036<\355\275\324=\323\302D\275gSG\275\247\246\257\273\215\315\327<G\263\301\273\306\365\365\274\017\250==\227\374V<I\3042\275\312\372\322<\216\030\034\275\213\272D=\t\210\233\273\305e-\274\243\277l\271\251\021\021=\311\035[=\376\025\r=\004\006\303<\262\342\353\275\252\017\n=\\\347a=\353\313\303\273\270<\251=&\363\313\274EB1=}\026\322<\235\352\230\274|\236\303\272\3575>=C\270M\275\203\266E;\373\223r=\347\206\r=\246,\033\275\020Y\336\274pY>=\034\202P=&o(>\034\'\300=j\027\002=\222\330\256\273Y\323\325\273Wl\365=\177\257\214<\034\177\003\275\023\031\212=x\031\242=\363A\235<\001\236\347\274\310jM=\221V\373<\025\206\255\274K\351\t=@\346W\275\225\367\000\274\250\357A\275\267\370\277<;\342\233\274\336F\016\276\266dl\275U\013\357<\203\033\226<\307\323\331<\010Hb\274`\314\342\274z\177\261\274\t\230\263<\224\026\214\275\256\342\233\274o>\347<u\271s\275\263\310\236=/I\231\273\334\276\'=\001\004n\274b\333\351\274\366\377\013\275%\370\256<1\335:=\330\304\253\275\3056M\275I\217\271\275\375\223{=\3419\211\274\177\033\215\274\330l\240=\022#\207\274m\022k<\017\314\234\274W}\260\274\356M<=&\300><\370\211\353\274\263\2673=)\321\233<;0\201\275hY\202\274 ~\345\274\3462\226=\260d\203\274[G\326<~\256:\275S\354\276\274]\202M\275#\365$\275\266^9<\027,\271=\200r\311\274Z\344\212=0fP<\377\314\350;N\242\2547\203\216\n\275\235\337\205=n\263\267<<\"\035<\270\202<\275\251\022\253\273FQ\"<kV\223<z\016\273\274\210\237\030\275\336w4<\027\241\274\273w\243\313;\377\342&=\272H\010\275\027\000\262<\372D\352\27416\343\272\213\002m=6\305\276=\034*\312\275\036\036L=\356\250o<\314\366e;\276\323\257\275\371\357\321\274\344\361\201=~-\304<\333\322\020\273\353e(\275\2446\316<\307\224\300\274CtW<\032,\235\273\265\3314\274Ah2\275\261\035><Np\r\275\233\301\231=\240\374\032\274+\033\214\275kJ\205=\320\365$\274A\020\215<i\030\222\275MNZ=\372\364\205=\241\257C\275]\221#<\354\332\211=\305\201V\275\314\240V<b/\374\274<\177\201=et\205\275x\344\214=\351a\201\273\234oW:\305 \373\274\212:i\275!\374o=l\027\256\273\316\017\200=i$\254\274)M1\275\215\310\262;\246\237\247<\357\3654<L\270\343\274=O\007<\271\025e<\240\367\342\274\271L\023\275\030\316\002\275\245\262\233<\222T\303<\275\264\004\275\006\rH\274\327\027&<,\234\203=\277,s=\356\217\376<\340\334\321<\022\3468\275\025\325<\275\\\273\203\275ar\214<\353\2203=\267\245\343;\017jJ\27573R<m\014\300<gkw=\215D\007\275\220\030\266==\2079=\250\227\224\274\261\367\206\275\341\324\221=\260\013<\275e\312\272;ao\r\275\363\"\032=\243\3017\275\275\261\314=J\024\242\274b\351\272<\020B\004=7\222\211\274\316o|\275N\301\000\276\2174\242=/\371\037=w\253\376\273v\317\344\274\310\034,<>\363c<\005\260\204\273\243Q\347=\322<\331\273\302\2348\274\t\225-:\222m7\275\200\335\211\274\235\360\236\274\320\002\303\2749\263\326=\211\330N=\0241\252<\000\3425\275\323\\\343\274\354-9\2753\320T\275\033\241\330<\267\313o;\344(\253=\304\327\231=^l\237\275s\032Y:\t!\220\274A\350\360<)\262]\274\304\343\356\274\346\333\274\274\264\272\355\274\340;\330<\005\000\276\275\'H\353;_\201\003\275Il\346\274\300\363z=\257NY\275\364g\207\275\334\360\217\273F\362`<\364\352\310\274I\024\276\274\371?\337\274\177G\202\275\227t\'<\026\003\212\275\320^[\275\t\313X<\n\244\345<\276\026}\275\246\237\215\274\301\330\265\274\375\306\302\274{\367\363<c+\021\275N]\014\275\205e\023=\307\\\326\274\260\272\361<8r\353;\351\032\201<k^\334<\352J\347;\022 \222\273?\244\232<Mu&\275\243`L\275\310\256\216\273\021vR\275\000s]=;\316\357<t_\274<\214\363\245<3\272\014<\246\200\r\275\3113\230\273\351:+=\242?\021\275\237\030\227\274\2648M\274\265\362\236<-\034\230\275I\316\'\274d\177?\274[\222\270\274\346\251\021=\203\271J<\r\376\214\272R\310\333\273;\002\024>(\003x=\021N\374\274\314\027\177\275 \261\371<\220&)\275\'l\037=\nFJ\274\317,|\275\303\271\264<\343#5\275%4^=\336\307*=S\017c=`\326I;4@\247=\n\336\002=<\355\027=\205\315\212\273\247\264\370:\270\354\233\274\362\254\200\275\227\342\037\271+\201A\275<\312\027=\t\355S=P.%=\370YM< $#\275\300\266\034\275\\\224%\275\302\237\360=\356\212\220\275\374\277-=_\242T=@\356\326<\374\345\020=\031\310m;\3530\262\275r\216\304\274%\375\006\2754#\341\274\325X\226=\250\001T=\225\361\202=Eb2=\243\202\335<\017e\001\275\262#\203=c\340\033<\312\3629\275\313%\377\274\237\354\217\275Ej\204=\311n\253\273\211\357\264<\352R\354<\360\022?\275\336\373\325;\300\361\356<\226\274\223\275\274v\314\273m\331\261<4\353\'<\003s\322=\217\236\261\274s;f=T\222-<\234R#=\225\221\340\2731\255\242=H\316\246<E\263\363\274\252\217\226\274B\t\255\275\315$\370;NC\033\274LA\034\275# \002=\006\222\"=\317\270\022<\251\255?=\030a\362\274\331\367/=\210\231\302=\2056)\274^\301\210\275\032\376\361=\216\377\"<\224\343_\275!\034\267<{\2339=WEM= \261\376\273\350\361\270=\223\326Z\275CRj=>\002[<\251=;<d\305X\275\031\236\330\274\326\355)\274\370\016:=\2349.<\'B1=1_\n\275\237o\203\274l\247\024\275/\232:\275\220l\t\274]|\316<-\230\233\274d\203;<\327\004\251\274\314\310f=>\016F\275\307\254\021\275\344\272\250\274\273\315\206;\273\206\233\275:\237\023<\314\327\014\275\r\007&\275d\337\010\274n{\235;g\254(;;\244\355<wh\017\275\275q\323;5cj;\337p\241<j\007\300\275\276D\316\274\376\356I\273 \266\226\275\221\007J<v\210\\<\330\352V<\036\263\255\274\322\252\356=X\323\255\274\0201y\274d\241\363\274UH\017\275\247-\200=\3673G\2750\316[\274\323\207\251<\236W%;\314\274\316=\342y\275=Hg =\021\267\220\274\001\034\\<\317\262><%\0333=\213\326\232<\3753)\275\240\030\317=\002\221\002\276\241\024\241\275\307vZ=\340\364I=*\257V\274\220v\202=1\n\221\273J\330\277\2741\330C<\371\337\244\2747\216\021\275\335\201\365\2747Wm<\331\220Z=\247\344\230<WF\335<\267G\224\274\367\210\217=\345\216\276\275\235\377\003=S\212\010\274[\316S\274t\255\242<\224\305W=\267V\232<\002@\214\275\340\036\260<\275\375\010\2751\320$=\005\247\236\275\347X1=\275\2472=\033\354|\274`\020\225;up\204\272\007\244\037\2751\266L<\306\277f\273a\023\032=J\032\343<_i\302\274\271\376\036\274_D\251\275p\034\321\273\251\374\030<\265\261\\<]\352\035\274\303ji=\275\357\037<\240\315<<\324Y^\275\344\240|=\213A\345\274A\315\256;\331J\263<\323\360\211=/\201\033\275h\337,\275o\200!=~\006N\275*?a=\302\346\260=\014\024\233;w|\274\274\277\240\237\275\204\035\211\274r\261\353<8\326\213\275\365EC\274\010!\236<,\215\276\274\265\356\226\275:]i\275\030\377M\275Ul\205\274\224\372s;\375\333\316;\363k\236<S\262\236\275\313K<<\262\214\342<$\361\212<\304\'X\274\254\377K\274\374\276\215=p\200\240<^D\007\275\\>\261<:\262e=K+==\360YH=-\230d=\216\343:\275\004\030\004\275P\233q\275\017\365C=\212\033\211\275?By=\005\010\350\273\324\247\035=\033\325\253<qY\260\275\215\272\377\274\210\021T\275\230\035\001\275\030\255)=\310g\310\274mH\006\274~I_=x\253O=\303\016\324\274\t\327\274\273!\247e=\262N2\274\234x\030\273\001\342-=\243x\210\275\205w\226<pU\215=\204\345\347\274e\260\236<\341\303\205=\221\003\251=S\036\233;\202\254\370\274\264\371\354<}\006\361\2737\177\002\275\245\367\251=\034n\222\275\343=\222\274\324\234c\275\356qj\275\035=\026<\005\341\244<\377\322\010>\224u*=\335\363\316\274\020\264e=\326\327>\274\004\337\363<`\305\217\275V,\375\273)\251!=Qp\001\274\362\306\275\274\304\315\017=W\002\272\274\021\250\t\275{\261\321<\035\244v=C\240\343<n\350\227<\360\026O\275\207{^\274\013\206N=\271\207\275<@ T=\271\272\333\274O\263\222=\227\3660\275Ut\220=\213R\300\273\005-\216;\232\302+\275[\351\031=\202\200O\274\350k)<\205JZ=>v\237\274\037\346\006=\275\233Y\275\006N\252=O\376:=eQK\275\032\371:\273[\007\262\274o\300\201\274x\241\340:\362[0\275\260\005\002=\230\217\246\275\214\025\273<g\032\016=2\036\221\275\013\310\020<\300\214g\275\'\246\203\274_\321\201\275\211\237\255\275\006\007F\275\030<\327<:\206\327<s\307\026\274\312\205,\274>\215\326<d\274\t=5z\'\275\260\267\202\275\003\237\215\275\361w\n\275<w\014\275\335\215\327\2753\\\032<\315Z>\275L\033S=<\212\306<\335\242t<T>g\273M|R\2752\026\032<\264C\370<\030)\221;\rg\315\274\337\302\025\274\243\\9<)\244\212;\267\304\251;c\245\\\274\316Q\321=\331@\326<B0\315\273R\330\320\273O\334\216<\177\"X\275Y\2376\275\365\216\230\275s+\365\274\316\036\205\275\252?\220\274I\016I<\277\355a\274\265\013\235\275\026\335_=j\036\202\275\360\260Q\274\235\233\324<\204WU\274\207\030\214\273\026>><&x9\275H{ =\207\277=\274\275\212\021\275PY\267\275Rm\302\275\002\2671\274\266\230\212=S\242\000\275Z\177\256;\036)\t\275\354$\264<\216v\257<\212X\307\275\027\222\250=s\030\357\275\342\257\302\274H\321s<\371\334P=\272\337\257\275\200\371\263<O\377\315\274\312\323<\273\213\357\013\274F\316?\273\272\016\025;wnW<S_\202=\263\377\314=\364\024\323\274\270C\323\274g\224Y=\225\204\306\274o\316y\275:1\226<\211G$\275sw\252=\236\035\246;\355~o\275i\200 ;\375\255\312;\201\262>\275\317\201M=\014s\211\274\312A\225=\224\301\362\274\005\036\225= u{<\\+x\275+M\217;\242B\004\275\235\363\024\273\217Q\020\275/v\376<\r\350O=\227{\313;\307\354\242\272\000w\n\275\r\350\277=\000a\332<V\014\211<\3666\255<U\354\321\274\244\246\002\274\213\224\202\274\3355\366\274\337t\264\274\021\010\233\275\350\367\262\275v\374\330\2748\2117=V=\206;\364rn\275\324\364P=\212\rG\274\363\363e=\2202c=\320\203\215<\343\254F\275~\377\037=\226V\376\272\"*\236\273\311\303U\274|19\274Q\220O<\216: \275pG\365<,\361}\273!\324&\275.\325\r=\205,\"\275\030\202\266<C\326\213\275-\253e\273\031\256\310\274\350\300\345<\333\326<:)\244\231;\312\314-\2753H\214=\255=;\272E#W\275\340^\260\272_\212\000\275\351\2618\274\227i\232<\255\036\241\274\036\276\206\274\030W\262;\257\'<<\206\223z=\327\t\216\274\230oA=\327\034\377\274\177\2145\274\030\207\342<c\023V<|\233\325<\020\347\006\275\236\033\001>\n\371\312\275B\364\234=\247\230\277\274\347\326\003\275\361\203\307<\342\3719\275*\341T\274\006\211<\275\010\244\377<\234oT\275Q\313\275=\354\036.\275\334\347\222:n\313$=$Y\234\273v\2076=\034{d\275\033\372\034\272\343\360N\275;\304a\275\267a\217=\350\002\216\275\202IS\274\344=\247:\363l\336\273\206\032\233=:q\316\274\276\303\312\270\351\2706\273:,X\275#\210\013\275>3\352\274q\351\245<\377\366\361<z\026\242\274P$\356<\216%\317\273\357\352\256=i\223\254=\016\'T\275&\345\234\274/\251?=\225(\345\274\2153\024=X\303w\275\374+!\275\261_U\275 \'\365<\211\323\004<\247\227\303\272|\013.\2721\2068\275\224U\006\275t\373\030\275\020\020\371\273F\3723=\357\317\230<\203\361\353<\"\030\214=?\347\302=F\323\3008\372|\243\273\262D\244=r\271\322;[Hf\275h\347+=\"G}=\204m\363<\270d|=w\325\200\2757\262\026\275x\025p\274\377\302\201\274\272\004+=\250\t\030=2f\177=\254\246\014<\200\335\022\274\374\000\224=2\372@<\266\330\203=I\202\207\273\262U\217<\262d\257\275\230\312\322\275\317A\230\271\352\245g<\303\341`\275\233\275\304\270O9H=\332R\252<\363\r\013\274\247\r\177=J.>\275c\306\016<\353\346:=\317\215\265\275\365\255\247\275yA\007\275\234\001\373\275d\034)=\035D\206<qX\207<\243j\211<\020H\024=<\023\256\275v`\354;\273\2625=H\361\310\274\276-2\275\346\234d<3v\272<x \316;\364H\342=\317\226\227\273\247\377\031\275\226&9\273\271\247+=\220v\222=\345$\373\274\262&\211\275\376\227\031=\367\363\230<\266\324\213=\257\026\374=?\361\204<\315e\277<\"nZ=@.\"\275\237\337\264=\303\333\256=\377\0373\274:\363Y\275\256\364\257\274\233X\016\273&\017\021\275\225\254\035\275\373\304-=\215+\007=9\307\211\274H\307-<\"\327-<\0247\263\272~\211$=4\273\372\274M\266\233\275H\'\217\275\365\317\004\273\322\310\033\2755\350\271\274F \267\274\0162\n<9\362\\<Z\016j=\037\317\277<\335\373\205<{\036\334;\025\362\245<e f\274;7\033=d<\332\274Fa\344;\376\264\'\275.\247\244=\335z\341\274\241z\001\274R\353\224\274\250\246\334\273$;#=\220\0270\275O\330\362\273\2062\205\275\264\376\261:\211\215(=\247\201;\275\233\264\3458\373\253\314;1\357/\275\033\261W\274ZCY=\361\310\227\274\226\037\r\275=2 =\302\250\177\275\032\277\007\275?\034p\274\2151t=\223#K\274\336q\222=\357\002\036\275\027\275Y;*\037f\275p\262,\274D\276\361;NA?\274\341\2621\275\301\226\234<\332n[\275\246\337\356\273\362\365\236<\027Cm\275|Tn\275N\250\246=&y\272:\232t)=,\236\n=}\305\265\275\377;G<\177\002y\273\276y\325\275:(\224=2\177\240\275X\316L=\246i\010=\022`\213\273\224@\206\275N\331\007=\006\211v\274\322\236\240<\313\236E<\263\272\306\274a\377P=\244\247\031\275\372\316\016=\\\346l<\310;C\273\032\203\365\274\375\246m=\304ko=\321\353\237\275\241G`\2759e==\243\306\247\275\340\235J\275%cR=F\234R<\364mv<_\035\315\272\351\350\016<\217\004\320=qd\321<7\t(\274\307\002c\275\320_\230\272w\316X\275\222s\366<\311[\252\274\313\023\276\275\331\317\255;\326h\240\274\364!U=\307L\207\275;O~;\222\323\251\272\340\251\025=\273uq= \037\225\274\007\030@\275\310\252\236;g\2131<)g]=\255\004\331\274\217\205_\274P\264T<5\313\275=O\242\226;\335\263j\275;\270\271\275\376Lg\274\223e\241\272\243_\202=\341o\277\275\246\212|=\321\210l<\005B\275;\324*\271<\003\367\202\274_\243\331<W\205\r=\006l\212\273\237\030Q\275\325\347\221\274\254^E\274I\306\310\274O\303\271\274\307\344\224<\232\367A\275M\325^\274{0\273\273\267\363&\275V\370\335<\353\235\323\275\267k\2748\362nm\274\010\312\276;J\204\017<\273] =\310\360\222=\004K\r=\024\2055\2741\233.=S\333\261\274\225=\374\274\201U\001<\217\241\236\274\024lR=\2320\326<\333d\252=\237\367\220=km\302=r\362v\274\320J\205\275\337k\2619{\355\t\275i\331\241\275\235\276=:h!\235\274P$Y\275\334\262$\274\367#\035\275\034\226\035<\230\305k==\032\201\274n\325\266;\335V\255\273\332\371\264\274\016Q\272\275Q\256\315=\220\020\200\275\016\312\236;%N\236<\036\305J<xmV\275\310\006\313=\266\326\224\274\325\233\010<\242\373P=@\007\270\273\270\312\002\274aLC\273H<\303\272g@\235<\n\3258\275\333a\020<\027\213\020\274\nb4;d\341\027=^:\245<\350\026.=\376\333\351;\343\227\030\272+\221#\274H\263\362\274\342\362\235\273\271%\'=\242\275\025=\232.4\274\n\362\230\275\\\303\301\274\316ka=\3467\371\274\321\322,<\275k\204=m\305\321<\354;\240<\256\'\203= \243\t=@[0\275"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/concat"
  op: "ConcatV2"
  input: "lstm_1/Const"
  input: "lstm_1/Const_1"
  input: "lstm_1/Const_2"
  input: "lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/read"
  op: "Identity"
  input: "lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/zeros_like"
  op: "ZerosLike"
  input: "lstm_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Sum"
  op: "Sum"
  input: "lstm_1/zeros_like"
  input: "lstm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_1/Sum"
  input: "lstm_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile_1"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose"
  op: "Transpose"
  input: "lstm_1_input"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1/Shape"
  input: "lstm_1/strided_slice_12/stack"
  input: "lstm_1/strided_slice_12/stack_1"
  input: "lstm_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1/transpose"
  input: "lstm_1/strided_slice_13/stack"
  input: "lstm_1/strided_slice_13/stack_1"
  input: "lstm_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/MatMul"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/MatMul"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add"
  op: "Add"
  input: "lstm_1/BiasAdd"
  input: "lstm_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul"
  op: "Mul"
  input: "lstm_1/mul/x"
  input: "lstm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_1"
  op: "Add"
  input: "lstm_1/mul"
  input: "lstm_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/add_1"
  input: "lstm_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value"
  op: "Maximum"
  input: "lstm_1/clip_by_value/Minimum"
  input: "lstm_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2"
  op: "Add"
  input: "lstm_1/BiasAdd_1"
  input: "lstm_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_1"
  op: "Mul"
  input: "lstm_1/mul_1/x"
  input: "lstm_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_3"
  op: "Add"
  input: "lstm_1/mul_1"
  input: "lstm_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/add_3"
  input: "lstm_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/clip_by_value_1/Minimum"
  input: "lstm_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_2"
  op: "Mul"
  input: "lstm_1/clip_by_value_1"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4"
  op: "Add"
  input: "lstm_1/BiasAdd_2"
  input: "lstm_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh"
  op: "Tanh"
  input: "lstm_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_3"
  op: "Mul"
  input: "lstm_1/clip_by_value"
  input: "lstm_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_5"
  op: "Add"
  input: "lstm_1/mul_2"
  input: "lstm_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6"
  op: "Add"
  input: "lstm_1/BiasAdd_3"
  input: "lstm_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_4"
  op: "Mul"
  input: "lstm_1/mul_4/x"
  input: "lstm_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_7"
  op: "Add"
  input: "lstm_1/mul_4"
  input: "lstm_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/add_7"
  input: "lstm_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/clip_by_value_2/Minimum"
  input: "lstm_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_5"
  op: "Mul"
  input: "lstm_1/clip_by_value_2"
  input: "lstm_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start"
  input: "lstm_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "lstm_1/transpose"
  input: "lstm_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "lstm_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter"
  op: "Enter"
  input: "lstm_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge"
  op: "Merge"
  input: "lstm_1/while/Enter"
  input: "lstm_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1"
  input: "lstm_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1/while/Enter_2"
  input: "lstm_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1/while/Enter_3"
  input: "lstm_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Less"
  op: "Less"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1/while/Less"
}
node {
  name: "lstm_1/while/Switch"
  op: "Switch"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1/while/Merge_2"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1/while/Merge_3"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity"
  op: "Identity"
  input: "lstm_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul"
  input: "lstm_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_1"
  input: "lstm_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_2"
  input: "lstm_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_3"
  input: "lstm_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add"
  op: "Add"
  input: "lstm_1/while/BiasAdd"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul"
  op: "Mul"
  input: "lstm_1/while/mul/x"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_1/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_1"
  op: "Add"
  input: "lstm_1/while/mul"
  input: "lstm_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_1"
  input: "lstm_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "lstm_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_2"
  op: "Add"
  input: "lstm_1/while/BiasAdd_1"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_1/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1"
  op: "Mul"
  input: "lstm_1/while/mul_1/x"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_3/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_3"
  op: "Add"
  input: "lstm_1/while/mul_1"
  input: "lstm_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_3"
  input: "lstm_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "lstm_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_2"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_4"
  op: "Add"
  input: "lstm_1/while/BiasAdd_2"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_3"
  op: "Mul"
  input: "lstm_1/while/clip_by_value"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_5"
  op: "Add"
  input: "lstm_1/while/mul_2"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_6"
  op: "Add"
  input: "lstm_1/while/BiasAdd_3"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_4/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_4"
  op: "Mul"
  input: "lstm_1/while/mul_4/x"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_7/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_7"
  op: "Add"
  input: "lstm_1/while/mul_4"
  input: "lstm_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_4"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_5"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_7"
  input: "lstm_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "lstm_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_5"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/mul_5"
  input: "lstm_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8"
  op: "Add"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit"
  op: "Exit"
  input: "lstm_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/TensorArrayStack/range"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "lstm_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/sub"
  op: "Sub"
  input: "lstm_1/while/Exit"
  input: "lstm_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/sub"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8625108
    }
  }
}
node {
  name: "lstm_2/random_uniform/sub"
  op: "Sub"
  input: "lstm_2/random_uniform/max"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform/mul"
  op: "Mul"
  input: "lstm_2/random_uniform/RandomUniform"
  input: "lstm_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform"
  op: "Add"
  input: "lstm_2/random_uniform/mul"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/kernel/Assign"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "lstm_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/kernel/read"
  op: "Identity"
  input: "lstm_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "\242\005$\275\334[\266<P\376\350\274\274wh\275y,\346\275\032\203\021\273a\244Z=\"\022\212\273\255\205\320<\370\261\251=d-Z\273\266\222\014\276\007\311\021\276\353\263u=\212\256\025\275\300\223\222=\371\335N\275\221\363\013\275c\357\337;g\354m=:\304%\275+\000\220\275\257N\350<R\355>>\320\273\200=\263F\214\2754\311\357\275\326m\234\275<\252%>\213k\311=E\225\257\275\373O\314;\242\230\267\273\'\370\316\274l\222\202<m\200T=\277\322\026\275\357\322\224=!.\365=\226\244*=X\r\237\275\264\231\350=\232&\204<>\336\266=3\300\016=\353\317\341\274<\317\222\275\340G\320<a\362\035;\377\234\"\275\033x\212\275\314\300q\274\201\216\217=f,\270\274\020\"\021<7\225\311\275N\\Y\275\342\013\274\275\253\235O=\332\247\017=\232\t\223\275I\t\217\274\232f6\275\214g\200=\272\273\320\275\254\333C;\036\014U=\034\265\n\275<\024\027=\'\350\261<\262\212\'\2755\321\3258\247\330:\274\305]\260<\036\035P=\245\373\234=\023\263\271=\211y\310\275\026m\t\275\325?Q=m]\227\273\213\372\036\276$\214\205=-e\331<E\245\340<R\317\r=\034\201<\275\306\210\213=\254\373B\275\230B\311<OP\241<\357\032x\275x&z<\'\256t=\025\002L\274\231\321\352\275C\224\333=\352\277\321\275t\326\360\273\363R\014<\272\2279<\222\361$=KY*=\275\332*\2758<\245<\361\004}<\355?\315\274!\n\014\275\265\031y\274)\325\016\275\323\355\022\275]l\217\275\202\306\037\275\0073\030\275<&P\275\323~\000\276b\036D\274+p\326\275\3016M;\315Rr\274\350\342\261=\340\306\371<\032$,\275)~,\2753\222\205\273\211\030q\275u\351\255=\265W\t\275 \016r;@\364\260\275\311\217\301<\324\337\032\275\334m\371\275UZ]\275\273\273\204<\232\306A=\201Q\244<\377\035\241<`\252z=\251\342\277\274\262z\320=\370\223\032=\235\213E=\377\360B=\220\003\307; \372Q=\257\223\200\2741\010{<\311\225\037=\220\024\216=\362Z:=\002\261\232=\233r\271<!\361\255<#\022T=\3455Z\275x\022\255\275\006\377\275=`\031\237\275+@L=\252\273\023\275u\016\240\274\317\032\003>\013\261\257\275\247\354d=R\241\330\275\367\273\367\275\226\002\341\274\234v\241<\032\257\346=\201\010L\274\260]\026=jp\021<\001\037\260\2745\324\300<\213\272Y\275\360\324\301\275;>\365=\266\031s=\023@\023=\301\247\303<(\243y\275\347\030\222\2756\3741=\2325\267\274\314p\263\274\357d\203<w\217\354<\225\363\320=o\356\374\2737\263\221\275/*\036=>U9\275\217\206\371=\207\343\274\2757\347\303\274\277\266\245<&b<=%\345\371=\340\206\330<\363J\277=Zg\344=4_1<\005\207 =\355\260\247<z\375\370=\024r\252\274\206\025\212=\222F\014=\242\233:=\2064\210\275\022\255\201<\t@\261<|Y\212<Y\301\223\274AZ=\274*\r\277\275*\317\237=\330\322\341\275\262;\213=\347\241\263\275\305\3230=7\213\001=gV\321\274W\r$\274O\305?=\3421\237\274\211\303\270<\225\237\036\275\034\033\020<\002\025\007\275E\242\212\274[\221\000=\020\0343\274\352\250\314\274\020\205\036\275\222\356\347<\262w\024\276W\326\353<\370\"\030={?E=\226\037\232\273K:\213=\211\271H=\206\344\226:\377?\314=]\277!\276QB\207=<\301\253<E\372\205\275\026\017\330\275*/\001\275:3\344\275u\362\227=\272\344\312\274\271\026&<K.\231=+\'\202=\3227J\272g\225\006=PM\360<\204\000\242\275\031\334\'=\354V\020\276\264!\253\274\216t\257\274\247\033\026=J\322\025=:G\305\275r\020\345\275:Z\317\275\037\214p=\355k#\275\010\006G=3\336(\273\241i\177\274Cf1=\225\372O\274J\237\201=B\037\237\2754+\375\274\254\236\272<\240\343`=b%\230\275s\002\225\274o\374\266\273(C_\275\313@\310\275\253\321\331<\205(\373\275{\255.\274y\252\271<\204\0005=.\343\320\274\325\306\202=\246\033\014\274\276t\020>\016E]\275\337\340\222=\017\217^<]m\372;\253\323`=\312\356B=\'G5=\363\201_=\177\325\270<\350w.\276\261\221\241<\274\345R=<\373\324\274=\234\232\275\311.\207=J\336?9\364,V=bFu\274Q\275\032=\373G\377<\204m\252\275\207Eh<\362\221;=h\300\241\275\025\301d=`:\204\274$\334~=\231\2537<\372\374\031=\364\177U<\271gp\274\014\232\336\275\377o%\275\325\350\312:w\340j\273\224w[=6\357\346\273\344Lk=\025G+<\000\2708=r\000\003\275Ly\020=\316\223y\275\360\374\303=\370\371\202\275\017Z\003\275\256D\216=I\327\206\275k\033\261;\263\177\222\273\022\347=\275T]\\=H\220\226:\026\303\270<\'\0036\275Jv\021<A\0049\275\322\315\307\275`\216\016>\206\r \275 \370\231\275A\367\r=\346\371\201\2750X\276<r\026\237<\302\242B=v?\266\273|pR\274t\2120\275(\"\277\274O:\014\275k\374\261<\257\017\266\275\206q\234\272\333\036S\275r\214u\275\232\321\002=\363\273>\275\004c<\274W\214Y=\345\337\253\274m\263\031=a\261\331<\006Q\304\274 \336\362\272T\240\251\275\034\270O<\222@\371\274\316\265\363=0\036\260<[\014\201=\307\351\024=n\352\273<G\227\332\2743\013\312<\325\351\272=\023\2718=\347\216\215<\3445\024\276K6+\275\0362\353=\007\361\374\275]&\001\274\305.t=\2447\245<\325\361\236\275\305\n\226\275\225t\326=Em\220\274\315c\022\2762\235\261\275\n)\333<,\351\023\275^V\303=I\264,;*\037\374;\324\376\017\276\366\303/=\213c2=\325Y\373\274\36376=\241\016%=\226Ld=\345\370\221\275R\361\344;?:\235\274\343\204\275\272\271\035\315<\220\206n=E\357*<g\370\342<\356<r\275i\343h=\274DF=\237\265\002>\314\245\304<\2423\244=\212\377\276<\221f\273=e\022\316\273\362\266N=\264\326\267<^Qs<\320\274\374\275\346\214\274\275T8a\274\200\361\332\274\216Bx\275\211\257\320=\267\277(\275\332u\033\276ba]\275\005\365\301\273\321\211\357;\354R\375\274*U~\275\027\242\200=^\324\245\274y\245>\275\263O\313=\215\237\275\275\215q\207=\3451\n<\\\235\004>{\265\014\276d\026\350\275\361c\377<\001\327F=78V\275\244\001-=\322\353;=\271~\255<&\353O\275\262\300\270<\037\267a\275\333 \221:r\361n\274b\000\005\276\023U.\275\022\375\330\275\270Y\200\274i\323\240=\037|\300<\274*\256\275\2726\230\274\030_\244<aL\321\273\266!1=\327\332\234=U<\'\275\315\324\260<\030\246\201\274\204\007\332=\324\\6\275V\221\223\2755\204\224=^\305[\275\013\022\247=\003\277\301\275\266\351\200\275\207\206\233=\314_\202<u9\216\275\261f\307;\250\316\373\275\025\337\236\275\003\300\325\275\030=\006\276\271X\331\274\347\241j<\214O\221\274\370\377\377\275\303\317\036\276@\365Z\275P\265\003:\271\307\252\274\370\226\227\275TA\377\274c\233\345\273\356M2\275\240\366\200\275\343\243H=r4\364<\242%\225\275\004{\264=\005\370\246\271\232m\002>\215\276\253\275^Fo<\027\3052=\010X\222;\300\020r=\004\227!\275\316\377\223\275\233*2=\350\221\227=\237\235`\275\353\316R=\017\0130>\273>\207<\376\003\277\275\005\002?\275\031,\r\275eW\350\275\022pJ;Cj\031=\221\371\226\273\2504\204\275\231m\017=\204\365\366\274\252a\315\274\377d\255\274w\355}\275uQt=\001f&\275\313\275\267=\033\325\213<!\313\261\274\250\'\303\274\217\306d=\204d\201=\275vq\275bG\271\271c\252X=<\274f\275\260\307\247\274Hg\235<\037\273\002>\004\261\265=\272j]\275\233\347;\275ZJ\243\273\303Ad\274\002\020]\275\232\355\233=\353\023\007=\325\373\300\274\031*\007\274\203\247N\275\336\037\306=\346s\332\274\353\0050=\224q\230\273C2\335\274\250\363\245<\232\360\260=}w]<0\025\352\274\274_\200<;\235\251=)\177\362\274\007jU<^(\354<\344\367/\275f\363\207=\230\272\212=\033\267\300\275\276\235U\275\357@\262=vv\232=8[\000\275\200\177w9\267\270A\2751#H\275\274\2374<\372\350\241\275j\\L=\024\233F=IY\n\275W\343\373=\314\003\331\274\330\030\366;J\210\032\274\247{\207\273_\001D\275Q\303\371\273z\021\366=T\264\220\275\2216Y\275\210Y\347=/T6=\237\237$\276\010\3626=\306mB\275\034b\267\274l\351\302\274c\2224=\264\335y\274/\243\003= *\343<\254\346\300\274\036\355\022=\240B\332:!\344s\275)Z\203\275e\327\032\275\314&\001>\354\212\362<#\213\023=\203\255j=\376\276\202\275I\263N\275\276%\232\275@\223\t\276\272\254\337=\277@\001=o\311{\275\'\000\001>\327\266\322<\021\203\250=\351\231s\275\335\336\017\275 \234\247\274\026[\312<\217\262>\274\3170\014\274\024I\247=\353\211\327<|=\022=G\304\326\275*\177\334=q\230#\275\025R\016\275ob\212\274~\235\277\274\336\326\034=\024\007\223<\232U\275\2749/\230<M\362\177\274\274a\230\274\310s\310=\303\321\225=\n@\272\274\227\307:\275,\212\276\275\\/\326\274\250oX=\311\355\206\274\336\225m\275)\314\304<\001=\004=\032\3265=,t\305=_\207\345=\366o#\275\310~\036=\204\224\262=\305y\034\274\331e\340\274\244\002\234\275|F\237=?\035\300\275\345\rc\275Kj\314;Ue\226\272\214\030k\275\2712+\276i\232\327\274v\373A;\353\016\222<\232\261\252<m\275\003\276\0347K\275c\307\321=B\236 <\373\021\034\2721.\205=\274\376\255\275\300u?=\3475\374=\027k\271\275\221\203\000\276\313\275\010=Z\265.;\351\004\336\274\372\257\317\274\330\367s\274\305\356\004=dD8=\365X\350\275#\274\210=V\243\331=\230`\257\275\222\200\375<`\005L=\352Q\000\276\362\257\036=\250i\377\275JZb\275\325*T=\376\364\221=\3334\025=T\210\204=K\270\033<q\302\341\275a\356,<\225~\203\275\224\374\257\274\003\246\001=\365\214G\275\342\301\005>A\330\252<?HA\275DO\321\275S\344/=\361\202\001\275\205\003\262;\225\247C\275w\365\303<\242\213\332\274K\242:<e_\325\274\206\377\341\275\n\t\300\274Qy?\275Kh\206\275\001\217\224=MT\236;W\263\026>e-\243\275p\263D=\223)M=\233\037\r\276\233\267\223=\214qz\275\367N\275\274\024\373\242\275+\346g;\361b\265\274\357K\225=W\2418>a0\203<5\256\034\275\037\315a\275\372\032\024<nb/\275<)\235\275\302\354\204=\366#==\271A\253<U\301\234=\365\376u=\232\366\232<\257\267\307\275\271\337\004\275\220\222o\275\030]\261<\364-\276=\342w\230;0\035\355<\243Yk\275 \014\276\275H]\262\272u\375G=\021Lh\276\365\326;=j\203\336< \002\226\275<9\237=\207\362\032\273\225\251\347<\307\0361=\332sw\274}G\030=\370\244\353\274\303\315\000=r\032j\275h!!=#\036\001\2761\230\033<\305\243\371\274\\g\225=\226\024\322:\230s\211<Jv\014\275\233\226-\275\320X\216\274\223=\300=\234\247t=o\"\332\274\255\354v\275\217\375\\=qz\230<YF\035\274F\306{<\362\304H\2754\303\225=\000J\224\272\250L*=\373,\017=\033\233\002\275\314\334+\276\347\357\236\275\374\006\025<\221JT<xg\260=Jw\300\274f\264\013\275\330!%\275v\356\241\275.\022]\275\2535\204\275\256\2655=\213\210\347\274\344\034T=h\321\252<\370+?=\322\374y<\256=Z=o\017I\273,\235D=\013-\265\273\222\r\221\275;\372\265\275\204\320f=\327\202\007\276;\\\205=\333^\363<\360\201g\275\206\351\257=\217Z\216<\327O\206=@\2242=z\227n<\336\271\206;\302\342v=h\345\221=\257\264\001\274\271\377\327\275\363+\240\275&\t\341\272\351\316\222\274\361\273\013<\236K\005=\216{\003\276o\3208\275\301\031c<`\345\337;\314p\030;?q\345:G\336\207=d]\305=\366 \232<\362\236\276\275\310\002\020\276,]U\2757d\377<a\317\202\274\352\340Z\274m\230\266=\357\357\240<\002A`\275\033;\272=Z\214\200<\252\222\356<\210\317\210\275D\"\220=s\251\320=\224B\253=\226\303\233=)\222\210\274c\270\266\272\024\361\213=B\022\302<F&\371\275\243\274\026\275=>\354<\341\313\366\275\037\322\202\274\350\022\033\274\312\0245\275\243g\320\275\227\035\247\275/\206\327\272\266&\005\276\0105\351=\312Hu=l\201d<\376\275\266\275\243\367\200=6r\t\276\361(\030>\006\210\323<\007\214\005>e\033\260\274Ar;\275\267\037\201<W\216G\275\211\323q\275\267Ud<\221\017\004\275]E\377\274\002\023\001\276\003\376\347<~.\307<\220\346\235\2739\007x\275J\325u\275\334\027\'=\232\2714\275\351&N\275]m)\276\263\320\302;K/\203\272+K\256\275\343\007\307\273\013\363\223<Z\362\201\274\317\177\270<\303\247\370\275\265\221\367<6H\210\275~\023\322<\334\337\037\275\222H&=\261\313\354\274{\246\037=\221\265\273\275`\300\317\2746`v=\340\035f=\355\221Z=&K\326\275B\347\207=\2047\035\275\353el=\256\340\227<0\306\301\275\246\227#\275Lw\341\274#\304\270;2r\215\275\351\3324\275\005\3413\275\244\207e<\225\372\255\273R\273\201<\332\217\320<!\203\025=d\010 :\276\300\022\276\377\263-=J\200\214=\275\326^=l\n\"=\007E\245<\233\331r=~:\254\272\013C\312\275$b\005=j\030\'\275R\016\204=\310\006\007<s\032(=\231\322\274=4\356S\274\271\200\342=u%\305\273\336\274\257\274o\036F<\025s\272<I\346\234\275\323\374\215\275\310j\037\273\033\372\272<SB\032<\221\226\216=\255\224h\275\353\266e\275)2\231\273\267<O>\254\211\216<\214\254*\273\032\254\025<\025\217\221=\343\243\221=\346\n\n=\037\002\376\274\300\035B<\013\017\017\275c\301\345<cZ\203\273\324}{\274\237$\205:\303YA\275\232\337\313=%V\000=<\267\004\275\035\207\326\274l\204\237\275i\305$=-7\253\275cq\231=\265\220j=\253\353\274=MK\250=nT>\276Z\332^<s\017\350\275)\0034\267L\266\021\276\030\246\n\276K\327\200\275\177CW=\372\214\202\275\357\304\005\275\216q\001\274\0203e\275\326C_\275T\223\210\275\020\305\"\275\215W\024\275\317\315-\275\034(e\274b\2152\275J\333\232\275\304\322\254<\031Rr=p\027\203\274\316\364\215<\234\330\222\274\327\254\233=\347I\221\275$\212s\275y\263\232=\213\335\034\275=\327\306\274\225L;<\232Z\221\275\355M\251\275\250\233\037\274\244\355\276<\301\017\310\275j\275\267\274\0046\033\275{c\210\275\251\310\340<\200\356\177\274|\272\216\274\3701\334<uf\307;l\036\007\2765\306s=\025\027\317<\201\262\271\275\245\362\322=<q\210\275\242\013 \2743\027P<\233+a=\010\'&\275\373\316\301<uc\302<\262\325\017;D=\330\275\350\220\332:\2466\353\275o\257\205\275\324A\351<\226RM=\361`\201:#\352s=\3169g=je\216\275W<\374\275\347\223S\275\333\305\005\2713nt<w\374d\2751j\202\275%\216\362\275\006\222s\275\315\021\364<\206\t_\275\274\252\216\275\304q\223<f3\273<j\326\270=O\311\256\275\312\3335=\325\0236=\357\216#\275J\300{\274W~\307;\000 \363< \262\335\274\221\305\247=\234\310\024<\230\245\265\273\307\326O\275O\335\257=\350\215T=\351&f\275\326\241\223<\212o,\276\354\"\226;E&\213\275\n\346d\275va\241=<\005\360=\242~\243<G\250\000\275x\301\234;p\271\024<\347\213\370\274_\026\331\274-\241\320<\002\263\230=\223\275\217<\301\334\206=)\214\020>\277W\247\274\236\204f:\310H\032\275c\322\351\274\337\264\213\274\201\241\217;B\027M\275\317R\003\274\237z\265<\242\221\005\274\000o\346\275\252\211\237;d\321\001\274\022\031\026\275[\350;=\225n\254=]<\224<Tw\\=\327\225\027\275\356\335F=&=\t:0`n=\265\t\276\275\177\006\207=\275x7\275fnV\275\273A\343\273\227%\341<\375\312\"\275X\202\013\275=5\020\275\374\022\354\274\341Y\270\275\355\316\025\275%\370\260=\021\342z\274\222\177\201=\272N\"\275\276\366\304\275\335\225+\274\316B\032\273\016\250h=\267\003\340<\302\274.=\016+\034</\360\000=\250\rg\275Y\341\216\275\341\377{</\231\377\275\3466\304=w\336\355<]\370\027=^[\030=\266mQ=)\360%\275\300R\260=\332\\\360=\005|\245\274B/\212=\340\366\203=\226F\036<d\211\\=\006\224*=\371\313\320<\030\020\255\275\256\007Q=\337\216a\272\312\243\"\275\030\356,=\214\211Y<\336\367`\273v\037\237=\303\025[\275$5\223\275\247\t\334<FV\314\275\205K\212\273q\307\217\275Rc0\275\200\310 \274\314\323\353=\377ec\275\316\330%\274\315\325\230=\010S\211<\227\254\017>\354\311X=-t\242<Wp\374=*\247\247=u\315\361\275\230\341\243=\322\336 \2752D==\326}\'\273\347\r\274=\364SL=\021\232\037>\366rY\275\005jk=sy\007\275\367\030\017=\225\312@=O\303\016>t\230\271=\326\010\033=\331\235\273<J\216\016>\017(\377<:\353\357;\256\024\270\275\\\323\246<\215\227\306\273-\305\240=\377\200\240\275\'\320\"=\316\255\201<\335T\323=o\360a\275\313W\216<O=\340=\234\267\337\274_#&\276\340\023\235<\247\3706\275\356\007\016=\331@g=\244\272\005;t\216\243\273\033v\206\275\024F\326=\2150\247\2755\245V=\216\000\014\27539\310\275\033\\\206<W\007f\275\003\307\021\275\036\364\354<\267\223\237;^\227\003=\r\264\354\273UE\326=\234\374\013\275\366\202\266\275\301\306M<\016;\255\274\221z\224=\254\263,\275W\204\250\275W\231\234=\302\004\215<5\206\215=\005e=\275S{F\274A\357_\275H\020%=\2410\004>BA\236\274\221)\370=,\017\364=\016vI=8z?\275\266\321P=\227\376\216\275\314\215\217=\306m\201=r\302\300\275sZ\224;^x\354\274\235/W=\302\010S=\225[0\275\236\262\203<W\352W\2741\363\036=\255k\273\275U\322Z=\334\3458\275j\322\365\274\204\'\037<\277\350\225=\322\026\307\275F\214\207=\241</=\217;\r=.\276\254<Y\221\220\274Ib\364\275\327\035\245\274\271a\277=\356\335\241;\023-\241\275\214\214\001\2749\017\325\2748\"\016\275\223\"\n<f\370P\275G*\244\275\362!v\272\354\217\006\276Q\332\274=7\314\177\275\251\"U\274^t\371\275Z\334t=L\370/=\267\317)=\003\021\021<\233\216\330\274\374\r\242<\274\254)\275;F\020\275\327\276\367=3\026\307\274r\005h;\244k\001=\213q\304=\353\253\241\274\203Rw\274\036\277\016\276\035g\211=m\026\277:=\3752=\320\016\203;\r$\000\276\333\326\022>n2\202\2758]\314<\210\034\006=\345hr\275\361\264\352<$\227\n=pq\207=\320\313\t>\271\265\032\275\'=V\275\014{\r>j\350o\274\205\332\214=\270\227\203=|\215\017\275\020\354.\274\032\265\300\275\277\'\276={\263:\275\323\021\304=\2045i\275\374\026\004>}\367\022\274\036\006\327<\376*\210\2751\007\372<\270\233\343\2745\216\n\274\030a\235<\232\2767=\352\375\352\274_\270\215\275-\234\305<\316r\t=x\227 \274sC\036\275\362\303\323\275u\305\227<\355e&=\263\256\027\275\270O\275;\251\343\230\275\336\373\236<\267)\013\276n\335\240\275_0\276=\376\251I\275Z\335\231\275\365W\241=\344\200\233\274\252\303\273<H\234\000\276\331\001\026<\010l\316\273\245\341\214\275H\301\305=\264@\222=\250+\303\274|9Q=\265\214\242\274\233\332\222\275\323\233\205\274\372\354\"\275(E\234\271\013\244R<\361w\247\275d\027\205\274\246\223\336\272\005{\001<1\340\327\274\212\341U\275)\320\005=\234p2<+M\302=\256v\344=#\2573\276\224\310\210\275R\326\206\275R\245\210\275\251\254\001=\022~\211;\037\337\253\274uN\324<\312\301\270<\233\317R\275\261\205E\274\005\336\346<\303I\207<= \201\275\332)\253\274\"\215\220=\376\206#\274M\032\027=\227\270}=\277f\330\275\344\251\336=\327mv=\262\357\250\275\273\025V\275\241\r\367= \177(\275\250I\017\275\321\347\341<1v\250\275\0374h=\243\035\357\275\240\202\205=\3701\245=\250P\371\274\',j\275\357\037\227=<`\241\275l\356Y\274\220\036\365<\264Q\207=Lb\206\275F\255\260;1I\202=\366 \331\275\263\317\320=v\212\300=\237\327\372\274\034\256]\275\t\372H\273\261\212_<\3119\342=\027\324\327=\036Y_\2757\2541\274Z\233\310\274\221\005d\274.\255\227=\252\325\036<\215iO\275\212*l\274CR\016=R\354\214=:l6=\204\242\276<.v\'=G\313\354\274\007\223\324\274\036N\256;!\272\252\275}{,\275E\331\213=\252\252\226\274BeW\2758\257\223=\337\361\324;>\254\313<w\342\224=\301\377\016=\027\370\r;\270U\212\275\257\n\271\275\264f\250;\245\356\251=\3642\251\275\261V\253=\032\016\307\274\'\013+9\323)\317:\210,l;\256\272\247;-\006\213\275\336}%\273}\007\235\275\325\254;=U:S\275\271^\006>\374\230\217\275%<.\275\335l\365=\244\202\346<\304\203\314\275\020\214p\273\000iR=\025\031\212\273\256p\300\2724x\214\273\202\245-\274\003\324`\274\255@\270\275\253p\007=\265\354\227=\375H\313\274g\240/=\333,\362<p\002\035\276\002_D\274m\031\027\275\334!\343\274\374qH=\255k&=\263\230\305=\251)\207\274\360S6<\300\031\210\274\325\353\302<\260\323L=/!?=^#:\273\031gS\273\356?a=\216!\034\275\251\211;\275\365\010\302\274\203b\006\275\371S^\275\rp\320<\3667A=\336\300\321\275\231\245\003\276\350\360\222=\221I\356=\302\010\243<\344\023\001\275\207r?=\273\357[<e\300\262=z\223V;\267\350\036\276M\223\220\275W\000\265=\214\201\321\275\233b\210<\365i\330\275}d\272=`(\214\275\\\002\300=+\235Q\274\336\331\224\274,\225t\274Ps1\275\361\343\206\274~\221\246=\'a\212=\266i\300\273&\376\256\275\240\265\363\2752\307\311=\205\n\335=\215\326w<\204L\036=\001\025\300<\277\247\227=\'\344\343=;\363w;\3601\217\275\217u\326=\351\215\034\275-T\275=]vm=\215I\335=\325\261\347\274~\355\010\275];\004=4\025W\275\0057\024=\347\376\211=\214\270.\273\207e\300\275\022zS\274\211_\245=9\\I\275!\352J=\246\211P=\312\315\263=ox.\276\342i\324\275pB\t=\324\271\354\2757\253\205\274\251[\206<\346m=:\337UL=p\366\276<>\346\236\274\0000~=\322\007\031\275\014\315b=\021+\320\275\210\326k=B\037\204=9\337\223\274\326\010\311\275\271n\023<\"uZ\275\323\366\306=\213\231\216=\036\221d=>{@\275,\2651;\332/,\274\342g\214\271\243\240X\274\r\232\347<\2617\013\276\325\320\203=\031\314\'=\254*\235<\025\327\236=\333)\017\275\003\313A\275\332\344\312\275t\247l\274\350\375\023\275(\027\027\275s\262\213\275|)\200=\231\351\037=\354\214#;\023T\266=\250ih<V\244&\275\333\361r\275/\266:;G\016x=\335\n\346<A>\244\275!\374J<\223\207\224\274Gr\231<\325\234\351\275\025n\377<H\220\273<\225\215\233\275l$\270;eB{\275\206\020\006=\013\251\025>\210a\257=5\203\222<\210.?\275\032\272\332\274u\324\210=\200\316\307\273\237\232\227\274\316\353\347:\366\2459\275\334\237\361<\233B\210<Mq\232=\021\023\237\274H\2017\275\363\013\210=\024&\335=\301U\357\275\353\256\330<\343\037\241\2752\360#\273\353#\236<\322\004\205\2753\'\274\274\270\007T=#\210\302\275\021\223E\273X\n\263=\320c\207\273\342\236(;t:\252\272$\312k\274w\013~<\316#\023=\375\0066=B;\334\275\236\272V;Jo\350<\003\320\302<\336~\325\275\242 \302;\313\353\216=u\202\234\275\242-\177=\002\333R<\333\315R<\370Dn=\225\370\325=G\322\027\275\377\250\371=\326]\221<\315\346\000>s:\344<\224\344\272\275c\231C\275\330\3149\274PB\220\275I\320\001\274F\'f<\323\027\262\274p\362\323=\307\025\016=\3728\231=\263\035\264=%\024\022<\324\3671=H\035\225\2759\262\277=2\037\215={\365\007=\236L\213\274\021\203\342;\257_\023\275$]\276;\242Fm=\317[\014\274\267\343F\275\242\356\035=\304\225\004>\311\245\306=\304\025\005>2\021\307\275\3739\361\274\276\022 \274?\337\213=f\003\310<)&:\275\217^\362\274@\205\310\273`\031H\274\253\036\263\275#\363\246<<5\332<J\257i<\351\360\215\275fcO;\371)#=\310\326\215<\006\344\313=\261v~\275\313\361?=-\177\304\270\316`)\275kv\r>\233\336\323=\205\233\233=7\222b\274\231\246\250\275\236\255\265\275K\240\3779\253q\357\275\0214\351=q\321\005\276%\335\212\275\330\270\235\275\273\255\344<S\220:=;I\211=9\020(=\373T\246\275qL?\275\226_\334<nT\024>!\304\000\275\030z\313;\355\262+=\273\301 <\210\210R=+\016\371<\234{\317=\027\332\203=4\372\215\275\272\233\026=\3225!=\237\215\024\274\003\226\350<\201\377?<~&\303\275z\033\030=\004l\273=]@\263;\017M\340:\246\0337=\241dn<\203[\271\274\324\271\356\273\323l\222\275\232mW=\017\315!<\374\244\273\274\334\033{\275\220\014\257=\360\213Y\275*=\217;\210r\236;\237s\334\275\321\377\215=;\373\213\275\260{h=\262-\'>\244\024\240\274\2306m=kq\260=\353i\227\275d\224\204\274\344\337\231=\024\221\276<P\217\204\275\266\010e=![\210\275\303\366\216\275\205^\021\275\261\354d<C\231\020\274\267,\'=]\360\220<w\200\276\275*\215\013\275\274\201\032\2743\365\254=\200Y\241=%1\270<R\214\311\275X{\304=x\354\373\275T\371\202=[\246%<RIM:u\322:\275\345~\177\275!\377\231=\275\376\365=\030\237\204\273\026\313\001>\241\224\262<J\356\361\2743\200\006=\327h\372<\035\024\246;\273{\340=l\333E\274\356\005\002\274y\272\017\276F\001\005\276\241E\022<\340\377\340<\276\037v=\212\316\014\276\227\206\311=\003\3777\274\356\346\325<\002\223\315\275\250\004\241\275\267}\362<\270\007\271<\035\233\371\275L\346m\273\377\215\342;$?S\275^\337\321=[ZT\275C\311U\275\331\306S\274\355\304\371;]\244\274\275\276\313h\273\212(\373<\267\230\241=\033B\235=\240\235\003>\311\233\351<p\377\252\274\264\023\244=]\313\177=\270\207\335=\255\351\336=ho\357=\250Sm\274QI\354<\t6\272\274#\334\t<\331E\331<G\362\275=~)Z=\024\251\301\275\265l8=\205\316,\275\206\250\202=~\302N=Y\333\204\275\313\255\001\275\006\240/=\025\"\250\274_\367\224\274\236\223\207\272,\227\273=\211G8\272\352\033T<m$\022\275\227\334\000\2763\033e\274\247\3543\275\215g\t\274-W\177;\2521\207=S\037\211\272\265\271\376<m\213\336=\025\001X\275\t\207\371:\306\212\231=\272\304\n=\200\031\263\274;$\002\276\006\274\224\275oh\325\274\022\0354=\t\no<\374C\250<7\247\025<4\371\301=J\243q<\337.e=u\351\234<\2214\2249\006h\257\274TP\226\275\224r\023\274\225U,\275|\322\032\274\032\365\202\275\034\237K\275.q\353:\021r\300=\202\327_\275)\033\200==s\t=Jp\333<\245\226\265=*\340<=\341\274\030=\252|\212<\246\t\346\274v-\000\275K\335V<@l\237=\013\327\235\275\240Kt\275eE\213\275CM\275=\370/W=\033z\230\273\262C)=$p\024<\244\235\243\275K.b\275\202\3767=\311\352#\275\312\236(\273,\n\201\275\235M[\275kq\026\275!\010\365\274\3074o=\314k\005\276M\374\354\274Q6\010\276be\316\274\027\264e=\304m\321\274\304\035\254\275\202S\202=\372\333*\274\247\215h\275\261\323\021\275G\250`\272|.\231\275\267\306\276\275\274\345\312\275wB\247<w\307\224\274\274\354\256\274.\212\300<#\377\241\275\363\010h=\010Zu\275\327\366\346\274\254\342\224<<\316\213\274`8\265=\327\205+\275\303\221\203;\016\253\373\274\326V\377\275U\036\202<\355\266\344\275\302\232\207\275\257\351`\275\241({\275;\206*\275\027\370\335<\3237o\275A\032#\274\302\307\251=\253c\376\274\031y\252<gm\237=\275@\326:\271+\007=\244\355\001\275\314\303f=\307Y\350<G\250\226\275\253\334\267\274n\327\241\2755N\001<\221\323@=\354\276(=\037`P\275\236\267s\275!\237E<8\223!\272c\305\r=\275n\336\275\203\314\025=\031\343\263\274PD\004>wv\220\275V\332a=\307\272,\274uD\267=\314\205\202=_{\323=\246\217\364<\016b\367\273\230B\026<n\263\216\275P:\303<\353%\303\274\334\026\213\275u\000?\275\300\375O\274\330\\[\275\004D\003>\r\357\324\274\206:\017\274\3073\216\2751\326\004=\241\017\201\275\310\013d\274[\344\236\2756\017\207<7\241\220=Bc\231<\367\014\257=\004\315j\274!]\343=w\236^=N\307\037\275\265\203V=\034\317\344\275\275d\272\275%3\007\274J\023{\275/\322\214\275\200\324\322<\374\215Y\275\216\265\323\274\311z\020<\010Ir<P\273p;\340\357\000=\000\325\027>\347\261\251\273\340\336b=@\345\332=\335`\233<dJ\374\274\270\353\016=\364\234Q\275#=\242\275\255 \032\276\342\344\303\275\235\254\017=\023?\275<X\303\225\275\017\252\004=\360\310\314<\242\033\204=\366\262m=\235\246\263<\005\335y\275\344b_=\262Ad\275C\377\205<\346\025\302\274s\n\006=[\333^\275w\373i<J=\321\272w\021\r\276<\r\263=\217Tw\274\274\r\022=\337\327\030\273l\001)=\306\247B\275,c,\275\302\016r\275\037j\344<\021\333\261:\240\245\030\275\205\254\363\275\312\004\221\275A\365\001\273\377\271\'>\323\027\007:\336\036\261<3Lz\275,\200\241=\316\265\207=)\205\275\275\357B\356\274-\275\233\275{\347D= 6\210\275\236\2064\274\234\365V=\2664\264=\t\224+\276\246\036\306\275 \212\006=\320\260\377=\305\223\242<+\204_\275\307\005\304<0\351\361\275\262\233\272=-\220\000<A\355\223\275\216\377M\272;\037:=\021\031w=h\3541=@\310q\275\373x\223\273\357q\251\274&w\232\274\2575i=\364\202W;\347c\\<\357\263\020\275\021\020\002=\t3\024\274\026\365\231=\277}\177\275lX\263<\006\310\204<s\203W\275x\\\331=gJ)\275\001\352\263\273\356\023\306\274OzM=\324Ne\267).\212\275a\233;=\213o\036\275\307\037\344<1\212\220=\235\315\346\274&\026\212=Trh\273w\232R<u*\266\275k1\006\275\253LZ=\350a\312\273\233\232/\276\0305&=\035\237E\275\017\027W=\320\203\340=Mk#<\331P\"\275\325{\271\275\265\222\201=\022\2776\274\037E\341=X\253\203\275\277\232\222\275\266\320\321\274T\333\203\272\216X\376<\037\227\"\275\314P\010\274`x\261=\327Z\322\275\267-\371<tu\226=3\323_\275\3110\214\275`\254\243\274\205\334\243\275\210\345\345=5\311\003>Q|\257=\277\256\235=\265\257\341<D\n\264<\030\271\026\276!Y\226;d\256b>\310\010v=\262\030\300<\'\017\324:\021\371\004\276\363`\375<y\332\237\274\377\343)\275\366\203\367\274\274D\265=\232K\306<\035$\255\274\364\324\213\274w\225\0018\\\023\241\275\366\024\003\275\014)\315\274:H^=\242?-=\370\371R=%\2000\275qsK=\24512\274\252S|\275\235*\305=\221\275\244\275\237\327T\274\005\240\246=\205\362\022\275T\231\215\275Q\272C\275p2\373\274\314fx\275\031G\034=`\3359\2758,q\275\327sM\275}\014\037;\3443\240\275\0277\267;\351\334\201\274Wn\000\276\312O\320<\314\016~\275\273b\365\275\220\024c<%\255\241=h\301`<^/\243\275\263\355\251=\223Ez\272\312}\016\274\234O6=\212\255\006>\273\024\216=\377\313\023<o\374};Az&\275\204\242\257<\274x\036=\256\314\237\274\230\370Z\273`\304\241\275\017r\004=-\325\251;:!\212\275\204\004\256= \362\212\275p\242\000\276\202,\177<$\206\256\274s]2>X\274\334=\021\271J=\316\355\207=\0005{=\222\271:\275\362s+=\324\357I=\355H\221\274\260EA<\003\201\207\274\334\014\010>U\025\302<\211@\252\275^\204J=t\326e<VF\\\275!\253\214\275\315^\270\274\353\277\337<\354\233\335\274\263\213g<\021\300\322\275p&\201\275H\r\t\275w\310\343<\r\261V\275\376(\252:\241\271\322=\334@\237=\313(y\275;\256\256\274\311\255\345<\010v\010\274\337c\223=\0050\343=+\251\352<\263\337P\275\205@\247=\004\222\306=\323R\371;\307\312\327=\365Y\034\275\243\253\021\275\341\255s;\351\377\336\275e\303\304\275\307\203\252\274G\024\327\274\007t\024\275\243\242\346<\264K \273\027\035\315\274\261\177\312;\337/\306\275\336\177\206<\345dF<~)\275={g\304=\256\271\217=\220\322\n>.\001\025\275<v\342\275\207J\020;m\201b\275\211\353\363\275M#\204=\"\346\210\275\247L\177\274\314-V\275\323\323#=\255b\004\275CA\001=?x\244;\336\371\270\274\335\227\014>\3153:<\357\\\200\275z+2=\2137\341\274\271\375\253\274\365=!=I\240$;\177\354\240\275\342\007\235\275\215*\022=\023\240\237\274\261\273\005\275\nJ\032\274\246X\236\274\265\213\350<\273\237/\275\234Z\335=\271\370\032=H\374z\273\210LD\274y\274\275\274\372Dn=\024\177\366=\261\245p\273nm)\276ig\263\274\275_3<K7\270\275\223\2131\275\255DV=\017f%\276\312\223\371=\346.\271;\241t\'<J4\'<\3477I=-\237\371<\236\220\302<\261\303\350\274\026B\277=\306\034E<+\257\202\275\230u\224=h\320\216:\366\332\377\274\032y\321\274C\341\240=HN\270\273\377\362\227=\235\365\305=\213\317\313\273\034\310g\275\215\260\324\274h\377\030=\004\222\304\275\226K\220\275\262z\036\275BD\234<\323\347:\274\375\377E\274\320\214\216=f\006X=\246\355l=!\333\253\272\232M\313\2743}\311\274\316\033\226=+^\253\275(\267\202\275\232\335\226<\236\242\242\275\222s\213\274\2453\313\275\242\373\327\274\035y#=M3k=\034\014\223=\312\250\271;\355S\332=-c\270=\203\027\r=d~)\275L);\275\310\210\010\276\277\356I\275\207\021\371;Q\270j=(\370\036\276\253\335i\275\216\327\334\272q\362\202=\241Y\200=\270:\n\276\252\315\343;\017E\252;~J\343\274?\005X\275h\213\355\272\225\267\257<\305O4\276\200\212W=\024\311\231=\272\253<=\317\371\206;z\243\367\274\363\345u\275z\317\226\275\004\006\337\273,):\275]!<=w$\350\274\373c?=\330\374c=bgr\275c\247\255\274F;:\275\244\317\226\273\006\300\322<\365\366\336\273\273T\262\274&\324,=\276#\007=\324<\236\275\255\341\356=\335~\017>\372\221C\275\2363\255\273\346\n\362\274\243\326\014\275\327\331\'<\263\271\256\275/\332t=\312\376=;$\271j\274\367h\000<\355Y\205\275\231\255\340\275\301\247n\275\005S\217:\022,\234\275\035\035\302\274\177\211\233<\237#\233=Y5\233\274\204V\355\274{\201\375\274\316\0269=\365\342>\275G!\220;\022\336\007=DH\206\275\301\363q<h@\014;\202c\330\275\036\223q=\233;<<K\277\032=qh\256<X\327y\275\255iO\274e)&=\207{\027\275\332\341i\2759\326\302=\355\"\244\275`\214_\274\373\\<\274\312\251l=i\257B\275o\r\225\274}\347s\275;4\242\275\361\364\325\275t\203!\276w\272\302\275\231$ \275y\204>=N[\300\275\r\013J=%\222\200=T\n\331<\273\002\032=@\022\223=P\014\262\275-\221\353\275\364\256\331=+\',\274W\321\000=&\244\377\275\344\256\257\275\270x\201\274\213q\005\275hu\335=?\2711\275|4\343\274\270G\343<f\360\234=\370\325\216\275\346\3361=\003\341\221=\373\340\273=\225d\322\274\227\247\345=52\222\275#\357;=\353\371\006<\327y\001\275\232\343\355\274\207\305\344\273\342\3200=\234\017\303\275\277+\020\275\017g\315\275\016\335\302=s\010\025=\303\244J\274\236\371A\275C\263::\013-[=\204\343\032<\356\275\270\271*\253\275=\222\355G\274\354\372\235=\264\336\254;\230w\t>\222\006\036>\203\222\246<\212\007B\275\027Af=\0214\267\2758T\347\274Sw\177=\3079\225\275\304\205Y\275\344\031\225=\243:?\275\350\345\263\275\327\214\370\274\325\243\253\275\'\017\216=\316\300\216<\277w3\272:\336\\=i\333\201\275M#\245\274\317\270d<\330f\010\274\0062)\275c\023\271=\273\016]\275GF\350\274^\212\232=q\023g\275\211\333\256\275c\270\213\275\352\212\001>F\016#\275\261\341\274\275\204m>\274VO\022=}]+\275\342F\234=\274<S\273\330b\266\275\245h\263\274;\037#\275\254\300\364\274\315K\263\275A\022\244\274\317?R<\330\333\266=\342o7\275#\235,<m#1\275\313\036&\274\255\014\017>\\\215\220\275R\314\276<X\370\320\275\300\330\217\274\361\342\224=\t\354\346<\265a\264<\3374\227=\365\323l\275\336\360\206=\032\346\335=\024\320\355\274\353\345\210\275\020\232\205\274\20066\275*@h<\204T\204=\200\321\211<\377\214v\275\3242\202=\212\347\321<C\234\306;\202\251O=\323\241X\275\232\356\244\275Q\344\020\274\\\340n\275g\362<=8\237\204=\207\274\005<5\007\320\273u6\333\275\363)\t=\351x\323<q\027\346\274\275\354\244<\340\243\354\274\321\264\035\274\2167\317<\371,\'=\270\230\221\275\310\343\300=y\007\335:\371\271p\273=^Z\275\263\037\367\274\215\252\272=m\n\200<\304\223-=<\370\313\275?K\031\275Y\367><\2105\216=ZZu\274\3161\254\275\346\345n=(\017\014\275s4\000\275\323\034\236=\323\3432\275\256\314\366\270y\017\021\275\360\312\226\274\"\244\256\275\026\206\251\275\352\035b\275\020H\220=\346\350E\275\177Y\035\275<\364\230<\372\244Y\274y\007\275=(\350!<\017\210\202<\253r!=\010_\274\275\004]\330;\031X\026\276\272\221h\275\364\324\261<Y\016\336\275\224\026T\274\345\346\361<\252\235,\276f\356\276<\000\326x=\2668\033>O\350\037\275\241L\211=w\006\203\275n\342\033=\275\037\230=\002\021_\273\013\274\264\274\215|\263<2\257\002>\007\244\225\274Og\206=u:\227\275O\307~<\002\000+=B\014)\275\340\247\035\275\304s)\275V\0232=\304\237x=f\235+>R\002\300\275\274C\211\2748\233.\275\033J\355=\264G\225\275\020;\016<\374\\\314\274\2420H\275)\232m\275J\227x\275pA\000\274\020\221\224\275\"\035 \275\350Y\204=:\031\311=\243P\314=`\356\272\274z\333p\274\021<\037=\306)b\275\340\335\004\275\277.\325\274\326{\004=2\031\035<\302\2360;.\252\230=\277\304\341<e\005u=\254i\236:\362Dd\273\271\227\242=[i\030<\2303\236=\0327\363;\032\361\241\275\346\232\264=5\263\006=\3671\335=Z\264\371\275\313G\031:2\246\204<\314\217\243<\357h5\274u\302\351\274\2538\"\274?\235\253=p\225\254\274y\003\362\275\362\n\361\274\266\372\311;*\236\257=i\027\235\274\020\351\323<*\242\206\272\362\302\024;\321z\313\274s\305F\276\377\256Q\275\244\307\300=7+\273\274\225\336\203=\201\344\355\274\r\365\205\275\177\360Z<\200G\324<q\376\177=\211G2=\'L\235\275\262?\267\275;\226\276\275\031\225\214;\037:k\275\321\036\206\275\3460\t=\177v\273=\335\360\023=\257\343\230\275\316{\311\275\177\333\216=SIc=\006\227\220\275\207\347\257\275j\361\301=tK\350;\272\253+=[\321I\275\305\2514\275\0272\232=\220\2633\275\035\325\307\274\307\276\203<\344\251&\275P9\036\275w\253\226\274>k\334\275\014J\254<\347NY\273\213U[=\251\r\251<\014\306\315\274\370\032\351;\3020\332=>\263R=\340\350+>\261\235\322:l8\223\275\311\221\037\275\215\027\250\275z^\300\275\206\n\n\275A\2001\275\313\216\025==G\201=\016j\321<\311\363\340<\357/<\275)\232\017;C\362*\274\245*\326\274\204\320\231;\241o\236=\351\337\275=\207\343M=\005dP\276\314\323\337=h5\'=SUo\275\033<\206\275\005\254\360=J\025i=~\366\206=&\360\202=\322y\333\274\201\037\346<\376\013\017=\212\301\003=\021\205%\276\005\023\340\274\370\014\374=Z\233\225\275f\353\223\275\004\332\261=KD\213;\223\263\236=+\366\224=\260\253[\275\231v\370<\325\273\332\274\246\320\023\275\222U\323<\264yU=\273H\214\273M)\202\275!\364\335<R$I<\3758^\275Q6\372;h\2635\276\223\224\241\275\344\211d:\246\341\027\275\001\"\266\275o\371\355\275\n\177\371\274\236\027V\275=[|=0\201\322\273z\2637\275=8\356\271,\027\231<\247\245#\275H\231r\274\020\371\242\275\017\370,\275\370\031M=\321\242\\\273y\272\273=\333\307K\275\303\034\275<\233\350=\275\200\360\320\274\271\261=\275\005\352\312\273\366m\236\275\362\245\253\275qK\341=\373a\261<(Z\321\274\001*\230\275\n:\255\274\177[{<\342\020x<\232K\305<\355!=\2759}\216\274\241w\225\275\253\204R\275?P\244=\344x\301\274@G\202<\321~!\275\223\315)\275t\304\265\275\356\216\354\274\375\353\235\273\t\300\203\273\326\033\023>\021P\233\274\024\354\377;\311\205\226\275\n\214\036=t\357\203=?]\247\274T\206i<\277-w<\r\365z\275Y\277\002>;\307\n=<\020\311\275WE\262\275K[v=\r<\213=\31270\275\206z\200=\036G\205=~a\024\275y@\\=ir\233<\357\202\304<K\333\265<W\3449<\243[\320\274\037\272B=\226K\220\274\307c\322\274\330\210\252\274\032O\r=\031-!=\020@O\275=\r\205;\327\353\r\2762\312\321\274\261\233\220\274\255\022\335<\014[\364\2758<\212=\251J\256=\326.&>H\256\211=#\337c<\035\355\242={\030U\274\314-\341<\324\343Q\274\217\3464\276\346L \273\035\214\250=7\261*=\373w.=\245U\003;\031\251H\271\351\222\356;\302\n\255=\006\357\002=%\225\\=\351\224+\276\372\024\026\275\214\277C;\227\250\311\275+g\'=z\235\337=U\321\356=\277\346\237\275\316p\332<\311\264\317;\237\353\333\275\251q=\275J`6=5o\245\275\2462\347\274\250\000\212<\257\030\250\275\022\223N=\016\373a=\332A\303\2746vr\275\305\200)=Tw%\274\207K\344=\332\257\261\275S\033g=I#7\275\360\215\326\274o\375\367\272\tRO\274\370\t\247\274\211\362\214=\341\305\234=\277\1775\275\335\010\027;c\212\336=\226<\021=\236\230\310<\211R\250\273\343=\n>\237V\211\275}\032\275<\360\025\311<\251G~\275\252F\256\274w\313L\274dX\t\275x$\322\274\244\314\035<P\350^\275\233\331x=U\366\261<\006[V=\305f\301\274S\275\320<i\ra\275F\212\200<\340\203~\275rp-=/]\305\274\256\006\266\274\2317\271=\014d\'=:1\233\275S7.<\216\223\000\273\376P\252\274\256\353\265\275N\255e=\006P\224<\257R\"\275\367\352f\275+t[=\266\376\334=-]\314\275\326]]\275\"\334\356\275l\177V=\203\357(\275\356(\r\276 \3326\275\373\370t\27429\315\275\251\362m\275\247\360\204\275@\373m=\210\301\312:\327x\211=\307\354P=r\260\362\274\367&\203\275\243\260\215=\206\025g=,\374\306\275\270q\355<\262E\273\275\351tb<B\016\223=U\264\241\273f:\252\275O\tG\275l\324\227<\032\357\327\275\313\345\315\275*z\330\274Y\"\325\273\001%?=\001\346\326\273\326\346\031\275%l\222<\312\023\023\275\347\375\"\275W|\372\275.\262x=\343\303g\275\273\332\247<=\353\263\2759\276\316=\225\210Z=\201\225\247\275\034c2\274\210\305\201<\3127!=\252\230\361\275\236\247@\275\364\031\004\275&g\222<\004v\276<\376\261\352=\017\302\235<\355\357z=#\336 =o\236f=\313\231 \276\341\241\305=\261\005\213\274\220Q`=\007\257w=c\007\323\274\337\264\303\275%\235H=\364\362\033\275\344\212\204\274\207;\205=\336\263\010\275y\350S\275\340^3<\275C\356\274\227\267\340=Z\272\334=p\367\235\274\016\370r<]\330\262<\316II\275w\332\036=*\316\356\275\2116a= \003\301<\367\033\371=\214P\263=\303\217\r\275\353\301\036>\373\233.;d\332\007=\200\234\211\275}\276\252;\224f$=\273?\341=\016\302\227;\346+$=\377\320/=S1~\275\243O\373\274\220\277_\274a\227h=\332\223\315<\212&\205=%\032\205=&\237\010\274(\332j=\242JM=\020\313\010=(D!\275\2229\220<w\317\001\275\336\231\344< \332\324\274\356%\340=\tpF<4<#9\250\311i=mL\273\274\023\033s\275\035}\016:r\004\263;\027\010\"=\274\353\013=f\021\262\274\273\016\032=\000j.\273\250\334\036=C\002\251;L\351\245=`M!>d\"\322\274\246\200@\275O\235\036\274\236\034\025\275\027\326\242\274\331n\201\274\211I@=S\221\330\274\201\364+\273\234]\233=*\024\337\274\2150\310\275+Rf=\3122;<\013\221\016>\0309\007=M\343\240=\235\"\016\274\010dp\274H\367U;/\033\271\275\300\216n=\232.\013>\320\246\206=xa\220=\013\201\310\275]<\267=\354\201R<p\220\004=\326n\320\275\235\223\360\275c\005\022=\226f\270\273\276\'\350=S_\r\276\203\315\272\275\242\255\035\275\233\0025=2?\212=%&\272<\202\033\021=\035\221\331\275\312\226\271<\361\306\263<4\324D<\261\017\021\274A\232\027=\220\376\302\275aU\203\274\302mT\275\252\245\006={\200\342\274\242\305\267=\240\212\301\275\214V6<\361=7\274\312\314\007\274\261l\274<0q\200\274\010\306z=\010.Q\272\246\233\321<\337\364\365\274\333C\031\275\347\205\360<\03196\275\036a\367\275s\354\360\275l\002\262\274\372_\020\275\343\311\016\276\361\300\274\275\242\r\037=\006L\237\275\335\301\014=\322\t\267<\304\242f=$0e\2752_\243<\313\213=\275e\034\237=L0^\275\034\234\224=\366\306<\274c\366\005<\360q\226=\305\017R=\264\360\271\274P\321&\276n\347\031=\3152@<\222$\010\275\330\237\022=\005\247V=\227\2529\275\354\356}\275O7D\276\037V\363<m#O\274\337\034\215=\036\276.\275\356\nB\2756\r\254\275[\016:=\353&\037\275D6\305\275S\361\321<\275\252\240=\353\212\203=,\223\036\275\230J>\275\002W\233\274w3i=\300\215!=\333\241\232\274\353\032\370\275!\214Q\274\355rV\275j~b\274\241\036C;\343;\253=\371\001Q\275\204h\357<i\310\242\275}\235\263\275+s\326\275\265\321\346=\364(\260=;\354\003=@a\211\275\261\326\253=6\315+\2752\232\337=\321\273\303<l\034\251\275\343WF=\006>\033\275\365K\033==c\231=/\334t=\365l\030>\301\026:<\021\225@\275\036\253B;\256\000\'=\202_\261\273O\230\022<\364\211\316\275\355\363\350\275\216\342\215\272\177<\347\274o\372K\275\301\204\017>\377\376C\274\307\357\274<\252\244\323<\017\275Z=2r\026<\234\322\366\273\021l\363<\264\252\253\275\024\371\232\275&\260\":w\006S=\224\344\372\274%I;=\237\332\217\275d\235\263\2745\215\206=\305\022\237\274\246\240Y\274ocE\275`\376\t\276\330\243 \274]cD\276\340Qj=\032\227\007=k\024]\275=\351\013\274%\001\344\275\201\327\260=\265\365\247<\351a\256\275\215\271\r>6\265(:\332\t\263<\204\344\032=O\361\272<\221H\033=W\245\230\275D\3633>c\034\203\275~\003\346<\013\322\217=\321\344\217={\364g\275\356\241\310\274\203\253n=\206\267U9\300\237\000:O[\232;\312\260-=;%\232\275`<\203<d\242]\2755}R\274\215M\230<X@c<\371\357\210\275]\2557\275\364\253L\274\200\363v\275\324W\000\276\200\014g=\214\305\352\274g\024\262<\304\347u\275\025\t\255<\254\365S<\267\031\345<\007f\251\274%+\325;\353\237^\275\230\225\036=\023_\206\274:\363X=\235\325,=\365\021F\275\234\237\003\275\027\314E<U\227\313\275g4\360\2756\274s\275\005\031\373=\206]\233=\275\320t=\336\207\251\274\027\204J=\237\202\370\274W\225\316;\330~\230<\300\366\214\275\201@J\274\224#\260\274RK\303\274\004\024\273=\203/]\275\370018\306m\"<B\034\024\274\260m\037\275n\3650=\273\340\211<=\211\245\275-\362\007=\204\370\006>\"dk\274s\037_\275a\324\334<3b\211\275\322\300\370=Y/q\273\022\177\330<\305Q\203\275\023d\365\275NS8\2742\270P=\205\211I=\212\307\020>\252\351R\274\362\214}\2740\362,<\265\214\003\275(\005*=\371\326\r\275Kt\364\275\274\327\231=\245\212\276\273\254I\233\275O+B=7\235\303\274\\4y=\271!\317=\224\232\321<p\241[=\220\017\366\275\362\232.\275k*\303=\2103\243=Rw\006\274\300\343l\275n\035\021\275\377\350\204=\342\200\024:.\252\347\274\367\317\345<G&R\274\207\203\252<\253\266n=\336\316m\273m\267\266=\212\305\234\275\030\334\r=l\234\277<$\252\034\274]\206m=\347m\263\274\330Z\344=\322\375\240=\325\203(\275\225\233\302\274\226\277\212<y\234\\\274\225D\023<U\305\344\275x\375\223\275I]\235\275$\335\004\275\304#\221\275\304L\223<\017\357\227\275\357l\306\274\002\237N=\332\236\006<\220m`\275\326d\315\274\014y\'=\341l(\274\350\206`<\013$2=c\317m\275\265l\243\274\210\375\233=\030[s\274\000+:\274\246\025\264\275y\361x=v\333\350=\r\350\010>\256M\265\275\030f\321<\tR\201=i^y\275?\230\034\275o\226o\2747s\204=t\222\204=\r\300\377\272\263\235\232\275EU\262\273t!o=\331\302\001=\036^r=\341,\255\275\306k\311<\304\362C=\201\365\247\274\230\254\345=q\t\321\275\300\350\264\272*1\353;\325\202\\\275\334\374,\275V\367\021=\354\232\252<U\252\304<u\375C\275\246\261\342<7\021\304<!D^=f\313\014\275\001\007\352<M(\032=\303\220\326\275\237\240\302<\364.\242\275r3~\275\026Z\363\274\034\273T=q\237/\274\216\364&\275\317\346\022<n\002\213\274O\206\335\274\202\360\265\275ID\271\275K\362\t=\252D\274=B\004~\273\323\330[\275\232KW\275\005\242\321\275A\010\007\274E\265+>\254\307\\\275\230-n<b\335\243=\3643o\275\243\024\344\274\245\373\304\275\330\351\263\275\335\274\277\275\206&\022=\014t\270\275*\310!=\212y\245\275\320S\227=\317\314\322=\0077+\275\325\364\275\274b\353I\275\365\363\260;/{[\275\217\307\013=d \315=\341\315\256=\221\265\342</\223\215<}\272[<#\216)=K\233\314=\271\365<<k\"b=\024E\272\2753d!\2750\246X=\001\222\340\275\207\356\262\275\343\320\034=\212\313A=q\303\2329\352D7\275\314g\004<^\2666=y4\024\2752\315\334\272\263Ui\271\014\200s\275\220\010\222=\2661\371\274\t\322p\275-yC\275\277\002\225;x\264\005=\032R\222\275\3514\036\2757\375\021\275\265q\360\274\357h\275=\311M\220\275\367\340\353\273L\246\t=\241\242\244\275\357u\031=\020\273\307\275$\200\212\275\344@\313\275\3411\022\275\n\016W\274\275\252l\275\016/\365\275Y\375\317\274\206\222\374< \222\263<\225\214\266\274OLK=\253\232\337\274H\033\004<4\301\357\274O(\311\275\255mk=\2036\201<:\261\033\267#\256\256\275\010\004\002=:\210\337<\240\366\214=`\260\336=[\337\333=b\376\320\2740\200*\276b%y\274\n\261`\275?\204 =\370\347\"<\231a\365<\367\351\036=\323^<=t\010\027=\251\030\240\273(vF\275zo\202\275\301\222\013=4\211+\275\272\236{\275\255\250\330\275\375\2474=\365e\017\275\017\325\310\274\324\016\320=\223\217\240=\251\246\013=oQ\214<>U\230\275mF\261\274\032q\206=\237\366\233\275\t[`\275#\274A>\243~\261\275\362\035<=wh\236=,\3515\276\275\204p=d\207\r\276\313\024\364<\205U\271=\215~\277\275\340\222\003\274\026\365\277=\030r\002=o\313\311<~l\324<\000\032\332\275>\361;\273q\215l=\001q\037<\245M\204\273\036i\017\276\203|\001>s\227b\275O\351O\275\002\3535\275\364F\261\274\332\204\t=$\343\001=#\336\343\274\222\350X=\305 \353<\213\004\277<\021\374\316\273\264\224E\275\244\302\033\273x\270\336\273\317I\014=f\220$<\2679^=+o\230;\361\217\262=\004\210\221\275\305\226\254<\'\277E;\022\257\275=j\222\315\275Q\273\373=\257\305\004\2764|\200=D\307\355<S\300w\275f\022\303\274\353\017\321\273iu&=R1\362\275Ii\233\2756\256\377=*\354\351<\377M\356\274\250^\210\275\277\030\342\2750\323 \273OZc\274\220\262\003\274*\346\224\275)\213\376\272\310\225\373\274\323\005\211=\331\\.<\321a[\275\262\336\263=\215U\310<\211\254C<w\245i\274\370=\345\274\344B(\275\001{\302;\033\242\037\274\001\321\312\275way<`\317\211\273\211\241\'\275\344\n\315=\331\"X\275(\242?\274\016\324\202=\306\024r\2752%e\274\354w\211<\344\220\030>\346z\235\275U\361b\275\000K5\273m6\351<37\010\274XD\377\274\345\322\335\275\314\036v\274\273G\020\275\243\277(=pX\223;\023\205\t=\301$\203\275\324O\264\275\236\352\334<\210\355\224\27462\345\274?O\215=\366\255\t\274\231mS<t\307=\275E$\251\275g\277\033=\354\301\327;]/\002\275\251\022V\273`\246l\274\347\241\207\273\210\027\276=g\313\254\275\026\377\223\274\310 \330\275\353p\307=\331\346\344\274E\"\223\274)\336\221=\313\245W\274\0327\327\273\002l\300=\362~\276\2745C%=\207N\357=nP)=\210N\365<9\365^=\215\235I;\376\240\233\275\240N\005;\266g\214\275\215,\372\274\255\221o<lX?\275\231H@\275\242\033f\276\304\353\274=\314A\252<7\275\376<v\016~=\246\236\316\275jFH=\251C\320\2741-\232\275.\230\332\273\030\311 =O\211[<\226\343\327;E\240p\275\3709\252\275.rX\274O\253I<\006\035\034\2754|\002=\352(\361\274\244MD\275\316V\307\275\351\221/<j\267\266<Q2\336=\215Ae\274\233\371*>\242\213@=\306\344\003=]T\204=\351\346h\274\016\327\016=\334\345\342\273\241\225\001>3\344\027\276 \"\027\274MR\003\276\342D4<8\301\310:\317\3512=\250\257\207\275\031\313\177\275\255\2505\275\306s)\275P+\030=M\014l=\031\244\247\275\346Cn\274\306`\317\273;F\353<\210^q\274\355\347\003\274\203\234\261\275i\225\240\274\370`\307\275\353%\323\275\250\224\355\274h,\327<xj\300<T\273\177=\270\t7=\",9=\253a\351=\3628\205\275\355~I\274\341\017\240<=\204\0059K\027\000>\207\311\245=\2422==i\202]={R\340\274X\275\340\274\316\037\027>}\316\323\274\263\215q\274\227\365\010\275\264`\243=8\355\253=\264\315m\274\036f\205=\270S\303\275\023\313\325=N>\370\274rND\275\277\250\233=\304RF=\010\3443\275S\016d\275\3207w\275@|\031=\301\213e\275L\254\344<\236\306\223=T\276*<\031\002\003\276x\364\370;\010\006\007=\203\316\257<E\324K=\3600\276;\022\207\323\273-\367\245=\344\332\005>\326~M\275\311\237\254\2744R\267\274\033\374\344:\226\216\215=3\212\264<G+\001\275=sR\275\3201\325=!\256\274\275o9\'\276\260T}=7\341\243\2733\356\034=\211\353J<\247@\376\274S\267\242\275f\306)<3)\344\274^X\370=\262!C\275\215\014O\272\263:9<=k)\275\240\024\304\275\003R\007\275\256\272_=N\352g\274Um\030>%\245\244<\242\232\021\274<\'\255\274\205O\210\2753\271\201\275\231F\234=\312\243\310\274\3202\216=\371\244\032=Rib=j\224\256\275 \356]=\021\010\'\274\252\027\271<\022{\237=\346\201\021\275O>\226=cOf\276\365\207\221\274\273\014\"\275\330\367\266;\321\365\231=\306\323r\275\006\203\231\274\220P\222\275\332\377#=4u^=\334\035F\274\n\353\240\274\001\357\217=\372[^=c\t\257\2744\243-;\262\312\334<\034\266<=\352\363\225\275\233\315 \275t%\272\274\264T\203=\313c\253;\004.Q<\245\336\374\275|C\326\2753\021\305\275\017\332\217=\266\207\207<\374C\351\274\337\362[\275\026\035\r;\344\211\034\275p\351\201\275\317\273\376<\264\317\205<\265\2612<\215!p\275y\350g=\255s\311<\366o\316<\203\331f\275>\200\253=\003\341\026\274\305\032y;\325-d\2740F\241=\003\201\216\275\2073\035\274\372\276;=}\260\314=\345A\221\275\277F\233\275\240P\366\274c\361\235=\245\326\377\275\252F\241=l<t\273\r\374\253=\233\313\235=^r\361\275\240\254H\275\t\256\243=\306\377q=4\266\360=\0212L=4l4= AM\275\370\333b=\254\356\306\275\341\225&=K\014[\274-\342\302=E\017\021>\024\222\377\273\223\377B<\244\354\363<=n\t\273\032\215 \275E\n\251:\256\224;<\315\257\323\274T\313\002\275\270\274A\274\3220\207=\204\352\264\275\240\347\245=I\217o\274\033\226\222<]\251\020\276\332A\303\275\272)\016\275tS\310\274\314\013\020>j\210\361=\362\232\355=\266\253\237\274n\323\345\274\361\274\202=\257nq<H\0338\275\303\311#\276\204\005\205;\243\247\334;\270-\205=.@%=x\014\024<\211J\002=F\374\022\275\032\017\360\275\331\205\257=\212\364\375<\361\275\032=B3/=#N\372<]\306!<\2403\242\274\020\273\317\275\356\217\000>\014\002\332\275\240\010\316;\231R\211<\225\032\033>\377Y\271<&\266\205\274!\334\355=\302\022\224\274\010o\036=\363\024\204=\355\236\332<\204i\036\273\336\034\242<\033\331\246<J\r\r\274\201\016\275\274WF+\275\331\345\357<j\374\263\275 \\\215\2721rS=|<W<\327v\241=\033\220\353\274\222\222\231<\355\343W=\005\265E\275\031\024a\274\330\337\246;}Bl\275o\360\373\272DG\355\274\247Y\240<\244\366\223=Kf\235=\361\375\255\274\324\\\253=\256\314\315=\200x%\276\342Mm<\373\241\266\274CuK\275~I\211\275E\302\300<6\"g\275\340\357\300\275\244\211\237<\337\031=<\326\363\265=\306\221\033>{-p=\240e=\274\247\211\362;S\374S\275t\014\035\274k\213\205=(\035\027\275nc\027\274K\024\010\275\017\305v=n\213\225\275\321\241\353\274\214\253Z\274\365\215\332\275v\331Y=9\305\236=\341X\377\274I6\277\274\'N\024\275*\336a=\215\364\215;\334w(\275\225\006\236<X\016/<\314\001\347<\373T\331\274\306\205\207<R\361z\273\215\367\271<S\244\203\275\267>\305\274\221\024&\2758/\"\274pB\371<<\0134\275^\017$=r-\257<\335\267\016=\247c0=|G\254\275\376/\234\274.\250M\275dn\001\273C)\274<\371.\216=\231d\276\274J@F\274\320\263\375\275\310\214\363=\226\304%\275G\033\207\274jyp\273\210\374\302<0\005\210=\310\316N\275\345\316\t>\303\263=<\\\307H\275\207\211\310=\366`\004\275\275\013%\273\\\324\377\274\230\3575\273i\220\230=\274\'$\275r\006n<\310:\220\275Z?\014\275\363\200\341<\356\211E\275\256\"\307\275D\3414=&\352\250\2759$\021>\t\306\360\274\325\014\251\275\336\023\031\275-\020\301<\367\002\274=8k\311<\001\213\027\275\224\205\201\275\265rr\275jY\006\275\233]\316=u\277\256=k\036\037;\262P\336\275\230kg=\"\034\241<7\257\350<\357\t\221\275j\227\365=\261]\024=\371\230\014\275-\233\217\275\205\303|=NS\033>:\026\215=2\345\352\275\374\223\342=\302)u=\345\311\335=\276\013\266=\300_\232\275~\273\240\275\230\271\225\275\234\206\244=p\376[<\323\332 >^b\214=\360bS=\025X\000=\264\016h\275P\031q\275\301\343I\274O\315>\275\350\226\221\275\210\341z\274\201@\346<p\214\370\274\357\222\310\274W,\210=\305Q&\274\006\366\367<o*\356<^\014\307=\274%\344<\330\336\234\273\027\254\036\275L\242H\275\330\243R<x\254+\275\356\340`=\266\006\313<\216<\030\274\006\335\037=\344\373\217; *V\275\301\243\014\275\225\274\327\275O\334\263=E\376\222=\020\270\026\274\t\377\265=\225\")\275\007\005\371=v\317\372<\212\004\205\275\371\016\207\275\020\2666\275&5\245\275\254\"\367<\336\363\207\274\215@\227:\031N\t\275\246k\257\275\035\206\013\275\346\203\350:\204\353,\274p\276\370\275\3067\367\275\316\200_\275Xru\275\375\356\235\274\245P\277\275\325k\305<\366!\312=\252\375v;\230?\013\276m\346\022\275b\177\241\274\264*\032=\030:\034\274<\217?>Ur\201\273\350\0226\274\212r\355\274\315\212\265\273\013\016\230<\013\\\r<\307\006\302\273\2116\017=@\212\345=\242\177I\274\242\'\372<b\324\t>\'A\021\275\212\333\230=\267\375\222\274\004E\312<\023\356R\275u\215\204=\300;\027=\224\233\364<\231\236\025<\251\201\034=\321\366\245<L\231!:\203\301\330\274\026d|=\330W\r<\200\337\224=f\337p=\205\207\253<\247\037\014\275)\025\211\275\003X\237=4\001C\275\315\256\200=\020\363\340\2736\r\';\344v\336=\327\377\201\274\353-\353\274\205\002\n<\316\326\344\274^Z\017=;^\213\273\3341\262=XY\264=Ek\200=\340l\265=Nkp=\006\366\303\275Ri\206\275_\003\000=\214\225\317\275\2776\200\275<\216\321<\330,:=z\020\221<\320\233\245=i\004\301\274j-\230\275\032j\344\275\323\307Q=\217\266\260\275\325\035\253=>\374\253=*i\177\275P3\243<\316\3739=\320\001\216=d@\253\274\365aE\275k\351\320\273\234o\007<\355\262\231=\243%7\274B&\363<\215+3=0u\305;[\207y\275\325u\020\275\367\316\312\275x\366o\275\252\244\000=\227\201Z;o\237\303<)\324\311<i\366\202\275\230{\026\276\373\346#\275<,\021\275\251~\244={\223G\275b\'\267<g|j<{X\215\275{\241+\275\271\370#=\274\3024\275Uj\223=Kq\024=\262\246\305\275\230\361&=;x\343\275\3568\036=\270\313\214\2754/\020\275=\031\352<\215\350\342\275\277\265\301=\036R\002>\254\027\367\275\\\016\276\275+pt\275\234#s\275\345\205\303\275\275\001\355=\026,\307;\000\262\346<x[\335\275\362\202J;\331\t\034<\244\005\302:\2151\010\276\003gW=\325\r\207=m\235\250\275\216l\010=%b2=cg_=\3153A\274og!\276Z\033\010\275\362\374\345\274l-\035\276\224}\262\274\254\353,\275D\361\230<c\265\256\273\'\261\252\275\360\026\022<\354\200\342\274\033Pk\273/\353\000=\207Q\230<\024\336\303\273f\322J\275\317\360\203\275\240M\267=E\027*\275m\005;<\252\353`=\350\364\231\275\324\2451\275G\010\261=1\253\241\274r1\321\275xB\\\275\216\321\302\274\024p\302<T\260\212=\303Y\030=\007\0275\273\331\217\345\274d\272\214\275Pc\231\275XN\350=\356y3\275\3623\025=\244\247\245=\305V\306\275\311\272!\275\007A\006=\356,\323=\025|\274\275\304P\220=\"\220\310<B\300\220=\262\202T\275\266E\335<\223_Y<u\2275\273\022\007\274\275p\324C\274\221RX\274\332\003\247\275\211g8\275\3422\257\275\353\367\270\275\353\317\344\273\323\342`<N*\014;K\367\003=hT=<\257^\353;\3358\232\274\r\221\213\274X\274\211\275\000S\006\275]\265\007\2746n;=\355\232H<\301\306\035\275\036+u\274\342\246\207=\300\241\264<\362\\K\275N\222\335\2733\201a=\214Q\312=\232)\335\274\342gC\275\'~w=Z5S\275\332.\231\275qR\024\276O\034f\275\006\226\233<\010|\210<X\251$\275\3743\002\275\374\327\212\274\334\366\212=\210u$<\276\035\312;Ap\036>\363\246\223=\210M:\273\021aM=b\306\222=\\O\225\2751b\027=u9\222\275\257\276|\276\377\270,<\366\003\005\274\202\222\366;\255n\346<\250\225\313\275Wg\367<H\336\377\275\004\004R\274K\210A\275i\344\235\275\035e\356<\237BZ\274\360\237\345<\262,1:o\231\001\275\360@@\275\245Bf=\020\004\220=\212\\\002>K\t\270=\3348z\275\237?\264\274\304\3478\275\333|\317;;\263\225\274Y\217P\275D\306\277=\2333\213\275\004x\261<\325s\304\274M{\237=\251\334\354=\267\356\031=\277\334\231\275\236\3418\275\234\311\307\273\237\242\231=\231\350\212=\216\332\215<\247\351*\274\253\177f=\337f\025\275\231X$=\225\300e\274T\337\304\275\245\252\353=\003\257\222<\306\017\264\275=[\303=\247\315\006\275J`E\275\277\244\r>H\307\343\274d\321\017=\201\202\326<\032\312W\275b\303`\275#!\032;\254$\201\274\352v\023=\243\337O\275\257\361\201=\211\205\223=o\020\001>\35470=\010\002%\272z\332\267\275\3163\000>\213\243\035\275\373Z\262\275x\254\253\273 \311(\275\352\221\304=\234L\312=t\210\004<\2321d=D\354\207=v\2077=\325\3546=\031\215\315=\2471\t>nr\330\274\241\310\3179TI\036=\314Y\313<n\356Y\2740\367[\275#\005\n>5t\362<\t\220\006=!\315\367\274\324\364\037\275\316\002\246<\300PU\275L\354\217<\375n\273\275zEy\275Ei\242\275\354|]\275\222M\221=b\2603\275J\n9=\346b\323<\325\304\250:\234\315\213=\377\037\210<\3467\346<\013L\232<t<\020<?\271o=\223b\000<\002\314\350\274\351\035\344<`#\376<\222O9\275\205\225\214=\315.\000\274[\253\331<\315\234\026\274\356m=\275\343\300\377<6\205)\274\311m\367\275N,#\275L\323\326\274\222\275@\2752\214\263\275\r\032\263<\177\371\357\275u8\371=\362\377\237\275\225\210Z\275\357B\322\275\321B<\275\307\204\203=\231\256\310\274oU\302;!\300\244=w\026I=\010\223\035<d\n\254\275\357\034\233<\312<)\275\177\231\360;=p\327\275\300\002\333=}2\202=\266\233\007\275\006<\001>\000\216r\275i9\342\275c\222\231\275\237?\331:\016\361\323\274\221\023\255<\276\201\332\273\003\263\324\274\314\376\375\273\330f\206=\"\257\361\273\'\302\026\276|T\253=<\200\245<\332\312\005>\r\367\362<\'\310\013;\334\275\r=!\201\031\276&G\212=\320S\t\276\224\326\004=%\230\233\275\322\177\217\274\373E\237:\341g\252=\224\2315\275\305A\254\275\\&\240<\036\264\337\275\022\321\215\275\031+\324<\251\2009\275ak\303;\307\274\030\2756\263\360\274\336:\224=\253\021\3329\003\020\246=\250\212I<9\214\256<x\332T=\353>?=\334\3714\274\354\210\215\275\221o\264=sj\371<\344J\354<-P\310\275ty8;\320\304\357<\300\016O\274\305\250\321\274\203\001C\275\275\n\274\275\366\346\226<9&g\273w\225z\274\306\364\375<\037\377\362:\260KY\275l\364\317\275Y],\274)\'^\274\263\021\245=\321\221\301\274\261z\266<\036j\241\275\314\004s\275=\211D=\\(f=\214G\241\274y\226\357\274p/\235=\347K\t\276\335\264\265\275\314f\245=!`\007=4\313\t>E\303j\275\202\316\023\274\366b\353<1\313\206\275\2606t=\3447\353;\201&\021\276k\340\257\274\205{==%\023\235\275@1~\274\020\n\0028}*G\275\364\251{\275\260\252\021>}d~<\372\363\034=\2671\304=\232\t\214\275\262@{=\240\000\214;d@|=\305\031 \2750H\226\274\256\2351\275\034\253\024=\014\010\300<\030<\356\274}\316\305\27511\005\274\245\354\363<\370\351\204=\r\312W\274[\202c\274\353\"\334=\221\344\362\275\226\207\311\273\3158\002=d\235\216\275D\357\t>\201\301&=6(\365\273,\241\325<\307\032O<\n?$\274\004\240==k\330\215\275\357R\257=\003hl\275\214\010a;\377\004!=\336\204\034\275\371\027D<\263`3\274\267\265\237\275\245OG<\354qd\274\020\324o\275\376(8=\335 \307\275.+\304\275\022\264*=\226@\352<\020]\321;\t\302\034>\323\nA=Q\200\244\272`)\206\275\237\032\275<\363&\275:N\271\020>\354l\354<\207X\301<\n]o;\223=\027\276gSw\274\205\325\241=\263\002\224=\010\r@=s\211\204<\033\256B\2759F\001=\257\362Y\274X\323\214\275\314\363\247=ogH\275\033\342<=5\214\363\275\212/\267\274\215)\032<\230\234\351<\364r\345\272\32050\275b8L\275\240IL\274\227\252\235=\300b\214\275\215\363\247=\234\237\376\273\377\247?\275\020g\320<\267\363\217\275\001\261n=]\304\016\275\004-\332=\025K\024<\307\311\r=\321\344\016<\224\361\347\275,Qm=ML#>H6\220\275\363!\017;\265\341\307\275\212\013\205\274f\270\326\274\301\237\006\275>\3719\270\266\355O=\260OT\275\333s\372\275\236\004\316\274d\000a;0c\001=] \005<\031l\006=\346\234+\2748\306\366\274\311<q\275\227C\313\275X\204s=\303s\214\275\033\320\276\274\256\237^\275b\350\244\275\27093=O\342\236=\242y7=\227\005l\275\360\243 >J\270|;<\372w=\027\313\034\275\355\201\245\275\323\000G=\236)\232=\241\016`\275\340\301\"=\\\326\027\275PcS<\037\303\343\275\322\345\001\276\'&\'=A\021\002=[`t<\337\206\235=\253e\003\275\366\003\020\275/q\204<[\337\250=O\026@\276\2560\346\273\363S\224\274\261\227V\275R\212\256= \204d\275\256\013x\275\014\3004\274\340\363\306<\014\246H<g\013K<$\310\253;I\363\003\275\035\303k=\327*l=o\026\275\274q\213\\<\227u\257=\216\314S\274hk\202=.7\260\275\331\345\377\271\275>\202;\tEf\275$\223\345<t\"\307\275\003P\332<$m\357\273\374j\363<\010\325\r=\177\301\276=\224\306*=r\341\021=yk\233\275\241\256\031\275\240\217\277\275\365\372\256\275\231`\326= \317\356\275\232\224\315=G\272\340\272`+\221\274eH$=Qg\210=F\371\262\275\242\270\021=\350\023\001=\000\310I=\315\317\371;*o\270=\212.\315\275>\017\221=\006\274\317=\344\361\017=\275\354\324\274\330\256U=\370eO=\302\304\327\275,pA=x[l\273\034\233\251\275D\246\252\275tEJ\274\025\276B=Eh\217\275\241`\026>\333\020!=%gX=\262\311P\274\007\213\200\275\311\303\023=\247\264\216\273HR\227<$B\347;\374=\354<\273\212\234=\200\'n\275\362\363\246\274f\301\325=\231\260\207\275a\004\260=\303\236\225<\214`\257=2\264\305\273\327\377\322=hh\301\275\237\235\326=\334<C\275\204\302\232\274\267<\214<\370\361\216=y(^=\237m\351=\264\325?=$\361\262\274\224\316\007>P\031\355\275\217\336\224=\307\177\271\275y\337\227<f\352\025\275\001\325\241\275\325\225\334\275\251\201\342\275\t\355\000\275\240\313\356=\2631I\273\316\230\243\275\234\223\252\275%4\374<\352*\010>\027z\354\274\256\235\244\274B3\200\274l\354M=\251\322\262;\304\010\277\275\335\242\267<\215!?=E\303V<\\4\014<\017f\005\275\013\"\022\275\272\252P\275\364\322i=\230\235\\\274\201\275\276<N\347\230\275Z.\237=bY\205=h1\201\275`x\262\274\005B\325;r\213\336=a\364\343<Uv\227\275\206\327>\276\315\275\313=\260\320w=\257\037\256\275\301T%=O|\263\275sO \275\375\201\304=\265\227\206\275\025N\016=Q@\201\275\351j\207\275\r\270\275\274z.\004=\374\2329\275\024\253\210\275\365\330\010\275\037E1\275\221DP\275\351\311\315\275\032\\\004\275\3606\217=y\202\216=\372\331\010\275\3107\232\274\371\231s=\177\036;=\r[\004\275\210\357j=\353\300\366\274J~F<\200g@\275l\375\200=6*~\275\313\3345\276b\t\315\275e \357\275\2106\263\274\356.4\275\375\315-=S\201\377\273\224/\200\275\2206\342<\270au<\307\006\210\275\333\331\207=\211\257G=a\024\t\275I\r\002=\311\200\353<\301q\226\275\354XD\275\354\310o7\215\n+\274\036\257c=\336\277\376=\021\250\237\273\351$\316\274(\346G=\256\\\224=H\324\235<\237hB=v\017\335;[!#\275\n\300\321<\302}\322=\231\377\310<\224)\003\275oWB\275\344]\026=\304\236\343<y\342\212=Zn\035\276\251Ti=+\374\"\275C\242/=M\244\233\2757\333\025=\221\3161\275\3524@=\351W\t=(\370\"\276^1\217=\026\345\331\272\261\261$\273\n/,\272\360\3317=\322\023\013\275\211\035\243\273\375\206\021\274\242\203Q=\317\033\223<1\251\247=5\205U\274q\275\224=\311\201\3357Q \303\275\205JB\275\250\302\274\274\014\305V\274\211\014\332<\316\206I\274\264\230\304\274_%\257=d\216\203<q\263\203=\037f>=V\254\024\275\025\340\352\274\252\232{=\001\352\210;\236m\367<.u2=\236wa=\213\253\264\275k\222\223\275\222\321 \275oI\335<6C\222<\204\377F=\313\221\211;\267\366\010\275\323&B\272wC\213=\245q\031\275\236\223a\274\205\2138>\000f\321\275\264\016\253=t\245\233\274\211\3540\275R k<Yk\331\273\213\225\004\2755 \273\274\343\"\307\274\021\351F\275\312\244\216=\205&R=o\273\200\273\225\365\272<\322\261x=\345\341\304=\317\254j=\227r<<\254\333H\274\202\016\220=\202\260\334\274\331M\375\274\257:\\;\300\2101\275\010[\301<,\272L\275\363\003\262<\377\236\030=\270X\324\274`\261\024\273\014hg\275\317M\335\275\002\262\225<\227,\236\275[\273\314;s\225\320\275\036\033\031>g\225\025\276\333\354r\273O\377\213\275\323\003\311\274\032\360\374=\274}\211\275\301\254\r>\260|z\273\rFb\275s\341\230<\267\372\007\273\000\t\265<\332\365\265=\262\377c=r\014:;\301\307\351\274\334d\"=\310\234\267<\3060\360<\0214\256;\323\304\031>\006y\355=\336\035\007=Z\372\267<\325\365\316;\237\302\007;\371\373\274\272p\315\"=\321\305_<}\226:=m\340x\275\252\350\210\275\'{s;gJa=\006\3143=\237\325\204\275\304\252\256\275k\037c=\263\356\347=\300MB=!.@:\266]\002=\374\\\224\275a\345\236=\036%i\273\032\237C\274\221 \213<\350\016\260\274f\221\325\274\325\317V>br\323\274;\274\303=\303f\333\274-\025\036\275\001\321\375=\227\324\033>H\315_=\230\233T<\363p\263=&\243\"=\264m\002\273I\376\253=\245\200\306\274\272\267\227\273\241\223\242\275\007\335\342\275m\204:\275\013\242\243<\320\303\254\273\177\016\253=\2511\331<{\251\365\274c]\000\275`\230\331\275\211\371\335<V\'U=y\264\357\274\000W\177=\331\251\250\275\\\206N={%\261\272=\300\217\275E\314\311\274\264\332\364=: \277\275%\240\026\275\262d\201=\217\377w\274\314\325<\275\333O\267\274GK\254\274\023i\377\275\021f\373<\373O\000\275\300>\357=\266\362\213=\356Ry\275\242\220\013=_Q\004=uk\202\274\227\256\202\274\361\325\213=<*\376;\364\rY<~*\250\274\036\353s\275\016\365\271=V\\\202=\016@\346<\333\320O\275a6\333\275l%/\275\245\233w=\004G\276\272\324\013\277\274\250\277\001=\020NL<\302s\003=H*\217=\345\376p<\351\035\204=\262\371O\275\244\021{\275b\374\031<\352\"\212=c\232\033>\037`\234=\327z\366\275\372n\360\275\375!\252=\260\364\270\275\256x\253\274n\211F\275\310k\231=o\262\213=\314\214\232=\n\243\030>\303j\377\274\340\362\340\275\333@x;\331\342\035<\343\323\274=\204a\231\273\016\372\266\271P\215m<%\261\210\273\266af\275\224*\007=k\256\361=4\330\033=g\006,\275(T\205\274|%\303\275Il\357\274G\203\242=\004\240\247\275\022\245N\274\255nl\274\372\211{\275\251\3667<\021\336\016\275&\376\344=\252\373b<FQq<\246<\323\275\303\370&\274I\035\261;\260\201\206\275(\252u=n@\206=Qs\001\275\027\230i\275\374\344%\274\240\013^<\355Y\257\275.j\320\275x\346v\274`o\t=\003\037\023\275\035\035><\004\000\314<%w\272=\357\251\342<a\321\204<\3001==\272\324\004\276\336\206\335\274=\344\216\275\277\371\376<\004\025\214\275R\235\251\275C\214/\276\036S\341<\2507Y=\324\310\214:\311\001~\274#\000F\275\305\355\035=\274\262Y<\255OE>4\301\020>\202=K\275\246R\034=\250\265\371;2\r\242\275\305Ry<\260<\213\274\231\202\002=#s\223\274\352%#;\r\036C=\266F\233\274\321v\001\276LO\363\275E\006Z<\221r\357<\304.\350\275\365\254{\275\307|3\274\006\350\373;\300\234P\275OG\245\274O\215\257\274*\336\000\275\306I!\275\2322\023\275t\313\344\274q\301U<x\206\347<\307E\036=\330\335\024=\344\000{\275y\0229\275\315\2436=\206\272\013>6\244I\275\211\342\317\274\276\333\300\275\361(\254=\005q\310:DB\007<\002\273\200=P\n\236\275\351F\255<\210dq;h\177\013\275\306\362\027\275Ds\271=u~\022=\301^\200\275\3577\034=\320\213\312\274\213\254\355\274\377\323p\275Y\362\362\2746\262\027\275\232\201\217\275k\373\221;n\222\272=\006fS=\310\277\221=nI\307<\320\264\215=\016\323\215\272$|\312=&\362_\275\330\000\224\274\345\331\306\274\327\230\304<%#F\274\317\002\313\275\2020[\273\314\231\336\274\016.\003>\026,\275<\004.\300\274\2161\260\274\347ot=\223\023\344;\356\220\017<\'\344\n=&5\025\275\260\350\337<\352o\243=W\r\231\272\230.\321\274\032\177\017<0Z\271\275\312\311b=\275\342\337\274;\3559=8[\253==\020\265\274a\222\345\274W\3744=6M\244=O>d=\260M\200\274\335M\034\275\362h\215\274\245d4=s\3746\275\003\022\267\272\360\205\272;U=\206\274^5\235\275.\356\211\275)\260\361\274\320\372\"\275\034\341H\273\372\256\307\273\302c[<vaZ=\305q\036\276[\013\220\274\342C\311\275J\225V=\203\367a;\246=P=d,L=\214\315f=\3709\302;\004\0347;\215\247,\275\374\320%<\020w\275\275+\265\274\272A\027\013\275\247\315\301\275\2322y=\265w\220\275\3112\270\274i\213s<[\211\006\2762N\303\275\322\\\343<\374HC\275\326\273\232=N\244R=G\355g=\206W)\274,\035\037\275\313\346`=\351\024\n=\245\303g=\325\352\331\275\031\311P<;\222\350\274;\0104=\3523\261\275g\271)=\255\014\363=r\034\035:\366\373\203=\256\276\"\275\013$\275\274\232\251{\275\366\347\236<\361\341\023\276fBS\274\301Y\305=\307\272\221=Po\221\275L\"\330=\361\324\376\274PJ!<\357\210\314<\006\242F=\367dp=\273\353)\275\364\372\354;\262\343\270=J\301\025=\231\334y\274\324\021\260=}\354\237\2752,\025=\203\030(<\356U\375<J\000\"=at\357\2747X\031\275\356,\206<\337 l=Q\343\373;\024\230\374<\311\000L<\r\351*=\206\003\236<K\020V=\352\3241=5\235S=bQ\222\274\325ME<\370C%\275\250\217*=\231}\016>s\277\007\276\227\t\314\274\213O\221=\205\362\n>$Mj\2755\312X=\005\010\031;y\363\034\275[\r\370<C\271\360;\371\324\027>\246F\337\274\305_\366\272;\250\231=\226\037\351=a^\342\274\271\306\325=)\007\016>\253\205R\273\224\314L\275\374\324\035=\227I\304<\362\267\317=\202\034I\275Y\236\366\275\356\233\034\275x\373\230\275gT\246\275\325-\312\274\002\321\354=M\324L=ZR5\273\371\251^\275\347\2658\275\215\241\200;\371\335p\275\'l\236\275\244\016\261\274:0==\301\252\221=E\210\351\274\360\032\255=\021\314\357=,\215V\275\024\243x<\333>:=\220\365P;\2748\363\274\316\273\336=R27\2755\232\265\274\237\022\212\275\256\327\341<n\320\177\274\324\306\365=D\036\272\275\212\351K\2744~\334\275\231\324\273=v\205\356\274\2130\'=\025\367\311\2735~V=\3352\203=\267\226\021=;\227g\275]\021+\275\020L\210=\337K\376<qA_<\370\'w\275i\336\217\275\377N\323=\267\207\014>\257\003\367\275;\274\023\275_:\007\276\324\323\304<\210s\206\275\231\360\2469\320\255f\275\251<\350\273\373|\334;\345|\003<\1771\374\275k\027\276=\376\207\177\274\201WI=\362\030\253=US\342=J\343r<v\315\307<g\274\344<6\326\315<\251\211\016=T\030p=E>\350\274\342\376\327=a\243\252=\236\336B<Iug\274uh\274=o}\000=B\014\202\274\0255\205=e\335\201\274\352(M\273ct\n=\247\256\242\275\232Y\010=\213\177]\275o>\016>?[\200\275\032\231\235;\312\231\177=\223\313\026\275-\017\362\274\235\234\364=\225\322f\275\201\303\361\275\216m[\275\362m\311\275\223\233\003\274~\354\007=\274\034\211=3m\266\275\351S\037\274\241z\213<\006\021=\275v\221\226<F\312h\274\255\253\034=\030tb\275\335\272\024>\346\272Z\275\327=\032\275\352\002\232\274d\200\007\275cD\230\275\"\304\013\275L\003\352\2743\213\317\275\226uP= \342 =-m\231\275\305V\">\327\304\344\275\t>\020\275;\030\024\275L\377+=\253(q\275\000\177G=q\355\260;,\241><\275L\243\275\335~\023\275\375y\222\275#\017\021=\010g\247\275\'{\221=^\203\374<\303\307\213\275\311\256\007;,\252\256=\373kX=\330\325\244\274h\306@=\310\3116\275\365\265c=\376\027\305;\245\244\n=s\327W=\334\226B=X\256V=\237\307\260\275,=n\273\033:\017=X\206\327=\333\010\014\275\311\303\325\273\032ec\275\263F)\274#\267\206\275Ccg\275\370\242\001>\013]M\275=\342,=\360q\033=\001e\301\274b\270\345\274s\342\236\274\317\021\005>\244\330@;K\365\317\275\351\010\016\276\355\006\366=\206\013_=\205,\323\274\r\003\035\275B\001#\275\210\000\372\274k\026\214\275\364:a<q\006U<@\307\226\275\004\3013<N\246g=\332\324]\275\247\264\211=\024^\366\274D\361\203=\237\377\215\275\373l\314\274!o\355\275\245\277\024\275\"%\307=?\335\030\275KB\246\274\315\003\252<\377\243\343<\257\370\367=h=\355\274DR*\275?\304\367\274Fy\327=\020}\245\275\007\3321\273\000.9=\375|P=\233\252=\275\355\305\225\275 \252W<\254\210\234=v\000~=\350\260y\272\225\324\344\274>\350&\273O\003v=\201\273\314\275\"\377\242=\360`\340<\374\356\307\274\244q\256\275\267\370\201:!\003\232=\340\312?=u\215\367;2\260\262\275\217\362A\275ey\310<\336J\014=\222|\253=b\037/\275f@}\275q\325\273\275n\315\362=\227yg<\347\236*=\261=f\274b\375^:\273kT\275\363R\205;\272\216?\275\346\311\223<*\030p<f\262L\275\316\302F\275\357\371\005\275\227\376\323<9\246\320=\304\\\311\275\267\036}=\321w\017\274\026Gy\275\204\373d=n@\322=+\"\343\273\014\"\220=\026?\364=\361\006}=\352^Z;0\271\315=L\022a\275\300\330\224=\322k\204\275=\353\3348\031\340/=\2354\244=\026;\363=\226W\240<L\332\017>B\325\246<nDP={(\230=P\2738\275uo\330\274\336d\223\275i\326\322<8|\014=w?\214\274\315\204\251=\241\322=\275n\362X<\271-}\275\335*5\274\364\244\037;\370A\237<\301x\333=\371\363b\275(\217n<\345n#\275\013&\245<`\033\245\275\2677]\275\016\324\321\274a\321\335\273\3278\277\275\365\204\030\276\371\200\223=8\237\343\274\0220\256\275H\307#=\202JG<W\345\037\275\215\017\003\275\214S\320\274\317\035\353\274\026@\250\275\235\300h:\356;V=\266\350\014\275\205!\242\274}i\260=y\2518\275\206\260\270:\226\262`=\033\243v=\275\216\003>\240\377c\275h\354\\=\375\030\267\275\260\255\302=\027@\271\275\0026\240=\004\273\342\274\256\306\022>\177\222\331\273\010\377;=\201\300==&\263\234\274Q\322\276<Yv\223=5\255\237\273\266\036\305\275&\246\320<\323\355\201=\365k\007\276WA;\274#_\235\275`\202\374=\261\315\354\274\210\276\031\275\346\365Y\275K\224\312\274DA\316<\374w\326=+\233\247\275\316G\223\274\242r\204=\3518\177<\n\301[\274\356\215!\276#Q\003\276\227k\255\274\255\243h<\3167\236\274\013\310<\275\324_#\275!\366\226\275\317-\032=\010>\226\275\210\241\370<\205\234\304=\035C\017=\266\275\025\275\342\315\257<\307\223\025>\252Q\201\274\234\202J=i\234\330\273\002\274\222\275\370h\246<\220\032l\275Sb6<&%\372<\2046p\275Jr\252\275\\\177=\275\340e\217\274\211\326}\275R\302\357<\007\345Q\275E4d=3\034\371\275\217\373\021\275\017L0>N\254\033<\377ii\275\310\240)=L\274\256\274\224?\213\273\341O\267\275\'|\305\275\032Q\002\275v\261\002\274\001\321\230=\364\231a=\021\223\010\276\031\206$\275 \262\033>\177\340\327=2\370\335\274\027\266-\275p)\275\275ZN+<G\217\272\275\324c\027=\375\344\230\274\027\022\216<V\034C=r\0245=\375\'Z\274\006\334\275\275\035\303x=\323$\346\274x\363\352\274\277\346\245:\000\030\024=m\021\"\276\320\224c=\224=G=I\355d\275\351\214e=K~\014=\232:\033=\tx\213<\200\235\274\274b  \274hI\200<X\352\027\275\241J?\275\262s\300<\003#V\275\\\272\372<l\316\n>\376\203\220=H\311\304=6H\216\275AGR\275\244g\262\274(\217w=\320\363T=\026.\357\274\357\374j=L\356c\275S\"\225\275@]\031\273\377\3631\276\306^\220\275\202E\355\274\236\022\311\274\370\367\032\275\375\326q<\206\254[==\336\200\274v\377\222\274\325\343\021\275\212\253\333<\177,7=}]|\273\022/\351:\013\264\304<+\316\260<Jm\217\275\252\327\t=\016\005\252<W\025\335\274\257\260\222<y%\204=O\001\257\275T/+\276\255.\014=}\214)\275\222y\334\274\224\023Q<$`\"=\376K\362\274\262\327\316;\234\242\262<\212\037l\274\024\221i\275\260)\350=5A\267=\236\250:=\t\317\253<zU7=NR\233=b\206\034\275\232n\024\274\320\211#=\023v\336<\226\024\214<\323\000U\275\037\374w\275k\243\201=\350\0270=\216R\211=\233\347\275\275\207l\232\275i\036\014\275\251\223F\273\246j\350</m\266=2u\365<Y\007a<q!v\2753\352\262=\t\3158=\241\212\266\275\250\031h\275*]\t>\035\204\262\275cL\232=\264\367H=CWC\274\242H\254\275\326\240\375<\302H\036\275\274\005f=\273Z\322\275\337\200\227\274#\310\000\275\332\\\024\274CO\316\274\356,D=u\256\315\275\220d\000=\364\343\260=\334K&=o\360\253\275\017\377O=\210\261\201<_\314\302\274\016.D\274Z\342k<=\375a\274>\013\240\275\21374<\255\302L\275\241ah;/\212\323\2750\365\375;\356\000\252\275\'\\\310\275\264*\235\274\003\261\274\275}=\036=\267\276\361<\033T\033\276\002\001\217\275\352\230\301;\006\254\226<A\311D=\235\364\305=\217\211\354=\351\345~;@%\t\275\303\303\227=`\244\237=\003\030\261=\024:\r=S\224\266\274\345\250.>%3\201\273\016\251{\274\246\324\306<\014E\025;.E\223\274\327n#\274\227\257\203\275n\222\347=\312AF=\332)o<f\225L\275|\275\301\275wH>=\375\277H=\032\273J\273\230\377\205=\320\271e=w\353B\275(\313\243\275\252\255(=\251\272\303\274\007\302\177=\334\001R\275-\254f\2742\204\354<W\235\212=\3429Z;*\274L\275\303\260l\275M|\316<kD%\275\014\233\262=\020\223r\274\212\206\231=~\311\206\275/\233\034\276\tY\004\276d@\376=\026\243\265<\000\350S\274\224S\353\274\0342^=\312\371\225\275u\203\276<uab\274\rc\302:\034B\263=\307D\212\275\252\216J=\276\032\355\274\251\304\310=\370Q\021\275\245\244\222\274x\010\246\274+\317&\275,\217\302=r\017\201\275&$\243\273\354\010\232\274\241\034\253\273\277\202Y\275\373T\007\275\205<a<8\254\234;\255?\361\275\214\264M\2757d\004=(\244\251\275\370\223\';\326\272\214:lG\035\276\006\030^=\330Eb=\025~\214\275\276\230K\275L(\373;\030|\346=\357\322\350\275\273a\261<\303\344r=\345|O\276$\254\213=\203\025\203\275?\374i\275g\353\177\273\034\351z\274d\204\332\274\014\351,\275\262k<\275`\244\211;\273%\300:\232\024P\275\266\340?\274\350{x=Z\"\177\2754\2511\274\020\377\265\274\3118\006\273$\245\251=\276}\335=L\344\204\275\256\253\301<\222\363\224<\340\252\244\275\223F\341\275\207\331\232\274EF\261\274\2324\242=\236\265Y\275\310\335d\275\2341Z\272y\370\350=\374\331\370:\032\033\333<2\324\t=4\225\242=\323\246\351<f\302M=\366\307\312\274j \300\275f6;==[r=!\252\273=\261N\341\275u\313\235\274\350\\\023=\316\333\305\275\210\337.= \202\351\274k\350\020<\375#^=\177\273\256;\314\200X\275\022?\313\273\001\303>\275?\231\245=\261L\036=\t\"\214=\013#\231<\240o\316\275%$\270\2748\021\271\275\3314\004\275\222\371\035\275\263\273X\275Q\203\222=\0245j\275\307fP<!\341Z\275\345\231\250=J\031\244\275xe1=|\311?=hCi\275\265>2=\007\264\372<\234\025s=\032\206\207\274Z\354\333<U\\_=fD(\275\0315\375\274!Us\274$\317>=j\030\305\272\030-W=\26106\275\262\006\014==\217;=\017zC\275\014R\365\274\222\ts\275g\336\305;\335\320\326\275\327zb=\212K\367\274\354[\271<\343\205G\275\362\373\364<\340\001_\275K\346\370<\037\347{\275#HU\274\200\277\377<\326\253 =\276\343c\275\251\006(<\0036\036\275c\216\362<*\007\211\275\300b\326=7A\374=\230\212\004\276\347\363i=aN\217\274\347\377\377=p4\222;\243-*=e\207\276\275\302\237\001=\004\307P\275\333+\305=fH\003\276\255D\223\275wa\027=\215$S\275PCU\275S3\n<2\316\364\275FC&\273\351\006<>\200\013:\275\3756\242\275\201\345E\273\177\020\240;V\007\332=\244<\210\275;?\334<i1\253\274\022]\020>\265\t <\372\215\271\274\017I\220\275\234\242\221\273\235\3002\2757\345\321\275\354\366\330;Qt;\275\3004\344<\341\036\021\276C\324\243\274\275*A=\371\323\253\274\233\345#\2766\262\200<\251\373\223\275\025EY<\264\177\007\276>\020d5v7C\275CD\333<1\247\331\275\267>/\274w\343h\275i\312I\275\005\031\256<Jx|<\351\367\030\275\274r\226=\222\243F=\006gn=\225\276\025\275\343\267\021<lJ\226=\207\364\010\275\227\274\344\275\177C\272<e,O\272\321\336\007\276\2054\213\275,\007\177=\371\377\357;\232\004#=\252\322\352<\276%S<d\354\252<L\347g\275t+8\275\272\327J\275\t\026\247=\367\002y\274\241=R;\304\210<=\325*\235=\252\247B\275\030\237\023\276+\335a=\234\203P=<(\247\275m\177\003=\355\362G\275\005J\034\273\270\334\223=\027Cz<\033\035\222=\275\352>=\325\227W\273s\213\374\275\345\017\250=.\207\257\2749\341\315<M]\367=\370\324\360=\271u\256\275\254\314\354=0\255\310=\351>\235<\357.&\274\035Z\206=~\r\230\275l\333\273\275\336\364\034\274\255\244\224=\273v\274=\270\2262=o\321\357<\352\242\r=m\357\224\275\304\217\365\271\226~n\273\234[!\274\013\037a= \360\005\273P\312\373< W!\272fD\005\275\331;\227\273 \233\201\275\226j\304=\217\223\214=\356\014\351\274\257v\354<\027\007\304\275\242\260\323;\346\250\234=\354\235\n<\254\371N\275}d\213\274b\245\202\274\377ex\274\252E\233\274\035\002\205\274\245\216\233=o5\000\276n\271\">\326Z\245;\231\236\321\273\030\221@=@dH=+V\325=w\n\340=\022\024\330\275\206\320\303\274\021Q\255=\230\311\302<\370qI=Je\247\274\350\217\027=\202\230\002<4H\232\275\333I\314<S\364\206;\016\036\252;\357\263\344\275a\306t<;31=A\340\370\275eG_<\2632\302\275\325\261\240\274\315\220\205\272\365\277k=%\037\220<3\224\343\275@\231x\275\016\271\306<>\341\272\275/s\323\274\221\206\225<*\311G=\005\214Z;S\014\200<\300!\246<,:\364;,\r\335\274(b\212=\376\232;\2731&\216=\221\327\320<v\325s=\030\254\313=\026h \275\010\224\260=d\272\231;N\030\222<\304\020\005<L\006\004=9S\230\275\266\007\307\274\037p\037\275\035a\244=\204\014\311=\256J\014\274\207\313\026=\266\313\270\275{\312\301<\016\342\000=\244]\216\275\252!\343\275\221~\375\274\221\241\263;jt\231\274t~a=\202\277\220\275R\364\356\274D\2033=\025\326\205\274e\325\305\272g\227\016>z\033\213\275\205\013\007=\037\2128:\235\253\021< 95=\024\262c\273\371%\226\274{\315\244\275\215\277\367;\022\330\257\274\271\353\243<(r\355\274\276\373z=\243\016\003>[\254\371\275>\001\245<\235T\007=j\236:\275\337\362\366=\0319{\275\3024\251\267pk\315=\254\315\032=7\277\001\274&\031\320<6FK<i\271\030\275\213y\343\275\304L_\275\r\202\331\275\207\372\326<\020\006\236\275\027\271e\274@\215$=K\226\025=\305>\004\276P\341\025<\307\036\306;x\004E\276Z\273\241<\232+\221=4\257\237;LR\006\275x\016&\274v\004\271\275\203j\263\275\033L\007\275+\240\221<\031Y_\274\034Ql\275\033S\344=M0k\274\352\022\312=\342J\301<\021\317\262;\2669\312=T\354/=W\034\250\274\327\022\007=Q\204\302=\211Eu=\340\316r=\003\271\300\274\001\351\223\274\267\307T\275\236[q=\301\3138\275m\021\346\275\322V~\275%\t\301\274dw\202\275\327\277U<\316`\204\274\0179\007=6\013/<\231\277\303<I\331\322<\375\334\361<\356\377\245=w\004|=\036\247\273;\003\206\276<\317\304\202\275\352N \275\322\353\n\274\t\341\226=l/\210=\343K\034\274\301\311\037\273x\356\325<\332\261\226\275 \'\274\274sx\3669#\360\022>S\177\342\274\3327H\275Y\307\200=\301\347\227<dU\016=\272\365\204;\371g\250<\205\367\t=@\220\224\275\2432Q\275\226\024\377\275L\017\025\274]nt\275\214H\001\275\314\326\302\274\204\255\264\275\372\270\353<\230\242\t\275\242\255\003\276\353\237\235=\321\226\327\274\311\236\261\2753\004\223=\231G\317=\361\234\t>\020)m=\373\326\314=\036\017\200=\243m\311\275c1\032=*\352\354=\212\027>=n\272\335=\3642\335<\325\251\241\275\277`,\275>\004\013\275\266WG\275fa?=}m\346<E,\224=Hk/\275\253a\277=\014\032I=4\275K\275\366\r:=4\336\315\275\031p\270\274\232\266\275\275\231\032\274<\252\007F=I\243\263<\001\316e=\305\234\205=`\345\017\2753*l\273\361\327\000>6;\320\275\272\3328=\343\257\246\275\211\274\234\275e\237j=P\202E=T\231\301=\210}6=\264\347\214=\305y\203\274d\275\213\273w\347Q=\000\237\246=C\224\273<F\260\371\272kB\024>!X\'=+\256\261=\271\214\346\275a\003B\275\311,\212;\345\317\253\274\323,k<O\211E<\336lm\275\323\325<=\215U\220=mZ\305<g\005\016<2\325z\275f\371\325\275h\005\215\274\342@\351\273\315\272D\274\2729\247=\005\217\253<\224$\026=`\317J=\322\234i\275\241\200\016=\354i\301\275\2650\333=b\210\264\275\235N\376<v\264\250=\362\223\237=u\231\325\274\206\237M\275}vn\275WoI=\313\206\003\273=S\237\273S\306\275\275\355\034m\274:\313\207<=\343?\275r\344\006\275sc\302\274\236/\207=\310\332\240=\354\302\212\275\362\2228=\352\220\251\274:\263\325=0\304\261\275\350Q\026\275\303\317\331=N\332\322<N\013j=#\206*\275V\034\374\274\302xO\274\235\371\212=\234\363\311\273\314\343\271=\272\340\000=TV@=\270\203\031\274^\327\266=\252\203\252<\322)T\275\260\331!\274\263\254\341<\271\210A\275?v\341\274\267\203\333\274;\361\360=\014\264\205\274!\277\241\274\262\r\210=\346b\203\274L\023\222<\205\264}\275go,=\\1(\274;\367\264=\327o\262\275\271\201?\273\307\025o\275\231\352{=\336\326R\275p\213Y=\355\272p=I]\014\275\2105\220=\230q\001\2760\311\321;}\016\342\274\036=\240\275\375r\262\274f*\004<\034XL=k\264\032=O6\337=cP\004\273\270\337\307\274\362\325\314;+\255\210=\341\026\177\275\266\233\000\275\373Y\230\275w\225\360<?\321\245\273\3218\257=\274\336\240\275\022\r\212<\351g\007\276\224F\251\275\231Em\273\263\322\305=}\013\250==l\222=\260dh\274M\005*\275\002O\315=F\355\260=\232\036-=;(\204=7\300\273=d\017\273:\326\223l\275\005\334\220\275\341\247M=\r\032\001>v\362\233<\261F\014\275\023\206\262:_\224\213\274\375\242\301=2`\025\275\350\343\355\275\016\305\002\274\037>\221\275\213>\025<\210\016 >\246\024Y=$t\304<h+\216\275u\341\223=c+\037=\337\217\377=\251\252!=\361n\024=&\000\004<\276\351M=\305\032\r\274\257\242c:\277A%>\377\235\237\274\027\3717\275\024\362G=\301v\240\274\375\370\334=\n3\365=\277).\274`5]=D\336P=\243\n{;;\003\325\275a\327\034>\025j]\275\037$\013>\352\\\\\274\300\304\335=\010T\253<\312\207H;\310\373\352=S\355\013\274\347-l<A\344\215\2753\310\234\275\205\3032;\310\273\035\275\237\005\203=>q\240\275B\342T=\267\032c=Uy\016=ZD}=\336\316\210\275^\324!\276\342\327\177<\'\362\310<Pkv\2757\032Q\273\246\335\032=UP\023=\276&T=\230T)\275e\340\204;\000S\002\275\3603\211\275\345\250\224<\312\265\016;vK\020\275\371\n\211=\032\324I\275\0338\332=v\202\216=\301\320~=0\010\330=\344\377w\274n,\261=\r\034(=\240u\265=|\252x<\360\020y<A\014B=\311e\034=q\336\216\275*\200\014\275\357|Z\275=8\r=^\300)\275\320\252\016\274\033\337\030<\345\024r=\221Y\017\275\352E\375\274##\232\275\000I\301<\337\354\224=/4\271\275\273t^\275\352y\357\274D`J\275\275\207G\274;\006\234=u\003\024\274uI\352\273\342N\366\275\033uq\275\271,\217<X\017.\275K\265\244=\nd\202\275\376PC=\277\235\000\275\366\354==\211_\330=0\256\013<\237X\200=Y\313\213\275\3210&>\027n\035\275\017\'%\275\260\245h<\314LR\274;\2407=\366\202\347<\216\202J\275\333\204^\274\237\251\314\275\266\316\031>]\235\235\274\305\003\372\274\302\177\307<^\275\010=\177\242\363=?\353\001=\343\357\233=m\260\356<n\264\221=\222k\340;\240q\223=\265X\250\274\327\013\201\274\225$C=\252\004\031=J+\177\275.E\255=B\362\021=w5\267=f(\000\275lJ\363\274\344G\033=g\251\320;\273\371\267\274\374\001E\275\357\256\252=\360R\330<\205\347\377<V\202\037\275\300\305\212<~\337\244=<\231\031\275\370\236\243=l\241\303\274l\345\346\273\225Y\243\274\334M!\273\362\206\246<\024\250M\275\273c\013=\235\201x=?\317\351<5S\022=3\310\243\275\274\326@=\363\021\001=\240\353I=A\301\340\274$\361\272=\316\276\366\274\022\252(=BD\377=]\316\215\275Z\200\207:\235\222\233\273c\006\234=21\250=\351T\237\275\035\256i\275\343\347\217\275A\026\244=\257G\2278\3767\274=\030\226\307\275\334\237\260=L\317J=\266]\240\275\211e\340\274\177\3054=\250R\345<\020\324\361<G@b\275\"\246\273<\356\217\221=\363D\343\275_IB=1\355\220=u\233\000\275|\006S\275\343H\323=X\263>\275x\211\362<\311\225l\275\003\031\240=\213\362\243\275\305\334\033\276\330<.\274\375\260[=J=\327\274\323\201\314=\352\232(=\377\020*=X\244\303<W\036L\275\360\3300\275\353\321\237=\255`\331\275\027\233\274\274v@\033=\nT\004>\255\204\360<\314L\027\274\312\321\236<\226\377e<`)\301\275\365P\004=\232C\010=\312\222\214=\010\377z\275P\2526=\374\351\362<a~\314=!f_=\205+4\275\003|\035>\350\"\004>\2308\340\274\370g\274<!\030_\275S\014}=\215+o\276|\204\202=p\366Y=\031\201\210\275\2552\";`\035 <\023\233\016\2769\227\'=\253tN\274\020M\243=\276#i<\375\356\314<\255\375\245=\230\325\230\275h\370l\274\205\212\235\272*\323E\275\203\307e\274\007\014\301\275|{\000\275\334\317\307=\254^\360\273\326\302\207\2750\323\200<\332<\224;\240I%\275\327\355\034\275Q\217\021=\326\205\265=\275\345\356<\225\246,\27591C\275\344\204e\275\003\032Z\275d\306\370<\3569{=\367\275\006>\351\005\272\275ir\261\274\010\301\026=}\213(\276\2068\231<M\004b\275\244\236}\273\325\266g=\204\371t=\362\276\223\274\240Y\212=\375\370\307\274\013\350\276\274\366w\245=ZN\247<;\327\231=U\322Q\274R\312]\275)\r#=\356\303k=\212\200\026\274`r$<\305Ct\274\314#Y=\217c\006\272\224\025O;Vk\023<k\251\364\273\302\311\001>-\363\216<\002\000\365\275\233\271!<Y\352\326\275N\357\235=\341\325x\275O\002>\272\003\003\307\275\246+\362\274\240\347\237=\340\025*=;\264\220\274kPi=\316\002\373\272\374U\317=\243\252G\275\266\023\273\275\227\356\257=b\005z\274?\0063=\252\034V\2749\330L\274\353:P\275\r\006\261<\002t^\275mi2=\244\203\343\275\253\332\265\275\254\337\230\273\207\367 >\256U\001\275\275\010\034\275\036\223\264\275\346\367\252\275\241Mp\274\207y~=4\037\265\274\351[}\274d*\227=Gt\245\274\2760\004\275\357\337\250\274\2676\216=^\275\312\275\177\025\205\275\337\213\352<\326\310\207:\322/[=\361\231&\2755>\247=\214]\313\274y\006\364<\2765\264\274\271\'\233<\222\265\375<\364w\026>\363\364\003=\"\340\360<\376r\205<\ra\207=\304t\261\275x\006\342=\035\037\345\274d\204s=\225W\027\274\024\214\221\273\224#\306<x\036\370\274\212\026\t\273\034}\325\275^\245\364=\232\372F=6f\034\275A\324\273=\343+\005=\366\337\245<\013\204\216\275V\247\211\275\021!\016>\206\236T\275\347\352!<\016\267\201=\257\310\346\274\247z\261<*/O=\262\361\244\275\256\332\\<\361\003)=\253um=\316\0249\275^\030#<\350A\242<\273\212\253\275\033\326\272\2756\324\311<\364\252\274=eo\273<\021\374\237\274\352\251`\274\026\220\343<t\335\333\275\3619\213=\276\250\333=\221\026\313\273P\252\362<\345^\t=\341C\334\275\034,s<\223x7=:\207\223\275\376s\t=\205\355\177\275\2339\214=\240\264\004\276\016\300\303\275R\240\324<w>\004=;\340\341;\350\367\241<\210\320\207=\315\037\032;^\366m<\000u\315\275n\377.\276p\215\220=V\036\021=\304\232\255=u\302\343\273\251\225\020=\250Ai=v\275\n>\177\035\257<\301@\000=?\240;<\"\335\223\274\367\t\317=\271.\250=\376\313W=\362\003\346\274\337\263\003=\026Y\000=\262\037a\2751@Y=\266\343\212\275\321&\006=L\217\276;)\276\'\275\211C\271=\232\207\322<\"\2036\275L.\003>\260\022G=\250\350\356<\345\270\326<\336\301\254\274\224\326\304=l\335\325\2733\255\301=\255\372\203=o\006\240\274\231\3350<\256\311\255\271\324\212,\274\356\177\215<\204\313f\275\203\363\353=\245K\t\275\203\314\264;\253\212,<\240\307\021\275\250,\233\275\"\324\353\273\217\360\250<R\251)\275\366\203\007\275\t\262\202\274\340\351>>\325\370\200<,\021\342\274H\264\034\274u\216\007\2753\355\242\275f\222 \275q\010m<?\037r\275I\\X;L\323\207\275\2156\320<Mz|<J\374\'\274|]%=\372\306 \276\024\335\210\275\t#\017\275\242\'\227\274\361\251)<V\001\200<^\341\244\2745\022\332<Q\230\255\275\t\300C\276b\rg\275\340\'R< \235\220=~Y\313<1\373\205=\263\323O=\213\024j<\342s\021=\236\014\005\275\263\212%\274\026T\023\274\304\014\035=\274^\026=\340@\340\273\013\022-=\244\377\273\275\216\033\245=\035\322\267=\344#\216\275\314@\021\275\246J\343\275\332\234_\275f\242\n=\020\313\223<\303\304\r=\250rz=[\ni\275\t\226\245\275\222\201\314\274A\234\020=\352\\\177=\257\264\206<\025\355A=7\000\311=\257R\345\274\267U\264=\'e\331\275}\365\200<e&\014\275r\256\360\273\262F{\274\377\255\032\275?;\252\2748\363\254=\t\300}=k\363\n\275\213\377\007\274j\205\262=Da\007>\312\026d=5\0028=U\327\254\275r\345s\275\262r\240=\336\333p=\215\206\346=\032-Z=NE\212=\315\315\260\275\235\013\037\274$W)\274?\307\243=`1\"=z\227\315\2754 \013\275\317EB<\251\347\317:\267j\006\276\232\375\341<\354\234#\276f\254\251\275\313\347Y\275i\002\254=Lb\254;G6\254\275_>\331\274\2479\202\273v\332\327=\202\307\320=\031\332\351\274\rV\242<\256\354\203=\227\3070=\311\250R\275\227\371%\275\302\202}=\307\324!\275\322x\260\273\336\322\007=\243_\342<\020\264\213=.\211\361=\241Z\254=\316qM<\022FV\274\215\020\025=?z\312<\306\341\247=\351\036\"<XLY\275\350G\320=<\361\371\274\225\352\013\275\\(\224<pc\316<G\022\264<l\020\373<\'\237N=\31526\275\317wN\275\343*7=\344\333\245\275\234\245\360\275\355\036\257=\267\367\227=\003<\262\273\032Kz=\343\316\307\275M\341&\276\321\227\010\274\301ZT<\214\036\210= \255\370\274Oo\341\275\3465}\275k6\346<\324e\235<\316\037\211=o\212\342\274f\341\203=b\017\321\272a\021\366\273\244i\003=\036\324\201\275\264[<<4\326\360=\276Q\224\275\031\025\002=\351\'{>\331\331\263=Y\333~=e\352\352\274\2564z\275\273\031\245=\347\010t\275eL\234=\332\350\231\275\344\364\354<M(\211\275\207~9=2\306\235\275\223\247\322<\301\025\246=\354\225\354=\213\032\214\274$\022t\273\370\321\313\274\r{\036=\370\006\355=2\262\275=F\362\000>X\306\266=*\325_=u@\250=+\241\366\2758\361\267=\272\250\325=\362\010\364\274G\010\024\2731\364{<G$%=\0108\234\275\001A\301\275\311F\247=\213qm\275\3665==U\312\\\275\3505\207\2758\3071>\333d\333<@\021%=2\362\357\273yb}\275\321b\302;\376\320\272=\311_\355=\320r\365\273\017\250\036\2750\"\034=\3437\237=T\226\\\274O\337\330=(\216\244=\017\267\001\276\374\275\244<\224WD\275\204\266\202\274\253\271\274;F\354O\275\340\351G\275\216_\327\275/\235>=\306%~\274^\263!\2753\336c=\257-\306;Ie\023\274\373\321\037=\026\342u\275\275T\315<\221\025\346\275\"(\240\275\002H\211<\266(\\<\275o\245\275\357\031H=\n\324\316;\204\304\t>\327\340\002\276\246^\244\275\241\247\254\275\034\303\235=S\337\223\274\177\017>\275\n\030\026>\340&\240\273\222\366\376<\276\305\035\275\'-u=\210\234\007\275\312\0332\275JM\'\273\367\034\005=\335!\210=\0267$\273\207,\277=\014Z\271=\304\022\271\274g\317\217\274\327n\256<\302\230\240=\024\3510\273\r\006\261\275u\234h\275\\\226R\274H\267_=O\347I:\023\344\255\271\"\214\235\275\371\271\025\275%\215Q\275\277\020\230\274\237\242T\273QZ\235\275\265\277\266<4\211\333\275\005\361\013>Z\225\214<\306\007\022\275ua\213=m\257|\274\256/\027=W\257M=E\215\204\275q#\005=\020\014$=P\022\367=\246\024\257\274V\252i\274&&\324\274\312|)=\245\312\\=\032\014\234=\037\031\201\274\322\031\350<I\246T=8\001\331\274\224\304\220=.,D\275(\034Q=X\236\335\2743O\n>[\334\005>f\367b\2754\210\021=-P\226=5^]=\314jO\275\343Z\364\274\334\333\274=\350\242.\275e\320>\275\t\231>\275M\345\007\275e\"\271<\221\353(=\333\313\001\275\323Th;\027bH=\377\317\310\274\246\246N\275I \207\273\356\017\335\272\200@\334\273\341\024\000=\003\345@=\330\364\274<\310\201\300:\201\201~\275\377j~=\331U!=rk\344=<qK=;\3413\273\2232\231=S\256\331\274\314\033\326<\347\216\233<\034\347 =\356\204\026\275\336\363\322=\'\006(=\353^\342<\325\245\221\275\036\264\245<\317\215\323<jb\321=n\354\220\275\315n\250\275\260\340\221\275h\251\343\274<\204\227<\243eW\275\264[\020\275\345\303\241\273c\000\201\2742\255\220=\0132\316\274\312\340\000=\366r\037=\'\271\365\275\036?\252\275\352J\017\275\035\tF\275F|Y\272\035da\275\344\266i\275\304\321\370\272-\017\257=6\007*\274:h\\=c\242\024=\244\2312<&8\301\274/\207\375=\335=\303=;\343\273\274@N\200\275\204\210\244\275\325\246\315=Rrc\275)%\370\272g^\244<\240q.\275\003\374\037\274sl\'\275\364\212T=\023\232,=N\300$=_\2656=\037-\002=f\n\021=\213\263?\271\374\231\024\274\246\303R\275$\303J\275\333(\227\275\225\202\364\272\227\205)<\350\330q\274\350\323D=\201\025\'\275\036h\201<\306\030\247\275\0341\020\275\245tR<\363\026\210\275;_\320=\245\323J<\025\235v\275\274\211\222\275\242\327f\275Bv\366\274`\036\313\274\236\372\356<\3574\233\275\372\371\371\275=\265\274=\357\r\202\275Gk\265\275N)Y=g\367\021\276\263\326\354\274f~r=\256p\267\275\215\222\364=d\3036\275;$\036=i\341\037=\240:\273;\372\264d\274p\032\246=4\334\232\275u\323g\275\311S\206\275G\232S\274\265\202\3238~\264b\275?\353\316\275$\203z\274S,\315=\240\362\266=\036\271E\275\034\374\266\275r`\352;C\364\226<r\246\220\274]\225\207=\377\300\006>\314p\264\273\004n\n=\226d\021=s\'\305\274\332\216\241=\362{q\275k\334\010\276T\313\301<#\036\307<\246\270@\275\221\200\202\275\360\304j=lo_=\304\205\255=\361\341\014\275P\356\312=[\226$=\236\301{\274\305\355\004\275X\227\321\274\340O{=u\301\332\275F\256\361<l\342\253=\036d\255=k\000\030>\355\235\022\274L0\304\274D_9=\3774\207=k\253\360<]g-=.[Y\274.\013\033\276\'\320\017\274\376\tV\274\377 \310\274\340WG\275a/\031=\310\2629=#\370\244=\023\035\347=\265\323\241=W\245\335\274EA5=d\033\014\274\177\031\232=\000\206u\275!\307s\274\327\\\022=xHb\275<\005\005\276l\227w\275\t\221s=*D\261\275\314\303j\274?\311\260\275\370\373\020\275\372\356\030=\341\350\265\274U6/\275\203\313\205\275\204\314\365\274\224j\237\275\223\230F=/V]\275\236H2\274\245\277\271<\2705\205\275\215*5=\252\027\206\273\253~A\275\245\236\037\275\244Yf\275\237\226\017=\231\327\232\275\207\231{<jn\201=k\021\263=m\211\005=\321\332\211\275p\227~\275\346\211\252\274X\000Z\275\274\014\304\274\t.\243<\254\300\304<dQ\340<\215\256\240=\354;\316\274\020O\306\275\230\242e\275\271\013\225\274\225\004\204<\2545\010=\244+\370:\006\335\005\274\373l>\275\255\314\314\274\3745x<\357\374\200\274\330$\257;QJ\270<\234Y\270\274\025\341\343=\370\220\214=\253\\\360\274\236\241\344<\356+8\274-\000\370;\343\370\347\274tS\217=\305\270\246<\272g\273=t\226\347\275\220\355y=#\355\300=\201\363\027=0m\235\275\252\227\\\274\375\354\216=\372Y\226=F3Q=q\265H\275\202\310t\274$\337\n\276=y\212<i$\336\274\024\322#\273\211\260\257\2743\252\002\275\326\246I\273\031\312\273=\006[&= \025P\275\031\273\257\275\300\263\325=\233-\277;g\2604<%\210\200=\203G\224\275\314\\\014=\211\361\262=\257\232R=}\326\266<I\225\212=OA\032\2759\253\032\276I\333\001<\222\000\026<qI\223=\037>\026\275\375\323\337=\016\202\302\275\316\342Q\274\0304\226=]`\233\275\342,\252\274\342\247\237<^-\235\275\022{\253\273\253\375U=\346\013\247<\177\030\321<\004\357\014<]=\370=\222`\371\274\351\236\225\275\314\n=\275\270\264Z\275\307\305\035\276|z\255;\233\300\215<g\r\024=i\026\251\2751>\233<\236\245\262\275\007\272\346=\\v\n\274\030\023<=\333\250\007=\272\321P\272;\324\245;.T\235\275\336b\030<r\234K:\341\177\211\275\335K\244\273\'\240\242\275\005\304\346=\301\034\252\275\230\'\202<\301_\214=|H<\275B\335\371=\225ca=~:!=,F-=\247Nd<0\373\317\275[\367\006\276\366I\236=}R\230= t\227\275\343=\251\275\233\232\033=\r\350P\274\"@f\275\227\306*=\245aT\274i\303\245\274\231\257\3265\262W\033\27493\005\274B\223\021>O\313\350=\2406\332<\327\024I\274\312P\256\275!q\361\273Z\336?=w\3172\275\326 \274=\003\3001>!\331\005\275\250\346V=\354\356\221=#Y\355=\330L\217\275\372;2=\360\316r<\031e\036;fN\202\275\262\313\345\275+\234\350<\231*\265\275\020\214\277<QM\330<\017\036\371<\217}\021\275x\271==\031x&\275U_\026=\333\033\217\275\256J\n<\253[M\275N\036\001>\362\204a\275\005\372\024\275\322\217\0069\035VQ=<X\271\274\243\374\235=B\353\203\274\220M\267\274\014\301\242:\367\334\000=mvE=\002\375\312<\262\267\335\274\342\003\241=8o\233\275\224\275\006\276\323T\251\275\3438\323=\023-\336\275\2671\215=[\355[=P\031\201\275j\361\261=\313\202\001\274\364J\302=\275O\223;>\364\246\274 \323\216=\005\367\n\275?2\002\275B\022U\274\234\236\311=\227l\302=^\276\225=<\327\267=,\304q\274\tf\033>\321cX=HS\206\275DW\023<\237u\010\275\274\235\274\274\345d\237=\005b\244<8\353:>\304\325`\275P\313C\275R\257\300=\373I\334<\204Y%\275t\357(;}\366\210=Jy\202\275LT\t\275w\002\367\275\020\207\257\275\242\2337=\017\366N\275_\006\353\275s_\365\275e\257V\275\231\002?=6\306\371=\363\357\202\274\\\027\347;\351`)=\226\343\224\275I\0016\275\240\361\270=N7\341\273\327{\227\275\373\345U=A\265n=\243x\003\276Q\013\252\275|\367\344\275\225if\275\220\270\014=D\340\231\275}\210\036\274\177m\250<\203\340\034\2749,j=\005tA=\236A9=\364#a\275H\237{\274\343\005\274\273-\330\226=_n\212\275$Z\206\275\255\"!\275t4\301\275S\376\004\276\353\t\204\275(\346H\275\325|\337;\365\231\313;\377!\034\275\330\036\316<^\330 <\246aS\275\277\014\332\274\022\250\210\275Mm\345<\305\336$\275m\355\026<\347\277\354=lM\236=\212N\341\274\005\313\257=\204\3639\274\237Gr=\247\211\207\275\343D\247=\246\001\265<\035\206\210\275\320q?\2721x\256;\020\371!=\n*\024\276\265k\355;\362\272\261\274a\364 =\350\355\241=[\312D<i\022\266\274\205\340\212=\036\222\220\275\3267\307=\267\350\010\276\177\260<\271||\330\273\001ad\274\341K\353=q\245\223=\2373\254;\033fq\275q\316\237<\362\346\241=\tB\235\2747\'\256\274\0147g\275qX\226\274\025\326M=\032\207\236=\331}\025>q\\\362<\277Vh\275\026\226\336=\277\356[\275\000(\233\273\272\272d<%\266O<H(\016<\354\344\010:\004\0312=\345P\025>b\266\314\275k\241\357<t\347_<\321pA\275\350^c=\307\342\207\274\261c\000\275,\363\227\274\325\352\254\275e\320\211\274\030\037\223=s\343\024\274\366\253\366\274P\350\232\275\013\030z\273H\317\271\275\336\234@=9\200\227=\3400&\274\240\020\260\275\200\361\2549\363\346s\275T\335\343\273H\350\270=\026\344\236\273)(\201\275\345AX=\251\321\347\274\340\276\247<\364\201\205\275\371\350\213\275\014\014\322\274\t\031}<P\3552=36o\272\374\022\220\275:\377v=*\337\351<er\367=\001\300\375;\237(!=\347\202\226=\211\245\206\275\325\241\320=qO\354<\267<;=\326\205\216\275:\314\030\275\343\346k;p&i\275\006},\275\032\005>\275x\211\204;%\376`\274\272\274\365\2740B\302;\026\024\221\274\362\310\333=\377; =\366\365\027\274\'\355\031=G\035\346\272\254\'C<\331\035\341\274t\333[\275\270t\302<$\232b=\232`\344=\033rv\274?.I<%f\202\275\370B\217\275lD\322\274\3674@\274X\331\003\276\205\\\003\275\025PS\275FZ\005\273\340\323\330\275\225\207#:\021-\272<\305-\362\274{[J\2751\'\246\275\013\215\230=\361\2405=\347>\251=\007\207\003\275r\363S\275\276\250(>f\373\364<\356\372\346;\267\307\220\274\362\"\356=\346\266\301=\3536\315\274\020\3763=!HP\275\266d\322\274x\351\246<\006\024\246=.\342\\<\302\000b=\353\221O\275\265\350\333\275@\315\025\273\n#\304\274\267\321\000\273\021\212R=\276\242\276\274`\023\226\275\010\373\307\274$8\325\274j\367\'\275JT\243\274\271\350#>\316\234\235\275\313#\027\274\351\304\365=wM\017\275\217E\224<\354\340\275<f\021\315<\013n\247:\301i\336\275\030\010\215\275\345N\226\275h$\022\275^\302\031>|\366\241\274(+p\274dh/=\3333s=Qk;<h0\223\274 \321\300<\272\241\004\273[\317I=5(\014=\232}\247\275-O?\274_\207\235\275\305k1\275\323# \274_kz\275\2215U\275\r\256\306\275\344\204\220\275\235\023?<\216E\267\275\306\364\241\275S\3056\273\271\205N\275\344\001\351\275i\324C\274,\374\010\271\033\306\342;\260\357\206\275^\311\223\272u\032\035=\330d\021=\325\265\200=\325\022\307\274\335\000`\274\2268\355\274\026 /\275\232\002\r<\346\333\017<\312\2528=;$<\272<\201\034\276\331\3443\273R\310\220=f\374\266<@\'w\274\246\353&<\r\311\003=\001\206\224<\346\2414=]\330,=]K\213=\210X\010\275\0361 =\245<\007=\374\250\205\275\007I \2753\203=;j\t\366;\027\330\236<\327\375\023\275n\322\220;S>\277\274\326]\262\271\216\241\362\274\362y\302<^\013B=t\217\001=\363m\257\274\270\350.<)T;\275Q\034\226;8\336$\275N,\204\274\245\021>=\201b\264<\211<-\274\255{>\275\264\005\253=\016\344,\276\361H\235=.e\013=\267\342\271=M\362/=\006D?=ek\214<\335\005\373<8*\321=\303\273\211=]\276\210=`\344Y\275\275w\242\2734\351_<\276\315\026\276J\t?\275\336\374\262=\214\240\025>\313J\036>a]\351=\376\014R\275Vj\177\275\314\265\r\274e\233?\275\326r?=\217IU\275\300\251\302=\004\251\002<*\t\210=W\363\310;\270i\334;K\021\t=\337\177K=C:\037\275Q\010$=^\246\243\274\025%%=:\315\021\275\257\247\241\274\254S.\274\213N?>\222=\303\274\326h\335\274\275\004\210\275\314\3718=$\337\324\275\364NQ\275\3511\262=\177iY=<\\&\2755g.\275\340\264\276\275\023\222\016\275\201o\341\2717\310P<{\243\216<\020\027\023\275=\370*\275-2\222=&\222s<\251\373Z\275,l\010\275\005\305\234\275\250P@:M\255F=\264\312\272=\226\372\235\275D\031\336=\030H\200\275\t\353\277; \024\353\275\300\230\302=\022\357E;\214\256h<\t\036 \276J\377\010>\2363\325\274x\307\264=\244y\340<\177\234\343<\267d\253\275\266_\352=n\371\220\275\332C\337;\246V8=\014X\003\275l\223\235\275\277U\301=\345@\221\275\376T\312\272\340\020\245=8\337S=h\246\273\274\320\354{<\216 \001\275\327{o<\3413k=\3458\232\273\223KI<\202\230h\275\345Z\347\275\275Q\344<\351z\025<9\313W\274TrF<_\231\221=\345\027X\274\030X\213=\014]\212<\334\031\203\275\346\357\202=.\025\240\275\034\017\206\275U\316\2529k\313h>\352Y9=\333y\334<q\2458\275\351B\310=D\036`\275\006@\231\275\355\323 \274>\206`=\235\246\202\275[\032+=\332B4\275\032\250d\274\"\366o=\370~M\275\327\333\256;Nw\014\276IQ\350<r\275\021=\356o\210=\234\341\207=_\304\241=\317\244\224\274\345YT=\021\301\023<zf-<\'S6=H\302\251=\353pO\275\362C\277;1\331\352\274\202\325\"=G\351\356=\215w)=\277\027\253:l\205\343\275ql\310<\277\334\317<F\226L<\206\343\013\276\337\375\340=\374L\241\2751\243\314\275\025e\342\273\2568\367=\366\266*\275\225&\262\275{\021r=y\3368=}6G\272\n\356\331\275\301\240\346\274\261<\302\273\375\026\310=\233\345\340<\022\227 \275\026\247\327\274b\356U=\r\020)\275\013i\222;\301\300\260\275\210\204\326<^\342\304=we\376<\200\264\240=\370\253\350<\037r\020\273`\305 >\243\270\251;9R\n\275\002\005\276\275\321t\026<a\366$\275f5\004=G\221\n=\376\316\323=\024\355i\275\305\200\232=tU\343\274\241\006(\275K+J=H\361\216<\347\252\333\274\304\250\222=e\251\346<\031\324\36183g\256<\"\276\326\275l\212}=\241y\330=\n9\030\272\320\236]\274b\250\247\275\242k.\275`\350\222=\363+\215\275u\253\252=\201\033\301\273\260\r\361\274\246l@;v!\224\274\037\034\342\274\204D7:\222q=\274x\003\307<\250\026\224=42\001>\243\214\226\274W,\036>uB4\274\221Yo=8\355\321\275\271\373\251\274\361\203\215<\232\022P\275\033\341A;\027\273c\275\332?w<\003\024{\274\240JR\275\250\001\264;\2747\016>P\'\205<\261\031\270=\357\361\005=i\002s\275\265\024\025=\334&\253\2755N\243\275\201\376\207\275\337\207\021\275\351\306\251\275?B\010>\256\325\364=#\213\227\275\200\244b=\0331\340\274\013\343a\275\336\312[\274\212\2616>\227\2641=\252Ct\275\314\350\353\275C)V=\"\315\206=\273V#<\340-\347=\350\031Q\274\024\322\022=of\243=\354[\341;?Ix=\210%\302\275\331\314\224\275\033o\253;\267\275\253\274\300\n\303<~\226\252=X\372\360\273\372\323k\275\006\354{\275+\023%\275Ipn={h\236;\2133\375\274b\335\222\275^\217L=`\352\302\274bH\304\275\354\322\005=t\r\263\275\361C\272\275m\321`=7\233\216\275\337\347\214<q.1\275\201\247\221\274\352\030\212;)h\365\270\035\331\214=[\030\244\275C\355\204=\315\006f=TL\263\274\263\270\034\2739\0073\275\0372\357\275\354\203\311;\354\305`=je\t>\222\324\346\275\204\313\007\275\251R\302;\217o\211\275\236X\260\271\205\326@=\036y==\320\303\202=\257\241\001>\314x\337<\244V\206=M=\261\275\001\3518\275*lq\275\234d\023\276\310L\224<b\277\347\275\345\034\265\274\222\352\340<\023\253\270=\240\177\257<?hQ=\244w\242=\221La<\344s/=(\373\025\275\034\207\212=wq\254\275\225;\335\2735i\230\274W;%\275\352)I<\323\350\246\274\377\373\332\274k\247\002\2762\037\004\273\260\033\222\273\030\232\r=\300g\313\274F78<\241{\262:\254\025\020;\352zn=\336\241\226\274\342m\221\275\371\377\n\274\223>\245\272\311 \373\273j\344\000=\'\n8=%\204/<\014\303u\275}\371$\275|\203\035>\261\216G\274\346\206\352<\304\211\262=@\355\251\272^\373\017\276`\2239\275\031\230\215\275\017\313S=7s_<7\316==\014_A\274A\316\222<}P\260\2749~\210=\243\355\277;D\216\200\275\n\303\007>uk\223\275\004\267\235\275\313>\t=\305\026\366\275\003\001\005\274\266\222&\275\014\267\271<B\323\343<\372\216w=\222Rd<^\247\004\275V[\342<\253\014A=b\337\336=\221\256:=\335\306+\276\352s\t\275X\237\317<\234z\032\275\013\334\005=\\$\363<\372\177\333=\226$~\274\010\207\203\275\025\221\245<\022[\026\275\361\200\310\274\0062l\275y}\325=\034\325B\274a$\004\274j\033\"\274\330\266\325\275\362\314>=\201\276\005=\355!/\275\002\267\311\2741\227\021\275G\216h=\217@\322=uW\030=D\223\346<p\021\265\273\243\255u=\260\354\345=\2219\252:1\237^=\212L#\274\360\"\213=K\231\306\274s\233S\275\345>\242<S\253\223=f\032\213\274\243E\262\273$\355M>\345\2266<\363!\177<\265=\002=\336%\032;\340\361\274=w\334\007>1\330,\275\262Y\014\276w\346\256\274@\325\251\273\341X\210\275\036\245j<\036\"\330\275\206r\275=L\010\'>\374\340\017\2731\317\254=\323\3571=\363p\317=w\023\026=\301\004v=tI\304<\305\013\345<\211&,\275\217p)\274\301\204\203\275\373\370\325<I\264\240\274\031\211*=\027\300\225\273\r\236\220=x\361\272;\217\r\371\274@\215\206=\311\354\006\275\262j\341<\373\371\306\275>\372\200\273\202\007!\275j\221\242\275\346\302\204=\033z?=\232\213z\274\nu\226\275\036}o=\334+\257\275\236\206p\275\357\256\'<\"\321\207\274acb=G\224\376=\3026\202=\023\032o\274\330\363\312=\200\033\343<\264+Y<\360\367T\275\266\277\021\275\323\372\237\275\250\300.\275\031c;=\033\\\252\275\312\245\017\276g\326L=bA\265\275\231\206\005=9\301\237=\200\220\301\275\372)\007\275\210\033R\274\0305\202<K\347\350<\206PA\275\275\230\033\276\357?\201\273-\027l\275l\363V<\372S\236\274\241\014s<\030\263%\2755\232N\275P\252)\275m\372Q=\337\226\272=\t\244/=\314q\211\274\221M\240=\266~\037=K\251\217\274\341ui\275/\213\223=.\010\000=\035\r\n>\002\211\3456w/\034=\244\366/\274\304\003\227=\031\000E\275i\322\014\276=\2378=\247\223\3129)\001\345\274Z\017\\<\201\330\271=Y\242\261=o\241]\275\356Ee\273r\021\323<\0358\025<34\275;,\363\375<\204\024x= k5<\210\220\344\275\247\005\340=\361\233\210=\246\234n=\255\340J;H\331\245=\231\013\272;\233\332\253\275\221\324\245\273\3534\323\275\333\216\304\274\234#b\274:0\255=$\260e=\277&/\274l\014\245<\350Aa=\322\246p\275\261\301\205\275\376\0168=1\373Z=\336`\310<|4[\27381`=\3612U\274\007@\264\275\255\300?=y\255~\274y&\263\275A\007\014\275\303\375\207=\350\366\257\275\205\323\362\274\205v\001\275\374\362x\275\202\301\335\274\023 \035=\234\325\264<\347p\024<\374-\322=\306\022v\275\336\367\033\273\212`A<h\014\273=\253\225=\274\307\315\274\275]\203\227<\245W\250=f)\375\274\372\202\263<\340A\370\275\034u\312=%\203\031\2754cP\275\351f\321\274\027\254\021=\235U\352\274\3009\274\274C\252.=\3370\013>J\200b=!\215\031\275\320\363\214\2741\036\264\274\330\017\003>\252\026\023\275\\\n\237\275\356K\013=L\265\362<\223\260\201;\016\271g=\264\206\351\275)\270&\274\013\212Z=\313\255\321=Yr\303<\363\333\001<\323\276_\275A\373\247\275\251\321\371<J\\\271=\326\027l\2740\356\n\276\230\234\272\274=\366\036=q\224\"=\306%\255<mvN=\264;\247<\005\227\217\273\037\273\300<\335\316K=\315\002V\274\207\210M\275\036m\252\273\377\310\302= ]\032<\260U\010\272\270\303\242\275\231\352\314\275\324?\026\275n\334*\275\301\246X\275!s\017=\325\376\272\273\3076\227\275\323\224\'\275V\013!\276[\237c\275\325\252,=\253\035\263\275\205\177\200\274\355^\024\275\267 \217\275&4R\274\264B\031\275R\222\360<f^\354\274\330b\247\275\312\343\223=\270fw\275>\374\243=\2763\261=\235\372b=\233\213W;\333\021?\274\'\222\251;\377$\270=\326\010\262:\225\032\215\274\317\247\250=%P+\274\370+\030\275\027\243\212=\024T\303\274w\231o<;\325\021\275\340\260\027=\013l\267\275\242<O<jn\337<\'\303\225\275\314\377\323=\207\304\311\274\023\340\220\274\320M\355=h\211\345=G}\263\275\002$\346\274\231\343\014\275\206\003l\275\304\231,=#\3701=S\373\300=#\206^\275\360\350\031\275\274\303p\275t\273\246;\355[+=a\030\017>\347\034\211<8l\020\276\\#\006;Et9=?\006\253\275\300\035;<\020\305\350\274\337\003\321;[\374\225\274u/\225=\302\366\231\275\202\352\342<\211\264\260\275S\356\271<\036\307\224=6\265\017\275\264\274\321=\304\002\373\275\373<\026\276\n\313\345\275\242\016h\274P\350Z<c\321\321<\347%\232\274m\177T\275e\266\214=\037\356\313=\361\321\205\275\362vS\275\026\277\375;\361\2564=.\315\005\275;\245\226\275\265\247\322\273~H[9q\027\306=}\341\237\274p?V\274\247\206\312=\370Di=\\\203%=\2468\244=@@F\275\242\213\r\272\032\200\251\274\360\n\201=\313\2722<\301\243\225=\332M\276<S\025\364<\256\364\024=\211\205\262<\020\330\267\273N\220 =\003(8\275|;c>\347p\276<\034\201W<\275\263Q\274\013\272\301<K\023\235<\201\375\203<p\215\306\274W\007\375<\316m\021\275?\363\322<\244\341\355\274A%5;\024Q\241\275+\206#;h=\232=07\036\274\003\037F=\366\361\247=\242eF\275\344\005\357<!\256s\274Ha\036<\265\347\037=\245i[=\234\261\271=\227\303{=\247$\345\273\2601\\=zI<\275\246\372\332<\223M\022\275Py\350\274\317~}\274R\230\235\275\017C\000\276f}\271\274\275\031\006>\240\350\n>5<\225=\336\225B=\rY{=\001\003L\275\343A\266=\007_\223<\350W\202<\r\260v=^\022\314\273\022\270\033\274\257\336\302\275\237\226\230\275\352\2459\275\321\216\023;u\262p\274o}\"\275\316+\023>\224n\340\274\013q\346\274\354 \347<ol3\275\036\216\307\274)\270\005=\324<\342=\333\357\023=\231\240K=\263!\241\274\3619\251\274\000:\250=\271`\244=U\265.\275\036S\000={h\272\275O\224\240\275B/\217\274\014\251\251;\214O\260<\225\017\024;\204\327\255\275\354G\243\275\"\2562\274\331\204\303=,\341\211\275\234\257\232\275\031\356\206\2741\321`>\2538\007>\307\351O=\212\255\230<^\273\017>,\211\254\275RM\263\275\353\017\222<\035\342s=\006::\275ZE\350<\210c\345<\333\360\n\274G,6\274v\336\261\275\024\264\252=^L\237=\225\336\233\275>\2164=\035\335l\274 \022!\273\342\021\032\276:\315\323=\022\240-\274\210@$=rK4\275{%6;\323\333\273=>\r\271\274D}4\275\225\023\351\275=9\231\272Z\366\242<~\343\203\275\216\237\346=z\265\250;[\374\231\2747!p\274\342\345A\274T2o=\244tW<B\355\220\273\'\333\367;3\360\353\274\315\211A=Gt\026=s\220\243;\236\230\263\275\224\312Z\275-\374\350\275\203\024\304;a\324\210=M2\036=C\317e<=\001\300<\366\216\035=\326\261\007=\031\313\353=\217\211\313\275k\335w:t\266\361<\230\3755\273\3620\370\274\024\350\211=\302\233\263\275}\256\365=\344\352\207\275\207\007\362<P\023\002=\nM =(\224\251\271\373\257\010=/\314\274<d\346\r=\210v\004\275]\202\217\275\327\252\330<L\nM<\006\205\212=\025\222\274=\336`G<W\325O=\206\224\367\272\317\031Q=ru\013\274\'\204\263\274j6\021=,e\243=`\263\240=Z\334\315\274\265\017\004>\244\2450\275u\353\021=A\020e\273q\355\026\275\235h\247\275\227B\250\275\271@\246\275\006\014\373:\267!\034=ET\324=M\332q\274\002\375\253\275\213\247?\275X\342\031\275\303\331\026>\267\'T=\246\021V=\271\340\205\275-\r)\275az&\275\325\021r\275\326\\\313=y\331\226\274\037\366\310\274\305\350\220\275\363\014\'\275\024\007o\274\214\tc\275B\001\000=\005G\001\276\223(9;\226v\356:$k\250=\331q\244=\310\274\345=\266E\303\2741\350\266\275\305\035\377\275p\277\014\276\002\254\322\273K\361\377<\000<X\275\025\340\247=\267w3\273\366\177\341\273\016\321\013\276\225R\001\2758\245!=\177\263\235=]W\323\273\330;\241\275\345W\023>P\023e<\300\334\224\275\370\342\356\272d3\341;ux\211;\256[\250=\354\010\252<P\266\337\275\030\374\323<\r\223\265=\337\241\375<?q\224\274R\362 =\363Z?\275C\233\204=\267\0373\275\313@j=\265\377\351=Z\274\036\275R\036d\275\313\350\261<u\343\257\275!X\331;C:\222\275+\261\t=\0318(=\375\006\004\276\323F\230=\277\202\376;w\354\355:MB==\023+\025;JQ\304\272\0311\200\275u\346\206\275r\350t=\274\333\224\275z9Y=\223\275C\275\301c\211;\312R\311\274~\307\225\275\177\304\234<\273\004\022\276\317I\363\273\330V\257\275\307z\276\274\203\r\306;\253\200\342<X>\016=n\377\377\274SV\242\274\377\212$\274\002Q4\275y\337`;n\221\014=0\246\263\275\240\315\030\275;\352\002<\006.\200\275-G\031\274!M\244=\331\334\260\275\206#\341=\020\306\241=\346\262\274=\032\035\272<\262\327n\274\316-\233\274\241r\274\274>Bv\275\260\024\310\275\346\314\211=\241\325v=\035\260\200\275f\n\265=J\275$\275{\375\263\275\360\277#>G\255U=\366\322w=\026\025\367<\314)v\275\260\337B<T\021i=\206\374\330\272\200]n=7\377\202\275\220\230\341<.\013\241<\216}=\274\232\232\005\276\022\231\230\275x\177\210=X-\272\273\267L\361;qh\377\274\340\304\317\274j)A=\330\225\256<f\371\262=\004\000{\274*_R\275\203T\232=\203\362]=v\276{=\324\'\210=\215>:=\365N-\274\363\365\200\275}\247\016=\244\033\345=\363\014\010>\344\252.\274_\273\222=\356fh=\212\006\222\275\254\013\323\274u 9\276\266UA=\230\017_\275Q\002H;\327n6<\305d\333\274 N\014=q\323\354\274r\033\017=\322\203\031=\246\233\266\274\021\004*=\205\364\261<\3149\023=\235\343\375<de\267\275\307.\365\2759\375\021\275X\033\344\275\326\353\001\272\366[`=G\241><BZ\031\273\346\020\016>\320_\332\275\314&\007<P\354\027=`\366\352</\376\024;\035\222\360\275\252RF\275\367\315\260\275\215\316\216\275\004C\262=^\363\207=\311\350L\2753\004\261\2748@\026<\243\201k<\272\017\322\273)_\212\275\262\024R\275.Mj=&\021\032\276Fh\252\275=\331n\274\362\000^=\245\017\240\275\3316)=\313\235P\275\267\031\251\275\337\225\254\275\035\233\300<UU\207\275pc\315\275\223k\330\274Y\376\016=\276!\252:\337!E<[\002\315=\305\325i<\333}\220\275\027\345\213=\360\027\036\276\333E\312<\226V}<~AB\275D\033\250=Bc\001=\247\233\230\275\033d\241\273\022\022\005\276\227\376\327\274\334\370Q=c\t\030=}\010\000=\260i\031\275\242\006\300=\272\266>\275\246)P<\213\335W\275\200\030\316\275\177\354\241\274\214\323U\275/Ns\275o\267;=(ZT\275@}\006=N\225k\274!<f\274S(\004>\273.G=\311 \213\275E\001c>J\241\214<\325Ig\275\307\242\214\275\n\205\213\274\027\240\027<\211\036f=\025}\374\274\365\035\336=p\334\340<\377\333\234\273\251\223#\275\263x\242=\255\264\223\275p\374\373\275@\365\014\275\216\320\260\275o\302\243<\371\363\006=>\010\305\274(o?;[\210\212\275\241B\355\274\260%\265;\254b\246\2757S\370=\361@\244\275\207\2053<.\202\'=\310Tu=\2764\t\275a\205\301\274\365\273\357=\322\325\002>`\355\215=M\330\274;ml\363\275\274=\213\274=^Y<F\317\316<\2478y\275\300E\233=}\002\344=\215oi<O\250\214=#\002i\275\312w+:\353I/\275B\222\217\275\371/\301=\236\314\024>f\274\363\273\226\310\020\275\373\375\337<\314\352\332\275\031\263\303\274`X\301\275yT\001\275\030\332\021=\353[\361<\341\357\260=<g\200:*|\263\275\206u\230=\016 \021\275\354.\206<0\273\226;\237\303\022>\211M\337\275\005\331C<\033\005\333<@\0347=\207\334\310\273Pm\215=X-0=\006\314\033>\204\266\246\274\r\266\364=\016\240\031\275\255\237\r\275\331\266\300=0d\232\275\236\301\337:\000\263$\276\332\360\024=\365\355\001\274\203\367\014\274&\244(<\257;S=Fi\353:]\236\031=\220\354H<\227g\256\275\342\336\213=\377\323\220\274l\337d\274\023`\277=1\272\212\275\031\177\230\274\255\010\201\275\260\256\205\275\366-\233=\327G\037\2758M\364=\241=^=\242\340\217\270[\312\221<\332\241\225\275\005/\027\275\014\033\354\274\221\227\245<V\255\254=S\373\346<\245W.\274}\306 =Ot-\275\363\271\n\275\321\244\030\275j\\u\271\276W\017=>@\223\274\206\000\275<\031w\220\275y\303\273\275\245Q2=\200\315l\275\2339\036\274\352\270\354;|<\203\275|\030\033\275\265UI<e\202\212\275d\220\262=\314\260\317\274\255\0029<\246\202\"=O\2226;!\230\211<\327\217)\275\340\352\267\273\362;n<$\033x=\245\3457=<L$=\352~\210=\233\343\217\274\206\350\220\275\177\332k\275\251h\213=\257\340-=\254\036\317\274UZ\211<x\330\213=\261\336\347<\\:\246\275\312=\016=\230\\\n>\000&\026=\2410\205\273\017\327_=\260\271\321\27435\005\275\345D\324<\311\363\210=\374#\261=\217-\222<J\003\027=m\212\307<\246!\374;j\325\264\273\310E\377\274\005.\253\275-\033}\273\377Y\206\275\351\023/<\227\312 \275D\341\357<f\212l\275\200\204\262\275\311\344\351=\262~\230=\2476\345\275\t;j\274\355A\254<\273\032t\274 \300\265;\016\314\t=\352\373E=\277\360\007\2758\275:\275\201\'\253=\223B\333\273\303\302\354=;\r\341=\t\343\201\275\3266\260=G!\217\275\024\360N\275\207\222\243\274\327\024Z\2758g~<o3j\274\260\350\273\275@\264k<\022]\347=\302M\271<`\361\222\274\314.\037\275\334\232\264\275\203\000e\274X\274\326<\000c\222=|\003\243=\312\242$\275\023\232F=\335\335i>\236S!\275`(\">&\232\371<W\242\374<\007\"\263\273\030$\343< \023\004\275\267\230x\275\025&\306=\226c\003\275\340\246p\275N\"_\273\024\275l\275s\220>\275\2000\3158\035\003\230\275\203c\254<{\353*\275\251\305D\274yC\240=\257\002\237\274\344\250\277\275\263\000q\274\371\327`=\000X\363=\326\006==l#O=\307\177\227< i\332\274\244\r\321\275\352\242\025\274J\010M>\204\370-=x\301%\275\262\362o\274\034\314\235=y\033\301;C\177\271<\013\203>=\347\304\'\274\273p\200\273\232~!\275\363Lz\275\307\340k\275?\035\261=\200\203\335=\350\306\014\276T\367u\273\217\375%\275{%\362\275\305\252_<7\257L\274\014\345\277\274\252\261M\275)gD=G\365\023=<\372\251\273\365\202Q=\371F\205=\243c\273\274\367\3540<\027\364Z=\347\261\303\275\026N\357=\273\037\206\274\327\t\"<r\377!=\242f\243\274\360J\246<\270\252\244;\234U\225\274\332.\325=\227\362\221\275\377\275-=\343}7;\355\355\344=g\361e=\2052\316\275\333\354g=i\206\243\275F\200k=\266@\004\276o\013\361\274\207=c\275P\025\203\274\013\207Y=\330\317x=\216\024S\275\317\216\005\276\266S\031=w\231\242=o\253\003=__\331<H\365\372\273k\371o\275\336\240\020\274\324r}\275\3060\207=V\024[\275.\035\225<\'\360\271\275R\222\272=\342\232\253<\363Q\035\276E\302\006=\200\250\030;\352\304t=\253\303\242=k<!;\251<}\275\244VC=\233\365\204=\252\374\220\275c\300>>+~\354<y\266\203=\221\247\231<F\373\376<\217\254h<\3559\362<\277\035\262\275-Y\204\275\022`\374<+]\245=\307\246\332=\277\265\235=\001\365\202=\321\265\201:\020\203&\275\222\214\263\275\255K\264\274\332\366\274\275F\277\2279o\013~\275\026V\003\275\r\244\023=\231\225M\275\202n\246<\224{V<\242QU\275\342\310/=\326h\273\274^\223I=\351\214\243\275\337*\221=W\"\372;&#\212<\225\235+=\370e\203\275\025\000\263\274\034\273\001=?hX==Z(\275T=d\274\261uQ\274\255e\032=\322\252k=\235\247\016<\330\206\014>M\3512=\300y<\275\335\362u<\230\205e=\321\370p<j\\\357\275\233\255\221\275\262\325\326\275\350\203\353\274\245\214\003\275\344\222\310\272\317b0=/\355\215\275\023+\365<\316\307\023=k8\266\273\214\342_\275HZ\202\275q\375J=U\203\003\275w\224\253\274\n\316\375\273\231\020\033\276Q\224\032\275\205\017\211=_\211&\274\r!\355\274I|\275\274\033\027\001=\002\031\304\273\031x\'\275\023H\203=Z\231j=[4\333\274\257!\004\275\266\346\226\275\014\230\300\274\245\354\331=W\241E\275\332\216\271<~\tU=\345;\321=]x\325\275d\254\007\275\371\363\014=T\016|\274\316\000\243\274\213*\037\275.\261H=*\357\006=9\332\204\275\240B\240\273\223\207\223=-\204\325\272W\213\257\272\031t\245\275\347n5=_\024\332\272\351\033\345=-R7\276\3038\207<~\305\240=\254\221\013\274a\010\242=p&\376\271>I\250\273|a\205=\273\007a=\\\246\033\275\tu\213=\276D\202<`\030d=\361\216\260\275U\233 =\002\251\036\275C$z\275\366\252\230=9\004[\275\321\021O<\325\'\004\275Xfa\275\032\233\302\273\234\273\346\274\251\014z\275?U\200=\365*\215=6/\213\275\317h\215<\262\232]=\307\000\261\275\333\256\313=\302\247\261<r\033Y\274\246\200\261<\342\270=\275\340\217\">\222{\241=R\002-=\254\376\302;\340\333\367\275./\347\273\007\024\333=\341!y=\207\231\254\275\221\346\334<\346k\244\275\375\007\214=\273j\226=}\374\\\275\357\3335>\362S\331<\313F\363=\226\206\217\275\365\233]\2758\236\211\275f\307E\275\333E\364<O\3240=\254+x\275\266\332\244\275\206\325i=;\0337\275=vj\275\354g\001\275G\252\010\275\355\361\237\275 y!<%?\025\276\365\326\252\275=\320\000\275\337L\027<\222*\207\275\014<\222\275\020;e=!\342\355\274\n\354\270=\275\2147\275}\010\033=\244\245\245\274\212\021\014;\205f\306=\\/\202\275e\2764=\274#!=8\202%=[\324\306\275\'\350\017\2741Cb<2\243]\274\3042\230=e\312\241\275\256R;\273L\353I\274\235\323\347=\324\275\337=\344\233K\275V_\357=y\027Q=\346\337\340\274\213\322\314\275\270\371\374\274\315\316\003\276l\267\307<W\307\327\275\301\325\320;\022>H\275\t\335\004>\343R\227\275|\031\017=\261\207\032>\346D_\275Y\330u=U\222\024>o+\214\275Be\223<\367\031\211\275+w\025\275\220u\374\274\257\000\017>\233\377l=\370\316\354\275\350\301\221<F\356H\275\t(\001\275\340\300E=BT\251=\215\214W=:\024\021\274in\255\274uA\033\275\036>q\274\267\246$=%\033\000\275Yau;\370\366<=\320N\272\274\205\214u\275\207\n-<\336\357\314= \273\275;Jd_=\333\336\000\275\020\342\014<1\246`\275\332\035\276\275\313\t\252<~\207u\275\337\347\257\273\036\265\212={\321\352<\331\357e=:b\027\274\371s\267<\231\000|<=\267o\275[\214\353\275\3465D=D!\274\275Z\364y\274e\246\275;`\201\004>\2236\270\275\263c9\274\332#\260<2Pq\274W\241<\275\267~x<\232r\322\275\272\325\026<}/\222\275\344px\275{\177\214=\263\003o=\256\232\274=\020\3475\275\020\202\302=\217\233\005>\323\224\017=\215\024\253<`A\221\275\341s\024\275\024\331\223<\217\200s\275\327\003O\275\306\275$=\033p\037\275;E\371\273\233\313D=6N):TJ\377\274\315\353i=\304\023\247=\345\344\343\275]o\336=\350\013\354\274\020\241]\275\"\313\212=\302U\255\275\201\236==\246\253\014\275\373\003\007=\252h\r=[Ul=Gm\"\275\265(5\2711F\363<\326r\035>x8\303\274x\253\212=\024\306\034\274\265\205g\275T\351\272\274\3341\367:Xg\227=\316\260\230\274\277\251\236\274\347X\005\275@\t]\274)?\356\275\027a\265<<B\\\275GF\347\273z6\334\275f0J=*_\376\274\036\"\372\273\322\241\265=\t\225\000<[\024|\275bV/;\351\315\207<C#[\275\010\314h=\256\225>\275\210\312\205\275:\000\347<\035\007\223\272\227\206\365=\0365?\275,\335\207=\255!\256<\235\334b\275O\231\033=\004\026\333\275\213\261\367\275o{\203<2(b\27406\215\275\rJ\205\274t\212\247\275x\2162=\2064c<\300\375\201\274\340\325\030\272\337g\003=\rw\037\275\247A\006=w\021\327\275\237\231[\274]\267\365<\247\256\236\275\032&}<\326v@=\242\021\217<)K-=\216\034\257\273\265\276\010=\362t@\275G\357\271\273\375*\207;\007\260\224=\245\223\352<\234!\262<oM$=\034\210\006\275)\346\245\273\371j\244<u{F\275u\301\222=O\271G<\274\207\227=\263\327\351\275\273\214\253\275\005\337\227\275\201V\207=qm\360\275\267gg\274\3475\374=\305\275\232<\250\211\334<\323\003\240\275\267F\027\275\217\312\260<=B\232=\374\302<=\216\3410=\035\333\262\2751\261\034\275m4\236\274\035\311\016<V<\272<\240\021H\274\003\\A=$\031K<X\r\212\273\357\265z\274\272\no\275\027\031\224:l\342\023=\347iG;\230\330/=F\230\333<|\256 =I\320\036\275,K\"=n\331\254\274\224\374\366\274N\234o\275-{\361<\334\205\236<$\213\302=\032\005\236=\252$g<0>\215\275\331 \262\275\207\251\263<\006Q\363<\376!t=\232\217h<5g\215\274\305\250\340=\325\237\240<a\003\303=W\325\303<|\236\276\275\032U1>2L\026<F^\253<5\206\343=\3146\016\275\343?\215\275\002\231\345<[W\210=\275e\030=A\316\252=dO\212<\016\nh\275\002\306o\275\361\301\313=\303\027\013\275\274\234\233=JGd\275.D\211\275\355\264\314\273le\307\274\211\205\256=\321\260+=x\030\216=S\030L\275\243\216\252\274\332g:\275\367\020\037\275\346]\324<\312\355!\275h\033\212=u\241\r<*Q\224\272\005\022\336\274K\\8<4\243@<cw\213=m\337\243=\224\202a\275\007\215Y=Q\206\200\275\004\237\243=\261c\037<\300\342@=\r\206\261\274\034}]\275R\203\275=l\363\252=\273\254\270;& \037\274\253j\033\274\242SS\275-X\344<\222\243\312<\035\365j<\207\027c\275e\251\241\275\000\333\020=\360\375d\275\014V^<\365\\\030<\341\223-:\321G\372<\335\376\304\275\327\313\017>\222\224B=\213]\245\274\355\371^:O\031\026>\310~Y=\014r\215=\224T\236=\017E\217=(\201X<q\025\350\274\373z.=\200\"\177\274\376 \224\274!\316\004\276\253}\347\274\335\250\342<f\352\006=p\375\353\274T\365\013=9\220\017\275V\210F\275}\025\232=\016\027=;\237\341\021\276\356\312\350\275!\246\270\275h\325\332\274\213\305\000=1\233\377;\327*\204=\025\233\030\275\260\360\032=\320\267A\275\272\211A\275_\250\366\274\200n\024\274t\202\340\273\274\374\004\275z\354I=q\226f<\013X\242=\251](\274\277\020\365<\252\366Y=\263\264\013\275o#\257=\334\337\315<\001\212y<\275v\014=O8 \276\271\033c=\211~\333=\324\273\341<\371\231\253=\261\344U\275\363\014k\275\3663\271\275\232\345\032=\212\334y\275\332\006\013\275\217\322r=\347E<\275\325\032\000\275%Xa\274v\301\226\272\327\270\206\274\366\230\367<\031zi\275\357=Z\274\343\020\325=\360\352\351=H\342\335=\037\252:\2759P\322<\302\300\307\274\007};\275\273\232\354\275m\363\270=\327\301 >rn\336=\255\221\343\274h&\033=\220\037\324\275\322\335\245=\331x\177=t\023\333<\301N\214=g\\\213\274<&\352=\341\365p=\223H\246\275\223-\274;G)a;\232Uy=I\263`\275\312\006Y=5\305\036\275{H\023\275\206\252\232\2755\026\000>\212E\315\275B\305\265=\363\212\205=s\324\003\276\310\225\240<\3404\033\275\350\222\207<c\277A=x\301Y=eA1\275)jD=\352\256\200<\332c\323\275C\373\r\276\376\312Z;\"\022\213\274\363\024\024\276\311\2314\273?\301(\275\320\310\235\275\217\342Z\275\364\250\024\275Km\314<pF7>Z+\025=\327n\243<oQ\350\273q\234^<\253\256\242=\214k\213<\tq\372\275\353|\226=\341F\n\276\304\001\027\274#Q\245\274\205\267\200\275\272\201\252\275D\260\231;\324m\215=[\330\230\275pc\266<m2\n\275\025\307\210\274\213\360\222\273\242\2406\275#\205\325<\223\365=<,\206\336\275\270Q\306\275\207r\315\273rpd=\374\350\026\272\307\261\014>?\033\205<\241\225\034\274\216\270\272\273\337\023\202\274#\357-=Z]\036=\330\025\221\275Hz\245<3<\272\274\n\346\237\274g\201\215=Z~u\274\363@\236=\350!\r\273\351\232\222<\316WH=\364T\326;\034\244\372;\346\021E\274~\003\313=FM\262<\312\t\r\275\357F\254\274\023\323\262\274\312\021\341<\"\237\002>\237-!\275t \261\274\356\273\370\274\013${<\323\370\253\275\r\361I;\017\005\300=:\026\342\275b\322\313=\372|\356\275\370f\316=\375\332==\305\265\212\275I{u\274\327\201\'=\254\364\225=\340\240\224\274\230\016\372=\276\177\016=}`f=3\371\002\276\310\032\214=\360\361\240\274\002\330g=\340\014\346\275*\222\211=\303\251\325;C\026\000>\275P\260<\326.\035\275+C\233\274\310r\221\274\265\230\364\274\304\301\217<\233\"\237<$\337\235\274\327\2743\275>\237P\274,\322\347\274\326,X<\225u<=\276v\202\273:\230\334<\325^\026=)\353@=\307qy\274C\211\351;\031\274\232=\341-\365\275:\026L=D\341\227< [\361\275 p\271\272\212\342\313\275\376\346\207=\221\016\004>\037\221\233=\221\2644=\352M\013\274\351x\030<\014\363\330<)\2034\274\036\345\213<\022$\345<\343\026\217\275\324\271K=\004\370(=\250\350\324=N\np\275\270\270\030\275\220\\&\273\036\002@\274m\262\377=\177\232z=a\352\220=8\301\202\275\232\317u<\273;&\275w\227\362<\222\177\001;\033\331\001==\361\353<\303C\\\275\344\345:\275O\306\221<\375\217p\2759$?\275~\r\017=\261R\320\274}1u\275\004\025\302\274\020\240\020\275\r0\376\275\'\240\222\274\334l\261\275\323\376\360\275\335\030O\274cL\327<\354\335\034\275;\314\356<\202v\002\275\212$w\275[1\334\275m\205\344\275\236\322\006\275\377\272}=\323\\\340\274\331\210\340=\230\356\230\2750\257\202\275\317\t\n=uo\304\2740CW<\250cJ<h\302i<aCq=\252$\n\274-\265\337\274\225\246\270<\2740\005\275;\313Q>{x\206\274\353\327\354<\353\256];i\353~\274\311\177\201\274\332J\211=\002T\340\275\377>\267\275\3269\366\274\017\352\330<\255\276p=$\301\005\276\354WI<g)\"\275\267?\017\275\321\025\216\275z\354\210\274\262j_\274\240\r\r>\251\351\301=\224\263\030\276\272\n\241;\311\014\300<\260\034\231\275\002\275)=\267^\233\275\370c\250=\322\315q\275B\225\304=6\276\003>\204@o\274\324x\027=\304\033P=\017zz\274g8\325\274H\370\320\274\345\251\002\275u\267\204=c\333\306\275X\234p=!\301\001\276\2659\314<\002;\341<\302\232z\275s\366%\275\246\225\342<\030\227O\273\362\353\251<\261\345\200<\326<\371\274\266:t=n\253\226=b\215u\275\020\231\301=\275g\216\273\377\251A=\037\033\361=\256\026\206\275\005\037\003=\277nc\275\022fZ\275\211\005.>\265\021[=\241\361\363\275\336\312\003>]\'\367<\220c)\275\252I\266;\275\247,=0y\026=`\027\273<\256\343\277<\240\\Q=\030\330\245\275\307$\363\273\216\023\\\274&\006\237<\257\347I=\310cq=\362\240\302\274\021\003\230=\337F\270\274\235p_=]k#\275\247\257\342\274\"\374!=[\341\275=\360\347(>\274\350d=9]8>\"\005?\275<\202I;\177:\233\275\035\246\226\274J\375:\274l\017\024\275t\222^=b\n\230\275*\'%\275\336\275==\355\372>\274\267\203X\274;H\236=;0\204\275\324\030\334<\276\215G\275\365)\266\275sv+\273,\206\321<\265Nm\275d\267T<.\315P\275L\367\031=\256\rM\275\263\367\241=y\211\242<\'\021a\275\360\307\376\275\376\370\256<\311\n\013\275fOY=V\266\216\2756\317\350\273\257\2170=\257d\304\275\027\276\323=\217du\275\207\325\205\275\335\371\252<z`\017\275\221t\002={\307\020=kD\010=\'\264\311\275\206\233\335=\255a\322<_\320\204=\352\366\017\276CJ\217\275\261\023\004\275\374s\242\275f\035#;\364:\350==\320\355\273\2133&\274\221(\241=\307\022 \274\324t\022\276\356g\336<\314\373B\275\001\375<\275\271V\275\274+\200L\275\311\362\201<e\317\350\274/;-\275\036\351\267\275\255\222\014\275\376\022\257\275\245y\243\274\006\t\365==\242\302\275\312\362\014\275%S\242=Z-$7\276\342I=1\265\243\274}\3431=\303Tv<A \336\274*\032\223=8\374P<\357\220\247=E\370\253=@\324\322<hjS=!\277\321\273\241\324B=\225\217\220<\370~\"=\272%B\275\342 \362<\350\004x=\335\244\036=\362k\263\273\356\276I<\'Ty\275@\267\203\275\243\362.>\005\t\002\275\365\020\231\273*\210\345=\234\200@\274.\201@=\253\215\356=E\300~\273(m\001>Z\342U\274H5K<.\ny\275a\307\014\275\341\341\255\274Gs\207=BlC=\370\275\334\275\305\255\210<\313q\325<\336n|\275{\303\027=\341\302\036\275\336\320\2619b\325\016={\222\261<\264l\223<\304\027\t>\336\303Z\274U\t\250=\370\270\370=\023$I<e\373\n\276\267\275\032\275\356\223\217;\365\377q=\036\264\022=P\342\214\275\346\305\232\275\207\276K\274\001\013\222\275\220\330\262=g\301D\275?\020\247<\033\366\273\274\256\306\213;\t\203p\275p\324\357\274\007\031\017\275\300\026\026=\004\327\030=\305\036\251=]\026\230<$\204\010=\360\025\245\2758\332\371=<\340D;*<\010\275\373\237y\274SJn=\352(\200=i\266\262<\230\010\302<\225\035U\274\031.\033\276\026}\327\275\253\013\240<\337\320\'=\364\243\337<\357\373\237=y\237\247=d\305\305\275\320\365\205\275\332\270g\275m\267h\275\336\"\233\274\307mk=\335\002\240\273Vz\200\271\235\274\315\274\340[\205=%Q\223<\301\2274\276\032o\332\275\030\230\215\275\3330\327\274\266C\006>\304\304\014\276n\250\300<\017\227\303<x\t\276<$\320m\275\312-\244\275\020y\233=\256\000\332\274E\254:\275\2515\324\274\327\\\331\275Y\223Y=u\017j\274\306`\235=\260\376\273\275\013\200\213<\243\216\023\275\230\220\375\273O\3765=\360:m\274\237\300\017>Q\374-\273_D\274\2743_\016\276e\273\253=\336\233\014=X\253\331\274\002\345\301\275\322\250\332\275\261\\\343=\210\264\310;,\202\315\274\322\272\337\275\324\244\232\273\314\246P=\016\225\207\271\253uK=G\205\263\274\256\ti\275\261_8\275@\373\211\273yZ\227=7\277\035\273M *=?\332\251=}\021\246\274\007\271\010<\331\210\316\275>\256\242<\304\2321=\263\317\315<\037\227\347:\013\037\232\275\260\366\227<\037T\336\274\341Q\303\274\267|a=j9\207<{\371\356<\270\212g\274\002\204o=\260\t-=8\004\210=\211\257\257\275|\324\345\274\\\377\232\275\326\247r\275\252\214@=A\217\370\273\217\234\036\273\\\321\264<\343\310\033>\331\324[<\303\361\344<\352\233\217\274\312C\n\276\331S\231=\240\377\020\274\357\267X\275\021\254\262\275s}\213;\276|\260\274;\364\267<\373\313\315\275U\306\001<%\023\300<d\260*<\267\244k<\202\020&>\316y\227<\345\030\312<y\376\221=\233\345\225=5\213d\274Z\272?\275\\\316\271\274\360\345\242<\216\376V=\027\253_=\010:U=\225b9\275\371u\023\2766t\366\275\307|3\275X\035\n=\245\311&\276i\007\233\274\016):<\376t\225=\237\301\003\274Y\306\272\274\030\322\374=\244ht=V\003\002\276\260\230\030;\360p\276\275\246\0227\275\036b\204\275\2667\274<o`\221=\307\r\231=\227\242\361\274\356\350\377<\375(\017<e\177\034;\253S\202<\224\237\245\274\337H\007\275:T\014\275\032\"<\2757m\277\274\016)\022\275bK==\230,\371\273&\225\221=\261\376\215\274\264\341\217\275&s\253<Vt\351;\203\347;=\320\004];\216\027\335=?g\220\274\210\323\233<[\341\320=\003\210;\275\372\\\024\275\034\217\032>\366\005S\275&\006\263\275\277*\204=\276>n<EH\261=%\311\203\272\320)\023\275\355\010\310=\307\')=3\004\326\275\001\266J=$\005\217\275@\257:<\321]\364=Y\274Z\275\315;\'=\302KQ\275\322X\034\274@\376\006\274\235\305\221=\244z\177\275\216\351\014\275ol%\275\216.\246\275\354\323\304\275&#\264=\033\363\\=\3658^=\315\223\235:\354\031\265=\303J^;>\300\003\276\205U\243\275f\351\026=\371tO=\372\356\322=\354\256\350<\026\271\362<\244\005e=$\033\254\274$\nj\275\030\377\204;\223\226W=\007\300\205\275GV3\275\262\221\246\274\251\345J=\027v\037\275V\030y\275\257\375d=\207w\252;\300\365\020<\302\005\006\275\017\266=<\237\326\324\273\314ez\275\2625\356=\2361f<\372\267\307<\027_f\275\264j{=\217o\355<\003\270\032>r\223u=\355\021\261\273\343\327z\275>\200\241=\006\000\225=&\317\027=\310\302\307\275\246\342\253<\022\315\335<b\013\022<\027\2331\273\364\000/\274=\211,>\010\315\226=\326r\203\275mo5\273\n\317\356\273\362O`\275\341G\234=\305\315@\275\320\215\261<_\223\311\273\232\022\301<\354.\351=\0307L=s\225Y;*UA\275\222\034\005\274Lo\\\275B\026X\275\237\211\025\274F\032\"=\032\356\326\275c(;<4BQ\274\335\236\343\274GS\231\275GS\"\274{\241~\275\344\363\362\274\241@\265\273W\177\212<\302{\303\275F\306\335:\332\240%<SM%\275\250\003\265<6\033\337\274H\024\034\275\276c\210<RV\035>.\305c<\320\201Z=>\335r=\362;\247<e\267\266;\025yZ:\237\223\177\275\223\336\256;\377\025\217=\340&`=\276O\263\275\355\031\231=\273\315\215=\203\375\001\275n\223Y\275$\230\237\272\226N\220\275\312\361\000\276\006O\334\274\264\245\224=\363,\036\275bQ1<\304\035\334=!\211\246\275\374\367\333\274\236\245\303;IZ\211\274\221\244\326=\230\264K<\026\3506\275\214\020B=6\252\233=\026\262\310\275\255I\265\274\000\025\372\274\317\242(\274{\371\021=\300\204\227=\272\034\203\274\371Z\202\275\344\177\340=FH\271\275\004\217\363<\247\200\370\271w\240`<\254\247\221\275L\223\004\274]\3351\274)\336\235\274uX\251<N\010\">wi&\276\244\355\005>\350\317\n>\354%\213=\017A0\275\024O\006\275w!\222<\375\312\336\273\363/\311<\241\325\225\275}\027\331\2726\267l\275\033\230^\275|\371\236\275\034_\031\275?U\000<\301\233\267\274\325K\217<\"t\266;^\255y\275[lL\273\224\273\322<1K\217\274\256\313\206\273\016\335j\275,\tW=Z\307{\274\3410\315\274\320\346\252\275x\254\004\275\006\001\343\274\007\316\222\2741Jz\275d\022\364\273d\361\262\275&\276\301\275\270\201y\275I\311\303=]\363\3279\357\370\221;sKk\275\270\346a\275\274\t\250=(\033\022\276{\212\237\275u$\260\274:\335J\275l\214\236=\223\222\231\275\337w\273\274%w\246<\3448\266=\305sr\275\225kq\273o\272\201\275\270\243\221;\020\002\n\273\216\004d;l`\000<\276(\314\274\234\263\301=\004i\032\275[E7<\241l\241=\205L\262=a\014\272\275d\274\210\274\2619)\2759\345\300\275\037\025\241;\363/\266=\214\346C\275,\202\361\274\306\275\213;\231\350\016\275`\024\023\275\270\027\022=J\246 \275\350\256\210\274\027\3652;\'\266t\274\302\360\225\274\214x\255\275\203w(=\005\345\246=\372p\031=\352y\307\273]\372\223\275\210\332\363\274X2\006\275\344@\'=\204\031\361\274\270\250\253\275\353~\202\275w\225/\274\332N:\273b\246,\275\036\373C=\020x+=\253\016\364\274\210\201\216=\013\213?\274&\273\360\275a\025\212=o@\344\274\363\022\243\275\006\304\010\275\000h\363=\372\246!=Zc\t\2747{\312\275\266\217a=\224\324\264\275\331u\350\275\335W\366\275\337J9\275/\234z\274\010\337\003\276\310R{\275\263%\001\275a7e\275Gx\347\273Jb\354=h\177O=\211]\000\275\275\207\214\275\"\306\247=)\374\211\275\030\037\246=\250\206>\275g\234<\275\033c\210=\234\330\215=\023_\277=)\331\030\275va\316<\217u\007=\200P\271=\247At;\027E.\275D\324\340\274\251\226$=\353\032\263=P%\236\274\317\016U<d\206h<o\365d\273\306D.=0\320\257<NC\345\275\223\306^\275\344\206\355<S\261}=o\367V\275\337\230\201=:\007\213\275W\316h=vU\021\275L\261\022>\352&\221<w4.\275\270 ,=\230z\034=n\3771\275\315Bk\275\334\317\263=\265\256\222\275\221/\201\275;\017O=8\244a=\177j\211\275Q\023\373\275\005L%>e\032\244\275\377\365\255=\215\216\313=\237\324\333\274\320\225\014\274\333 /=\021\202P=\245\307e=b\"\266\273\213H\337=\026\215n\275\021\333.>\237u\333=\232\350\223\275\220A\233\272\360W\275\274\267\262p\275\212\270\216=d\033\220\275\205\277\361\274$\036X=)_\266=a\254K=\370\0337<\357;\247\274\346\345n\274\231\257\030=\220\266\327\274\320\022\024<\264\246\261=H\231\261=\334\333\017>\3439\033\273\240}O=\371X\020=\310\252\314\275\304\001\340=2V\017\275\373\343\262\274\343\375R=\215\355\245\275+V\n\276\026\306\022=+\352\360<j\210\223\274E\262\035=T\230\017>\212\374\247=|4\320\273I\033\272\274\272\336\207\275\234\275\250\273\345\373\007\275J\244\030=\2131$\275\371\323\210<\177\3178=\220Z(=\351\013\221<\203\324\344\274\232\272\231\2759ms=LM\010\275}\020\261\275jV\231\271\033%\243\275\251\241\001\275\370\215\222\275\273[<\275\230\337?=\232\335u=\354\0210\274w\227\223\275\205\232\'=\212\310\261=S\247\340\2755\217\312=\357 \304=\336\252\014;\224+\335\274\262g\331<dr}\275\013\220b>G:\036\2759<\224\275*-\021\275q\327]\275%\331\260\274\224\347\236=\242\307\322\274D\277\324<\030\303\006;\200?v\274\332\341\317\271#\304_\274\303\312\021=\236\206k\275\243h\n\275>h\034>\324m-\274\267\255\260=\217\233\325\275\375N\207=\320\224\237;\034g\316;=\333$\274\014\205\272\275v\247\006;\240*\304\275\335\273p<\036W(=\320\366\000\275P\333\002\275\027\323@<\344\0022\275\377\371o\274w\267\004=\221B4=\3778\241\275\335[L\272\303\237-=GM\323\274\307\277#\274\324\314\353;)\017\331<.\034\262\274=\264\274<\373Bz=\3577\016\275 R\'\274\006\"M=\021Yb;\016Bl\274]5\216<\303;\216\275t\257Y=\"=\206=`\235\327=s\346\024\276\201\017\242\275e\222C\275;\204$\274\275p\267<\025]\n<\277\250\021>|zW=Y\365\177\276#X\002\275c\177\177\274 \355\026\275,u7\275\314P\r\272\332\220\233=\241\267f<\333\337O=\000\365\326<f+\300\275\2206\324\273\317\367\231\275`\177\r\276]\230k=\376\r\224<\326\251\374\274\363m\311\273\266&@\274\372\023\310\273\363\232\023\275\314\315o\275\020\340\235<\277,f=[\246C\274\300\213\352=S&\213\274\375\004O\275\337\2300<\371F\314<\355\031O\275\360\0077=\264U\325\274p6,\275O\357%\275\3205s\275\237\275\307\275\033;\"=\311\241\326=]\315\243\273\214\264\024\273\220\336\234\274\221Bb\275\221\233\340<S\026\346\274\344\021\004\275\222\230s\275\035j\314\275\265\226\221\275w\256\306\273\317\"S\275@b\231<2W\005=\367\354\267\270\235\212c\275\333\277\351\275Cy\337\273\345a\222:\002\034\017\275Z\026\306<\r\304p\275\351\006\022\275\211\314)\275\302\017z=D\277^\275\202\255\n\276\323~\342\274Q\026\227=z@>\275\030(\332\275?\024\016=\264\243/\275\265^\311\275\323H\264\2743\204\022\275 E\363<\024b$\274qX\250;\030\347\320=\247\365\310=\240\375\031>\221\240\245\274`\277%=\276I\303\274o4\244=\372Fg=\341+\300\274\341\t\305;[9w\275\376\'H\274\306P\255\275?\304\242=Ov\317=X\254\253\274\242\304\314\275Zz\364\275\257\261\2458R\005\336:/\353\266\275\024\215\325\275\252\303\306<\220?\005\275\377\311q\2752\210\221\274\365\222O\274N\345]\274\n\374\031\273\031\304\217=\362\031\271\274\t\362L\273\342\016\276\275\002h\014>\247\2022=\t\367\220\275\254\214\214=\004G\354=\342p\372=\260Ss\276\277J =\271y%\274\024\230\023<\305\314O=\303\365N;Mg\t\274\021\3728\275.\2461=#\013\351<*\210\350<\243V\255\274\205\231!\275\006\240\224<\345\347\240=\363t\221<\231\356n\274\365\017$\275\342\345\363\274b\306\275\275k\005\214\274W\307\222\275\363\270\030=[5\312<\346\337\250\274\314 \026<\357N\010=A\003\306=\n\0059=,\313\016\274\274W{<>5\201=\256iO=\214 \350\275\337yD=\222\336z\273\024%\000\276iq_=\002O\006>*\021\321<kD\346\274\376\014g=\000\016\267\274\221%0<|\351V\275\366[\257\275\316\335\305=\020\302\216=\250\205\306\274~\004\260=\021bf\275n\367\031=\017|\373=\337\347\003=\312G\250\274\021$\313\274\363\220\351\275H\356\366<\017N\010=/\207\347<\362\336\270\275\222\242\310=\232\311\234\275\211>C\274\226r!\275\3044s=u\245`\2743\307c=\256\334\325\274\251\007\327=.\004\300\275\266\370\027=y{\375\274\013\007\014=nN\300=\242\346\334<\273\031\212\275\001f\225\272\031:\354<\363x\233=U\007\312<\261\234y;v\274\004\274\374P\372\274\235\177p\275\340\327I\275\003\317\\\273\377\202\310;\013v\327\275\3379A<T\316o\274\345\3140=41\361=\306~\225=\336f\341<\374\031\224\275\301\352\212=\363\312<=\014PA=?(i\275\r\230\177\275\227:\014\275\237\252\324\275@\243y\275\247T\025\276$\266Z=\353\342,>\016[I\275\301\213\005=\213\353\267\272\225\223\257=\216uo\275\237[\006\275#\315\036=ap\241\273\310m*\275\235v\236\273u :\275\377\222\252<\321wP<\337_P\274\360)\277\275\274\314\030\275\277\224\032<V\255\321<\034\260\271\275\202\212\206\2746\310%=\270\345\205;d\304\256<\233k\001=\302\320\241=\303Y\321\274\270\376\345\274z\020\230=\223Ru\274\337-\272=\244\3250;\207\377\272\27511?\275\214\331\344\274\316<L=p\271\222=g\026j=ABM=\226<p\273rpp\275\263P\032=\241\347\241<J\340}\274\t\232\271\273\247X\366\275\263vj\274X\031\000\275\332{\032=\200\234W\275\260\"S=\2537\244\275Gf\002>\243\2359<\344\227\010>:\014\004\276\247\364\234<\022\304\007>\222\316\230=\330\355\010<N6\313<\216\216\346=\276\201\005\275>\255\233\274\3623\333=\'\261N\275O\332\302<\031q\006\274\316\302\330\274wDz==k\253=\027\267:\275\216\223\023\275\366\300\266\275\277\257\205\274\265#\236\275Q|V\276\301\013)\2763v\320;Q\263C=c\352O\275c*\336=\235^\356;\200\0209\2744\356\333\275\014\313\265;\341\301\213<\234\215\207=\372j\001:\017z\035=\340\333\362\274\345\262\n>M\225\246\275K\364*;\347\032\223\275v2l\273\'\356\215\275<b\375<\357\252\233=\030,\254<\270\235\310\275\271u\267=\261E~=\242\355\206<*\202\024=\no\202\275\313\0171=_#=\2735\336\333;*i)\275A\357R\272\002\246v=\235\205\204\275\254,\206<\321c\307\274\3332X\274c9\003\276\325c1=\371\215\002\276\222\232\374<z \275\2759\267o=-#\265\275\307\222\255\273\037pD=\032M\323=A\342d=\246\334a\275e\272L\275\0260\324\275\307\341\362;\327$n=\360v\217<\\\310\324=\330\3772\275\255\364\326<\352\305\021\274\260z\335\273\027\306\\<Y\324\010\275r\226\245=\001\366J=\314\324\032=1\321\271;O\025\017=\256\335\031<\rji\274\360\306\212\275\251d\317=\027V(=\302\022;=\255\377\261=\274\274\241\275\300\3507;\245\035\n\276\347\014\006=\372\200\371=\034f*=\rT \274P\312\221\275\210\262U<\02508=\330\260\336\275u-\201=\313\272\027>\272\227\014\275\350\356\210\275\274\326\027\274\321\002\253=rH$<Ow\325\273\353\206p\274\243m\217=)\002\216=\363\246\361<\241\207\372\274a\347^=\n\005\220\274(\332\036\275M\201\001\275\357x6=%\232a<_\230\257<V\307\000=F\375\265\274.m]\275S)!=\2133\034\2760\212\254<\320\321\242\274\324\247\226<\261\177O=\275\255\241\275\215/\031==\270\000=\3775Z=\255S\316\275\204\226j;\325y\212<\366\202\376\274\200\265Q=\230\255\306=\366\355\263\275x\373\221\275\271\250\304=\3119\201\275\014[0=T\243\252=\214J?<\214\001h=S\225D<\303\216\232\275\312\305Z\275t\313\\<#w\325<\221G\302=\304\331\230\272\3437\222<\272\244\306\273\3710\004=\265w\225\274;\211\362<z\227\346=@\004\244<\236\307\333<V\272\227\275|A\273\275\217;O=\037T)\275\350\234F\275r\324;\275h\271\233\273\333F\363\274\366}\236<*\210\215\275\000\320\274\274Z\333\237=6\371\000=\346\204\341<\002\365\256\274+\371F\274g\035\254<\205d\343<WX\005\275\340\207|=L\177S\275C\205\250\275|\034\"\274\302\316\252\275\334.,=\223\366\177\275\006\221\276<y[\255\274f\253\254=tff\275\351\373\215=\236\302i\275\r \'\275\376X\337\274EB\023=\r\024\317=\213y\254=\014[D\273\351\301\217\272\262\360\347\274\177\372\010\276\361\0165\275a;\311\275-C\007=7\216\001=\212\000\006\274\233\276\211\275/|z\275[\013\207=:\222\342\273\023\0313\275\226\206\346\274\023\326F\276\306+\007=\004a\310<\360\373\250\275R\324\231\273:\360\227\275Y\327w<[$\215=\253\236\262=\350\236\213<\307\270\n>5\330\321<\307\347\013;l\364\352<\032\017\310=\343\301\205=\275\203\350\273\2724\234=\245\'\323\275\036\307\001\275\262\026\232\275\177\2271=\243\321P<\255\376\322<\006\226m=+g\013<\361\017n=LU3<\321\277J<\t\255o\275\204t/\274\322n\204=&\314\021<\324\311\257\274\225\0040\275e\313\217=\030\340\213\272%\202\021=\'y\251\274F\201D=$\217\376\275\313\341\031\274K\315&\276;\317h=E\340\366==\334N\275\313X\021\275B\326\321\275\027\240\233=\237F\376<.\351W\275\216\027!=^\'\334<F\306\036=b@\037>[\003\343\272\032b\260\273\354\017X\275\241*\017\276\202A\264=\377\330\033=\n\304\203<M\263\270\275\2240b\275\351\305#\276\177\372\024\276L\274Q<b\204\264<\003x\002<\235\224\275\273\245\242\262=\262R\013\275+\360\215\275\n\370J;u\242\235=P\320\202<\227\274\t\275\2168L<R\227\216\275\223\177\354:NCm=\375\324\360\274\026ac\275\254\326q=V/\n=:\276\324;j\350\251=\035\243Y:\t\312\206;\025\354\316<\317aJ=C\r\375\274\263\377?=\002\032\212=\204[$\275r\210\261\274{\245\r\275\320\021\354=3\233F\275/\0208\275\t\314\351<\350\300\247<\227\272\203;\266\217\177<\367\244!\275\364\332\254<9\316\016\276O\241n<mN\270\274{CO\274E \003\275\306\314-<\333\256\257;p\007\035=X\252\227=\310\302,\275\211\343\024\274\001w\005\275\013h\231\275\003\331\025\275\235S\232\275\372\273\240=E\177]\274\305\246\"\2762\036-\275\322o\007\275-+\035<p\324\254\274t\221\200= m\213\275\264;F\275\240\347\002>\304\227\304;^\327\366<\253\006\371\274{@\300\274\224\027x\274L{5=S\\\252=\226\213)\275\363\365l=\005\367\207=\244\372S=\247l~\275if\004=+_a=\366\316+<\373\016/=\355\225\306=@\314\377=\335\034!=O\320\230\274t\360\"=\232\307\026\275\201\223\332<\256\006\037\275\020\2045=\312Y\244\274}v\243= \177\237=$\230\251=\235\240\262\275\233\004\274\275`\206\216\275v\251#\275*i\211\275\212 A=\232\323\232<Y\333\326\275GN\037=8\373\210<\227\352o\275\313Z\205\275rx\016\2755\363\335;\205\270\022\274_\364\204=?\030\243=#- \276n\331\202=\017\013\212\275d0\263\274\021%\324<\207\343z=cD\332<\232\364\267\271\034&\314\275F}\355<\027L\301\274\324\205q=Z\020\246=\226^\025\276\"\214\342\274\356\270\002>d\250\022\275\017\033d=\351\224`=\010O\275=\363\250\336=\367\243\201<;\000V\274\036\246\317=?k\357=R\222\"\274\340\263\274<\037v,=Rv\343<\033I\265=o\266/\274f\304\207\275\327\275\223\274v\250\244<\364e#\275\242K\220<.\225\236\275#g\373=:T\007\275\271\324\207=\253\332\306\275\363\320\004<\266\262!=E\246g\275\271\245i= \362`\275\377\352I=\334\216R\274\032%_\275\243\260/\276d\\\'<\202\345\210\272\036\035y\274\211\263<<\330\026\270\274\001\343\260;gf\317=\032\225Q<\206#\236=^\264\277\273\250\214?\275FaM\2756\031\374\272o\006\213=\016\366\211\274(\037\271\275V9\227=\371\230#>\225.\206\274\310\263\226\274Mj\004\276;z\035\275h\034\232<!H\225\275\246\324#\275\240\230\357=\023*\t\274\272\324\362<\370\226\246=\025\243\210\275\244\347\212=)\256\035\275\243\374\205;B\343\177\275r\225\253\275\3165\302\274\277\222\352=R\313B\275\026\025\247=\020\n4\275**\207\2735\006|\275<\241^\275\206\225N=\017\036A\275\322\260S;R\241\203=9\244\030=3\3425\275J\321H\274\3157\227\274\251C,=8Q.\275\223\304\224<\257,:\275\027\334\032=\254\023\246=\363\332)>p\276\236\274\254\225X<\034bA=\216\245P<\207\202\013\275\031\\\354\273\267\034\340=\377\023x\275p\365\004\274\032\377\222\275\356V*={#+<\024\027+=\002h-=L\337\253\274K\271\234\275\364\261\242\273ea\345:h\344_=\033Z<=\024\t\005\276Y\314\222;\0226\000<\272\253\265\275f\216\030<\203\363\333\273y\2067\275#\302\370\274\277&\022\273\373J\001=B6\215<\305\240\000\276\367\366;=\256\376\320=K\020\236<2\274#=y|V=\347P(<\317\300\310<\247\303\223=\024\200\233\274\252\033\301;o\357\311=$\227\236\275\023\206\023=\206\024\330;\234\363\230\275\263nK=\017\353\356=\241\t\020\273\370\004\226=\257\337\024\275\275\245|\275\325\004\214=\006\222K\275\230G \275`\017\271=\342ys\275\177<\371\274\201=\006=\342\322}=\203\213{<f\006%:k*\'=\353i.={s\"\275\016\337\'\275]jF=\216\035\000\275\022\242c=h\314}\273\356\227\234<66\302\275\204}c=\266X\003=\243q\236=\3662m\275N\277\031\275v\207{\275\270\357\222\275ty\354=x\354:\2734Y\334=\213{\347<9\355\276\2758\220\361<OV\256<\0202\374<\024\202\021<\257\321\351\274\315\331\213\275D[&\276\207\301\213\273\236/\224\2758\005/=\t\'\274=\203\235\331\275\221\253\274=B\250\205=\017\315\200\275\345s\026\2747\355O=g\301\354\275\003\'\\=\255\023\007=(\343\216\275L\013\344\274\t7\237\275\346ae\275u\004r\275[\323\005<\213\033q;\362{\370;\330\241\370:\007\300K=\207\252m<\"\r\211=\336\034\r\275\267\342<<f4\036>\204\333\202\275\267\203\365<\203\207\277\275\364\221\271\275\007\036\005\276.+3<Yy\325\275\257;\246\274\034Z\351=#_\365\274\363<9:es\224<\022Bu=)\313;\275\354\370M\273\037C\025=+\321&\275\350^\200\275g\\P<\n\214\267\274r\2210=\366\374[\273\265G\024\274\301\'u\273\221\215\325<u\375\213\274\250\247\203<\306*;\275\261\036\260\274\337\035!=\231\3047\275w\352\226=\334\274q<\341S\035\274\177\376F\275\027~4\274\341\353!<\255\264r</\343\301\275_\375\224=\031\362\273\274^B\213=\241\315+<\316\302\235\275+s\\\2754w\256=aid>\017\240\010=\262\177\233<\025\017\303\275\362\313\265\275\t+C\276\003k\217<9uU\275\324D\314\275\221\023\007>\327\200\304\274\232\254!>\373]\202=\235m\217<\243$\256=\025\010\331\274@E\000=\022\323\010\274\2221\002=v\376\273<f\250B\275\351F\t<\325\'\'<\211\201v\275)N\004>T\013G\275\357\241\376=\376\272\263\274\243\0071\274\245\247\001\275\312`2\275\315\323\317=bw\230\273\301AM\274\350\006Q=s\224\363=\016L\217=\367|#<\313/&\274\210\226\201\272\320( \275\253\227\255<\020+\356\275\355\2130\272\240G\213<\022\027\337;}\357\266=\336\257\202=L\230U<\356\352\232\273_\025\374\275\351\342?\275sJ\217=$\376X\274l\344\251<\225\272\024\274\027\361@<:\350\312=SeP\275\345\026\244;3\251{=tP1\275\263\255\373<\013\211{=\362k\\=@\353\301\275\321(\244<R\251\"\275\325#\212=\002D\003<B\225\257<z\373w=\033b+=q\210\205=T`\313<\366]P=\237\244\304=\000.N\275n\354\001>\255\237v=U\204\010\275[N\262=\225\214\n;\320\332*\275,\364\257;\367C\304\275\0134\006\275\202\216$=~\205\330<2S\371\275A\322\323\2742\230\224\275\023\3701=X@\341<W+r=-\217\374=\2279L<Z5V\2741V\335=\237\006e=\022\002\240\274\363\343n\275\013z\027=\224\362\371<\267\027\">\030\375\215\275;\315d\275%\240T=4E\221=\212\350\374=\005\224\205\274f3\217=\366\260\353\273r\273\270\275\010\3230\275\201(p<5\316T\274\332\276\245=\234\217\347<\324\335\007\275\246E\347\275\336\323\223=\320(e\275\304\343%\2748\376m=\344^0<\373\262]=~4w\275\321\263l;0\037\273\274\2339\250=\217\374\366\275\357j\343<\030\321\200\272\362\314\260\274\3301\277=\014X\231<\013\365_\274E\021J=\']\371=\252\227\347\271\204/\251\2744\346:<\346\214\237=\037\366\210=\312\306 =>\354Q<AE\334\275\271\271\010>`\022\013=r\242-\276\334\276\317\2753_R=\202\200D\275\005\263I=i\335\246\275\261\263{=\313J7</\354\257\275e\003A=\372\347\216=^s\313\275I\000\006;\213.\325<\335b(\275\032\236-<,\346\233\273\266\226\004=<\333\r\275\320\266\356<.\201Z\274\002\267\314=A\004\235\275HL<\275\350\254\276\275\352F\226\275T\307\245<\212\377}=\035\177T=6A\201\275\231\000\037\2764\332\363\274s|\\<\220XC=\224\215\037\276.\254\005\275Z\3214\2759\232\007=\264d\\\275~S\032>\n\007\220=\323|\361<\033&\t=fb&=#\351-\274\021\200\016<dS\204=-\300\002\275nR\224=[\223G<\237\331Q=}3@\273a\023\274\275\222\376\022=\251\263\314<\203[\006\275]\034H=Y\020\232\275dPA<\271\244\242<\016Q`=\250\234\3559\244Dp;3_\205=Fo\244\274Oe`<\375i}\275\213\214m=\210\227\220=\212r\350\2749Op<\350:\263\275\2509T\275\300\274\356=H%\374;A\221\313\274\215\342\022=\270\302/<\341Q\217=!tT\275%\021$\274\021/\265\275K\\\014\275\231\321\030\275\221\311\220=u\221D\275\242\013S<&\206\332<\255A\233\2750\371\202\275\332\300\242=\17739=\313\305x\275s\302\022=\274\305e=\351\252\242<\3200\220\2750\204\344<M\271\343\274\234\325*\275\377t\204;F;\315:\010\346%\276\210r\362<1\"8=^7\345\275Sq\265\2759\371\335\274k\266\301<q\033\240\275\323}\227=S\016!\275fP\233\274\023\214\346<@O\243\275^P\r\275G\254\356\274\372h\241;T\337\236=\017\016!;h\230\n>\346\356\307\275\023\224\276=Q\370\246=\243\374X\274\035\373`\275\247\373A\275\223\261\272=zr\026\276\022\035~=\0271\366\275\020\372\206\275\016\314\235\275\313\240\002\275?\316\264=fX\321\275\037d\326<>P\320\274.\224\256\275\350]\262=\264\035U<@q\233\274\277\234(=w\215\007=\224\343\213<y\201\n=R\023\024>\036Y\310=\\Y=\275\331o:=\203\377\275\274\377b\201\274\361$1=;\363\333=\204\010\251\275\237\014(=\274\203(=\372\020\246=\301\031\t=\352`\035\275\274\2547\275\325}a<\334\255\353=\022\t\266=\310\252\204\274\274\337[=\001\237\037=s\276\215<\'Yg\275\366\224\255\275D\207\204\273o\005\246\275V\266\024=\302\000\263\274\217\256\225\275>\264\373\273/K;=\204\367{\2741\271|=\r\222\023<\212\375\034\276\253\311\332\274\256*O\275Xj!\276\360\025\232=O\032\344<4\304\245=\023\224L=\240\313\257<\310\357J\275\233\037\271=k\350\333=\363\347>\275\235\226\271\275IU\267=g\337R=\333us\275\353\206]\274\241\224\006=\205<_=\3300\231\273\251\365)\2754\356\257=A\004\241\274\313z\237\275\303\240\021>\354>\271\274B6\305\275\002lc\275:\356^\275Oe\017=\351\314b=\337\025\240=d\314\212\275(\202\030\275\226\272\257=\262\237\361<\014N\r\275\223\350h;|\\B=\247k\331=\326\356v<\336\222\250=b\243@\275\274\346\n\275=\0235=\257J\364<1U\351<\2747/\274N\335\203;\350C\013\275\277S\314=\005\212I\275I\352B\275\234>\317=\346B\024=%\253\016>\311\005\277=\200v\027<oR\242\2758\260f\275\021\370\263\275\216:\316;DG,\276\200\006\374=\031\227{=d\330\t=\362\025q\273\347F\177=\313\322\220<\376\275\375\274\263\035\000=C\353S;\017I\277=\244\033\304\274\207\337\317\275\250\217\245<T-\005<Mw\227\2743\322\003\275c9y<cLg\274\251\010\331\273/\301\347\274\221\247\237=\r\361(=\020\225~=\326\332\224\273\343ee\274\257\033\263=c\362\036=D1\257\274\332\353\220;\266\365\200=qY\245=i\023l=\374Y;\274R*:=\320\217(\273\376\010\335<e\005\226=;\224\227\2756me\275\317PO\275\202\246\301=\003`\300\274\310\027\311=6\307\005=\357\0143\274\020\003\006=\205I\354\274\013\272\351=\317\016I\275\211\210\021>\334\350\000>\024\323G=\342\000\231=\370|0<\245\006\257=\000!\020:\022\010\375\274\375\327\270<\237M\016\276\203\220\020=*\365o<\216r\204<\262\327\027=\300G\220\271\306C\337<\024)\220\272b\242\202\275y#\347<f\227\225=\027z \274?\374\014\275\213Z<\275i\225\253=\245\323[=\3135\211\275ZfX\274\272\241\237=\356F\003\2752\262%\275\377\343o=\372{\010\275\201[\214\273]\\\261<\236\272\206\275,\2163\275\312\240\247\274\365\270\344\274\300\217\250;Jom\275kfI== d\275I T\274\244\251Y= ;\237=\341~\315\274\016\224\231\275\227?\177=Y\375L\274\354\217\210\274;\252-=zC\202=$\020\022\275\262\034\334\274\343\321\261\274\2748W=\370\206\306\275\274\375-=\377R\273=\351\244U=\326\247\236=Oc\221:\177le\275\277\206\240\274\367\325\212<-\255\223\275\266\250\343\274\200U4\274\260L\227\275\230\350\204\2756\027\237=\334\031\334=FN`\275\037\260\032<\330\254\334\273\242\274\240\274\366\250\026>\3767\274\275\007\307l\274V\000s\275\361\000\232=\022\236B<\n\331\210\275\220\010\247\275=Q\327<v\361x=Y\233\247<\330\363i\273L^\032>\3302q\274\332\222\204=\364m\"\275\314F\366<\000\202\301<\r\024\375=\253\273\262=\331\000\017\275\036e\314<\265\021\366=\260\270\350\274\n\206\322=i\t\235\274^\004\001>h\030\006=X\036\r<LY\353=\366+\020\274ifi\275;\247\265\272z\0302=)\200y\274\352\002\237;\305\017\266=\003\201\245<\027U\225\275\362\315\306\274\377\344\344\275\177|\276;]\313\013\274\304qY=\210<*<M\237\020=\275\322\331<\337\r$\275f\373\021=\375\253]\275\252\216\326=\217\250\262\274\037\\0>P\t*\274d^\233=\276\301\252\274\371\306\026<\031\232\r\275\334>\265=\000\326\217\275^h\247\275\267\355\320=}\371\246=<\333\224\275H\354g\274\374A\366\2743\212\275\273\223\201\243\275\304\345\262\275\316\342\356\274\253c\337\275\021^_\275{9\377\274\017QT\274c\360\032=^\356\254\274D\002$\275G\211{\2756\242\345\275\020\242\270\274\244\344\\<\325q\347;\231N\223\275\351\024\332=;\331\215=\342\t\276\275P{d=\320b\027\275\201\216\231\274\300\262o\275\017!}=\242m\"\275$9\001>\314\304X<RV\375\275\363\373Z=%m\313;3\346T\2750\344\337\275^B\237\275\t\360\230;\223\337\235<f\277\346<t\351\214\275\257\272J;\340\221\336\2754\217\213<\354\237\006>\022\362=:\017\177\005=\0165\235\273\201\274}=\014\177\002\275\334\346\235=\334\311e<\325\236\004\275u\025B=\223u\214\275\027\264j\275\352\225\211\274\n\277\220=\373\215\202=\376\211\267\274\362\262r\274\236\217\242;A\204`\275\320\255\216=X[S=\021\000^<\014\325N<\212\261\231\274\214Q\256;\220X\013\274;a\347<\217\256\304\275\227\313\207=\367\0319<\327\320\242\275\332\374\013;\335\363\023==C\031<\207\201m\274\032\315\206\275\345\367\241<\322\210\002\275\007S\314\275\303gZ=\330Jr=~z.>J\027\300<iH\000\275\366\327\232=\2515\322=l\204\224\275\335\226I\274\262\375\033\275/4\217\275g\264,\275?\342\n=\n\303S<\367\332\204\274Z\356j\274x\\\037\275\217\226y=P\276\221=K[\3719\006\363\304<\365\341B=8\301\330<\340\230\241<\215\333\205=K\314\201=JYx\275S\243U\275\376}\275<\230\037\275=\341j~=G\340\213=\256}\253=\260\327%=g\312M=\230\334\352=a\314_\275\357\345\003=%\347\213=z\221\315\273\346\357\317\274\214\207%=\005\016\001<L\371]\275\347X\261\275\350\3614=\036\216\203\274R\341^=/.\307=\013\216\207\275%}\200\275\374\336\234<\322\202\230\275\265g1\276\2637\242\275\342\0368=\324\311\004=`\274w\274H\256e=\253\325\262<\214%\205\275\306\017\225\274\367?\353<\242\302\223\2757\024\200\274\3127\224=j\032\237=X\344\177\275L\377\233<\204\213#<\335\214\033>!#\321<\331\2736\274\326\264\223\275\037\264\224=\242\337-=K\031)\275?\363\272\275\275nh=g\221\277\275-\220\267\273}\rk=aD\241;@\264\014=\263\220.\274\317,\231\275`\031\327<\3610\036<\221\027\330\275\032\"\360<\354\\\225\274P:\210\274w;\203\275\310\336W\2759\266g=i\007\326\274_\017n\275\373ZE\275\367\236@={W\032=e\251\014>q\336\037>\366}\344\274j7\t\275\314\313\245\274\317\016\372\273\002\2109=B&\006\2760\226\334\275\000\0263=\365\0211\276Q\370\037<r\346\212\275\206\223\240=\334\235\327\275\243\213\346<\370\021\031\275\013\'\216\274*\037\014=\366<\245\275\353A\023\273\266}\363\274\'&,=\360E\200\275\317\246\217=\262\341\377\2743Q(<\372#\001\273\365z\244\274\007r:\275\214\027\237;\352\213\036\275|\300\272\275O\340\320;m\272j=\024\3446\275\343_\021=S{\246=\376\215\227=Dk\303<\352A\033=`<\314\274\3761S\274\210\240F=q!\227<J\273\247=F\255\211\275*r0\275\306\022\216\274\270\272\204\275\t\212\266=)t\202=_\316\317\274\367\344\323=\310\203\206<\250$\333=\224\244 =5\327\257;\206\013C\274\365\205W\275E\025\257\275=\013>\275\227\013\200\275\035\316\005=m\000 =\213@\017\275/\302\034=\204\223\276<X\243\001\2768\366\355<o\220d=1\246\374\272\313\335\2439\266\010\224=\200\031\306\274\004\346\331\275\271B\242\274Ax\253;!f/\274sw\371<[,\371;\364D,;\200\326:<^\303\214;\363L\035=..\264;E\370\207\275\234\000{=\245q\240\275\315&\205\275p\210S<\261\345\036=\364 \203\275\251\276\037\275\262w\371=\021\277\304\275U\2357=\323\364\266=\033\0041>\213\023G\274\222\3665\275\204i\033\276\233 B\275m\027\271\274 \303n\274b\305\033=\\>\362={\351\351\274\300\031\317\273\345\200\036\273\262\374\365<\016\213\002\274\327W\231<\332s\376\273U\227\212\275\342n\000=\224\254w\274\036\214\200\273\301^P<\316\003P=B\271\341<\224G\227\275\\4y=\344.\367\274\2746\327\275\267\023\031=\327N\333\274!\203\200=\374v\241\274!,\245\274gd\320\275+;\251\275b\314\031\275!\0042\275\002\3627\275\020\002.\275\034~\007\276i*\357=A\205X\275H\252\016\276\340y-=\207\223 =S\220z\275\345\232\307<\213s+\275W|\006\276(hI<\323\350\377;\303\337\372\275R}-;\nE\251\275P\277\230\275\333o\001>\310-\206=\260Rd\275\367\323U\274\214\346\222<:[<=\224\312\017\275\322f\223\274\375\0057;\275k\020;\213\361\n=l\003\206<\271D\304=^|\036\275\220\241\263\275\362p\210\274\214@\241\274\323Nr\274g\013\244=\332b\240=\334\312\346\274m\214*=\200\307%\275\374\373\243<\023u\322< \004\034\275\354\303\217<\234\300\227\275\337#\315=\367#\242=Lx\322\275\361\020~<F\r\033>\261\327\222;#\022\237<\337\255\273\275\241S\353\274\366|?\273\354y\364<5\000v\274\337E\211=;\332\314=\263&\005=\266\322\n<-\331\006\275\216\354;\274P;\376\273\330{\306=\333`y\274\027\\\277\275\026VT=\355|O\275[\356K=H\246\344\273\222g=\274\252#\341\275\373\275\326=\356^\376\275\324~\037\276\035\024\002\276b\270\250=\225n\201=_#\001\275L\370s\274m\267N\274\350\224|<Pj\326\275ia\315\275\365\'\010\2764\033\214\275\320\016\037=\320\252:>i\337C\274|\264\304=\374\026\023\275\235\300\263\272,k\031\2755\031\252<\334SN\275\260\322$\275\240\322\004>\360/\351\275\3324\035\274\320\254B=\312\335\010=\311\251A\275\t\261\351\275$\306\374;\r\022\201\275\016e\241=\341\316+=\337\243\260\274\213=Y;\350\332\237;\014\026\007>g4\005\275Ht\314\275\202\342V=\250\215\370=\334\233T\275\333\0065\275II5\275\273\030\220\274\3354\361<\025\335&\275\220\223\316=\003\314\346\275\361\357\'\275\343\331\333\273\n:\007\275\230\353p=\240\020\216\275\275\364\256\274\355\371\304\274\364\242\021=\034N\356\274\322|0=\305k\033=\324\217\002\275\323\201\314\274V\341\225\275\275&\006\275\342\365\026\273\010\264\225<*K+\275^vT=\234\372\251=\247\3158\274\245\315\014\275\341\250\257\275\257\375\006=\023\233:<\036\252\206\274\326\324|\275\t\324+\275I\244\004>\002\377K=\205\272\305=\004\372\242\273(\250\351;\3228\007;c\236\370<\272\245\302\274k\026\317=\341\323\002=v\355\313<\331\363\242\273J@V<\304_0\274\252`\206=\225\326\312\275\r\020=\273\230\rY=\":L\274i\225\202\275\276\205$\275\235\247\017\275W\253\276\274\316u\036>\211\017\006\275d\034U\274\204\203\214=J\037\020>\035\027\030\274\205\337\234\275\351P\r\275*\203\350\274.\217\255\275*\2633\275\215a\322\275\\\370\211\2758\332C\275\225\376\2619j4\356<\376ch=8\361\215=\300\255\302\274&\362\213<\022&g<3\230f\274\031T\216=\377\212\227\274\3378\021=\247\031\'=l\275Z<]&\r>i{\177<\331\357\271\274<\326\211=\027\254\264=\254\250\020>\255\371\003=\322\311A\275\222\375\210=1\007\266\274\225Y\275=\n\324e<\302\260\016>\tq\204<!\236\232\275\021\211\375\275M\310\004\274\201\330m<a\020\214=\325\365\342<n#d<J\307P=\372\321\352=\256\365\006=\274\260\214\275\030S\253=\367*\357\272b\211\237<\246\347\033=\317T\022>\213\323\252=^\345\t\273\251!\265\274\243\351\213\275\005D\301<\325\303\330\274\221B(\275]\325\'\276| 3\274\251\260\202=\007\234\016\274\326\013\327<\353\334\356=\320\033\005=\256\271\302\275\350i/\275l\261G=V\370\323\274\2067b\275N\3129=\334\rF<9\337\035=Y\275\330\275\205\254\006;\032\310\207=\272\233\312\275:@C=6\014\014\275z8\303\275q\017N\273\206N\301\274\202\320$>FHC\272\3704\266\275\274\256\251\275\256\370\034\275*\264g=vl!\275u\251\201\275\354%T\275\034\032\250\274\250\247\227\275\311gb\275\253H\266\275\026\307\223:\302\276\304=|A\263\275=t\320\274Cu?\276C\361K=\260)f\275\236u\235\2755{A<\365\322\323\275/i\337<\302\314\315<\024C\224\275X\317\001\274S\325\215=K\335,=B\230N\275P\305\262\275Y%\317=\332\004&\275\037\371f\274w\035\330<\005l\357\272W\366F=p%\237<\370\317\005\275\361l\177<\005q6\273\377u\026\274\315\013Y\275\335\331E\275\206\362\311=\333{h\275\333\035w\275@\335\317\275\363\030\203\275h,\305\275da\340\275\305D|\275D\316G\274\'~@=\225R0\2758\325\034;D4/=\037\227\331\274\005.\370=\177\205o\274\236$\243=\213\323\n\275\376\320\301;\311,\014=\313\250!=m\213\331\275\221\3316\276\371\0274\273\006\353\'=\317\006\351\274\252r%=4fJ\274\310B\026>x\353\254=\014\334+\2752%\3329\035-\202=\315\276\233\2750\222\204=\201\336%=\222A\r\274\352]\203\2750bT=S\312\237;\304\020R=\014\360|=\\n~\275j\345\213<W\020\333=p\240\002>\366\250~\274>\221h\275)\034_\274\242\332{\275\321\014\023=\343\003\203<-\026\277\275\002w.\274Wx\n=\310\311\205=\0346\202=z#\035\275\331\371v\274\333\2040<\300\344I\275j\364u<X\021\006>\360\356<\275\036\354\030\274\024&\002\275\332\371\267\275\nv\237\274\177eK\275}\375\340<u\373\032\275\330\361\241\273w\230\335\274\341\341\353\274\266\320:\274\374Vx\275h\034\310\273\270\326\333\274\215V\213<\276VK\275\374\337P=\317j\211<\017\200\'\275\003)\261\272\240V\201=R\226\265<\374\341\231\275\377\000F<\313X\366=\221\267\010\275\314M`\273\335\314\233\275\372\004\017=\004\342w\273d\352\236\273\333_\233\274m \237\274\333\305\224\275\365\245|=\374\245\032\275\235\000\014\275\313\201\274\275\225]\312=\253.\007>\224!\014\276YUl:M$\245<\234)\301=f\205\266\2747}j\274\275\246\203=\277)\225\274\024\3530\274\267\\\216\275\273l\210;\312\0311=DV8=\2328\201=\252\227\021>\030\320$\275;\221$;\020\316O\275\027[\355<9\277\363\275,-\215=\243J\243;0\320\211\275\330\327\027=\304\266\023=\323/I\275\377\024/>\270D2\276Q\216\271\274`l\n\274\354\036\301\275=\237\007\276\302(%\275\374\023\203;:\037\001=\255\366\251\274\354u\204:\203\266\324\275)6o=[l\021\274\225\240b=dp\277\275\235o\023\275\325q\351=,\377\200\274\330\221Z<}\024\020=\344\213G=\267\262\254<S\305&\276\331\326\207\274F\226\316\273\377l\033\276\214\026\025<5\226M\275\3327\2509\377%\350\273\233@\263\275N\241\271\275\026\022\234=<\\\244\275p\331\237=\n[\207\275\300\214\317=8%\261\274\2052X=s}\373\274k\323\247\275\217U\203\275iX\032\276\235\352N=\262\365\2439<\215x\275\332\224\337=\221\024\355;$S\273\275\2513C=\2527\t\275\263x\371<\241\024\216<o\303O=\214\007\367\273\234\3010\274o\313\024\275\004\301\246<\242\307;\275;=\211\274\254T\202\275\001\004\332\273\231\327\t=S\2773\273\216-1\275\230\255\211=\364\024\316\274>\241\003\275B\017\t=\347U\323;\262{\315=U\212\235\275V\211Z=RD\210\275ps\251\275\252\224\t\275-\354U<\237\023\246\274\271G\260\273\314\2740<5\211\254=\"R\r\275D\200\023=\216\374#\275\243\323c\275\353\302\030\272\206+4\273\320\353]<&\215\006\275\002\267G\274\215#L\275E\254\251=n\300A=\267\257\222=\333\336\230<\215\331\360\274+\353\225\2752tN=8T\270=\217\262\343\273\311\310\220\274\210\354\227<\325\273Y=\250\362\242=^\250\203\275A\225[>\373M\n\274\331 \315\275\031\370\351=\035\030\323<\357\031\235=a\214\004=A\r:\275:\365\310<\246\3432\275\361\206\024\276t\203c=\230Q\226<>\027\325<\367\024\033\275\316\304t\275r\330\025=o\033\237=\310|\215\275\263\372w<\326\242\362:\362kd\274\366\305\235\271\215\364\245=\014P.=&q\031\273\314\221V=V\005-;F\003F=%\014\267\275t\376\033\275\310t\202:\307Hv=o\037-\275W\320\327=\303D\306\275\327A\207=Y\366I=\241\271J\275\307\261a=\225]\207\274\363\345r\275\357\300z\274\016\027\337\274Hz\003\275$r\253\275A`\237<u\001J\275\002\310\200\275mN\001>\207,\273\275e\222\274\2754v\037\275\301\343\311\275\247\253\037=\037\032\017>\265aC\275\310pb\275\215W\030=4\377\204\274\264\246\204\275\237O\006\274\351\330\235=\372\366_\275\347M\375\274\"\301.<\267h\232\273\000A)=\363\360b>\277z\243\274M|\203;\321/1=\003\0374=\205\017\030=T\221 =\231j\355:\270\t%\275\370/\244;C\"s<\273\247\005\275\020\251H;h\346\340<J\017\302\274xK\314\272\207\250\275\274t\377\r=ZNF\275\213\230\226\273\356J\362<M\205\t\275\330\204\002\275\010`\001>\344\340n\275\0103\246=C\326-\275\346\234#\275\305\363\212=\225@D\275\322\032\315;P\000\351\273\241zs\274\371\3371\275\340\316\230\274\344^T\275!\201\221\275\330\325\037\274}\220\335\275\271!B=\034\2542=\014\317\255\274\352\236\021\274`Zs;%MH\275\302\000\211\272\332\310\213\275H\256\244=\367xs=\217\3258<#\207j\274Eq\364; \235\301=\030\244\323<\022-\216=\203\246E\274\025\215\241\2746\2703=\202\252\304<\330\226\265=x\245\r>\003\"\252\275=K\354=\230}!\274\330\273P=\177u\226\272\346\334\226\275\224Dj=\375\362\025\275\3365\222=\230\330\347\275I~\331\274\227i\220=\273\037\222\273\322\360\r\276\036\032\230\275\326\363\t\276\340u*\273z\032\315\274\025\345\311\275\"1\205<\240\031O\275ZG,>\024\316\360\274\010/\020\274C\350$\275{s\004\275sDj\275\005\027C\275\ti{=\036\336\311\275\305O\261=<?\224<\332\030\302\272\034\021\332\273\356\'\206\274\216\312\313<\305\2432\274\213\"\021\276\267C\341\274I\007\001=\355fV\274{il\275\343\266\357=\352v~\274\342\360c=\204\313\350<\277\273\232\2754,I\274\237\232\031<\327\260\342\274\221\242\200\275\346\t]\275\216Xj\275z{^=\357N+=\003\003\247\272\307\374\017\274\346\314\025\275 !M\275rP\317\274A\3533=\303\272:\276\250$y=\246FF<\206;\312=\366\260\200\273\037N\024\276\036\377\003=Q\023m\273\342\022\016\275\264\017Y=\235o\235\274\005X\364\275\206\204\213=\270\261Y==Li=n\026\361\275\006\033\267<=d-\273\004\356\315\274\332=\206\272\201]\265\275\023XV\2741\366\270\274;\332\307\275\"\256><\227\263;=\217\331\024;\022\362\211\274\234\374<;\261;$<\237\344\300\274\336\nN=0J\354:[s\"\274e\014j<:.\215=w^\326\274\323\3207\275\257i-\275H\236\205\275\304\221\265\274dGq\275\343\'\201\274\344\270K=\316\371==\330\010\363<\t7\231\273\232\236Z\274\304\310\265;\221Ey=^\206Y\271\210\363\233=\316$S=W\376 \275\005jK<\003\237\211\275\017*\256\275\333\366K\275_`\026\275t\353y\275\265\327\327\272\302\001\005\275\213\327*=\006\213\'\276*\213n\275M\331/\275G\342\211\275\207\303\216\275\360\311\326\275I\026\216\275:\022\237=`\200\205\275iu\216\272\027w\\=m\306\221\275z\307\232\274\204\273\324\275\336\214e<\245<\216=\252\226!=I\313r=N\201\226\273\"\276\251=\361=a=;\241d=\026f\305\2743?z=L\320\201=T\373\"<\267\334]<g\320\014\2768a\226=,N\363<\001\267\230\275\014\206\201\275\336x\331\274\305\263L=fG\255=\'\322s:F\225\275\275\364OT\275\267\022\350\274\255\307\023\275y\007\375\275G\t\245\274\236-4\275\224\300\264<\375-\314\275\354t\003\273\2455\221\273\233\376\237<\317\0137=\036\306\307=\271CT= \t\r\275\265c\373\275\262\006\325=N\\\300\275\334\364\336<8\240\322=\360Y\271<\240Fe=!{$\274\245r >2\004\204\275J)\214\274\r\016\216=\"\226\035\275\355\267\331=\2340\206<\017\204\201\272\301_ \273\016l\214=]\237\257\274\257R\332\274)z\325\274\226\362)\275\246D\234=\227\375\217<\337\300\333\274(\236\216=\313\233\217\275WG\006>\034o\270<\356\003\255=\204\342\324=\226\231\244\2755k\356<\356Z?\275\223\357#<;\224N\275\036p\243;\320lQ\275\000\346\016=^\033\211\275\324Y\244=\027\022\247=\035\314 =\221\235S\275\222}\017>]\234\255\275\007\000\255\275\243\014\266<\'K\027=\313$\242;\031\353\210\275\274\300@=\226\274\013\274\217\250Q\275\323\367\235=\260\267:;\341\333\033=k \364\275\315C\036\275|\037\271=7\307?\275\310[\274<\004\345\202\275de4=\3673K=]\274!\275T\001\037=\207\004\365<\243\210\212\275\303{\227\274\"\372O=\304\370\345\274\247Lu=\227f\254\274\300\224\217=\334)\022\275\326E\244<\243\302\274<\235\202J\275\254\345G=\2144\212\275\013\323\021=\353P\212=\337\354c<.\246[<\364X\276=J4\022\2745~\325\275\374\303\267<\017\371\263\273\307\255\370<]\257\217;T>\317\275\362\"\222\275nZ\373\273n\227\245=q\034\215\275\002c|\274\0064\002<\342\360N\273\013\315}\2749\351z\275\335\316G=&\337\177\275\325\335\004=\370vE<U\030f\275%\321*\275\2743~\274\035E\301<\016J\252\274\247\"`<G\3238=\247\025Q<\367>\375\273\326Bq<\223\305X<\024\2526= \222\"=\n\034\375\272\243\341\225<1\312\200=\270\276N=\366\224\014=b\371{;\233\316\305\275\2439\275=\225\177-=~\224\030\275x\366)=\311\023.\273Q\331(=\314\313\010=\3363G\272\251\254\227\275g\326\364\274ME\214\274J\222\031\275\226\000\006\272+\243\037\276\004\317/\275\277\247z<\340\255\355\275\277\0276=\231\235R=\373\020h<\223\320\311=\276\325\231=\207>n=\221\271\334\275~\234\365\273\265c\304\275\345\261z=\234\013\252<\013M\363=\2310\242\274\005 \037\273\224N\310=\000&/<\312\245-=9T\272\274C\024\270\275i\345\305<\373N4\274\321\332\236<\272f\307=\217j<\275\022\330\212\273\317\010s=\306zZ\274\323\237\324\273\224s\231=3~\201\275\035;,=\026\035)\275\274\376\017\276Q\312!<\262\367\215<\335\322=\275\305d\317\274o\347V\275a\205\261=(n\317\274@\217\004<\021~N=\345K\313\275UA\227\275P<\206<\001\021`:\205\235\346<\377\240v:H<\227=\027AV=\031X\206\275#^\372\274D\336\271\274oF17@}\345\275\301\"\313<\313=\324\275\005}\320\275\326\216\026<\003U\032>\326\267X<\320\360;=l\203!=5\035\034=\352}\225\275\205\366m=\316V\274<-\351\224\275Rm\363\275\325{\263\274\355\036\036\275\262\307M=fd\273=X\253\246\275\230\347!;\264\330\271<u\300_\275\250\366\020\275\211G\256=\033O\375\275\256\004\205\274$s\002\275i\202\304\275*C\200\275U\202&\275F\237\313=t\334%\275H\273\021>U\3169=\203\312\312=Z[\231=#\215\341=sg\352\273Y0\264\275\272)\020\275P\006\327\274\021r\300<2^}\273 \361\214\273Z\344\336<\206\212\344\274\"\n\204=\005\277\357\274#$t=e\332:\275\351\355\330\275\025\366\t>97\202\275\343\n\212\275\246\337\'\275k\265\340;63\273\274:s\213=\307_\210\2759\310\020>$\375\016\276_\033\016\276#\010h=A\354%\274\361\036\337<\251nu=\353\363\317;\330|\235\275\376\266\210:C#\010=\366\232\301\274T\032q\275\215\t\245\274\234\326\307;\324\347\342=\277\313\332<y\233\246\274\303\333\301=\257\304\202=\377`,>B@\353\274\004\304\362=\330\341\021\276\261\325\214\2756\371\270=\225\371\316:\223O\326=\343\203\001=\222\353Y\274\377\021s=\337\323\261=@\306\374\274\'\017\355\275R\314\336\275\247~!\274 \365\217\275o\253+\274ER\205\275v<\335\275*\001\025=\232\032\225=\306\312\310<\351\351\201<B\272\266<\252\010\377:\021cu=\004H\007=\275T\246\275\275M\257=\323\014O;\3262\003<\022\350i\275\013\nC\274\217\'\272\274\024\346\244=;t\225=\256\277\010=\357\317\007>\224F\225=\344\204\217=w\372\t\275\223\211\013>]\245g\274?\2470\274p\200Q\275\264\321\320\275y%\350<6\023\247=\337x\\=\371\365\030\273\320\032\233\275w\300B:\304h\203=\267\237\232;\305z\273\275\261\343\327\272\270\263\353=X\010\370\273\\\365\331\275p3\213=\"\021\322\273\036\177!=\223\222E\275\341\262\315<A\0177\275\250\251\374=\335\210j=\3070\005\275\023h\351\273\243\024\356\273kr\273=7\225\224\274\323\200\246\275\250t\353<\375$\206\275\325Qo\275\215\340\214\2755\227Y\274\262\033\376\275\336\336z\275p\321C\275\334\306$=p>\010\275j1\325\273Qr\215=\214\345\243=\253q\265\274\234#\005\275\306\306\232\275\341\247\302=\375\347\343\274B\304k;9q\225=4\254\253\275\323\364h\275\343\250%\274y\362\311\275/\\\244=\re\267\275P\254W\267\264z\023\275F8\211=Q\356J\274\227\222\336\275\355#4=S \337\274\252\325\204\275\255\210\203=\013\\.;\314\035\234=)!\360<\\b\256\273FvM<\220$\031<b\020\344:\005\010,;W\3067<Q\2213\275\023)X<\352n\247\273\227<m\274J\345\322<\275\r\354\272\335\304\272=\307D\031=\3445\333=\257\003\330<N\3134>\036F\257\274\013O\234=\037\206\377\2756\276\220=c\027\274=B):\275\335\355l\275\226\242b\274\304\255.\274V\rE>]\224\321<\303\260U\2751a\225\275X\243\227=/\315\303\274\234\003\022>\225\200_=\340\024\n>\230/\335=Qe\004=\374\371E=R\265\242=\222\t\231\274{1\232\275\220\373\240<\260\354{\275\365\260\014<V\200\205<Z=\336<:\017\202=\024N\372\275\\X\252\274\213E\024=\2002g\275;E\267\275\302\263\207\275Z\211\314\274~\311.\275bC\347\274\242\262G<o[\233\275\346\346k=\343l\177\274\311\365g\275\227\346+\275\301k\270\274r\241T=\003+\001\275u\237D=\272\260l9\272b\265\275T\254\027=e[\205\273\001~\217\274-\277\310\273\357K!\275\303\312d\275\250\314\214;9\n\\\275\007\252\250\275tcA\2758r=:pY\036=\266~D\274\237\271C\273\276\367\\\275t\202\323=\327\031d=\220\030\350=\265\235\244\274\002\326\n\276\325\274\333<\262\346\203\275Gg\271\273\013\352\220\273^;\200=\342\236\221\275\341z\243\274\360C\010>S\373\270=/y\351;\222I\210\275sO\371\274\345\344\371\274q>\036\2743\377\215=^\333\374<Kh\330;\337|m=\262,R\275\346\324\317;`*\277\2754\202\205\275~{\014\275\364\336\372;`\271\230=\213]\003=2{\250\273\206\367\224=y\3655\275u^?\274\242!\266<\213\010\211=\023kb<Z\035\234=\214\357w=}\342r=\341\332\r=\355\275\234\275\225Q\377;\000\027i<U\201j\275Ly\315\274\014\232\014=\316\032\327\275\031\273\336\275\351\367l=\\%\266=\363\366\253=\274>\340\274a\336+<q6\363\273\2376\344=\272S\035\275\260\375+;q\033\035\275\230r\300\275\2655\320<\233X\035>\231\203:\276bQ:<\035\014\272<l\313\"\275\233\271\270\275\251Hc\275\266\'*<\232\201\371\274M4r\274\261a\223\275\036Z\372;}k\372\274\214\265\243<<(\300=\247>\245\273\235.\206=\243\277\321=]\300o;\005\204\246\275j\314\365\275y@\355\275\230\363\265\275\276T\221;>\272\"<5\372U<\371d)\275q4\022>\354\302\264=d\000\037=t\304a<.\262\016\274w\204%\275\264j\237=({(=z\014\332\274\341*?8\032\306e\272V\333\277<,\256\222=\366\343E=$YV<}\234\267=\226)\017<]~\345<\004\177\240=C\376\215=l\204\335\275bZ\375\275\235\344\350\274\'y\032>i\310@=\346h\277=\325e\016\274\346K\212\274\371\340X\275\213\315\362\274\350\310t<\014\361\006>$\025U=/\224>=\266\344\356;\271\363\024\275\004\360\251<\361\177\352\275=\0356=k\2148\275\005\036\372\275W\306i\275\351\273\374\274\351\316\247=\033e\025\275\264d\341<77$\274To\023=\252\255\323\2748Cu=M8\373<q$\255<\025Z*\276\257I\273\274\2759\243=\330&d\274\213_Y<\340zT9\216]\262<\276\264\364= (\006\275\341K\217\275dz>=W\252\345=2\215\013\275\014JN;b\rv=\002\310\010=\260\273\203\272\002\375\301=\236\253\252\273\257\372\023=\021\214\250\274\227{\367\273\210\023\250<\361O\020=Wm\261<?\374\200=\001\342\021\275e\313\303\273\013,\200\274\2715\233\274\177\255\212\275\006\370\024=\240\263z\274\317\354\361\275:\341\330\274\250\300\321=\262B\332\274\246y\033\273\327r\032\275\201\235\005\276\231<\037\275\002\241O\274\324\3531=\345\313u<\240f\223\275{%\000=K}\005;+\203\220<\201#\352<\253\360\204\275VF\362;\220\026\326\275<F\230==\177\363\275\rt\006\275e\316\362\275\245\207\032\273o\225\271=\202\301\022\275\344F5\273\246W\277\2747@\237<\253qj\275J\232\343\275\t\376*<\010:\230=Lto<qvd\273\255I+\275z7d=3\324\332<\301Rd<[\250p=\026j\320\275\016\233\316\275\213\006[\276\033\365\275\274\217\"\255<\340{J=\230\325\224=\267\014\257:\002\372\334<a\\\003\276\271e\220\274P\222\300<\000\255>\274B\032\217\274\026\341\272=\253.\331<W\234\220=\207\252\371=\267\014\026\276\372\240\275\274?\372\203=\340\021\214\275\241\221t=\221-\024\276\262\037\303\275\031\206\344\273Cc#\275\226b\001\276\261\001\003\276\245i\255;pG,\274v\215K<\020\254\202\275\363\0259\2758v\241\274)\245\241\275+\304\252\275\366Yt\275\036\033g=?YA\274\353\343\273\275\314\272q<\302.\n\273\024\370\216=x=\330=E\350\026;C\356X\274\341\250*=;\351G=\363\021\025=+d\243\275\177\304&\276\341\t\037<tmC\275q\201M=\243\323\355<\225<J\273\272=\013\275\277E\201\275\017\237V;\363\360_\275\346bS=\nH\252\275\n\264\315<=\217\252\275\270\306\243=\243\2550=S9\210=3\257@\2757\356\335<\307\310\362\274L\364\353\274W}>=\247\270\000=\205\260\243=\357\330[\275\254\242\262\275X\273\212=G3=\275\251\270\316\275\357\352*< \340\321=<\241\274\274\215\207\316\274\322\007\004\275o\272\236=\253\341\235\274\006\355\010=6\274\245=j9\356\275d\312\242=P\225\202<\273a\243\275\266\024\202\275\364o\257;DV\342\275\004$\304\275\354\217\014\275\265\032\363\275-)\"\275n\241^<\347\n\026=\317\203\331\274\273\261\234\275\227:\254=~\016\247\275\3465\334\272\221$N\274W\222\221\274;\333\010=r\342f\275J\335\201=\235X\272;u\210L\274\020v\034=\266\207U\275%\360\335<\312\372_\272B\242\347\275\323 \337\2732\215\243\2754T\252\274\252\221\273<\000\201u\274\252\263\225\274_\013\262<\033\262E\273\361R\255\275\256\270\231\275 \267\235;\353\305R<f6\350\274b\232\234\275\013Q9=\327o@=\335\215\226\275\324\021\002\275?yF\274v\246\324;V\361\210;K\311&<x\013\251\274;\236\260=\005Z\347\274s\214B=v\265\262=\177(\352<\316\r\025\274\3351\033\275#2w\273\245A\030\275\377cu\275\247\227\312<\25161\275\322?\322\273\032\210\201\275\337|\010<R]\013=v\212|=\223\245\007\274\364\006\336<\304(\370\274\233>\022\275\366\267\227\2751\314q\275[\350T=\220f\203\274n\307\300\274\020o6\273)@\337=\033\032\214<\2745\247\272\231d<\274\344P\203\275\275{\262\273\2447\326==\233\327\274\312\201\354\274r\274T=\231\302\n\276\242&p=\360,\247\273$B\"\275\240^\210=\3216&<\330=\217\274\303\213\261=Kr\250=\252\255\376=$\325\254\2758NP\275n[X8)\370\222\275h\330]\275>\216/=]\2413\275\374Z\275\275)a\320\275s\337\000\275\257#\373=\\\005@\275\276\000\205\274;M\211\275\026\227\244\275b\375^\274?\264\240;A\343\231\275u\037<=\3234\211=\022\310\211\274X\014\320=\263f\277\275\364\303\255\275\0343\n=4b\212\275\327f3<RA\347\2751K\220\275\002\034\256\274}\242\213=\310\377\246\273{\332\022>U`\201<M\030k=/\t\307<\003\276\240\275\216r\260=\317\261\302\274U\036\277<\354t\376\274Fc\202<\230\200-\275\354\374\n>\213\347\242=uSe\275*\246\367\275u\274w=\272:\211=\365\206\031\275\245\000\277\275\204w\304\274\255\")=\215\223\247\274&\021\217\275h\177\221\275\220\367\250\274\363\375\024<\304S\214<P\336;=\330#\246\2755C\221\275\323\244\260=P\343\274=\2142\001\275\245\323\353\274P\331\037>\371\030l\2755^\353<\376\333\002\275\340\3135=-K\316<\275~\211;.\363\263\275\271FM=\300-)\276\206n\355\274\313\221\227<\241o\302\2750\213\211\2751\'\022>S.\212=\032\2323\275\205\312\005=\306\264\211=\305\221^\275\373\2650=\252\372]=\247\246Y\275\372r5=\n\245\242=&J?\275\363x\255=\244\303\200\274\326\361\371\274\343L\206\273u\235\004=\226O\243=\203\033B\275##\237\275\214Qw=\322\330\243\275\307\271#\274]]4=\rL\303\274\365\2212\275U\365\314\275\3549\235\275$\n\205\275\200w#\276yQ\302\274(\326\'\275<d\206=\364b\204\274\205\362\216\275_\033\321\274&\341S<\r\2455=\213\322\037<v\247<<r\'\216\274\376%n\275e\204H=\020\323\356\272\325ZO\275\213b\275=\037\373\260;\252\205\023=\330\212\207\275\356\007\307\275k&\024\275\331\227\207=\213Kx=\027\344\313\275u\355c;O\340\266\274[)Z=J\273j\275\tu\030\275\331\220_=\314\t\242\275\372\227e\275.\326;=\251M\215\273\025\347)=-$\317<W\3360\275\323\273T=Nj\345\274x\244\205\2748\035\020>\210\215R=\220z:\274S\376\233\274\216\022\027<4\007\265\273\364\261(\275\230\277O\2752N\227<A\177\203\274\003CA\274\032\312k\275\032wj\275\374\216,\275\001zb=2\205w\275\344\000/\275\275q\256\274\230\240O\275\003B\'=\030\305]=\321\320\003<\033\033C\274\205\017\272;\301\213\374\274\354\365$\275\310\212:;\253\243\374\275/g\005\275##;\275\266\353\277\275\364zM\275\353\'\232\275\273.\224<\237!\234\275\326a\332<b\256\317\275\030A\005\275\327\234\034\275y\334\034\275\310\\\005<\021\276>\273\327w\263\275\213\271\177\275\277Z\034\276\376\025>\2753\014R\275\260\221@=P4\310=/+\235=\007Ck\275\326\240\225\275\346:[=\243\250U\275=\001A=\204\'y\275}\326\370=6\221\006>\305\\\270=7\365\217\275\216/\211=\261\343n\275\350\302\'>\267Pg=Z\301\260\2734V\262\273#\230\002=e\000\032\276\327\'\324=\376l\"\275\337\027\\\275v\202\273\275\370\202F<Az\276<Z\307\334\274\003_\347<u\033\326\274\237l\303\274\371\031Z=y\363\251=;2t\275\034Z\315=G\230O=\020\027q<\034\027\247\275\3650\326<w\317[\275\241\327\310\275Ic\216\274\340\n\242\274WN\"<&\343O=Km\207\274\345\277\203=\337\346\365=\267\2500<3\361\356\274.e\224<\376\366~=t\306:\274\220W\256<\353\262F<\335\364\350\273W*l=\261\215\345\274\225X\301=\310\273\004>\302\364\007=\361E\347\275B\263-\2756\022+\2755\354X\275\235|6=\033\225^=\250\355\326=\324\013L<0\224\320<\2315\362\275z\"\266\275L\353\240\274\202\356\230=\326\005\371\275\253)V=\364\345~<\031\253V\275\001\242\213\275\2178\243=\324%\360\275\311\344\225<M\255\033=\337\310\032\275\250 \310\274\315k\207\275B\305\252\275\312\274\372:\033\377x\275\013\277\356\275\357\212\257\275\363sc\275}!\204=\346G?\275W&\002\275J\363\207\275Vp\343\274\267\2649=Io\037>]\252\346\274\206(6\275\272\233y\275\365.\234\274-\216\216;\227\303\212=,\027\223=H\354\006\274i\306?=1A\311\275^\206\226\275\275\250\300=B+t=k\372\023=!\306d=\317\270\254\274\003\326\361\274}\030\213\274_N\'\274 ;\177\275E-\304\275^\351\335=\233\036\260\274V^\274<0\266g\274\355\027\270<]\240#=\253\277\264\274\253\"\322=\234\017e\273\010\204\227<\214o\177\275\264_\256\274\246c)\267]A\024\276f\"\357:\207\231\213\275:\t\345\275\364\366*\275d\2076\274\214\216*=\346\276k=\217\243\344\275\333\n\006>\212R_\275:\027\275=\313x\277=\321\246\355\275\360\257|\2754\350#\276@\332\317=E:\303\2743\375x\272\255\352\302=|\340\245\2758\225\305\2743\317\205=\270\023Y<\027\310_=\351y\213\275W\3172<X\332\273\274\276l\267\275\347HO\275V\010y\275R\373\262<\347\013-=\374\200_=\331)/\275pz\212=\317\227\316=\262\364\226\274b\201\216\275OFp\274\256R:\274\221\304\201\275\3646\307<\013\000v=@\010\001\275\3540\206=\255\260\226\275\016{\350<`\357;\275\376IR=\020G8=\235\013\261=n\\\231=i\351u\275\032&\301\272\232\311\216\275DqU=E\200t=\276\022y\275y$\202\275$\320\254=\220\226\006;\341m\007=\377}v=3JW\275\010\332E\273\277!\316=\263\215\300\275\2162z\275\177\336\326=\313\257\331;]\017\336<3\247b\274\244O}\273\336f2\274\272j\006=\036\341\013\275\210\242\001\273\030*\236<\2774\214\274HP\020\275\274\340\255\274WO\211\275\035A\363:\r\231s\274\2663\300\274\230s\213\273\257\325\004>7\002\340\275\307\322\202\274z\r\177<m#\317<<\211\341\2723\002\264\275|@$\275\351\203\033=\256\016\341<\363c\212\275H}\361\275\346\324^=\267{\307=I\205L\275\264y\217<^\361W\274g\264\313\275\242x\254=uM\025\275=\312\250<\267\203\334<\215\030\030\275\225^\230\275\302Ez\275q\002\n=\362\376\246\274wl;\275f\216\243\2755\023\030=\027\276\001\275\254\322\251\275\313\020\302=I\210\323\274\220\242\022\275\321\357\224\2730\277m=3!\233=\217\352\031=\025=\230=\005\360\\<(\201\347\2746t\301<)g\213\275S3v\275/\205\230;<\346<\275W\346\t<\033\030X=]U\034>\371\312\000\276N;\360\274\034\235\025\275\017\"\302\275\367)x\275W\222\027= \030;\273\000Z\244=\312{\334\275$\362.\275\335\254\233=\300i\320<\214\032\230=\253P\032\2751\242#=\366\210P\275Z\001D\275\272\354\033=fk\344\275@\313\242\275AO\234\274\206\257\353\275\366\374\205=\000e*\275\303\374\016>\340r\031=C\021\371=\n]\222<\354\rA\275\212N1=0!\273\275\203\371e\275\013F\243; \247j\275Z\273\037\275+\205%<\332{\017=;\315?\275\235\026\210:\335c{\274$\277\033\275W\037\205<\334\"\334\275O8<\275%\0010\275\215Q8=\235%.\275p\3339\275\n>\316=\317\215p<\253\335\316=\312<\245\274\356\330\300\275\375om=\034\234\327;q\315P\274=\253\317\275\373\030\233<6c\243\274gO\312=\221\214\013\275\207f\243\275x\360b=Tz\232=\021e?>\237\227\211;\2104\014>\263v\312\273\347}\021=U\301\225\275\363\\\311\275o\376\036=\017G\206\276=\274\342\275\237d\274\273\266\325\236=;\"Z<\215&\372:z\313&\274$\225e\275P\343\021=\nL\202\274w~\217\274\004\023\216\274>\211\333=\243%!;\353\027{\274(\361\r\275\220\255)\275\254\251\355;\305\204a\274\326\336\"=j\331\030\276~fn=#\337\353\275`\211\016>\352 \321\275T\331\311\273\021\273\256<\312\223f<\263\025\352\274\017#{=\231L\000>\351nU=\255\226\246\274R|\241<h\246\247=<g(\274\314\005\277\274\374{\352\274|\'\212=\372\226\270<H\021\317<z\036\307\274\032\226\003>\276\202\347\272\304\257}\2754\\\021>P\250q<c\206\220\275Q\375\245<A\272W\275Y\312\346<\024\372\302<\007\010\263\273O\347\2729\365\374\343:\366B\320\275\321\013h\275\276\354\370\275]Tk<L\267$\275\n\323\275=S\300)\275\022\326_=\n\230\002=a\231.=+\007\362=\020\323\343\274Ey\005\275\001\205\274<\027K/\275\224=\372\274\300\366\230;\362R \2752\304\311<~o,=\032\'\177\275\306z\'\275\016\372\016=&c2\276\346\317\032=\r\363\301=S@\022<\227R>\275O\007\017=\332.}\275\277r\325\275C\004\251\273\337m\340<\373\014\317<\025!\004=\224(\023\275\225t^<C2x=\000N\004\275\035Q-=\025\373\267\272\036\003+=\334\373)\274?\366\347<\327\333\237\275\370\323|=\267\263\203=\232\007\276<\341k\201\274Gp\213=\201\300\300\273\n\031h=\275{\371\273\256qS=\262G\332<\313&\270;:\236\325=\374\027\241\274\212\332\235=\265\334\354;-&^\275`\355\271<\373\236\207\274\305\356\270=\3730\267\274\365#\251<7\314n\275\"\010e\275o\342\243\275\030\3668\275\242-\316=d\003\326\274Uph\273M!\342\274d\361\006\276+q\313</^)\275\237\205\364\273/\2051\275\214\366\017\274Q?<\2753>\036=\217\352\001\276o\324\324=\200Jv\275_Q\251=J\344\t=y\331D=;\314i;\351_`<\t\006\r>\'\016\265<\304_\240\275\367\240\264<\342\233\375\274\313\2725\274\355\317>=\224\272\204<85\211=\334P@;\025\337d\275W\034K=D\223\n=\206\324\370:\221\320\274\275\000w\310\274\025\022\233=?\234\246\274\304\360\227\274\314\0174=o-\356\275L\360\247\275$[\034=!\202\301<VhA\2758\370/\274\355@\372=e\014\020\274\277\274\001\275\376\273==`\364\356\273\254Hl=I\317\250\274\236w\237\275\310\270\357\274F3\210=\036`[=\"\351%=bLz\275M-\203<V\300\211;C\306\t=\216@ \273s`\222=-9\277\275\247\035`<+\0165<\3056\360<x@\222=\201\034\264\274\370\264\257=!\242*\276>h\263:;\313\245=-\216`\275H\0102\275\223\177\327<\031\000X\274p\210y\274\370i\t>\240\355\t\276\332F\302\275\215\347]<\272\351(<\203\030\242:mh%>^\030\343;i\024k\2758\352c\275yo\335=\202\320)\275\320\341l\274^z\022==-}\275K\0370=\274\311\t>\307v~<*)\314=X0\340\274\336\203\343<H\001\377\274 \323\336=\253\325\342;}\177n=G\016?\275\256\031\217<\007\364\304;\271\255v<\257\355\355\275\"\001q=]-\252=NV\236\274\246\217f=y\223\251\275\230\367\355\273\201\221?\275\001!\252\273h\261\234=\233@\307;:&\204<\234\362\230<^l\310\274\221\367h=[3\322;n\020\336<6M,\274\355\376R>)\250\222=\377\216\262=|\256\305\275\016\033\237<\204S\033\2757L\312=\302\tv\275\340\243\354\275\n$\033\275mD3>\2732\303<\310^(=\326B\207=:,A\275\201\304R\275\276B\271\274\206\030\301\274X\371g<]%\033=\231\004\307=\034\242\217\275\371/\250<\341\245\256\275\312=.=<B1=O\0202\275\237\261}\274D?9\275\300\215\267<\376\352\234\274|\334\201=u\354\346\274 \251\327<\224\373\363=\246\333b=\265\324\256\274*\273=\275_J\224;y\010K\275-p\230\274\244\331\021\2753n\344<\345\342\216\275\014\355?\275\206s{=\262[\016=\334~\335<\235\236\224\275\2441\014>iB0>*N\266\272\323\006\010=\271H0\275\221\205\n=\n\005a=\004\206\233\274\3235\233<)\262*<\312\217]\275\225\370\243\274Xy\240\275\230\373\033<\226A\237<\031A\n\275\336\345W=\242aM<\000H\025<8}\350\275\361\017\220=a\235\306<2!\037=a\274\340\274\327\005t\275\315\267\231<\274\322\303\275\030\236\021\274\006&\251\275\303\361\352\274\027\365\371<\311w-\275\232\317\245<.\n\373<\320\022S\273^\325\366<\315\2317\274N5\306=b0h\275m\320\275=P\000F=\334\264\253<\364u\236<u\333\004\276\372aC=,\222\302\275\212\2474=\231\027\224\275\035\247;\275\350|B=2v\352\273!P\213=\364\342\231=\374\277\316=\307\204\206=3\212~\274\235\000\233\273\370\350r\275h\344\230\275\\[\334\275/\263\311=\270\214E\27336\263\275$1s\275\362\001\205\275\270\376\221\275\337\016\017=\270\345A\275\334\354h\275\312$T\275\337r\227\275=0\377\275b\035\200\275\n\356\244\274\302(\304\275\302\234\003\274\232\252g=\357\234\365<\241\351\211\274\036\246\334<\337\274\343;\277\251\026>U{\231\275-%\273\272\360\305\016\275v\277\251=EB\273<\026j\001\275\312\256\\\275\217\335l\274\270:X\275|\221>=\302qd=vS\032=\250E\224\274\350\214\024>T\260.=G\226\250=F\233\201=\244\312\024\275\232\024b\275\336\300\003\275\350&\277\275yYF\275\203\370\203\273\365\202\357\274\207\013<\275\343\2277<\310G\030=\023\325*\272`\325\020\275\300R\275=Z)\233\272\344\2462\275\260h\342\275g\340I\274f,\257;\357\273\243= Yf\275\236\2542<\237\377i;\376Uf=\335\022\213<n\362\223\273\357\226\244\275S\205\"<\322\014\017>\252\317.=+\236\326<`\237\307=\300\244\357;!\326}\274\263\360)\275\t\250\216\275?\306\362\274Btl\274\265\222f\275\203.\010=\236\222\266=\232\364_=\303w\262<\3510\202=C\336\031=S\316q="
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "lstm_2/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/concat"
  op: "ConcatV2"
  input: "lstm_2/Const"
  input: "lstm_2/Const_1"
  input: "lstm_2/Const_2"
  input: "lstm_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/bias/Assign"
  op: "Assign"
  input: "lstm_2/bias"
  input: "lstm_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/bias/read"
  op: "Identity"
  input: "lstm_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/zeros_like"
  op: "ZerosLike"
  input: "lstm_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Sum"
  op: "Sum"
  input: "lstm_2/zeros_like"
  input: "lstm_2/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_2/ExpandDims"
  op: "ExpandDims"
  input: "lstm_2/Sum"
  input: "lstm_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile_1"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose"
  op: "Transpose"
  input: "lstm_1/transpose_1"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_2/Shape"
  input: "lstm_2/strided_slice_12/stack"
  input: "lstm_2/strided_slice_12/stack_1"
  input: "lstm_2/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_2/transpose"
  input: "lstm_2/strided_slice_13/stack"
  input: "lstm_2/strided_slice_13/stack_1"
  input: "lstm_2/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/MatMul"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_1"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_2"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_3"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/MatMul"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/MatMul_1"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/MatMul_2"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/MatMul_3"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/MatMul_4"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add"
  op: "Add"
  input: "lstm_2/BiasAdd"
  input: "lstm_2/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul"
  op: "Mul"
  input: "lstm_2/mul/x"
  input: "lstm_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_1"
  op: "Add"
  input: "lstm_2/mul"
  input: "lstm_2/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/add_1"
  input: "lstm_2/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value"
  op: "Maximum"
  input: "lstm_2/clip_by_value/Minimum"
  input: "lstm_2/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_5"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_2"
  op: "Add"
  input: "lstm_2/BiasAdd_1"
  input: "lstm_2/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_1"
  op: "Mul"
  input: "lstm_2/mul_1/x"
  input: "lstm_2/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_3"
  op: "Add"
  input: "lstm_2/mul_1"
  input: "lstm_2/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/add_3"
  input: "lstm_2/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/clip_by_value_1/Minimum"
  input: "lstm_2/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_2"
  op: "Mul"
  input: "lstm_2/clip_by_value_1"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_6"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_4"
  op: "Add"
  input: "lstm_2/BiasAdd_2"
  input: "lstm_2/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh"
  op: "Tanh"
  input: "lstm_2/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_3"
  op: "Mul"
  input: "lstm_2/clip_by_value"
  input: "lstm_2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_5"
  op: "Add"
  input: "lstm_2/mul_2"
  input: "lstm_2/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_7"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_6"
  op: "Add"
  input: "lstm_2/BiasAdd_3"
  input: "lstm_2/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_4"
  op: "Mul"
  input: "lstm_2/mul_4/x"
  input: "lstm_2/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_7"
  op: "Add"
  input: "lstm_2/mul_4"
  input: "lstm_2/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/add_7"
  input: "lstm_2/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/clip_by_value_2/Minimum"
  input: "lstm_2/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh_1"
  op: "Tanh"
  input: "lstm_2/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_5"
  op: "Mul"
  input: "lstm_2/clip_by_value_2"
  input: "lstm_2/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/TensorArrayUnstack/Shape"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_2/TensorArrayUnstack/range/start"
  input: "lstm_2/TensorArrayUnstack/strided_slice"
  input: "lstm_2/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_2/TensorArray_1"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "lstm_2/transpose"
  input: "lstm_2/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "lstm_2/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/while/Enter"
  op: "Enter"
  input: "lstm_2/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_2"
  op: "Enter"
  input: "lstm_2/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_3"
  op: "Enter"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Merge"
  op: "Merge"
  input: "lstm_2/while/Enter"
  input: "lstm_2/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Merge_1"
  op: "Merge"
  input: "lstm_2/while/Enter_1"
  input: "lstm_2/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_2"
  op: "Merge"
  input: "lstm_2/while/Enter_2"
  input: "lstm_2/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_3"
  op: "Merge"
  input: "lstm_2/while/Enter_3"
  input: "lstm_2/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Less"
  op: "Less"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Less/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/LoopCond"
  op: "LoopCond"
  input: "lstm_2/while/Less"
}
node {
  name: "lstm_2/while/Switch"
  op: "Switch"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_1"
  op: "Switch"
  input: "lstm_2/while/Merge_1"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_2"
  op: "Switch"
  input: "lstm_2/while/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_3"
  op: "Switch"
  input: "lstm_2/while/Merge_3"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_2/while/Identity"
  op: "Identity"
  input: "lstm_2/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Identity_1"
  op: "Identity"
  input: "lstm_2/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_2"
  op: "Identity"
  input: "lstm_2/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_3"
  op: "Identity"
  input: "lstm_2/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/while/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul"
  input: "lstm_2/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_1"
  input: "lstm_2/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_2"
  input: "lstm_2/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_3"
  input: "lstm_2/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add"
  op: "Add"
  input: "lstm_2/while/BiasAdd"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul"
  op: "Mul"
  input: "lstm_2/while/mul/x"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_1"
  op: "Add"
  input: "lstm_2/while/mul"
  input: "lstm_2/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_1"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_1"
  input: "lstm_2/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "lstm_2/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_2"
  op: "Add"
  input: "lstm_2/while/BiasAdd_1"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_1/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_1"
  op: "Mul"
  input: "lstm_2/while/mul_1/x"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_3/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_3"
  op: "Add"
  input: "lstm_2/while/mul_1"
  input: "lstm_2/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_2"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_3"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_3"
  input: "lstm_2/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "lstm_2/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_2"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_1"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_4"
  op: "Add"
  input: "lstm_2/while/BiasAdd_2"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh"
  op: "Tanh"
  input: "lstm_2/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_3"
  op: "Mul"
  input: "lstm_2/while/clip_by_value"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_5"
  op: "Add"
  input: "lstm_2/while/mul_2"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_6"
  op: "Add"
  input: "lstm_2/while/BiasAdd_3"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_4/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_4"
  op: "Mul"
  input: "lstm_2/while/mul_4/x"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_7/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_7"
  op: "Add"
  input: "lstm_2/while/mul_4"
  input: "lstm_2/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_4"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_5"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_7"
  input: "lstm_2/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "lstm_2/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh_1"
  op: "Tanh"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_5"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_2"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/mul_5"
  input: "lstm_2/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_8/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/while/add_8"
  op: "Add"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration"
  op: "NextIteration"
  input: "lstm_2/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_2/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit"
  op: "Exit"
  input: "lstm_2/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Exit_1"
  op: "Exit"
  input: "lstm_2/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_2"
  op: "Exit"
  input: "lstm_2/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_3"
  op: "Exit"
  input: "lstm_2/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range"
  op: "Range"
  input: "lstm_2/TensorArrayStack/range/start"
  input: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_2/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/TensorArrayStack/range"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "lstm_2/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/sub"
  op: "Sub"
  input: "lstm_2/while/Exit"
  input: "lstm_2/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/sub"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose_1"
  op: "Transpose"
  input: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7798073
    }
  }
}
node {
  name: "lstm_3/random_uniform/sub"
  op: "Sub"
  input: "lstm_3/random_uniform/max"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform/mul"
  op: "Mul"
  input: "lstm_3/random_uniform/RandomUniform"
  input: "lstm_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform"
  op: "Add"
  input: "lstm_3/random_uniform/mul"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/kernel/Assign"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "lstm_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/kernel/read"
  op: "Identity"
  input: "lstm_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\333\021}\275M\316\312=\357\260\264=pj\255\275R\274\r>g.z=\177\203\353\273L/\034\276Q\216\006\275\031\\&\275\270T\320\275\017\245\354\275\304\035\263\275\332y\356\274DW\003<}\177e\275\321a\310=\002\306[\275\363\266\212\274\037\035\n=T\227I>\350d,\275fq\013\275 \315\200\275Odp=s\016\306<\275\267H\275\212N\225>\035U\242\275\222\244,=\220|\217\274\t\342\034\273\312\255\271<r]\210=\201\276\201\2759\004\001\276`\2320=~6\234=6\223\325=A\256\'=\214EF\275S\251\010>\326\321\024\275\301\350\007\276\211\200Z\275\031\256(=;\006!>\371\211Z=\323\027~=\0176k=\231\036\314=\274\014Y\274(\344Y\275\014\376o\275\343_\004>p{\221=4s\302\275h>\177\275\021\244\275<\013\364K>E\371\201=\030\264\362=:\200\034>\014\213\030\276!9\363\275t\202\253=>>\021=\374\2433\273s;\241\275\331\317\221=\375\352\250<!\233\352=\274?\010\276\277\002$\275\321\220\325\275\r\3146\274\227\235\300\275V\201\275=\017]\337=\335\016A<\014z\336<c\225\347\275\314,M\276\354\301\235\275#\355&=\347\374s=kf7=\205\265\214=\243\212\003\276\002d\216<c\273\320;\203c\362\275\205\317\332\274I\270\274\275E\211\267\273\3350\201\274\336^\002\273\350nr=\023\264\303=\007\255\317\275%L\253\275\303\372\321\275\036\262\221\275\034j\313\272\035=0\276\t\026\234=\240\007\212\274o-\201\273\t.I\276\332\2252\275R\320\261\275`\020\362=\225\251\250\274,\260\250<\265\274\370=\334\247?>`z\013<H\016\210=\254\247D=k\243o=\201tt=E9\251\274\3205\354<\310\034\351=Yr\221=\303P\325;,B^=g!\342<\267\266\200\274!\001\343=\"\220~<)\256k\275\'T\013=F\226\237=J\336J\275;\306/\276_0\335\275\020\014p;\323\373l\274.eL>$9\316=\271\255\005\276\374-5=VQH>L\035\203\275A\261)\274Tp\321<tU\005\275~|\343\274\005\332\267\2746\305\226<\357\177\246=\032/\n>\224\215\254\275\357I\033=\344g\335;D\312\226\275\220T\264=7\202\263\274\342\211\001>w@\n>\367\n\\\273-\205v<\253xw<\376\315\033\275\236R\216\275lu\303\275\236:\322<Sw\343\274\271\\\310\275\035\253\\\275\3469\203;\273\321z<&\310\244=C\322\276<+\020\223\275\232\205J=\305+\367<\330\213!=y\2708\2750\005#\2742\354N\273f\027\003\276\345\373\005;\227\253\263\275@\312;\274\021\251V\275Hh\342=T\022\232=\033\334\305=\2527u=\033\315\206>{\310K=\250[\022\276\346\354\353=z\317\202\275\035\320\235=\222\266\241=\236b\031\275\273~*\276U\255L<\362\032\006>\271$\374\274\004\215\351=;\367\370=\346\031\325=\307\336\033\275\310P\306=K\225\325\275\354\016\371\274:Y\347<\374\024\355\275\304F\016>dE\305\2741o!\276\224a\250\275\264{\231\276`h\342<\020\214\256\275\031\345\274\275\027H\203=\236\302\250<X\200\256=\336\357\346<\000\312*>\n\262k\274\207\'\355\274\246\021\235\274uj\252<`\373\233\275\027B\304\275+*\236=\342\207\241=\235\355\210\275\0352<\275c\345\217\2751h\212=c\362\363\2746\204\003\276\211\344\003\276\201\027\326=\220\006\265\275>7\237=\255\231W<\036c\036\276p3\364=\365\301X\275\351\010\031=4R8\275\206\335\213=\n\311\240<a\r\306<\267A\001>eq\334\275\003P\037=Y\261\177\275\361\370\266=\235}z=\202\354\337=\014+\306=\205\271\230\275\305.\r>\224\001\260\275\275\255\216\272/C\214=\"s\262=\3032-\275\347\365\202\273\216X%=+\202\202=\254\234\264=;\361B=9<L=w\376\315\275TG1>\222\021\003\276\"c\327=\277W\'\276\346\301\212\274&B\367<uvl\2756`\351<j17\276\270\206\274=\\>\334\274y\320\271\275\200L\311=\206\302\350<W\325\223=4e-<M\001\244<\033\342->\254a\347;\024\257\212=(\273\242=#\004,\276\002\005A\274\366\225\317\275C\021F\275w\344\317=\336\307@>\032a\'=y\367<=5\034U<\210\3025\276H\305\n\276\025\321\326==m\316\272\030E\342:\365M\014=\0309D\275\372t$\275\323\337M=\356\342\226=\377\372\200\276\007\002\267=\336T\341<\265\347\"=a\220\006>b\200^\275\334\375\264\275\3558\275=:\324\324\275\177x\221=b\316\227<\260\224\217\275i\036\264<N\nL=\315\263:=\035\332a=L\035\210=\336\246\354=\273E\240\275.\314h\274?.+\275\367z\237=\242\304\247\275\347\325{=z\027\216\275\373\265\320\275\350r\240=]@\337\2758]\276<\000:\366<Z\321\020>\352$\367\275\331c\005\275\333\210\361\275>\250#\275\244\362\367\275\325]!\276\025f\030\2764K1>\226\345\353<\2629U\275\3705y=bR\322<\340K\315=\360|\006=>\250\231\274M\314/=#\027\313\275\232o{<\213\235\277\275\207)\026\275\341\335\377\275r\010\350\274f\\\341\274Z\321\026\275\354\207d>\004g\325\274\276\330\311\275R&\302\274\\\371\221\2750\262\357\274\370\201a\273S\022\226=\000\022@>\030j3=\352\366\027\275\372\333=\2737M?\275k\230\003=~\017\017\274\001\354O\275|\256*>\370\220\313\275\367\301\303\274\260\034S=\325\340f\274\245\357#\276\340\245\320\273L\002\302;\204\342K=\344\214p\275\n)I=\\K\262\275\265\360\354\274C\307\345\275]\315\346\275C&\246=Jcz>\036\"\215=.]\245\275\303\332r=:TD\274\255\307\200\274\200\242%\276\371\256\376\275i{\'\275>\355\250<\021\321\307\274\373S&\276\265\027C\275\001 \315=0i\311\274u\246d\275\311\3643=\323\"V\275n\030H=C\264\376=/\311,=\021\266\362\274d\346n<C\356\021\276\356\327\311=\203\310\255\274%V\205\274<\233\217=\343\340\036\276\341\225k=\314\370\365=\361@\364=\367)\033\276\226\233\302\2751\035\277\275\236s\216;\303?\354\274\375\205Z\275\376t\023\275\342\277\357<\3111\227<\"\226\347\275\3117\215\274c\021x=\327\307\021=b\254\312=gi\212\275\356\331\252=\343\212O\275t\\\254=\371\367\333\275:8h=F\255\223=Ck\003>(\022|<~\233\372\274,\027\331=O\254<\275E\357\r\276\002\237,:\013\371\010\275\361\323w=\025(\234=\333\317U=\241\241\357\2750\222\262<\214\337(=\273}\013\275\275\375!\274\302\2674>\262K\327=!\024\031\276E\023\034\275\035\271\210<\234\310\225=\342\203\352\274\272\257\r>\217t\005\276Y2\365\275>X\357<=\211H=\216\346\311\274\223S\240=*\274\016\276*\331\257=+\323\237<99\216;\255\2479>\332\220\251\274\250\026\335\274&\177\260<\035\027\234=\000\311\320\275\202z\207=\307\223}\275\253\005[= |\016\276\215\017\233\273\257\032\237\275r\253K>\365\257\003=\320e\374\275\226D\006\276\254\334\374\275E\323B\275QnS<\376y\277\275\340E\">\326\317\n\276\242\275\253\275\332c\310\275*j\320\274\n\355\346\274\322GN=c\016\033=@\370k=\260\2276=\020\3523>\221}?\274\325\341\256\275Vm\230=\341\314b=\375\353\273=P\223\016\276\032E\023\276\234\305`=J\233D<\303\332\023\275\210\242\224\274\300\213\210\275\234\226o=\277\203\323<F\003\217\275\\?n=88\307\275Y\010\327\275\214\350\267=Bn\325\274\306`I=}[\265\275\320\321\212\275\260[\360\275\266P\n\274\345\266\031\276\346\357\355;\365[d\276\261\272\177<\024\261\355=\r\361q=\346\236\375=\267\017L\275\027N+\275Wt~\275\0047\340=\375\314\376=\334\367\317\275[\253o=\0333\254\275\371\333/\275\370\026\242<\3268\276<5\234\256\274*-\370\274\342\347)\275\237i^\274\034\000\274\275~q\372\274>\234P\274\304ur=%t\201\276\267 \314<\213\366\274=B\353\240\275]&l=\201\232\217=f9+>\337Yl\274\275e\223\275\nzC=#\207\343\275\262Jq\273\024]n\270\334\271\323\275\262\317\272<zQ\305\275o\315\341=\250\350H\275\2568\205<P\252\235\275\267\250\214\275.\005\223\276\230\251\023=k\n\233=\217\312\370=\314*\356\273pJ\373\275C\237+\276\250\326_\275\022\t`<\215+\343\275\263i\333<\375\251\004\275\362\251\225=\343z\355\275\275\304\235\275\3250\211\275\323\265D\275\372\343\256;\211\017\270\274%\277\310\275$\360\233;\335Q \276\0176\232<P\237\367;\3508\255=\312\210O\274\350\354\r=\240\266=\276\207+\316\275\362\235\214\274\316\351\231=[~D>u+~\275\201\241\010<g\362\017\274\257\177!>w.4>\016>\371\273\221\032H<P^\202\275\240\205\374=*A\371=k6\022\274\212\344d\275\025\251\005>p\235f=r2\231<{_\030=D\301\243=\201\314\024\275\017\344\t=J\376y=+\266\007=\255\031\230=\242s\220=\016`\232=\227\275w=\355\345\213:\353uP=\346\213\251\275y\r\306<\260lg\274\273h6>QS\003\276\333A.=\225x\364=\246:\223\275\232\006i=\302T\212\276Ep\345=\254\263\022\275\347*1=\023$\351\274\244\334#\275w\376\254\275\230\2405><zN\276X`\322\274\334\277\366<Y%%\275i\361\000\276\244\370\025=\223\267v\275~\034K>h\373O\274\345\272\220=\327\246\251\274\004\347\007>\277?\024>\202%\225\275_\350\023\274\347h=\276\316f\235\274v\022\332=\266m\265<?\2676\276(\223\371\275\256\247Y=N_\201=LHQ<aS\246\275\271\321\225\275\302\374C\274\034\206Q\274\246g0=\255\231\016\276\274\2248=\r\353\227\275\365\274\r\273\313\342_=\262v\345<\321\372k\275\367\325\214=\363W\367=J\017\327<\226\331\024\275N\331\227<\341\253\311=\306\327:\275\022F\214\2749n\021\276;2\021\276,4E=\202~\017\2755\001\246\275\274\257\277<\335\237j\275z\021\037\275\306&\272\275\305i\235=y1\004>\022\330\351=NV\263\275\307\201\250=V\216\251\275\377\271@>3\241\321\273@q\243:f\242\357;\344f\335\275A\001\301\275\264\360\233=\027W=\275\363/e=\357\tT;\337\205$\276U\220\213\273\201Y\206>\335\267P\275\251m\324\275\321\313K\275\027HI\275\202\304\312\275\026I\331\275\251\271;\275\310\261\204<\347\325\337\275\226W\236\274\265?;=\344X=\275\340\206\253=#,g\275\030\241u<B)\222\275e4L;\3461\027=\202\275\351\275\336?\316=\224\301\177\274R\264.=Xxk=\357\266\326\274\327\310\017\274\341\322/>u\252\240=8\037\234\274\335\355&=\177\261L\276\337B)\272\212B\331=\030\216\233\275\344\206\001>o\024\027<\3134T\275\026xw\275\"\177\234=\025\276_=\256\304+>\215\004\331\275[\\\201;R\347n\275\313\031\001;\376\351\226\275\253nx=bJ!=nFZ=\357\207\030=\311\213\353;\356\337\\=\2201\272:s\315\211<k S>\024p\361=z\277\306\273\225\tO=A\234\000\276\307\234\205=\346\307`\275_\262%=\250\223,>\304]\236\275\341\036\031=FV`=\350\236\321<%\233\250\275\306\307\340<b\304\262<\320\262\"\276V\335\016\275\256\374\361=\337:\374=\022\003)=\005\255\272\275d@\326\275d\027\003>+\rN>\321\250 >\307<j;y\306K=\206\235.\276/\222\013=\320\226i\275\357j\321=C\315\243\274\3417\335=\255\272\277\275\221\207\305\275\253\3157\276\223\023Z\275\35302\274\204u\316\274\315?\232\274F\352&=\213]6=\357hF\276\323\253\263=\324x?\275e\302\244=\241;]=&\370\022=@\243\037=\217\331\027\275em\317=2\202\210=p\244|\275,\3300\275=K\031<*6\377=\345\372\200=\230\337\250\274\004\003\002>\341!\256=\261\301>\275F\260E=\202\301\316\275>\347\247=%\272\000=5J\321\273\202\303L<D\245\235=n\337;\275\266V\340\275t`\214\275\024K\322=g4\220=9!\374\275\203@\255\275\217P\243=6\013!\275\016$\312\275\364p]\275\034\266@\276\017Fr\276\212h%=g\272K<\241\370\271\275\034\325\264=\264T7>\343iH<\005\024\243\275x\240!</\242\240\275\214\255%=v\026\242\275\373\177\273<\327\342\224\275\321\313\223<\242\267\234\275\330\324\345\274\0036&\276\0277\240\275y\032[\275\212%r\275\251C\030=\202\277t\271\226\373]=\362\364S\275\2339\216\275\210\374\025\275]\220\221\274~\034\000\275\2704X;\241\303\275<E\r|\275h:\274=\030\352\257=NC\266\275^\2036>G\272\340\275\013\304\221\275/\312\232<\005/\203:\r\305\214\275t%)=\202\252\261=\204X\266\275H\355\352<t\021\302\275\r\310\220\275S\260t\275m\372$\2752/\200\273s}\313=n\265\177\276\\\000\301\275\224_\355=\020@2\275B\343\201<\317\367\310\272\344\362\000=\330\232g\275\236\n\020=\355I\232=\360n\227<I\243\375<R\274 \275\201\362\275=\321\202\202=\253\304\000>b^\241\275IDX\270e\306<\276\251P\034\276s\315\244\275\237\3143>\223\207@=\006d\370<\342\'\310=\321=N\276*\310\336;\242\205\222\275\016M\005=\207\232\343:$\272P=d`\300\275\327@\006=\366*\222=\313\"\207<\231j\330<\243^!\276S\326$=\377bV<\260\202\362\275\327j\024\275\n\026;\274\222\022$\275\276\020\254=\363jw=2\2704\275\310O\003\276\030Z\002=ZF\317=\323<\006\274\310\334\244=\375\017\213\2755\006\372<\347\371\000\275\364l\203\275\342\276J\276\372\347s=\365\206g\276\000\344h=[\2015<\204UD\275\363\316u\275\3339\013\276\275x\205\275DF\274=\240\306x=\217a\">\232\353\177=?e8=k\014\"\2746\334\364=f\377\264=\241\002\376\274\354\\\'>)\007E=59\256=:\007i\274\277\205\317\275\01057>\016\345\225=\236T.>\217\316\037\276\n\0059>\310\205\351\274\331$\010=\030\210\221=\330\265\013\275&\261\305=m\277\024>oe\026=\312;\263<E^\212=\346PN\27583\014<y\014\000>\272\201\264\274\364\007\211\274\374\243\340=9\335\273=1x.=\247\271\021=\t`\027\274\226\303\024>\372\2760\275\2768J\275\327\321\265<\347\223:=\267\234<\2753\224L>na\317\27443\020\275\354\244\n\274\252R\263=\362\035\206<:\247z\275W\220\256=\335P\017=\2227\345<\223\353\010\274\301L\203\275\t\304H\275\335\276~=k\234\273\273\271y\324\274\324%\026>j!\201=\206\000M\275\364\201\262=R\221\201=z\357\271=\324\031\205<a:\263\275\225\375\215\275\355\315\252\275\351\274.\275(\257-\275SBM>e\014\257=\221\311<\274\251\350\021\276K\355\005\2748\210\r>\034\270\272=\037\375\035=(\222\361\274+\300\205\274\212(\271\275\245\263+\275-~\216<\300\313\030\276\333\312)=\270\306\254=\367\032\274=\275\256\006\276Ci,=\326#\013\276\237\310?\275\325\334\010\276\235}0\276c\n\210\275\254\246\212;\262n2\274Fv\034>g\342@\275#p\004\275\214hd\275\265\343@\275\333\260\211\275\233\250!\275\366\225\026\276\034\215\254\275\275\014\207\275V\213\353=Fx\203\273\356@?\274z%\210=\024\356O:\333\304\354\274]\322\253\274/\302\315=\277\372\031=\262!(=\341\020\022<\361\177\324=\322\300&<\021_\333=\202\354\214\275\036\334\252<\\+->\233\370\217\274N@/=\245\314\222\275\277\245`<v\246\204=\024\205\351;N\340\177=\323\010\230\272\277\331h\276g\014\225=\220\352\267=-?\247\2758\206\026\276\003`A=\203-\273=\222&D\276\223\253\037=\357\374\206\275S6)\276\355\377\307=-VT<vM\223\275\035\001\353\275\346\324W\274\311\2031\276\227\246\035\274\334\376B=\372\241\344\274\223\277F>$\314\026>\270CK\275\234G\211\275z=\206\275\374\010\267\273\270\"Y\276f\006I>@\003\335<z\261\367\275\346\316\200=c\362\364=\211\021c\274\354\302U>\035\300\245=\343 \017> \323\300\275\000\374\252\275\374\353\n>x*g\275s|\006=n\034\204\275YV\327\275\t\355\215\275\356\233\322=\364Fz\275L\274J\275GLj<=\365-\275\203\241(=F\206\235=\2274\032;\325\332\362\275\254\363\350=\217G\360:\005\262@\272\027\250\277\275\227\374t=\022x\310\271$g\357\274y\034y\275\333U\004>uL\236\275\204:\220\274)\353\253<r\202>\276\003{\256\274\216\246\217\275$\357\360\2737\314\363\275/I\274\275\222\022\233=s\227&=\245\214\205\275\336o\360=c\246\316\275\273\022_;\003x\036=\000\331\257\273\226\320\002\276\205\211\262=\322\030\n=\006\310I\275\253\353F\275\313\377\006\275\206\322C>9\364<\275\202g\230\275Qt\217\275u\277e:>\275\310\274\326\tf<\361cP=\353\r\336<\247\235~<0\235\023<\355\375/\276[\035\263=\223V\351=oT\004<jI(\276<\351\036>\247+\006=>z\216=\333\357Y\274\252L\026=R\271\371\274\254l\231<o:\255\275@ J\274\322\212\374\274\221\250\t>b\245j\275\"6\223\275\025\311-\275\006!\360\275P\274y\274\016?>\275\307\022\n\276\247\347}\275\034\363O=BLN=\024\\\343\275\336:S\275\n;\016=\003\353\277<J\034\333\274\035\303x=@\302\334=>\240\n=\317\032m<\355L@\275P\206\023\276n\217\317\272f\203(\276\203\300\3316}\305\361\275G 8=:<\010=*5\r\273mL\305=\004j(\275\335\365=\276\363B\001=\320u\222\276/\317\033\276\r\227\260\273\262\235\237\275W\237E\276\\\006\036\275\247\2641>DL\221\275\375\305\r>\223\307I\275\0322\252\275\276\325i\274)$\273\275\014\364\017>\357\301H\273\235Am=\316v\t\276\335 \373=y\276\017>\253:2=\337\324\210=\201C-\275\204\000\221\275\320U\316\275\221\303\336<k\2137\275\356\367\001:\373\242\035\276\\\227\207=|[\344=O\276h=\301P!\275F8\372\274c\327\230=\235\211\023>\252\243f\275\324\224\271\275\215\277\022\275\325\370\217=\214\037\342=\342\306\330=\031 \337=\003\203\270=\247\014a>\202 \306<\035\345\237=\212a\277=\250\033\307\274\315\217&\275S\337\216==\231\245\275\234\300A<\372\3323>\257e\330\275\243\235\022>\006v\365\275\010\005\311<\325\'\300\275\226^G=\023\214\237=\222#7\275\322\217\241=\225\272\000<\243\267#=.\337#<\232\234r\276i\324\242=\214h\335\275\362A\222\275\320\004.\276M\004\215=\030\037U=\031\r\333\274\035\264\305\275\317\220x\275\315\021\\=I\0274\275\024H\004=]\017O\275\223\307\016\276\210\007\027>\336b_\275\303d\207=I=\303\273\247\t7<\326\254\364\275\r\317\255<tK\336<G\"K>U\353\330<B\223\016<\347K\005\276Q\267#\276XK\006\275m\024\367<>\246\005\275\253\332e\275E\307\023>\365\277\250=:\206\307\275\342\217\255\275\272\331o\275v\341/;\267V\362\275\177\035\374\275\276l\316\274\2751\033=K\003?>\323\007\207\275\351\325\250=%-\225<\313~M=p\303\034>\345\373\372=oN\236=\312\331\215<\263\347\021=\326\344\357;A\341`\275\277\246\331\275[_\275=0\247\224<\370x\027\275\270\007\324=\005\263\274\275\031u\344<\346\036\250;\004\244\253=>\276\016\276\363B\363\275\\Y\232=\372\215N=\007\205^\275\332N\360\274\005\270[\275\216\344\025\275\251\230\360\275\235_:=\341\270\331=\224]\336\274\344\033\'\275\t\276\264\274\354o\240=\225\336\225\275\313s\221\275\370\325\346=)\023\333\275H\031X\275\352m\335<\0273\016\276Q\023$\275\235\323\370\275\246\276\321;1\276\227<\267GX\274\251E\014=\332\230`=f\373\330\275\320\244\274=\215\271\034\276\234\312\345<\247\n\367=YH\201=\271g\202\274\210\255\014\276\230\275a\275\353 \002\275\002\214\000\276\332#\\\275\252\266\'>\360\3628\275\000\323\030\276q\260\310=;q\217<\215\320]=\267Rw\275W\367L=\201+^=\026\202\233\274\237}N\275\320\014\026\275$\366j>B\214\362\273{\315A\275\ny\001>f\340\235=M>\201=\361\342==\273Q\352<w\\\016\275t\037\224\275\243K\313\275\265\210\230\275o\263\242<~|\355=$\177y\275YK\217=\017\365\344=[\302Z=$-\353=e\226m=\236\023\336\275y\215\270=\255\374\313\274\252\027\024<\014\324D\276g\320?\275\007\005\274=M\270\311;\204\255\217\274\030\333\301\275Xb\r\274\320\372\257=mJn<v\237\030>\356\247\211\275p=U\275\370\347\214=w@\030>\204!\232=\t\351\014\276\"\213T\275\314\354\237=AS)\274\317\030 \276!Z\303\273p\000J\275\033m\255\274}\334\335\273?\004\007\276s@\216=\034\031\r>\3768\333\274V\030\376\275_\243\023\276\301<\205\275\265S\n\274\303\334\252=M\220\231=z\376\234\275\342\'\026\276\331\231\010=\336\270\230<hc\257<\361o\261\274i\260\337\275\310b\225\275\353\272\256\274\342\300H>eDf\276\315\271e\275Fb\335\275w\027\235<\211\r\021=\347\377\021=\235\217A>\325Kk\275\371\345\220\275\316\351\317\275\350I\237<\017\334\031=G\270\307\275\260\366\315<\361w\205\275\221Z\036\276\264\361f\275\366\372\240\274;\231\224\275X\217\230\275\306\367W=\374\001\005\276\222a\255=\362,\224=\030\253\234;\350\271R=`\321K>\240\232\310\275a\026?>\263p\372\274\361i\375\274!\374\017>QW\243<|\217\005\275CX[\274\262>/\274/rC>\3343\276\275\315\023Q<*-[=\364\223\032<\2040\035=\177\322\243\2752\001\023\273!\273\205<>\346\024\274/\"\377<\330d\246=]\241X\276\325(\351:\350\321\037\274\207\324J=\214\315\203=\360\377\033\276!\035\260\275#~\'>\261\210\243\274\322\262\210=\244o(<\262\311X\276\220Q\321<\320\r\227=eGc=\250J\372=\362m\177\275\003?\321=\026\255\310\274\177&V\276u\025_\272@4\367\275\325\005g<\230\035\276<\014\034\303\275qt3\274\232\0038\274\323v\000\274Ts\200\275\302m\226\275o\256p\275\037w,=\345\327\346\274E2\267<\374\255\342=\275\276Z=Z=-=\016\001\317\274\0074\273=\177\376\337=[\270\t>\264\266\032=k,6>\321\267<=\211D=\276u\354 >A(\312<p\332.>?5g\275\340\265\327\274\210\2005<e|)\275\261\255\204=\013\355\270\274\221<@\275~^\226\275(\235|=\210+\314;p\244\326=\031-\177=p\023\247\275\224\362\001>Ic\206=\312\004\006=}l\302<G\331Y\275\277D^\274}P\337=W\350\244=\037<\224=\201(\023\276;\235Q\276h7(\275\220o\344\274\022g\361\274\276\246O\274\030\177\206\275\376f\315\275\330\207\372=\361\t\346\275\212#\227\274\214\335X\276\346\331\003\275\210^\331\274B\213l\275-\276e=\336}\213\275I\231\214=\347\201\207\275%\'\317=\334\023\020\276dd2\275\365\260C\275\221?\352\274\203s\202=\220iX;!3\226=F\255b\275t\356+\276\375)\223\275\035(V=\243\017\004\275\261\253\344;!\241U=o\230\343\274\355\005J=]\272\211\275\026\3236=\231\304\001\275h;\330=\372\321\270:\274\320\357=E\010)<{\262\205\275\300#\032=k\371\201<\252qu=\220\253\277=\331e2\275\275\027\t\276\256%g<5r\313=\354t\037>\312S\205=\361\233\321\275\340f\212\275)\376\037=L\346\246\275=61\276S\342\360\275XT\240\274\342\266\302=\202\245\';\255\307\347\273?\'\241;\217\235\037\276dV\245\275]4\270\275}R\371;\276\225\177\274\224\267^\275\210\353\232<\247P\222=p\344\260>\222\313\250\275a\001v=>QG\275{\340\232;L\021\272\2759\236\344=\022\010\316=\334t\231\275\356\252\020=\261\356\220:\330=\275<\224,\255=\370?:=\2006\311\275\274j\373=6\210\275\273x\375\023<\010\'\n<M49=\274\035\n\275!\034\300\275\3214\235\274_\211Y\275!\036\237=2\215\360\2755\026E=\251\250\002>u\235\266\275k\237\025=\226\005\362\275\237i\363\273\026d\310=Eea\274\317\006&\275\232\241\000>\335G\026>\250\204O\274\375mz\275\275)\246<%\323\370\275m.\354==\031\003=\304\271\200\2741\007\312<\352\242\273\275\355\253\342\275\033\220\357\275P\262\002>\220\030/\275\277\276_\275\325\'\005\276\361\241\220\273\230x$<p\033\026\276\311l_\275\311Y\n>d\321\332\275\306 \001\276\223\363\027>Pk\351\274\245\311\016=\005\313\312=\314\024\221\275\347\t\260\275\014t]\275\223\250\005\276\350\264\300\275\240\250\025\276YRK=\255\260\333<,\367\201>\333\tb=\323.\310\273@\017M\275\274\317\240=,p\324\275\002\370\237=\365\271!\276\323\'\325<^\305\232\275\335P=\274,d\243\274e\3703=\242\007\363<\316+\235=\373&\023>2\257\t=;\222%\272\335\372\247=\023a\211\274\225\323\351\274VJ\314=\3272v\275\370\201\271=\027\366\017>\310\3367>\327\030\232\275\023+\267\274\241\347\237\273\372,\221=+\331\217=\323\021\232<\252N%\274\267\264p=^\227\374=\200\203+\276\253\007\353<\361\311\276\274\017\032U\275\216\212d>\204\346\233=\242\376\006=\001=2\275\305\243\360\274\317\272&=\305\374\034\275f\017\215\275\334\001]>\346\"\230<\020\231\257<_\274%\276`\226\301\275\327%\363\275\225\215F\275\340m\317<\251\306\014>;\303H\275\233[\337<q[\005>yy\253=\037tB\275\361\215\250=P\311\315;\214(\007\276C\305\024=\321O\r>\253\310\027\275\324Q\372\275\021v\210=4\210$>ypY=\346tU\275\033\311!\276\362g\237\274\253\372\022\275\363\347[\275\255\036\374=jn\262\275M\207\230<b\343\212\2761\241\031\275\355,\271\274$\023\361=\t\314\276\275\037\266\271\275\221\007s\275\203\335)\275\337\247\265\275X\021%=\364\313\264\275\372j\247\273Y\022\337<\2530q\275\306\210<>\331&%=\362G\356<\336\200\342\274=L\205\275E\322\307=\330\202\031\276\276\310\250\275z\013e\275Z:+=\272 \005>\ts\244\275\246]\031><\314\017\275[J{<\365D\006=\241\'R\274\273\263\\=\266\201\017\275\353\255<<\301\223\021\276\241\327\273\274;\256\036=R\252\310\275\202u\343\273\356\217\036\274\372\331\217=\275$\355<6\230\316;+\231}=j\361\\=\020\272\307\2740\375\002=\273\375\376=5Q_=5y\021\276\301\004\261\275\213k\273\275o\215\212\276K|g\274x\264\330<\333O\030:;\224K\275\205\341$=\223m\007\276\222-\230:\302z\244=\000\n\221\275\334\336\211\275J/\231\274\372\0011=\2403j\275\350?/\275\030\310\365\275\337\027\256=_\302\014>\233\242\272<`\305\366\2733\026\021\276\274~ \276\271\341\000\276\356\035\313;\257&\265\272\025g,\274@\371i=w\244\336=b\225\217=\3018\024\275\224\363$\275\254>\321=\343\252T\275\246\005\210>=\316\026<{:\267=z\3359\274\240\257\203<c@\026\275\362\332=\274\376\251\010=\211\215\333\275\246\347\016\276\302`\'\275^{<=\256\244}=A\035\212=\036K\3039\237\225o\274\224\373\007\276\030\251\373\274\343\262\001\276\016o\005\276e\201\364<}|\033\275\346TU=\255a\220\274_\r\341\273X\004\303\274f\260U\275\237v\214\275\211Z$>\nn<<\014\360\303\275\232\324I=\217\304\001>\322>\226\275X\367\303=\014\270\237\274\203\331!\276\261b\211\275w:\010>!\253\342\275\224K4=\307\350\324\274\225t\203\275\013)6\274J4\n\275\227\366!\275h\026\303\275K\313\364\275\276d\337\2744\301\001\2769A\342\275Q\253n=\232\0228\275Z\310\334\275\212\232\277=)S6\276\343p\356\275}|\312\275\240 >\276c\'\333\274a\2517\275\010\350\335\274Bf\271\275\331\301\255\273\023&\231=\230HD\276\347\320\301\275j1\240\275+Q\372\274\255\363\016=\276C.>\326\265P\275\203\014\007>D@\347<\377\315\237\274\014\341T\275Kx\030=\305u\250\275\303\227\301\275M9d<\255\324\270<\315n\337\274\226NC=\324\0219\274\341\037p\275\320Z}=\355n#\276I\263\026\276\215\247D=\250\2611=3\227\r\274\360\013P>d^(=\345S\210<_I\352\274\366zC\275\355\226\017>\364*\317\274\227Y\016\2766\223\312\275\225\374\230<$y\217=o\002\241=\306\023]\276\250\350\004\273 ]\022<\337\323m\275\356\006\007\275WM\n\273\t\305\310=\253\331\024>a\322[=\260\246}\273\311a\246=w0->\357-\222=JH\020=\221J\017\276\030p\363=\355Jg\275\nL,>\245\206\377=)\342\025\276M5\036\274\223\372\301\273U\031\374\275\232\373\330\272\373\263\242\275/.\334\275\230\360P=\203\276\264=\322\002\">\257\267\332\274_\215\206\274\224;N\275b\022\273<\200\332#\275\271<\035\276\300\333\005\2761\007.\275\230\230r\275*\264\374<tf\271<\312\314\264:H\014\010>O\024\242\275f\222\253=<\375H=W\375=<Hp\020\276\370\271\362\274\271\357\231::\230V=\000\374\n=#\221\032=<\263\031\274\330\227\025=\227#\310\2735_\255\273\362\361#>0 \037>rb\007\276\204Gz\275a)\033>28\241<\211\217\230<\357\243\333\275\345U\304=\220\252`<yf\035=\311\321\201=9\312\037\2747\341\207\275\2342\013\275~\261\014>A\220\276=~\240\367\274\211O\001\276/\2674\275\026\332u\275\237\305\367\274I:\361<\241\324\324\275\355j\226\274\346\212\266\274V)\033\275\2550!>\n{\377\273<\344\367=\346\277\007\276\247\311%=L\224\353\273F\037\365\275\2505\320<\205\311$\275\372H\016=\367D\\\275\305B\225>\3365J>8\322H\275\363h\366<\3329C<\032/\353=v\177$\274\326\263\203\274\26752>\361\251\200\275uzS\275\252\355\356=\301\317X>\240\303%\275\342QE\275\r\363\230\275\022z\277<\204\t\037\276\360\364\021=Y#\001\275\001\023#\275YVX==&\274\275\034\310\245=\373\017\213=\367%\'<j\331\261\274\241\306\367<\346u\273\270\255\006\364\275R\002\264\2757+\243\275\205To\275\334\"_=\222o\001\275\025$\255\274\273C\016\275\025\237\317\275\331\252\033\276\033\"\276=\022\235\010\275V\007\330\275i=\002\275\325\177\230;D-\022\276\'\313\347\274`\330\330\275U3e<8\276\013\276\250\236}\274dh\235=\241\2345>\023\n=>\362\'[\275\252\324\347;$}\004>\001\302Q\276F\375\300=\270\3421<\257b\036<\311\241\340\2720^\223=\203)\237=\031x\332\275\237A\201=\212^\231<\346\216\010>\3078<=\355e\247\273n\371\251\275\020r\351:\344\032\302\273\227\232\210\274`6,\275,\374\213\274\264|\017=\222\217\257<\310%y<1u\273<6_^=\255\260!>\341\365\025>\275oe=]\246\225=\215\252\237\275\362\250j<<\205R\276Q\362\025>\334\262_\275U\234Q\275\275E+\276\'=\273\275\256j\277=\020\337\232\275\017\217:\275\223\201\321\275\366\224\006=2\025%<r\376e\274<\231\030\276T\005\231=8\242n=\266\035\307\275\366w>=Os\230=\233\213\026\274N\024H=q$)=\356\236\221=\002\021\245\274\357\032\014\275\2260?\275\013\244\032\276\017\370\014\276\374*\204=\232\261\206\275G1b=\306\013\355=\212\266\203\272\341\366\325\275_\020B>P\220\357;9\263r=\247\202\016\276\202=?=\237\223\030\276\261Y\240\2744\2471\275\'F\320\275x\2434\275\301\nT=\302\2129=\273\033\260=\236f?\276\233\2600>]\034\031\275\006\265o=\311$\274=\246\330\211\275\332\371\365=($?=S\212y<\346t\235=\224\270\331=\376\372\274\274\001\274\277\275\343\335S<\251\357\255\275\366\023-<,\304\373=5\337\"\275\337\300\225=\257\342\224\273\020|\201\275!B\377\273\371\344\032\2746X\311\275\334X\363\275\tP\214=\2368\357\275\276=g=\334\tL<51\177\275\240a\037>\210\206\246\275l\377:>\255\256\235=G\224\022\276\353u\242\275Z\r_=\314ZS\276\227\372\r\275&2L\275}\261\211<\373y\207=\277CV\275d|\375<\275/\000\276!a>\275\272\rX>([\220\275\225\313\220=\346\3322>\271\367\300<\031\365\222\275\022:\221\2755\340.\275\203\254\325=J\274\n\276s\215\263=\300J\343\275\273\315I<\276\204\270=\'\253w=\215D?\276}\272\344\274\372,\203=\372 \007<U^\225=\207I2\276m\272B\2752L\241;\216\245\245=Dj\260\275\347\327\250\273~\367\303\275>]-\275|\"\034=V\255\003\276Z\207\235\275\327S\024>\251\225\225\275\352\377d\275zH\370\273\374\0143=\366\253\345=$\231\253<\355\305\331\275\347%\030>\251]\300=~\232\177\275\363;!>}\360\261=1\254\355\275\331. =8\350\245\274q\234o=\203\303\261\275\344/\003<B\037\016>\356T\261\272!i\260\27508\236=_\334M=\313\2109\276\017\'y=\303\361\304<\025\235\200<\211r\327<\377\257\022\276kE\202\274v\267\275;\250\030\233\275\037\333\006\276\337w\217=\322\311\241<I\032Y=xh\006\276M\375\266\275\264\002\270=\265y\346\2742,R\276\303^9=Z#A=OK\020>\340\256D=\251h\n\275\214T\237\2756\301\r\275\\\363\"=^\304\n\274\222~\001\276\260\324\213<\270m\266\275\206\261\003=\306V\232<J\035\305\274\374\214\000=*\323\313\275\016\340\330=\037\334Z<\306\021\034=\327\334@\275\207\335\355<\244:\226<3z\327=\257\252\035\276\034\3351=\354\213\'\276\2261\325<z\336\023=l\330\003>\336l\302=\004\240\335\275\346\032+\276b\326\'=\255\246\210=\"\031\032=^\210$<\332\272\262\275~\243\215\274S\002\306\275Kj\210\274y\020\002\276\243\177\346\271\024y\262=G\215\020=\023\215\025\275\021\322\226\275\336\345\004>3p4>R_\026\274N\252\250<\206\354\276\275I\206,=\341\203\272;\3668\001\276W\263\211\275\303\003?=\243\315\010\274|y\220\274n\250\r\2751:W<hV\357=/\334\354<\277\222\036=/x4<D\342\027=\023\374\232<e\257\020=\225`\363\275>\313\017\275=#\357\274\334\"?\275\021\264\353\275\223N\240;/?\021\276\t\340\335=j\307+;\357\224\'\275\261C\351=C\003\210\274\177\204\210\274\334\272\220\275\031r\\\275\265\371*\274\020C\275\274]}\266=\250^B\275\356/\016\274\001\221,=\260\362\317\274\343\214\335=0\220\000\275CI\275\275D\360\334=\035\021\313\275\014;D\276}\352\t\276\331\034\321<\262\252/>^\200[>\346\317\202=r\312\342\274R~\354=o\030\360\271\365\334\372;3\027\'=\032\325$>\330{\231\2752\240\225\275\016[F>\332\266\306\275\224\0003\275Ab\t\276P\300&\276\307|\222\275_\215\203\275qJa\275\010&)\275\325I/\2764?\221<!z\210<\340\013\277=\321\332\322<\004\n\'\274\210\025\302=\245Z\333=\301\031\271\275\356Q\002\276\270g\254=\326X\023\276\004\372.<\217\211\253=Y>\320\275.=\362\274E\200\247=\256\215\266=\2778&\274\233\277r\275)\321\274\274_\035\320\275\002\303\032\276\226\202\351;\363k\r=e\306\007=\265\347\353<U C>\314[\367=n\252\363\273\016\203\346<\244\005\352=\355\361[=\366\355a:\027~\335\274\0255\241\275+\367!>\317\215b=\025\247y;+\311\361\275\212\351\016\273\264\001\021\276N\243\202\274!\246\016\276\273\376t=gx5=\356\346y\276\220\207\253\275\347c\362<n\251\227=\254\266\272\274\033\265.\274s\374\034>\316\0002>\351\032\343\275Th\204<\\\244\n\276\313R\256\275\255T\352\275\252\0172\2762`\213=\333\335e=\220\365&\276\311\241\010=N\233\002=W\202\311\2749\014\203\276\341\257\260<y\361\235\275u\207\223\275<^\t<\336\030t<\233!\322\275\216\305U;\261Q\241\275Q\214>\275BX9=\3232\361<yX:\276p\004y=\353\036\360\274o P\275\214\237\243\275\376J\237=\005\001%>\203\365\212\275`\263\002=\377_\264\274\253r\242=\252\363\232\275^*\214\274;(\313=?\260\206\274\224g\330=:j\204=\n\022\300<=\335\342<tf+=G\215\261\274Y\006\202=:Np\274\254\3402<K\241\247=\372\242\277\273yeJ;TCo\275~\235\035=\310N \273\327\311\014>\177\025\'\276\227`J<\322\253\320\275h?\244=\017\010\365\275\177\352\235\275/\232\r=\014\372\310<\025b\017\275\324,\365<\276\033\301=\250\270\223=\225E\006\274d\300+\275\010\331S\275\032\335\341=*v\267=\360\n\312\275H\216*\276\237\366f\275\003k+\276\237N\007\275\230\301 \274~\\(\276\316\270\375:\364\256g\275?8\005>m]0>\351\017\034>}\216\333\274\203(r=\324\0133\274\307\271\375\273\236\265\032=\204\363b<\351\215\345<\001\340\034\276\n\270\252\274H\241\330=\352!\310\275\273\207\266\275\354\001\347=#\243\200\275m\331g=\212\033o<\003\300\2109\335\023\024\275(\254n<\270L\023\274\256V\233<\017\n\000\275\007\n\233\275[!A>\254M\216\275<\311\220\275\273\251\360=\323\243\367;{\320\222=\351v%\276\261z\262=I\335/\276\340\215Z=%\246\224=0\027\351\275O\265\226\274\003\021\255\274\'\327\362\274@\315-\275\270\244x>U\327\220=\313\000\312=\351\350\307<6<D\276%\364n\274:\233\035\275\250\311Y=\253\324\236\275\002\244\016>\266\347/;\346\270\007=VN-\275\317\'X=\213\372\034\276\354\256M>\226K\234<\377\216\354<\273c\010>q}E\275b\274\220\276*#c\275\360\202\026\275g\356\005\275\022<\251\275\340rX=[I|<?\036%\274\363X\200\275\263\336\010\275\211\277\023\276\312K\255\273\206s\021=b\233K\275\224\351\272;K\375\026\275\236\306T\275,H$>f\335\322\275i\177\005;\337#w\275H\373\021\275\027$\r>\276b\274=L\257\300=\006y\242=r\242V=\206)\357<\253\026\261<\213\306\275<\037\037\007=\213u\335\274\215\315\237=h\022\314=\354\241&=\263\t(\275Pe\203\275\365H\370\275i\320\203\274\t\215\346\275\177\302\243\274\356\247\n<v#\010\276\223\214\320=,)\266\275\244\t\370\274\351\227\021\276\262U\251=\220\247\222\273\236\022\005=\373\257|=\013\240\277\274\327\312I\275\301>}=\n<\343\275\201\360\020;VL\224\274\026|9\275\361\204\223\275\355_\227\275s6M\275y\370(\275\315\3210=\365\022\257=\272AL=\247\371\264<x\214\247\275!h->\037(\226\275{\177\203=;\342\340=X\340\345\275\177\226\273\275\316\213\243\275\314\316\r<\336\302\214\275\300\256\026>\004\007!\275oB\246:v^\221<\021\340\271=\n\010n\275\032\372\004<\200\302\354=ER\222\275X2\343=\327\003\023=\243,\241=\263\370\321\275Z!\267\274\355\277\275=g6\014>\004{=\276.\300_\275\377\265\327\274-`\331\274\0032\271=\263\215\274\275\312\232\216\275\366\362?=)\r\n=\023\001\300\275d;?><j\327\275\351\352#=\201\220:>\023\204q\276\224\n4\276\305\3102\275\221\264\271<\324;\364\274}\313\322\275\331\2540\274\360\017p=\271\325\"\275\261\361\374\275\247}\025\276CF\020>\010z\006=fr/\275d\243\227\274\302\251\270=\237\002\212<\2633\346=\355\247\240\274\230\337\245=T \027\2753p-=\231\016\254\273V\002\002=\021\216.\276\267H\216=\255\257\277=\204(\235\275(\310#\276\034\204\300<\353EN\274\371xT=\017\334\265<\t\023\246=\226\375\355=\361}\347\275\231\237\001>c2\377<\211\210\r\276AN>\276\340l\010\275\270\262\232\275\366\212\254\274\031<\336\275o\271\237\275\0238d\275E\335\204=:\007P\275\014\361\032\275\377\266\345\275\014\307\303=\377\243$;\215\337\240=\255\345\007\274\350O\001>\243\270:\275\230oN=\357S\n=\017]\314\275\027\025\316\275\277v\243<_\325L\276\376\034&\275;/K\275=\362\302\274\224=A\275\0018\254<\374\376\230=\266\221\004\276ER\202\275T\275\001=\25276\276=8\000\274L<\230;m=\260=\252\346\005\273h1\315\275\235\227\210>\227\271\227\275CH\221<ME-\275\346a\260<\322\324\351<\356\017Y\275H\2360\275\271\323f\275\021\213W>\310c\276\275\3606\t>K^\357\275/\334!\276\031\365&\275\305\270\331<1y\213;\324\016\000=\2239!=F\305\010\276M)\275=UG\215=QM\210\275\330`\003;\210\256\246=\255\007z\275\024kg;\023\210\003\276+\204\345\274\014\022\'=\375Q\232=\036\230\010>t\026\306\274\003\010\362\275\004~\357\275=\264P=)\336i\275\317j\213<Yx\215=u\326\365:\366\311\317=b\024\325\275[\374\317=\230\033:=\037\020a\275\021x\010\276\225\020A=\177\2364\274\257\277\234=\263\373\034\276\263G\321=\032\177\204=g|<=Zq)>\334\237\316\275\316\265\232=.\006\374\275[\250\'=\226%\261<O\3320\274 z\341\275\211D\333=}\277\215\274/Z\365=\177(\\\275\226F\263\275\022FR>;\2332>\303)\211\274\211\236\257\275\036\\\207\275\344\316\204\273\241B\234\273\017\235\350=\343\240\203\274\232\327\201=\343\036\236\275YK\035>\231\t\006\276Kr\303\275\373\227\263\274o\302\255\275\361_\223\275}v\233=\r\364\023\275\251\234\321\274V\330\000=\375\017\234\275\2632\253\275\005\022\371\274,,x\275\347\262\002\275\271\327\013>\365\211\204<\243\237\221\275\006\330\312\274\245\222\374;\376}\257=d\227\253=\nxf=/=\240=\2743w=\030\017\273=\252y$>\214\026{\274#\232\377;7\303\024\276\023\374\204\274#\310\202\275\323\\5>\231@\320\275r\324\300<K\272\375\275Q\030E\274N\377V\275\230v\241<j\355O\276\341\206\t\276\231\255\312\274\234\375\026\2759]y\275&r\352\274\001\264\212\275\005d\215<ypL\274\307\256\356\275\310\310->&w9=Sr\030\276\253y\222=\236]Z<\304\225/\276\336\032\374<\323-\210\275\362\330\036\276\242@\373=s\236\315=o\257\215\275$t\007\274\331\356\215>Q\266\207\2756\335\232=\361\n\251=\0044\230<\342\374c\275#\241F\274\0133P\275\331d\232=-\033\214\275\327\242\231=\261\017\021\276\313<*=\224\266\362\274-*\245;w\203\313=@\013i\2756\212\201=&f1=\346\261\310\275\266\212U\275\007q\021=\201\267\216\275B\256>=\000m\211\275\355$->\266\2449\275\005.\324=\347\373\254\275\337\266\332\274\311H6==6\270=R\312\020\276`=\251=\252\251>=\320\203\014>k\376\006=\034\361\256<|\236\360\273\236\302\374=\037\"\361\274\334\022\026=\300\343;\276\232U\245;\301t\032\275\250\240e=\336d\263\275\234A\273\275\021+\205\273\233\367\010\276^\234\002>\276\321\260\275pd+<\323\252\325\274\334V\364<\312\266\236=yE\321\275O\301\206<,\313%=x\372j=\332>\267\275hM\351\275pn\035\276\353z\270\275\242\276\t<\314t\333\275\354\0014\275\204\345\374\271#\375V\2758\036\304\275\025\234\360\274\036:k=\337b\243<\016+\n=\037%\007>q\034#\275\355n\016\276Z\030\257=\223h\335\275Ct`\276\021\317\215<\300\227\022<\214\205\274\275gp\221<\262@6\276\370%\027;m\014\277\273sI\352\274G\001\256=\212lF\276\0362\001>dl\256\275sL\302\275\365\356Y<\"W\007\276\006\372-=\331g\317\272\324\013U\275\321\2712>\025\016\000\276\025\300&=\370\301&=\001y\035\275\207\202\021>\025d\002\275\037\353/<\235\352\271<\342\224\023\275\267\031\224=\031\357K=\357\350\212\274\310\322\277\275\311\246\256=\232R\206=d54\275`\335/<f\322\345\2746\001S\274I\017<=\310\034\177<%#\036;\345\237\\>\231\020\205=\2728\356\274\377\200-=Vg\346;\'\231\277\274\r\033D\275\375\235\262\273\256\230\266<b\372\030=\226\315\236\271\277M\310\274PNv<9mq=\262\353\n\276\022\230\r>\365\237X\275\002+\024\272*E\301=\324&Y\275\020\366#\276q\033\313\274A\204\312\274\366!\237\275\335)\027\276%\021e\276aN\035>I\347 \276~\300\206<>4\030\275z\215\331\275\257\312\261\273\375_\017\275\350\307\204=\272\001\377<\202_\340\274k\322]>\310e<>\242\032{\275\036\023\242=\343\350n<\372td=Fh\r\276\033E\364=~\030<\274\231\200\002=\210\026>\275#\273q<\350\361O=\361\255\014\275H\n\'\276\314P&>\221\241\236=P\203(\274K\026\312=\230n\265<;x,<\233\353\032;\273\307\367\274\346\\\004\275R\274\027\276\311\250\255=\220#\201\275\217\350]\276\277\200x<z\221\313\275\311\031\253=\250\330}<[\223P\275\037&!>\333\360\305;p\372\214=\271\324]\275\353\257\014>\22074>e~\341\275\3077\030=\027\344k=\301\377\313=\262t-\2741\360x\275X\324\263\275\371\024\035=\204k\366\273\371\317\302=aS9\275\324S\r\275\323O&=\300\250\005\275\007)\262=\340^\220\275\321\220\200\275\334\336\262\275\234\323\203<\322-\370<}\363\347=Q\332S>\255\340\035=~\026\313\275g\032)\275\372X\231=\267w\355\275\372\314\232=\226\002\236=\"\301\214=\006k\353=;\034v<\227ux\274s\271\320=?\314\322=\364\372\026\275^\325d;\377\273\024\273{h\241\275\013\\\360\275\237\266W\276v\301\3719\214\361\214<P\020M\274,\325.\274\275\017|=\302c(\276\037-\262\275R\210S=\\\333Q=\260\330\307\274l\242\364\274PL\222<\213\214\325\275\233\033\265=V\177\342\275D\212>\274\273F\023\276\215\200Z\2757k\361\274\210\374\203=\315\345(=\261\016D=\254z\330==_\356=F|\260<a\254\365\275\010k\342\275F\341\303=\206F\301=\307\016\207=\301\031\351;\253a\220>\323I\346=^\270\271=\277/Q\275I\304\005>\375.\242\274\374\006\320<\220I\260<>\205\204=Xp\265=\330*>=XK\234;\316\326u\275\204!><4\330l\275\301\327(\276\024\2102\274\341\025L\275\377\"\252<*\254\331=\346\021\202=u\323\001\274d\021)\276-\022\217\275\267X!=$0\027>\330\033\034=\304\265~=ah\267<Q\t\245<\253\242\351<i\305\225\276\233\205\"\274\023\2027\274\263\'\247=\321\242\364;\276\3066<^\261\320=z:\366\274)\037\025\276\366\017\314<\005\257v\276\025!o=\276G\014>\356\206/>\220\3340\276X\0064\275\006V\340=\000\202g<c\325\000>\276:<\276\275-\255=\370T\317<URw:\245\016\221\275V\231\026\275\023Ad=\360\006l=\266\317\236\274\226)\347=T\3516\275\036<E\276\005\t\235=\031\246\277\275\"\331\313<\352\001?>\273\342\233\274o_\026<\230=\243<\333\253\t=\344\315\356;\323\216\332=\252\2342>\213A\343\275\314\274\037<\267\227\262=\221\257a=*\347\226\275f4\236=J\370==Z\377\231\275\010\210\343\274pX\267=rs\250\275\0301\315\274b-L=\240+\206=\201\206\222\275\204\274\201\275\237\265\177=T\202\335\272\240O-:\322jQ>1$\356\274D\177I\275]i\'>h\222\374=\331\352==\303a\223<\260\304\003>i\225M=\301\332\272\273\351b\324\275t*\003<!\231\246=\201\252e=\357\305\203\2751\022\036=\303\010\203\275@\263\003>B\325\334<\177\313-=\rxQ\275\361,\017\276LS\345=\"J\270\2730\377\354\272](\377\275\253\203^=@\274\350=u\023\324=C\254\271\275\006\223&\276\347<\236\275\254\020b=\266r\354\274\002V\030=\205\3049=Ri\201<\226\001\222\275\306\014\264\275\354\2726:v\244\326\275\331X\315=\253\260\301\275\213\223\347\275A\303\023>\302\233\240=\036\312\207\274\036\345:=6>\254=\377j\213\275\024\365\210\275\216 \222=$J[\275\333\220\351\275:\307\020\275a$\216=>\357\337\274\304\016l;@\241!<\220\360(\276\204U\027\275\246\177\022=\357\004\215=\252m\272\275\260\001\020\276|\276\356\274\005\331\327=\031\201\205\274\001\252\365<\262\023\037\276o\251\320<\007M5\276\342\303L;I\217\343<\033\326\034>\036U\023:4b\030=\265w\316<\007\344\303=@\344\264=#\204\014=\244\255\211\274\372\261\370=\371<\036;\220\272\240\275M\307\266=M\200\352\274\274\221\327\275V\016G\275\370G4=^\304\006\275\t\255q=\322\237\007\276^8\275=)\204\273\275\226\320\306=f\017\263=\007\253\360\275\332\264\033\276oW\226=CU@\274\227\3125=\200\023\205\275\254\376*>#\263\214==\375\314<\251,?\274S\242\000>l\232\202\275\010\373\252\275\233\3619\275\021$\225=\305\336\'=@\021\261\272\367\264\256<+\252O>\035\237T=\206D7>\210~\326=\365\022\343\274\021\255D\276\215/\307\275z\241\177\275J\216\306\274\000)\235=6\216\222\275X\306b<k\247\010\276b\250\250\275Q\267\353;)\3300<\335\024N<A\251\316\275\305\264\366<\374-\221<\0334x=\030\021C=A\270\013>;0\252\275\367\243u\275>\214^\274\245d\267=\311\261\037\276\010iV=\242\032\222\275I\\\363:h\237\262\275\r\256\016\275H\022\200\275\260\031\000=\271iS=SD\227=\023*\326=q#)=\210\"\310=\032\233\020\275-?\264\273\004\304r\275)\256\210=\201G\006>\335F\350<\005\300Q\274\203\257@\275\303CR>\266E\220\275\207J[\275\000\375\021>\215N\361\275\215;}=l|s\275k/\003\276\037\037\205<\320\247\262\274w\345\322\275\330vg;\355\037\270<\035\265;>.\272\032>\242\314\304\275Pc\330\274\020\330\023<Z\244x:0\207\274=\242\234\312<\\=3>\314\223\315\274K<^\276\311\241\250=\002V\030\276d\371\003\276\252w\210=]P\307=\312P(>\212\000\211<\033pQ=\345\001\334\273\037hz<S\231\227=\"\330X\275\344\263v\275\333\315@=V\002\271\274\362\032\234\273\017\322\346\275\255}\335<\301g\261<#\267{=&j\256<\326C\025\276\021y\215\275\212O\002<5\021.<]!?\275\342bK\275\264i\246=N\\\274=;\321\020\276\333\000\334<\210\231\235\274\313\266!>\000\"\350;\r\037n<\363\227\035;*\t\030\276\350\342K>Ev\271\274\220<\330<\3135\361\275W8\225=\034\205\\<T\373G>Ku\346\275)\257\300<\332\260G=\344\272r\273$[\300\274i>\277<\373\211O\275c\236\n\276\315\006\357=\356\026|\275}\234\306=\254\326\026\276\215L2=U\201\214=\242\034\260<\336\031i\275q\r\341\275\364\333\215\276j\312\326=\222\006f<\014\344\203\274s4Z\275\033\"\244<\370p#=\206\247\006>\302\265\227<U\337\213=@}\025>n\025\217\274\366\3671>b\210\007>\376Z\263<\010k\260\275\325\220\246<\025q\205<KT%\2761-\'>\345\261\226\275\005\323\312\273\221sA=\367\236H\275#\336\224\274\270K\237=\335g\217\275\265Z\230<c\306=\273\264:\233\275\300~\235=\316\347\034\275\341y;=\312\032(=\213\246\240\275\24437\275\033h4\276jI\275\274v\2222\275\330\206\013=\347\014\311\275fg\"\275\005\010\226=a\265\311<\221\003\253\274@^\334\275\343\320\216\275\205/\362\275\3311\375\273/\271b\274\377x\017>6\334\374;\332\206\'\274N\343\030=\r\177\214\2755\300\032=\252\325\032\275\205R\220<\33766\276~\023\036\276\362\370\006=\023\322\216=\343\304_\276<4\266=x\207\000\274\260\t\260\275\224\024\231=\325\213\277<c\204\243=\332\221\310\274\324\177\213=\265Wp>\316fR\275\241S\024\276\273\006\307\274\256\036\311\275\311d\377=X1\316\273\005\325J\274Tc(>\\u\331=d\351\326<\366A\032>\3475.\272\372\366\274\275*\347N>\242E\250\275\255\255[<\312\025\343\275\202K\336=P\222\245:f\240o<\377\020\262\274-\354\005=\365 \221=\345\035\036\274\013\200\204=\326\253\037=\261M\231\275\007\213\237=\334\t\236=wx\344\274;bd=\304\214->\252\034`\275\014^\260\275\315`\n\275\314\233!\276\317\032\205=x\2769>4\025#\275\320q\221=\361w\224=^\np<\357\r\272\273#s8=\037}\323\275\325\302 <\321%\n\276\257/x<\376\212\331<\025\303\202\275O;x<t\031\341=\370^\177=Z7\244\274\277\365\213\274\002\014\313<NA\270=\\\265b\275[Z\344\274/\351X\272\302\227\311\274/\006\002>\264<$\275}\325\330\275\022\262J=h\211\262\275\341\242\224\274N\307\374<\036\246-=\203\035\006=\345Z\001>^\222\026\275\026`E\276@Z\223\275\376\345\347\275\264\355\013>\216\005e\276\025\354M=\271\347Z>\204\325\260\275\013\035\332\275\244O0\275\027;h=\351<\260\275\2635\203\275S\344|\275\335I\223=\322\322\237<\372\001\252=\207\271[=\200\334\016=1\033\324\274\t\317\304\273\247DK<&C@\2736\310\305<\207\210\225\274\370!\366\275Gy7\276\356o\001\276\275\2766\276:m\207=T\016\017\276P\002A<s4\337<\302\005\233\275W\201\277\274V\305:\275[{1<\260\310\035>\321\240\307\274-\205t\275\023\303t=\n!\334<\327\333\357\275I\356\007\275\342\323\366\275\276\217\274\275\247\321\267=\322\362\320=w\215\235<\364e1\273m\260B\273%\022\200\275\207\r\210=\212r\302\274\364\200c\276\340\203\010\276f`)>h\307\205\275|\350\023\276\273S\034=Gg\224\274:\025\244\275\231\256\000\276\333\320\026>\340\265\203<h\205\373=\300\266\252\275\270\247V>\224\t\003\275%6\332\274BI\004\2768\254\354\275d\3232\275\003\253%\276\005xu\275\275bI\276\244\211\217\275i\344\033=\017\274\003>.\367\311=\347\n\r\274\t$\237=\357\206\022\276U\002\000=R5u;\251x\201\2730\023\337\275\020]g\274\t\261\256\275\356\363\026=\366\327\345={\322\374\272(\374\247=\236p\352\275}\003t=\271}|<\245\022\366<\237B]\271\r\205\313\275\300\204]>q\357\005\275\270\374\316=\007\356\274<\307\353\225\275\241\361\224<\333\t\225=\354 O=\241\314\374:\003\277\200\273\360\265\220\275\031\277\316<5D\026<J\023\276\275\232 V\275\310\324\022>\020\3050\275\024\337\005>\264\357\321\275:\025\212\275K>\333\275\273\351\016\272v\3550\275\213\266\004\276g|\177\274\216?\203=\376~\240<\032\274j\275&\261%=\316`\212=w`\031=:\026Y\276\006\353\t=\322<B<\037\253\245=\260\332\255\27515\t\276\326&\035\275\374\343X=]-G>\215\267\206\273\006\315\n\275O\376A=\346\232[\275x\204\005>\r\0101>\334\252\343\274j\035\204=\224\3668=\332\303\025>\212n$\274sc\204\274\t3\227= \223n\275\337\330U=\212\231\264=w\276G\274@qz\275\373{\233\275\233\263\215\275\034_\351;rIy\275\341\352P\276\233\360\034=\235\236\313=\214-p\275l\355\007\276\246\376\227=Z\320D=\356^~\275s\"\200\276\230\263\352\274\223\323\220\275\002\306<<\201%\301\273V\311\206=\320\026\271\275\020\212\020\275O\265\310\275\354\214(\276/\014\376:\315\223\343<1z\376<i\364o=e\0177\275\375\304\232\275\270\034\276\275\235\272\243\274\0328\366<\230\036\307=b\327c<\240\332\022>\377\002\025>Pd\247\275\305\004n=^\2523=o\027 <\376\357\324\275\035\010\247=\352L5\275\013\211\342\274\226Id9\367\210\r\275\310\220a=\336VJ\275\341\251\224>\016\002\034\274{\353a=q\005\221=\330\320\267\275\270`\014=\334\002e=\243\266[\275\023\273r<\263w\317=$)\373<y\244\213=\255mG=\330-\360<F\033?\275\311 8=\274\322c\275L\223\222=\321\2601\276\321l\217<y\322\314<\365\255t> t@>\360`\030>$\177n\2754-\324\275\275\232)=\002\274\340\275E\213M\275P\273->\315S8=\306\026\275;\370\037\213\275\244\351\206<\002\302]\2751K\334\273\300\031\217<\0029\006>\3126\031\275\325X\332\275\223\332\244=9\277\024\274\262\2158>jr\343:\246\366\243=\366\377\025=\247\325`=\364\227\316<\352\316_\275\236E\260\274\031\204y=\013\214%=> \034<\327\354\t\275\240\351\033>u\326i>\254,\272\275\365}\010\276\225\007!\276^#h\276\216\362\016\275Z[S=f\341\213\275\341i\n>o\203k\275\325\343\252\274;aE>\216\017\262\273\221\267\220\275]\350\242\271p\324\373<V\013\222=\300I\345<\372\300\221\275LrH\275\220\035\330<1,\006<D\345\251\275\343\361\255=\320c\363=I:9\273;\245\371\273\2557x<8<\223<\252\005J=\034\243\177\275[\215\240\275\340L\356=\243\275\225\275\222c\013\275.\"\266\275\206r+<l\311\267\275&/\341<\005\334\032=\037#\037>H\335K=,\324+=\267o\372\274\313A~\275\007\354\016\276\323d\354\275\274\017\212\274\323(\265<\347\240+>\\\'\225\275X{R\275\261\345\321\2747\313\014=P\224?=D\334\370\272\263\\\262\275\332\343\212=N0\323="
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "lstm_3/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/concat"
  op: "ConcatV2"
  input: "lstm_3/Const"
  input: "lstm_3/Const_1"
  input: "lstm_3/Const_2"
  input: "lstm_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/bias/Assign"
  op: "Assign"
  input: "lstm_3/bias"
  input: "lstm_3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/bias/read"
  op: "Identity"
  input: "lstm_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/zeros_like"
  op: "ZerosLike"
  input: "lstm_2/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Sum"
  op: "Sum"
  input: "lstm_3/zeros_like"
  input: "lstm_3/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_3/ExpandDims"
  op: "ExpandDims"
  input: "lstm_3/Sum"
  input: "lstm_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile_1"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose"
  op: "Transpose"
  input: "lstm_2/transpose_1"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_3/Shape"
  input: "lstm_3/strided_slice_12/stack"
  input: "lstm_3/strided_slice_12/stack_1"
  input: "lstm_3/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_3/transpose"
  input: "lstm_3/strided_slice_13/stack"
  input: "lstm_3/strided_slice_13/stack_1"
  input: "lstm_3/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/MatMul"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_1"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_2"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_3"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/MatMul"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/MatMul_1"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/MatMul_2"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/MatMul_3"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/MatMul_4"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add"
  op: "Add"
  input: "lstm_3/BiasAdd"
  input: "lstm_3/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul"
  op: "Mul"
  input: "lstm_3/mul/x"
  input: "lstm_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_1"
  op: "Add"
  input: "lstm_3/mul"
  input: "lstm_3/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/add_1"
  input: "lstm_3/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value"
  op: "Maximum"
  input: "lstm_3/clip_by_value/Minimum"
  input: "lstm_3/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_5"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_2"
  op: "Add"
  input: "lstm_3/BiasAdd_1"
  input: "lstm_3/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_1"
  op: "Mul"
  input: "lstm_3/mul_1/x"
  input: "lstm_3/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_3"
  op: "Add"
  input: "lstm_3/mul_1"
  input: "lstm_3/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/add_3"
  input: "lstm_3/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/clip_by_value_1/Minimum"
  input: "lstm_3/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_2"
  op: "Mul"
  input: "lstm_3/clip_by_value_1"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_6"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_4"
  op: "Add"
  input: "lstm_3/BiasAdd_2"
  input: "lstm_3/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh"
  op: "Tanh"
  input: "lstm_3/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_3"
  op: "Mul"
  input: "lstm_3/clip_by_value"
  input: "lstm_3/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_5"
  op: "Add"
  input: "lstm_3/mul_2"
  input: "lstm_3/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_7"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_6"
  op: "Add"
  input: "lstm_3/BiasAdd_3"
  input: "lstm_3/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_4"
  op: "Mul"
  input: "lstm_3/mul_4/x"
  input: "lstm_3/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_7"
  op: "Add"
  input: "lstm_3/mul_4"
  input: "lstm_3/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/add_7"
  input: "lstm_3/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/clip_by_value_2/Minimum"
  input: "lstm_3/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh_1"
  op: "Tanh"
  input: "lstm_3/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_5"
  op: "Mul"
  input: "lstm_3/clip_by_value_2"
  input: "lstm_3/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/TensorArrayUnstack/Shape"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_3/TensorArrayUnstack/range/start"
  input: "lstm_3/TensorArrayUnstack/strided_slice"
  input: "lstm_3/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_3/TensorArray_1"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "lstm_3/transpose"
  input: "lstm_3/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "lstm_3/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/while/Enter"
  op: "Enter"
  input: "lstm_3/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_2"
  op: "Enter"
  input: "lstm_3/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_3"
  op: "Enter"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Merge"
  op: "Merge"
  input: "lstm_3/while/Enter"
  input: "lstm_3/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Merge_1"
  op: "Merge"
  input: "lstm_3/while/Enter_1"
  input: "lstm_3/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_2"
  op: "Merge"
  input: "lstm_3/while/Enter_2"
  input: "lstm_3/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_3"
  op: "Merge"
  input: "lstm_3/while/Enter_3"
  input: "lstm_3/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Less"
  op: "Less"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Less/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/LoopCond"
  op: "LoopCond"
  input: "lstm_3/while/Less"
}
node {
  name: "lstm_3/while/Switch"
  op: "Switch"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_1"
  op: "Switch"
  input: "lstm_3/while/Merge_1"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_2"
  op: "Switch"
  input: "lstm_3/while/Merge_2"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_3"
  op: "Switch"
  input: "lstm_3/while/Merge_3"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_3/while/Identity"
  op: "Identity"
  input: "lstm_3/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Identity_1"
  op: "Identity"
  input: "lstm_3/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_2"
  op: "Identity"
  input: "lstm_3/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_3"
  op: "Identity"
  input: "lstm_3/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/while/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul"
  input: "lstm_3/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_1"
  input: "lstm_3/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_2"
  input: "lstm_3/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_3"
  input: "lstm_3/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add"
  op: "Add"
  input: "lstm_3/while/BiasAdd"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul"
  op: "Mul"
  input: "lstm_3/while/mul/x"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_1/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_1"
  op: "Add"
  input: "lstm_3/while/mul"
  input: "lstm_3/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_1"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_1"
  input: "lstm_3/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "lstm_3/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_2"
  op: "Add"
  input: "lstm_3/while/BiasAdd_1"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_1/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_1"
  op: "Mul"
  input: "lstm_3/while/mul_1/x"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_3/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_3"
  op: "Add"
  input: "lstm_3/while/mul_1"
  input: "lstm_3/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_2"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_3"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_3"
  input: "lstm_3/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "lstm_3/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_2"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_1"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_4"
  op: "Add"
  input: "lstm_3/while/BiasAdd_2"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh"
  op: "Tanh"
  input: "lstm_3/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_3"
  op: "Mul"
  input: "lstm_3/while/clip_by_value"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_5"
  op: "Add"
  input: "lstm_3/while/mul_2"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_6"
  op: "Add"
  input: "lstm_3/while/BiasAdd_3"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_4/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_4"
  op: "Mul"
  input: "lstm_3/while/mul_4/x"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_7/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_7"
  op: "Add"
  input: "lstm_3/while/mul_4"
  input: "lstm_3/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_4"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_5"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_7"
  input: "lstm_3/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "lstm_3/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh_1"
  op: "Tanh"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_5"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_2"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/mul_5"
  input: "lstm_3/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_8/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/while/add_8"
  op: "Add"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration"
  op: "NextIteration"
  input: "lstm_3/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_3/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit"
  op: "Exit"
  input: "lstm_3/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Exit_1"
  op: "Exit"
  input: "lstm_3/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_2"
  op: "Exit"
  input: "lstm_3/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_3"
  op: "Exit"
  input: "lstm_3/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range"
  op: "Range"
  input: "lstm_3/TensorArrayStack/range/start"
  input: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_3/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/TensorArrayStack/range"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "lstm_3/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/sub"
  op: "Sub"
  input: "lstm_3/while/Exit"
  input: "lstm_3/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/sub"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose_1"
  op: "Transpose"
  input: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_3/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9636616
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Tanh"
  op: "Tanh"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7676164
    }
  }
}
node {
  name: "dense_2/random_uniform/sub"
  op: "Sub"
  input: "dense_2/random_uniform/max"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/mul"
  op: "Mul"
  input: "dense_2/random_uniform/RandomUniform"
  input: "dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform"
  op: "Add"
  input: "dense_2/random_uniform/mul"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/kernel/Assign"
  op: "Assign"
  input: "dense_2/kernel"
  input: "dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/kernel/read"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/bias/Assign"
  op: "Assign"
  input: "dense_2/bias"
  input: "dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/bias/read"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Softmax"
  op: "Softmax"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum"
  op: "Sum"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv"
  op: "RealDiv"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub"
  op: "Sub"
  input: "loss/dense_2_loss/sub/x"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value"
  op: "Maximum"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Log"
  op: "Log"
  input: "loss/dense_2_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/mul"
  op: "Mul"
  input: "dense_2_target"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/dense_2_loss/mul"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean"
  op: "Mean"
  input: "loss/dense_2_loss/Neg"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual"
  op: "NotEqual"
  input: "dense_2_sample_weights"
  input: "loss/dense_2_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Cast"
  op: "Cast"
  input: "loss/dense_2_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_1"
  op: "Mean"
  input: "loss/dense_2_loss/Cast"
  input: "loss/dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv_1"
  op: "RealDiv"
  input: "loss/dense_2_loss/mul_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_2"
  op: "Mean"
  input: "loss/dense_2_loss/truediv_1"
  input: "loss/dense_2_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "dense_2_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "dense_2/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_4"
  op: "Enter"
  input: "training/Adam/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_2"
  op: "Merge"
  input: "training/Adam/gradients/f_count_4"
  input: "training/Adam/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_2"
  op: "Switch"
  input: "training/Adam/gradients/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1"
  op: "Add"
  input: "training/Adam/gradients/Switch_2:1"
  input: "training/Adam/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_5"
  op: "Exit"
  input: "training/Adam/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_5"
  op: "Enter"
  input: "training/Adam/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_3"
  op: "Merge"
  input: "training/Adam/gradients/b_count_5"
  input: "training/Adam/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_6"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_3"
  op: "Switch"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_1"
  op: "Sub"
  input: "training/Adam/gradients/Switch_3:1"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_3"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_7"
  op: "Exit"
  input: "training/Adam/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_7"
  op: "Enter"
  input: "training/Adam/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_4"
  op: "Merge"
  input: "training/Adam/gradients/f_count_7"
  input: "training/Adam/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_4"
  op: "Switch"
  input: "training/Adam/gradients/Merge_4"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2"
  op: "Add"
  input: "training/Adam/gradients/Switch_4:1"
  input: "training/Adam/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_4"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_8"
  op: "Exit"
  input: "training/Adam/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_9"
  op: "Enter"
  input: "training/Adam/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_5"
  op: "Merge"
  input: "training/Adam/gradients/b_count_9"
  input: "training/Adam/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_10"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_5"
  op: "Switch"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_2"
  op: "Sub"
  input: "training/Adam/gradients/Switch_5:1"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_5"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_11"
  op: "Exit"
  input: "training/Adam/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  op: "Shape"
  input: "dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  op: "Mul"
  input: "dense_2_target"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_2_loss/clip_by_value"
  input: "^training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  op: "Neg"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_3/while/Exit_1"
  input: "^training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/sub"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  input: "lstm_3/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_3/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_2"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_3/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/add"
  op: "Add"
  input: "lstm_3/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/add"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  input: "lstm_3/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  input: "lstm_3/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  input: "lstm_3/while/add_6"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_3/while/Identity_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  input: "lstm_3/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  input: "lstm_3/while/add"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_2/while/Exit_1"
  input: "^training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  input: "lstm_2/while/Tanh_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_10"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/add"
  op: "Add"
  input: "lstm_2/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/add"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_7"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_11"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  input: "lstm_2/while/Identity_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  input: "lstm_2/while/Tanh"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  input: "lstm_2/while/add_6"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_2/while/Identity_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  input: "lstm_2/while/add_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  input: "lstm_2/while/add"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_12"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_13"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_13"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_14"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_15"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_16"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_1/while/Exit_1"
  input: "^training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_17"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_17"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  input: "lstm_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_7"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_18"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_18"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_18"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  input: "lstm_1/while/Identity_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  input: "lstm_1/while/Tanh"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  input: "lstm_1/while/add_6"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_1/while/Identity_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  input: "lstm_1/while/add_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  input: "lstm_1/while/add"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_19"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_20"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_21"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_22"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Fill"
  input: "training/Adam/zeros/shape_as_tensor"
  input: "training/Adam/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Fill"
  input: "training/Adam/zeros_1/shape_as_tensor"
  input: "training/Adam/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Fill"
  input: "training/Adam/zeros_2/shape_as_tensor"
  input: "training/Adam/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Fill"
  input: "training/Adam/zeros_3/shape_as_tensor"
  input: "training/Adam/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Fill"
  input: "training/Adam/zeros_4/shape_as_tensor"
  input: "training/Adam/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Fill"
  input: "training/Adam/zeros_5/shape_as_tensor"
  input: "training/Adam/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Fill"
  input: "training/Adam/zeros_6/shape_as_tensor"
  input: "training/Adam/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Fill"
  input: "training/Adam/zeros_7/shape_as_tensor"
  input: "training/Adam/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Fill"
  input: "training/Adam/zeros_8/shape_as_tensor"
  input: "training/Adam/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Fill"
  input: "training/Adam/zeros_9/shape_as_tensor"
  input: "training/Adam/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Fill"
  input: "training/Adam/zeros_10/shape_as_tensor"
  input: "training/Adam/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Fill"
  input: "training/Adam/zeros_11/shape_as_tensor"
  input: "training/Adam/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Fill"
  input: "training/Adam/zeros_12/shape_as_tensor"
  input: "training/Adam/zeros_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Fill"
  input: "training/Adam/zeros_13/shape_as_tensor"
  input: "training/Adam/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Fill"
  input: "training/Adam/zeros_14/shape_as_tensor"
  input: "training/Adam/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Fill"
  input: "training/Adam/zeros_15/shape_as_tensor"
  input: "training/Adam/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Fill"
  input: "training/Adam/zeros_16/shape_as_tensor"
  input: "training/Adam/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Fill"
  input: "training/Adam/zeros_17/shape_as_tensor"
  input: "training/Adam/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Fill"
  input: "training/Adam/zeros_18/shape_as_tensor"
  input: "training/Adam/zeros_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Fill"
  input: "training/Adam/zeros_19/shape_as_tensor"
  input: "training/Adam/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor"
  input: "training/Adam/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Fill"
  input: "training/Adam/zeros_21/shape_as_tensor"
  input: "training/Adam/zeros_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_21/Assign"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21/read"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22"
  op: "Fill"
  input: "training/Adam/zeros_22/shape_as_tensor"
  input: "training/Adam/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_22"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_22/Assign"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/zeros_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_22/read"
  op: "Identity"
  input: "training/Adam/Variable_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23"
  op: "Fill"
  input: "training/Adam/zeros_23/shape_as_tensor"
  input: "training/Adam/zeros_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_23"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_23/Assign"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/zeros_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_23/read"
  op: "Identity"
  input: "training/Adam/Variable_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24"
  op: "Fill"
  input: "training/Adam/zeros_24/shape_as_tensor"
  input: "training/Adam/zeros_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_24"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_24/Assign"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/zeros_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_24/read"
  op: "Identity"
  input: "training/Adam/Variable_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25"
  op: "Fill"
  input: "training/Adam/zeros_25/shape_as_tensor"
  input: "training/Adam/zeros_25/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_25"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_25/Assign"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/zeros_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_25/read"
  op: "Identity"
  input: "training/Adam/Variable_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26"
  op: "Fill"
  input: "training/Adam/zeros_26/shape_as_tensor"
  input: "training/Adam/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_26"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_26/Assign"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/zeros_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_26/read"
  op: "Identity"
  input: "training/Adam/Variable_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27"
  op: "Fill"
  input: "training/Adam/zeros_27/shape_as_tensor"
  input: "training/Adam/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_27"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_27/Assign"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/zeros_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_27/read"
  op: "Identity"
  input: "training/Adam/Variable_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28"
  op: "Fill"
  input: "training/Adam/zeros_28/shape_as_tensor"
  input: "training/Adam/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_28"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_28/Assign"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/zeros_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_28/read"
  op: "Identity"
  input: "training/Adam/Variable_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29"
  op: "Fill"
  input: "training/Adam/zeros_29/shape_as_tensor"
  input: "training/Adam/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_29"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_29/Assign"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/zeros_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_29/read"
  op: "Identity"
  input: "training/Adam/Variable_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30"
  op: "Fill"
  input: "training/Adam/zeros_30/shape_as_tensor"
  input: "training/Adam/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_30"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_30/Assign"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/zeros_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_30/read"
  op: "Identity"
  input: "training/Adam/Variable_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31"
  op: "Fill"
  input: "training/Adam/zeros_31/shape_as_tensor"
  input: "training/Adam/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_31"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_31/Assign"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/zeros_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_31/read"
  op: "Identity"
  input: "training/Adam/Variable_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32"
  op: "Fill"
  input: "training/Adam/zeros_32/shape_as_tensor"
  input: "training/Adam/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_32"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_32/Assign"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/zeros_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_32/read"
  op: "Identity"
  input: "training/Adam/Variable_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33"
  op: "Fill"
  input: "training/Adam/zeros_33/shape_as_tensor"
  input: "training/Adam/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_33"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_33/Assign"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/zeros_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_33/read"
  op: "Identity"
  input: "training/Adam/Variable_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34"
  op: "Fill"
  input: "training/Adam/zeros_34/shape_as_tensor"
  input: "training/Adam/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_34"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_34/Assign"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/zeros_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_34/read"
  op: "Identity"
  input: "training/Adam/Variable_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35"
  op: "Fill"
  input: "training/Adam/zeros_35/shape_as_tensor"
  input: "training/Adam/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_35"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_35/Assign"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/zeros_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_35/read"
  op: "Identity"
  input: "training/Adam/Variable_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36"
  op: "Fill"
  input: "training/Adam/zeros_36/shape_as_tensor"
  input: "training/Adam/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_36"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_36/Assign"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/zeros_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_36/read"
  op: "Identity"
  input: "training/Adam/Variable_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37"
  op: "Fill"
  input: "training/Adam/zeros_37/shape_as_tensor"
  input: "training/Adam/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_37"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_37/Assign"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/zeros_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_37/read"
  op: "Identity"
  input: "training/Adam/Variable_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38"
  op: "Fill"
  input: "training/Adam/zeros_38/shape_as_tensor"
  input: "training/Adam/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_38"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_38/Assign"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/zeros_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_38/read"
  op: "Identity"
  input: "training/Adam/Variable_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "lstm_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_14/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_15/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "lstm_1/bias/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "lstm_1/bias"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_16/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "lstm_2/kernel/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_17/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "lstm_2/recurrent_kernel/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_18/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "lstm_2/bias/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "lstm_2/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_19/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "lstm_3/kernel/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_20/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "Add"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "Add"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "lstm_3/recurrent_kernel/read"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_23"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "training/Adam/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "Add"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_21/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "Add"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "Add"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "lstm_3/bias/read"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_26"
  op: "Assign"
  input: "lstm_3/bias"
  input: "training/Adam/sub_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "Add"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_22/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "Add"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "Add"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "dense_1/kernel/read"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/add_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_29"
  op: "Assign"
  input: "dense_1/kernel"
  input: "training/Adam/sub_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "Add"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_23/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "Add"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "Add"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "dense_1/bias/read"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/add_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_32"
  op: "Assign"
  input: "dense_1/bias"
  input: "training/Adam/sub_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "Add"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_24/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "Add"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "Add"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "dense_2/kernel/read"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/add_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_35"
  op: "Assign"
  input: "dense_2/kernel"
  input: "training/Adam/sub_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "Add"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_25/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "Add"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "Add"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "dense_2/bias/read"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/add_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_38"
  op: "Assign"
  input: "dense_2/bias"
  input: "training/Adam/sub_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_9"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_22"
  input: "^training/Adam/Assign_23"
  input: "^training/Adam/Assign_24"
  input: "^training/Adam/Assign_25"
  input: "^training/Adam/Assign_26"
  input: "^training/Adam/Assign_27"
  input: "^training/Adam/Assign_28"
  input: "^training/Adam/Assign_29"
  input: "^training/Adam/Assign_30"
  input: "^training/Adam/Assign_31"
  input: "^training/Adam/Assign_32"
  input: "^training/Adam/Assign_33"
  input: "^training/Adam/Assign_34"
  input: "^training/Adam/Assign_35"
  input: "^training/Adam/Assign_36"
  input: "^training/Adam/Assign_37"
  input: "^training/Adam/Assign_38"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "lstm_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "lstm_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_22"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_23"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_24"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_25"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_26"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_27"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_28"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_29"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_30"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_31"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_32"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_33"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_34"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_35"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_36"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_37"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_38"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^lstm_1/kernel/Assign"
  input: "^lstm_1/recurrent_kernel/Assign"
  input: "^lstm_1/bias/Assign"
  input: "^lstm_2/kernel/Assign"
  input: "^lstm_2/recurrent_kernel/Assign"
  input: "^lstm_2/bias/Assign"
  input: "^lstm_3/kernel/Assign"
  input: "^lstm_3/recurrent_kernel/Assign"
  input: "^lstm_3/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^dense_2/bias/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_9/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_21/Assign"
  input: "^training/Adam/Variable_22/Assign"
  input: "^training/Adam/Variable_23/Assign"
  input: "^training/Adam/Variable_24/Assign"
  input: "^training/Adam/Variable_25/Assign"
  input: "^training/Adam/Variable_26/Assign"
  input: "^training/Adam/Variable_27/Assign"
  input: "^training/Adam/Variable_28/Assign"
  input: "^training/Adam/Variable_29/Assign"
  input: "^training/Adam/Variable_30/Assign"
  input: "^training/Adam/Variable_31/Assign"
  input: "^training/Adam/Variable_32/Assign"
  input: "^training/Adam/Variable_33/Assign"
  input: "^training/Adam/Variable_34/Assign"
  input: "^training/Adam/Variable_35/Assign"
  input: "^training/Adam/Variable_36/Assign"
  input: "^training/Adam/Variable_37/Assign"
  input: "^training/Adam/Variable_38/Assign"
}
versions {
  producer: 26
}
