node {
  name: "lstm_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10793741792440414
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10793741792440414
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3357977
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1/random_uniform/max"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform"
  input: "lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform"
  op: "Add"
  input: "lstm_1/random_uniform/mul"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/read"
  op: "Identity"
  input: "lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
        tensor_content: "\027\350\016<j\353x=CT\210<\216u\243<\231\021u<\303\"?=\350e\263;M\352/<U]i\275\242>\353\274D5\226=:c\212\274\300\r(\275\340\032%=O\257!=[\353\310=\322\325G\275D5\363<\244\217x=\334 \242<\275)\000\274+\214\017\275-\\@=\003\246\357<\210\323$\275igV=\007\264\'\274\2163\n>\211\353\366:\356\333\000\276\2557#\275]\325=\275\025h\371;\010\204\277\275\351\263\326<B\216\245<8iL=g\020\007=\233\240>\275\306\031\346=H&\217\275Rnl=\366\006\222<\311<\311\275\303\305\001=\013H\032<\316\235\033<\220\\}\275\350\343\002\275\262\322\r=\256-V=A\370\352\273\364i\211\275Y\231\023=\342b<:Wf\354;\361\227\253<<\270O\275\321g\021=\n\302\246<\0028\350\274\260\240\337\274\313e\202;C\350q\274\257\317\024\275E}\255=\267\270\260=\260\343W\273\337\260\324\275\376\024q\274\035\273\206\275\303k\212\275-\304\214=\003$\204\272[]v<\376\2709\275\330\301\264=\373\222\217\274\362\001\214<\246bT;\333\270)\275J\354\025\274\343\030\305\274\263\317\361=\245\203+\275\362\341\333<\200\234C\275\306\"0\275\273\023D\275\345\022\024\275\341\ta<\362\375<=\331y\037<\211\"d<\236\362\230\274\013,A9\0103\233=\207\241\346<\025\001{\274C\266\261\273\351\323\251\275\242\'\326\274\236}\221<\313\227\352\274\372\330=\273<\030y=\377\035\256\274LL\363\274;\257\323\2758\263\r=\2607Z<\223\367\330<\233\316\200=F\355\233=\322q\262\274\327j\024>\363\336\200\275\024\002\237<\274\353*=\'q\262<\007\361t\274*\332\245\275\000\213\212<\244\344I\275\265\376\210\275\224?\243\273\0355\214\274!\352)\275\306Ky<\0139\311<\2649\363</\217Q=\200Or\274y\220-\274\275q}\275d\212:=\017B\036=\304E\300<V\275\307\274\315\266K<\241\255\234\275\231;\205<1\344\357\275[\331\231=\344\335\017\275[\000b\272|\307\236<\022\023\265\273\003\325\323=\374\2248\274\233bF<i\235\365\272\215\1773=#\260\026=\035\323\225\275bF\036=\376u\220\275\213\354\317<\343&\363;s;\002\2758t\317\275y\236\221;k&v=a\035\376;bU\022\275+\270\2378\252\341\201\273\265\324o=\002\354\201\275\013\202\221=\242Y\306<\221\"D<\266\"?\275?\214$\275\303\363\037=8\307q\274\254G\223\274\005\255\033\275\227s\300\274a=\036==\376!\274\265\334x\275\032\243)\275\024\263\241\273\221\026\301\275\203fS<\225v\277<\354\334\036\275\2619\303\274a\002V=c\003\n\275\345\236\346\274\252\365\324\273?b\370;\275!\205=\357\230\020\275\241\001b\274b\204<=\261\317\256\272\200\037X\274\351\231\020\273\206\356f=\t>\022<j\202H\2754\343\036<;y\032=S\260\204\274v\206\253<\274{6\274a\261\007=\273o\215:\221aQ<\255\246L=\226(\033=,c\006\274$\202\246<<\"\364;\324\330\221\275\201\213!=\205A\027\275\264\342\262<8\030:=\377Yi\275he]\275&\252\026\274o\252\364\273\321A\317\274ac\322=\303o\344<\251\301e=a\310\363<\232\263\253\275:\332<\273>t\223\274\304\307)<$\027\324\274\346<\214=k\251\370\272\335\270\n=6?\3419\344*\345<f\357s;q\364\245=\323{M=\331;\364\273\035\377$\275Q0\304<\026\3446\273\241\303\245\274\363\000e\275j\244\314=\307\030f\275\006\304`=2\352W<FC\236<\271\325\320=\312\224\264<q/\353;B\263\362<\027\337\303\273\242\206~=\031\341\341<\reL\274u\265\201=\214J\014=\013|\202<\024d\225\272&B\320=\256$\222\274\006\247\233=\n\304 \274\276\214\207\275|`\210\275B|a\274J\266\355\275M\207\266\273\"\260\231\274\177\240==\312\037\345<\205i\311\274\201\344\272\274\206\317\242<\345_K\275\017\320`<\223@\032=s\2657\275\227d\241<\222d\335\274\031\224W\275\206\270==\3063U\273\325\250\265\274\003?\344<\354Qh=Aw\301;\372\302D=\317\246 \274\205\\\240=I\363.=1\311\330\274\274\2309\275\310\301\302\275\221=\363<3\037r\275\312\305(=\341$\024\274\222\316\261\274\322W\020=X\007\354\274C5\203=y\345-=\363\237\366\273Y1\316\273\263\255\307<UC\270<\263\201a<\233\230\006\274_\017}\274\320o\234=\256\331\372\274>,V=\330\277\030<\301\254\320;\213\312Y=\264;\200\275<\234\200<\342\315\211=^\202\363\273\267\217\373<\3217\212\274\031\233\233\274\2210\314<\264\370\316\274g\033^\274\247\n\222<\325\345\237\275\223\000A<\315\203z<\rb\347\274V\350X\272;0\315;37\344\274\245:\325;\346\364\207=\037S\356;-2\353\274\363c\033\275\027Z\226;\365\372h\274\236\351p=?\277d<\350\307v\275\250s[\274\307\246!\275Q8\212\275\034a}\275\035^\000\275\254\214\251\272q\231\325\275\005u\362<S\0377<L\033\211:\243n\001\274p\372o=A/\233\275\352\001\304:nA\367<\306\277v\275\'RW;8Eq<\343p\311;\275\016j=\331(\217=\327]\330<3\377\221=P\337\201\273\203\263\\\274\021\204.=\257*Z=\322\271\273<!>\300\274\001-\021\275\262\230\302<\306\013\243\274\254Z\033\275$&/\274\010)\357<\032\030\003=\326\226\344\275Au\276;%\025\240\275\2522k<\014P\032=+\245\266<\303y\315\273\213\214\':\310T\313\274\312\263-\274\302\020\016=?u\026<n\331;=H\006\244\275\000\254\336<\354w\337:vi!\273\310#,\274\266\252\017\275\341\300\275\273\310\345\r=8\316\215\273\274\001\"\275\347\212\251\274\213U\235\274\344\2041<\"D\t\275$\031T\275J\'\257\274[\210C\274}\244\370<H\212\334\274\241\340=\275\310\211`<\321V*=\230g\206\271\220\224\027\274S\344\303\273\374\207C=2p\013\274Y\250\027;\202d\273\274e7\366<Z\260\023=W}\014=f\206\210=\025w\264\273|8\255=b\243\251=\003\254\365<oO\271<|\370\004=\311&\260<d\315~=\n\0270=\363\207\247\274\373d\t\275\260\024H<\214\234\202\275<8\356\274\215\315\250\275a\324\016=\"\213]<\266*\317<P\035L\275\220\0252\275A\317\325<\267\374S9\366\267u=R\277\373<\036)\264\274`\274\26087hP\274\221\356\260<\217\333\001=\327o\207\275\213\001n=V\303/<\213\227M:v\336\225\273\244\227=\275\203}\204\275E\237\257\274H\236\210<\213I\335=#\316,\275\372\234\022\2755\266\261=\177\230\240\275\301\007\355\272mj\221\275\262\273g=\235U\003<\274\025\240<\253\317\231\275\021\006\002=\204\350\353\274\023$\234\275\357\213\326<\005O\322<W\301\212=\236/r=}\344s\274\270\002\033\275\365G\245\275\316\3256\274\243\352u\274\036F\250\275\325\327\213\274\276\325\\<\212\231\032<k\205O=i#\266\273n\200\t=\323i*=\210~\271\274N)\031<\266\266\037\272\231\000^\275\315,\246\272\220\223\237=\356\326\214=\275/~<>\204\217<[K\345\274\362\n6=\036\355\250\2746Q\210=d\r\363<k!p=\350\214\207\273\373\234[<\270\021\276\274\222\302[\275\010\345J<&r\326<\225\307\350\273e\255\235\275\035\021U=\350\366\2019H\264\214\274g\373\271\274\033\203\224<\363\351I=\323\304\376\274\023J\350\272V\3134<\357\373I\274\177\036O=ev\035\275\315R\315\275\265\372\233\275\177\3460<,(\260;\034\360\342\274\204~4\275\235;\271\273\245k\214<\267\346=<\333\343\017=\211\347\231=\217\376\347;\273\332\025=~.\267<\315\037\303\273\316\301\225\273\034\010\237\272{\354*=~\2634=N\300$\275!t\005=\21408\275\352\311\334\275\271\370\273\275*i <Z\234\204\275q\357\210=\254a\275=P\371\372<\300t\214\274\332#8\274\020o\034\275\212\027\r\275\000t\236=\350uB\275\034\367\\<\273\375#=M\212U=Y> \275\312\211\327=\201\372M\274\205/\253=~\254;\275B\357\376<I|\335<\240\255\304\274\241\247\274\274C\027\261<\227\272\202=\023v%\275\010\271\224=\036|\353\274\252\013\021\275VSg\275\250n\030=\2469\277\2746!\247\275c\310:\275\234\216\363<d(1\275!6\330\274i\353\233<j\024\272<Up;\275\231\366\366\274\004\345\251=W\213\223\274D\323\343=x\203\226=\202\325\033\275\264g\1779\355\355\000<\306U\237\273\212\246\004=\330g\260\274\332\253\025>\325\344O<\305\344\356=A\265\260:\rh\223:b|4<\365\370\013\275\326\247L=Z/\222;\362\211\243=\350\262K\273\262AC\275\373\307\000<O\227\014<=\3615\274\335\322\254<\302\\x=AY\016\274\375\2658<a \330\274\"\275\241\274]Pc\275z\277e=\320\315\354< \220W=*R\032\275\377\177\010=%?\232;\341z~=.\3114\275\0366\t<\275\'\266\274\'*\207\274\340Fz=\020<\206<(\374\346<\254\246a\275\243\024D\2751\2253=8\341\231\274&6\246;\206Jd=!5\021\275\036\000\273;{|\031==\345\250\275\207Z\303<|wd<\34211=~h\026\274$\373\304;\326t\030\275@\227`\275@\354\226\274\\u\001=\273\361\374<\231\016\341<o\006\344;\035i1\274B\320\023\274\252\344\036\275UG`\274\321z\022=\241\030\354\272\372\225\346<\004&&<gR\200\275\340o\000=\016x\335<\\q\t\276\0263c\275a\030S\2759B\030\274\211\275\227\275ho\226<\345\311\224\274 \347n<\322\256\221\274O\266\177\2754}9\275\010\272\030<\227nY<\264\306\362<`\266\023=\274\031`;M\351\241\274\230\276`;\006\213\326<\371:/\275\371\361\224\273h6\010\275}j\332\274\3038\300\274<N\272=\253?\':\214\003\247\274\231*o=]\001\017=D1G\275\377|3=\345,\217=\302I\246<e\031!=@\201\032\274^J!<\250\021\317\274<n\212<\305\354}=\265\000T\275Rz =\353H%\273\')\201\275\021]\r\275\207G\024\2750\nO=X\371\353<\346;\207=3\360\002<\304;\217<\030\3425\273\345W5=$U\355\274!w\216=\240K`=\022\345\244< `Q\275\237\177R\275!P\223=\323\325@\275\227\032]\275\300\277h=\177&\227=\201[+\275\301\251\201<m\303\027\275d\021\000\274\t\024~=M\014\361\274\030rt;\211p\251=u\303[=tR\330\274Jd\221<\312\3136=\312\037\207=\'Tc\274\334\035\245<\321K\210\274\260\233\203\275pbU\273 +\n<\005\345\217\275\373\323\246\274\033)*\275\276\001\205\270\230\353\312\274\367\"\037=ya\002=\332>\314<\300\244\376\273\020\227\313\275\251\350\340\274\315v\024\274@\357\214=\210\266\244\275\376,\330\274\014\240-=\013\305:\275\000d\022=k\222h<\235\300\017=\311j\367\275\307j2\274\271\364\017<\341\316\214\275\032\324\034\2752I&=w\261d=\313\2131\275\030$n=\016J9=\032(\372:v\310\202<\377\226\367\2748 S\275:\252\033<\344\320\230\274m\256\207;\325\205\311=\321|\353:g=%=r\336B\275\334\324\346\274\203\204\373\273\333\235U<\373i\212=\2216\246\274@\037\336\274\026\rp<\257\274\t\275\245Q\177\274X\203\021=\265\003\205\275*\375/<s\213\231\273\316sy<\177\034*\274\177\360d\275\003Q&=\017\003%=\347y\256\275\207%!=\033\317\204\274a\2010=\222\026k=\033\203\275\273\261\023\311\275\372\3253\272\tp\002=\215\201\026;\315\246\220\274\002\016\277\275\303O\324=h\226\325;\245\306\000\273G\310\215\275\027Y\323\274\004\020\006<\367\346\320\272\253\013\211=L\304\226<\365\234`\274\0100\001\275\300k\346\273i\230\231=\333\234S<\337\270\032=s\021\301\273\023^\374\274\337\005\014\275\363\343\277<\205U[<c\026E\273Zd\034=|\306\204\275q:\273;\007\304\345<y\200\243=u\005\224<7 \000<\231bd\275\360\336\215\275\206z\021;\270.V<\n\275\203\275\013\347J<\250d\035=y\355\026=\315\004\226\275c0\016\275&o\227\274eH\343\272\023\016\261\273\006\362\304;cQ\031=`^\350=\317\251R\275Y\355Q=\333-C;\241\373\001>\266w\346\275g\003\232\274\002\334|\274\006Pn\274j\353\205=\013M8\274\000\232O=\277 \334\274/2\335;G\232\215<\231\0025<-?\251\273\270<g=\311\350\377\275\342:\324<\316\370;7\037\002\"\275\324\274|<\206\271j\274d\025W\275\306O-=\217\351\n\275\342\216\"=\364\223\330<\261<\024;\177\366\037=kJ5\275\224\247V\275\351\200x\272\220\300f:\343W\024\2749\031\"\275\034\247K<F\035\353\272\373p\205<\252@\317=\254\272\356=I\334h\274S\031\225\271V\221\244\274*\025\207;\025L\351\274\253 \366<9\363\316\274t\022-\275\017\334\032\275\"9\375\274\232\030X\274\014\004\210;1\204\217\2747\004]\273\321R\030\275\351\244\334<\200\245\333:\310H\257:\343/T\274/|\230\275\246Lk\275K\033\004\275\204%\216<\251\313\264=\357\243L\275\312\201\324\274\313\366\271\274\370\nI=\356~\202\275\021\000P\275M\361\233;n7\303<\010B\323\273\352Fx\275L\267O\274V]M\275\264\020\025=\265\247\223\274s\312\255\275;\342F\275\263\351\350;\275\377\025\274\242\220D=\204\332\210=\344L\031<\315\345i=\277\336\326<^\260x=\215\021G\275\213\t\201\274\311L\326;\\G\273\275\207\0321=\201\247\202\275\323[\257</t\025\273\373|\242\274&Q\275\275\3210\014\275-\235R<\307D\202=_\3124=\211\371\"<0BX<j\207\r=>\230\316<\356\346 =5UJ<2\214K=j\005?=\n\241_\275b\237\320\274\235\003\362;\321sA=7(8<\253\223\235=\022G\031\275\342\350\210\275\207\2034=\024M\t\275\034\036\303\274\225\235\356=/s\336<\377\276\361<\251\252d\275\025t\310;<\275w=5\227\216\274\010\315l=\304\350\024\2757c3=\013\371\372<^}3<\321\372\260:\260\337^\275\345\001\017\273\213\224|:\232\302\247=\370\372\010<5\025\177<+\262\034=&\007\243\274\250\316!=\020I\204;\2361\234\274CD\002\2757\020\202\272\371\t\235\275\3063^=\2273y\275h\361\201\274&\216c\274\034P\304=9\265\335\274\365Z!=\371\030\306\274\261\204\363<\010:v\275\321\307\351\273\337\235t\275\316R\226\273\210\364\360\274\264$\033\275\323\t\327\274\361w6\275\334WL\275\251\224+=\353\362\377<OZ\270<\3450\025\274\243\306\230<\330\202k\275\374\203\010\275`\301\350\274\217\014G\275t\266\263=c\371\217\274D\230\241\272\332\2607\275b\337s=\244\357\006\275\377?\316=O\375s;\2135\226\275\272\310\'\274,Q\345<yK\240;\237\3110=\3527\265<\372\t|\274\273_\204\275s\002M\273\240\034\004\275\200,\023\274\320\215\356<x\0368\274\362\023\036\274h\355\202=Y\270\253=\330!\203\271\241d+\275\027\026m\274\003\343(=\311*\244\275\300\0061<\235l\257\274y-\326;\371\215\310<Y\025\030=\3102\313\274\322\247[\274\372pL\275h\200\240\275M\177@\275\223\306\013=\361\001\262<1\0309\275\370\010D\275\304\2751=\340h)\275 \213\321\275\203\276p=XA2=\342\350\013;1\022\033=\030\274\"\275}=\254\274e9\225\274\'7{\275\241\235\022\273\034\037\r<\322\032\352<j.u\274E\\><\177\271:\2744&5\275\254\241\035=\376\010$>\035sD\2753z\253=\n\373\214=\256\034\234<\021\003-<\037\352\277;\030\240\210\273\231\302A<\372\245\364;\024\351\375\273\0138b\275\243r\242<\335\344\003=H\217\265=\253@\353\275F\361|=\203f\362:t\232\354;NN\025<\206\274\"=:\253\331\275vU\202=\322\214R=\214\'\261\275\277\362\362<\264a\315\273\327\t\005=\003\225\024;\270\001\037;k;\204\273Y\236\t;)k\035\276\211II<Om\037=\320\367~<\026\3245;Q\024}\272G0\272=\342\274\006=\312\323\331\275\255\302}\274\027\030\243=\032d\211\274u\033S\275L\225\271\274\307\032e\274N\343Q=\302\201\016:\014\017\214=F\200t\275\323\312\346\274\002y\361\274\357\017\322<\350\212\236\275\017\233\321<\373\207 \275r\341w<\023\036+=\323\021\033;\260\352\302\2755\000\216\275p\204\376\274\334zZ<\232d%=\335\376\020=\324\206\024;\026&\245\275\331k\203\274\232\3304\275<./\275\006a\337\273\330]\220=g\266\224\273\235\235\333<*\213\211\274\333 \324\275\213}\357<N\326\023\274Q\021\267\275w\313\220\274Q\017\227\274]f\000=\271u`\274U$\201=\257\314\341\2759+\313<\266\223\266\274\223\3570\275\327$\221=W>Y<\231\034o\270\364V\031<\006DO\272\315i$\275#\217\246\275\364\372\236<!pm\274^\254\\=!\035\206=}\300\370\275a\271\232=\013K\365\274\2170]=\020\251\3719\'/\201\274bh\271\273\203\033\327\272K\022\257<\364#<\274:+\247\275U\005\301<q\021n\275/?\033\273\035\333\343\273\370@!\275iH\263\274@m\211\275b:l\275$_\204=\360\224\n<\354\316\211<\261}q\275\336\\\215\274\'\225\233<~>\266;v\r\007\274\363\211\255<\214\316\242=\263\027^\274\340~<;vZw\274\247\352g=\345\310~:\332H\312=\255\203\021=n\020\267<i\267\225=g\240\252\274\252S\351\275\310\004\000\275\3375\005\274@t>;\237ZS\275D|s=\001.e\275\275\335y<\213\216\373\275\300}U\275!\362\315<\276\274\250\275\245i\031=\003>f<P\302\307\274W\243\004\276\362\216N=\227b\037<F\324\353\273\334\362\201<X\202\331\274-\234,=\214\272U\275V\302 \275%T\t=\224M4\274X\314\264<\243\361%=\323\304E=.q\314:\354o.\275\251\234\177;-zq\274\240+\354\274\326\322d=&\352\t\272\351\002\037\274\3761\362\274H\375\036<\224t\345=\221\212C=n\340\026\275\024\304;\273t\222f=\005\314)=\321\260y\275\335\327a\275|I\357\274\261\"\370;=\320J\275\224\236\255\274A\321d=\000\205\354\274\177:\200;U\314\220\274\254\360\367\274\213\225\257\274\305\320\215\274\246\345\234<8f4;\360\213\261;AC\360\271\246\201t<\357\001\324<\235\211\366\274\203\032\345\274\362>\267=\374\247\177\273\234\326\364=\206\002r=A\260\300;\342@\270<q\315\330<Fl\357\274\333\355\216<\r\337^<\332\006\352<\022\274 \275,\225\303<\273\235\371;\331^\325=\212\336\274\275)\346\006<\375\257[<\025\025\223=\271\335\310<\352\273\275\274\255u\203\275\247\035\214=\016\2316<\035\020g\274p\022\267<\322i\247\274a\022H=\260\317z\275M\2371\275\244\2305=x\325\217\275g\361\331;{\304\021\274\211\372D=l\301\217<\365\264}<[\256\035==%\n\274}5v\27581\207\273x\350=\275\361y\260\274\320?%\274\273x\266:j\220 =\327\3276=}\270H\2731L\344;$\273j=\212\340\245<+\241n<\337o\r=\235\323\022<B\317\341\274\3649\335\2740\343:=\032D\367\274\014\'r<\220\330\346\274\243.[=UM\206\275hF\001;\345\026\036=\317\245\027=\254\361\255<\226cx\274\225\250\323\274\314o\022\274_x\317\275sG\235\274/$\223\274R{\246<BZj\275\215\345e=\013i\243:{M\t<]\347\000\275\276w\211\275\357\351A;4\320,=\262\344&=0\316\000=\212\305\226\2745&w\274s\3720\273\036\331[=\314\211\007;\266X\215\274\003v\230\275<t\200\275\260\310\363\274\265Jl=8\215\341<\004\225\314\273\023\214\202;\264u\372<\306\206z<M\263A;\342\371K=Q\202\234\275#q\244<d\347\226\275\030\347\014\275E\202\222;\332\240\243\275Uf+\275\002\270P\275\006\214\253\274O|W=k\337\222\274w\316N=\021\361\004\275\034\032D=>:S\275\014\257\010=j\232\255=\351\373x\274t\t\\\275r\356\205\274\261\214B\275\353\200\302<\004K\023=\261\310\213<\253\003X<\027\021\216\274\341\272\260\275\320\010+<z\215O\275#E\206\274\0277\023=G\260=\275mw\263\274\241\255x=\306D\206\275\272\".\273\202\377\006\274\224v\320<\3710\363;\257\031\001\273\376\350\013=\320j5\275\213\3774\272\006e <8\2475\274\035\0258\275\301P\020\275\304\226\207=\243H\306\274\220\254S\275\002\257\211\275\3361\017\2752K\374\274\225\363J\275\006\372\221<Fx\r=\332\000 <\031q]\275\363\327\222<\177\314\017=tm5\2748\245w\274y\004\n<Z5;\2750\213<<\364\372\021\275\264\216\273<\3110\024\275\341)\000\275\000\353\350<\357{\377<\260\330\376\274\343\321|\274\236\357\034\275\206\027\322<\013u\206;v\370\017;\346\264\334\273\325\223\307<\000k4=\204\260\276\275\000\206`=\232\253h\274\351l\310\273H\235\004=\210=\020=Z\026\033;|\302|\273+\344\326\274U\216\331\274,\312\220\275-\241\024=/\255F<\276\344\307\274\204\256\307<\n\010\276<B<J\275s3\007\275\317C\'\275\334\311\026\275\341\332\035\275W\340L;\203\330\036<D\306a=\215\0311\275p~6<qx\270=b-\231\275\267\2148=\217Cz\275\264\013\352<)$\203\274_\371\300;g\262\316\273\236 \340\273>\220\224=k\274\315\273\360\347\030\275\307\367:\275\224\212\206\275\3670E:\323\351B\275\375C\026\275\357L\232\274\3627[=C\355\266<\344\334\022=\002\272\224\275\000\366\213\275\205\022\266<Y\227!\275\215\3442;\2564\354\274\013Y\022=Y<\t\275\267\301\307;\026oI=,\3472=\321\351\262\275\207\222K\275\214(\000=\"M\300\273\250>\217\275\207\257S\273\353{\212<\026\320\014=y\225\250</\204\303\275=fO=b\256\007\275\022\253\262;U\3601\275\321/\252=)\240\004\274\262\022\227\2742\330\245\273\327f\002=\362\257M\275\\S]\275\257\333\370\274\224\354m\275\254\351\200<]-|\275\274\032\323\274\215n\361<H|B:\276W\004=\313\022\233\274(Ot\273V\206\303<b\005\206\274\230\377\251\274\370\323\207\274\270\333\221=\363\256J<\321\022\310<\216\355\234\275?\021+\275\333\210\204=\203\313!=\035\034\350<\376\355\002\274\244G==\264\207K\275J=\263\272\374\247\264<\t\257\021=M\316\023\275\245\307\234\275a\221\326<\214\007\265\274\035\230S=\211\377\237<\305\003\026<&0\020>8\242\242<\022\315A\275AY\276\275`\204O\275\246\340\225\274dX\247<5\335N=,\277|=?> \275\t\340\210<\224\"\036=\223_\371\27415$\275\372s\245\272\241\016\323<M\243\027=\301\256D=\265\320\r\275\333\365\363\272\330\221L\274\320\312\244\275\217`V\275\013\307\204<\221\344\250\275\373\320\202=\210\344n\275M\3047=C\263Y\273\254\316a;\306\005\013=\024x\210\275\260\033\247<\250\363O=\263\032y=^\225\372:a^9<\374y6\275\377\256\340\274\266\376\007=\'\271\255=T[`\271\347\306\356=jA\003\275\336dF\275$\266\325\274\251\300\002\275\240\\\013=\303S\033=3\262h\273\273\246h=\026\321\243\275%$\376<-\203\230=\341E\366\273\256\031\025=b\273\217=5mz\274\304\031R=q\370`=h@\354;\024\212\t\275.(\261<\241\177\333<\214\"\203<)\363\034=\331\260\353\274\325e\225=Kz\036=\2444/=@\376\315\270\235O\300\274R\r]=\323\321\014=\023V\231=\303\265K\275\305\321\211\273B\216\257=L9\026=\333R\025>\003\214-\275\250\236\241<DLr=c=\220;\3440/\275\353\370\034=\227k]\274K\3133=\300\256\366\273o\257\210\273\343\261\312;\372\354P=vH\371<\346\032\207<\345\207\300\274t\322\017\273\243\227\376\274\032\323\216;5\325\233=\371\0137\274ID3<Y\211\244\274\\\323C=ky(\275\025$t=\032\244H\275\210\323k\275\013-1\275\220\206i\275F\030\036\275\277v\322<\227\\\360<\304\3728\275D\304O\275\213\325\376\274\255\003l=\2322o=\275M\201\275\"]\236<\377@\202\275.\211\206=TR\244<\215wv<\373\233Y\275\205Sy=\360\373\316\274%\203~\275F=\377\274\025\300Y\274~{~;\325\277\315<:\355\317\274\373\325\310<\343\026$\274\tf\365<\264\326T<\301\307A<o\325\331;K*(\273S\311\267\275\243\264\207\273\247HX<P\2641=\314\343\003\275\325!\013=u}3\275Zji\275aL\263\273\r\211Q\274\017\302_<\257o6:I1\007=\341\310`=_{]=\355b\321\275<\210\013\275Dr\274<\372BQ=9\260\326=\302\354\206\275\234\233\236\275\264\211\236\274\333\216\024\275\342\337\301=T,2\274~n\274=\r\326\261<\244\000R=\346}Q\274\n\021s\275\207\300\204;\273F`=`\213\257\275k\330\240\274{m\014:<\3772=g\tO\275?\332o\274_W\343<\321)\355\274EKc=\023\377V\274\354\247!\275\251\364Y<<\331\017=\'\310\204;q\034 =\363\210\201<\310\344H=#\031\031\275_N\210=$le<g\233\206\275J8\r\273L$h\274Z\037\326\273\356\301I<\003o\215=k\251r;\235\207[=\033-\261\273~\275/\275t\213_<\344\247.\274\206-\376=\361]\221\274\353\220\024\273\256\221R=-w\345\274\241\261\340=\247<.\272>\336\n=~\246C\275\262\002\002\275e\317\201\275\3623\014=u4\005\275\246&*:kV\006=\357\353\t<\373\002,\275\346@$<5\001_=\354\036h=\360\025t=\277\034\017\275\032\216\377<vr;<\373$\354<P_\242\274\365\373\316\274\265e\211;5\2216\275\033\304\020=\r9\323<E\323\210\271|\232\217=\2632\265\274P9\227\274\230\216\374<\360\344\223=\360Ec<\346\266^=3\177\005=\\*\021\274\253\223}\275\022f\233<\243F\025\2753\374\211\275s[\001\275\013\264\022=o0\203\275WV\346<\305_\262<\266J\261\274|\262,\275[n\270=q\336K\274\246\266&<\023\243\302\274w\265%=\021\227\214\275\367\r\251;I\020g\274ciJ=iC\327;\221+\202\272\031\275K\274\330\016\375<\377\370\357\273\352\357\343\275\223\023\214;`\021\023\275}H\025=\177\226@=\216\023l<#\345\204<\222\013\361\274\004C\242\274K\253\272=F\030o\275\363\262\341\273\320\273\t=\177\370O=\363\260q;n\365\322\273yC\3169\271\337V\274\357]&<\240o8\274\000\211\271=\365\312\'=\273n8<\321-\005=M\361\263=\270l\001<HOd\275\215\232[=\300,t;\364V\004=\341\346\037<\226rG=k\324x\274)>\273\273\262\227\365;\017\352\340<\354\374\270\275\237\252\220=\306\\\223<h\272D=1\327S=\013C\255<\201\342\260<\211\204\034\275\373V\227=~\300b\275\335Qu=\364\223\355<HhH=\346s\272\273\336\334\215:e\343w\274\236-o=\356\365[\274yQ\251\2758\216W\273J\265n\275\230C\225=\236zM=\324\322\345\272\251\303[<\266P\207\275\222C\212\272\031\234\355<\271>\000<\272\230\314<\353\177I\275>.v\275N\340_=\014KV\275\014\r\344\273\022b\202;\270\242C\275)\254\n\275$\220\001\275\211\'\262=a\234\330<\033\247\310<}#M\275\355\260g\275\221\3474\275\025 8=\223\246j\275\344Bn=?@\225\274so\004\275C\303\376<\006\320\002\274\2517?=\277\214\306\274\002\300U\275v\222\214=\275\325]\275q3\366\274l\002\002\275DT]<\265t\021<\017-A\275\007\276\336<w\363\206=&\205\004=\3315\010\273G\231\034=\3649\021\275\341\375\234\2759Fb\2739\357\213\274\300\rO\275^ A\273l\220\001\275\361R\000\274%\016\036=\365\006\313\273>\212\323<\312\240\271\274(\230\312\275]6\232<\000u\362;\234-c\275\017\313G=\266\016b<~\321\t\275\000\n\213\275G\241\260\274x\216\306\274\335_\320\2755\033\235\274\263\275^\274W=\235\275Z\212\234\274G\324\021<\2541q\274\341t\243=\365\230U\275\357R\226=\254\257/\275\223\213\366<\000l&\275)}\244<\t3+\274\255,_\275\267\000\020=\n\337\002<\001\002\342\275\362\262N=Ag\301=NDQ=\332\267\260\273\227\020\375;VYB\275\236F\037=\335\344\374<<\2256;\375*\017\275\304\257X<\325w\027\274;\'\242<7\277\222;\323e\256\275T}\220\274\267H\035<\226\321\037\273\005\325F\275v\272\016=\216\236\200\274\236\"\277;n\007*\275<\211\370<)\363\222=^\231\267=\272\307\032\274\032\250\277\275\234\216N\275Z\327m=\342\313T\275\005\321\232\272\207\350\215:l`\243<\252C\260<\247h\021=\177\333 ;\202K=9TA8\274\334\307\234\275\274\271g\274\333n@\274\230\232{\2747q9=tn\021\275Kv\277<)\352\302\275\"\237x;\371/\n\275\303\346&<\177\347\231\273\376\261\234=\271%\026=\242\311\230\274\344!Q<\010Rj\273\277G\301\273[\236\356\274{\332\331<\356\235\266\274\262\272\321=\363\002\371\274\310j~=@\240r=|\365,<{\365e\275$L\'\275\356\007\241<E\261\024\273\336\t&<\003\350]\275-\313\254<*X\005=Q\264\216;\005\005\207<-\026\002=c8\3409i\"[=\006\361\226;\262\345\207\275i\357\227\274V\367\204\273Y\367\216=@\013\324=\022\037\225<\256\220\235\275\327\270\226<\220S%\275\322\374A=\000t\233<u\240\253\274\022$$\273\244 )=\310Z\214\275\230\2603\273\306\272\025>X\025\214=Lwv\272\232E1\275\332.o<\303H\\=\345\267\204\275\023\204\024\275\277M\022=\276NZ<\211\366\037\274\264l\201\274\300\3705\275\004D\341<\302\036q=\364\226\\=\360x\242\274\020\r\t\275\225\031\312\274\017(\342\273\211U\367<\220\352\366\274\247]\242;p\250\232\2735)H;\0030\202<\2777\002=m\024a<1\340\275=\000\002\213;l\010{\271(\323\225=\316\224@\274\3242b\275\024E\222\275O\000\324\274$\230\312\273*1\372\275\000\304\201=f\251\225=F\340\217\275\316\033\350;:\t\322\274;k\032:,L\243<\332\305\014=0h\327<6\370\026<\335\241\231<\035\221m=M\246\335<\346a\315<\307\026@<\025!\023\275\3609\337=1\034\247<\370\234\303\275\2704\300:G\335F\275\335\023\024=\350\364\027=(\266\007=\025\365\247\275\030\"\025\274\014?[=\203\306\364<\207{H\275O.&=\324Bz\275v\204C\274D\2434=\005\364\244=\327\232^\274\014\236\322=\261\317\031<\324JY=C8\257\275\275\035\204\274;\211\306\274\023\336\275=8\343\300\273\034\356\341<\323\'K\2752\330s=\257\354\237=\234\277\210\275\003\246\266\273\331\013\010\275\225\223\300\274R\304b\272\363\324\375<\t\356\343\275F d=\334\017,\272>V\224\2743\351b=\361\311L<+S\033=z\2021\274\266g,\274\363\347\217\275\273\025\235=\274\017w<@\346\026\275r\243(\275\345\202\n\275\213\331C\275\004\300\240<\032Z\231=y\366\252\272\237\277\276\2750\266,=9zj\275\324A\007=\264, <\233k\357\274\203o\354<\2468i\273\313X\333<\205\247I\274\255\364\227\274}\237w=\275\260\000;\333\277\372\274(\003\263;\241n\220<\355H\005:\230S\374< 8\275<\221\211\204\274\0207\006\275\204Y\024\274\357\254\204\274\313\254U<oO\233\275\207$\007\275B\321/=\200\001\316\272{A\253\274\350\t\236\275\305\353\303\275\360\017O\275\"Wj;\233\200\202\274e\220\253\275\027\306\234\275`\254\244\274\003\276\251\274\'\226^<,\245\224\274\\\223\333\275\026\313:\274F\331\300\274\302\241^\275\303\210]\275\343 D\275\340\2756\274\354\207\360\274%\207\221<\002Y\273=$C\251\2759Q?\275[\'\001=b\311\301\275\024\024\027\274@\375H;\242s\345\274\272> =z\"\002=j\243{<\020\326 =\332\r\237\274\341\254\353\274n\222\361<\310\223\021=y\014\331\273\364\227K=\\\276\206=\032\267\334\274\315\206U=2Z\202\275\220\260)\275\364\235\013<m\225k\275\207\030\210=6\001\257;\001\210n<Z\035\265\274=gb\275\2206c=\232\336\006\275\214D\347\274\327g\022\275\036\253\005=\246\027\251;.A\361\273!\247\246\274\2259\217\275\366r\017\275-5\324\274\034\006\177=S\013C=qNo;\225\214\203<\203\212\251\274&b\021=\231\247\010=\336\3479\275\203\030V\275\304X\036\272\030q4\275-\307\310=+};<\307\350W=\233Of=\"5\353\272\246\003\024\274mF\337=q\024\256;\362\330\310\274%/\261\274\037H1\275\377\323p\273\036\340\326\273\364\0018=$\025\203=\267\014\242\274Y\235\265\275\214<\365\274\215b\037=\366\321O=C\364\370\274\343\3157\275\201\202\253\274\013W(\275\023\224P=F\363\017\273\321\3425\275}<$=%\253=\274\325e\217\274\303\016\312\273H\317\026=\372\346*=\361\342\317<`<\212\274\205\224[=\205\276\311\274\224\352\342\274(pe<\0264\343\274\340\307%<\016:==\n~S\274\000&\227=\262a\235\275\356}%\275{\371\376<\026\371n=\313\221Z<\203\326\265\274\231gu=@\225\304\274\3278\\\273\366S6=5}\255\274\342\266\355\272p\271\275\272\240*%=\370\352\'=rt\261<\0006\001=\215\\g\275W\312\005==\0331=]26=\344\307\337=\216\031&\275&w\235\274*\352\261\275\221,k=\313\317\017=z\005\224:E\337\032<\265\224\203\274\376&\024=KZ\034\275\235K\325<\367\000Z=N\033a\275#[|=Q\376\211\274\025\216\026\275\2347\242<\305\241v\275\271<\030=\251\377\207=k~\236=9\300\025\275G\235\230<\014\252\331<\033N\247\275{k\"\275k\262\022\275\251\351\365<\334\300\t:\236,\264;+\342\300<\316\206\310=t;>\275I4\024=\035t\255<4B8<\317\316\254\275\240\374\360\274\025O\222\274\302\244\357\273\3611d\275\000Ow\274\222\212\r\275Y\361x=\001\002\231\274\346\025\221\275\003I\022=^\274\230\274D\020X\274-fV=\233\262\004\275\031i\266;\332\023\231\275\365\362\323<\306\322\253\273\034|\215\274\251\017G\274\233L\010\274\007\331\353;\020@\277<)\211\210=\303l\230=\351>\313\273\377\004\302\2743\2622\274h\215\273=H#\337\272\374\363P\2748\220\234\275V\356><\307\337\272<\273z\303<\260\001\206=\336\2547\275ir\006\275l\223\252=\277>N\2738\301\023\275\271x\030=\204E\232=q.&=,\365\243\274\333\024\240=\254g\016=S\"\001\275Y\240&\274B\017U=\343\247\263<v\310\236\274\003\177\213=(\\\365<V\253\304<\010Yh=\376\026\206=Xm*\274\347\262\233\275\203\233+;\253b5=\372\335\263;R\332\237<\002\001\263\275\370\252\340\274\350\036\'=\366\215(\273\216\245\330\274*S\255\275\274oU\274}\250 =\032dV=\035\316\207;\365I9\273nM\316<\333\365\305\274\274\317\246\274\323\260\210=\227<\n;\205\2150=\373\242}<\347Y?\275JV\332\275\353-\306;\035\263\241<l\350\241=\352\250\370<\002\0179\275\313<&=v\240i\275\036\204>\273\327q\364\273\215\312\014\275\026g\030;\310\000W\275+\305\260<v\347\202<\262\300\325:\030\263\316\267m\016\020=\345\245B=c\t\356\274\251\246\202\275\226\240\226<Z%4\275(\027\324;\215b\212=G\3513=\231J\244\274.\271\235<t,\365<\374\'5\274\002:D\275\031\215c;}G\333\274\217\200T=\217%\246\274\'.1=(\260+\275\202\226K=\014\003c=#\372\365\274\366\321\032=\'o\372\274\001\225k=\352\223\210:ucb=\360\202\033;\231\265\377\274\222\253o<x\341S\275\221\201[\275\371\022\235=\260lW\274tgW\273\337\350\250\2740\031\023\275\024TW=y\234\250\275\334C\221=\270=-\271O\t\342\274\276\322;\2753\3110=\215]\004=q\342\307<\031\325\002>:\357\224\275\263F\243\273c@\234\273\366{f\272\330\213\205={\264\236\275\270\374\005<\22522\275\251\322\236\274\355\342+\275\332\317\211\274e\303#=\242\362\242\274\314J\305\274\361.r\274;h\213=\260Du\275\243n\006=\334\250\247=\351\205\214\2720\027\035\274\347$\013=\324-\017>\303qN<\234\250\231\274%\273x\2745\235\032<\243\352\t=\256\007\361;-\274\341<\026\034\370\274\223o#=\273\021\265<z\261X\273t\222.<\230\226g\273 \'\357<K(@\275qT\021=\204\330\220\275\333r\225<\016\222\265\275\022\307<<\270nU\275\202\033&\274y\003\263;\371\362\3219$\241j<\0058G\275\r\313#<\321\251R\275n:<\275F\021\316\275\236\312\345;\350\365\226=Nc\210<_\232\343\274\030\351\037=5\200\025\275\030\3267\275\304\307\232\274\310\213\251\274\277\025.\274\267\257\020\276w\026\243\274\206LZ\274:\037p<\242\323\267\2735\215\274<\215\360,<\353\210\n=\322\301\240\274\227\277S=\337\016n\275\2574\225\275!J\017\273\266j\310\275\"\014!\275\373j\202\275\322\277*\272A\213\202\274\376\325\267\273\023\370\224\274\030\251\246\273&\220\330<\021\236M<\0269\224\274\333Z\305=\276\035\340;\026E\351\274\250\231\352;\261\235\370\274\252\347\210=a\035.\275lw,<\216\025\205<*\204f=\262a\207=n\345g<\000qr<%\226|\275\243!:;\315\373\024\275\324\350\376<)\354A\275/\223\275<\313F,=\253\234\234=D\215\025<\263u\300<\273\250V;\360\371\032\275\205\204\010=\251\235\204=\250\272\276<\334\305:<\222^\024\274\303\2124=\r\314\323\274jO\274\274O\327N\275\263\361\372;\265\305\350\275[\317\266\2742\036t\275\344\311\014\275\330\230\331\274\353<\211\275|\223\010<?\365\n=\216En<\310_U; \372\'=\323\360#\275qUt=% \205=JgB\275\031\222^\275_A\206;\240\206I\2742\304/=\t\222\301\274\325\225I=4\013\n\272\252\220\246<h\0309\275\314\247\301;\276\036@\275N8\202;\253\334\330:\264\211b:1\264\206=\227\352/=L\035\253<\235\221\247\275z\317\035=\211st\274r\027\271;\233k\003\275\200\007\347\274@\235\223\275\302\"\036<\357\345z<\352\227\200<ZSN\272O\375\371\274\0366\326\273s\364\\=e&?\273L\327\267<\247\220\242<\334\n\\=\023L\002=:\305\225=\232\030{=\317\235\t=\277\254s=\265\021\260<t\225>\275\030\217\306\273/\026\245\272\250\375\002\2751\020\313<& \016<*\177e\274\215\335W\274q!\367<\311\247:\274\265\236\363\272c3\247<\301o\003\273t\n\356\273+\333\210\275\022r\255=\271g\320\273d\243p<9\375_=\321\267l< \355\320=\322\374\037\275\2013~=\007\007\217\274\266\\\206=\262x\021\275\236\320\342\271\201\301\205=\361\207\343\273\tN\033=\037\213\211<Q\226h=&Q\360:\016\267\221\274*\266\210<\255f\324\274\250\310\277=\241\276\371\2746\205\026<\010\000Y\275\264N\220<\013\261\226=\331\251\232\272T\207_\275\333\233N\275\035~~;\322\331\262\275\\\202\t=\364\004_=\232\250\205<\245\021\216=\302\346\235\274*\362X<\272A\330<\356\244}=\013\263E=\351e\374\273\271\030\225=\010\216\'=\014\370\013=1S\023=\362B\202=\317G#\274\017\220\354<\2045\213<\257#e;\255\362\234\274\366Kc\275\347f4=\003\205\251=\275\321\001=w\253\303\275\340\217\307;\014A\275<K5\331=\020\026\223=\310\026\305<\235\257S<\007D\212\273\313W\034=\006\220@\275\340b\351:=h\201\274\013\247\355<}\344\203<\353nF=\333\353\276\274\303F\205\274\3459D\274\230\222\272=}S\254;\376O\377:\257\003\'\275\016\352\354<\306\201\215=7\"\324\274<\216\201=\351\024\002\275\032T%=\265\213\267<\360\256>\275\372lk\275\235\367\007=(\013\311=h\336\237;\347\311\t\275\326y\211\275J\373;=\3301\317;\305C\255;<\307\247=\273al=\27106\275\326c\203=\276\351\t<\025U\244\274\206\361l=\313\245g=}\235\253\274\\ W\274\264\261\310;Tn\324\273\030\005\303\273)\325|=ZR\315;\255\233\n=\231\314:\275\350\346\257\274WdU\273\277Y?\275\322q\271\274\374\2102\274\266\353M<\266\013_\275\341\007\002\275\243\361\023\275\031\212u=E*\341<V\305\034\275\311\274}=\306kb=\247\007\034\275\250A\255<\306\227\017\275T^\243\273\306!+;\376\3354\274\365\030X\274\217\311k\275\261n\240\275\362@\016=\231/\234\274\241\0358<\'7\221=\014\344\240\274\257\311o\275\006n\023\275\370y\227<o\335B=\340\250\005=&\224M\274C ,\275\370\024O\275\005\032\254;!\352\275=0\316\\\272\031\006u=:~L<\201\247n=\206\026\235\272\202k\264\274\002b\375\274\305\356\202=\037\245U=\374M\216\275\033\356I;\202g\250=)}\010=\324h\224=\024\377\261<\266\371G;\341X \274\352\035\267\274Y\023$>Y\221@\275>S-\275\357\376\024\274Bh\201=\3238\003=EUA\275\227U:=J\222\033\271\t\347\255;c{\202=l\237\203\274\3231[=\342\353@=*\016\235<\0216`\273\373\314 \275\240\243t=;\206W;f\3463\2728O3=3\321\022<\226\341\357<\322\222\274\275\274\376\350<\247\355\357<\206!\035<\323\361\026=\177\236\237=\270\261\226;z\311\222\275\362\376`\275\014\231(\272\330\352M\274V.]<%\261\266<\302:\306\274x\017\010\275\257Lc=\230\252`\274P(\220=X\355\301\273\372\005x\275}<y<\232>/\275\372\264\264:\036\006\206<vj\260\275z-\243\275\266\342\343=G?==\225\022\232\274\310\251\223:\376\257X<\234\'\344<\270\310\322<T\267\341=\022SX=}_\203\275:\202\274;\226vT\274^_9\275\205\225\002;\377!9\275BI\n>WKp\274\311\316\246<\377\330\276\274.\377\225\275z\221\027\274W\364\036;\037\\>=\261w\017:j\241\210<N5==\333n\265<\027\226o=\003\275\252;\022\001\233:\250\036\007=&C\\\274\351\240Z=\317\332\034;\347\202<\275C3n;=\370\r;\322\360\231\275\225\231\212\274\306\200&\275\356[?\275\3440\n\275\232\325\265:\3501\031\275\261W\243=\267\025[<\004\315\021\275U\276\357=,\275\t=%\"J\275\2235\204\2752 \210=~\303\336\274\235xb\274\260UA=\035(\264;\305Hk\275\370t\323=\366\014\370\273\016|\335\274Fdp\271\033\256\311\274\360A\313\274*\035\260\273\371Xc\275C\010\006=\026+\376\274\013\261\243\274\354\036Y=Yw\200\274\243ui=]\262\252;T\371\020\275\246\250N\275p\225\224\275c\2726\274\031sF=\000\005\353<t`_\275\215\252\017\275)\202\262;\034\244\325\275\355\351d\275R\3530\275n\336!\275\031\223\256\275\241\322\240;\223\003\225\2754\201;=\370\373\373\273\233\230\203\275>\264\205=2\\4\275N\234\270\274@K\004\275/r\221\275\213\014&\275i\000K<-%+\275\017}F\275\207\314\205=\305`\306\274\276^\034\275\0365\021\274\311\364\214\275\024\251\360\272R\327d\275\256\010\235\275$C\r\274\001\263\244\274\377\324)\274\213\254\246\275\215\231Y\274\231\2108=\262\204\r\274\322\205G=\316\344\033=\2137a\274\273\177\314\274R\227\232=m\tv\275-\214\016=\256\255/<\033$\306\274\251P\273:g\036E\273N\314\365\274l\027$\275\233\317\"\275\017\n\262\275B\222\027=A\264\212\272\342\377\202=\240\264\211=\262\032&<\233\354\031<}+\353:L\243\237\2757\"\300\2741\327\217=\210Q\203<\000\214N\274\234\017\327\275\2143\206\275)\277\035\275\004\021`\275\306\333\321=\024I\360<\001\354\237\274\327\023P\274#\300\016\275\002zx\275\031jN=#\000\375\275\272\261\221=\"\206\311\274\021\2352={\265\014=E\033E<G\362[\275\024@/=A&\324\274\243\213n\275{%\212<\370UV\275\323\211q\275\316w\245<\351\211\301\274\205u\355\274\267\004h\275\216\377\367<3Jm=\201^\316<4\232\304\274\335\030\222=\271o\036\276\206\266\375\274\241X\330<\302]/\274\000\022\340\274QQ\004=n\023u;1\2442=/\300l\275\247N\333<\2742h\2756\216+<\274\026?=bL\301\274sbS<\322\354\350;6\027\351<g\251\240;\001\340\257\273\257C\264<\321\370\270;\352\"\366\272a\026G\275\000\342w=\t\202\230=K\372\222<\347db<=J\233\274\277\242\333=Q\000\215\275\303~\310<\305\'\233<\337}\244=\237\221\257\274;\004\241\274\231&2<\220pw=X\200\3139g\256\031\275\234\324\313\275\262\336\362<tA\204;|\321\264\275\r\224\230\274\256\247P\274\322@U<\036\026\322\274\364\300\201;#\322B\274\264J\261<\227V\007=\377f-=v\325\255;\226\314#;M-.;\240\375:\274\222\313\200\274\313P\030\275g\022\374\274\322B\307\274\304MM=7\263\261=\232\335f\274\031*-\274\223V\002\2751G\203=&\033z\274r\223Y;\254\2151\275\250\303\261\2741K\243=\0101\355\273\214=\035\275/K1=\332\347?\274\236\320$\273\355X$=\224\213\233\2745\005@\2755\217\222\275\251u}\274\203\226\025=\252\321\236< P:\275\223\353\223\275\333\275[=\271?\241<j\375\215<P\210\320\273$\371\332\273\200\274\251\275\372`\027\275\003M\365\273\322O>=\320/\353\274C3\244<\021\257\022\275E\233\027\275\006\203\334<\206\240\246\275*\224R=\033\005\017=S\317}<]&\366\271\203\355\026=\024\221\252<\205V\032=95\231\274]\266=\275M\2006=dpE=P\343b\2752\310\275<\270\327|=\022\312\035\275\255\350)<\027\2749\274c\240\\<\245\2539\274\307)\233=$\3510=\213\350g\274j\327\246=\374\001\214=\375\242\276\274d\274\211<\370\317\375<\247\366\220\274\375\363f\273\034\240\276<%\324\031=<\2760=\301\350\304\274:em\275\025\2179\274\030\274\313<\336 \312<*\037\357;\255$\313\274}L8<\023@^\272\001)\251\274\301i\217<\373\351\354\274L\241:=\025\005i=\216\365B:\014\244~\275+\306\000<\334w\204\275\363\214\357\275\016S\032\275\260\323z=;\021\275\274>\004l=\010s\t\275A\n\213=\356Mt\275%\tm\275\331^\252:\301H\250<\203\177\214=\250\210\377\272\336Z!\274\207E\340\274n\206\205<\216\337\037=1\345e<\324F\224<\335\027=\275\224i;\275\276{\241\274D\377O\275\3729\327<\357(E\274Pm_\275\256l\346<\n{o=%\"\216\275#\026\302\275b\374_\274\315\206^=\255\014\345;`I\252\274\353\356\334\274\305S\256=L*\253<\"\315\346:\006\017\343\274\231\225\222<\316uS;\".\220\274\005\257\033<E\2031\275\274C)<\304\313\326\2743\177\244\272\207\t\032=\211\301\005\275\372\320\262<\261\263\r;\014s\315\274\025\265t\275_\211\251\274\252\235S<\345\365\311\274!\305%=hP\300\272<\342\023\273\364\311\021\275\004b\030;=\313\224\274R\226><\037\264\374<\310\334P\274H\252b\275\2131\014=Z\351L\274@\264\205=\270\224\'<f5=\274\2612\306<8\313\342<\203\274\307=\301\377(\275\177\347[\275\370N\r= T\325\274\275\365\367\274\341k\026=\205\030\245\273=\315\346\275\277\316{\275\262/e\275\221d\340\2758\200\036\275\341\242b=\217\200n\275\332k\006=\364t\016=\205u\013=r\001\341<\3745\324;\013cN=\206t\220\275\314\3746=S\231\224=7\270\333<\354\225\345<\275\264\026\275Ix\335=\252\0239\273\224\004t<@`\240\274\363:\217\274\024}\004=\327^\246=L\024\216\275v8r\275\002\224\024\275\025\275\365<6F\005<\322\010\243\273\320i\202\274\213\371\316\273\360c\250\273\010\004W\275\016\245\265\274\327F\302<:\006\034\275<%d:\303\373\201=\207\334\201\275\325\245\314=B\300\036\275\307\332r<\016\353%\275~\2179=\222\365\277={P\321\275\356\343\257< Q\217;,\216\350<\020\026\023=\031\245\036=\254\022\013=CpO=)r\370\274%\314\341<LX\316;\233\371\005=\235\237}\275K\246h\275<f\255<\371`\257<c\351r\274\312\035\261<$\327S<\321<\"\275T\000R=6\302\210\274\377\316\017=\306l\201\27327\201<iX\245<[[\311\273\341W\'\272\222P\207=\033Q\"\275\311(\352<H\304\203\274\020\320H\273\344\340\032\275S\336\003\275\323\254\221=\020\351\350<\024\344\243;\231%\214<\247T5\275\365:\004\275L6\347<\003\361.=R$\356<\226\014\265\275\266\366\212\275qL\332= \202\360\274\274\036\330\274\3566{\275\006\211\352\275\270&\003\274j\302\375;&\361\213=\273\2627\275-\327$=~\326\214<\345\020\r=D\276\004\275\343\020\225<\270\340?\275M_\224<I\206Q\275\3470c\274z\211\202\275\235\331\262\274C\3536\275-\263z\274KG8=\023\315\300\274\0061\322\274v\271\221\275\002\r\245\275\177Z\225\275;\177Q\275\374\267\257<\003\373\333\274\'\014\014\275\202w\243\275\332\341\325<A\365\200\275\356\212\356\273O\277H=d\323U\275V\027\006<\3013\340<\374\\\245\273\326\327\320<\265\352+\273\254\353\317<dt\';\3215\006:\366\357L\275\251\340\314<\273\017.\274\342\303\271=\200p\352\2750Oo\274\034\334\373\274\337p\246\275v\n\271=\346\351\316<\333\235\024=\225)\210\275\367\370p\275_\214G<\212~\201\274`\254y;@C$=\007\200\341\274\372\307\226<!j\006=9\264\207\275\200\022G\275g1><\321\025\031\275\307\242(\275MG\326\274\224\004\026\273.\303x=\221\274\036\275\275&n<\246\3419\274\004\365F\275\272\303\365\274\264\020\320\274\375\205\016\275\025\r\237=\212Qo\274bS\023=\211\240>\274\023\312\221<\355\033\004=\313\"\313\2727uR;*\205Y\275\216\250\260;\311\211\333\273\263N\310\274tb#\275\034\006\201<Y\022\327\274\324a=\275\021\227\237<\250\213\013\275\031\261!\275\036A\215=\005\007\317\275A\311]<\330\017O\275Q\242@\275\267\217\345:8=z=\244E\333\274\325#\252:\373\250\214=\246*];\353\003\'=\350K\263\274\376#%=8\031\007=&\234\253\273\243C\242\274\314{\331\274\374\261\253\275sGN\275\020e\226=\337\353\342\274\362K\t=\304\022\364\273\364\200\225=Y\361\023=u\276\216<\321\025\315\274\017\324\316<<4G\274\377$\226;\217p\004\275^\3606\275\226g\004\275\tg\207\274\324Go\274i\362z<\2647g=C?^\275^\212\241=\271\203\342\274R\310\205=\235\203\036\274r\356\217;\'\3462\275\221*i<\250\261\277\274\357\354\303;\007\265z\275\363\254\3159\233\032\305<aY\236<3\212\202\275+Y(\275\2506R=1\262\023=v\352\200=\020\246\211\275|\252\261;{\312u<\223-\203=?\312\305:\\\243\254<\316\254~< \n@= \235\344;\023\316_<\233j\235<?:\375<.\345)=\354\ry\274w\252\r<;\2729=\007+]=\342\023\352\274\\\360\221\274\207\032\\\275r\260\033\276]\310\024=d&A\275O\361\201=\243\360\005=\310\275\217\275\261\006\004=\347\344\021\274\244\0004=\214\t`=H\351\276\274>6E<\330R\r\275eu\304<\211VP=\315\240,=\213g\026=R(.;\374\227\213<\\\003)=\207\202X\2730\225K\275\214 \024=\315e\203\275\330\210`\274\250PF\275\260\312\215\275\202!3\273\221\223\234=\014\027\310\274U\200\027<\313f\364\274\357\2779<\363\311\272<u\353\200\274\250\216\267\274\300\224g<\257\332\037<A\215\214=\255p\301\275.~V<\234lx<\231\006\250\275\245\235\246\274\021\313N\275\0209<>\020\225\321<\326\025*=\360\030\t\275\336UH\273Mc\016=\244\300\203=\213\014\267;\243\246/\275\360Q\n\275l\316v\275\311\260\031=\361W<=\263\032\370<e\256r<O;\304\275\235;Y=\030t~<\244F.\275\354_\217\275\340y\247\274\3210\271\274\334\023\274\274*\204:;mI\337\274\202\364{\275\277s\203\274u\242\001\274v\002\370\274x\355\376<(\205\026\274C\220\261<t\373^=\326\000\333:\2629i=/\322\212\273\230\250|\2742]\257=or\034\274\3602\006<F\265\210<\nf\256<\342lq\274\'\276\213<\024re\275\276\3224\275Z\305\304\274\'\322x<s\037^=>\353\213\275S|\3528\330\032\017\275\364\300A\273\266\341I=\202\351\250;^QC=\267\335\265\274\373\t\016=\234A\226;\305\255\354;\3248\222\275Dy\r=[~V\274\305\3521=\241\020\361\273\024\340\337;9\210\007=gQ\022=\2114Y\274t.\240<\\/\224\275\364\364\304</G\233\2722\372\035\274s\010\260\274\205\214[\275,\373\345\274\'\340\252\274-\366\224\274e~\251<\022LX\274\250\0205\274\213F\336;\306\364\"=\252\233F\275\0350\007=\nY,\275U\216\324;X@]\275i\272\366\273\274\271$=\375\371\255=\005\251\250\275\2755F\275\024\345\177<\321\274\207<Oz\257\274\336\300S\273&}\\\274y\250Z\275\366\0052\274\353\256B=\257p%\273\375t\260<\002lA=\344;\326<\177\233\265<\254\306\351\271\031\236\224;\333\363#\275F8\'\275\274d\306\274\276\"5=1\305\001=\304@h\275\373\276\251<\344O+=\373t\370\274\211X}\274\006\245\264\275\213_,=\366\325.\275\212\204\234\27419\205\275\247\255\253=3\354\2209\207\315\367\274\333\332\322\274\276U\256\273o\312\n\275\204\250{=e\234\302</\230\233\274\rn\013=\350\3106\275o\004W\275\214X$</\031\212<\322!\000\274\346\243\277\274\277\335L<\211A\272=\234\261\013=#K;\274\367!]<\254\223\r=\324\027\263\274\370\034 \274\2029\215=\3727+<\"\1774=Z0\207\275D/&\2758\351|\275\304)p\274\252G\340\272\350+\342:d\272\207\275\035\034\034\275\n\257\240\274\257 6\275\023\257\231=\260\246\360;\253\226\036\2750t\222\274*\201U=.t\353;,\207J:\021gv\274\225\0059\275\275\222\234\274\311\2561\275\204_\301;Q^f=$X\302;\367\331\022=g\243\254\275\026\217\014<\311\267\223\275Y9\223;G\364I\275\351\207w\274\006\033w\275\346\304\313<\013\262\276\273\352\375\276\273\213T\231=\205\202N\273\024\355\364<K\211M<\2476\265=\215\352-<.uA=P{k;i0\236=\202\356\233;\341Z\014=\225f\207\274Xx.\275\365\000\203=\237\362\313\274)\302\253\275#\242\305\275\226G\331\274\320\347\221\274I`\210=\332O\"=\245\035)\275\026\312\204<\371\271\273=\243\372\275=\203\026\333<\'\331)=<\211\233=\2462i\275\310\212$=-\2408\274\371\\\013\275M\007\304<\351\021\031=\2655a\275i7\304\274\n\234\035=\376\230\013=X;\235\274\373\221\036\275\277\337\';\253\351\001\275\345\352\372\273&PC\275\315\263\014\276\026\005\367<\032\020\323<\345L3=;\346\223\273\363\314\256\274\340yX\275`\031=\275\226T\227=*\375\205\274+6\377\273\000\006*\275\223\370\203<\034uD\275\332\311\326=\313j\256\274\345\336\262\275\004\370:\275\343u\032=\242t\216=\022R\226\274+\022\\\274\\/\251\274\223\2637\275\261\324\002>E\002\010>n\034X=\030q5\275\214g\342=\326\217\237\274>\377\177:\235\t\256\274D\207\335\275\34120=*uc\274=\010n=\365\302\244;\375\262:<c\201>=3Td\275q\221\201<\246tA;\277\345\354\274\007\014q=PT\221=\246?D\275\013\036\313;\216@\265<\004\362{\274\024\356\223<0\247\034=\355\352\244\273\272\233c\274/(\210=\203\214\264<\273\277\232\272&z\341;\n\364R\275p\360\2417\310,\027<jC/=\354\010\014\274\263\"\314;\316*\212\274 \234C=\331\222+\275J;\350;\224\234\010=\300`\341\274\367\371P\275\226?\243<\223\313\226\274\353x\312<\007\267\367\274g\347\376\274S\322\021\275\340B\210=\260\001*=\247\221\276\274\354\256W=\336\004,=\037\236\370=\246e_=&\354\201=~\004 \275\007\273\031\274Z\333N\273)\277\266;\256\254\220\2750\267\213=\210\005\027<\30291=j\2443=yU\301\273U\234\327\275\037\005[<\342z\322\274K\001e;\255\334\222\274\315\000\212=\277\347\271=\376\375P\274T\251a=\250\340\300\273\017\271\014=\025m5=\342\311q<\343\004\343\275\272j\032=%\264\264<\206W\205<\031)m\275\032a]\275S\315\217\271FL\225\274\254mz\275c\034\026\274k\243\224<@\006\360\274\033<B\275\302%1;\233\302\r\275\274g\232\274\013\363\030<\306\005`\274=\210\210\274\365J\267<Uw\007\2716\023\355\274QX\n\275;t\326=\364\335\260;\366\311:\274\230\331@\275eR\031=\023\374\362\273\246\220\265\275\211g(<?<\247<U\352z\275\345[<<\230\344.=\234\315^\275\247\214\324\275\311U\275\274\245\032\014\275\217\270\370=\325\374%=j\025 \275\201\201V<\020Q\201\275\334\305\033=\003\\n\275\232\274\264;\020\216\357<\377B\002\274\030\321\375<X\246\363\274/\207g<,\023j=\206\260\t\275\312%\314\274\004V9\275\265r\255=\327GT=\236\227\024\273\365\345\245<\207+\302\274\2020\220\275r]\256<: \263=*\271$\274\275\240\240\274\306\343z\275\031\024(<T\376\216\274\007})=@\230\361\275\345|g\274/6\211\274\206I\207\275\327\005M\2757\242\317\273j2\327\274\273h\256\272/j\367\275\205\272\321\273\302\207\016=\005\235C=\356E\332:0\220L=\375HA\275[z\225\274\372\177f\275\346\335\251=\033g\000\275\246\323>\274\322x\243\274>\'\332\2745*\004<Wqq<\262\306\211=X\005)\2757W\226\275\010\n\350<\3649D=\272\005^=X\031K\275\275\352\267;\227\333\206<\220#\004\273\023*\372\274\303>\272<#1\366=\203\3179\275\245Q\262<\325\307X<^\253\220<\036\340D\274\344\335\017\271\371\314(<v\245*=\017\346\227=8_E=\263\001\305\274\364_\252<\300\340\264<u\331\016=\003:2\275\335\037}\274\276\377\207\275?\307K\275\314R\362\273A!\3739*Q\205\274i\335\264<8\231r\275f\343\n;\035x\003\275\351\204\'\275\274\313.=\340\300\276<\353\256\254\274\361\017\200\274\243\243-=\231=(\275\212\353\256\274\013#\023\275 \214\256=(\300\253\274)O1=\324\272\177=\377yR=L\'\237\273\333\367\224\274=\377\030\275\307`-\274\335\007\327=\"\313\370<\267\213\014=\264\031\300\274n\2048\274\221:\300=\224T6=\367U\247\275}I\334\274\213q\026;Z\376\311;;\212\037=l\357W=AS\020<\363cZ=\363N0=\036E1=U\270l<\270\265\313<\036\325@<\232\023\315\274\t|p<\352\305\222\271cn\274\275\000p\251\2743i\302\274\344\210\037=\206\371\213\275q\022\207<x\352\007\275\352R\321<\230\331\265\273\t\322\'\274\272qU\275`\000\210\275<\r\324\275\223\335\247\274\021\270\221<F\233\261\274\275!\r\276&{\210<r\257\354<7\241\304\273\357*\272\274\022\221B\273P{\327\273\"\242\214=\353\324G=\222\227\352\273Y\235,=\302\262\345\274\205\362\306\274: \363\273\206+h=\331+\337\274\001\027\r\274\341\332}\275w\264\020>\215\352r\275\r&D\275\271\005t\275\320\366\222\27407/\274t\0249=\035\206\317=B\026\267<\324;\234\275\272\313S<\327\254\002=\253,W\273\274j\221=\211\027;\274q\200z\273n|\301<\305\325K\272\345}X\275\204\302\216\275\027\357\372\270*\">\275_\370\363\273\024@\316<#\036\350:2\317\000=p\300{:&\3265\272\254\373l<}\340\026\274\240\332\254\273ql}\275\217<\357;|\373:\275\312\245\344\274\020\227\331=\227\035\213<\232X\344<\350M\230\274\321\334=\275\272c\023\274\032\235\371\274\355\317\341;P7\004\275\204_\264\273\236\232\245;D\257\025=u\234\231<\241D\374<_\330c\275-\233\014=c\330\235\275\245\273\336\273\233\177\n>\244\333:=\214\264\215\274\213q\303=\t\2632\274\216\306\344<g\305\372\275\256m\365\272\361]4\275\020,v=U\257\214=\270\254\032\275\010\3279<\276\274\024\275\275\014\264\274k\\P==t\214<\200\377\236\275Q\257\013=\nhR\275\205\243\206\273\271\217\353\274\235\264\204=\310\031(<\214=\225\275\321\347\232\272Vd\250<A\273\026\275\356\246\373\274\362wW=8M\226\274\000\034\377\272\330\217\364=\374f\020\275\020L\216\273@\362B\274\221\345\235=\244\363):\374\323:\275;\014\030=@\230\302<VM\247<\373m\360<\337\332\037\275\3277<\275\217\333\277\274\353\211\275\274\304\021\\\274\n(8\275\016\275k\274\377\333E\274\330\221\231=ff\213<\261O\315:tr\004\276T\273\262\275\025*L<#\211\233\2744\303\243\275\305\262\313\273?L\246=\005\274\261\275\211^<=\233\265\207<o\n\205<R\253\270\274\236N\305<[M\204<\325)\210\274\221\213\367\274_\355\325<aE;<\225l\027\275\265\307\317\275\302\024\026\275\026\255\254\274\005\001$=\236\025\236\274C{|\274\352bN\274~\014\356;\274Q.\275\320\351\203\275\010:-\274),\275<Y>\271\275C@\217\274\345\273\237\274\265\210\026\275\310F6\275\351Id\275Q\003\025<c\\\307<\347A\345<\374\313!\275\376\214\371\274\277R\253<\236\013\263;\014$]<\270\377\354<\302f\257<\336\307\034\273f\255\363\274jM\227\275s\344\272\275\277Z\037<+P\204<\273\224S\275@;\211\274\002H\003\275\375\251\255\275\363\220\021;y1\357;\311D\236\273SF5<\231s0\275\2076\305=\275\245k<\314\"#\275t55<\353\366\225\274p\207\234<\375?>\274Zh\267\275\251P\000\275\006\243s\275Q%E\274|\360\372\271\212\354\257\275\314\210\346\274\013\350\340\274\216Ch=qJ\240\273\241\217\302\2742O\001;\274m\224\275\260\277\330;\317.(\275\277Q\307=\000\343i\275\302\224\222=\351\032\037<\344!\223\275\232_E=\020\264E\275\257\215\232=\'\303\317\274&\214\341\274_\375\247\274\027\356\245=\250Mz=\025\225\021<\215\203A=\354\306L;N_\260\273\334\3145\275b\3357\274\3742\247;\350\327\036\275f\231\201=e\373?\2746\304\236\275l\357\276<\350b\347\273\231\315\355;\203\266\330=\257\364\350;`A\035;H&j=BK\256<\023nJ=v\302*=\3664\263\275\356I\245;\272B:<}\345\374<\247\277\263<\246\010\032\274l\3116\274O\245:\274e\216\272;t\205\231\274\005\257K=Jx\364<?\331\3539\277*\\\274\035[V=W8\007\275\212\375\272\274\213\251\214\274\331~\366\273\275y\254\275\013\227\244;\306+(\275o\240\272:\221\265\346\274\264q_<\035\332v\275\024\343\345\273\340\305\367\273\020\030\3319\216O\r\274\271t\213\274\325\260\271<\030\310&=Y\330\221=>\274K\273!Q\003:\220\324a=\354\254\240=\264\245s\272/\362\201=D\232<=\270\216\237\274\277(P=0\351\022\275Pd1=C\266\367\274S3v\275\353\274\367=\305\'h\274&\377K\275\243\010,\275\224D\235=\337\256\367\274 \356\270\274!\214u<Z\236Y\275\336\350\252<z\222\006\275\000\205\220<\260\211\031<\023\006\212=\004(\326\2737x\271\274w\207Z\275\367\313\004\275j*o=F\332\273;\220\252\037=<f\351<\t\344\020=1N\020=\202\242\014\275!J\006\272\003\n\326<\336f\022\274\010\201\371=Xh\202\275(\345S=4\355\317<G\241\275=f\010*=4D\344;\034\320-<F*\274\275M\377x\275\263\010\274\274s\374\372\274\364\253\260\274\212\304\242<\030@U=a\355\215<R\222\271\273H\'@\275\206\312\251\273\206>\335<\360\017\357<Zxr\274K*2\274\211?\212=$rm\272)\271\022\274\242JS<\016n\243\274\037h$=b\177\006=\235V\006\275\206A\301<I/1\274\347\317\t\275k\372\227;\205n\325\274\233-\315<\341\257A=\'5+\275t\340\374;\013\033\017\275\217Lv\275\377u\200<+\206\345\274\270f_=\377\026\305\272\030w\241\275\350\301\266<}\223\303\275\303\344\307\274\317\352\013\275\r\357\024\275Qs-=\356h7=A\214>\275\034\003\020=\324\014m<\317RR=d\355\275\274d,/\274\351\237L=_\377\013<wc\211;k\003o<\271;\240\275Z\007g\275\017\332\267<m\370 \275\242\310u\275\232\3527<\264\247\317\274\\\226G\275\030\206\317\274\013\016\276\273\233\023\356:a\313\341<\025\200\353\271\345\217\311<\270o\243\274k\302\032;\244\023\036=,\333\250<N\266e\274X\270\014=\372\013\277<fU\247\274\005f9=\030\303\221<\252\236\352<\362\214d\275E\224\\<\351\204n;LD\261<\224\273\230\274\3324\000\273c\002\327<\244\321I\275\263f(=erb=\343\344>\275\341\230\000\275\007\177n\272\033\177;\274U\200\322\275\241v\345<\232\321\211;\301\343\207<\254\\\201\274\211\321%\275\364z\033<\320\247\201;j\302/\275\236\256\t\275\376}\241\274\214\017\364\274Sx\003:\214n\247<\037%\236\274k\305/\273Z\201b\27504\371<D\346N\275X*+\275\206v\202\274h\250\370:\362\\\010\2745\2410\274\016p\036=\342X\221\274k\\\333\273TZ\326<\036F}\272Ws\235<\t\037\205\275\366n\327\275\031\316l<p\301\371<D\2619\274\234\226\301=\325\203\n\274I3\304\274\216\002\246\274\360\364\272\274aL\016\274q\234X<\205\026\206\275\342\214\250<jI\033=.O7\274(\255Q=%\013\'\274[\030\035\275\207\242\013\275LkN\273d<\025=\370\235\307\2744c\245\275\210c}=\300E\220\275\361\260\301\275\314\211#\275\227\361\357\273\306\200\266=\336!\221=\236\205\026=s\236.:\313J\221=\315/}=\007V1=\005\021l\275\272(\272\275\222\331\233=\212\235\215=c\312\002\274\017N\036<\333\366y=<\230v\275\366\334[\275\"\322X=?8\372=\356\343\211\274\3316\217=\275\227\200<\367\244\350=\024\316\214=o\024\347\274\355\373\177\275t\255W=\220l\251\273\221\002\001\275\225\n\023\275<\303\253<\277L\203<\220\352t\275\2015\322\274V~d=\322\206?<\315k\373<#A\333=\202\236\027\274\211^\225\275z:\251\274\007\261\307<r\317\256\274(\3711\273-lE\274\027\274\211\275a\245U\275\344\010+<\202\247\323\274\'`]<\263`\023\274\211\321i<cSD;\331\275\017;\246\317)=;P\346<\"m\\\275\202\363\t\275\n\003\217\275\007\223\261\273\000\"\317<\017\273\000;!\352\241\273\364\240\037\275\350\240\010\2751\311[\275\262\330\225=o)\r=\253R\305\275\347\016 <\211\005R<vJ\255\274\264\313\362;\230H\222\275\374\232D\275\242\357\221\275\223+\336:\274\033\002=\207\200S\275\227\211{\274\240\251\214\275\356RH=><\242<\t\203\'\275\235-3\275\374\353(=\243\360\215<\334\250\010=\021_7=\001g\217\274\314D?=\227\275\210=A\204\266\273gK\022=\265\256]\274\373\250-\275i\377\344<k*n<\360\260\024=\357\330\'\275\020\314\205=\036\366g=d\254\227\275\270\215\036=\326 \017=h\037!\275J\017\306\274\357\347\320<\332\377$\274\364\221\324\2737\206\352\275\326\n\312\2735\266\201=\031\233M\274q+\245<\020\271\223<\214\037N<\220\317\201=\303\n\200<+\007\362:iv\243;i&x=\375c\252<\346\302\312<\000\214\007<\340H\016\275\016\245A\275Z\034\350<M\363\270\273\017\212g\274\224Pc=\217a1;W\023Z<\234[\234<\3069\022=\246\223\207<U\234\233=Q\036\255\275\311\000r=\377\371\031>\307]\227\274\364\244\300\274\334\016h<Q8u=\312iX=\332\364\202\275m\035\253\275\322\352\035\275\3327+<\2327E<\261n\202\274U\3119\275\335\006\303=\0133P<R\237K\275\362\222\225\275V\266\322=<\241\215<\014\0311=o\320\005=\\\036\234\275\024pA=\247R\225\274\031\036:\275\021\304\227\274U\272\211\275r\220<\274S\221\312;\273l\352=\252\344\277:\362\021\003>\266\033\263<!&\221;\033\257j<\002\364\304\272\325\266\223\275\263Q\277\274;\n\305\273a\245p=&\337\313<\263\000\026\275<D\304=2I8=\357S\241<\344\376\371\2747\306\007=\201\013L=m\3472\275\306~\026\274L\253\021\275\265\016\232=\262\211R\275\305#\303<\251\352\205\274l.\216;f\305\307<\243\340A\274d\267\314:\331\322\240<\353\377\034\275\'\010\014=\300\016\221=\305=\023\275\227\024\020\275\t\330>=\210\360\317\274(\363(=\260L\200\275\223\212\253\274`\3618<o\024\326\274T\237`=\262\314\016=\247\272d\274\247Rl\274\335\277\005=\252h\006=\024\027A\2757}\246\275$!\014\275\332S>\275\300\032\007<;\324\233\275k{j\275\312\271\023=Y\244\r<\021\311\376<\246P\240\275\200\022\246<\rz\034\275\335m\253<\367\262\363\274B\034a=\253\226\207\275W\276]=Y\207\016=\031Z|;-\206=\275\312\357\021\274\007/\336<Rq\272<\23541=f(q=\315\305\036\274\374\217\025\275\370\002@<\343l.=SX\256=\256\024\201\274m\364\246\275\001\331\307\274\356)\234=Sq4\273\222\224\030=\373\240\205<(h\005\2754e\254\273j\352\201<\270?\214\275\207W\023<\272\341\361=\225o\035\275\365Z\'\274\241\3649\273\271#\321<\326\276U<a\215\354\274\010Z\021\275\201uA\275\326\363\212\273Fz\334=ok\312\274R*\226\274e\001\227\275_\r\367\274}\\\223=\245\034\213=zB\030=\213V\313<S\306&\275\225Y,\275\016 V\273cs\356\274\266\233\032=e\025\216\274\335:\355=\000\365K=\247l\363<\233?\240<Wl\243\2732\235\322;8\224\261\275qK\237<\232\307\237<\221\217\036\275\362\367\013\275O\346\275\275\"\224l=\331j4\275j\257&<d\344\273<\027/\232<\013=?<\22680\274Ah\205\274\017\363\004\274Z\"\203\274Of\215=\031\263\2079\022OF=Y32\275z\217\357<\315\205e<\376rM<j\375<=a\303/\275\237Eq=\213\025G<+2n\274\335\320\324\274l7Z<f\363\030\275\t\257\240= r\n<\373H\261<4\311,\275*\252\227\275\206\3073\275\311\325\031=\361\336A\275>\214\010=M\204b\275\037\330N\274\336\237\251=\302`\327\273\301K0==\377\203\274b\337\342\274n\352#=\367n\n<\005\350\205\274\013wt\275\315L\301<k\361\216=\223\325<=\261\300M\275\351-\016<\002\034\323<\326)\374<<\224)=~\264\213\275z\303\341\275x\017\317\273\017\346\363<\254\213+\274b?/=i\266\317<YJA=\022j>\275\204\246\001\275r\"M\274\207\346\006\275\347\273\355\274\027\223*;`\\&=\000\2753\275zZ\325\275\345\023\017=\252\315\177\274\315\230{=\240\0164\275G\203\215=\212\221\237\275/=\211:\272d0\275\317\340\037=\370\200\344<\273\333<=\304p\326<\350\204\301<\322\250\014\274\357.)\273\004\254\367:P\227G\273*O\346\274\276\262@\274\226\013\337\274\271u\214<\347\335\301\274\003\237\027=\326i6=\374G\215\272\260 i\275\360w2=\265\303\031=\033\361\227\274\344\352\376\274\270\217\n\275\261\264\222\274\212\202S\275R\224\365<\252\247\023=\325\251\252=\306t\356<\272\203\347\273\215-K=\315o\200\274\310r\323\274uE\327<\371\233\212<*\244\201\274,\'\342\273\342\202\364\274(\321\315\274\241\360\315\273\275\210\360<$\274\212=\253\346p\274\334\260\256=d\002\r\275\330\0349<\310Lm=\353sy\274\362\366\234<\340;&;*R\376\274C\310\263\274\3419\025\274\324\341H=Q`\t\275s\227\212\274q\\[<\314\316<=\206\035\312\2740\266\225\274\000\204j\275B\t\222\275{\217I=7J(=\322\261\020=f\0160=!\304\305\274\221u\337\274\345\247?\275\222\206\222<t\251\275\274\026\265\202\274\234*\327;`\034\265\274y\036\305:\203\366x<\247\347\2069sF\234;\017\364\256\273eap=\241\247Z\274\r\200\260<\307F{\274|\002\345\275\246\016\016\274kh\253\273\311\004u\275\360\204[\275C\342\367<\350\363\235<YB\003\273\231)5\272A\317\r\275\217\3620=pe\270=\226\266 =\203\233\274=\010nO\275Y\347h\275X\361w\2747u\232<V\354Q< \373l<\306\355-\275zEx\275C\350u\2751C\222\275\323\357\332\273;\306-<\021\267\000=\003U\035=\362Q\r=\001\210\'=\214)\222=\350S\202;\364\254\371:\006\201\257\274\275\236\367<\310\016j=V\021\222= @\363\273\326q8\275\005\207F\275\205\177b=?t\320=U(\013\275\366t\250\275\367<\'=\316\355\220<O\262\250\275\256}:=V(\350;\n\325\227<\362>\231=\307\313\000=\205R1<\223Os\275\336\374\233<\3112w\273rz\301\275\334\227\034\275\300$\314\274\373W\022<)\261\305\2741\361\223=Ui\376\275a\005\3659`M\035=\305I\250<\262Lv<_7\220\274T\274~\275\034\270\253\274\213E\204<\231\276v=v\026\213=\312\231\246<\321\302k\275K\367\222<\323\301\202\274\340|\224;\267\2010<a\316\257=l\004\036\274\374\350\207\274\235bz\275\242L\224\275l\211z<\264\316\352=d\342T\275M\342\231\274\246\276\246\275\374\377\013<\310LS\275sJ\242\2740-\031<\351Q\331\2734\214:\275\020\005Q<\251\360\003\272\364\341$\275\357\365\247\273\300\242\204\273\373j\033=\311Ai=\355\024\326\272\357K\212\274<\340\004\275\226\'\031\274\222S\037=\2451u\275\362S\033\275]\263,\275\225\202&=\241\321\\=&\365\207= fX<C\214\2409XX\004=\245\3740=\326CT=~\267\240\275g\201#\273\237\342#<\021\177\271\274\2425\341;\234-\350\275\221\233\347\273\271\214\327\274^\0264\274\243\230\016=_\007\235\275\n\373\263<\227\315\345;\214\320\374\272r\306\207\275\335\365\242\274%\014!<\313\302|\274\231\303#=\312A\253\274ix2\275\350Qd=\211\324V\274\272\224\210\274\005\3760<\231\337\032=\311kt;\215\2463=\374\315\342;We\317\275+\347\360<\022\376\314\275*#\312=\335}\241\273\250\3123\2755\351\324<^`\025<\234V\342;Z\207\260=\332N\002\275V\200\031\275\252\013\277<\204\007H\275P#\226\274B;\022<\327\331\320<k\217u\274\277i\311<\312\263-=Z\207[=\222 \322<1\265\252<\237\313\202=\235\345\025\274\231\347\265<\264Q\221=\350f_<{,\233\274\317i\266\275\034\027\260<\253\002\027\275\235V\225\274\n\302y=\366]\276\274\262\323\224\274\036\262j<\0363\273<0I\r\275\025H.\275\252\337\212\275 &.\274\362\350\214\275p=\303=\3706\323\274UN\350\274\242 \332<A0(=r\277-=\350l\341\274W\017\303<>\032\235<\032\255\265\274l\211\200=\235N\253<\252\255\364<{\306\226=Q\352k\275\263\'\214\275\347w\312=\343\3605=\022_z\275\367\230\276\275wL|\275\335\206\357<n\331\036\275\234\030a=\242\033:=|>\037\274\316\361E<i\200\n=Y\357f;Y\0318=\206^\005<\353\343=\275\202\367/\275\002\r\243<\027\373\210\275qA\221<\001\006\031=\017N\344;\222\207^<V\310\224\274v\324\177:\337\200\347<\334\"\256=\325\216v=\206o\205=?4\2329\236/\027\274p\\\270\275d;\237<\245\032F\275@\277I\275\311LJ\2758\264\352<0\242\006\272\222w\216< \215\220<\337\\|\275\317\004==F\200*\275_\247\352\272\320=\n<]\316\303\274\344\000\202\274\263J\220\2757nT\270\373\252\036\273\3756T=\024#\014>\356\315\227=\355>\\\275\272\030\003\275\347\\\r=\274\t\317<s\"%<\330\205\226\275\260\035\022<\310qf\274n\360\013\275B\315]<\324\224H=\267f\221=\246\373\321\274\271\355\226=\024\271>\275\210\210+=\232\214\346\274\375u\217\275\241\036\201\275KX\306<7\271\321<\014\004\213<]\033\315\273l\343\261\27407\204\273\302\301\214\2743a\363\274\253C\207\274\325w$;\235#Z=\302i\264\274\206C\032\275\236\323N=J\271\236<\026\245\205\275]\375\004\2756q\250\274r\340\037\275U\330\263\274\237VI<\016by\271,\322\334=.\213\027\274\205\0208\273\271\347\225\273K~\253<!vn\274\033\226\221\274yo\336\274*f\020\275x]\235:p\365\314\275rg\230\275\3316\224<\331\261\236\275\301\335\212\275\306\223\320;8\031\225\275\276g1\274v\217\245\274\213\350\222=>\027 \275\2159\315\275\360)0\275\236:\314;*y\032<&\373\223=p]\214<L\\\256\275\205u\001\275\373\330\302\275\267$\377<\224\306\266<\324\276Y\275\372z\206=\351\267\206<\257\201\r<\345\r\242\275\210j\221=\342R\260\275OP\357\272\244\371\030\274\n/\221\275\337\343\310\274X\370t\274\263G\365<\312\300n\275WT(\275\370\245&9\247\263:={\242\001\275|\256\240\275\327:\343\274\255\250\302\274e \203\274fw.=\257\023\006\273\n\2253=\0237\031\274\273V*<\270\033\261<%\243^\275m.U=\31048;Z\311\355\2734\326\201\275N\341$=\010aG;~I\306<w\251\231\274\036\3644\273\2524S=\330\203\210\273\177\3424\275\225\020\217=S\354\303\274\021<o=\204\221\306\273\243\200\224\274\353\032<=F\262\204;\262\330\235\275rMY\275\221\327\036=h\232\212\275!\211\033\275\035u\225\273C,\327<)\272S\275\003\277\221\2736\n\370\271\341 \340\274;</=\350\333V\275\204\"\003\275\344=\306\274\234\336\203\274M\224a=0\343L\275K\216\212\275\225\005\t<X\252\017=\350Y{\274UP\224\274#\"Y\275\335(\022\275 8?\275\303\371\333;\236\335?=\241\212-\275\n\310$\275\231W\212\275\322\372?\275n\310k=\345\373,=\257@\244=@k\322\274YY\371<g\233Z\275\366l~<N\337\227=\242m\323\275\375\342/<\213\215\014=\273\215\30395y\220\274_,\'<\275\311\235\274\3135\316<\224\203\370<\267\000\010\275>Y6\274\307\235\263\274r\355\213\274_9\n=\221\263\366=\3654H=\355\340\223\275\023\024\020=\227\335b<\216k4\275\263$\270:\225+\035\275\205\032\245=\354;)\274\370\014\273=\201\2754\275\317O\271\273\264(f\274-i\350\274\217@\346\274t\327\204<&~?=\206k\305\274\022\210\251;\2451\022\276nb\241\275\371\023N<1\221\313<?~B=$\005\313;:\205W\275(\\\246=\334\024\341\274\372E\017\275\375Dv=(q\036\275\231\315{\275w\246\262=\211C\217\2751%!\274\201\277\314\274\305ID\274m\365\234<\347\274\317<\303\372\330\274\357\205W\275\'c@=\303\030o\275\353\010\240\274\324\035\361;n\024V\275\250R\265<\301*0\275j\366\204=\034\355\230<B\377}\275\036\020u\275\202o\262=Y\314\327\274\262\037;\276Z\017\301\274\340\350\374;\264\277k\274\273\242\226<S\207\005=k\247\375\273\027 \350\274P\314\325;<Lo<\214\311\022\275:\273\007\275\004\346]<\310q\017\275{)\227<\275;\r\274\320\345\203\274\231\326/\275%\265\356=\\s\373\274@\346\003\273\2315\273\2749\352F\275\210(\336:\022c}\274\277\271\323\274\260\202%<>\\u<\207\200\2069w\001\347\273\261\335l=\033\225]\275\342\377f\273\256~ \275\320G\265\2741g\"\275nS/\275 \367\270\275{\332\376<\217\237\022=L\327\365\274M\236\230=sZ\007\275\215\277N=\246P\244<\n\200\342<\\\2342\275\267#,=4D\277\272\267T\017\274\257\251\310<Rfl\275\216#\237\274\2005*\275-\300\246<\372\327V\275K\316\035\275\241\301\366<u\247\275<\217\353\321\273\303\311c<%Ig<\222\275\016\275F\274\375;t\364\225=\225\277\356<\025\256\330\274q\3656:\016;\027\274m\306\275\274w$\357<\027\035\235=U;\344<\301\2758\274O\232&=\004\202\256\275m\203%\275\323%\017=\023\207\022\274\223\002\266\275\245\035]=)\037\260\272\0014\010=\362\373Y\273\224^\322<\006\360\024\2742\351l;*|\364\274\272\342U\274a#)\275\261\226\014\274\372\263\220=\253\356\270<O$\254\274k\247\373<\372\3016\275f\271\236<\3005\246= c\246\274\'\002\"=\254\366\202<\00685\275\373\200\003\275\n\316\244=\275qE\275;0]\273\212\212\304=;\231\304\274\354\270\355\274\362\342\253\274@\224:<\221{\315;\241\353\216=\024(\326\272x0c<\276\002\230<e\315\035\274\246\006\322\274w\333p=U\3431=H4\220\274\250r\256<\031\223\341\274\316f9\2754.\031\275\3235\205\275_\035\360\274\236;\256\275\261\326\261\2759\276\337;\355\022&=\324\t\234\274\347fD\275\t\204\224<H_p\275\032\314S<(\2412\275?\365s=\264CR=-y\264\274_\311\016;\226\263P\274\013<o=\"\212j\274\2175\224;\024!{=\302TL\275\276\220\320<k\205\251<\025\235Z\275\265\205g=\247H \272\'L\270<Q#z\275\270^\307\273\344\231Z\275}\363\207\274tS\366\274\'\0204\274\374\014\350\274\362\231\276\274\243L\220\275\005\311\210<h\0060\275\325\311\357<y\225\216=$\2540\273\305s\251\275\310\265\205\274\375$\237\274\305Cc\275?g3\275\225\364\240\273<\212\266<\006\374[<\177\267\204\275\226\025\242<\021\305\267\274\034E\323<\263\333\200<&\020\014\274K</\274\327\337\205<ZY\005=\261[\223\274\340\316\316=}W\213<\304#P\274\236\306>:\306\303M\275\204\013\312\275\366\"\200<\277\317\244\274\256\272:\275/\257\243=\233\243\342\274\242,\364\274\023\220\000>\376\371\336\274\214\202\231=\252! \275W\215j\275\340[5\275F]\254\274\327\277\376;M\335\203=\234,?\274-\373b=)\346\004=\322\2433<\242\256(\275\323\254\037=\224v\010=%\333W;\351\353P\274\346\323\220<\"\370\320\275\264\314\213<\303\347(<\221@n=&\006J=<\017\216<%j\226<\004\244\033=\264/\203=\362\351\230\275\377@\013;\270\254O\273z\232\020\275\346[\005<Nd\324\273\362W\205:\310Ni\275\0166I\273\370;1=\247\3177=\236\026\210\275\237\206\345\2740\325\324<\004tc\275\r\330H\275\313Q\026\274\354\177\025\275\306\276\014\275\027\245\202\275\002F\210=\373\021\t=\010\001\234<\265|\035\275\314\356\310<\366({\274\342\240r\275\347\t\262\273\322eP\275\317\300.=\257\271M\273n\251\312\274=/\262\275\3061\006=\262\330u<\013S\321\274\222\001\325;\222\203\272<\362\273\345\274,\373\350\273\267\222\\\275j\016\240<\326\003\023<[\243>=p\211\212=d\026\n\275\3574\317<\270\t\263\274\"P\202<]\014\214\275\253_==\214\352f\275\205\3414=m\351\324\274\341%I\275\253\232\346\274~\263\277=GJv\274\ni\006>l\260\352=\226\235\227=\010e\006<\321#\n<\215\207\377\274D\373\221=\300\335t\275\267O\211<{\346\247;\361o\020<Q\234\355<@P~;01\353\275\242=!\273m\320N<\353\315\266<U\342\256<X@\322;\341A\356\274\025w\240<|\024T\275\312\273g=\000-\236\274\030\262\254\274\253)\337\273\335\316\030==\367*=\245\354\354\274`\201\037=k/\316\273u\214H=;\274\034<\307\255.=\312\327\366\273A\203\013=\363\032X<Yu\233<\267\317\240\275~\231B\275\013\347\315<\254\224\324\273\036\024\217=.\250B=\376MO\275OA\316<2\210\000=y\336\211=\334\305e<\351\312\227<\016\227\017<\245\240\024=\342\225?\275)*S\272g\016\026\274Eq\200=\356[6<\361\304\202=n\272\370<\343Z\377\274\302#t\273[\263\271\275\225\271\211=\356\311t<-\3231<Y\032\340\274\276\357\004\274\031\231^=^6z;\037\014\277<UuK\275\222\323P=\027\344\316\275\243\246\336<r\002\313<\246*:\274Yz\225\273$\363\217=\\\246\311<\355\346\224\274\335|\243<\005t\023<\310\3653;.\366\232<\306Z\021\275\207\013\262\274\343\230\315\2730\002\224\275\320:\004<\322D\004\274g\215P\275\347lH<\223\200t\274\037\257v\275\321\227\226\275}a{=\326L\322\274e\244S\275\222\200><i_\215;\325\357P;\353D\031<\3206\363\273\341\236\n=\'7\000\274\353A\345<(p!<\340\367\371\273\312\014!=X[\277=\354\275I=L}\020=EcK\274\3119\022<p\306\330=J\364\026=\324\3313\275t\261k=\360\211\n=\371\307\270=4\263s\275\001\245V\2740r\177\275f\255\370\274\r\264q=w\010U=\355\3361\275TN\006\275L\277\310<D\306\222<\177I\373<\371\002\313=\023\235\220=\320\337\243=\265Z2\274+]\007\275\"/\217\275t\301\307<5@K\275s\206\361\273\214*\224\2742\303\220<\245E\214\274;Lq<\0079\002=b\r=\274\231A\036=\213m\005=^\326_\275)o\300\274\033\257\321\274\3572\364\275 \333K:\214\372j\275\310b@\274$M7\275x`I\275\272+H=\0133\006\2752aH=\004\321\003=\350GV=}\235\"=b]\354\274\232\276\337\272\257\016\365\271Z\277\004>p\201~<c!f=\342\203\345:*\331H<\030v\235\273\312:\016=\320:\365<9\024\003<\322\303i<Y\341\240\275\331\017\032=\341\2510\275\370`\251<\204\253+=^\034\223=\315\340w=\005%\305<|\310\007\274ef+<\"\301\224=8\210\210\275/I\223\275\007\373\235<\330\336\270=7z\212\274*\234\230\272\366\366\325<x\n\305\274\272\034a\274U\304\312<\227^M<\321\267/\272\255(\000\275kE\302;\277\265+=\351X\255=\000\365l\275,K\231<\314\334\320;:\212\214=:H{\2736`f;\"\274\245\274Q\262\325\273Nw\213\275\273\032\242\274:\370-\275G\031\233=n\214:=;\274A=G\263\223\275\310\037\324\274%\177\205<\262\224<=#\305^=7)>=\246(\203<\315\232\226=\272\022\367\274\327m\272\274\253\2355\275wm\204=@l\214\274yq\362<\000\236\331\2753T\034\275\351\231h\275\364=\220<[\345\025\271v\255\310\274_1\201\275\340\265\331\2735\326\205=\274\002\344\275m\374{=j-X<\033\260\271<b\365\214=\257\357\304<\rK\177<\332yU\275\267+|\273\031\223\010\275\274O\331\274<F\216\274\277\014\'<\211\313E\273\312\212[=\300\304l\274\037\000\251<\340\211\204<\234#\204=\203\362\003\275\013\343\267<V\037\335=\377[\351;\3277\r<\221\020 \275\232n\251\275\354\006\007\274\262\357\220<\357\023\253\275\020\344\221=v\334U<\233\253%\275\346~>=\002\232\376\274\357e\205;+\345\036=]\005\016\275\210o\206=\'\257m<C\324~;Q\0060\275d\260?=\222\241\340\273c\362y\274n\262\217=\221L\317<\354C\232\274K\367\277\275\303_\211\274\021\341\222\275B\351\247<Gsm=;\250\324\274\003\346a=\373Yx<\370\345\"=\003\3016<!\250<\274\211\332l=\350\271\225<jg\356\274\374G\353<A\345\272=\024]\'=5\353?;2\217.\274\310\005\343;\277(\320<\2307\212\273t\320r<\345\227R=_\362\255=\2611\300\274\331r\023\275X\242\274\274uS?\275V_\206\275j\326\227\275M\301Y=6\246\215\2754\207\"\271\304\014I\274\030@\236\274M\263\304<\307TA=\312\206\256:\345\273+\275\313\tM=\321k\276<\345\215=\275\321O\200\274G\254\310\274\226\257\004\275\344\017)\275\240\202\202=\036X8\275cM\016=\255\237=\274\256&W<\274w0=\214\345\232:\230\024\263<>gK<\203\242\204\275\221\351j\275\242RZ<-C\212\274\034\362\017\275\306\316m\275e\262\330\272\265\266\177=\023\356\370\274\325\242\372=\210\341\370<\270\267\210\275\303\341\216=mT\320\274>\347\232<Gw\223<7\323\345\274\022\243Y\274\353z\027=\333\t\210\275\377A\347\274>\324\236\274\337\336\\;[\225+=\360\353B\2759\261M<\270$\027<:> \275-\005\324\274<\177W\273V\214\206<\275\335m<\345t\251\274Gu1=\302\226$=ED\232\275\222\306\365\274\350\205\302=A\214\236\275&\243\307;\rv\357<=\213D=\t\002\246<\003Tt\274\305]F\274MG\211\274\0320\270<&l\023<~\217\027\275\263c\266\275^\226\000=\336\013\261<\267\201\372<4\372\311<\017\335;\275V\231\241=>\233\251;\\\2605\2748\307\325:\\\243n\275<=j<jnR=\305b\r<\224u\324<\370J\214\275\\\223\005\274\374\227\357<k\301u\274\330n\231=\262n\205=\221\375\270\274\240\231\256\275\202q*\275\263\262N\274/\307\255\275A\221\035\275\226f\205=\307\274\020\275\313\363\304<\212XC=\017\032\t=\325\276\343<\007\271\240<?\331\025\274\205\352\342\275\273(\021=(\255\200=\314\006~<\315\327B\274^C\374\274\023\334\030=#\005\036=\300\035\001=\375\362\230\275\366\202\204=z^(=\272\342\265< \332\027\272\304\374x\275w\265\363\274\335\236\275<S:s\274/_\";\0204\334<\035\272\311\274\343\033\340\2755Eq\275\253%\202\275\036\031\336\274\003\273\214=\005\227\346<\036#\314;a\367L=\364\200\014\274\364\t\025\275\311\234#\275Q\003\246\274\350\213\215\274\301a9=\251\347\360\275q\312\032\275\323\306\226<\325\235\306\274\370P2\274d\'$=[\250\343<q\013\230<\013\273\346\274\212=\253=A\342\250=\244\246\371\274\006\375\005\274\022\237\021\275\037\351W\274\305\360\027=cx\215\275\n\262\333;\267\364!\275\006.\014==\007\317<\337$Z\275=\322\212\273\221\025j\275\214\221s\274 \247G<\323\002\022\275\325b\241\275\264\374#\272z\010\262<?c\277;\tq\312\273\270\311\240\274\352\270/\275\3132\256<\307\360!\275\212\026\255\274\264\356\337\274\320\315?\275\253\006\377\274\351\0225\275\332\310\224\275\263\014X\274n#n\275c\223\004\275\321JP<q\2525=\3468<\274\305\2212=\270\246\206=\313\327\031<\204\221\204\275\312\222l=\360D\205\275F\216\347\274H\305J\275\232\235^<PC\t\275(Gn\274\212vL=y\271\314\274D\3375=a\242\223=\301=\361\273\354\267I\275_\031\245<\203\350\200\275Q%\325\274Y\256@<p\272\027=\373\253x=\004B\201\2747\"\314\273TJ\227\274\334\277E\275\327.d<\234!\202\274\010\353\006\275\273|`\275\305\234\325=\261DI=\356\213\212\275\362\024\222=\254\317\013=\300E\007\273\322<\263\273\273N\263=c)s<p\333\021=\374\212\224\275\273\2550=D\t\366:\260\213\307\274\006\357\221<n\001\037<\261\312\030\275]\020\262<[\rO\274\266E^\274=\2679=@\'%<\327\277K=u\376#\275$\254~=\374\024+\275\257\033!=\250\214\013=\227)\"=W\037\223<\222\035\241\275\354\014\037\275\200\177\003\275\324[\363<n\310\227=\026\270\323<\271\234\366\274\204:=\275\233\201\316\274i$\337\272{\003\004=On+\274\361\302\020\275\267\022|\275hy+=\234\361\027=R\323\362;\'{Q\275U\\\032=?\343\257\274\2567n=\204\260\000;\010n\370</\234\346<\240s}=\317$\227\275P\315\211\275\003\365\337\275\370\261E\275{\203P\275}\212O\275Y\246\025=\304\320\037=o\325\033\275\236\001\215\275\266\367\320;\2716\304<\033\241\023=\351\006\237=\230t\210\273\351\027\023=P\005\215\275;\374\260<\233\226\007==x\301<F\346A\275\377L!\275\260\307H=\370w\300\273\032\343\031=\313\207\032\275\300\247_<d\314\000<\035\036\000=\241#\332<\310\350\203\273\356\200W\275\361i\372<M\376\270\275`5X=\310\207Z=\032\200\340\274N&h\274\205a\226;\257\345.\275c\'\337<\322\223\006<\007\3061\275\362B\345\273\021\203\212<S,\320<\0329X\275\241S\303\272n\343\264\275e`m\275I-\301\275wM1\275\263x\354<\241\346\251;\306\337\265\274\207<n=\267Q!=s\t\253\275\007\271t<\006\365\030=\334hY\275i\306R\275\013\374\255\274v\035\027=6\273l\274\250\211\206\274\021h\t\275F\231I=\354_-=S\374\266\274\316T\316\2752\200T;\272\362\250\275K<\305\275s\355\215\275\350?\001\274Q[\220<\234\200\330:o\030W=\223~#=\2034\247=\0203\307;\375\365\246=/\306a\275\026*\271; \000\212=\314\327\335\275\020\235V=\026OJ=g\216b=gu/=\306\277\267\274\037\020\301\274\221\300w=`oW<@_\251=\316I\032=\206\363I\275\305\374\224\274\002#\\<?\032\021=YEY=I\031\260\274\346\335,=\335\227\023\275\366\265\253\274\r\237\230;\200u%\273\322\305\254<\371q&=\345YN=\205\314F\274M\206\341\273\333&\315\274\242Qk\275\310_\t\274)\355\r\275\326\346\353\274\245`\224\274\003\200\342\273Jp\221=\266{\002\275h\325\206=\231N\243=\204\263\360\274\027\250`<\035\rU\275\036#2=e\352\302;u\020B;\014\300:\274\205\237q\275#\343\206\274(\316\020=r\n\024\275\020\256\t=\317\232\347<\240`\021=\307\353k<7x\234\275\252\270R:\303O\245\275\232\020?=\315\261Y<J\2448\274r\253\355<.)\303\274\370B\225<E\r}<\363\214\204\275\017\235\264\275\001\332\270;\336\367\021=\311\275\177:D\241(\274\231vI=k\240 \275\344\002z=\216\351\243:\"4\003\275wE\215<\355\231\013=\3412\330\274&-B\275\246\373O<\253\305q\274\322I\207=\272\272l\274\216\253\260\275]\0271\274\246\243\333\275\332Z\007\274\345\256\254=\\\277\257<\203?\017<\3518\004\275\250\336\216\275\204\r\226\275\317\227\202=\'\325\312\274\217M\220<\006!\005=D\236\001\275\361\037\225=\356\201\206\275m\021\220\274\001T!\273\243\331\241\273\356\335\333<\026\207\317<^Z_\275\236\236\001\276,G\345=A+\277\274~FO=+-\026\274\353\342\304;3\276\315<\014\0247\275\217\313\365\273\351q6<?\273\252<\210M\325\272\312\337W\275|\365x\274\332\256b\272\276\223\237\274\214\242\347\273\356\356\234=-\274/\275\266d\322<\245\227\321;\345\267u\274\004A\032<\306\203\'=\302\351\202=:>\372<\3540\220=\332u\377\274\254AR\275\013A-=\027%\320;\nv\317<O&\023\275Jn\331\274fB\203=\221\270\242;\001$\267<\261E\221\274N\0207\275\211\220$=|G\003=\203$\215<\000\305O=\350\200V\275\226E}<\360\205z<\207\312\215<\271\034\234=Rz+<\356\013\'\2759^\366;\007\312x<\014\016#<n\200\274\275>\203\333\273\301\364\213\274\347\267S\275\273\370\226=\266\270x<\310\262\327\273y\r\264\272\272\246\274<\311l\311<\312f\213\275\3139\363<t\225\205=J?W=A\316\262=\227/\214;\333\013\251=C\350p=\025\360\216\275\207\016\030=(\304\032=\201\215C<n6y=\346{\344<\314\324\302\274\345\252\354\273G\300\003\274\3144\206=*\3554\275\232\304\206=\261]6=ma\210\271\334\377\303\273\235\325\350\275\321\344R\275\332\002\271<S\237^:\234g\202<\n\315\305\274\317\215\377\274\367\340\035=\3443R=\213m\202\275\014c\027=\334\t\305:\257\345\021\275\303\236\232\275_s\214=~<\335<\336O\262<m&\177<\033!\367\274\221\210\207=O\335k\272a\003p=c\355*<\341\241E\274\214c\346\275\265.\303\272\327\277w=\026\364u<\272A\273<\221\330\204=\373\360\300;nWh\274,\006\030=b}\003=%3\234=.c\022:\201\026\323<\273\343\212<\226\321\016\274\207\225\n\275Q\025Z\275\265\274&\275c\266-\274\033uM=\352\000\177\275yq\245= \327\317\272?\221\307=\322\353\020\275\035\376/\275\327q\363\273`\004\027\274\264\003\205\274a-$<\257o\254\274\222\001\311\273\002G?\275\336\216\270\274\332\374@\2754\3140\275g\271b=\224\334\031<\341\241^=\311wC=~\3259\275\255A\323\273\260\354\266<+\346\222=\033\213\330\274\202yh\275\"\215^=\026\003\214\275Y\327[=\007\212\007\276\220\261+=<E?\275\361$\313\273\240\t5\273F\311\214\274\277\311\233<\246\303H=\275X\033=?V\026\275\0144\005=\335\017\032=6\345\220=~7\234\275\373\246D\274;7\367=\355\200|\275\332?\035=y\372N=\334\252 >p\037&=u\302\'\275\262\000\253<\236E1\274Q\254>=9:Z;\004o>\275O\364\372\273de\030<\020[%\275)m\256\274\361\246\\\274\005\211\211=\016\244\354=\017-{\274\267|>\275\272$\017\275\276\006m\275D\266l=\255\223\004\275\264\026\340;1\021\020=\332 \031\275\236\202\366\274_%\341<\223\306\030<o\002\237\275\034\346\316<\3007\250\274\254v\313\272]v`\273\263\332\233<\027\320\t=\305j\256\275\350\221\317;y\335}\275\357\326\205<|\234\264\274\211J\027\275\314\014u\275\217>\305<\367\214\226\273\313u\017\274\205\222\362\272@\205o\274\222\272\007=\251 \247\274\224(&=\263\020\005<\367K3=\007\376\266\275\315\303\002;\2775-\2759\001S\275\240\263R\275\336gs:\327\335\354\275\231U\372\273h\317\234\274\033\001+\275\314\006&=j\243z\275\266\204\351\275!-8=>\232\243<\203?D<\210}\256<e\301\262\274|\013\001\275\241\255\240=\234\331-\275t#`<\256\214\224\275j@\022\274I\007\374\274\023\311\250\274\331\373\237=\370\361\331\274\334\177u;~P?\274\226\350\255<SD\362<\322\301\r\276&j\335<\240/:\274}\230\002\275\3476\236\274\222\223\204=\307\235R<L\240\264\274u@\366\272\3773\267\274C\017T=\337\372\206<\224.\213;\036=\353<\262\375\227=\300\370\264<\330\'*<[\373S\275\3716\"=m\354\206\271B@\321\274\322L\034\275\231\310\272\273\222\021\355=\256je\274u\354y\274\025a\n\275\346\230\017\275\377w\246<\203\207\203\273\335\363\210<\0021\335;,|~<eF\312<\332>$=\003\322T\274\370aR=(\t\364;lP\016\275\321\331\236\275\234\021\205\274\213\2505<\370\304,=UR\r<\340\257\356=\0051\360;\326,\202<\244p\t\275\316\021\034\275\352b\363<\273\021z\273\365\351\351\274\256^\016\273\312\210+\275\225\241\216\275\276r\003\274\200<H\274\254\306\231\2757\371\303\2736\263~\273\376\233\344\273\2346\273\275\020{\203\275\264)\245\274{\241\230=q\275?=?\010R<\306\273\220=g\016\232<\275F\337=\322\324\260\274\240\222\271=\335Ql\274Dd\243\274\340\224\356\272\224\310\371\274\224\010H=35\367\274\030\365G=\317\035\267;\314\234K\275\014\232\\\275#BG\275\340\217\007=\374\225m\275\3328\375\274`V\215\274\235\272\215\274h9\001\275\317q\020\275(\214b=\211}\000\274n\244G=\017\376\251\2740\033\321<,)\010\275O\210\032;ao\251<\222~\t=`w%\274\366\373@\274z\210\264\273\0328\376<g\313\031\275@\r\351\274\332\245\223=\002\367\263\274\310%\276=\027\334\033=2\371\322<\350\0047\274\262\231G\275\357\363B=\3468t<\274\355I=j\366\303=\327\361E\275\004\350:=XW\213=\000\370\222\273W\271\315<\272\212\r;\324+\213\273\321\267\036\275\233\215x=\234Q\024\274\201\312\207\275\013\255v<\036W\336\274\321i\024\274\321\026\207<\226\345E\274p\334\326<b\371\365<\354b4\274i\250\334\273\266s\331<\266\203\220\275\353\375\224\274l\301\001\275g\322\002\275\200\336\245=\304M\257\275\025\367l\275}\372\310<Ys\006=\355\2529=+E:=7\374T\274\034.\341\272\345\256\321\274\302\245\016=\250\326\211\274\372\372*\275\0354!\275\312\323\221\274t\360<=\326\310\224=LA\031\274\366\204Q\275\037\023z;\313t\243;>3\035\275.\032\330\274\336@\010:\024\034\260\273\215\254\266\274m.\226\274l\023\261\274\251\014H\274ig\251<g\267\205\274j\261\034=40\007<o\325\215\275\317\021z=\226O\2019qa\\<\201\335\006=\005\r\205=\213\274\235\2708\\\227=\274\302\327=\272@\240\272\3355\245\275\221&4\275\326\037\225;\003r\347<j\231a=\312\0343\274Z\323\024;\332B\233=\2139\027\274\341\016\222=i\352k=\362l\037=2\036\313\275\346\200\267<\210|\253<~=n=\363n\207\275\210\036\373<\200\005=<\374j\t<\357\034\215<\370\030\034=\360\325\027\275\017\210\023\274\236\342\204\275-\307\350\273\016\321+\274\266L\377\274\2309\217\273kE\217=5Y\233=FFq\274,HU\275\314\347\014\275{\243r;\036\3705=W/E\273\245Wx\275\271~v\275qE\247<z\226\266\272.\263\344\274\353i#=\342\2759\275\021H\202=K\257{\273\303W\351<\366Va=\256\204d\275>\020\331<\374\360F\274\247\226c=\336\353\267=B\370\031=\351g\350\274\331\236\007\275<\221\272=t\317\214\273\224z\260\274\305<\321\274\266E\235\275fsk\274\214\261$=\014d\003\2763\010\253=\3366\247;\tt\004\275aA\001\275\3736l\274\364*\000=+\343\004=\244\234*\275\326\363\264\274\312!\001=\217\261u=\267\n\215\275\374\200]=\226U.\275\234\272\245<\243 \221;\020e\021=\201\376*\274\201\021\270\274\206g\341\274\270\346\327;yqQ\275\037\322I\275\022\2176\275\226\370\"=\200\324`=\277\2041\275H\3565=K\244\233=\201RX=\2356\217\275\244\364\214\275\204\254\225<\347\236\224\275\\\247:<\005\034s\274\200.\277\275U\224\311\274\371Y\016\275}\265\224\274!8\237=\211\025\214\275\266W\214\274\372I\251\275_K!=\343\223\300=\343\237\"\275\261\014\241=<\304\207=\021^V=W!\316\275\374\331\223=\270\300\270\273Ds\255\274~3\215\275\342\330\352<\333\227f<l#\212:F\3667;|\027\030=;\275\022\275\346\311P=\346/\354;0\001\260\275\230\376\010=A\225\t<\363\370\344<\005=\207=\276\037-\275wh3=\227\350\264<3]\332<\374\037\263\275\231\036\210;\215\351\276;\357K\021<\316\r\005=S\240\003=y\257O=\037L\365<\023\316\371<\214\272F\275\n$r<Z\031\214;w\006\334<_k\356<\204\033\027\275\366\022\216<\234\313\r\275\332*\277<\250\360\326\274H\327\021=;\335\267:\227f\007=\272\0206=\215\036\024\274z\364I=\261\364\350:P\2750\274\025\033\262\274\\6\016\274h\317W\275\245\222J<\232\020{\274%mZ=0\230\371\275S\310\264</%\263\274\353cY<\246\013\213\2758\023\243=\234\224\255;\307\005;\275\357\242\t=\256\231\000<\347\240\036\274\301\323\010=\357\031\356\275\315\264D<{\3416\275\352K\251:\331\361\305<\353\216\221<\370,K\274\030\353\276<W\316N=\252Lf=*~\334=,\254\224<\205`\373;\035\022\026\275\027(\362;B|\'<\217~\305<\347i\363\274K5\273\274\227\222#=(W^\273\214\240`\274\013\374\220=\274\257\357<\340\225p\274\016\241\365\274\353d!\275`j\036=$\r<\274\363M\002\275\2238\305<\315\026\247\274pc\270<b]\243\275\336\306\014<\220$B=\301\314\314\274\311\207\372< \232|=.\201%\274\246\016]\275\204\037\\\2737\213u=\016\324\217\275y\303\345\274J\022p=\325\263;\275o\030(=m\306x\275\005]\305<B\363\301\2740~t\275\317\'\234\274x\300E\275P\373\013\275@\024T<}\335\033<\234\270a<\220gM=\303\253\377\274l34\275\014\272\027=\006\033\033=5\031\"=\003&R:cj\272<\177\231\022=\216\320\364<\344o\263\275\360\362\220=\345\033P\2740{\217\274\321\356\271=s\307\227\273\022mZ=\353\367\345<\\i\245\274TP\270\274qB\236\274 \364\224\274~Q&\272\225%7\275WPP\275\034\336(\275M\231\254\273D\035~\275l\245a\273E\036\345\274T\242\260\274\204F\036\275C-\307\274\342\\%\275\372\025-\2748 P=W\020\366:x\372\317\274\024\277\261\274\347n\227< \270\273<E.b\274\2242~=\353\341\316\275~?\002\274\250\246\230\274\260\221\034=\267\326\315<\234Fs;\014\032V=\213h\204\275\300t\312=\207\201*\275\351\305\326\274\237\245\r=\266\310<=\373\213Q<.\037\264<\370 ^\275\357z\222=ul\356\274\343\241\033=\371\311\256\274=\210\255<\307\035\270<\030dK=|\256\232\273\000lx\275z{\264\275BV\236<\021\331\370;\272\001b<\021\211W9\240;\206\274\016\006\023<Q7>\275Q\315\032\274\033\247*\275\300:\020\2758I&\274]t\014\275i\014\032=\034pO\275\002\321:=X\223\304\274\"\360\034\275\364w\233\274&GB\275\017\317\002\275\321\034\215=2\263\200<\2076*\274\025q\213=\245\211!\275\243\363\235<,\313\004\275\030lx=F\224\014\274\371\267\222\273\242f\222;y9y\275\372\021\017\275\306sK<\340\200\342<\177\211\026>QG\335\273\243\256\300<D\361\317\274#\240N\274B\245\207\275\327\2144=\300G\272<\311\341\032=\014\342@\275\013[\327\274\0237>=b\034\252\275\3517\\\275;o%\274\026\244\232<{\177\337<\312\226\271<\306w*<\332\350\273\274\255\310G\275%y\317;\235\202o=\344|\371\273\331\223\026\275\204l\242\273r8\274\274\364\205\210\275\207\340\265=\360?m<uU\205=\014N\240<\335\272\002\274w\347\016\275:<\236\275\315\233\302<\254\306\371\274\325\037B\275L\202|\275k\364\005=\024\346)\274\345L\226<\263IR=v?(<X\247\371\274q\025\020\274\017\014\240\275\303?\334;\245\007g\275\273\215\306=\000\376\026;\216\024\226=t\342*\274x\3315\274i\236_\275\365\346\225=\354\004P;\356kl\274\212/\352;L\347#=\374\030\211=\272\212\217=\351\2358=\005\005\353=xaU\275\322\263\221\274|-\350\274\0376\235\274\225e\233\275\035b\237\275s=\037\275\346\317P\2751~\206\275\233\267O<\2025\377\274QV\264=\340\230\010=\303\350\227;D\031x=\031\340i\275\033p\365<\203\346\242\2755\223{\274\016\336\022=\017\276\230\274z\275\227\275\256tO\275\027F\216\275E3\277\274P \262=\355\003\321\274O\330\341<\246x\n\273\353Rd=\252\204\330\274\207k\021\275\274\244?\275\374\226\262<\220\033\205\275\311\306c\275i\265\371<\370\222\307\274\273\347\255\273\270\210\r\275\3364\232\274o\225(<\317(\001\2758\372\003\275m\334\002;c\373]\274\"\325!<\243\333\334\274\216V\214\2740\221\220\275\323\265z=cgE<\305U-<XL\207\275\242\260o\274C\245D\2757\240k<\320\017y=M\275\333\274&\211\360<\037\256\203<\301\301\314\273,\334\231\275J7j<\262\244f=$k\017\2741x\225\274\023V\243<\272\371\207;>Qa\275C\244O\274S\303K=\355\256\263=a\270V\272\211.\272<\373,\362;S\324A=XP\270\275\244\257\t=i\271\241\273\020\363\237<\362d7\275W~\254\275\343~9\275\004*\356<\255\2366<.+\215\273O\275/=\206=3\2755`\026\275\251\010V=\243/\213\275;\300*\274\331\311\261=A,\202=\277\237e\275\016\003G\275Dg\370\274Jj\206;\223n\366\2740m\n\275x\353|=\216\301\321\274\221\322\223<aR\363\274\320\0003\275\222\206\311<\256\206\237\274^$\204\274\222\353I\274\016l\275;\362F9\274S\347\276=#\025\357\275\315\274~<M\033\320\274\347\210\005\275\336\340(\275?Z\274=RMf<\224\022\326<1\215:\275,\301\027=(\365\346<\350\254\007=u\037\230=\333o$<\226w\r\275\202\213#=/\263\035\275\364y\351\275YX)\274\341\002t=\206\024\265\274\340\343\236<.\2275\275\313\307~;\262)\212\274\306\330o\275Xq\330\274\272\005\332\275\314\"\026=\212|\277;w\306\266<\340\240\237<q{E<.\345\256<\323\366\340=\214k1\275\273\341\230;mX]<\356r\202<oR\260\274\324W\270\274xn\310<\274\212\025<w\323\252<\2001\265=\"?_=\271?\036=\267tX\272\330g\374\273\335\316\004=\"\344\217=u@$=z\355\014<g\2070=\233[q\275.Q\272\274\372\231\325<M\376\211\274\010\036\320;\232\363;=b\240\227\274\241\272m\275f\336\252\275\363\215\350\273v\247\257\2747\375\227\275\234\345K\274\221k\227<\276\235&\274]\271\301<)we\272\271\016\213=O\0135=<E\200=p\330\256<\005\016\266=\004@%=\377\247|=\2072.=\261d\363;PV#<\3461\231:x\315^\275\234\037\201<t\032\251\275\331\204\271<\240@\031:\230b\006=\301:\253<]\305A=,\250\212=;J\354\274\031&\021<\354\352_=8\3045<\303b\200\275,%\\==^\026=\341\375\375\274{\035\265\274i\300\276\271y\376+\275\277\322\364\275\375\307;<\250\271E=O\357\017=\017\226\267=\006f\220\274>\326J\275\224\035)=\231\000\243;m\343\224=dM\305\272\373i\267=g\356\254\275*\274\003\273n\227\341\275\t\271\322=\3372\005=\207K\220\275\010\342\226\275\204L*=\274\271@=\254-\344\2749l,=A\274:\274H\241\216\275\311\260k\274j-\353\273\326z\256\274%\033\216\274\220\222J\275\352\221\340<\n\201\205\2746n\346\273wo%\275\372g1\275K\353\251<\n\026\242\273\275\323I=n\242\221\273\272\007y=\032M+\275\026r{=\262\026&\274\336\027\263\274\327\032\322<1\232\214<\343\306\341\274\321zS=\302\005\321<\247\365\336\274\323\357+\274GpE=\006\004!=n\020~<\214iZ:o\225\307<\345\026i\275\"\"\221\274W\275\244;B\367c<[\321\226\274_\204\345\274nC\020\274@/\032\275!\033-=\275\024\001=\202|\267\275j\267_\2757Z\325\275\305\203\224<\2576@\275%\255J\275\3032A<\305K\316\275\270\307\013=%27\275\325\035\202\274\277\232\216\274\21227\275\021\216\315\274\326\005\005=C3b\274x\222\207<\017e-\275p\271/\274\253\037\335\274\276\326\306<\003\245\366\272\212uL=\306\204\216\275;\247\261\274\237\2132<\336\244\210\275\303\235\005\275BW\344\274\201\301J\275v\367\345\273\310\177O\274\313u\246;\017\0309\275\0252\"=\341\223D\274m#\300\274A\001\267=_\262\222=\327e\345<\230\230\321\274RB\375;8\360\277=Pt\222<\227\221\202<.\032\201\275\264\233\225\275\2368E\274\260\3438\274(\204\014=z\026\000=\034\226(=\201\264A\275_w/\273K\370o=\233\223\235<t\333J=fk#\275;\001\310=\255\203\327:\241r\004<A\377\026=\241\020\216\275\211.+;\001{\330<y\375\r\275\345/N=\006\230m=Ck\213\275L\226\t\272\346\027\030\275Qe\r\275\342\035\306\274\036\351\307;X\335\337\275\360\344o=2\251Q=(\234\027\275\"\354\257\275\001^U\275r \231\274\200\321\277\272\301\274\203\274-\225\030;^X\234=\330/\344;\"\301B=_\224.=\274z%<\021\260@=\240\233H=I\304\362<\036\007\255=8\273.<\320:s\274\320\n\033=up\307\274_\222\244<\300\251W\275\371\327\224=\364\231L\275\343\014\365<\240\374\212\273)\027U\275f|\272\274x_[\275\333{\225\275$\334\357=RO\227<\370\037\370\274\002o;\273\265E\010=\275\0076\275\263U\210\274? \200\274\223\220\311\274m\005\315<\245M\276\273 \235\210<gT\374<\034\034?=\r\340\260\274C\201\201=\2357\336\275La\336\274\274\306R\273\372\202s<8p\255=\364\2251\275?\350\312<\264\225\265\273B\261\355\274\327\261\211\274\"J\201=\377\220\2019\\\350\2478\337\202o\273\253\227\311\273V\341\302\272Y\224\263<U?\037=;\330\221\275$\350\326<\027\355\303<~p\214<\217\210\037\274\013Ye\275B\032Y=\353A\346;\273\362z\275\014\353g\275\256r\205=\265\t\256\2741[\314<\022\036|<\241\376\352\274\275\253\241=\013\312L\274\035\177u=U\013Z=\177p\017\275\016^\304<I\200!=\302[\343\274a\237]=\206\344\254\274\216\224\217=K.\366\271\224\307\317\274>}k\275N\2075=\342(\026\274\215\275l\2745\202Z=\004\361\n=\356\333~=c\023\"\275P\267\324<\330\037\013\275\370\014\005\275\361\210\232<\265\205r\274{[z\275\n\333\177\272\316\026\323<m\334K=\377\262\340\271\361\201\301=\250\032\267\274p+\300\274\037\\_:\221n\212=H\362.:\031\022\031=\273\273\372\274\222k7=\313\354w<Q\306\325\274H\330\201<C\302E=\307\375\313\274\337\364\310\274\202}\022\274y\2348=\305Kp=\023\367W\275qo\266=P\214\030\275\3229\206\272E\"\2439PGK\275\034\232\026\275\333v\312\275\247\026\224;\333nM\275\027\r\'=g\202\235\273\277s\031\274\233\n\002\274\200\323\250<mlw=<\356\225\274e\0137<(K\367\274\260i\233=t\367\001\275\256\306K<5\016\237=\347\352|=#\305\247<\001\374u\275G\275%\275\r\027d<S0\001>\002~\010\274\244=\251\274@b\t=\244\376\347<Y\236r<\357\305g\275\023\005\3269+@!\275A~\272<\260\207\343\274\332E\201=\234.\266=l\260\264\273\000X%<\326\357\245\274H\275@;\302\272\030=\353\342/\275\253Bm\275\201\034\334\274\343VO<7C\336\274\0233\272\274D\342t=4\357\255=\223\020$=\226@E\275\257\240T\274\226\360q=g\224\035=\200=\342:W[\301;\335\275\377<\226\201\265\275\347\202k=\234\016\364\274I^a\275\350>f\275\250\263\021\274%>#\273\220\240g=@\206\036=\347\325>=\023H%\275+\030F<k\365\002=|\352\327\274I\336\026=\202Q\025=)E,=M\254\216\274W\241\353<\020\260\307\274\225y\325\274f_\374<j-\210=\214\207q\272\013\251K=h\356u=\022\"\372<c\234,=a\370\203\273\010\347\334<\327l\2719QC\014\275R\325\205\272\311\315\230\272\376\351\034=\235N\322<\'\262\364\273\357\223%<\022v\202\274\272\310\346<\343UZ\275p\0019\275\256\253\260<\2056\256\275\277\367 \275c\026f=(:\336=\202\314 ;\3256i\275\301$(=\334,\217<2\177\237\275\034r\221\275\224\032\005\275\222\234U\275@\360p<;o\331\274&wl<\225_\232=\226\310*=\307\323T=\266\255;\275^z\377\274\232u=\274\355\274\277:/\250\343\272r$\310;!t\361:`)Y\274.\356\265=\263\025Q\275\0026\215\275l\321\352;|\016\230=\363-\241\274\2450d\275\374\032\324=\204Zf\274o\336\203=\203\016\256<x)\212\273.i\236<\271I\357<\305\3403=\254K\333<xr\202\275\254\211\363<\2464\266<M\216\365<\035x\240=_\336\340<\352\\\265;=\251><\374\007S=,\362\365\2726\0370\2758#\213\275\010\353\271<B\370\211\275\214\370\222\273F\211\200=C\224i=\303\232\233:-n\225=]\2002\275e\244\223=z2\342\274M\271|;i\024\330<\3271Z\275^\226\303;Y\312\233\274\215\026\301\274\337;\217<\"\312%=s\351M<\262\362\237\274\265\240\007<\325ZY<\230_p\275vw\362\274\202\356\301\273\324\236S<\357\004l\273\270\264\233\275N%\205=}\203\322=\254@\352<O\036\345;\333=\317\274\276\354\261\274\377\267)\274\033\336U\275\244\344\r=0\211\r=\255li=b\200\263\274>j\305\274\220&\267\274|\247}<@\277n\275#\272>\275\004~c\275\344\034\035=zD\345:\025\004\020\274\373\010\226\274\340\272*=V\203\022\275\022r\t=\360\013\207=\204Y\013=\221\313g=\311\\\027<\200\004l=G(\256<q\002\211<\177]g\274\266=i\274G\211\251\274e\333\337\273,\014l\2741\006;\274`\021\363<VD\347\273\027\266\304\274\226?\031=7\252\230\275_w\363<\261\334m=\205\346R\275Z=\320\273\273O\203=\265\251<\275n\275\002<\037\241\342\273,\013\000\274D\301\331\273\243\347\215\274\365I\217;\244\210\254\271\314k`\275\373\373]\274k\367\006<\210&\334=G\277\2727_\320\372\275m\271\373=\245?C=\334k\016\275\255R\217<\022a\037\275\034\350\365\273\347\343\251\275\3168`<a\274\352\274\021+X=\266\336\231<s\233\233<a\361\033\275h\260\266\274\267Z\207\273\300\304\315<\036\261#\275f\345\225<BE\227\274\346\016\313\274]t\016=\002 \033=\315\363\246=C\037\317<3\033\243;\276\341\001<\316\357\326<^\276.=\265x\236\274E\006\307\2749#r=\356\205\312<\243\310\027\275\355\3775\275<\036\027<mq\247=\261\325\204\275$\324w\275\230\257\332<\213w\230;\250\006d\275\267\204~=\027\026\210;\330\371H\275\360\336~\275Bs\003\276\036\200P\275\262!\272\274\205M4=\007\317\331=$\273\204<\333\036l<]\001\000\274\276\301\356=*\202\242=\030/-<\031\261\246<\025w\330<Uiv=N\271\010\275\002\217\001=\333\317\022\275m\336E=\201v\017\2757\333\324\274S\266\002=\037R\017=\014t\234\274)\374\r=\344\246\327\274\023\260\302\275;r\272=\221\037\356<\332\"\352:\316p\204<\232k\320\275p~\020<\303\242\226\274\273\346\210\275>\370\017\275\322\276Z=\005\207}\274#\2546=\235\212\271\274\013\304\023<\'\215\254\274\236\316V\275!\230\332\274\354[(=\200\274\235\273\327;\217<~Rv<\213\223\032\275\363\376A\275\366)|<\214\205\324;\"\277\271\275&PL=x\254I=2\346\265\273\\\337\004=1f\027=\214\006\351<\323\256\010\275\027D\211<\226\020h=gz\243\274\206\264\334<\0019\230\2758c\222<\344bR\274\247\253\272;\376v\026\275\373@\224\274u\323\271:\325a0<\224\025\024\275h\230j\275\212\302\251\274az\230\274\213\243h<\014\217\254\274\302\321\000\275\277\0363\275\347K,=\275\360 = s\306<\277\300\002=f\356?=\225R\013>\266]_\273\270]z<\230q/<\324k\004=5\325\026=\205\360\275=\260?5\275?*+\272\344\301\224\274\t*b\275\321S\337<\256\005\300<AEZ<\227\364\311<};\312\273\252\213\252<\223\203O=#\013I=\334\225\370\274\007\372[\275WJ(=\253\230!\273\217\212i=\273\370\000\275Em,=\273-o\272\211\332\305;K\274O=M\370J\275D\267\256\274\342\303\201\275\237\240\271\273\302\301T\275\340\2234\274\374E\205\274\251=\323\273\330\t\001\274\253A\014;\276Z/=,w\177\275\261\201I\275\331\263\231;E\255\205;\355\0357<:\351\"\275$\330\345;\\\213\007\275\243\035\241\272m\350\322<\321q\273\275u(L\275\321\245l=\032g\341\274\000\251,\275\003\2642=\364\277\313;P=l=\361\240\255\274\233I(\275(\245\262=z\317\t=\354\216B=\256\246\237\274{;\010\275m\316\355\274\037\3606\275CrH\275c\275\252<$\325\030=\264p\203\275\034Pi\275\276\021b=xH\000>\276]j=4\030\264;\036\3369\274\224Y\377\272>)I=\226\307-=\340\374<<\366\202S\275L=\036=\377\374\201\275\257\035\0048\020\005\025\275\310lh=\235\336^\273\215\345`=T\035y=\375\324>\275\026U\\<\240xU=\347`\276\274]eR\275\340 \021=r\340\231=\305]/\275VM\233=\356`\324<#\321a=w#u<\201\202\202=A\2101\275\306\327\023\275\300|\213<A\'O=\342K/; \342\017\275X\255R=[\022w\274\243\233K\275\253\230\020\275\202\001/\275z\235\216\275;2\223;\317^\311<\005\302%=\2261\240\275\025N\356\274\377o\207\274}\330\025<\227#U=\"\214T\270S\375V\275r\374\213=\331\205\025\275\324\206U\275\001\240\203\274\265\376g\274\345[\255<v\253\372\274\026H\224=!\335r=\204GR=\206Rt=@[g=Y\315\004\275\215\010\220\275t3Y\274\022\317@=Uz\200\275\235\330/<\205\227;=\324\n\031\275\267f\213\275\313-\207\275\270\2231<\321t\320\274H\"\356\274\005+E=\035D\025\275\\qE\274\360\254\032<\024\016|\275\336\256&\275\350\310\032;\214[7<lq\203\275aS|\274\311\320\031=\325\220\003\275-\215\177\275%M\352:s\272&<7\250\322\274b\024\206=V\234V=\201\326W<SF\232=\"p\177\274\023<\345<1\010E=\370t\216=o\214\340<\212\216\002=/\256\006=\303\242\203=\316.\003\276\276\221\221:\204\237\364<\310\302\376<\224\351\266\274\2567\204<4\305\372\274\317\204\312<\"\001\001\272\212\225O\273 \201o\274\035\n\251\274\340\251\314\274\247\345\273<\316\021\201\274\235\025\002\270\026\247\273\273\360\211s;$\377\033;\244r\355\274c\035\340=\351\356<\274\2075\342=\240\344\202\275\312\326^\275-\235\177\274\034\255\304\275\214C\270=\237\323\313<6\367\205=\330\375\232\275\313.\233=\314\025\206=\037\332X\275j\223\036\275\343\216q\275\264\273f<\t\276\326\274\242%\265\274\307h\262\272\376\372n<L\251\311\274\310\277:\274\346\226\201;\n\353\200\275\261u\267\273\231Mx<\'\340\035\273R\353\227<\320\265&\275\216\270\323;0:\260\274\243\316\031\275+/\220=\326\010\260\274\314\277E<]\214\r\274\021\033p\274\010\367\237<\270\202\216=\342\345\231\275+\036\331;b\232B\274\316\210\n\275\034\327{<K\262\026>\302\024\212<[5\327;\334\324m\275\027\374\210\275\332\230\034\275M\3536\275I\2732\273S\300\204=\35539\275A,%=\031\004\265<\n\205\262\274/\265Q=\262\304\353=5\242\367<\202\336\213\274\227+3=\010\201\214<\312\326+\274\010\243\275<h\362\224=\004\275\251\273R`\224;\337e\274<\032%#\275\243\204s=\230\345\202\275\"\216\200=\342\340v\275_\247\202\275N\215\273\275\002y\036\2753A!<\332\204\351\273\006\207\220<\233\3755=)\375)\275\226K\007\276#\252d=\343,0\275\224MQ\274\316\370\010\275\021\337\230\275\224\0264\275\300\205l\275\337\241\346\273\364\t\r=\246u\002\275Xk\364<\213\373\256\273Z_w\274\t\324\344<\303i\205\274\0034\006=\343\2607<\370*9<\336\331\316\275\364\237\r\275\354\334\321\274^$\177\274O\221\232=\005\t\316<\262\202\r\274{\344\354\274\347n\262<}\376\033\275\264vr=\271\342\364\274T\374\367\274-\377d;\315\270\202\274;\021P=\251\337\345<\n\264\264<\003Ss\275hI\362\274\357\217\220\275\276Z\027=\364\267@;x0\001\275\214aB\275\\\221\223\275\203p5=\351c\326=\037\245L\2750\315\256\275\272\225\267<d[\356\274\325\3640\274z\205\215\275\217\007n=\t_\237:\252Y\364;^\034\266=\376y\037=\177\311\251\274#X\336<\326?\211<p\336\203<o u:\177T\317<G\2400\275n \013\275\032o\375\273\361\007\324\275\337\365,=H\301\376\274\376\262\r:D\\\021=\377\324\272\273\231%\243=\234g\350<)V\236=/k\200=\337\021\223<>\312\007=\03275\274\300q\246<\244-\352<\337v\031=\320}\003=\r\324\016\275\362=\020\275\000\005\372;\234\010\\:\277s\372=\212\237\262\273;r\010=\000\016\263\274x\276\361\274\'\227\n\275\331\353\321\274\366>\313<\020\343\350\272zQi;\223\301\210\275\026\224\252\273\247td\274\372\227k<\346\'|=\217*\255=\205u\275<$\261\310\274\265\332\255\273\2440\215=\353\363p=-\223}\274\2659\321=\266\355\035\2751+b=\033\014\231\274\204\260\274\273q=\263\274\342:\340\272\037\036K=\200\035\323\274\204\334Q\275|\2041\2743\371\247;\316 \230<\377;\223\275\341\314<\275\345\265\244\275\272\331\212\275\006g\217=C\202\031=\355\336\370<\2040\255\2734\025\n\273-\023.\275\332\326\360\274F\245I=u\212\212<a\365{<\303\r/=\343\214\307;\022\373\356<\376\000\320:\351\227\277\275aI\224<-\213\324=\255U\030=b\247\301\273\3651\024=9\220\324;\327\237\007\275\324\227\005=\251\211\n\275\265m\357\274T\331\030\275\370\367\034=#\305\006\275r1\';A\346\272\274\370A\243;a\375l=\212\004\022=8G\r\275\227:Y=\253x*\2759\203\241<f\335+\275\363M\240\274\316*X<&\2569\275S\371\251=R\264\261<\235?Q;\352x\246\275\315W\221<\300\250\355<\264l\231<\223\256m<\270\001G\273\030o\247\274\374\020*<\032#\373\273\234Z\327<-\\\273\274,?\272\275\010\223S\275\355IP=\'\270\002\273\246\235\263;\250\373\000=\306T+\275\306C%=g\322\001=\262\024U\275f]\361\273\367\243#=\017@$\275\300\373\271;\351\255J\275\237\270o\271\377\\\274;\273F\245=\230\352\226=_%\201\275\025\221\206=\026\014\214=yH\206;\276\207\362=\201\006\000\274\205T`;\037\026^=\251\322\324\274\347\363c\274Y\016\204;\177\302\216\275\000\264\310\274\275\010t\275\264\013\204\275J\230(\275\315\360\203=\230\003\352<\013\316\2359\036L\004\275\364\222\325<Y\341\371\274\317R2=E\366\001\274\356\014h\275h2X=hIl<Ls\t\275\301/\317\275\366Wi\275MQr=\257\331\030=\211\234\236<@\n\024\275\273\272N<\366\203@=f\213\267:.\362q=\256\326a\275\330\036\243=\207G{\275\372\273d<\353\354\226<\307}i=8z\325\273\316\262\203<\016;\277=\005/\006=\357];\275\361\342\234=~ct=U\202D\275W\326\037\275\277\343A\274\244\217\365\273\334\263\006\275\037\254\003\275FM)\275Z\264\217=\342\\^= \334\217;\356\367L\274\360q-=\325\321\013<\334\245`\274\205\3547\274 \353>=I_\376<\350\231\227=W-H=qN)\275GZ\304<\371:\023=^\264\027<\311\232@=\303\372\017\275R-\211;\262~\357\274\227\345F=\341\013\251<Bi,<\367\021\337<\332@\220\275Iv\277\274\325.r;]\3401\275\345\003V=)-\355<(%5\275-\261\207=6\007<=*\241\003\275\335%\021\275\027\263\367\274\3027\321\274^ N;\260\n8\275r\0360;7\302\340\273\207\272\271\274k\305\246<\377\262\344\273>|\273=\256\332\036\275\000{\265\273U\014\202<\261/p\275\337\357\r\275MK\r\275\234\234\263;JZ~<8\220\256<\007*a\275\365\316\016=\371<\006=]\220\333<\310L\266:rW\006=\235o\367;Z\373\020\275I\330\355<C\227\033=\231\003\275<z\345\247;[\240\000\275@\017\036\275\214PV<JH\344\275}\226N\27577K=\267\347\272<\301\320Q=X2\201\274{\341\350\274\177\r\260\275\177\247\214=7\343\311\274m\023\266\275N\340\221\274d\350\203=6a\250<\352\260\362:;\200<\273\003\217D\274\342<s\275T\0057=sSy\274\232\206O=\372+\005=\033\036\237\274c\037\026=\247v\233\275\201\230\022\275\253~\245\275w\304y\2759\365\036=\233\337\275\274\373\335\314\274j\227\231\274z\030\235=utC=\362\204\014\275c\323\221<\303\324\212\274\310~-=\255\230\261\274\241\372\325=z\321\r:ni\033\275Z\"z\275\257\245w;\256\253C=\244\225_\274\":\232\275\372\030\201=K\276\246\275\342\322\004=\327\'\241=@\323Q=\271\270X=\302O+=c\303\327\274cb\330<\236\256\027\273-\375C=\332\007\'=\333\271\216\273\031\216!\275\013\3648\275g>\007=\006H\033=6\320\r\275\203\312\334\274\262\375\366\275\301\273\373\272D\264^\275\0009\277\2741\252\342\274m\310<\274\355Y\230\273\263\240\034=\325=d=\221h\362\274-\356\235\273\252\304>=\254\362*=N\023\254<\006\2724=\241\276y\275Q\030w=F\213\027<H\216]\274<\211\252\275q\244\230\274\200\261 =\345\205$<\373\361M\275\331.\036\275\271L\303\274H#I<,\354/\275\331z\360\274\362`\325<:O\367\273C\355\335\274\033yK=9\371\t=\024\310\303<\304\377\035=t\000\013\273kx\255\274\363\232(\275\345\n\016<k-\233=\304\r\202=\210\331f=\2504\276\2744\266\315<;\241\013=Y\002\371;\3251W\275\003u\005\275\337z><\020m\035=CV\004=\266\262\034\275\366\t\302\274.`6=\210\037\371<\204\314 <\222A@=\00193=[^\325<\257\005\272=\317\243\361<}\257\355\274\255\206Z\275\0100\354=i6(\274\277\t\213<H\3469=\364\031\231\275\366p\246\275\021\321\312\274\374\013\200\275\357>\023\275\302#\342<m\215\365=#\362\255\274\277\315Q\274\325\224\014\274\260\222\025<N\270\365\274*\355\024\275\352~\215\275\307(\306\274t\017+\274\246y\000=I\277\030=\216Z\345\273&^\202\274Ab\203\273\264\253\034\275\t\2421;\2703/\275Y\211|\274\\\025M\275\251\327J\274Y\304_\275hm*\275\006\214\221\275\232@\"=\r\372\025>+Sz\274\326\216[=~\200I\274\021U\205=\356\327\020=#\313\235<\374\301\'\275&9,=*\257\225\274V\300\002\275>\360.<\265z\235<\215f\2049<\376\214\275\347\004\240\275\364\022H\274\352\370\010\276\345\017\246\274\010\356\014=\345\206\345\274\205b\241;<\033\303\2743\215\213=\372\016\004;\325\267\261\274\307\270\332\274\256>T<\004\2172\273>\"\342<\254\361\352\273Ns\234\275\2143\342:\274=\367;2P\000=\036L\230<\322Q\304;\323\006\336\274r.(9\376\211\320<\265i\022<W\325\023\2754\273\207<-S\266=/\003\230\275\356\324\243=\017\236\r=\r\362W<\300\205k\275r\340\337;5Iv<\343vZ=\351\314r<\026\277\312<\247\247\252\274\231\222\006=\364:x;/U>=\251\255i\275^\356\005\275\245\313\222<v\367J\275\023.\235\274X\241\221\274\350\373\020\273\362_\006>@\337\226<\300\243N\274?\235J;9\206\030\274O\314\253\274\177\233\3579\\Y\005=\364\222\301:#3\021;\007\021:=Q\025\204\274w\005\312\275\207p\037=Y\231\317;\026C\325<\335\306\034<\352N6\275\313O\225\2740)\216<\006\241\\=\367\212\274<m\356m\275\331\345\244=\024\356:=\264\221m\273c\204\375<i\274\021<\"\367C\275\320\320*\274$\214%\275\237\027\004\275 A\317\275\036}p\275\013\036*=\013y\242\274\312X\224=\203\357\023\275\255\264P\275.\224\335\274l\256\216\275\310\"\274\275\256q\205\275Y\350\336<\r\233D;\277\226\036<GOF=\313\204\206<n\356\007=\341`\206\275\003\240\265\275$\333U;[\234\341<R\256\355\274\337\265\022<\336\344k=,\234\203\274\207\260\277<\347\274O;\272\254\025\274\240\304\327:\333\307\230=#+\355\274>\244#=8*\224\275c\013\020=\237*Q=\023\2411\275\267\316O\275\037\207\231\274\262\251\222;\372\314`<A\237\271\274\023\002\312\274\376\025\327;\351\253\371<\"G\225<\232.\263\275\215\353)=\266oQ=\352\274&=\332\256c\275\020\237\241=\311\024\211=\276\250\275; u\250\274>X\263:\003\332>=\235&=\275\343P^\275\367\322\251<\221/}=\326q\025;\327\177\014\273\317\347\220<d`\240;\303\372\247=H\232\035=KdB=\213$\007\275\035\342\233\275\301\013\"<\274\250i\275\351O\276=tX\246<\307L2=\360\2411\275\377\357\264<\364$ =\304\004\006\275\241\224\264\273\343\"\n9\300Oi;$\375@=\016Y.\275\264k\006\275\t\357\r<\364\307\021=\300\237}\275\210\347\266\275F\255-=\216\322\224\274\023\226 <d\003w\275\033}&\274t\272\260\274\365OZ=\243\334|=\316Le<\034,\314=S\213E\275\353\002\270<\300.5\275\212\357:\275\370\325\027=\022\364s=@3B=\310h]\275\013v\227\274&\247\2449\300\377\246\274\331m\324\275\316\331V\275T\376\342\274\227nU<0\377l\273E5d=\233\016\212=\206\264\210=2A\371\273\001\341O=\260K\013=\016v\035\274u\221\306<2\240\337\273\302\203\237\272\tG\t<\255\235\202\274\364a\017\275\265@^=\\\230\226=\177\234\333\274x\026h=\247\177\020\275<\034c=\270\250x<l\247\307\274\234\002\371\274\372\343W< \322d<*F1\275s|\235<\245\3674\273\311\272\241\275\353\0352\275\353=p\275\350\361\261\274\341\001\225\275A\215\206<k\014H=\220/\330<\310W0<$\261\370\2745f\014=\220\243\355<*t9=h\033\021\275xLA\275\210\274\216=Mf\\=\203\222\275<\246\207\266<\250\003\024\274\204\205\274;\245\250\035=\202\322\304\274\326\336\004=t\017\031=gP\342\272\033\342*=|\r\366\274z\3129=\347\307\200\275\334\014I=\330\300\234;\016\250G\275\273{\334;\2563\262\274\257=\275<\275I\364\274\332\263\r\275-\236\207\274\024@\321\275\323:\350\274\215\',=\216\023s=,g\234\275\315\221\226=A\257Y;`FV\272#\034\215\275\257\272_\273\312\370\353\274\342\220!\274\026?\r=\302\367\367;\227\305<=\204M\332\275\306D\230\275\034\014*<\3431\253<C\007A<\364\323\"\274 ^\313<\331W\214\275\251\300\014\274\311\203\220\274T\035\374<\004\262\265\274\310\004o\274\345\346\240=\345\000:\2746\245\027\274\253\010\007=\271\360\007\275\0342\264\273\313|$=\207\206\221\274\037A\275\274UG\037=\327\337\233\274\314\326\273;\352\242\006=O\315\241\275M\\\033<\01668\273 91\273\025\354\221=)H\226\273\216\306j\275;R\245\274s\366\272=\217rB=Ja?=A_\001\275v\016\262\275\301\037T\275\353\233\301\274\215\333\242<\366?\020>\256\321\030<]L\252\274\373/\346<\217\363\207\274O\025A=\246]\024<$\314K\275\241\036G=\327dR:j\223\304=\024\317d\275\3768P\2749@\027\274\236b\353\273\236\202\253\273@\357\320\274n\3331\275Wq?\275dS\027=\266\0079=6\0076\274\344\232\327<\213\217\264=\017\021D<\013\0208\275r0\236=T\002\n=\306\325\250\275\354\263\230<KQ\234\274YzQ\274\257\272\357\273\233\013\216\275s:W\27573\214\274\260\017u<|\273\\\275\210\324\210;\263\025\277<\305-\007=\336\351\273<\307\255m\274\310\256\366\274\251%\216\274\344\214\317\275>\316\323\273cR\371\273^\250\274\2739%z=\025w\337\275\272\245\016=?\322\202=$\037\210\275\366s\230=\271\327\201=\312\345U=#\217\t=\337\237\206\275\006X\313\273C\370\220<\026}6\273\311\210\235\275w\271\233<\rP(\275t\300\375<2[\212\274e\207\345\274\000\326\245\274\330F\364\273jeu=\232\t\010\274{\327\312<\333]p;\236B\316\275N\210\274\273\222\030M=#\234\005=\344_D<\365\215\210<&\022f;]\013\317\274\242C\224<\341)\200\275t\204\035=\230W\260\275{\336<<\322\336\301\275\377=V=\347\276,=\"o5=\303+\201=\037\346m\275t\274\260<\231J\314<\220\201z\274\330\003#\275ii\323\273i\365\231;@\014\327\274\250h\321<4%\023=\274\267\341<&\236\"=\211-\276=\273\225\221=a \004=\315\347\016\273Z\362\222=+\371\211=a\372\030\274\322\244\005\275M\356\276=y\nk=\333\260\276=\243\326\240<H\222\244;\317\235\037=o\350\210;5\337\2638E\366\t\275s\3555\275My\235\273~\224i=\213\025\307<\340\226\243<\013\267e\273O6$\274\255\022Z\273\\\346\272\274)\315\361:\360\025\007\275\347 L;\221\254\216<\356\302\224<\030)\256<\240\344\305<\212\360+\273d\341\200=l\033|\274\006\241\256<\251\3033\275\315\301\000=\364\345\312<\200C]=\312\312\246=~\001\037\275\333\371\333\274S\212\230\275x\213\252=\255S7\275\327QR\275H$Z\274\311\361m=\305*\007\275\276\353 =\025\001\304\274S\224\271==\376\256\275P\017\266\274T\331h\275\311\000\245\27409q\275K\360p<\371%\311\273@\212\020\275\034\2378;\264\005\017<?[\262=\036\277\312\275\003\227\026\275\361\204\257\275\273\t|<#\225\022\275\222d\215=L&\336\274\333?S\273c\375\004=\2436\233\275J.\305\274P\260\332\274\255w{\273j\312\004=\002\331K=\027#\r\275\0208<=\242\270^\275j\177\223\274\267\t\201<q\023\232=\256\272\004\274\013\237\005\274Y\363D=\203\203\300\274\t&\243<B\240C=\375\023\251\274\025\223-\275\210[\212\274\251(==\037p\206<A\001J8Pb\204\275\341\251+<m\'\016;\266\345Q=\364\244\227<\325\302\023\275\212\305==\225.\316:\026\374~\274\254\234l=\264\3026\274\220\320v;{\016|\275\000\367\302;mR\346<\200]B\275\024i\211\275n\\\354;\020\213\t;&\001!\275^\362M;\272u\321\273G\242\240\273\261\262-;GZo\274V\311\022\275\231\274\333\274\325\356\242\275\3066\025\274u_\220:\017\353o\275c\272\222=\000w\243=\021\332\232<J\230\247<@D\376<\276\360\200\275\266\036\300<N\345[\274\362\204\256=\355\037q=\376\267\034\274\021\312\034\274\032\277\310<\252T\";W\3023:S\035_=\234\376$=\340=\215<\t\036\035;\035h\'\275\344\337\232\274\262\007i=\251\322\013\274aXp\275-Al\275\365\2572\275\361jy<\370\327\232<^F \274Bu\030\275\215w\006=\242o\251<|\212\210\275\322\2229=\232\'\035\275\022\236\035\2741\327\000;\251\034\326\274N\245#\274\331\300q\273VU9\273}tB\275\3466\376<\223O\322;\215f\374\274B\235\025\274,\367d=\037\310\230=\201\367\013=\3526\270<\305%\200\275\245&\211\275\n\317\326\274\362DC\275YJ\374;\351\327\034=\205f\033\275\035+\234\274\341\350\273=\221\230~\274\350R\253=\005\261\236=\311\306\004=\\\222C=\360O\347\274\224S\330\273A\257\246;\223w-<\213\302\301\274\277T:=\352\316\236:\264\206D\275\017\335\236\274G\332\347\275\024\240u;3\373\263=\320\242%=a\250z;\007\331\202\2752\016\2319~4\325\274\265A1<w\245!<\025\330h=D\310\223<\366n\316\2746\233\034=\215\224\221\274\274m\341<\331\017\200\275\313+\262\275R\205\236\273g\354;=\205\212\347<\275A\360;i\n\334;\0218\t\274\302\211d<\241v8;Sp\250<Q\227P<\223N\310\274\335+\243=$vp=\317\" \275\241]|:\316\'\265\274 \252;=\334\3044=\225y\007=l\017\365;\243\374\313\273\3250\230\274H\"\255\274\351\337\005<r\030`\274\356\020\247=\366{ \275\304\233\207=\236\357-\275\272\242\034\273\204\226\344\274)l:<\364\255s\274\330\001o\274\"F\347\275\026U\t\275D\244\r\275%\214\223\275Psp=Q@\246=\256\020\300\274il\261\272?vg<_\234\211=\302\252\340<C4}\273\014*P<\nUg\275R\215A\275=6\326\274\241l\266;B\202E\273.\007<\274\207H\006=Po:=\227\264\361;\266M\037=\275\026\214\275\252\0322\275\210\277\362\274\354\326Z\275\263F\220=\243\244\236=\345ps<\224>\004=\326\200\235=\361\261W\274F\035\037\275\026}\337=\025;\034\274\362v\215<\250q<<Ts\270=>9\221\275\211 \202<\361Kc\275\350O\331<R\252\351\274\336\344E\272\243\005\210=5\033\221=\260\364\261<\331\372\253\274`F\037=*\321c=I\335X\274l\320\r<\215$\350<\276\2272<\317w\200\275\035\330[<\301\242v=\313\266&\275\337\010\237\273n4R<\300\316X\275\260#\212<?\257\234\274\313\242\353\274\353\003\372<\226\344\266<:\256\204=wN\022\275\327,\264<;\350\034\274/!\204\273\3063\232=\205\377L\273\363K\031=Q\265\306=\020\0322=;\307\203=}4\033\274kv\031\275F\036n\274\t\351\036=\001\016V=\362P\222<A$K<\267\321\327\275\341\260\274\274=u\263=\225\023W=\377\205\236<\237\233\246\275;\245\226\275\342\203\000=\253\306\336<\032\203p=T\366\350<\177\023\247;*j\240\275H\177R\274\323M\313\274\377\236{\275\275i\375\273\303\3112=N\354Z=\334ZS=\225\211U\275\023\230\205=@\223\275<\327\330\n\274|`\013=,hB\274!|\010\275R\340\025\274FJ\265\275A/\213=\256,\240\274\327.#\275\345\3356\274\363\276J9\376\305A=y%\272=\312s\251\273J&\003\275L\236M;\036{b\275\227\350\347\273d4\302<\251\004\250\273\337\010\376<\262\232\363<8\204\001\275`B\362\273#\361\036\275\367\023\322<E\322g\275\244\202W\275>A\254\275\005\3205;\234@t=\223O\227<\304\034&=,\202\223=\216\215o\273I\016\013\274K\246\033\275\036\321\037=\251\032_\275\236_\004\275d\346\217\275}\003\256\275<X\226=\267u\310\273t7\246\275\034%\215\275\024\252\241\273\r]V\275\277=\276\274.A\207\275 \207\245=\263\211d<\362P&\275\336\254\t=B\266W\275\263\331|;E\332\316<\247`\254\275\026\177|=\315\014\263=H!\273=\275dG=~QN<\256\312&<\337\243*\275\261\315\345;\372\317\211=\353t\000<\264\373\360<`\013\223\275\301\301\236<\301\037\332\274\372\234q\274\345\203\223=e@\250=\233[E\275\004\035k\275\317\211\000=\331-\266\274X\024\025\274\307\217\312\274.$H;\322\307\005=W\316\201<\323\341\006=\037Qy\275Yf\231<\230\'\204=lB\267<\257T\316=\217I\274<cj\337\274\222\tC<\361^6=\235n\026<U\250\n=\252\355\246\275\247\355\252\274\001\362\177<\331pg\2731\334;\275\361\233\201=\304%h=\374\302!=1\221\331\274,\247\245<\241~b<\013D\256\274tZ#\2769\n5\274}5\n<\243\316\330<\255f\216\275\242\261\343\274\324\224)9\212\215\235=\371\253\211\274T\224\302=S\271W\275\032\264#\275\252\006S\274\221\037\252=\245#|\273\264\201\266<\334\306\323\274\267\212 =\221MD\275\376\324B<\261t\255<\321B\031=\223\353\211<j\275\034=\242\344\014\275\004\201I=p\nQ\275u\036=;cu\325\274\265T\261\274-\230\255<K\356Y=B\023\013=]\323\255\273wvD\274R\227\302=\265!\016\274\341=\227\274\323K&\275\002\231\204<d\304K=\234\222$\275.\306\250\274\021\345\271<\227\232\222\275\275!\334\274\351C\001=\234G\007\275\217\357p=\340\252\230\274\033Tb=5!\354\274;i\237\274\177\276%\275\034\355\025\275\315Vv<\374X\246<{\320|=~p9\275\247\302\037=\t\324\304\274\246|\325<\300\376;\275\022\021\245\274\230\275\221<\371\330\377\274\252B\257\274\266\t\201=\004kI\275\'6u\275\262f\201\275\210\216\350<%\362\013=JR\356<\251Y\326<P\335\356\2745\316\224=\013\355\024\2766&\006<\361\275|\275\223\266\303\274.\243c;C\377_\275\0136f\273\237\325\017\275\360>\320<\334O\215=\202$\030\273\260\003\271<\000\\\364\2746\353T\275\214KP\274\255\272}=\370\3600=@\322\271;!\005\272=hM\217\274=\007d=\330j\200\275\0225\204=\000\2109\275lL\352\273d\327\374<\326*,=\356\002\037\274\017\304b=\274g\310=\332S\206\275x\3319=\024U\230=\336\036\360<\205\t1;\336yv\275\325\023\247<s\376\231\274:H\260\273D\341\224\275\005\257\247<\320\307\177\275\365\267\251\274E1O=\026\235\207=Q\345\334;9A\235<\374x\306<q&\330\274\225_;=D\247 =l\264}=\337\256?\275\365P\275=\022\253?\274\350\223(\275\213\332e\274\211.{\275z\253Q\275\245\257#=\253\032\353<\251\0178<\203\244\240=3\330~\275\264O\021\275&hC;p$$=*\257\203\275W\250\361\274 \272\264\274\220\206\341<\312L\177==\324\201\274b\237\251\273\005H-=yT$\275\336\007\363\274.\014\324<^\211\200\275\3257\327\274\036\213f=\026\201D\275Xj1\274q\001\242\273<\242Q=\355G\003\274`2\276\274k:\221=b\233\237\272\300L\374;\321\244\017=K\241b\273E\217\342\275\266\321<=\332\254\377\272sv\204=\027(\330<\364X\014\275\336\215\212\275\275\301\241<\0232\256\274\236.\217\275\317\000\212<\n\'&=\367\200\223\274\000\243x=\017\014|\274U>b<,\234\227;K1\326<\316\212/=\327\035J=\020h\261<6\305\302\274\264\271\346\274ZZ\226<\253\315~;\026\001\014\275\327/\204=j\263\023=\326\004B\273\027c\237=\321\024^\275\366\002\035\275U~\241\274\204\022\366<\371\342B=a\376\334\274\376\354\302<\273|\255=#\201\214\275\341\307\006\275\271\002\232=\203\177\036=\220b\004\274M\2114\275n\311\306:\250\366\255=\202n\013\275\177\204\243\275\nK\264<\350&!<\021\317\217\272\262\304>\274\202z\025\275\224#\366=\225(\024\274\177\035a\275[B\333\274\276\325\323;G\354\201=\273\177)\275\311[R\274\277\000\271=\232o\271\274\257\007\000\275\355X\310\275\2502\315:\242\\\244\275\207d\020=\024\356]\2745\372\031=\0109\264\2753z\006\275m\237?\2751\250\303\274\274\212d;N,6\275\370\020>\275=C\221;\262\227F\275\021\022Y\274U\356\033\275\276hT=\t\236\233=\245\201\211\274\3321?\275+\243\r\275\000\222\310<\210\260$=\253\267\250<\036mC\274\322\373\"\275\362\203\346<\363\303\032<\326\363,;\206\030\243\275\320\324\024\275^\335\243\275\310\003\210=Gv\237\275\301\'\317:m\360S\275\177\372,=\335\340\230\274\363\231\243<lF\217\275\342 \366<\227\266\243\275\317\007q=\352\222\367\274!\362k\275\362\241h=(\261\005=\345\230%\275\271\366\256=\235\267\231\273E\205-=\033\211!=\3426\265;E\237\010\275~\356\241<\343\227\021=\322P*\275\347*\212=\321\202\230:P\250\034\275\301\233\347\273\255O\235\274\316v?\275.Ut;\237\310\020=_\004\332\274\263\274D=\034\035\266<\352>\224\274\215\304\371<`\n;<\237M\017=\342\030\323\275TC\257<\323(\261=K6\253\275;_0=\263\221!=\356\3360<o:\372<=\203Y=\330\037{=\235\210 \274\365\310\031=w\230I\275X\212^;i!\272<\323\205\031=\033`\230=\3525%\275\001\324L\275A\205\205=\327\250\211\275{\220\314\274\005\353\206=\272T\017=\222\373-=3\005\370<\264\241\362<\025\323I<\217\333j=\323.?<7\370:\275\220\027v\275@\003`<q\352U\274\366~2\274\362+\322=\016\351e\275\362YE\274nr\352\274\260\252Y<*\307\203=\225:<\275\007\031\244<iC\005\275\365\363\232<\342\205\304<I\030<\275\210\331w;+\226a=P\375\000<\272 2\275\024V\245=\251\351a=5\024d=\336<\026=\224W\205=\236\032k=^\035\266\274Z\361\027=\366Q^=\345[D<\215\304R=z\337\330\273\332\374C\274cI\375<\350\334\"\275\257(\007\274=\300^\275\001Q\002\275\374u\036=\031l\235\275?!\256;\322\376\270\275\006\203u\274\003\315\271<.\337y\274w\351\311\274\302\213B<\224\201\017\275\216\253\020\274\201\237\336\274=\206\036\274\356\020Y\273\3102k\273\223\312q<\336\006\356<Rn\202\274}v\202<\207j\225=e\310d\274\014\323D\275\026I*\275\263\2322=\206\316\316;\";\035=\341\252\025=o\036\036<\234\013=\274\213\017\370<\303(\344\274>\277\200=!Qg=w\367\004\276I\260N=x\035\355\274\320J\035\275\'*\223<\014J \275\326d\371\274\000lJ\274\252g\202<\360\226\257<X\344\366;\357\337\345;v<E=`\355\264;\037\355\330\274\344\227\014\275\271\2663<\014&\023\275\313\n\337;W\036\214=v\027\273=\007!\'\274\304\213\377\274\265\357E<\027 \035<\271\307N=\221\266b\275x\r\002=\202\034\302\275\311\303\227\275\t\245\375;\244\340\027\273\231\301[=xm%;q\251\336\274\025\357\306\273\334{\200=\312k\213\275\005\026\250<s\023\252<\323@D\275#/\241=\220%\375<-Z\"\275\225\261\254\275\246@D=\330\377h:\341Im<\007\203\"\2751\347\205=\350\216\251=\261\026\264;\334e\212\273\267\337R<\220D\240<6\274)=UF\333\273\357\021\323\2743n\276=\001\312\236\275\214f\263<\272\253\247\274\263\266~\275X\020\206<m\201\313=\320\233\204\275\003_,\275y\325u=\200\037\342;\305FW\274\303\371\234<\210\364\023=\207F\253\274p\007F\275\343=\261\275\002\207\221\274,\r\n=\233{\304\274.\217\302<\327\361l\274V\033\357\274\306\267A=\355W\216\274\014$\276\274\223\271!=S\347\211\274.\205\255=\376\210\342\274\001g\354\274d\267\264\274a{\347\273.\2014;\266\025]<\023e\315;d\332\'<\033#\210;\"\235\344;\256\2432=\262K\035=\3270\365\274%\331\200\274\245\311\r=\013.\177\275\036\317\224\275\275\220\022=l\010\276\2759\031^\275\224\0043=\352\305N<\273b*:\362n\001=\351:\250=\302q\256=\2468\244=\220\016\001=Q\261\010\273\001p\257<\323k]=\370n\'\275(\353\236\272\301\322\244<\362}\031<\374D\271=x\2516\275\2256\\<\206\031\222<\364\347\322<\034\340p\275\033\360J<\346A\242\274m\3063\273\005\3342\275\263\203G\274\261jT\275\222\226\205\275\370&1=\005\341\324;b-i\275\307\253\256\274\3018n<!Q(=\243^\302<\031\324\214\275\243\303k\275\031\004W<(;\204\274\355\315\335\274\272\350\223<\2427\376<\305\365\037\272\266\027\275;\201\317?<\005=\211\275\020K\246\274\333\234\241\274P\310R=\024h\331<\231\'D\274l\343\014\275\355a\302\275\203\207Y<\333\023\024\275\3615\342<\211\273\3439\251\320h\275y\207\346;n\006\005=Q\345,\275\"e\252\275I\\\005\275\t#\000=\370\331\001=\027V\001\275\014#V\275\316\326\356<\034\204\250<~\353\302\274{\'<<\246\234\250\275\001+\222\274\275\001\253;B\260P<;<\202\273\256\224\341:X\333\231=\244\347\251=\213Jw\275\336q\204\275t\242\275=!\036\324=\270\\\203\273\310K\013<\025\253`\275\\Df=m0\370<.Jh;\n\024>=\021\213Z\274\3074t\272J\023\"\275\357\227\022=f\210\224<\020\245\223\275\200\233R\275%\377\r\275\300a\205<\255\020w\274\352@\202<\251\371\017\274.dq=xO\201\275\266\252\253;pk\034<\330t\223\275\325+a\274\0208\004=\256\276\224<\006@R\275\003\265\250=\244\350\013\274\037\376\024=-Ze\275\225\371r=_\234o<]Tn\274d\375p\275\361`z=\241\265f\274.\374k=\304\025.=:\311[=\211\313I=\263\262%=2.\213=\375\'~\275j\337\226=\225\'\271<un\226=\262\250\030\274\375[_<\341\324\210<\210o\217<\315\342\023\275\020\216y\275F\0201<\363\356\316\273\277_\177\274\300\355\214\275\001\324#\275^\264\302\275_<\004\275\237`!=_[\320\275xk\032=\377+\000\275\256\302\005\274%k\322<za\004\275 \301\\<\372\244\312<\320\265\311\275\315I\231\275\360\3374=L=X=\361J\236\275]M\214\273\331=\205=r\212T;4\222p\275!\351\271<n\247\027\274@\353\247\274\224#\202\274%\344\250\275\312\206\201=_,\360\274\254,K=6\r\257\274i\235\013\275f\213\360<(\303q\275\305;;\275\337+(\275\277\016\236=\362rA\274\267\327\014=\235c\305\274\337%\234\274\372\265W\274*\022\026\275\024\023J\275\035l\332\275\252\257|\275\021\363e\275\274\222\031=\304\370P<b6\231;\017h\326\274\234\331A=\263\034b=^tv=\363&\256<94M\275\242\376F\275C\200+\275I\024\312<Y\226\273\274\337\324e=\262\352\301\273\273\217\205<\376\035\337\274\247y\361\274\256\206#=\260}\212;\202T\016<%\355\230=\203z6\275ch\256\274\364H8=nuj\274\352*r=\177-?\275\213.\227\274\364\265\350\274o\227%:u\255\263<\355\010\226\274\343\252-<\351\235\366;\243\341\242=o\030?\274\262\205\014=\031\346\314\274u \255\275\031\013\344\275dD8\275\232\365&=b\307D=\020\336\255<\201\201\337\272\230\341d\274\351\003\r=\tz\342\274^\026\253\275\001<\245\274*\241\365\274\372\212G=u\375\"\275\257\216u=Y\302p;\323\260_<f\222\017\275V\024@\275[r\321;\006~S<\262\370T\274\270\234G\272\355^\t\274\321\245\230\274\\u\302\274q\253\301\275\344N\203<1\376)\275\241\357s\274\2616\177<:\016\241\275\315|-\270\304M\010\275/\3107\2750\342@\274\324\365\'=\213\r\026<)\244\n<\344\225b=\216[\253=\026\277y\275Wl\253<5\227r<+\232\206\274\305\300\203\275Y\220\375<\203I\013=\255 \023=\204g\270\2721d\200\275&\331\216=\371\231\311<K\023A=\304\325\216\275s?\244\275\254:0=\251\206\006=\245\007\323;O\323X=k\017]\275\256A\030=\037n\327\273x[\211\275\237`Z=\245zo\275\212\345\357<\376]\210\274\001\222\n\274\0311\036=\0031\270=\376o\247=\216w:\275\372\342\342\273t\266\321\275\373-\014=\226\020\335\273yPL\275\257Xi\2725&\t\275\237\0352\275\374\2076\275\351\031\312;\334a\212\275D\245\013\274\311\220\002=\313\250\234\274\t\351\026=\nmO=\024\\\000=-\222[<]\367\271<\2329\030\274\306\005I=T\367\020<\207cA\2758\010\243<\237\223\002\275\373\356\261<\236\222\222\275\221\226S=\313|\313\273\353g\237<,\210\214\274C\237\300=\377\005!=\301\3316\275\346\340\221\273\304\202\223\274Hh\227\274\036\211?\274\262\216\226<O\340\265\274Z\002\245\275\031k-<\257\240\n\275<8\210\275\357\321<\275\211`\244\275\026\321\255\274E\316/=F\030\342<\266\"\330<\246\346\307\274\231\216\t\275_\267\021\275\270C\000\275Z_\024\275\007\207\250\275\263\305\346\274\364`\177=\364.+\274\202\350\316<x\327\254;?\301\222;s\205B=s\205#=\305G\250\275\243/\373<\326\365\315;l\232\335:\3305\000\275\263K\024\275D\035\014\275\035%\277\275\223l\275\274\344Ng\274\355_\370\275S]\\\275\321\020Y=\325\336\014=\263S\004=\360\333\026\275\310\351$\275\005\371T\275\207\3368=l$\226\274\302\n\034=:\343}=\362\250}\275\272W\007=\304\360\r\272h\270.=tZ\221=A\307\220\271\216D\263<N+7=\247\231\201=\377\320\014=0}\036<tH!=Y``=\242\234\013\275]\266\317\274|)]\274-\207\r=\tX/\274\\v\225\274\270\257\203\275\177\215\333\274b\266h\273\302G\201;l`)\275=\264\340;\217\237\n<>\037\255<\362[Q\275\300\367\337\274M\317\240=\200s\366<\310\366\331\274\010\236\232\273`<e=\304T\n<\240IP=\004\236z\275\330ed\273GE\206=K\310\376\274\246z\242\274\004\322\270\275\327\321\226=\274\n\355:\266\270\340<\227~2\275\037}9<X@\001\274 \244\267\274-\252\316\274P\374>\275\312\370\253\275\r\301c<d\333T\275I\336\264\274\0138\337;\364u\r\275\207\3744=\013~\200\274\241}\201\275|[\243\275\236\002,\275!!S\2745zJ\274\352O\216\275\034N\235\274\361\030H=\370\2444\274A\347\334\2752\272\032\275\231\366\274<\240}\371\274\n>\325;\250\276S\273\324\222\3528\32135\272X\2128\274r\036b\275~E\277\273`\237U;\241\354\000<\"\232\347<\\k\025==/\262=\236\2037<\002\223\232=-aG=\373*\010\275\265e8\274\305K\202=sS=\273\365\370\377\274\340\352\3749 Hs\275\017\374y=,\264\034\275\374tt\275\007\356\t\274\030\201K\274\317\247}=\224\213\201\274\255\326@\275j\005\025\275z\313\002=\317\345\246<\033\373\306<\022d*\274\0179\272\274\232+\244\272\274h\265<\275\325@\275\371;\207<k\205h=A\306i\274\200\320e\274\300\022\307:\347 K=\302\363A\274h(\207\274w\322x\275\3474h\2755\027b=\334S4\275\326\206\\=\"\373\270\275[\373\221\274\267o\303\274\330:\n\274f\254F\275[!\303;\223\374\032\274\270\304o\274\337\310\247\275\324\353e=\336\006\316=\273\376)\275xf\216<\353?8=\324\017\360=\272\200\'=\376\3636=\360O\331;9\264|\274\325\207{=\353\347\033=*\226`\274\014\254`=\253\224\357;X\276\370;\261\314\001\275\357\026J\275\271\345\n=\210T$=Z\367\370<\302\254$\275\020\233\264\273z\272m\274\202\'\255=\267\254\236\273\345h\274\273\360\3371==w\240\274R\342\330\275\243]+=\256\367\343\274*2{\275 \233q\274\307\330\347\274\007\233\205=Jx\323<\010\000\204=%\025\220\275D:#\272\234D\373;\341\027\323;g\333\177\274\274k\030=\247\004\016\275\365 \344<\210x\247\275R\204\261:\246\020 \275\251\240~\275\216\210\"\275\n\354\"\2758\360:\275\\\027\2779\204\365\020\274\333\233\204=\244\017\002=G\331\321=p\302\005\275A\246\217\272R%\260\270\"+\033=Z\231D\274\321\372\256\275\326s\334\274W\256\017\275l\351>=\373&\210=\017A\275<D\340\203<\315K\003\275o\2455\274\377\246\032\275\tk\204=\032\032f<F\260T=\263\327\350\274\'9\255\274\345-\232\2722\256V\275\330\370\241=j\346\235\275Z\0142=\250G\357;\223ML\275YY\211=\021\341\231\275\322\300\021;$\261\344:N\002\201\274v\253\206\2754\230\275=\232Ki\275{\005\353;\357/\200=\301\311f<\014\262\307<&V};\221\325\3149\303\242S\274\322\271\345<\320<@\275K\326y\275Q\354\020=\324\001\246<<\271\362\274\236Bb<\215\217\347<\022\244\t\275w\253w\274\242\224\325<\352YS=\337\330;=\366\313k\275\327\276\337:\273\2655\275\035I\234\274G\203u<!\n1\274\335\253\006=vO\364<\224\213^=\314\345)\275R_\206\274\235uh<\227\372A\275#^\200<\"\317\362:R\326\270\274>\350#\275s\270\257\275\361\016\235\2751\366\247<\"\331S=\235 \013<\0309\333\273k\t\270\2743\334\031\274p\320\355\274\222\"[=*nK=\r|\231\275\003<%\275\243\326\236<nt\001<\267~C=\237e\000=E\234F\275\213e\214\275B\311\334\2739\'\216\274(k\271=f\350\251\273C*\014=\375a\035=\255\242\252<m\003\317:\302@Y\275J\303\000=]`\013\275\021\240\311\275\246U\367=\204\332\347\273\215\r\342<\3726\013\274\237\037\354\273T\212\366<\025Xo<,\256r\275*=\352;#}\341=J\302\'\273{R\253\274\002\322\t=g;\357:>s\234\275\007\232\261< \366\332\274Y\261\357<xaq\275;vA=\rt-=\340\245\300<_\306\345<\367\306s=\337\300\201=U>2\275\323\007Z\275O\304\020<\275\003\232\275\210f\022=6\037o\274\002\351\006<\332\352^\273\354\013\316<^\275\n=\020\345\301<L\271c=D\343\274\274\017\274\276<\261Qv\274\027\311\017<\356\211\024=\363\353\201<nX\037\275\264?i\275\251s\250\274C\367\231=\036\\\036=Nsq=Z\221\356<\037B\200<s/h<-\273\236\275\304\341\003\274\212_7=\233\304\373<\260\315\376<\361\371\005\274^\024t<\206|\316\274\270\262\024\275\251\316:\275\226!C=\243\263\215\274\024\231\307\274^\364\210\275P%\345\274\270\2641\275\213\267\032\275\305XF\275\225\275\346\274k\244\365<\207gK\274\007\374K\274X\2138=\'3\351\274\315H\020\275*\331_<\372\210=\274\362\017h\275P?)\275\212\247\321=\232\267\330<\315\275u\2743}\\:8\0316=u\305\270\273\273\263==\025\330\001\276K\330\340\275\315\337\225:\265\303\023\275\274\023\336<\271\205\004>\002\"\025=\r\316\303\275[\233\000\273\\\237\260\275y7o<\375P(=\252\305\316\273M\307\331<P\277\021\274#\005\025<,\257\361\275=\345\274\273\30074=k5C\273\000\340\323\274\335V\034\275\036\204\343;w\371\215=B\310\010\275\'\277\260<\377p\005\273\363\360\032=c\204m=\010\250o\275\364V\262<E\026^\274B\375\202<PE\331<\361\030\340\274\262\213\331\274\001\236\026=\367v\006=\356\013\022=t\\\236=\322W<<\273?\254<\257\356\022\275 \246%=\010\314\277;\r#\243\275\303}\276\275,L\024\275\\\261d\275D\273*<V\177\246\275\356\316\2239\223\303\327\2745\263\232\275qoQ\275\"\312@<T\367\017\274\007n\277;\017~n<\260\242x=\240dP\275\335\356s=\217\245\351\274uM0;l\003\034\275Y\260\333\274\032\242\001<\264t\215=\'&\220\273!\332\004<{\320\021\275 \267\231\274\231\234O\274\367\007\330<\217\213\261\274\360\203\022<f\006v=\314, \274z\335\364<.yw=\257\246e=2\223x<\201\256\243\275\213P\010\275\235\177\031=ma/<\363\212.=\227V7<\027c\302=L\225\005<4\0145=\216\2155\272\325\267/<\tH\334<t\027R\273\356IM=\256T\343<D?\255\274\353\267_\275>\354e\275\344uW\274\326\230\201\275\277\243\343;C\372\022\274dq\272\274<3X=H\330q<\267\314o\275\247:\263\272\247k\320\275\024e =E\202\364\274\017w\313<N\361\272\274\311\317\246=F\304\t\275Pr(\274\251$\t=\031BA<\351`\t<\014\271\366\274\336\230\324;\346\316\002<Q\367\364:\323\322c=\233\256$\275t/l\275Hb\316<)Z\221=\2579\207\273D\221f\274\340a\t=\016\301\311<\373\037\224;\255\253P=8\263~\275\'\010\006\276\234a\201=\221V\016\275I\364\320=:\243\020\273\310\237\031=~\263\020=G\004\215=\331\235\320\275\276\332\222<#\"S\275\033\351S\275\251\217\217\275\273\226\252\274\302\311\010\275=\275_=\266nl<\231T\220;\037\372\227<\245\243\003\275\252\275&=\023\016\000=}\225\346\274o\366\t=\253\315U\275c\345\231<\035X\202=kI\366;\313W\250\274\344V\347<\020\341\303<\373\177\237<$\342\204<\277\330\227<`\256\251<\325\266\266<\366\204!=[\006W;\240]\217<\230>]=\230OL;\236\010\033=\r\226\202\274p\237\272;u\213G\2751\005C=\264\364U\275?\303\033\273\363Pf\274\225o\002\275\276J\334\274\244\252\016\273@\357O\275\262\213\007=\250\267\022=\235\207t;\345s$=g\346\271\273m\201\315\273\017\217\223;u\362*=!W\220<\004aI\275\250\361\310\2750d\204\275\306\020\t<Hq\211=h3D=\006\245\021\274L\031w=\373\344\240<\267\t\261\275%\361\250=\031>\367\274g-\271=T~4\274\226\327r\274\260\003*<\346\002\267\274X\203_\275\215\307\210\27239\207\275\014\322\212=eoc<\2767\274<\362\375\272\274\'\372\027\273\234\032D\275\361\337m<_Z\t\274\227\316\335\273B\310/=\035S{\2739w\203=\272\346E=\036<\374<^\010\364<\022M@=\373F \274%\366\r\276\246$q\275\031V@=\017\317\236<\305\352\347<\247qN\274\315\217\235=\022f@=\277\020\244\273\277\241\355;\270j\260\274\250\252\377:\375\001\377\273q\213^=2\230\026\275\037x\014=8+\247\274\374\317e=\307\274\221<\245g\017=T&\233=g\014\267;|\0312\274\360\222\t\275\220ov=\007\302\277\275\342\362\203;D\212\231\274\300:\232=\363\220.\274\217\317\314=g5\203\274\376/\351\274\256\006\276\275\271\201\370\273\033\300\n<\227E\261<\275b\316\274\002&6<\240W\246=n\020V\2752\363\252\2756\3161\275\233B0\275\031\267\230<\357g%\274j\316\323<\243\253\201=\004e\262\273\364\207\010=\033{\303:\327\002\350\274\013\235\366\272\004\200\240;k\007\203=\253?P\275\340\375\215\275\035\344\211=\227\020\004\275>j\226=\344\020\252\275\350g\007=_\337m\275\373t\372\273cC\277;\355\023w\273\243O\307\2758\3362>\276\244\205\273rYu;~\216\251=\206\207\275\275\275\022\353\274L\203\305\2743\247\035=A_)\275\202\033\237\274\002\267]\273\233W\235\275\216\230+\275\334\326\201\274\367\3720\275\331\023R\275]\367%\275\001\325\226\275\025\334\014<\0016\212=\303k\177\275\375}\313:O\246\237\273\241\343\246\275\277\336\250<\341\375\223\274`-t=I8\366\274\237\311\\<\224\333\374\274F\245F\274\201z5\275\203\340,9\207%\227\274\360(\200\274\302\346\352<J\222R\275\226\216\035\275\3510\227=\254i3\274a\243\274<\213\303\336<\275+\000\273\204[\021<\263\267\214\274T\316\001\275mn\212\274\373\031,==\263t<\365\025\203\274\313H-\2748g\311<&\372c=}13\275od\320=\373\241\214<\211\375\023\275+b4\275\265\305\032\275\257^b\274_&\264<lW&\275\371/\374\274\247\354\037\275\262xz={\273v==\264\343=\n\t\035=\352\254V\275\360U\220=\215\205\201\274\264\325\240;\205}\221=\r%,\275\272 &=\306\272\370\272\002\2401<\027@\026=\n^\202;\\\023\246\274\264\013\273=\313\016\016<\376\033\210=1/C=\347\010\221<\016\214B<\270\254m\274Z\235\236<\254\341\244<\201o\213\274\333f\304=\346\036(=\254\216\367<\344\014\354\275\006@~<\321*\306\2747\324\t\2752\235\206\275\216p\221=\373\367\313\275\253\017/\275b\020\217=\036y\231<\027\003X\274%\266\352\274\276$4\275\317%\204<\275\013\202<\275\014\226=\221\001\310<\366\263\211\273\264\276%=\340kw\274u\374\202\274\306\256\027\273~}&=\0346?= \215!\275\373\"\214<\305\n9=R\314&\275i*\235\274B\241)=\211z\312<\016\364\030=@\005\204=\031\037\372\274R\024\027\275\233\003\333<S>\034\274\300Y\267\274\036\235\266\274\305\260L=\317O6<\\3,\275\304Jr\275qO\220<e\246\332=\336\267\236\275,\254\330<\373\222\024=\321(z\275\253\362r<\336\'\005=e\247r=Y\203\025=w!9\275\302\247\233<k~\256<\016\311\214<z4n=\351\0337=\317\355\325=X&\207<{\2768=\243\252\361<WF\2059c +\275Td\214\274\304\\\020\275\316\334?=[i\354\273\036\010\035<E\364\332\273\356nq\275\224\023\225<n+\300\273\351\300S=\343\222e\275vc\345\274@\016\204<X\"\250\275Q}\261<\007\362\373<\222\220<:BE\331;\306\242n;(\3757=#\314\201\275\346\224\334\274\245\267A\275\243K\264\274\335\350O=H\240\317\273\237\316\220<\324\217<\274\375\004\256\274\236\223\350=l\326q=\237\371\344<\001|\205\274L\362\264\275\346\364\371\274C\375Q=\025\305f\274\304~2\275\014BR\275,p\013;]\200\\=\365s\225=\202\277z=\275ik\275=\201\237\274\010\025\201\275\236H\261=\217\035\026=\375et\2755\223\270\274\224\214\266\273\203Pf=\027I\204=F\313n<`\355\207\274\002uu\2750\333U\275te\022\275\'\311\220<C\247\250\275H\177\330<\322\032\300\271\0252\255\274\323\362\342\274\324\223\251\275\203\206\237\273[\277<<\010\277k<\034J\300=\271\335\227\275\264\262\234=\237\232B:\326\313u=\210QX=r\261\256\275\331\274\335<\030\210<\271\t\312D=\206\"\317\274v\234\224\274\371\033,=\023\252A=d\244(\274\035\330\027\273\352M\211<\366\376\035=o\320}<\312r\322<\347N\355\272F\206\2029V x\275J\033\034<\2017^\2751\270k<$\354 =w?]\2755\352\367\274\020\343U:\333\202\345\275\324\331\264\274\323\214\254=\303K\001\275\312=2\275\023D\210=\256\236 ;\246\023\022<*\350Y;\240\372\n=\213\336\020=\020hI\272\022\034\250\273\032S[=\351\224F\275OR:=\r\322?=\'\360\334<=\376y\275\371k\273=\376\226\026=\300\300\217\275#qC=k\225C\274\320\327\255<\276\242\255\274\207\363x\275\361\277U\272v\327\344;\330J\021\274\270\260\262=\306dK<\214=\"\275M\362\306<\365W\222\275\350u\266\275\025\255\002\275\257\030\235<.\264\\\275\222\245f=\224M\345<:\0229<\324s\205\274\267\243\315<m\223x;\335\354\202\275\n\335)\273\213\365\316\274\254\025\\=\371\364\222<\376\031w=\370n\216<\013\351\026\275y\373D=\213\210>\274r\264\'=\303\230\\\275a\342\345\274\275\327H\274\030X\207\275\332G];\346\314\363\274#\252\026\275<\037d<)\334\212=)\004\026\275\n\352<<\203\034R=-\224Y\275\'\361\214;\356.\240\274\303\336\255<\027\205\245=f\246\305\275ZmX\275ySs\275\242<M=\277]\200\274\210\230G\2741\031\272\273h\t\326\274\177(\235<\\\335\001\2754\341p\274\333N\251\275\206\357a=\203\370@\275\326\360\253=\036~\034\275\225\225\222\274\206\377\020\275\344\327\240\274\3332\201;\353\225\355<HZK<\221[\276<\252\177\032\274\035!\330\274\3376\204=&\341l=\214\265\372\274\036\333\334=\214\332:\274[]\202<\253\000\310\275\023\234i;}\236\\\275\257\317*=\266.G=\222`/\275\231\312C\274\363\351$==\234f\275;M\226<\251\327\037\275\367\367\010\274\337s\203<\331\346\254\274\035]\346;\0055\201<^m\024<\003\\\345\273\"7 \274!\017\020\275\323\342a=\231[t<8\213:<;\226U\275\340\177\231;\270\2671\274\364\234\014\275\017\303\327\275&\355\301\274$+\304\275\027\2455=\310\213L=\270\316\217=\324\224\340\274\203\031\251\267\"\212\367\273\341\"\253<@\213\263<1\300A<\2165U\275\261~\"\275t\034#=\341S1=\216[+;\034T\376<\335\301;\275}2\010\275\340Jb=\334\236\'\274\264Tx\274\254T\351<\007\217*<\033\000\2329[\376L=\356\351m\274\370+\273\274\243{\322<t\027\350\273\246\201\212=n\2663<D\324u=\360Y;=v\016\233\274\205\240\234=#\013s\275\210Y\257\275&\321Q=\346\261/<vD\020<\347\370\005=g\375\n\274\315H\256<R\033{\2758\363\242\275\250OG\274z\333\217<\307\005\00491&g=\372| =f\333\331<\036\031a=\261G\256<\364\210\357\274I\341\250\275\024\236J=\277\r\3579\000\251 =\261y\362<\337_5=R\310\240<CTX\273\2371\303;\024\370\227;\223\275:\274\264\322\217<<F\247\271\346\377A\275jpX\274%\305\216=\232m\223\275\222\336a=\355Db\274<ki<A\257\364\274\334Lv\275\013\221C<\364\nx\274\373\266\237=\312\031\376<\334+R<\t8\216\275\327\n\037\274/\r\000\275?\374\212\275\300\207D:\257\007\263\274Q%\207=\233rW=g\361\235\2752\307U=\377\340\202=;\031\271\274#\032\226=}A\307\275x\2024\275Zg\345\273Ci\355<\315\027\341;\204\026h=\177w\006=\324\373\005\275\275\204\230=]E\035\275\330J7\275\236\365\313\275\327@\367<\032\214e=D@y<~A\242<C\021\343\274\010c\302\274\301\255\360\274\013{\225\273\261K\301<\177\207U\275#~K\273\270\037\220\274\346p;;\023\300y=\304~\207;\334`\263\275\373q\230\273\330q1<\230\325N\2758\\#\275`\235\210=6qc\274\031t\\<NZC=K\220\\\274\201\343\315\275\357\315\345\273\327\031\337<\304:{\275\355DW<\020Z\251<\025\367)=\2028F\275\251\005+\2741\331\317\275\225Lo\275\005\022\227<\025A\214\273\302\355\266<\037\037\035=a/-=\t\212\013<\250g+\273\\\244\\\275\271\n\224\2739\325*=\345\324Z\274\331\'\005=\332\365D=\261T\313=$\\\214=(\243u<j\301\210\275IL\003\275\274`\233\274\02691<v\020\n\275\021\252\033\275G\351\345<\270W\t=!5\345\273H\033\375<qt\223\274\306\341s={\235\314\274YI\256<.\367\302<\361[\244\266\331\025,\275\020\344t=\273-2\275\356<\246\274\203\'\000<J\260\177=e\3228\275\260[\232<k\033!;\006\236^\275\214\216\307=5)C=\336\2656<P\331\335=\356\304\371\272\214/\r\275\016g\231=\334\234D=\315\350\240\273\367#p=\334\t\203\274\217\227\257\273\3640\010=\323\312\235<\343\215\310\275\277Z\241<\272sQ\275-`B<G\377\315;\347\220-=\364\263}\275\350\222\212\275w\017\022=\021\016\036<\253\215\227=\024R\277=/\'\241\273\310\255Y=\016Vb\275\264$z\275\226\311\013=\231\236l<\306O\333\274\257\023\225\274d+\351\274\234:J=\366~$\274\007\362{\275\261\004\000\275\003a!<t\371\200\275\247W<\275\270\322\215\2742\026\347;\210\323\023\275\374\010\010\275n \r\273k\274 =\301V\364<2\'\206=\006\213\025\274#4\217\273\272\360\204=\003&)\275\322\233\r=/a\002>\214\0242=\265\376^=\345\350.<6\325\204\275\000X\202<\330\025\221;h\244\273\272\376\326\253\275Rg=<\272\212\376<\320\303\350\2742\375\202<`\263\200\274\203\330\321\274\211\211\346\270\200\271H\275\252\210~=\341\354z\275jPA\275\252C\222=\224\032\224\275j\226o=\222/\005\275u\030\023:TZ\315<\275\004\357;\210\344|\275&\033B=#\032\256<\266\235;=\212u\220=\"\302\027>a(|\275\330j\255\274\32217<c\337\327\274\250\375\000=\3560\351\273\367\217\r\275\323\"-<\301\324g\275\317\340m\275\035\177\344<w\ng=\tU\334\274\326\006\356<\306\007\250\275TN\243<\035\005>=\2656\254<\024\270\354\274\037\205\257\274\336I\244\275\013`<\275\261\352\026=\337\265C=/\233\202=]$\267;\322\211\304\275w9\243<(\343\267=-;_;\326-\264=\0207y=\246\311k<\212\347\001=\222A\007<\307:\300\274\321\366\001\275\310\322\342\275\262\365==}\275\177<\350\231\257=7\3261=\231\370+\275\203+\324:i<\312;\243\\\346\274\256\260$=0\025h\274\214\354\303\273\374u\001\275?\325\270\274\031\032\032\275nI\177=\204\235}=]\255R\275\004c\340\274=Jl\273\355\252\205=nKP\275\343.\005<KV\335\274\225e\217<\231\"0=\364 \200=\360J\225;\005O\243\275\276\014\232=\245\323\215<\'\3219\2756c\211\273\342\306*\275\324\024\337\273\256\334$;C\223b<@M\204\275\333\330\n\274\001\347\326\274\330\344\206<\313\363\274\274\266v\314\274\307\317\032\275A\252\032\275u\365\200\275\222\205\352<S\335\301=\257n\343\274-\357O=\347\372\216\275\217E\211\275>\212\316=\023\343\300\275T/\010\274\311\275\350\274\265\324\204;|\3335=\373mb<\263\205\037\275\304/T=\023y\001\275~D\362;qR\000\275\336\263\233<> H\275d\302\017=\030\274\231=\325\024P\275\236\2073=\224(u<CC\275\274\033\316\303\274\336\032\027<\241\303\201=JBu<\232\235@=/.\220\274\177X}\272\3623\234\275\261\210\202\275$d\211\274bX\t\274\340N(\275\'\241\245\274Q\223\214\275(\210\206\274.`@\275\362\247#=\000\024\001=\3020\t\273\203\200\254<([\262:6\251P\275\200u\356<\272d\274;v\255\031=Y\373B\275\034\342\201\274z\211\354<\250\205\033\275q;E=*j\300<.D5=\000\216d\275\000\212\231\272\201\315\303<\216B;\273\230QU=\315\221\213\273:\006\215\275\022\366\010<B\377\324\272\277\216\252<O\300K\274}Cg=\253\366\223:\310^\377<\033\nb=\257N^=\313{\355\274\002W\223<\262\255\370<\277S\177;\333\t\014=\026\017\235\274\035u\367\274\0208\035\275`3\253=\256\367\367;VQ\n=l\261H<^\2657=Z\230^\274\314\200\"<\324T\262=S\302f\275\314\371Z<\306w\311\274\344\351\247;\217\265\205=\341\2515\274\004\301\227\273\205\204\221\273\010\365\010<\276X\007=\231\347\254=k\020\277<)\236\235<\321\326\222=\034\303\257=\020\0255\275\332\357g<bH\301<\022\250m\275h\362\r=\334\024\246<\236c\216=\030\007\226=\036EO\275u\246l<\226\246\230\275\034Z>\275\3363S\275:\220\213;\267\314C=\345.\224\2758\213>\275\250h\270\274\0333\230;I\004X<\333\312\260<@\005\353\274\334~\323<\027(\377\275\217-\365<\251wi\275$\246\332;E\035s=^H\227\275\303\233\212\2742\202\340;U4|<\302~\270\275\2267\364\275\277H\036=S\303\255=\277\211\331;\367,\266=\r9\207=\031\270\031=\254f!\275*\003r=\005\233K=?]\232\274\231I\266=\353PG=\020\272.\275\247\277\250\275\005\037\260\2749(\245<o\361\343\274f\272\232\275G\233w;\375\005\024<\245kN\275\322L\203\275^\375y<-\326\336<\225\344\177\275\353\224\\9\036\367\216\274\324;\033\274\263R\t;\221\261]=1\270~<B\346\013=M\347\336<\347\271\215\275\3117\333\274U\264t=\373\330O\274\2539T=\336#\346<\254]%<\333m\356<0S}\275\242\206\333\273/\035c=\372\r\336<\204\241s<mNH=\266\367\014=\204 a<\035\231`=\024\255\302\274\210Z1\275\242\201Y=f\236<\274\267\265\014=x\346?=6X\006<\321gW<\320%\020\275\377\006\213=p\361\023\275\270\271<\275\351\335\024\275\340<><\255\220\032=k\266\274<\347U\306<V<\027<\340w\224=n\300a\275\337\333S\274\373O\245\273\000x\341;\243\322\252=[\326P=8\320e=\036\367l=D%\343\272\350\370~\274\nB\222\274\340\033Y=2\344\347=(\306P;\247S\230\273t\0075\275XX\200;\276\314\227\275g\024\207=\256\351\270\275s&V;\205\335\r\274\030\300\274;\356c\016\275\233\343/;|\370\243<\327:\273:)\033\247\275\357\007\220\275\212D[<\236\315&<\334\227E\275\304\031\353\274J\210\300<\2749\222\275KOc=\004^\013<\246\240\265=U;>\275,h\336\274\213\337/<\316\340T=\237\353\367\274\247RD=a\272\224\2746\2242<v\243\034\275b\325\256\274\230P\212<i8\245;\320\201\036={j\r\275E\317\245\274\355eA\275\274\357\243<+\241\'\274LY\344<\253\001y=\000&\006\274\303\355C\275\346\351?< \367u\274\261\304\177\274\251\357\302\274p\242\355\274H\204<<\345\365j=\374\305\203<\310O\224\274q\355 \275\305\351\037<\305\323t<\271\262\"=%N\204\274\313^\004=\231\001\026=\213$n\275I\037|\275(\234\206;\214\305\205=\3441m<\374\311R=\006\214g\271)\030\207\274\017\316_<\270\006g\275\262r\250\274\264\350\235\274\250\r/\275\202\271i=\257P\372<\331p*=\233\007\t=\300\013\257\273\237\243&;\366\366R=\252\310\177\2750\2435<\362L\242=V\207\001\275\350\373\010\275\030\321\t\275\3365\322\274\002\210\243\274+\243@<\210?\267<d\356\203<\317\205\010\274\331\215\212\274\335\003\264\273\307\201\"\274\362\223k\274\336]\370\274\033Y\236\273\223@Y\274{\2635=\302f\352\274 \340R\274\316\224.\274\262\232\025\275\320Zm\273\021\310\230\273\330;\311</V\242=\010\251\314\275\tF\025>\335\242\244\275\004z\002\275\003=\"\275\306\251\033<\001\223\216=\361\306g=\223\020\365<I@\000=\235\2632=\313\3014=L\302\243\274e\244\207\273K\357\031=\345*\232\272\256\213\004\2754\331|<\276T\250==H\000\275\026\205m;\240\3464\275\267B\032\274\261\013P\275{$\321\273&\2761\275*\227\226\275v\227\231\275\320u\242\274A\246t=\260\177\"=\333\256D=c>\273\273\013@T=\330}\351\274\302t\330\274\3663}:\372\\c\275R\265[<q\263\336:53\354\274\330\204\363<\275R\207=\364B\347\274K\270\232\275\341=\023\274,/y\273C\250\254\275\303\031\002\275\224*\211=\360\210\310\274\306K\002\275Fc\267<\201g\032\275\243[\272\274\214\347\325=\370\200\035=?\206\215\275\315}\226=\201\t*=Q\226d\27289?<\340\207\217<\271\262}\273\217\037\313\274\233\371\236\2755n~=\036\337\215\275p\005\024=k[\246:\255\361\334:\005\350\273\274I &<E%\300=\224\223\260\274\243\330\365\272*\374\215\274\356\t\016=G[\240\272\272\021\240<\253\274\240\273\304 \r>\204Zx=\\\030\365\274b\014V<P~\266;Fm\242\273A\326\020\274gn\232<\330\017m=\311l\210\2749-\356\274?\232C\274A\311q=\323zA=\333\304\256\275\202\r\253=_\n\334;\306M\t<\325\267\233<\354^\201=\243\020\200<_\356[\275\325y)\274L\337G<\373\002\003\275)xX\274\334}\270\273yvy=,\246\010\275/\274y\273\263\303\372<H\273\227\274Q\226\232=3,\222=\0323\206\275\246\310\311\275\033\327\261=Z\232h\275-\t\221;\311\244]\275\236G =\002m\366<\007%A\274!I\256\2748\346l=\375\210\275=\3059\367<\223\362T=yY;\275\003\001\005\275\237\257n=ra\225<>Y\341\274\000\320\350<[\264\237\275\010\267\257\275\222\034\204;\336\241\375;\213\253I=\377v\306<\316ca;\341\366t\273\007\t\251<\354=\275\275[\233j\275e\274P=\346\332w\274g\014\351\274p\233@\274(\373\200;7:\201<y\303\317=\305\312\250<Bo\274\274\337\264\014=\214\324Q<^\245\027\275\350b\177\275\254\025J\275\333\000\346\274\352Oe\275\267\230\351;\345\373Y<A\343\340\274\225\010\n\275h\320w\274\r\034\247;`\276\237<\263\222\037=|)\r\274A\177\016=\3463C\275\315\271\361<\263\352\275\2750GH\274\000Sl\275Az(<\363\262*=\360,r9L\021(=\246V\241\274.#4; \335\331<\376\203\213\275\232u*=\310\016M=T\210\352<\376S\314\274h\206\211\273(\333\315\275\025\224\361\274\332\r\330\274\377O\223\275\306\025\013=\002\251\026=6\031\257\275\253\tW\275\336\275\020\274d\325b\275zbP<7\247\326<i\357<=D\037\010\275\310\267X<\037\337\217\275\202/\013=V7\260<\271*\255<\275\020\235=\212)\022\275\2462!\275\233\222\220\275\242\363\223\275\023\245\215\275\025~3\275I\307\246\275\304\245\r\275\304\0350=lN\034\274r\007\206\275\21619=\202\346{<\305}.\274\357\0162<>\375#\275\240\230k=4\215\300\274q\377\247;8hB\275\026\351F=P\007\335\275\267{\211\275\354\302\232=?\033\232=\ro\207<\005\332\254\275<Ms<.\031\321\274\274:\002=LSL\275Q\014\235=\361O\021\2742o<\275\271qb\275B3\301\275\004S\246<\243N\020=\017\244\222<\232\370\251<\034G\317\274Z\246u=\213) \274\375Q\374<?\203%\274\367\241\214\275\347\010\016=\352!j=\246\020\232\273:\n\260\272\345N\256\274\220\200\230<\rLk<\356mY\274\314\235\036\275\336\342\007\275~(\361\274\237OV\273^T(\275\263\3749\2742\014\3508\376\205\025=&\211\255<1\r2=\021\360\037\274\343\013d\274;w\320\274b\214e=&;\235\275\214m9\273H8\311\274\026\202\253=\344.e\273\n\234*\275\333\336\r\275\230\0236\275\0136c\274\211\314\336<D.\242;\303\017\223=BB\211=\005\364\300<x?\226<\300,5=\261\0354=\215\255:\275c\306I\275\244_\243\275U=\021\275\010\375F<\350\377\023\275J\3218\2754C\277\274 \031\323\275)\341\351\274!~\216\274\350!\347\274\0308.\275\352l\246=\3112\217\275%,\216=\350YV=\265c\221\275\326d\023= *\233\274q\357\307;MM6=Up\207<\351\nl\274r\256K=\313`2<a\352\\\275\321\375]<\267Z\022<Yh^\275b\371=\275Ri,:\367Z\206=!\356\335\273\306)\355\274\264\350\215\274\0319\215=\305\355\361\273sM-;\210\264;\274m\320/\275\334}\034\274F\035%\275\200\366]<-\235\263<\376\254\274\274\3154\n;\017\006\241:%wA\275z\312\241\275\342m\034=W\201Y\274R9Z\275\272\246h<\t\t\364<onV<\275\350\231\273&\262H<\305\260\235\275\3419I=d\254[=z:\221\275\215\302\212\275]Ws=\356_\177\274\201]\'\275\217c\337<\253\254\245\274\306\2344=\270\264\233<\013\321I<%[\226\274V\034\271<,\357j\275\272_\257<\'V\362\274D\247\211\275\305+F\275\323\267|\274b\3242\275\247\312\251<c]A=\373\352\013=\340\274\355<\201\231\220\274GR\225\275\375\225\n=\356/\266\274\020\245;\274\013\347\n\273c\311-\274a7\354\273\310J\n=\373\242\352<\037\333U=\264 \355\274\352We=\177+\347\274,EK<\221[\231<7\033\344<QA7=\335\t\222\274s\310\225;\203R\032\275\304\025\212\274c\026\231<\026\3043<\307\210\t=\266\222\031\275\256U\326=\327li;-\367\335<\245H\256;&\025\220\274\313[\t<\331\033\307\273\241ii\273G\212\244\274\337+\025=kR;=|\312\245<p6\356<E\\\020<\037\247z\275\344\261\333\274~GB\274\342\355>=\255h\033\274\350\263\216<\252\265Q\273\201I\n=\236\305\001>\226\034\274=\244\345\030\2758\331\n\274\217\373#\275\245]O\271\304\000\226;\310kS=\210r\361\274\252^\266=A.\300=-(;\274\357\316\242<\276\0075=\314\036\210=\007G\252<\245\317\r\275\231\367\356:\367\023U<\217\024C<u\336\235\275z\267\322=\260S\372<\260\243\272<l\251{\274\203S\361<\177\0059\275\217\333\265\275\004\332\266\273\332\374\316\273\rhQ<0\255\036=\321d \275\204#\315<$\r\022\275\345.\230\275\271\000\217\274>\205\377<\025U\342;J6\205=t\341\366<\037ce=\245\014(\275\354\320\233\274Lz\021\275\3017\243=\300\313\244\274uSS=1>\246\275-(\331<\363\377\022=\232\273\353\274\276\333\371\274\326\376\222<v\265\327\274\265\206w<\374\215J\275\303\314\344\274c\254\274\274\247\205\324:3Jf=3\247\334:\234\201\376\274D\236\017\274\024|\206\275\210\250\'<\021\306S<\274[\245\274\324\2403=\300\363\247=\244\343\022<\013^\371<\\d\023\275\312Z\215<b@\177<\3544\336<\255\255\210=\307\320\024=\256\360\231\273h\236<=\216\004o=8\371\235\275\006*\321\275=\021\300<bd5\274t3{=\341\267\224=\\\334\006\274\355P/=E\001c<\220\274W=\273\300y=]\n\246\275\300\013\207\273W\333D\275\022~\030\275\020\004z<-\323\273:9\202T\275B|\356;\242P2=\213\360\314<\254\002^<\006\377\311<\032\324\020\274n\357\t\273\252\204\261<a\201\303\274H\037\313;\277H^\275\260\177\r=\375-\375\274&A\205\275-EP;\002\003b=\236\014\260<$L@\273\334*V\2753\026;\275^E\231<\345%\351=\3717a\275vv\230\274\022R~=\024#\3419\'\013M\275\225J\372;\347\016\345=\233\253\317\275\026\332G=\363Ln\275L0\225\275\216\270\253<\207Z\213=\251Z\020=\273\270\272\273u\371\206\275y\326\335;\324\002\246=\262\215A=\036\021\245<6\354\365\274b\253\374\274(\340\213\273Gz\253\274d\025\007\273\375q\005\275qb\256\275\032\002\004;.e\231\274\242k\270\2729\024\221<Tx6=\006\2750\275\341\352\200\274t\234\346\274\303\336\237<\365*\035\275,n!\274\311\324\372<\3014\337\274\006\tN\275\213\233\n\275\343\027\370<\033}\255<\375\251\235;O\205L\274n\306s\274*\265\232<\021\356\226<\331\273\307<\353~\226<\265B\330=\226\242\017\274;]\277\270\315\314\245\273\001\244\005\275\032)\306\273{9\205\273\210\257\207\275-v\376;p\277\203<<\263\243\275\252\362\246\273c\206\361:\312\334\027=fj\007\274\005\204&<\037\022\317\274\001H\006<\365\304\214=\227\275S\274\036\017\'\275\252 \014\275\370\357\276=\345:5=*\245\215\274q8\023\275\256\254\347\274FV>=\313\035\006;\223\274\004\273\253\373\250\274\353\213\261\274aU\205\275\304C\355\274\016\\\270=\201\231\004>\360\213U=_\354C\274\320\316\230\274\274:f\275\314\302\352<\007wg\275&(\005;\310<\257\275$s{=\021\rw\275\233\310\007\275\327O\202\275V\243\205\274\375{\307\274\233\017\372\274\262\316p<\303\204\t\275\303.*\275\033]6=\220\'y=\211\246\007\274\267\264K\275\243U\004=\0035\t=\246\020\366<O\370T\275\r\347\307\275&=\003<\036W?\273\312\017H\275|D\001=\3325\221\2744U_\274\201\177\245\274\014\003\221<\357R\024<\236R\001\274\270\356\343<NT\005=\013\255\361\274\204\250\005\275\305\273$\275\024vP\275P\340\207=\032\262\020\274(\323.=qD\233\274~\260\027=\322\215\276\274\334c\034\274z\231*=W\322\244\275\266\346\342\274J\225k=\2333\020=\226-0=J\264\353<^\340\311;`\0050<\333D\341<_\344\201\274\365\230~\274\304\023\233\275\026\234\207=\204\224\t=T\206\353\274^\312G<\020\010\006\273)\033\220<\332`\223<\322}\336<\362\302g\275\310\304\271=7\236\320=\210aX\275\372o\027<?}\\;(\224\201=m7\237<\006u\222\272w\204\n<\353\300\314<\260jD=Z\005\346\273\326\255\255<R\031F=]\347\226\274\2360\222\274j1[=\251\204\223\273\345\367W<\r\027z<\367\252\017\275qc\003>\376\371F\275\"j\234\273EVA=a\204!=\330Z\207=s\363\007\275\373\\C\275\330N\022<\311\021\311<\033\340\031=i \341\272\263\237\373\274\376\3644\273\3114S\274\215\310\001\275\224\244Z\275,\352\342<g8\335<;4\205=p\356\214=\255\303\222\274`\244\236\274}\305\014\275WaQ\275W-\237<VPY=@\006\324=\207gT<\"F/\275\217\334)=\252]q\274\255\301\007\275s\332\025>\006=\210\273\3459\022<?k8\275N\346m=\031$*\275\020\365\201\273R\2244\274\373\230\355<\013m\215\275\200\353A=\222G\007\274\335r\"=\177\314\214\275\364\020\026\275\212\375\242;\273\257\323<f\026\217<\323\221N=3\034\262<hY\330\274\3739\351\274\3344\010=h\031J\274\321\032\340\274d\023G=\230\302\027<\347O\362;Z$\246\273x\315B\275G\371\203\275\367\331\204\275\205\247\006=>\201\370<\314N\213=\333\333\335<+>\220=]\332\254\275\034\200l<\253S\301\273\247:\031\275XQD<`\240B\273|\360\331\274\327v\205=*\267\306\274\273\2078\275f\314\210=d\335L=\237\\t=\210n\003\275\34484=\310\355\260=c\264y\274-\265\232<\273\215l=5\371\001=\350\274\010=z#\227\273!\377\243\273Ep\320<\220\347\312=\325\210`\275\321D\254=\202Vo\275b\022\340\275\235\327D\275$T\034<\036/\365\273\213N1\275\2478w;\355A\323\274\320\366*=-\367\244<z\247\006=|\232\245\274\342\3223\275#\235\005\275U\241\214\274m\213\206\275\350P\270\275\304\362\205\275\210\367\337\274\004f\246<\226W\206;\246\376\031<\001l\016\274$\361\311;;0\333;\307\206\210\274\027\240\211\2758\032\256\275\273\033\251<3%\204\275\005\210\020=\206|R\274&\350\262\273\256\240\202<\304\'\303\272&mY=\251\216\342\275\347\242\020\275\340\273\303\275&s;=\331:?\273\2600;\273j\303\232\275\253f\337\273\321\306Z\274\034\376\004>\332N\243=\222VV\275B\177(=\237{\037=-w}\274\215 \236<\204\370\305<\320\3411;E\t\204<\236Z\254\272l\252Y=1\004\251\274\331\271\013=\341N\334<\014\222\207<\243\227\257\274\033wD=\336\257\204<\030!\310\271\323\343\343<\363\036\007=\017j\375\273\335A\246<\374\3076<\312\\,;\203\270\336<\220\264\215=\2340\031\275\010\2069\275\'\320\216=\311\215};VO\362;-\311\264\272r\326\306<O\003\315\274\022\320r=I\332==\026\231\221</\351\213\274\314]\211\273\230@Z=\334\256>\2751\340S\275@\225b\275\216$>\275@e\330<\213\315(\275\304\336\300=(\230\311<\2275\330\274\267\354~<\216\001C=\214\232\025=\034I\224=\367\201\220\275\017\365\215\274\242`\r\274\261pw;\254_\364\274\333\3777=k\023\216\275\213\362\325\275\021\216\233=VA\271;La\266<ZZ\230;\217\010\241=\177\2400:Oo?\274\365l\245<>\"\310\273\275\277f=B~\033=\223}\360<\241\034i\2750Y\230=\374\3661\2758u\327\274\\T/\273\241\236N=ey\243\274\304pv<\024> =\327N\213=\025K\007>\350\210\306<\333\230\314\2739\0177\273\315r\220<\214\331\306\274\317\235%=\317L\256\273m\200D\275q\314U<\205;\013\2742\305\244\275\023w@\275\202\010\252=K\014[\275l)\035\274\3607\272\275c\334f<wn\234\275lOf;U\200\214=\032\260\221;\037\316B=\275&\274\273\374\252\312\275\010EV=\t\235\315\273\026V\241<\214\322c=\231\263\003<\237M\213\275\350=\276\273\246\306\016\274:\224\206\275~x\027\275\316&\224<\037\274\375\273 \217\017=\021v\344\274\217\001\363\273\023\263\375<\305\354\021=G\342\217\275I\035\322<\365\276\232=3{\232\275|ZQ=\307\037\312\274\334y1\275\266\307\020=~\036\273\274\272\240@\273\177\033\237<\271F\010\275\004D\026=2\326E\274_\035\222<\"\376W=\216\215P\275;Bk\274\365|R\274Ua2=\010\240\033\272\215\276=\275\363+\t=\315\321\206<\353\2057=\250f\177=\304S\352<\206-\236\275|s]<\\\267\335;\2232\014;\010$\020=\023DY\274f\014\210<\305P\335<_\350l\275/\204\301\273\021\034C=\001Pa\275\020\036\016; aK=\317]\331\274\350\277\301;\230>\004\275\333\237H\275cv\302\274t\216?=\323\013\207\274\317\363/\275\340\237\270\274N\314\034=&\255c\27576\375;\010\355P<\340E\003\275\005e\203\275[<\235\274\214\333\206\272f\351[=\342\305\241<m\213^=\367\t\327<M\306z=\254\220I=V\200X=|u\000=\333\344W=\313\221v=\256e\215=\343\363L=\340x\020\275\265t\023\275-7\031\275\326\034\t\276\207\014\030;F\343\234\275\374\217\006=X\304\016=\320\257E;\314#/\275\216\224L\275\206\242\327<M\303\234\273\202\312\306\274%\360B<\037e\031=\241\313:=\332\356L<w\003\244=\270\206a=+7\033=s\370\244\272\277\242\240<\365O\254=u\233\t<\013-z\275\314\323\215\274\344\256\037<\201\236@\275\234\264W=\317lq=@%\304\273\362\302\001<\224\023:<\215H\256\274\260\220u\274\310\254\373;;H\013\275\010H\225\275p\340\205=\364\365\213\274\327|*=\376\0003<\347\200\236=C0=<z\204-=(,R\275Z\253\316\274\322\307\010=s\026`\274&T(=&F\034<_J\021=R\030\306=\0339\331<\211\304\320;\244\223>\273\324\032\315\275\006\271A\275\002)\361\274\347\267?<\374\006\312<+0\007\275\023\026\336<\376\315J\274\203\331i;\005\3767\275\312\205\206=\313\2114\275\264#\252=p3\"=\325o-\275\314\210\216:\206\r\013\274\346\354\267<\037\274v=\200i-:<\347\230\275h\235\3337\273R\t\275\235\034\302\274\354K\366:\243\"\320\274\255X\003\2755\376\001\275{T\360\274\351\032\210\274nT\231\275\0276\332\274\177\363Z\274b\261S=\005\257\353:\003\317\324<\330\256\204=\245\2520\275\237\236\373<\200\026\354\273\211`\310\274\342=\375<\366\260\333;\006\017y\274\273\223m\275Zy#<\262|?=\036\245J<g\221\355<\247\330\211=\220\310E=\2575\304\274\377n\271\274Z\\\325\274\216\244\250\275Tn\241:d\342\001=kv\347<,\n2\275\227\004F\274\023\342\266=\367\340 =\213\342\217\275c\'\026\275\246a\210\274\246R\270\274\037\026\304=/\316w\275\332\"<\273/\rU\275\367\226\223\275\246\274K\275\371\340\014\275\255l=:\3305\240<\320\215-\274\371`\020=q\252\323;\357\206!\273\004.R\275G_d=\364\351\221\272\345\225\263\273\306\367\007\275\t\334\207\274^\310\"\275\017`\250;\007\325d=[\223)=\001\014\307\274(\035S;\234x\271=IO::hH\035=n\265\000=N\032\215<d\225\327\274\234/r\275^\336\315\274!\340\023\274\tJ\t\275co\301\2740\030\210\275\374a\300<\305v\353\274f\322j\273<&\310\275\307(\021\275\235\037s<\305\020\273\275\272C\007\273\367\206\214=*\361w<l\311\366<>D\221\275>s\316<\331\030\260<\307\005\217\274\177\277\3069.,\312=ER\002\275\r\353\273=\205\330\251=\323\205D;\244\304\327</w\016\275\254y\224\275:\272\304<\034\273\331\275\264\242Q;\344M\022\275_\243\241=\356K\226\275x\267q\272\005\027\027=^\233 =\343\225B=\021P\002=\031\247\024\275\300\316e<D\361Q=\250\351\252<\'j.\274\t\240N=S\024q=\253\234\223\274z\361:=\360L0\273\306\301\270=\327\371\021\275h3T\275F2\0008\260\265u=t\264U\274\315\214\372<iL;\274\234\366\007;?\0217\274U\202\366\274\261<\344\274+p\016>\330\377\301;\357\017\351;|\207\350;\370\306\342=\362\254)\274Dp\005=\003\300s\273\266\020\207\274!\013w=e3b=\367\323\250\275\301\307\010=\267\277\224=\366j\321\274\213\030\211=\333\303\201<<\211\317\274v\366\344\271\267\316\246\275\270\327\266<:\\:\275\005\315G=\212g\301<\233\020\017<\260%\034<\370\335\222<\301\377?=\000G\253<\266\030{\274Se2<\371\231\211=\236\n\026=t\325\244=>}+\275<\364\237\275\325\036\360<\214\344\3638\345d%=\\\362\231\274n\272\322\274\226\3201\274\277\345\356\273\236;l\275\t\216\030\275\206\026\251\274\322C\223<\344\235\005\275\370\025\334\273\356\217\002\275\036A\266<N\014\252\275\t7\307\274\261\260\215=\266\262\277<:6\363:*\014\002\275\357\301\324<\250\235\025\275\347v=\275sIG\275\345Q\004=\016\350l:\231iZ=U\267\226=\361\243g<9\014G\275\034\017V=\276Lx<-\307\\<\244\224\323\274 \344+=\307\260\245<\246\t\223\274\007\\\317\274\264 \026=A#\242=s\352\254=D:\363\275UZ~\274\nA&\275>\033\267\274\373\200P=\025\201\245<D\250U=W\234\026\271w\244\306\274%i\256\273f\341h\275\016K\201=\254\375w\275\370\010\013\275VB><\360~\243\275jM\377<\331\234,=/F\004<\351&\003=$]\202\274\225\320\035=y\2008\275\314\327\304;\306\037$\2751\001\207<\3213\363\274\375|\347\273I[K=:%\226=\252\0076\275BpR=\036\016U<\343\343\345\274\246e\035=LhK\275\206\366\010=\311?}<\\^P\274\023=\220\275\307\371p=z\302\213\275\262r6\275\307X\364;\335X\217\275\372nX\272\336?#\275\344t\200\274c\272\202=\243m\224\274\022Ed=\340\260[=}\006\207\273E\373z\274\334\322\364\274T\355\350:\224kI\273\330\347\350<\335\276\210\274\231M\230;\350\323[=\255\343\312\274\215w\203\275E\2553\275|\255d=\242^Q\275^\376\235<\200\253\200=;\260\031=\242\005\241<\21348\275\255|\240=\245\014\361<[\010\231=\277sT<\303\007p\274\260\353\350\274\216\025\227=|\362\231<\222\210\315\274\214\250\227<\"\377\372=\314\3269=\363\'\264\274U=\026=\220\004\270=\025\274\245<66\332<\264\322p\275\010P\301;\225\3248=\236\273\005\275\331\257F\275Q>\004\275IF\034\276Is\027=\200\034\274;\362mU<\370\311\247<\021\265\n\275\306\000\370\273\236s\247\274\211m\204=\275\'\210=6\302\376\274\277\'\036<\335Js\273\366\253\017\275L\230\312\274\275\324N<r\323\034=\221\335\273;\316QR=d\000B=l\257;\275\001\3401=\202^C=\226\212\013\274\326n\340\274eH\026=\000\034\213:\t|;=tT0<\306>\334=@\036/=\364\247\216=\204\334\"=!\217\341<\271\366Y=\371jU\274\235\373R=\036\n\274;\362\226\001=\321 \253\274\200\270\364\274y\274\321<\215*}=N\315\275\275\341\346\346\274\350};=.\310\203=\004\030X=d\336\233\274\365\235+;o\316\326=c[v:\270\214\301\273\230\010\256=\235qy;\371KC\275\362l\345;\204\2443\2731\234W\275\036\267v\275i\222\033\275\035#\357\275p\332>\274\021\001_<>X\214=\232\321\305\273/\205\003<\275e?<&_\356<}+4\275-\247\234\275\0069\345\274\r\366^\275\276E\n\274\254\377\177=\376\312.\2755\030\221\274=\351\244<Xb\342;\216S}<\346\241/=\237JZ<\310\202\235<\365&\035\275*\364X\275.\365\030=\022\024\300\274\270\251:\275;\363\363\274\007\013\265\275\213Y\262=\263\353m\273/\025\335<\271\352`=l\272\352\274\237\013U\274\211\246\277<\307\032\221;\366\253I\275M\017\003\273\365$\216\275\322\026\020\2759\275T\274\320h\217\275\221\026\"=\003\213\207=\364w\343\274\000*\020=\241I\264=\216\232\006\275\240\005\245<\307\347\255\274\303\306,<V\023\306\275+4/=\330R-=+\263\177\2752\350\326\274\220d\206=\006N\215\275\365\300\221<\026\033\300=\323$\343<s\236~=\236\224\267\273z<\217;\221\253\347\273++\336<<\272q\275J\242\247\274g\252\022=E\013\204\275K\205\301\274\274\354\235\275wq\037\275\371q\367<\215l\304\275l\2111\275\251\206[\274C\242\021<K\3426<\017\355\202<+\227\305<p\227\026\275\331cO\274\237T\205<|\214-==\256\263<l\264\004=\346\303\247\274\211\376\014=\003\331G;\035\267k\275\035%\257\273+\273-\274\313\213$\274\341\017\031=;a\207\274\025\240\237<\3618\267\273\232\"\253\275\352\232\266<\220\235G=?\324\215\274H\1779;}s\210\275\340\203\240;\002\023\230<\316\230\244=A\206\037\275\037\253!=\263\366<\274@\253\337\274\332A\210;Nc\266\275\306\347:=\331)9;\315#\244=\357\326$=\0314\013<\256\257\327<\374\333\022\275\367]\236\275k\215\326\274q\246\206=?\031\273<\226\003%\275\020\346V\272[o9\271wNR=MSX\275k\241\376\2725\266C\275\320\336\216<v\036\000\275\220\225\232;\'\264$=$\255\234<\246UE\275bn\017<\204m\345\274\371\2667;`\331\222;\023\037\014\275\350v-\275\361\005\201<\230\332\031=\236\363(\275T\204\303<\212\361\\;\303fB\275(l\005=\347M\322::\017\347<\215\322\002=\334\365\260\275\311\306\370\274\366UZ=HV,\275\304\023\022\274\370\327R<s\036\t= -6\274\260\320=<f`\311=5\177\341\274\220\312\364<\"\245\037=[\363\032=\rU\213=\374\376\375:\343\312P=\033\375\025<\'\035K;\031\226\303<k\254\366\274>\271\331=\304\016\264=j1\217\274$\331\025\275\035\247\367\274ANL=74!\276O\252\305\274\247\270\235\275\30131\275mg\304\274)%\364;\250\016\024\275\321w\224<\035\201\210\275Hz_<t\3065=<u\300\273\307\225\031=5^\243=\013\034r95P7\275\335\010\347;\337\377\311<6\207\347\274\266\215;:\256\310b=b\350\240;\210J\243<\301E\367<\271&&=\037\225\207<DO\006=\212\346i=\232\271Y<;\233\313\273\tL\244<\247\177\005<\367\232V\2751\334\233=E\2366\275-\"\312<\235a-=\206\245\254<*\235\337\274~\341\010\275~\202f\275g(S\274\013\027\217\272T\177\024=\312Nw<Y\022\315<\3666\233=\237\240\007=R\2356\275\307\341\342\274\364\014\250\275\302\342\214\274dIk=\3017\211=-D\273\274`\377\326\274\001\266\222\275\327\345\232=\227\332\265\275\305n\305\274\334\332\253\275#\305\303<\361\224\034\275{x\315<\341\3210=\375M\030\275\013<\331\274\367\375d=\224=<\275\356_\234\275\341(\026\275\335_\253\275_(\227=\016\3640=\207o\375\274\302\217\367\274\350\365q\275\037:\226\274\000\013@\275~\211\006=\301\323\306:\363\031J\274\016\354d\274\211{\243<\311)9\275b)t=M&s\275%!\244\274\017\020g9d>!=\303\322;\275\260\222\277<8\3128\274\005\314J\275\022G\026<\266>\262\275\004\326\251;\254\0345=\016\373\243\275!eG\275\347wg\275\330,+=k\004\215<r\225\373;\031\224l=\034\007\246\273\357X\202;\261 G=\234z\301\272\336\240a;I\310\204\275\003\036\360\274\334\024D\275\321\246\277\273\210\r+\275\032\234\307\274F\356\310=\376\224=\275ENH\275\226M\345;*\330\335=\325k:=D\275\337<b\221\200\274\353og\274\334o\346<=\017_=X.*\274,s\223<7r\334\273\233Q8<\027\213\332\275U\t\020\274\234\202\301\275\n\355\021\274\224\034\234<\017\315m<\033\300\361=7\177\372<\261f\220\274\022\353\245\275\013\314\016\275&\205\256=\230V\215\275!@@\275\'U\027=\353\215\354\273\351\221v<?\312\023\275\253\271\267<H\021 :<\3709=\303\347\233;\340G\241<\372\310\235=P\345\203<q\331\336\275\t\235\3078\334\273B=\2521\232\274\0140\235<\324^l\274X\314\317<\246\345\016=g0@\275\207\\9\275\302\356?<\016)\363\275\023\372)<`\301\014=\374YI\275\273\310\030\275\270\330\221\273\214\355\345\274f\322\037\272V\211\245\275\263-C=\370\352\210\274\177\277)\275{U\204\273g\357\331\274$#\020\274\370\222.;\307.\202\275\200@P\274H\026\252\274/w\024\275\260k\230\275_\246\332<\277\301\303<X\356\271<\353\351m=\007\346T\275`\243d=\233*\246=\034\365\203=%09\275M*\364<\371\0350\275\341V\322\275\270V\247\273\355)\212\274t\303\327\274\311[\032\275\271\2664=\222\360\021\273\025@\3179\364\025)\275) \247\274\345\210\236=\236\204c=\036\312!\275\037V\300\275\017\202E\274\241TK\275}f\355\274}a\233\273\'\344\024=\256@\236;y\334\266\273ni\223\274E\227\005\274\365\324\315\274g\177;\275\352-\353\274\225\267\251\275w\335@\2740}\313\274j\000\223\274|\346\234=t\n\342\274\213\036\355\273\230\211\240<#\247\200\271\336\300\006=\312y\320\273sa\324\274b5\257\275F%\304<\037M\353<\025X?<\265\275\001\275*\0177<\350\213\036:N\213C\274\202\202\234\275\253z\320;.OC\274\026\246d=\223\227\313<\352&\335\274f\230\376<\265o\356\274\n6\233\273\202\261\017=R\277.=ud\013<\233a\364\272\203\273e\275\310\303\352\274\217\0229\274T\354A\275\344\204\023\275<\203M\275+6p=\325\265\277<y\267h\275\\\265x<\375>\217\274\037\362\010\2755\361\366<B\267\234=H\250\002\273\r\335r\275;\005\255\274\374\237&\274n\246\306\275\253\020K=\232\2178\274\367*i=b\304\327\272x\363\023\275\325\254==\202\216\362\272\273gU=\037K&\275\363cL=\335\221i\275\375\264\216\274\226t\253\275lx\261\274tQ\226\271\031\005\232=Z\362\271\274`\257\241\275\220\201T=;\235d\275~\307;\275[\344N;\254S\262\274\227X\250=\220[\302=\350y%\275\220\342\276=(\314f=?f\373;K`\210=Y\256\360=\330c%\274Ld\213\274\350\343\001\275F\275\236\274eW\024<5ZF<i\323\036=~o\216;w2?<^72=E\241\024=1\3347<\224D\235<\375\020;<\274\207\327=\335\201/\275\004\005\330<\335y\246\274\000\274\026\275>Y\215\275\337\020\302\273\026+\354<\220@s<\252\030 \275\321\211\'=\250\227\243;7\310G=A\216\231\275\027M/\275\256\307\213\274\226<\240<\200\353\237\275\020 \265<\232\260\240\274\360\223t<\301E\335;$\3421=C>\213\274!\245x\273,g\313\267\004\016F\275~\213\013\274\263<\241:,\033y\275?t\006<\303\306\306<\031\307q=W\177\206<\264\332H=#}\213;\272\004v\274\211\207\215\273h\235\324\273Qp\214\275\2017~=\nc\"=\230\242\025={\000\033\275\002\324\033\275\2603\230=\320\362\006\275ux\235\275\227#\245;\323\367\234;\370\327\201=3\334w=P,7=\0147\362\274T(\200=\201>\251\274Y\322\217<\217\027G\275Jj\220\275\246T\320<\330\303\350;*\024\271\274\210\025L<\203\347\023\275!\306%\275\311\224\245={\304 \275<\300\302<o\266L<|\357\311<\344\'S<\265\254\233\274\002m\200\275\215\351\231<\344\200\005=\206J\000\274I\277Y=e\354\317<\031|\225;\016e\213\274Q\201n=\\\271\273\272\262;\332<\370x\262<\251\n\007\274\010\352\033=\027\363\342<\260za\275|\0275\275\275!\234\273\016C\004\2752\320\233<\271\332\267:\344\341\271;\265\007U=\327\332\244\274R\301\351<\322\220\336\273\3119\210;\025\265!\275n\313\307\274m\216\037\274\26624\275\241l\207\275\335\355\207\275\007\227\257\274P\031\250=\327\321\266\273P\351+<\352\371\\\275\232\032\373<\217\362E<\310I7=\336\202q=TEH\275\343\366\020\275\234G%<m2\325<\031dm=K%:\275\323K2=\237\303N=\244\202\241\275\317e\030=\204}\007\275\273cI;E\214]\274c\325K=N5\203=J\242f\275\010\340\246=1\337\034=\277\0031=\355\347/9\240\314\211\274\226\360=\275`\231i\274\355\004\037=C\010\211<\003\352\375<\303\001\031<e\rN=\024\016T=\262<\010=SeC\275k.\261<\010\007a\275\267Tn\2759j{\275\231\315\342\275\365\".=\037\250\220:\275@~\274e\354\324<UJ\262\273I\272\003\275t\274\363<\326\002=\275\272\025\234=\037n\t\275l\205\033<8\177\325<\355\327\023\274o\3065\2750K$\275\267\271\254=\317v\254=\345\266\342<\231\332\317\275\312/\021\275\302\247\355<\005k9\275\236<\354<\023\346\010\275\216\342\023={\303\016\275L\336\255\275\271C\300\273#\020T\275\3778\311:\272\334\320<w{\033\275\177\253\301<\021\376\360<S!\033\275\017\014\206=\034J\345<\260%Q\273\362\364\216\273\340\033\237<X\363h:\213w\335<\316\214J\275C\334\227\2727\315I=[ -=\006(\026=\355\216\326;\031\222S\275{\0315\275\307\363\350;\207\266\211<+~\354\274\022\010\216=\252\334\363<?\260\265<\227\002\020\275=l7\275\354\200;<\253\362\004\274$\204\274\274\020\230\021<4=\354\273\334\2416=is\022\275\225k\260\274%\321\t\275C0\341\274\330\001\300<.\245\025\2755\\$\274j\200\346;\362-\300\273\016\216R=\344\343\307\274\365\325\213=B2K\275\275\336\212\2733-b\275\305\r0<h\352\037\275L\'Z\274\273\220\004=\246)\274\275+\346\321<\027f\204=\235p\275<Xr}\272\327\221\337=~:\\=\215\356\244<\217^\311<\017\013`<\307?\220\273\254p\001=!\255-\275\313\335\255=\204i\256=\265R\367\274]p\004\275\325 !=`o\234<:\243_\275\300V6<\031b\316\271\347\356\227\274\3569\214\273\202k\250=\013\255 \2720\267q=\211\332T\272\340&\"\275\354C\231\275\000\351&\275\024\n\242\274*\030\203\274\231\2677=\300\203\010\275\253\006\242\275\220%%\275\214\005\005\276\205\254\311\274\002\343\322\274[\032^<\235*\323=0\306\2079Y\252\203=\200,s\275I\246\237<8\323\350=\274\325\232\275fZ\301=\372z0;\311\213.:1\205\234=\010\314\225\275\203\345%\275\002\325Y\275\204\375\371<[\371>=K\024\252\273\226\223\310<\374\274\271\274t>\330\274\001\336\203;\361\262\023\275(+\230\275Aik=\007\007m\274\325$\221<\027\313\006<\375\323L=\2516\223=\177=\262;]\016R\273\2205\005<\265\262\223\275DH\227</-s\275\033\225\265=\2157\005\274\306\271(=r]\221\275\"\\\251=\205w\223\2751\017b\275@l\360<\3341\006\275:\226\037=\213\221\231;+\225\320\273\\\350\222\275\267\000\201<>\330\004=\367\322\232\2742q)\275\211\336\227<\017Ft=yv\270<U\364*\271}S\316=\177C\325\275\017\265\234\275\261\235\363<uw\264\274\264 \377\274\023B?\275\t\024\211=o\221_=\241LN\275\017\364\016=\241\223\203=\260\'v\275\003\"\237;;z\340<C\177B=\314q\364\274\351i9=\344f=<nU\343;\262\273\313<<\025\247<\377\221\331\275[L\326\274\023\246\244=\271\355\226<\317\247\354<\251\005\223\274\306\321\205\274\014\275\017\275\376\271a;\204}n\274(\230\322<\006\337\363\274\307\026\016=0\001\233<\202\357\010=j\322\031=\270\320\327<.xU=\330k\026<\213\031\363<?k\031\275\2278\t<5\204]=i\260\023\275am\323\274_\344\001\275\021=\211\275;\340\347\273\216\346\204<B\316#\275+\034\310;.<1\275b!\270</\026\034\2754\304,<\351\246\367<2\326.<A\321\201\275\346y\030=\302F\327<\033\234\226\273sH@=Y$O\274\346\335\270=\032\241E=\352r\251<\232g\254\2757\231\242=\310\034\365\273\030o\346<\302\337n=\324i\362\274\257\345&\275\346\003\225\275 R\226\275A\210V\275\210\212\361\274\252L\233<\245\030\241\275%gs\275^\204\354\275t\366\311\275 \334\003<v\007;<{\016>\274\251lR<\247,\345<\001\260%\274\213\324\247;\356m+=\371`\354=:\226\003\274;\013s;\302\357\232\274O\2328\274\374#\225<\332\036\313\273\247\234\\=\347q\247<\222H\r\275 P\007\275\250\272\014<\330)\204\274\300\266\301<\301\262\305\274\333\0201=?l\334\273\020\270\346\274\277g\377<\232\212Z\275\350\036\214=\203\244z<\010\224\276\275\341\000\360\275#\324\212\274\352\253\316=\227\307c<U?\314<\344\372\363\275\206\226X\274I\276/=\003:\222<;x\211\2751\314\367;\376\236\270\273\351\327\232<\243\013\037<F\324\000\275\243\240\337=\020\3130<\316Z&\273\226(\345\274\235\343\361\2730\233\004\275bsa\274\206\023\207\273\026\313\217\274q;\326<\276\005-\275&\242==k\355\234<\245\340\203<\300\"\241\273\231\324c<o\310\'\275\000%\370<\266\313%\275\361@i\275fe\205=\350\033\030\275\257dF=q\374\374<uYo\275\360la;\375h%\275O\221I<\312\360\202=\207^\212<\350\\J=\362\247\320<\2666\377<\340\222\263\274\rk\327;\230TS=\374m\273\275\201 \016\275E\341p\275}\034R\273V\346\226\27586\200==\322(\274\2547\251\274\000Q\310\274\365\035\226=\202]\223\275\016(\345<}\021M\274\340\357\364\274i\223\216\275\347\037\232\274\207\365\032\275E\206!=\272\006\244\273\220j\370<\005\272\276\274i\324\245\275\264\0032<\375\256\331\274\317\247\373<r1\372\274B\342\243\274V\344\205\275\033\266\352<\343\317J=\251w?\275\304Fx=%\312\365<\237\311\220\275(p&<\243H\364;\361\273>\275\250\034\266<\220V \275\350\204S<\252|^<\300\257\346\274\365\\\300<\010\222\037\275\026\376)=.V\215\275y\312\361\274k\223Q\275\247\241%=\253\321\372<\\\007\221\274\340iM\275\344O\236=Y*\240<\325\\W<\251#F=\350\226\374\274\300O\262<(V7\275\031>Z\273Ua)=s\024\"=\303\265\241=\352?\t;9y\256\275\n>#\275\237i\023:\277R\366;\337\3722\273W\331\331\274\315\354&<n\2416=P\354\357\273\341\242\256\275/\302)\275\231\330\202\275\254\361\323\273j\305v\273O11\275\377d\305\274\006\247\223\274H>5=P\217\264;a\242O:\367p\253\275\337i(\275\017\2675\275o\335\227\273\222i\020\275\363S\222\275g\226:=\\\252\307\274s\323\350\274\367 \212=\006:\026<\301\372O\275,\257a\274>\036\004=\220\367\'<,\254(=\335\311\373\274\200\206\207\275\272\365\252\274\206\244\034=\205\300)=\361\341\216\275bc\025=)\225\363;\341E\216\274\346\0260=*\203M\275>\317Z\274\300SC=\215\373\247=\245\\\037=\312\277\036\274-\304\344<\247.\355=g\337\303\274\2435z\275.\321?=$w~;\\\373Z\275-\373m\274\317\355\247\274\272\217\t=aj}=\325L9<\212\356S<E\332h;%R\203=p\314\236=\312\026\"=\375f\200<<\306\010\274t\177\277<\236K/<\035\235c\274QO\247\274w{@<\300v\265<\024\250B<\226\216X\275\311<<=I\000\246\275\014(\265=Q\021\334<\337O\362\274\204\307[=J\327\177=\206=U=\006\212:=M\'\276<\332nZ\275\024#\257\275\337\037\340=\320\'z=\363\305]\273\354/\213\275#Dy=\010\231\270<3\241\026\273\245\342\364;\365*\214<\222\247P\275\007j!\275J\320+\275\036\2401\275\250\367J\270\330\030\215\275\3159\202\275Xo$\275\031\236\031\275\3318\024\273=\234\302;\300J#=\036\3200=x\256V;\205\016\252\272\347\243\277;J\332`=\027\304\344\273\n2 \275\345\325\375<\265\033\355<\2424\235\274\025\023\031;\335o\037\275\305\351\361;LR3\275sG\366<R\364p:A\002\376<\245\306\226\274_>\214\275\027\211\004\275\357vx\275{\221\037=:\021\351<\230\'\327\274\331\367^\275y\365\343<l\304\245\274\360 <\2741#z\274\304\316\n<g\255$=p\220y=,|\320\272`\261\220\274\3560\321<\213\204O=<\264\247\274\360\237\004\275A\300\331=|X\177\275K\274\367\274\203\001\222<\372\177\006\275\201\257&\275\0030\303\274\305A^<5\306\271\275\\Ue<\342*\315;\226\010\316:N\373h<x\330\201<l\250U\274\340\204\320\275\251l\262\275\377\010\373<\306\231&\276\357\363\340<\344.)\275\256\350\016=\203\224\377\274=\241s\275\023\203M<h\016o\275\304\202\032<\023T\317<E\036\227\275m\302^=\272\030\\;\'0\013=\236\336\014=\304\250\"=`\215\240<\322F\237;\256\0219\274\2606\256\274\002\224v=\370\314\177;6T\227\273q\034\250\274\030\333\002=g\000C\275z\222\224=80\3259\034\034\267\274\033\205\222\274\326\255M=\267\315M=\307\347S\274\t\204S<\273\224\241\274\375\205\240\2747\000A=\032z\273\274\204\023\022\274(\026\333<\356\365\253\274X\305#=pD\226==\313\243\274\030H+;\362\306\010\275\320\301\241=\356\010\033=J\321\007=_U\037=\216\323\230<=\257\350<=\305\275=,\331\031=\324\177\236\274\\\024\017=\3175\216<L\335\343\273\301$\204=\267\367\306\275\223<U\275\317\345?=\336@\255=YRP=\320\257\377\273\303>[<\223\320\233\274N8\202\275B\361\303;{\222)\275\225\020\361<s\3608\274\364\265\242=\340\000\0359\332\246\006>\200\034\232<\200\240\004\276\351t\270\274\276^1\275%\031\216<\206\345\214<\371\377\234<\3616Q=\315\254\252\274\017\005\331\274n\020\222<\242\036\357=\2309\307=0\364G\275\033\243\240;\032\026G\275\024\225\347\274\217\372\346<%\303\022\275<7\002\273\304A\263<-\2545=\223\257\374\275?\312j=\323ca\274\353o\213\275\331\324.\274\236\241\027=\303\'u\274\230V\225=s\367-=\236\307\307=\212\207y=#\" ;\033\346\212<\006\010\036\275Mq=\275\363:\357<\3157\022\275\237?\326\273\360\236B=\364\353\037=m:\340\274\273\253\017=a\237\326;\"\301/\275\302\256\233<N&\205\274O+\340<N\253\305<,\311\367<YX\243=\003\377\"\275qy\365<fq\024<\\\3455\275\247\025\027=\310\354\340\273\035\006\227<\205\270\027=\007\0035=\rGm\275\024\2259\275<\277\254<\227\332$\275\022\261\034\275N\244\302\274\250\331\203=\362\205A\274\t\206\202\274\261\\\\\275e\241b\274\344\216<=\331\376\271\274k\240\237\273J\221\025=2\237\017\275<\002\331\274I-\221\275\243\332\314\274}7V<4\000\262<\265\377\034\275U\260\222<\2328\210\274I~\016<\335\332D\274D\226J\275\017\377\351\274m:\205<s]G==\303\021=r\205\204\275\364\243\235\273\373\302\257<\226\204\004\275\237F\006=\320\244\310;rP\222<\313=@=Q0\034\274\364\0256=e\331\017<3\212\232\273daM=\373\372r=\305d\030=c\036\221;!b\372<\344\354\302:\201\226\006=\334\034.;\033V;=\201\000\311\275\322\313n\275\270\032\210=\2621b=x\274\362\274o\014\201\274\323\023\211\275\027\312Z=\242\021#\276/\263O<\312\274\365\274p\216>=\217\262)\275\207o\251<1\270\210;\367\020@;\237\347\375<\352t\202\273<\250\023=\te\364\274\252L==h)p\275\002\202\226\273\362[\232\275\311 \263;e\254\372\274\004\373\327;\314\000\220;e\351[<*gP\275\0237\315\274\306w\254;j9i=~\301(=\026\207\027=\003a\014=\034_<=\t?\201\274\310\016H=\031\010d\275\344*6\274V\027 =\266\312z\274\314\256\022\275\260{\335\274\034\312w\274Op\312=$\002\366;\377[Y\275\322Jj<\350\031T\274\341\236\206\275\013\017\026=\333\023\270<\026\377\221<\033\201\220\275-\240\361\274\3364\271\274\374#h:\210\300u\275\331\234?\275=[N;\244\276\215\275OjQ\275\032\027\300\274\3037\'=?\344,\272+\213\025\273f\266};/\215\214\275\272\317o=\225dU\275\300\365\347\274\224\365\275<\366\315\213\274\305J`=\214\353\276\275i\031f\272\343\246\333\2745\274#\275\000\230\252;\221\352\026\275W\270\232\275\333\035\027\2758\025\014\275by\322\273\272 \362;pb~=D\336\177\274\003\005\201<h}L\274\3107\\\2747\211\233\275&ZD=#\245V9\315\315I\275Ef\251< \327o;>\313\250=/\341/=\244=!\275:iX<Y\002\037=\305\361~\274X\313a\275\262g\t\275\33636=y\n\217<;\264_<RNX\274\251\243<\275j\337n<\347O,\275\363\026\\\275@\347\273=n\203\030\275\233`\242=p\224\335\273\350c#=\\\354\027\275\234\230\213\274~\245\014;\201\2060=\213\355\244\274\233\235\245\274\260\237\370;\324ID=c\2425=\357\242\032<b\302\342\274V\233\224=(\304\334=?\350E\275U>F<*\373\270\273\324\t\247\275\203\026\002>#F\214\274\301\364\262<]\232\272=\246\201\032\275R\305\240\275\267by\274\206\241C=\210\273\255\274v\217\346\274\3554\200<\0228\326\275\342-A\275\262\311Z=\234\375C=\r\326\r=\230\300\230<Q\311\004=z\307\020=Z?v=\0367g=nk\014\275C\314\177\275\324x+\275r\206\037=I\210H=\256\237\276\274(5\323:l\337\271\2734T\265<L5\253=\264\375~=\300;\217<5\211\304\275.\202\210=\247\314\206\275@F\001\274\232\260/<w\366\027\274\252\210\032\275\260-\244\274^=\037=q0\215\274\374\202\236\275g\227i\275\205(U\274\212\003|\275\036\0105\2757R\215\275\365\214\210=c~6=?T\275\274\003\363F=\326\311Y\275\264A\026=\331\300\216=\274$\337\274KQ\251=\010\204(\274\311w\r<\342_=\274\000\003c\275W\215\223\275\340W\307\273Q7A=\224\240\202=\253\372u\275je-=7\230\032<\317\264\'\275\013.\225\275\214\316\331\274D\367p=\365\246\203\275\210\344\256\274\330\362\247\274\251\275\020=\037\327\337\274\305\032\220<\365o9=1\372\253<\"u\202\272\347\272\241\274\336d\222\275\010\022\227\2745f\330\273\274\263=\275\237\217G=ys\246\274\335\354{=\343N\244\271\350\315\244\274\357\210\216\275SB\235=\306\337\226<*\370\307<lt\240\272\276\247\301=\323\310\277\275\264\365\256\274T\373\221\275\265Q\037<\373Z\003\275\037%6\274\026\204\035>\267g\307\275\332\034G\274\244\347\371\274\374\221\277\275\202\203\351\274\370\200\362<\210\036&=!\014\345<\311\331X\275\261\005i=5\\\313\275\"\020E<\231gI=\272D\200=\210\223(=\326\323\226<|@W\271\305\350\273<\376\337\250\275\227*\345\274\212\316\002=\262\003\225\2746\216\021\275\225\341\340;e\\X=Z\022\004\275\247\202\027=\002+\236\275\033l\226\2745\220\270\274\242\327P\275\243\314\253\273J`\222;\317\2535\272S\326==\006{\234<\312\025F=\031\250\026\274\325\'\351\274\016\221\355<\355\357\345:\242\256Z\274\360\321\243;\263\177G<\242\036\017=q\310\235\273\217\016>=\n\271\023\2754;B=\002\257\314\274\2378\233\274\341\3420\275\264\367\343\274\305/\213=\372\3064\275f\310\302<\217\335A=\221\226z=\304\276\274\274\276yY=\247\353v\275\301H\304\275\373/P<^2\250\275\024rn=\026\343t\275q\317j\275\351\370\272\275\273\353T=mK\307<\247\351\222=0BF\274Vq\312<\032\232q\274\177\373>=\317\236];\036\322\001\273p\250\322<\201\221\252<\364\023\217\274 \321\333\274\270\375\373\274\035+!\275\230)5=\3044\014=h\215\376\274\260!B;5R\017>\213\366\n=\314\366\200=\361;R\275\357\252\031<\205\322m=.\223\377\274\230\315\220<\023i\024=\240\254R<\352\275\232\274\241\331\216=\0368V\2758}\366\274\250\354[\275Rzd=\256\237\222\274\250\320f=&\337\n=t\003\226=m\341\014=\247\262\\\273>\315\362\274\2750h:\204\245\000<\336\332\007=\353\217\237\273\002\235)\275t\256\263\275\336N_\274\004D\001<U\316\271\273\216*\210\275\241\2637\274\312\233\017<C8\031=\335\222\023\275\026\202\277\275\306\242\255=\376>}\274\034\326\023<\201\2374<!\312$<\374Q\203=\345K\237\274\373\366&<W\226D\273\311\207\354;\2775\333<\330\222\000\275`\332\026\275\217\355$=~\207H\274mHD=g\352\362\274\350m\310\274\273\355\034\275U\001\253<}Kb\275\026\255\257;\225\203T\274\246\375\030=\346\257\303\274\242F\250<u=\231<Z\237\303\275\026\005\277=)\350\342<\244\324f\272\001\240\003\274\246\326@<w\365\222\275\235yt\275\"v\307=Hg\031<\262B\037=\030\373\247\273l\327E\274\315\265\366\2737\230\244<\036\376l=\351\227\323\274\2676\370<\005\231y\275\211\330\237=\326\013\356\274h/\253\275\243&\023=\274\361\262\275\343KI<\201\362\233\274\315\324g\275\235\"\002=\026[\316\274\317\017-\273&\213\233=G\254:\275+\350\213\275\004-g=\3257y\275\030\000%\275\250\024\266<\271.\370<\\\277\264\2746\205r=:J\210<\263I\347<\320xd\275\203\240;=\224\"\365\273\005\014N<<\373\251=\357\0361\274\306%\n=\345\004\244\274\250\212r<\260\332\300\2743*\332<\205\225r<5\267\252;h$(=\223\277\205\275\261\370\370\273\004\371\334\274~P\006=\231i\375<\022\246@\275_\037\n=J\207x=\210\211v\275\201$`=>\271\207;r\027\331<\350\320\206<m\036H=8\264E=_+\022\275\375y\366\274x\014\262\274\200\275\221<\255P1\275\254C\206=\361\206\245\275!W\207\275B\262o=\254N\207\275\226\317N\275\372\317\273\272\220&\211=\321\260\345;\016\361\200\273-\217h=\377\3609<%(p\275\2037~<\365\275\323<W;\310<PV\260<\233\252%\275\024\014\375\273o\256\276\274\214\356j\275\3213R=\236U\013=\203?\005=f\376\232\273\"\277@<\216s\333\274\263v\264\27417\360<,\255-=\001m\316<\256\263\005<\037\342i<\245\240\246=a\001\300\274\201\3339<\254\006\215<!\2601<8)w\275\202O\024<\320S\215=m\216\227<,\270\367<\016n\014<\250.X=;O\014\275S\'\327\274<\027o\272\360\312\024=w\265\364<0L\273<@~\254\2756\372\013\272\200\222\217<\274\020l\273j\\\214<(.\025\275\371$\313<&\036\241\275\212\352\202\273\306\264\325\274#R\351\273\264`\330\274\357\214w<\313\207\243\274\2045(=(\006\006=B|:;\3472s\275\346]\032=\003^\"\274^\n\033\275t\370\307;~bR;\350\274%=\327a\022=\353v\333;\036\227\274<\267R\320<\030\230\274\274\t\005^\2752\324Q\275\276\225\265\275B\253^\275\230\254\241\273\227\323\225<)&u\274\225\243\002=\177\036,\275\026\206^=\267\356\200\275\200\017j\273c\217a\275Yq\374<q\277\222\274\034&3\275\3575C\275B\304R<\216\n*<&\316v=\372?\260\273\246\n\243<t/\340\274f!\223\275m\213\000\275\026\272\353\272\227x\317<8a\231<\217H\234\274\\\377\257\275\211`\256\274\304T\343\274\200\210\303=\325\365\n\275Kx\316\274\000T#;4\"H\274\353\265\214<H\276\025<\367\343\211\275\254\234G<g)Q\275V\233\237\273J^\254<\305\334f\272\366[g\275\256J\013=\300\251p<p\224\364\271\373\257\035=\304\377\235\275\256\372\311\274\177\373\025=\020,a=%\360P;\021\2231\2731i2\275\335%\230\274\003\344\034\275Q\200\"=Lf\274<\352\240j\274\275{\232=W\307\376<a\035\003=\266\236\005\276\222/P\275g\037\017;6\361\217;\213)\217=\007=4\275\t{\225<&\267\302\274#\030\024=\031\243\253<Dq\206\275\267X\270\273\006\316(\275 \034O<\307q\213\275\274\322\216\275\033+\017\275L\005\264<\234\021\353\274\366\246\177\275\303\322\374\274\273\0379=\006\031|=\004\006.=\036p\314\275b\tH=\305\247\316\275\260\344x=\331\210Q<\026\360\257\274}\032A\275)\224a<7\2133\275\310\0276\272\232M\366<l1\253<\321m\271\272\201\314F=\243f\366<\217\014\031=\320,\'=.\346\014=2.\034\275\224\222z\2740H\257<\257\\\330<\337\356\035\274N\314\310\274\334W\355\275 4\200=\0043\025=8da=\2758\355\271\332\272\3069y\231\263=\374U\022\275\356\253C\2741L=;\356\326\213\272\206\212\206=\250\342\024=u\'\027\273\342i3\275\365\375\017=\363}v=G@C\274\325\343)\275\371\372g\274\273\217\360<\330\354m;^o;=\337s\207=0L\233<\320w\267;\374H\027\275Q\227_<\017\342\324\275-\262N\275\305\324\000=\356\231\232\275\031\275\034=B\315\303\272\256\226\315\274`\267\032\275x\312\353\274\"\224\263:v|\013\2758A\213\274\223\362\326<1\246O\274}^\321=/\245{=!Ha;\232\320\225=2\r\004=\325P\317\274\314\t\021\275\264x\036;K\2336=\\\2043\274\000\262\230\273\035\026\005>\214\"\210<\265T\221\274\0143\213\273\354\216\202<r\206\225\275\305v\000=\200\005\207\274\"\031\200\274_\230K\275\262U\200<\272g\231\273\256\363\266\273\227s\350<\342,N<\312;\033;\023\201\260=<\211f=\256K\323=\212\336\216=\025\205\310\275\316\314\326<A\316\323<\362\313B\275\033^\243\274.%\311\274\302\007\206\274\272\367\216\274\314c\221\275\363$\345<\3635\357\274\317\207\251<\033\324\224\274\300~\261<!\231p\275=\254\025\275{\301\224\275\031\214/<\213\326H\274s\1778=[\310\250<Y}\013\275%\343*\275\354\3260=\266r\'\275\220;\025\272\253e\365\274\370Z%=h\013I=\032\026\'=\000e\347\273\316>\211<\216\'\260\274\024\036\376;,@?<\243\307_=!\201\226\2759\303\341<X\205==\356\2667=W\240\341\274x\277\200\274\377)l=\233\233\367;\037\375\355;\023\232.=\003ET<v\3571\273\016 ~;\370w\203\275\245\027!=\275Z\026\275\312F\217\274\007E%\274\215t$<\253\246Y<-\372\312;\257\3730\275\240\2132\275lfI;>\241d=\010\205\211\274\243\305\037<\272\2118<\363\002\236\274\035\345\254=\306k\315\275\264bd\275{\233\214<\257C\305\275Q\323v\275~\177\344\274\347t\213;\005\363a<p?k\275\007D&\275m\204\014<\251\260\265<\206,S\274\030+\243\275\330P\016\273\311^\320<\201*\302:\023Eu<\"\201p\275\013\003\340\274\200\253\233=\322q\220<y\006\247<RA\236<\355q\231=\331\314\243\275\347\312\205\275\035\372\236=v\331\310<X\355\252=$\177F;\003\335\014=?M3\275\341_\026=U\220\031;\262\221\206\275L\n8\274\223=\360;DN\313<\335\021\236\275\260T\003\274\200\354\311\274S\326\277\274Q\243[<\001\246\317\274 |A\275b\331-\270\226\'\327\274tcq;\034b\020\275b\326%=\373\371\t=\'\214\233<\013\220}<\375\337\352</\233\214\275\315,\261=e\"\364<\364\004\211\274\235E\007\275\354\301G=\272\203H=\347\"\334;\006\267j\274C\366\200;\331]\037\274\203\276\204\274\312\237,\275?\'\362\275\230%\013=\004\213\026\273\307^\270\273\256\274\253<\222\372\375\275\\\036\201<\257\351\254=\231~\274:\241\225\342\275\032-\337;zU\265\273\027l!\275\n\210\331\273p>\337\274\001K\276<\024\276\"\275\213\3765=\027\203\246\275=hy\274\003\004\315\273\323f\261\275\372\237\212\274>\366&=F\300\251\274p(\000\273K[\233\273\226S\026\275\300zV\274\006,\351\274\217\333C\274FF[=\212\344\207<$\357\337<\347\006Q\275\372\225\222<G\343?</\307\352\274\030\243\356\274\354j\221<&T\336\274}j\004\275\303\rK\275E\202x=\007\305\337;\016\346\"\273\000_\'\275\217\202\317\274\234\327\206\273x6\202=!\301\272\274\277\340\226=\326\272\360<H\343\244=8\262\260<{\007\305<\322za=\200\024\201<R8\242=\222l\242=\216-\213\275|\"\274;\223\270\241\273y0\266=n\247k<\006m\371<\341\270\205\275-C*=\360Uo=\221\214\213=#\276\007\275\246#0\275\016\314\322;R\377\305<\031\327\010=\016\341\226=A\334\021=\265\2073\275\033z\342=\213\001m<T4\374<b$><\3531\010\275R@>=\360\025y\275\300\247w=\235=\006=\300\364\241<\241\014\025<\347*\010\275\002\010\027\274\340\321z\275t\203\215=u\014\241;\270\245\326\2743\372J\275(\017\003=\344%|=\201\236z<R\3522=\327\315i=\221\3164\275\312P\016=\366\252\007=Y;t\273N\036\230\275\014\257y=\263\274\010\275\333\003Q\275\246ZC\275\334E\206=\324\030\265\275\221?#<(\332\202<\201\246*\275\032\212&92\313\310\274\223\373\257=\346j<=]U\212;\032\020,\274\014\322\211\274\344\220f\272\345O\322\274mX(\275d\2740\275\325P?<E|\343\274uK0\275\246h@=\030\250\211\274\345\2376\275\237w\030=f\235z;\030O!\275%\274\320\274Ef\216\273Ms\357\273.m\307\270\326\324\247\274\007 P=\204\221\240\275`\312Q\274I\224\362<`\211\251=\333\301\017<\027\371\001\275\26583\275\315f\013=m\223\302\274`\201\367\274e\003\250=\333L\':\304\353\213\275\243y\205\274\375\225y\274a\222\256<\341\037\254;Y^\010\275\245\355\024\275\325\340\222<K\335*\275Q\265\252\273\316L\372\274\242i\302=\255d\362\274\206\365\333<)p\004<\200c\032\275NZ\266=4W\307\273?\016L\275*8\211\275\307\3270\273\345\022\243<\212V\370<|!E=\327\243\232:\235\241\005\2756\005\233\275\320\023V<m\206\324\274\301\341\322;\002\326\201=\250a\\\274\260\244\251<9\342\034\275\313\033\304<\333\3431=\342\271\340<\342\375a=\310\274\231\275\305\375\213<\035\215\"\275Ssu\275\335\014\007\274\356N\203=\361\013i\275U`\207\274\372\022\307\274\010\2038:\367a\226\275\2104R\274\3659\203=T\262\262\274\350q^<\326\353\347\273\202\236\303\272\376c]=\267c\272\275d\031\230<\265r\233<\363u\025\275\005\206\334\274\272\200w=\n\364r\2758E\234\272\236~\271\274\204\343\017\275c\314\002\275\274>\260=?\266@=\367&L\275;\256!=(\024\027<\315h\357<\224\366D\274C\330\"\273%\016\247=U\375\002\275 ]\003\275\n\237o\274\332F\320\274\327\201\017=,\273\026=\001\341\001=\256q\202=\351\r\034\275%\250Z<\273S\020=$\013G\275v\004]\274\037Z\237;\362\213\035\273\353\314b\275]\002\377:.i\221;l%\025\275\377\023@\274\373y-=\323f^=\0305\n\274>\226\250\275^\370\373=8QZ\275M\347j\273\320k\263<.\001\274\275\203\2451<\311\245_=\020\263n\274\277qd=\\\264=\275\3158\315;\361\002y\275\216\340X\274\260\027\266=>\235 \274QH2=\320.\270\275\245\272\013>x\360\264\273\2328\\\275\370\242\253;\003\273\215\275f}\207=\316\353P<m\264f\275/\314\376<\036r\265\274\242\264\231=\0344\236=\020\270\214\275\\!\211\275i`\365<\2513x=\"\r_=\325Xj\273\204_\233=f\035g<\204}O\275\273S\221\274\003\310x\275\203\324,\274DR\'=\342R\234=\317\316M:he9\274i\002\023=_i\251\274\177\213P=\250\3136\274\237C\237<_\2517=t\372[=C\203\330<x\207\241<$7\243\275D\3314=\032\360\262<\324\366\230=\307\246\021\276\305\025+\275\307\215\274\275\200.\377;\324\337\222;\'|\304\272\334\307t\275:\214l<\303n\026=\305y\032=9\030\";_\200\314=D\277\273\274\332\024@\27477~<\375#]<\257\333+=\2479\346<R\347d\275\0071+\275\333`\026\271]\356\361\273j\304\254\275\224\301\253\274\262\371\000\275\310\275H=W\273\357\274%%M:\243o\251=e\352U\274\237*\221\274\210\361\301\274\021X\367\275\304\020\371\274\337\236m\271\n\311\313\274D\327i\274\006\0307=E\215\371\275\373\222\030=xa$=\363\267k\274x*\231:\310\315\'>\001\375\244\272\232\036#\2750\021\210\274\233P:<\005N\345;\025\033X=\310q\260\274\372\262\204\274\250\214\320<\01470\274\254\275\351\273\022\236\301<\307!\236;0\317\243\275\272\324L<(O\300\274\007(\026=(<\017<}MI\2749\310\364<\023\213o\275\247\366F=\026\332\326:\370\323\223=\020C\232\275\327Le\275?5N\274,\'\004\275\332\231\031\274\021?\235\275\267\241\353<\016\305\031<\305\033\210;\214\246x=n\252\254\275\355\350\004<\352\272\301=\207\352\333<\335~\312:j\335\302\275\356*\247\273b9\322\275P\202\230=\004,Y\274\211\271\\=\2309L=7\022\272\274\032\033\030\275s\2111=*\302\036=\300\200\263\274\355\"Z\275x\3014\275E\375u\274\312=G<\256\266@\275C2\270\273dS\205\274\205\204P\275\235\2355\275\243=\205\275^\375\027\274\210\241\344<\257\275\353=\t6\343\273s\0233\274\246S4<\r(2\275\275\243\025=\034\2757\274\200J\305\274\322+\366\274\020\206h=\226n\356<\330gT=Z\200\n\275\264\241\260\274\2654\302:?b\224\272\336\000\037\275\267\264\252\274\371o\022\274\360\236J\274\374+\253\274\264C1=\277sY<=\242(\275`\2675=\204\374\r\275\202\241\022=uW\016=\263\332\363<JN\334\274\201Z\230<\313N\246\274\\-Z\274\275U\303\273\206!a=\276\354\231=.\371\221\275x\247\235;\\\t\234=\020\343\216\274aM\223<\341\303\025=\"\216i=\307\312\307\274#\336n\273\2162\215\275d\247^=\214`K=m\"\315;\347\212+=\177\\\227\274\333\235o\275C\002\024=\347\321\231;\014+\270\275DJ\257;0}\030=\204\203\227\274\204\017\206=.r@=\231\006\005=k<k\274X\n#\274\356\213(\274\267\337\205=\310\312\\;\344\232\203\275\303\227G\274R\322\264<\331?J=\347\013~<\237\351u\275I1\234\274!\232k=dp\235=\376\276\033=\202\345\n\275sVu\273\227\232F<vZ^<owx\274i\251\t\275;\235\203\275\027K\275\275\2102\316\274}\363\334<\376<\002=\017w\023\274\343\324\010\275JI\256=\351\305?\274\"\377\303\274Y-\326=\314\367\336<\266\031\233\275\010\373\266=\326\241\225<\230\241\311\274\326\2647\275<cN<\037\202V\273`\332t<oG\222=\373\277G=\022\302}\275\357\334\234\272\0371\241<TI];\023J\344;\205o\001\275\014\224\224\273\316\322\303<X\r=<k\007\330<\034\2209\275\310\212U\275(\215\004=\213l\026\275\225\352R;w\305\030\275<\331\022<Y\004\004:\017\362\027\274?\367\262\275g\311w\275\334M\267\275\332\266\004\275\323\0049\275\226\376\014=k\267\252=\224\366\004\274\361\313\016\274.\234\237;\0236J\275\310yB\275g\357d\2747\003\304\275\021\362\254\274\255\367\021\275\204`9;\037\331\264\274\250,\206=\n\345@\275\347\220\206=5f\206<\002\005\321<\315,\t\275\006\273\354\274\274\221\222\274/\177\271=\037Is<\215~\251\274?\023\250\274\356\375\216\273\335\"l=\337\331\260\274\310\226e\274\030\303\033=\223\320\311\273\372&8\274f\213+\275\230#\010>\030\030\225\275\201M\332:\020\023\001=\247\022\244=\352v\202\273n\313\3609\334\270V\275\375\347L<\277.\242\274\005=`\274\240\210\351\2757\273\254<\'\377\036\275\356c \2746\"\333\274\272v\263=s\013^\273\027\377\020\275\036\274\305\274\261\177\243=T;s;@T\254<\021\211\254\273\310\331\210\275\004\260@\273$s\363<\345\324%<|9\274\274\301\344\312\274\362\344\257<\263BL=~,K\275\316Y\237<\246\264\204\275\341u\322<\236\036Q<B\t\313\275\207\204\365\274D\241\314\274\256/d\274x\346P< l]<=K\323\275\351\306\213\275\230y\335\274\316\305\253;\263N\366\271\216\312t=\276\337P\274\3711\263\274\212o\025=\354V1\275\223\2620=1[\226\275\2611K;\035\352\274:\344\033p=q\317!=TTB\274}\353\322\274\256E\255<\256\347\276<e\205\270\274\260\017\013\275)G\020\275\022\000\307<\345\227\204<\373\301\213=\361\"(=\325\264\267<x\002d\273\231\252e\275:\272\035\275\374\210\010\274\356\211\204\274[\350\365\274\204>\211\274+\317\307\273D\257\361<s$d\275nx>=-\243\304<\362u%\273\000\026d=\216^?=\367J\237\273\227\324\234\274\230z\204\275`\374\346<d\2349=H\244\331;\3024\242<\320\341:=p~\373\273C.\034<\301\037\005\2741\014\241\274e\232\261\274\207\211R\274\t\0371\275\257\231\324<A[@\275\270O\003=\275\031\351\274\233p\334<\021\031_<\251\263\t\275\025\231\230<\335\240N\275\371\334]<f\210\244<;i\361<t\364\211=\354L\357<\373>!=$\271\220=\016\300\252<~\323\000\273\021\017\276;\211\273\347:\344\371\346\274\250\304\341\273\314\373)=zP\210\275\317\002\252\274\006\026\026\275Ct\007\275c\246v=\241\242\n\275\235\n\253\273n*=\274\327\274e\275\247\022\247\274\r\226\002\275p\301\257<\226\177)=\251\234\223\275m\337t\275Q\013O=(x\2109\202\320\017=\334-\033=\002q\341<*\353\022<\332qo\275\242\325\211\27583C=\3269\212\275\202+E\273%\266\221=\024\316\201=\355\022\n=\034\326e\273\347\177\021=up`\274oF\201=Z\233\202\275M\310\247\273\302\225K\275\346\330\005\274\235^\312\275\016\371Z=n\034\006=;k\r=E\365\017=\274\266\022<\310\340^=\267\205\343\274\354\307S\274AH\271\274\366XU\274`\270\023=t\311\251\275\033L\207<\031@\311=\363\032\275\275\"\272\013\275\234\027\263<\370\303$=\236\242\023<\217\227\340\274\261\327P\275\353\340==d-\032\275\020\244)\275$\0335=\337\272\000\275\2270$<_\203I=\207\251b<\3075\014=js3\275\t\365!<\251\333\340\274r\373\\=U+\023<\246b\246\275\020\224\020\275.]\267\274\342\010\372<#\376\206\275\331a\200\275\310c\367\273\331\0356\275\313\214\244=\211\201\031=c0\263\275#\003A<z\273e;\354\207\274=\002\020\200=\340\354\343<\364\362\366;.\022;=c\250\367\2744p\304=(x\221\275P\177\205=F\3112\274\n\034\200<\241\177\247<G\356\201\273\233\035\252=\253\373\270<\232\252\217<\327\262\250;\260nM\275\210\246\251<T\307\264=Q\373\332\273\226\350\232<Z\202)=\364o%\274\025\317\037\275\371\222\276\274\350\205\223\275\264WL=\'\353C\275\330\017\272\271\001\002\374\274\321\243\021=\347\265A=#DF\275\307@p<Z\021\030\275\"J\'\275\277\362-8U\0078<\240_\240=\363\026\006<\037\231\001\275 \025\274\274X\\2=Dn,=\235\352\005\275\315Pu\275`\310\033\275:t\201\275yP\340<\237\353\346=\247\333?<\277Y\343\273t\225f\275\3218)\2756A\356\273LA\014\273\221n/\273[\206\013\275\346\251\320=g/H\275\353\010\002=\274I\214=\354r\272<?=\355<\314\006\220\272\317B\336\273\313\3553=\306\021<\275\326\374\312<XVc:\205>\325=\241\215E\273\230D\207\275O\332\250\275e!?=%82=\316\355s=\377\003J=oU\276\272G\303}\275\217?#=\304\027\n\275A\242\246\272\367\303\326\272#\331Z=4\204\010=,\321\317=IyH=\311\213+=\275\320\332<\230$\304<\327\233A<\276\022\253\275C{H<\247\334\206<\202uo=\372\250\323\274\022\233\260\274\251\230K\271\016\274m\274x\367\005=\005\314<\275>\252\032;\233\332G\274\006z\203\275\336\nF=\010]-\275\205h\315\275.\311\316\275\231F\023=\036\211\200=\027<\260<\375z\212\274\177&==\r\252,=\306)\323=v<\225\274\253G\342\274\257\376v\275\216\370+=v_\346<\261\360\343<\205\277y\2746\333\336<\310\214E\275\362e\035\275\375\006\301\273g%\"=\211\2644<\274\315M::\342m<\0073\235\275\242\234\244\275WT\t\275\367\367\315\274\244y_\2755\223\220\275\021\031\211<\373\355u;\376\341\325;\310\262\300;\3721Z\274\276d\r\273z\225\'=~\363\377\274ruM;\347\025\245=\202h0\275k\321\025\275\\\027\036\275\214\251\235\274\223\260\246<\240\227\033=Pg\265<#\235\'=\254\310\027\272\302\307\357<\272\0136=\240\251\233\275\377\312\327<\020\246\376\274\266~\220<\221T\364\274\375\302,=\262\217\223<\306:\333<\322J\032=,\251\207\274\374\217\240=\215\230\216;\247\204\032\275_\276-<\373\331\210=u\324\027=\320\272\021;3\314\245;q\325\r\275k\343\357\274\034\261\005\275\310\017h\275\000m\001\275\331\276\035\2754\266C\275\357\261\333;\023)\222\275\0175\223\275\021F\354\273\342b\225\273?\013/<\266\263\232\275O\311@\275\344\"r\275)\027.\275%@6=\000:\035=Zx0=\252r\013=\263\306s\270\020\267D\275,,\034\275ubS:CN\246<\243\034%\274\3529\204\271\351\322}\274\212U\013\275k\322S\274\327\036$\275\033\205\271<2\320v=#4L\275c1\312\274\304\247\365\274\272\034g=Z}\002=\253\323\025=W\200\352\271\257\344)\274\327\334B<\364\213\212=f\273\370\274\263\277\347=i\212+\274]\237\263=n\212L<[\371$=\275\264\235\274\025\372-=\376!\234=\214\207G\274\2264p=\006\364\343<\320\327\253\275\322\336\234\274\273\204\023=\243\326\300\275\377CL:\267\252)\275\327\234\317<\242\262\204=\311\022\363\274\345\374\223\274\'s\214\275 \266\344\275\233\370\244=\327\350\266\274\004*\231<tl$\2755r}\275\263\nw=\366Tn=!v\177;\302`E=\rwH\275\310\213>\275\331Fm=\036A\212<.\252/\275!V\321=\301\033\016=\010-J\274\253\305\322<or\213=)\025\004\275^\t\371<\\\024\030\274\225\035\215\275\025\324\373\272\326\016R<\307\274\262<\275\022\007<\343=\256<$o\236<^\267\254\275\314@\374<}\332\331\274\365\356\302<C\367\177\271\212\240\002\2769%\232;\222K\310<\032\212c<#\357\360;`\340\275<bZ\274=\0244\354;\326\247C\275\210\031\210\274\323n\222\274\223\337\230<B\007\300\274\313\'\327=\313)\370;)MM\274y\235\267\274x\272\246=\350-\035\275v\035\032=\207\007d\274\310\343M<\253^\313<Um\301\274?\t\377;\211\210\265<\236\323\231\275<\372\200=<\330\007\274\301\255\332\274[`\220\274P\203J\275\236\r\371=\033{\367\272 \211\341<\357{/\272I\275\177\275\253\250v<6\371\247;<\037\3529\267\226+\275Q\240,<\253\376$;\023\001\234\275KH%\275@a\331<\313\t\217\275\312\177\245\275\353H_\275%\033(\275\027\016\207\274\204^\350<\221\372.\275\315\331_=\202\027J\275o\323\336\274\rG\226=\246\203 \274\221e\n\275\375Au<%O\224=\267\210\311=\342_<=\033MZ=p\233\206\274\343\310\024\275\356J\305\272\331\366/=\237f-\274\330\324g<\225\010s\274lP\227;A,\357;\223\244\244<\2659\204<\323\261\345;}\350\355\274\014\232U=\236\327\365:\320\215_<\251\010.\275V\320&\275J\027\217\275\243\273\262:\000n\r\275d\023E\275X\2427=`\323\262\274\276\363N\275\211\322>=Y\337\210=n\306q\274y\2426\274\031?\216\275\360\345C\275\337K\326\272v2\031;q\326\002\275\314\370,\275^?\022\275=\"\231\275c8@\273\357\205J\274\210\234\355;\275\232>=p\267Z<\177\375\243\274\354>\215\272\3000\242=\026\327\214\275l\247_=L\366\344\275\310~6\275>\377u\275\344\001\250<\372\027\204\274e\342\025;\241V\027\275 V\013<\363\362l\274\255\342i;\323\001\200<\246\023\376\274\237\253R=\017\216\021\274\204\"C\272\366\222$\274~^\365=+^\224\275\031\031\235\274\326\211\256=\270~\205<\017M\245\275\235\"\247<VN\021=\372\024{\275\244\014\250\275\035|\240\275I\345\016=\2564\026\2755\302\323\273\230T\240<\334\344\203=\"\242\304\275QQ/\275~\027\037\274\327c\315;C\234\354\274\311\021\230\2755>r\2756\217\031=)\251\231\275l\241\217=\'\026\022=\355\333\216=~\013\016=\007\247\016=IZ\236<\335\301\203=]G\255\273q\003\365<\223\364\034=\224\357\301<\253\333\224\274\203]\315;,]\265<\254GA=\264\n\346<g\275D<c8\257;R\025\201\275F/\302<,K9=\251\251\302<i\370\032\274\362\014\273\273O\250\274\274\366\375L\275GuK\275W\021\221=\200\345Q\275\245\202\004<G?\354\274?\377\212;y\023\251<\023\353\010\275X\332\320\272AIk\273\0259\\=\025\211d<|\315|<\036\346B\275\211+3\274\033W\253\274\240UE\274\214K\215=Xm\343\274\343\221]\275#\334\r\275aZ|<\213\237\000>V\333\037\275\336X\016=\250\212m\275\302\263\277<*W}\275\357\037\027\275\026o\216\274\027\216\260\272\217Xq=<Y;\275e\030\317\274\235>\307;rH\372;x\010\326\274\364\375/\2759\324\202<[/G<P\317==:\325\262\275\215!\271<g\207W\274K58<\032\252\003<\241!\204\274\247\367\030\275\240p,\275W4\203<\027\005\026=pj\314;\3057F\275\3276\375\274\344\232H\275d\261\024;\336\235y\275X\301\377\2748}f\275E\365`\275\2222a\274\340\375\006\275\313\326\313\275\241\313\361;33\242<u\344\202;\343\216G\274\005\024\233\275\325\206X;a\035\007\275\234w,\274^o\343\274/~z=\243\344*=\021\250\261<\005\002\'=7\274\225\275\302\260\002\2757\367#=$\032\227<\261\202W=\2119#=^>\316\273~\342\346\274\245\355H\275\025z\326\275\374\354|<\205l<\274&G\034\275\277\312\205<\031\204R\275\363\032\232\273\333f\236<\262D\210=\003\034 =\262Y\277;8\261\323\274\213\336\336;]R\240\274\252\262\377:T\216\217\274\304*\277=\216\230*\275\023}H=\302a\315;b(D\275X\024\354\274\021z\230\273(\030\365;\031\213i=\246\333m\275R0\024\275\223\376\202\274\222\\:\273\357\014\203=\274B\310<p\322M<\373\223\236;H\336\027=\355\034{=8)\201=\233e\030\273\211\001\217=y0\225\273\304\253\311=\030\272\253<\206B\004=L\275\316:P1@<\220?\270=\003X\003\275=\204\227\275-\331W\273N\310\272=|\0161=\211\030\300<r\275#=\320\304\262=\216B\016\274\241\343\002\275@\010\003\274\356\276\234<3\220\236=]\020\255\274\000u\337\273;H?\275\207\010d=l\366W=a[\256\274\300\362\020\275\3265\016\275849=\342\346q=?\027s\275b\t9=\323\000\r=\336I\232=g0Q<\006\'\237\274\320jd\274\230\301/\273@\3231=3^z<\351p{;\377xj\273U\016(\275\025\261;=T\231\025\274\n\273\\=<.a<\260Z\221\273%G\276<\023\213(=Uu\354\273 m\226=\252\215\221=7L:=\361\347|;$3\362\274\t0\341<\026\250\205\275\272\216\246\275\366Yi<\214\353\261\274\234\370\314<G?x\275t\256\023=\005\007\021\275\254<\233=\223\2633=\372#D=\345*\225\275\220y\341:\016\233p\274\266|\346\274\021\302\n<\335\326\250=h\252\216\274\027\316\213<\354%\004\274\373\357\352=\315&\355\274I\276]=&1\250\275#q0=\005\000\212\274B\262\244<\273\346a\275t:\213;8\316\351\274\360?\203<\232\3540\273q\034\027\275\\\367\364<0\n\202=\t\001\244\273\017\273$<Nr\020\275\020\267/\275\242\220<=\243\177\303\275\243F\320<+\311L\275\351X\210\275V\037y<fe\302=M\346R=\007K\352\274\r\344W<1\327\344\273\315\322>=\263\272\340;\0030\026=\301\000;=\233oR\275\304\034\205\275(\315\003\275\323I\213\274\331\272\206=k\323+\275f\206\000>4\356\372\273\215\007\247\274C=:<k\333y\275gX\033=E\223E\275\335\256K\273\240En=\311\330\005\275\033\320\352<\264\320\213<g\344M\275\363o\027\275w\335\240\274\276|\333\274=FC=oFt<\025\372\203=\253\034\004\274\372u\241\274\377V\262\274\375\372&\275\332a\205\275}\313\350<\332\364\036\275\264\245\\:\311\033\213\275s\232\213=]\300\034\275&.!\275`\214N\273s\336\313\274\0349\237=\206\025\342<_\037/=m\355\256=\342\324i=\014k%\274E\303g\275P\3550\275W\241\255\274\273\335\\\275ftf\275>\326\001<\265\301z\274\301\367\n\273\250\343\3739\025\265\234\274M\331\036=\2017r\275\203R\010=L\';\274\340\243e=+T\302=6\340\017\274\312v\272\273\302n%\275\356n_=\307\317\301=\016\032\302<\261\nK<\374\320\254\275\267\352d\275+\225\027\275\344\022\251<\330\270&=\346\371@\275\004D\221=\305\232L=c\335\207<^\302\020=\351\213\242\275\200\275\215=8\245\367\274|\036\215\275\346E`\275ug\252<\351\302K=Y\322\356<\320{m=E~X=\031\030D\275\031\263\203\274\371\007\376<U\220\024=6\020\005=[\025/<uM:\275\351\n\211<\246\005\263=S\035V\275d\254\267\274\017\005\253=>\263\010\274\233}\004=\232\026G\275\301\3041\273xA\t\275\265\310\273\274\274\313\203<\003_\250;\360\375i<\351\013\314\274i\301\276\274|\227{;\031\232}<\370HX\273\032\306\030=\345R[\275\346\225\016=\226\321\310\274O\331\355\2758\372\001\275\265\036\265<\000\332\251=\211r\236=R\355\312<\25306\275\300\246-=\242P\201\275a\306\320;\355\261\225\275\220\217\014<\216\320\207=\253\000\241=\3657\246\275hii=|\002\304<Y\324G\275\010\023!=\306dJ<^Z\252\274\310\236\236=\3057l<\224\n\215\275\234\345\022<\300\013\360\274\005\320#=U\334\025\275\373\315t=1x\350;q\300\241\275U\260U<\256\272\241\275\257\205\035<\204\335\300<r\300r=\347\032t=\"\363\227\274\262\233\032\275!\215\327\274\214(/\275\220\302t\275j\361Z\275\237\006\014=at\024>^\334=\274\344G&\274/h/<\367\266\313\274\242D\377<s~\311\272\316\3431<\266\212q<\334\276\304\274\374M\351\274`\352\261;\315\330M\275\356\227\367<q$}\275\212\242\004\274\271\305\214\275q\323\207=\344\016\3159\217\247\350\274\221/\253\274+\247\004\274\204\033\231=\263\2776\274j\026\244\274\350\335\243\273\036\"\261\274\307f+=\253\272\222\274\324_\033=\226\220\000\272\312\205}\274J.\013\275G\'\345<\320\034\252<\243\320B\275\215\2774=m\022\203<\246\342\334<r\371P< \361 =\323\'\001\275\224\272\020=\322\356]=C7h\275\351\262\360<\3707,<v\335\230<h\376\261=\372\254\206=\276u\035\275\345c\324=*%\255;\016\323\361<\263.\274=6\025+<\200l*=\3221\013=\270\321\356\274\266\371\214\274M\321W<f\253\210=\225\315\232<\357%<\274bz\346\273\3102\'\274\013\030\267;e\003\t\274\260a\027\275\205\026\375<\360\274\201\272\240\324\360<@.\023\275hz-\274^Im\274\307\317,<\036\303e\275x|\242<\357[\314\273\262\212\244\273\327IO=\330Q;\2751\222\300<\312\224\320<\301\216C\2741\026\333;\350l\327\274\306\245h<\200\303\010=\354%\343\274\037\2004\275Fa1=\305\020\037\274\242\264\373\274\350A\203\274\3714|\275\007\2326=\227\313%\275\001\326\336\274.\264\371<@\230\255\274\212\231^=i\352\251<B\371\222=\271^\354\272\355.W\274\330\005\t\273\227\241\222\272j\350\256<p\361\227<l\233~<IU\203<\005\334&=\377\301\022=\342\254\347;e\367\211\275g=\320<\374\325Z<\034/%\275+\034i=\310\242%\275R\035\207\275\024gA\274\225\375\211\275\364\331\006\276\265~\203\275\322\257\236\273\177\266\236=\326jg\274\247\014\256=\032\342\252\275\203eF:\202wu=]b\244=\003A\324\274^\022]\274?\034\242=\025\356\242=\226[\226<\010+\034=.u\005<e\222\225<bn\344<TJ\037=k\010\033\275\331\261\222\275\213CH\275\224)\"\275Z\365\001\274\374\300*\275\2268;\275>\213\340\274\230\030\202=:\336\256\275}I\n\275\270\215\202=\345\232+\275\245\205\r<\371\206\t=b\200I=|\272\352\274O=\024\273\232\"W<g\236\223=Xk\271=nUI\273\tnQ=}S\026\275AH\244<L\316\356<x\257\220\275\350\260{\274K\275W=U\037\317\272\000s/=\374\324\257\274\3540\206\275\'\'\033\275O\277\013<\370\232\366<a\262\223\274u\371\036<\370\301\007\272\307N2\275A\231m<\346:;\2740\177;\274\314\003\027\274\235\021\002=\303\211\206=z1\010\275x\302\232\275\324\324k\275\320\221\007\275[\030d\274\216\277\027=\335\026\005<{\203z=\0321\231=\334\240\010<\261\033W=\r\003\002=\005\261\336<\345\256\266\2742\236\277;w\002#\274K+\010=\235\367|=]\316A=\204\0310\274\014\210r=8\3354\275m;\221\275\314\343\035=\325t\270<\004P\326\2746\344\200\275\177w\201\274\331BA;LL\276<\030Oq<\254d;=Z\232|\275V\205\233;j\025\343\2730\017\003<l1\355;\221\035t=\3066\304;\232\031G=[\360\270<\233\313\214\273\n\265\216<\350\\\316<rx\246<(\027\003\275b\213\213\275\313\2107\2759Q\t:34\245=P\tf\274\013je=\'\262h;\345I\322\275\236>\232\275<\260\341;v\365\232;l\265\234<\316HT\275j^\\\274\t^\357;\230\256>\274C\2153\275\260\233\355\274]($=\257\025\n\275]]\326\274\224\010\331=,P\265<\217\354I\2753\222\277\275\2131\211<\323\247\233\274\33495=3\005\006=\246V\357<\261\353^\275;p\215=P\031`<\364U\336<x\307\277<13\370\273F\321\357<\270/\234=\260\326\203\275\022\220]\271C\361\030\273\r\347\315\274{@\033=\\Q\346\275\362\372R\275\013\t\370\274\321q#\275\315\336\234\274F:\000=\3067q=\307\3102=\007\3662\274m_\006\275\2238L;C\024\360<\234DK\275\341\035:\274\331\357>\275\277p\222\275`\361\372<\345\204t\275\270C\005=\177xy</\341\375\273\022\006z=\234en\272DI\034=\216\301S\273\366\335\300<`\365\n=\330\2101\274v\271\217<P\366\361<8\242\024\275\005\036\031\275 \350\004=\351=0\274\340v\014\274j\014P\275\277N3\275\220\3545\275q\0024\275\376\371\033<0\371$=\243/\205\273\002O\306<R\367h=\361\261\r\274\277\245W=\021N\246<S*7=\024\375\227\275u\376\360<\241,\264=!\370\225\275a\272\322\275\361\376\345=\246\355\266\274~\250k=\221LG=\264;\240\272\242x\223\273\2279\217=\345\3447;H\327\221=n\343\363\273\222\300\232=S`%\275]V\323;\220\035F\275\237\261\360\274\305?A\275\036M\004\274\314\032\235\273\000\017\020\273\202|c\274\2056k=\365\312\332\274\306~\350\274Xk\005\2758\020c\275LJs\275=\377y\272\030BX\274\360;\033\275\310\336w;H\013\213\274\n\332[\275\332O\366\274i\315E<+\232\321<i\247\243:\3148\223=\231v^=\354\321\275=\2738j=\261\362\213\274O\303\017\275,%\213<_\022\300<x\355\212\273x+\005\275\342\343\n\275\035,I\274\300\266\351<0-\272<T}$\275\316I\t=\324\262\304\274FC+\274\252\370\347<\337\265\026\275\275/J\275M\356\031\274\256\310\023\275\327\370]=\333\314\355<\363\024\303;\205ne\275\326\033\254:7(\353\271D\232\007=\025ar<\354\021H\27525\241\275\201\t\033\276\236\304\347<\017\n*\273\016R\306\274\370\371\261\274iS\210=d\265\255=\227\335\021\275\010CZ=\002\257\316<u\234\222\274\025\361v\274DA\215=\270\344\264<\013\354\004<\350l_=\200\324\031=\363\331P=\325\007\034\276\023C\321<M^z=j\010x<\233\300\340\273\365\221-\275\211!\326=\306?l\275\224\023b\275\251t\331:\340\322\200\275\205O\036\275\022\033\006=i\220v\274B\370\276;\n\'}\275:\375+=q\232S=\252\230\243=\262\223\001\275u\302\216=\254\000F\272\356\020\207<=o\035\275\375\216&\274\230\355<\275\200*\255\275\013\377\000\275sV\262\274\337\214\032\273\351T\r\2751\244\331=\006\275P=\242L=<.\365Z<\323\371N\273\t\204\325\274\377\342a=\233\246\355<\266)\313<zQ\330<\\\rn\275\210FI=yc\376<?QL\274[\266\364\274R\302\260<\031\034\223=M?\200;U\262\202\275\345\201\n\275\201Rn<\305?\356\274W\0326;t3\005=\037\033\334<\203\221\260=\207\276\024\275\233\306\021\275cY#=#\254n\274\321\003\022=\335\274+=\002z\254\275\227\236\224\274\033)\256\274F5\207\274=I\036<\347\3745\275\315)\021\275\213Q\204\274\001\242\240;IzX<\361c\352<\246\324\271<S\366W<\354\023\021\275\250\225\022\275\024\037~\275\212 \246\274]\206\226\275x\220\371<\222n$\273\2017o\275(\230\\<\2100X=\352\247\001=\240\306\226<\277=\264\274\0058\222\273\270d\017=\325\027\226\275\342\215\030;\254\330\214\275\327\233\204\275\263\002\272\274\232\321\207:g2\361<\235\337\250=`\036\r=\271Y\201\274\002\322\017=\315\212\362\274g\3352=\n\372v\274\017\272F<\177\277\302;\360\377\350<w#\223<\245.\221\274\364\007\000<+)W\274H>`\275\216+a=W!\222<W2\222=6\037\005\275\235\035\027\275;q\037>\372\304)=w\221s\275\n\210\207<`Im\275L\301>\272\316\254R<\032\243\000=\357;E=\377\312\224=\014\302V=\246H\000\274\303\036\005\275\200\323(<\224YP=\337+\263\274\025N\020\275\360\010\226\274\023[\277=\023Z\376\274A\365f\274\330\207:=\022\000\323\274i\206\235<5q\271<\337\3556<\217\306\310=\247\222\020>\224,\242\275A\334\010\275\307\315\375\2740\271\004=\212\260\022\275\372\020\034<jQ\275\274\337\343\201\274\372\200+\275\332m5\273W\371d=4\016.\275\242\243\017=\222\\>\274\310%\035\274\351\306\341<\250\216R=!%\246<]\300M\274nG5\2757D\n=\255\225\266<u\036v\273\236\374`\275\276\245\304\2741=j<\255\272\350\274:\377a=\005j\005<t\267\251</\335\241\274\205\3378=\210zc\274\376\244\207\273\360 \306<\272T\315:\006q\367;\363\256k=\236\351b\274O\374\242=\rVj;\300\374\261\275\033\014\310<s\342\203\275\322Q\203\274x\233Y=\031\311\241=S\330\227=\306\'\303\274^}\313\274\303\337{\275\005\010s=v@\256\273\366\310\217\274\tb\344\274\347/@\274\224H\3149\313\331\314<=\005\210\274\007\202\306\275\207\306\230<`\036_\275\030\251u<\311b\004\275\236i7=\272\314\331=\260\236\314\275\323\243\024\274\341\037\256;\242T\246\274N\214\370<\2158\033=I\356h\274\256\0014\275\374\335o=\226\004W\275\025\260\010\275\361\007)=\310\033\272<\244\371\327<\230\\\252=\377%B;\033V\227=\322\240\021\275\216k\320\274\211E\271<\006\266\343<\267\205h\275\031\345\311;\334\322\317\274\213\255\340\274\033{J\274\252\371\261=\335\310\377\275\312\221B\275\322\370\273<T\330\201<}1\006\275\216\266\007=\371\235\317\273\014\366\257<RW\222\274\220\226\001=\227E\220=\346\345\354<\223X\001\274\025\024\025\275\347\246\254\274,\037\236\274\230\004\274:|Q\221=\324\307\210\273\330m\305=\207\037\267<\234\275\245=\361k\266\274(\370i<$\361A=\324\016\366\272\265f\217<\366 \020=i\332\224<\252j\204\275\025B1<\257\306\231=\315N}\275\'.\375\274a\236k\274\355 -=Q\200u=\265\025\3439L_\257<x\222\026=\017\255\200<\323v|:;[\313<\t\241W=\227=\265=|Q\363\273,\t\202=/-\220\274=\034\031\275\030\364a<%?\332\274\016j\276\274VM\257<\365\326Y<b\306(=\252\372\200=\t9=<\\;\340<@`\214=F\333\310=9\354\201\275L\035\014=\205Z\300;\275\301?=\023\311N;W\264\233<6\362\254\275\327F\362\274%/\341\273?\371\272\2754oc\272\250\201{=\177\235\334\274w\330\261<\211u.\275\240\214&\274\257\321\267<\034\376&=\354\177&<0C8=^\r\214<\300m\001\275X\371\261=L\340\334\274\377Gv=.V\201\275Z?\022<~\'\306=I40;\332\315\224=<\305\305<\307\305\037;\003er=\350\"j<\250\245\223<NW\351\273a2$\275\277\336\230\274\354V\240<kSY<\035BH\275\204\311\332=&?1\275\204\r\334\2746a\321\274\321\315\246<H\'\254<\377\303D\275\0059\352;\035\312\370\275]\037-\275\214\370<=\254/+\275L3\233\275\004^z\275\35020=\226Z\227\274\302a\261\274\201>\345\275\023G\244\274\203\351\304=ix6<\226)\340\274\270E,=\367\247\323\274\335\332\317\274\007]\254=\247\020\324<\277\317_=\357\n!=@\222\331\274ZW\221=@\243\020=\315\243d\273E\354\376<\327\227x=\365>\205\275lb\206\275\211\336a<?v\304<\355\351\222\274R\307\304<\321\376\356<\216vs\274(\230\"=c\352\201\275\355T\231\275\377\307\234=\033\245\236\273\232\315\231\275\356\242\202\274\002Xg\275\277\236p\275\235\215:\273\222o\240\273\376\200\024\272\320\275f=\231$\200=\353\225\";\234\031J=a\020\206=\353\341\010<\330\277\243\2753\241\265<\376mr=\254I\023<\037f\375<K\373\215<\230^\221:\240\322\004=\261\223l\273\021\024\260\274\001\317\233\274|\377\272;\244\353\247\274\270\203P\275\001\001R\275\177F\345\2743C!=\007\210-\275\037P\037\274\370\221\t\273\202B@=\337\376\223<\001\224\207\275\330\243+\275]\rf=c?N\275y\025\345\275\200\0026\275\"\367O<\375\365\251<\322v\220=\241\220J\275T\215\221\275\024\357-\275\026\201\301\274\313\310]<\307iL\273\2527\177;[\356\245<\367\315-\274\327<$=\240\347y=\315\351?\275\241\032y;\032}0\274\274\274\374\272\360\325 \275\\5\277\274e\312\203\273\267\246\214\274\345\210\225\273\304Z\274\273\246\1773\273;+\334<Q$_\274\2443\370;*\014R\274|\226\031\275\376\317\251\272\262\246\304:]\277?\275\211\357\333\274\026\353\220\275\225h>\274<\365\025\275\354\314\307\271!\277\305\274\214\037V<\241\217\261<,\237\263\27442J\275\250\331\001\275J\362&<\204\326B<J&\274=\361_J<V\232\004\275\n\020\311;0- \275 \300\351=\344\323\233<r\366\367;\203i\330=\n\235%=\245\315\352;\007|\222=\310Y\234\275\255\342-\275\261\006\237\275\306\361\277<\\/W=Qy\036=Lw\177\275\361E\243\274EuV<\311Wz\274/]!\275X\207\375\274^{#\275tW\230=\273\033s<\351P\241<\217\246\355<c\253\242\274\300W\r\275\340[\354<\211\177\n\275\030\267\205<\332\026\210=\201AV\275QL\241\275\342\361\210:\r\213$=\320\3328=\256G\350\270@\205\313\273B\013\204<?\375\374<\262N8\274d\307I=u\322\327\275\017.\351<\020\342z\275\324\267*<\010uY=\321\253\231\275\2342j\275c\024\r<\371\035\036=\226;\327<\321\222e=%\216\022\2742\351\263=S\275O\273\305x\004;F\246`\275\022\226\031\273h\264\203\275\004\356\220=;7\354\274\252\261\217\274\r\267\243=\276\200K=S)\327<|8-=\276l\210\275\'\265\323=\341\307C\275\002G\254<\221\354\302\275d\375\316<\262J\022\275k\222t\274\271\236k=\352\225\n\275\0021\322\274\"w\242\275\006q\010\275\210\007\014\275\t8\034=\265o\252\275]\233\341<?\3369=1v\222=n\313r=\003\257\007=u\262\256<\247\274N\274AgI=>]\272\274\037\355\217=\350\370\002=\031\316\334=;\244\203\275\214\367.=6\nx\275\026k\377<\232V\005<G\227\274\274\342\376\217<U\301M\274`\031@<\013\274\021\275\202J\023\275\033\207d\275\266\035A=\200\275Z<\212H\n\275\267Vd\2748\"\230\273^\351\311\274\"\211\003=\364\304\"\272dv\207=\204\342\200=\242\262`<\371\000y\274S\224\034<\253\304\310\274\227]\253\273\2676\025<\000\307\204={n\335<\206\002|\275\222NE\275\213N?\274)\312=\275\366U\376<2T\236;\237\207\267\275\253\264\255;\231R|\274\274 \335\2743\033\372<\272\355O;\225\254\'=7B\035\275z\265\021=\211\257\247<\232Q+=~L\013\275\3271h\275\267\020\3308k\000\202\274\342\272\334<+.\022\274\316R\303\275\202\212\253\273\354\302\352\274\031\311\315\274\010,\202\274\335\023\202=Ue\363\274\303\3125;R\"\201\274v\344\t=\354\365\352<\000\266\227\275A.J<=\351\004\276Xp\006\275\037l_<e=\232\273\324\r\351\274\200\217\320;a\265\030=\336\214\223;\264\333\217<\315r+=J\366\245==\204\322\273@M\211=\001\350\225\275\262\275\301\275gRl=tf\345<tW\206<\277\337\222<\324\246\322\274\304\\\345\274x|\265\275\203\250\362<Z\001E\275\2335\005=NZ\227\274c\205\254\274*\250\255=X\264N\274\200i\177\274/-\275=\277\254\233\274oh/<h\274W\274z\252\216\274Sq ;\354\201\310\274\346\204\001=n\271\205\274a>q<?\232D=\250\231+<\333\354o\275qz\017\2752\004C\275-}5=1\363)=0\252N\275\323\026\266\275\346\261\024<\002\002\225\274kHz\273-;\204\274\'\313\275;\257\366\"=\221L\262\274\200j\260\274\366f\246\274\220\200\010=\231\\]\274p\026+\273\316\215T<\250>\033=\216\250\214=\275\377h\273\352H]\275t\020\013\273\013\373\312\274\321\t\222<b\'\017\275\177\314\241\275\221!\220\2759\276\264\275jI4=/\274v=T\301\202\275\022\341\324\274\r\355\266<(\314A=\306\232J\274\322\303u=R\256_<Q\2465\275\330Vc\274\016\333\224<|A\312<\242\256+\274\301%\023<\024\252\001\275r\217\004\275\201\353\021=F%&<a}\001;\354H\246<\241$]\275D\245\354<\032\177\310\274D\313\342\275<\353\350\274<\274\246=\342\242\247<\321\0053=\3517\230\275\337&\'\275?\325/=\214l:<\306\'P\274q\325\236\275\230\351\326\274\324\372\"=\377>U=\201\tF<\257\003\273;!y\217=\277\037\276:\0133\213=\014\242\004<\207\227\240<\210h\201\274\t\363\353\274 N\037=\217\023\001<_{)<\3136h\274e\234f\275\340-\210=S\210\233=\007\027\320=i`\335;\255pT\272\315\370\250\275\311\370\277<\370\004\332;\335\351!;Q\272\257\274\006_F<QW\220=P\336\337\274,\002\\=\004\221|\275\263\241\016\275\2235,=\343v{\275\206*\256;\266\374/={\341\210<\260\3216=\004\031:\274\316\263\321\274\240\377\\<J\301]=\277\261B\275\026\331\264\274{\372V\275\246\202\313<\"\214\311<K\234Q\275F\376\273\271\306c\227<\337O0\2744/\263\275\331\235\205<\016m\027=\330\\\242\273\203iz=\034M\314<\323(\263<\t\271\230:@\361\034\274\265\335!=\304\002\t\275\205\203\326<\237\343\312;\024\007S=\251\3705\275HJ\204=q\021\361\275\313\025\352\274\335\023\346<\005`\017<\n\006\365\274\305\245\253<\242\362\277\275\273\314q\274\272rt<YP\237<\221\311\363<\262?,\274v{\203\274+\202\203\275\334\231\032<|\344\367\275J\304C\275\345\006o\273b\324\333=\024\006*\2756k\337\274\030\326\023=iI\327\274d\277\255=\211:\211=\252\010(\272\246\004\n\273\2178\217\274\031\334\230<w\236<<2q\332<\306\354\345<\303\3059=\332\212\230\275qnK\272O*\017=\ry\232=\rr\022\275&\247)\275\324\033$\274\207P\322;d\367\3269\217\2605\274\242:\301\274G^^\275; (\275rXj\274\331B.<(\244\031\275<\270\220=:R\013=\273\363,\271\344\271s<\274\026\242<0\242\233<\237A\241=6IL<\273\366\223=V\364\234<\335\350j\275\333\375\010\275\312\225#=\271\001\225=?A\227=\231\310\003\275\331$\277\273\261cD\275\037\024\303\274\032/\017=7\004`\275Tz\020=5\375\202\275\331GA\275\277\374\014\275\007\326\001\275\tHY\274m.\014=\001+\240=\274\240\305\271\220\313\031\275\032\014\247\274\242\375\263\274\264\026\026=\203\270j<~\212\242\275&\253\243\273\353\356b;i\025\\\2754\267\023\274\371\235\031\275+\343l\273}Al<\325&(\275\324\273\242\273\346\2218\275\244\024\n=\037T\225<W\311\215\275\006\n\245\273\353\275X\275e>\337\274\337\366\347\274\250\021d<!\343\213<o\024,\274y[\354\273\335\332/<\262\313W=\260\0263=\007)\244<,\250\206\274c[\205=\370\224\267\274\253e:\275zW4\273B\003\221;\003:\227\275q\300L\274\315\236\255\274\221\016\035\275\212\221\244=\264\270_\275$\332\204\274p\256\016\274\260\rr\273\202\356\224\275\00064=\377\031\266\274\014\206\314<\375\347\013\273\330\342Y=kO5\274E\321\337=\346TB<2\255\215\274[=h=6\370%\2754P\321;\235\240)\275\363\237\'<\201\274\325<Z\240o=\300K3\275\304\000\375=\305\220\212\275\030~\261\274\275d\355<\034\250\003\275\027c\250\275#\260K\275=2\214\275M\344D=\257\372\342<\350\250\023\275\200\377z\271\024\022\252<O6G\275\025\017\366<\323k\222=\205M\205=\013q@=\330\351S=\372t\235\275\330!^=\271G\265<\031\027\302\275\217S\3319\324\363\017=>\246N\275P}\234;O2\303<\013\225\202\274\320\352\205<)\260\266<\250\254c\273,\031\242=r5\\;\352De\274\013\221S=\202&\323;p\352\376\273\336}a=F9\212\275p\257<;\031wO\272\337\266f\274\366+\240=\366a\036=\204\206\266\274\004\244\301;\322u6=\265V|=\326Q\201\275\331\264\007=\203\362\035=M\220\\\275\007\230\337\274\021\373\361;\226\007A<\206\210\307\273\214\251P\275<\262\021\275:\227\372\273\317\3201<\250\261\354\273\300\206\334;*\250\331\274\266[\243;\324=\360\274\203\002:=\251\204\210=2\315m=\t\256C=\377R\251<[\354\251\275[\203\377\274\263\213\267\274{\323n=8K\264<\034JY;\217\r&\275I\201\270\274\to\030\274\213R\227<\tO\212\275e\352F\273\272\225\337\274\224Zz\2743\256\213\272P\007]=\027\002\005\276\343Z7=\177cK=\231ta<st\206\275\003\225\033=\367Q\327;\235O\264\275\245*~<\310\357\356\272\323\273\214\273\314\225\260;\303w\007<\303\021 =\021\001\224\274j-7\275R \217=f\304U=-\340\305:\314k\007\275@i\351\274\320\002\244<\305j\351<\355\037x=\027g\233<M\014t\275]\020x\274\353\020\235\274\221-\201\275\204\225R=XU-=\207\257\200<?\235\036\275\340\306@=\357\271==C\243\223<\313[x<\230\246D\275\036Y\261<\332\374\313\274\024X\376\274*\304\r\273i^\231\2753\330V\275<\243\201=\255^\233\275\025q\341\274\240m1<\304K\373\275\351w\211=\316\033\220<\335,\026<\031\2719=\245\036\016=\345\030\234< \003x<\215\204\241=\331\334\240=\235\251\323\271\243\345w<\243k\262;\254\370k\275G\230\220\2748\004\022=)\276O\274\010\025\033=\tW\352\274v\254\231\273[\206\025=\030\022\202\275\3524Z\275\323*w<\314O\323=\260\217\037\275\367\217\025=n2L\275@\001\245\270\236T\020=ga\206<M\210\202=\377\245)=l\333\250\274\200\032\335;\340e\226\275[>\210\273\241\374\013=\223\217\372\274\333\027\3469\231\034\017\275\312\327\366\2736\203\260\275\256N\177\275s\341t\275jZ\030\273T\300\234\273\312~\276<\307\233\245\275\343,\260=\347\305\027\274\230\200\246\274\264\346\373=9c.\2752\267\323<\322\206\031\2752\245\355<H\257\275:\237|\327<\223M\204:d\217\t\275\341\341\356\274e\324Q=:\230\316\274\227\004\355\273(\352==EY\'\2756\346%\275grp<as\036\275\363\0317=wn?=\262q\022\275\014\264J\275\256{E<\260\020r=Nx\316;\364\007,\275m\373|\275\216&\237<N\270M\275\262\206\316\274>\271\267;5sN<\332!\331<\0333%\275\236\021\331\275P\240-=\324l\247\274\316n\032<@\016Z\274\274\035\243=\277~\237\275g5J=+8\200\273k\023\206\274H?\227\275O\256\207\273\223b\315\275_n\036\275O%$\275\233\233\302\274\027UO\275\250\300\253\273c2-=/\013\274<\347\345\345\274X\0250\272\215El\274\376\313\216\274\245:i<\306\276\277\275\261\204\324;\221\224\000=T\256\320\273\337&\000=q\266\275=\230#\202\274!\217e=\377\345\032\275BP\235\274\332s+\275\201\210\211\275B\225\264;!\007f=\220\247\025\274\371\372\330=I\0057;H >\275_!P=\030\r\253\274\302\025\336\274\354\253X=\316/o\275Qm\245;{\245\220\275\025\2628\274\010Gw<\017\345\326<Nr\021\275\273w*\275\265\033\250<\315^\344<Q\257\257<\302 .=K\227\206=\310L\314\274\351\036\311\275I\204\270;Z\334\217\275\332\207\027\275\365\271&\274\260\314\225\273\300\327\332;\301\350\247;Z\310\246\274\344\315\250<K\236m\275\240\242:\274\371\274C=\376@d=\202\366\255\275\373\302\306=\370(s\274Q\305~<\300o^<\353\317\243<\2547\265=\007\026\005\275`\365*\275KM\007<\231\256\305\273:PD\274\014\033\021=#7;\274U\363I\275\037\016\034<k\372\251\275\360n\224\272Ug\367<\225\250\001=\032 \357<\301\217\215=\277\313\'\275u\257\014<\031n\013\274^\212\232<\265\252\356;|\301\230<\243i]\275\027\034x\275\363R\210\274pQ\307\2733K\203\275\363\313.=F/_=\371\217\227\274\253\312Y=\265\237\232\274\313\230w\2757\245^\275\t\005\007\275\353\304\200\275v\245\304\275\250\267\304\275\257H=\275\263\256\227\274\016\253\210=R\307\306=\276E\006\274\350zt\274\274\245\240<T\345\321<\021\2745=\223\262k=h(\247=\240\177\010=\202\277h\275\365\374V\275i\216P=\337\327E\275\222zb\274[\321\230<\315\244\024=\362\265B\275\325r\n\275uY\234\275\373\\\362;+\242]=^g\304\272/!;=\236>A\274r\rB\275\220\335\367=>\267\336\274=$\207<|\236\322\274\253s\262<\356?\003=\272#?=\227\023\217\275F )=Jr\233;\201\\Q=D\266\306\273j\014t<\237|\262\273\357(\344<\026>\223\273\213\0236\274\325\224\210=\244\214\257;\232\237\234=\274*\244=X\357(\2759X\317\275\245K\010\274Z\017\333;\236\025\021\275\312E\214\273\245\037\346<\'(\316\274\346\361\276<\325\330\315\274\177\304\363\274O\\\221=\003b`;\316<.=\256\333\037\275\231\212\202=\352\356m=\004\007\272=\372-\254<}\203\201<1\274\316<p{\265\274\353\323\246<gn\241=\316\'\233\275^\035\352\274\003u\277\274\354\241\207:\220eR=\205(\272<\351\276\315\273\274=\237\275\001\373y<X\242?=\225\001\325\274\330\002\211\275\244\'\245=\341n\350\274\214@\277<t\371\363<\252\252=\275n\200\200=5)\232=y\244\n=\205\276\371\273\372$\007\275\272\203\234\275O{\034\275\215\233\367\274\234~\335\273\205y\212<9,%=:\023\361<fuo=\266\347\211\274\001\363e\275Y\310?;yP\216\275_\210s=}&\r=\301\377#=<\270\021\273\004K\r=u\353\260<\177\236 \275\343\026\204\272\304\2468=0\3470=$\345\350\275\007\311\250\274~\0002<\2217%\274\375\357\222=v)9=\236,6\275\\\014\362\275\345\333\221:\t\337\275=\261B\273=\217g\251<\214\322\215;{\023(\275\210\267\313<\360t\332\2732\231\017\2754\276J\275\177\220v<t .=\356\031\301:\341t)=;\245N\275v\335U\275z\275 =\264\305:\275\303\264\205=A {=\331C\256=\365\310q=\224\226h\275\222\261\004=\\($=\332n\303\275F\205[=\022\221\322\274\333\004\370<b\257h\275\021\221\035=5V\210<\3674\212=\325N\023;z\031\246\273; \272:\2654%;.\264\215\274|\357\214<`C\t\275\310 Q\273\263\033[=\353U@<Z]\025\275\221Oj\274\223\333F=q?\243<\376\235\026=g\030\024=\373\221\026\275 \241\313=\0033\342<\351\376`\274\304\353\206=\360\027)\2750\351\006=\300\340\356\274\352pj;\304`\263<\311W\324=\266;\247=cx\205\275\246Oi\275\330^\002\274\370/\362;\262\265\332;\340c\266\274\227Dc\275Jd\217=\216\345\':\021\327\263=\007p\265\274\024J\241\275\361\000\031<\036{\204\275\345\237\323<\246\203\235\272\356_f\274\027\213\321:\014\267\034=wz\217\274\253g\001\275K\225\024<w+\266=x\241\037\275\203vZ\273\265\334i<\000U\034\275\317w\354\273\3345\250=\325\247\324<\r\300\240\275\220\301\037=\032\231<\273\201\215U\274\253y\254;\363&\014\275\'\207|;\030-y;\271a\034\274\177j\241\275\0366\034<\315\2568\274\031M\033=\010\315\311<\304K\n<\322\230i\273N\215\214\274\310\216z;\272\2521<\323\277i\275\331\021\200\274\000\217\2709\005\322]\275\005FJ\275\006\334R\272+Kv\275\372\2465\274\202\343l=\327.\222\275=2\034\274\254$\344<:\246\006\275\377\270\270\274uk\310<\">?<\235\3760\275\276K\035\275i\371\202=\311Y\201;\257S\266\274\300\020T<\0377\246\274Tg\224\274\030\272E:?\324\244<K>\347\275_\216\277\274\222\360o<m@\255=\356h\246<W\tl\275\0167\001=EM\251=\224\031Q=\037ai\275\002\250\272<?K\033=xQ\373\275\316L\355\274\266\310R<\010z\253\274\332\364\311<a;g\274\305,`\2740O\360=\033X;\274\"\265\361\27147\004<\t\341\220\275j\215k\274\204`\r<\314E\316\275\334~7=\215\254\323\272\345\221\234\274\023,\230\274\322\263\247\274T3;=\333#\216<\243\027\026=\264n!\274[\031\372<\334\364\031\274_\026\014<\360\210*\275Z\314\033\272u3\007\274\305\030\237;\363\032\257\274\361L\356<\373\201\220\274\204!\242;&\024\352\274f)\222\2738\016\230\274\375\327o\273\323I\272<m\363\263\275[\034\270=\342\252\002\275\314rp\275\305\350\027\275\305y\025\273y8+\275!\034\215;\037\303\002\275\237:\032=\020\313\206\275\250\377\300\274\340I\357;\315O\272\274(2\217<q\356\227<\205>\":\321\t\273=\331\001\251;N~\304;u\347H<\225\366\270<\353\242+\275\363\220\240\274\351f\334\275\030\034/=\253n\273\274\251\001/\275\236`\343<\002\037E=\024%\022=\376}\024\274K\275\270\275\331\221\224=\033\002p\274\ruH=\271$\221\274(P\253\275-\205\256;\265\271\365\273\342N\322\274r\313\347=\300U/<i\204\266\275\252\302\303\274\332i\"\2746L\202\2748\257\003=\215\026^=K\307\224=\311\311u\274\212Y\274<i\375\273;\224\241\016\275\376f\036\274\351\314~=p\277~<\235\375M= \300z\274\355\243R\275\027\201\352\274\353\026y\274Hgl=\340D\344\274\374\332\022\275\306\374\363:5\202\301\274N\r\252=\355\031\263<5\260t=\224\002\263\274\3437\n\275\031`7=|\326\006=\034\033\351<k,\337\273\303f\207\274\266(9=s\036=\274\255\313\262\273\275\207\201\275\2167\213\275bw,=\027+\346\275\317\013\207\274y(\251\275(\325g\275~\205o<(B\215<\030\361\212;\'0\203=\3019\205=\351\t\233;u\266\t\275\304Y\030\274\356\226\007\275\t\026\224\275\365$\261\273R\263\004\275-4\301\274\034\301\301\275E\035,\275^\031\032\273=O\t\275\306\205\377\274\030\243\311\274+\315\364\274 \222-\273\302\346b\271\222\254\320\274\304\363\013>\337\242\n;\200\n\341\274\200?F=\233(F\275\355\320\327\274,o\244<\324\320\026=\241\265\010\274o\337f\274}8X\275~\021\211\274\252])=?_\210\275hIc<\355\260\205\275\237|o\275\367\\\303<:Qe;x\352\006=\363\330\302=\330\035e\274\347B\361\274\216a\211<\345\336Q\274\t\213(\274\017\022\324=\212\335\272\274\364B=\275GH\017<!\225\000<\307\265b<C\037.\274\351\222\202\274\312\312x\274\213\314\016\2740\365\274\274\014n\343<\024\375\335<>a>=\240|\276\275\225\200\203;]\206\334<\211v\367\274\274/\321\275\3437\233;9\334\'<\230O\371<\343\014\t=e\267F=\305\233\262\274C\177];\237\010L\275p\250\251\274\312\232W\275\253>\353\274%&\327\274`\336\263\275\240\371\332\274\217\316,\272V\340\255<\372\001=<\250\356\037=\\L\320;\304\326-\274\245\217\261=\220i[\274< d<\315\276\244\275Wqt=$\025e<i\347d<U\225.\273t\3748=~\350\210=\222\033\271\274l\273\024\274\r7`=b8\244<\212\251A\275P@\347<SI\212=\201\376\222=\375\234\203<\246\331\266<\202J\257\275\372\343\275\274\254y\201=\230\336\324;BX\277\274u\251\226<\315\241\240<\300\275\r=\347S\"=L\367\276;,\263\206\272\360E\000\275\267\235\234<\344\255\276<b~\315=\202y\353<X5i=\332{\315:x\367\027<C\267\230=\343YH\275\037\324\230\274\252\221\250\274\3339\035\275\312D\241;\205\311\212\274p8H<O\010j=\212VV\275GM\255:\207~,<\000q\343\272\247\236\347<\215\272\032;[\002\223\274\240u\253=\360\235?\275\304\243\013=\357\256r\274O\336\000\275\017 \004=(!\304;oc.<\320,\002>\344\374\270\275\241I\203=\034y\270\2756]\350=@\265\244=\250\3400\274\177\037\007\276\227\307\025=>\035\331\274s\302]\275\320\362\216=\neY=\341|\335<)l:\275\310\357Z=%6\275\275\236k\027=\244K<\275P\013\r\275#\013E\274\265TA<\307\274\264\2730\311-=5\245\253<\260\002b\275\254Hv=9\267+\275\377uQ\275\237\226\255\275\t?\020\275\356I\242;\265\343\033=\276\3636\276\032c\001=\315\270\301\273\226\250\032\275\377L%\273\3447E=\031y*\275<6\235\274f\207E\272\017\334X<\251X\016=\365\333@=\030\360\212<\344\366\034\275\352\3567\275\370\236\033=\373X=\275t\273\252\275-\325y<<0\323<\243W@\275\325\027\236\274\333J\007<\372\200);\200\343\031\274\316\222I\274\317\r\300<\357\346\025\275~\232\t=\247\350\223=\207\362E\275\334\0140= 3\036\274P9\276\274\001#Q:\227\020\351\274\366\205e=\3219\335;3\302\346<\017\323`=O\231\261\274^\375\023=%\377~=\251EQ<\3279\214\273Z\350\242=\346\224\200=X\0051;p`\334\271I\270\226<`S\216\275\257MN\2754K =\332h\"\275(\346L=v<\021<\033 \346<u\302l=\233\374\351<}\355\004;]q\374\274\031\335\310<\360\013\360\274\235\3507<\235!\304<\375\323\204\275\250\224\320< \353\234\274\0078\201;q\206\360\274\321h\221=\221*\253=\375\244]\274\327\235\033\275\207Dj:\212\374M\275\017\306\355\274E@\030\275\026~\021;\3669\243\272\\\211\350:1\363!\273\rb\363;\025\307\203<b\034\221<\257>\300<p\002i<\003\2350\275\210gg\275\301\373\034=\246\301\224=\r-\032\2759\344\321\274\374\257c=\214\037\313\274Y\246\311<Red=\020\013b\273:v(\275\353\331\214\274\013\266\213=$\"\001\275\254<\307\2744\027\207;\253:@=\332\336K=\316\364?=t\305/\275\335\333$=\261?\031=\325\200\035\275L\303<\275\362\304\340\273)\273\225=\001\242@\273|f\001\275G\321\367\273\211\222\215<\253\203I\275X\277\227\274\326SC\274\033\3368=\302\254\236<1\030T\273x\201y\275P\023\027<\010\030\213=o\214\247\274\314\001O\2731\326\326;j\265D=~F\225\274\266\262\246\274k\026\350\274z\003\265=\264\317\367:\350\223\036=\313_a\275\376\250\357<dJi=m\\\242\272\237\231\221<\336\353R\275\303\0233=b\263\211\274}\241\272=\226\271\203<\351\232\253=\020]O\273\260U\314\274\216E\307\274`\373\024\2758\377\311=\215_\301=\266f\017=\350l\"<\035\352\210<\356\310\223=\203<9=\205\313(\274)\275\001\275\364R\325;\337)\324;\361\3414<\274\356\317=\250\014H\274\325{\207\275e|\365<@}\036< \"\026=}\032&:\305\315\207:H\226\326;w\335g\274\241K\263\275\264=\222=\022\221\315<\220\010\306:7\342\2009\300SY\274y\372\215=9\373\233\274\026\232\266\274\316\235\251<y\223\026;\022yF\274@\300\217\272\022\215\374\274\254\215\201\274%3y\272\316\270\310\275\330\213a=E\230<\275\237\267h\274\313\346\207\273\210vr\275\353x\323\274\3147\320<\332\372o=py\214<\255\274\212<1\372\264\275\277\362n<\003)\221<\327\236\370;\311\205#\274\247\031\260\275\246u\002\276\263\017\317=\224h\332<\324b\245\275n\236\016=\264\227z\275\037\223\341\274&\r\265=\017\235\247\273ivQ;\270\210v;\'\255h=\330\025%=\004\370\245<W\206\211<\204\302\001\275\256\307h<\345F}<\274\342\221\274\262u\273<\200\025U;\255\031\313\275\327\302\0209\200\007\332\275\347\253\001\274\210\262\312<M\335\303<Q0\217<\363\037\210\274?{z\274#\356\221\273\213N\222<\243S\r\275\365\037\332\273f\330w\271$\242b<X\030R\275\234\245\271=u\320\302<H\377a\275I\251\246\275\035\370\034=PE6=\267\357(\273\262\n\302\274\264s\204\272\214$\214=p\211\244\274zj6\275Y<3=\230\355\225;\220\303\257=\303K\223<\320\360\347\274\222\250\236=\313\001\213\274\223\220\233<A\241\013<\241\217{\275}\2373=\343D\020=\347T%\275\037\006\256\275P$F<!\356\031=\274\273\361=\002F\225\274\033}\020=\335n,<Os9\275\3365\014<\341\213\033=gM\355<a\024\213\274\255\332)\274\262h\264\274-A==0\3118\27539\203\274\312\330\002=mU,=\211A\367<\"\230\345<\022\350\337\274\300\030\\\275\220RU\2751bn\275G\335\223\275.\234C\275\002+\035=C\213A\275fq\032<j\020\223=\037\272/<\246\250\274<b?T\273\035\274$\275`@\021\275B\036U=\377\221\204\274\225un=\345[\035\273\010A4\274\357>\362;\223\267\220<\033]\221\274Zf\223<\177\232\234;\267s\300\275\225\2440\275vn\037=\222\350%=m\035\346<\t\203:=\032=\211=?C\274\274\2451\020\275\026\366O<\310U\375<\303\247k\275\031\313s<\2643h\275j\006&\273\351\332\274\274[M\020\275\021\212\313\273\213\2262=\372\3166<J\347\n\274\006dP\274@Y<=\302\307\323\275\350 i=\344j\271=\020,\352<\315\026\256=\343\263>\273\256T@<\236\315\213\274\014\206:\275\362A\366\274.\361\227<\367\2434\274\027B\252<<#<=\010}\2179\004\320\016\275E\253\302<];\302\275Het=\002[\253\274\321\320\221\275jka=\336\2304\273I\230\t=\374\361\017=]\250\356\274\263\342\202\274sB\314<\323h;=w\344\034\272\016?[=L\340\231\275{(\272\274C\351\205\275\020x2\274!+\214\274S!p\275X0@\274\201\210I=a\203\207:de\320\2745\035\320\274\325\3600<\203\221\354\274:\313\333\274BSp\274\266\304\024\275K\022\221=~\277^\274\014\342\'<\356\313\002=\321\227\325\274P1\371\275\242\266\246;\3159>\275\177\355\002=p\236p=\337lL\275\352]\272=\320\375\220<{\267!=\017\217\204<M\364X\275\364`J\275-\r\240;\377:\270<_\302D<K<\341;\320\247\224=\001\221N<\n\243 \275\335\351x=\356\002\334<}\353\342\274x\234\247\274j\321Y\275\r\273\201<.\207U=\264\277\337<\026\377?=\n?4=fz\264\274\"\243\037\275C\247\311=\001\260\212\274\261\320\206;\\\310t<\253&\026\274\354\264\220\275\222\"\177\274\025\333\316\275qy+\274\354O\367<\256:\342<(\021F=f\030\211=\235\t;<\324\313-=\005\216a=\310\347\275\274\215V\267\274t\005\235<e_\037\275q\215\241;a\371\244=C\021\n\273\201\307\224;\320\313\000\276\226]A\273l\263\221\274\375\237+;N\013)\275mw8\275MI8<\321\217\332=\301\235\254;\030\025\036=\313\371H=Uv\222\275\360kD<\311\260\"=\355\221X=\2745\342\274)\233\025=\000\215\256<\204\376\325\273s\307;=\2105\335\274~0\340<A\034\344\275%N\222\274\221\334\230<4\375f:\276\006$\274?\312\035=M\310\313\274\312S\034\274R\350\340=\316E\034\275\262\005\264\274T\014:=\235\351N=\221\tQ=YzH\275\200\233\316= \322\374\274u\335-<\332\337\326\275|!\n=\001\373\010\273\000\311\005=O\315,\275\214\273\367<\341\210q\274\342\225O\275\353\305n;\024\254\004\275\3200!\275\225\374%\275P\326A\275\354v\302<l\331\227\275\220\326\001\275\373\177_;\313i\207<4\231\036\275\027^\304\274\t(\'\275\215\333\007\275*)\036=\370\320\343\273\277V\320\274$w\032=]\027\346\272\245\033\005\275\025i\311\274\230B\265\275Ez\202<\336\244\243;4\206>\274H\375]\2750h\004=\023\342\220=\267\010s\270\365\373\211=\t\214W=\301\311\361\274\213\335\347\273\317\241\307;\266A\235\274x\277N=\235^}\275\234b\341\274(\261\237\274\367\263\001\275_l\206\275\024x==\3144\035\275<.\237\274q{\032\274\200\0135<\275\264O=h?0\274\317\355r\275\364\004\320<.O\266<\2170\177\275\327K\350\274O\2365\274\354 \223=l{F<\334W\252\274\323\234\017\275\277R\217=v\372\246\274/f\366=\035h1\275\326\362Z\2751\035!=\366\306\312<:\260\214\274\300\240\226=x\'\026\2752\336[\275\355\271\213<\350z\231;\245\265\265<\2116\202\275\270\310\202\274\251\234\244=\240&j\274\342\3605=\241\224q\275\0349\376\274\252\273\226<\263\022<<G\027\014\275\223\202L\275\367\232\352;\223I\366<\026|\343<r\203\007\275\261{O=\252$\305\274\2478\274;\360\027t<r\331\005=\250p]<OfX=\001;\335=\001\314K<b\220\235\274\315\277\252\274v\254\027\275z\nA\274+<+=wC\226\275\200C\025=,*m\275\251\350\006\275\370\342\317\275\277^\211\275\305\201\013\275\246}\257\274wKM\275,7\304\275v\347v;\212\317\203=]\226\204\275`\354\271\273\314\363\017=.\001\010\275\242\335}<Y\337\274\275$\2628\275\214?\031=\207Wu=\n\035\274=\336\267!\2757\327;\275\\{\217\275@Z\027\2750\331-\274_\033 \275Er\272\273iv=\275\241\355\256\275\323\362a<\202\265@\275\331q\311\274U\270\264\273F \264=\032\240\"\275X\014\243\274\306\363\002\275\356\006\034\275\305\031\360<)\353\357\273\303*[\275\006\375\367\274\263\241\001=\002n\263\274\242\245\255\2743\177\226\275\016\241\207\275\361\314\251=n\306\227\274\007\231\033;\223\267\005\275\251jE<\032\276\014=\021\215\213\273\022A\034\274\256\342\266\272A\206\233=\304T\372<\224\\\361<4\010\371<\245\017-\275\231b\251=\331Y\200=\314\330Q=\362\245\006<\030\250\226=\021\274\336;CR\217=\256\033Z=j\210\361\274\264\010\262<Hs[\275\023\320\251<\t\005\002\275\007\224\301<\346\301l\275\032\252H\275\242\377%\275\347\361\243\274\202mV\275}\224\336\274e\2721\274L\313\023=\221\273\261\274u\245s\275\014\t\311\274\355\202\177<]W\365<\324\356\010\274\303y%\275%DE<4\000?\275=\360\031\270\307dG=\323N\370<\335i\n>\301\006\246\275\361K\330<\304g\034;\035s\371\274\235hF\274\341Y\300\275Y\360D\2757\315\347<\204\366\274\274\201\010\350<\303st<\215G\333;\n(t=<<\007\275\320\343\006=L\230\021\274\306\322\230;\240\351<<=-`=Ya =\024<\241\274\244\022\205\275\351\323\023\275a\247\t\275\020\337\t=\351\371\307<\037\020\002\275\371\253\317=\244\320)\275Su\344<\377\013\313\274\265k4=\240\347)\274@\026\235\275\231Z8\275\003\177\017=P\341\327;\276\325\000<\375a^<\200\266\247=\2025\262\274\021\375\362<\010\\J\275\236\010b\272\0052\235<\307Y\025\274\236\024a\275Am\313<\336\361\271=?\000\r\2750\333\324<mK\n\275\362\241$\274}\302>=\223}\255\275C\032\311\274\314\307\347:\351&\037\275l\273\'\273m\301\227\275\212\334\031\274n\370)\2718\277\345<\036d~=nu\n\274/\0146\2744\325=\275K\022\316;\351\216\006\274\303M\322\272>\274\253=\353\010\223\274O4\005\275\326\272J\275\272\225\212<\240jp\275\355\207C=\361\303&=\305%\032\275\324\002\n=\275\366%<y\273\372<\207\273\205\275\322l\344\274\214\367\310<@W)<}\274\234\275R(O<7A\323\2732\2750\275\320\275\267<_S\322\274v\266@=\246\252\362\273\260,-=\273\016\177\275\355~,<\270\355$=\311\026\224=\030\246\247<\367\233X;\021\364\023\2743xm\274\034)\273<\033\215H=B\323\003\275}2\342<\274\317\255<i\334\265\274{@/<\377%\001=\232\321&=\363\365g\274\332\200\344<F\375\037=\353\375@\274k\203m\275(\303/=j\315\214\274\350R\032\275\232\212\033=H\325\'\274m\247\365\274\226W\316\273>\0229\275cA\207\274>4B=\2236\267:\342\3526<\200\244\025=*\274\252=fd\001\275\233\325\260<F\376\304\275\3039\200;\316\006\323;\315\200\243\273vx\205=\347\273\275\271/\032\374<Wj\225<,\211z\275mx\262\271Zm\255:\253^\301\275i\270\245<v#\"=\331]\201\273\323]f\274\217#y;:\255\033=J\001\245\275)\004A=dCL<\202e\256\275\"I@:T\225\346<4\226<\275\3053\"\275\267OV=\210\362[\273\222W~<\3161\254\275\237\r\215\275qn\322=\341\306\270<n\305T=\326\247\361<Cx\005;j9\300\275\0360\232\274\300\024\334\273\350<z\275\204h\201\275619=\274\200\'\275*;7<\264\320\253;\356rn\275v*{\275\014\033\325=d\251\247<\246\331\353\273\231\352\020\275\033\"\354\274\370I\267<\314\\[\275\374\264\'\271VR\005\2759\036\230;\370\276\273<L\276\007=\250\336\216\274\301,\257<\227=\224\274\004\352\267\273f\323\221\273\365Zh=\322P\004\274\010\370&=}\215\356\274\220\377\033=\331K\235=\226\326a=\2652\304<\007S\034\275\232J\005\274\2437\250=hT\221\275\370\241\361\274\323\224\204\275\223\226\306\274\236\265\037=\331\0108<y\232 \275Hf\013<4\350\021=\261K\177=\340(t\2757\212\224=\347\265\303<\342\340!\275\322b#=\260\005\253=@\003\262<Y\257D=9SU=\341\033\275<&\214\332<q8\027=h\300\241\275}\020\204\275\226\311(=\203\345\262\274\177\234\373\274\021\236\356\274\034zl=ELM<\251\255\037\275r\315\356\274\024\250\326\2744\247\\=q\303\226\272\001\2145=D\345\331\275\201\276\263<)OG\275\342\t\025=\211\006\241\275\"\036\361\274r\234\000=UBi;%\366\250<L\275\023=\\\224_\274\246\004s\275p\376\246\274\2657S\275n#\200=\016/\322=\206)\241\275Ut\013<\026\330\266<\322d\376\273(\027\376;`9\351<kr3\274C\211\257<(\270[\275@\215J=\336\3559\272\225`\250=\304v~<<C\025\275\035w\220<\261\227B\275\301\024\207\274\342\344\023\274\032\226\234\274\303\000\337\274\'\026\340<\350\\\217\274\220DY\274\230\002\207\273w\235M\275M\210\327\274_\272\213\272\331{\027=\033\000\306\274$\021\316<\317\200@<\337e\242=\256R\253\274\261\347\353=es\n\275\232\320Z\275\303\322b\275\3020\366\2746\033\365\272=\214\226\274M\343\335<v\362V\275\335\227*\276\315\224\'\275\037*\372<\242\373\365\274Zy\242=}/|\274\037\306P=\177\317\254\274\271\276\245=\225\031n=.\336\362<\300\300\026=\306\310)=\302\302)\275\201\267\323\274!g\025=~\343d=\212\247\023\273b~\031\275\316,\332<h\265p=\227y\256\273\204\216\332\275L\312\307\273\331\021I\274\222-L<>\241/=\241\317\333\273\321#\n\2753\306a<\001R\222\272S\227\342<\307\024q\275\277U\000=\353\2454<\335\351g\275Y\3373\275\230q\021\273\217{\361<T\003\r<\246d\202\273\237\254\212\275\364\233,=\311*\346=\352\3241\274\273\250\244\275?e!=o\037i\274\260\305\221:\342e\272\275\013\237\217\274$q\256:\356\356\231<U\305\244;\204\255\236:t\376\203=\307\036\375=\302\253\n=\350\351\246\275\204\263X<\'\317\024=\021\372?\275\007\320Q=\022\023a=\177\177&<\300xx;\200\002j\274\325\\\002\275\254\321\270\274\345\356\017\275\252\335\200<.)\207<\270\245x\275n\310\306\274\225Ct<\254\010o=]\247@\273\210\240\027\272\006k\022\275\203\314\343\273\013\251&<\374\354\325\272kjk\275\224\t-\274,\221(=h?\205\274\0062:\275\327\235\223<\363K\022\275\3343u\274)\341\202=s\201\025\275$\300x\275v\023\365<\331\007&=\253\362\037<\353i\r=\262\235\'\275f\027{<;]\236<\365\221\023=\034c\305<\332\013x\273ZD\256\274\301o4\274\230\003z=\021\343B=\223\344u\274\262\000\357\273\267u\013\275\272\377\004=\235\261G\275\031\207\032;xK\033\275\331\252\257\274\231\n\257\275\263N\257;\354\232\312\273?\325\230\274C\346\225\274H~6\275\351|H\275@J2\275\302\340?\275*C\225\274m\307\035<\215\030\200<\266[\377<\023*\016\275(H\010<l\007Y<\277\242\021\275\322/\330<\264\322\276\274\306\364A;\000\241\203<Y\317g\275\275\365$=\023\321t</\210b<\337\n\205=J\021-\275?\226\376\274\2749,=\005\264\311<\300g\335\273\304\t\364\273\232\021;<\254\3667<2\270\371<\2174\374\274\030\226#=\354u\307<\344\253\256\274\261~\277\273\353\004\263\273,Q\200<\300\315\311\2742\331\007\275$\203\376<U\227\223<\007-\204<\267\360\375<\014\027H=L\365\006=|\355\377\274\"\205\211\275\031\375\203=ld\251=\037\376G=\374v\r=\2501\315\272\350h\225\274\020\246D\275\036\231\254\275\230}P\274\341f\324\275\277J\205\275\206\340\361;U*\230\275\263Q\002\275-\250\231\2759\223\024=\320s#\275\306G\340=\302\260\014\274e\246\360;\023\337P\275\262\235\255\275\214>H\274\264\243\343<\037E\227\275\n\212\205=Q\216\357;\242\201\224=\241\032\034\275Z\362\213\275\321#u;u\357U=J\027d<o\216\033=?\340\357<h\310\250\274~\3046=\302\225\'<\344\233V\275O\215\234<\363wp\275\317\352r\275Ez\236;\003\211\201=\365\215\244=\371\207\216\275k\021@\275\266\t\316;\351N\235\274\355\234N\274\260\031I=\021\275\310\274\216\240\327\274\224\366\205\274Sra\274L\255\332;\030\337\306\275\315\025\030\275\3620?=\274\332*\275\250\345\247\273\347\2642\274\2764+=@\214\257=R\004\017\276\022\000o\274\263\302@=\327\230`=\033hA<\254\234\240<h\360\236<\312\026\215\275\356]O\275\335w\321\2747\347\030=\016\377\302;\357i\302<\375\206\260=(\'\326\271\013QS<\014\336^\275U\301h\275\'\\\251;o`\274=\010\366\257\275\021\334\276<qo2\274[\002\021>R\247\\;\347\333\246\272\317\231a\273\307\366\205=\037\355\260\274\351\364\261<\366I\362\272\016z<\274\nN\265<\313\027\211=+\331\036\274\245\302\345<\225\305C\274\371\305\246<k\224\323\2745\021\362\274\374-\362\273\356i\233\275\376k\020=)\016E<\335A):\341h\300\272Ro\033\2731\362\312<\313\206W\275#8\213=\260m\002\274\243[\202=\234p\227<\246\331\233<\025\314\272\2744\273\202\2753\230\256<T\312L\275N\260I\274\370_f\274i\3319\275\241\233\317<\210\261\367\275\301\302\001=\2053\022\275]\210P=XK\267=\255(6\275\361R\265=\314\276Q<sU\254<\234\276\213\274\\\371\312\275\013\220y\2743k\213=^5\030<\303\217]=z\376\025\2754\336\226\275\333\340\254=\tEt=iv\253\274p\313M\275\354\272d\275eG\030\274N\300F;u\272\321\274>!\337\273Q\005\022\275\230+\202\274\234\212\021=k\373\025\273\274\231^<\036\217\220\274|\307]=\243Y\271=\220\254\321</>\021<\353Q.\275b<s<\007s\260<\\\200\020\2742;\330;\216\'K\275\315\200\017<\221\263\017\274\003m\004=\006\004\242\274\t7\206<;\2615=\250Gc\275\217\020\231:\231!!\275\331\216\200\275\273\203\250<P\323u\274l\324A<\256h5=\200\225\035=\327\231\246<\261CD=H\335X\274\333\230~\275\330\351\257<h\271\036;\037u\r=\2203N\275<k==\023\036\004>\273\300\302<\201\367\223:\327\320\351<\214\010)\273\001\3308\275\030\032\264=tQ\322<\351\202n\275\014b\310\275\217\177=\274\326\031&=\260\226\273\275\372>F\272\025\247D=G\277j\275FNO\275N\260\'\275v;\262<\\9\260=\013\025_<F\262\245\273\231xy\275#\177\035<\351a\377<,\243\235<\347Dc=\356\275\276\273\303\273\232;\336\271W\273\234\024\216=uR\007=U-\004\275Y\371\300\274w}t=\316x\230=&\274*=\"\334\333;y\030\035\275\020!\031<0dS=\353\021\336\275\275j\224\275\001(\003\275A\366\035<-v0<\210\237D\275}\016\250\275\274\353<=\262\227\271\273\020,\266\2758\251\200\275\313N\021=\310\366\243\274\350S\035<\260q\024\274!\3056<\020\314\217<\256Rw\275\010\277!=\t\000<\274\316\364\r\274\"\255>\275\243\327\320=\331\265\r\275\221z[\275\261\3377=\022\313-\274h\241m=}\372\332<\013\001\317<UM\010=\247-\020<yY\'=\240\252\014<\220\304\201\274q\r\203=\016^\220=\203\201\203<U\370\214<Vq\222\274\007L\006=\035\010\204=u\007`<\210X\367\273\024L\333\274M\n~;\027\310\324<\rO\2265\347\rr\273\230\256\\\275\232\233\326;\363\306\226=\331\247\260\275]\332\277\275G\024\213<R\304\316;\021E\353<S/N<\356]\306\273(P\240<\013\237\322\274X\033\r\274\374\242\374<\376[\t\275\262_!=X\255\235\273\300\357\214\275\001b\321\275\263\005e\271\203s\301\274$\035\002=H(\r;\303;B=H\0027\275$\316\323<\030?L;e\213u\275\347\2433=\265\007&\275e\302v\275_*1=\220*\221<\\\327g\274\234\261\000=\002h$\275\223\363*<#\317H\275\273mt<\n\216\311\274\0314Z\274\211\256\241=\034\225\203\274\371\310\366;KKu;\333\'G\275\002.\250<\312\215J\275M\r0\275\ne`<\341\225\322;O\220c=\310\251\240;F}Z=_\263\227=\010\355\213\275*\223\001=\207\355\203<P\314\022=\307 \210\272R}\306=\230\014s\2754t\213\275e\342\240\275O\'\207<\253o\330;>\271F=\257\375\210=^\\\016\2754\006\210<\273\220\007=Q\223\036=\370~Y\275\303g\217\275\214\207d=\"\301q=\335F\306\274\020\013{\274C\261z=\346\013\216<\032\301\274=\304\251a\274t\344\031\275\203\252\357\274H\020\201\275\235\316)\275\247^\345<\374\244\200\274\033\010\305==\027!;\376\376\"=5\357g<\371\003W=\023\211\343;\3601\364<\271J\'=`0\203\275\362\253D\275m?P\275\313vf;\0035A=\221\237D\274\021\035\017\275\006\250\314\274Q\366\000=\371\272~\275\212>\321<unN;\023\337\325<\324^\013\275\355\301\316\274AoV<?H\270\274k\0304\272\300i\007=3uG\275\003\302 \275\177$\246=c\302\"\275\246\337\332\274[:\232\2755\367\340<\355N&\274>\030)\275\026\275\234\274\217Z\246<\003\334j=\354Jl\275\337\370\033=i\361v\275\r0 =P^\305\274\247\026D<\352\242\324\273\013\231%=fxg\274\0103\236=I\037\246\271k\3254\275J\267\300\275\'A1\275-48\274\346\220\216<<aV=\032\261_\275l\211\304<Q\006&<h$\241<J\004f=\277\336\207=\274H}\275\363Kc<\024\244u<\312\241x<\204\225*=qn5\273\307\276\235\274k3\274\274\334n\266<\211 E<aD\316<DS\212=\356\270\301<\305,\365;\004\017#=\004eN=e)\224;\372w\234\275\221\264\200\275\236\262\272=67\206=7{\'\275-\311I<X\224\230\275}\276\216\275h\202\267=\000S\214\275\254;5=\377=\'=\272\"F\275\372\361L\274\244j\036\275\353\227\030>\370#\202=\215\306U<z\352U\275#\205<=\241\321\241:\2324Q\274}_\276\274\246p\204<\207\305\234\274\010<[=#\2223=^x0=R\3353\27510\212<\200I\244\274\363\031\250\275\013\317Z\275\014\375\242=v\244\032\275F\232\306<\356\366R\275%S\345\274l\231\357;\362D\n=]\007e\275\345\204Y\274\344\270\344<\344\364\264=\323KR<\332*\016\2759\014\314\274T77\275\227j\004<C$5\275x\014)<\223U\305=\304\376\336<~\333\r\276\267}\372;\251.\006=\001{\023=D\326`<T H=\335\027\316\274*o\320\274K\020\227\274L8\230=zS/\273\020\253\372<%XX<1\203[\275\351\325\r\275\311\333\234\273}\303\200\273\221\320\324<\252k&=QC,=\260\250\007\275*\276\315<\010\365\311=~\247\244<\334\300\305\274>!\214\275lD)\274c\204p\273c\306Q\275[\275\"<\217*g=\334yq</\345\345\273\024\341\023<+\304\216\274\262\217\037=\021\317\220\274G\223\204\275D\237&<\321r\033=\275Q\016\275x\337\264\274\244\240\357\274\003z&=$\375\340<\225\347\206\274/\243e<\260p]\274/\350\231<eF\022=1\025]=\304V7;E\n\300\274J\274^=\345\217{\273a\202\006\275\375\255#\275\270\371\371\274\360H#\275\257\273\354\274\031\020\367\274\243\264;\275Vc =\3139|=\t\302\312\273\273\014\013\275R\242c<\\Y\367\274\275c7\2751d\004\276R\210\343<\206\335\251\275%v\232=\336\314\205<\320\017\314\274\246<\271;d\273}\275\314\205@=\315l\214\275\217M\244;\347\035\226\275\017\001\232<\016\333%\275\246\235\224\275\316\371\315=\026\216\243<\023\325\"=\301\270\013\274_\321\037\275\220\277\002=8\347j=\353\310I\275\001bf\275\212QH\275\\m\203=\367x\371\274\327\317?\275\"T\022=\205\204\200\274\220\376\031\275\316l\220=\331\245\333\274\373\267\\\275\365~2\274\270\247\320\274n\013\'\275\023uO\275\321S\353<\326J<;\210>\302;l\310\307<\320\367\244\275\002\237\226\272,)9\275O\206H\274\333A?=<\312\250<\212\001\222;\204\335\202<MI\253\265}\333a=\277\242\207\275\241j\226<\302K\274\273\356\324\240\275\346\261F\272\365\363\003\275ed\340<8\030\243\274>\345\230<\223\224\026\275 \003|=\350:\214\274r\272\t<U\247\247;\032\351\2059t\272\327\274[m\246<\272\017\004=\243Q\244<\271m\031\274\363\202\233<K\237U<\201\032\306<a\261G\273]\205\336<%\274\235=]%\035\275\364{K\275\2774*\275\220\347\017\273\337t\203\274\336\312\020=\351\351\257<\377\327\014=\336\304\364\275#\037\256<\274\013\222=!\371S\275\234}\"\275\311\032\311<\\\206$\275s\305\036=\2055S\275b\233\205<\312v\272\273\225\227\252\275zM\273<\276\007C\275\253\363\275\273\375\265\272<\253\300\205;Gx@\274\327] \275;\322\317<\024\334e=\025t\232;\224\366\014\275@\n\217<\277\374\003\275?\364(=?\027\032\275\207\313\024=\216\244(\2759iy\272\006=S= \240\314;P,[\275t\025W=U{,\274T\220m\275AZ\215\275\362kf\274ui\030=\230|\274=\357\203\275\274q\211^=\004\374{<\335A\201\275N\027\336<\340%\243=\341@A<!B\255=G\324\327<\223\346g\275\243\177Y=XU\346<s\305\335\273\342>9<\311\030\247\274{I}\275n\205\346;\322\032%\275M\361&\2756\215T=+F\311;\2636\356;\352e\013=,\014\026=\004*\261\2749!\265\2743\346\206\275r\204\217=\213s\\=\331\375B=\261\016a=Q\326\211\274\341\t\377<)i\016=\375\2735=Q\215\220=\213\216==M\217\207\275\023\362\331<\274\323Z\274\346\266\367\275\374B\261\275\010\362\007\275\304T\r=\010\374\213\275\032\306\006\274\332u\332\273\214w\323=\005\307{\274\275\317\315\274\nJ*<\214\367\247=\227!4=\330C\203<7\275\221=\257\240\300\274\347\351\017\275\302\031y\275\224u\"\275\377\"\330\275\312l\021\275\333\003\020=\3437\323<\\\253\037<\307\364\237\274Da\270<1\201h<c4G<c\347\260\274\013\026\362<\340\357n=n`\031=\366\253\026\275\370\371\024\275\271\326\343<N$\203=x\031E<\227\300\020\274\217\326J\275\327(\207=\265\301\377<}\364C\275\225e\004\275\312(i=(B\354<DqK\274\325\354J;@\367\016\275k~\345\274\370\3567=B=.<\224\216\373;\221h,<Ms\214\272\020,\203\275fR\033=\004\212\031\275\311s>=H\014\217;\"H^=\256\024\377\274\217\306\314=\025\271A\275\265\352O=\265\3024=WEr=\364|q\274*\264\212\274\006\035\212=\004F\215\274l\341\205=\223\377\215\275\231\311\227\274\2118\212\273\334\260\002\275\030\223a\274M\024\206=:oQ\273.\020\333<\304\2651<\243C\342\275\2457\3439\030\267\266\272O\004h<5\001\223=\374.}\274\021\rW=\034\230\240\2751U\225<>\266\254<a\236\351<\231\r\240\274\345\017\007\275\207\374\006=W\266@<\032\035Z\275;!0\275\307?\204<\251D==G:\013\275/.\';\256L\014\275gv\265\275\316\374b\275S\300\226=\332\374\346\274y\3052\275\346C\211\275\352j\035\275\223\347\177=\220\211\325=\360[\247\275c$~\272&\344Y\274\204a\212\274\235\312(\275\303|\002>\206m\226\275\366&\037=\323\2715\274h\213=;\334d+\275\t\337o<\327\2379\275e\364[\275V\255\240=\303t\200<\025\307\201\275\276\336!\274\rG&\274\005-8\275/?I=[\237\254<\253\317\005<\030\"4;\004\256\323\273\250\245\227\273^B\251<\300\202\007=\277\2539=Te\022<\313\006\010\275/L[\275/\217\026;p\350y\274!\244j\275\273\310\374\273^\213\264\274\r\"\351<y\002\322<\005\367\231<\036}\030\274\311\006$\274Jq\"\275Q\024\002=\252\305\r=\227\212\254\275$\312\255\275\242\367k=\327.\"\275\030\003D=\327\235\250\274\313A\235<Ai\017<\220\3039\274\347\240\342<\260@@\275o\220\372\274\343\344\350\2740j\037=\323\373\301\273\301\n\000<Se\342\274\0027\351\274\260r\226<Y\033\316<\"\255\227<\013\210;=\333\257\241=\377\204}<\030L\224\275\017a\273<\303\024\177=I1\032\275\013\301\325=\365\305\001<\233,-=s\036\024\273\213\276\301<\\=\227=\002;\235\275u*\025=\361\026\017\275G\004J\275\212\260[\275\244\2552\2741\214\366\274<3\215;\353j\276<\007\355\227;\214\367#\275\333\256\206=\026W|=\315\006\241<\330\222\203;0\\\321\2731\\5\275\244x3\275i\271G\274F\367\250=A\214\252\274\037v\243<\370\204\034\275\036{\241<bC\214\275x\207\202=)c#=\2323m\275|;\303;_\245}=\001\202\211\274G\020N\275mK\221=\204N =\345\030\211\274\337{6\274\222\005\247=\353\365\252\275\230,\242\275\347\347\206\275f\027\352\274\244;\204\274\247\327\244<\006\177\273<i\004\307<y\214\021<\311\037x\274\027\266\371\273\336\001\3728\236\315W<\274\220y\274?\257\024\275\226\201h<!\235\016\275\037\032\222<\377\240><xf\275<\204\376\004\275[@\024\275\211Wd\275/$\004=\032-\017=\033\237\034\275c\024i;\336\300\257<A\356\016\275f\211\017\273\002\256\210=U_\034\274\007\260N\275\244|\324\274\347\365W\275\322\330\013=\377D\266\274\0241==\033\354\003=r\264\315\270\032\274\177=\243QJ=\'S\025=\250\224\003=\246F\215;JC\201\274r\200F=\363\313\335;\261\232\365\273\022\260\272=mH\376\273/\'\245\275\330\3168=\3233\304<K\356p=\255\227\357\275\235<\311<K9\177<8\200\257\272\212\374\206\274\373\262b\275{\355\270\274\033\201\265<\372\005\257;\347e}<\005\341\226\272\234w\306<]8_\275\253s\004<\252I\310\275\210vv\275\000\210\216=\033\000\331\2745o,\275{\365\230<\325\346F\275w\321\020\275hL \275\021!\006=\370\276\001\275k\275\336\274\367p\203<\037\354\254<\271\265\252\273\322w\247\272J\261$;\005I2\274p7\213=\304\372\326<;,\245\273-g0=\311$l=s\363x\275\377\034!=\311\2305\275\235\223:=m\000\325\274\374\371\214=\356#\357\274n\\\001\275\262\352\375:\240\346\230\274H\311d=L\007\323\273\'\273\277\274\217\262\214\275\234_\305\274?\177w\275\301\306\027\275l\"\226=\320sA=\374`\207\275\351\256(\275\307S\032=\253FZ=\004\r\024=\314\3635>@\373\276<\026\330\n\275\252\277\r\275\370\013\340=\352\330\371<\022\237\272<\265a\254\274\2005\215;?j\231<\365w\374<\330#6\275\250\367\232\275\222<$=\252Q\361<\272\266\263<7z\300\275\335\3553\275D\352)=\r~\005=-\320\035<Pn9=\340*\241\2752\340\217\275r3\304;\327\311:<\\\203\021<\226Tv\275\373\363\"\274_\227\027=8F\010<!\352|=\262\376\241\274A\352\273=\245\343\302<R\337\017\275\214\272R=\010\364\220<\2175N\274$\203p\273M\332\'=\370\301\224\275\n!\312<\340p\330<\276\t\217\274M\304R\275\363\345\014<\377\001\036=\2723\037\275\250\354R;{\037\025\274E$\261\274\203P\263\273\273Q\327=\234\300v\274\342\304G:\270q\216\275\337\264r=3\276\r=\266\367\235\274.\210\326</[^</\3652=\311G\251;p\031N;V\342i=J\334\334\274\320\223\375\274}\211\030=\340w\312=(d)=\370$\206\273\307\272\374\274:\275<\275<\250\n\275\036\310c\274\3417}<\247;8=\262\261\323\275\004\222\235:H\036\311\273\275Y5\275\315\004\034\275\201WE;Kw&=\266\336\247<\274X\241\275Q\337\261\273\227\025j<\261\'\250=N\244\350<YK%\275\324\262\r;h\223\344;s\222\002=~\263\263\274G\365\276\275\2211y\275\222`\356<\272^\013=_\204\035\275\331\030\005=\013\334p=\221\371\351\273v\340\307\274\340\370\005<\320g\354\274\361a\265<k\211q\275b\221\021>\345\315\361<u\264g<\335\324\221<#\206\242\275\320\244\241\273\341a\002<\310x,\275\310\021\004=\366\004\375<J\312\320\274\270-\010\271k\021\215\275\026R\005\275iY\360;qpQ\275!\345\"\275Y\032l\275\365\370>=\031\037y\275\320\025\201<Fr\004\274\373\017\013\275\312\000\"=m6\r\275ny\026=\200=\216\275\2300\255;,\334\344;\372\371\257\275\226\270\303;\371/\003\275Go\204;u\335\341<\237\264\022\275\367@\316\274\022U\035<\020dw\274\003\366==\017\244\345\274rM\212<@\311\335\274\262\207\016\275)e\006=\327\211W\275\216+\004<O\242\205<\331\260\225=\375\223\321;H;\t<\246\031\021\275\354H\240\274\207X\334\273i6B\275+\362_\275LD\245=\347?\370<Z\306\350<\277\376s\275p\245#\275\252\373&=\324\363v\275\256\376\245\273*\337\227\275\300\266\241\274d\020\333\275\220-l<\224\313\032=\001\331\005< \337]=MJ\027\274K\212\002\275Wb\204\275\265\001\252=\206\267\233<\3208\307\272\2046a=\\b\032\275\305\321\300=\353\374Y\275\370\0025<M\333\315<\220\317\307\274s\360\245\2734*o\275.\030X\272\364\372_\271\014\206\364\274\261\033\301\274\244\211\311:F\355v\274\'\237D\275\027M\234\274\206 D=\355S+\274}\315\220\275\361h\377\274\241\202D\275\376\217v\275\244\224\276<\357V\'=ed\221\274\342\017\240=\257\236\340<&\206z\274\250\330\201=Q*\034=\200\023>=\225}\007=\026\354)\275\255\254\312<\326N\000<\314\2011\275d\030\304=jj\263<3p\323\274\006\264\263\275\263O+\275\2110g\275\326r\030<\005\201\302:\016o\261\274\273$0=aC\003\275\177\251x<\204\254\304\274\303\273\224<U\'\037\275\3507\231\273\371\226\030\276\364\327\216<\276\235\026<\317\r\324\274\356\241\371\274JX\n=\026\032\233<\303\260>\275\177cs<@\201\271=z\304\233\274\204O\236\275\231\253\224\275\030\003\366<\271\372\231\274!d\034\275NB&\2752;\342<I\025\310\275~\033\236\275#\371\241\275\216@\210=_\310\223<\275\354)=\357O\235=\262=\250\273\3660+\273#\024\013=\371\033\007\275\326)\"=\036\346\307\274\013\351p=\335\257\304;\214@\210\274\240Kk\2756\346\250\274\211\025\216\274\231Y\237\273r\020\244=\025R\207\275\354&9\275\3367\365;\332x\343;\001n?=\205\034\207\275\343\243Z\274d_\201<0\267E<\363r\245\274L[9=\034\2513\275\354\233&\273q\371^\275Qg\007\275\323\361\213\2757\267\210\275\357\253\010\275\260\364\240\2742F\255\274\332-t\274cg\013=x p\275(\340\212<\177%1\275\335\231\254<\027\311\303\273C\373\313<\035\257<\275m\357\253<\343\225\264\274\016*\311\275IM\344\274-0\270\275c\207\003>\362U\007\275\232\266\253=\261z\264<vq\230\273\"\341\357<16\002=\310U\003=\342\202E\275*\000m\275\357\031\212<\032\2600=Fr,=\362W\373<\030\3767=\306\302\006;\r:v=\006\2357=5\334\014\275x\003\254\274Jg\206=\260\360!=!\215\221;V\0366\273\0335\027\275\210\325\203\275\"4\374<\370\n \275\204\"\013\274M2\202<\310|f;\311\371\326;\003\344A\274\2206\002\274\325\232\027<<\207\004<AdW\274r/T\274|\232\'=#\246\246\274\221F\367<6\214Z=[\021\202=\"\027\034\275\255\204w=\260~\267\274\310\032A=\nk@<\235\037\207\274\256\353\031;{\"\001<>\312Z=\330\352Q<\355|w\275\305>s\275\363\035R<7\352\200=M\025\225<\313\223\346\274\032\373\314\274q^\020;=\306v\275\275I\370\271y\021\220\274\301r\321\274{\034\026=YUI=\212\3739\272\235\330\275\274\002J\023<.9\006<X\321\026=\236c\214\274e\354\2469\275cy\272t\300\033\274N\376@\275\361\205,=zeC\275\265\326\246<\223\300\203<\315I\234<`\372k=\202+\376\274\312w\020\2752\357\307=\303\266\334<B\201@\274\356\005\314\2741EI\275\024J#\275\002\016-;\353\216\272=\364\330\251\275\314\3668\275\003\303.\275\342\244\263\275\257+\224\275\351\244\031\272\"\265\236=\022_8\273\320\352\\=~\315\205<XYy\275s\034.=\'\270H=\246\345\032\274\026)\337\275\322\365\033=\215=\017=\342\273F=\304\214%\274\266\346\364\272\212b\314=\331\243\215:\311b1<\244\263K\275w\335\207\275\237\351\035\275\203|\023=\037\275J\274\307L-<\247<\273\274+\312\331\273d\215\316\275\353F\032\274\315M\370\274\357\236G\275f\364\307\274y\223\242=\020\tu\275\251\017<\274a\006\371\273\341\336\350\274\327j\006\275\235*I\275\224\325\t=\001\370h=mB\222=J-;=mT*\273N\345M\275\2507\013=#-\340\273\3607!\275\035\361\203<,\364\355<\261\300\n=\345\274\274;1\r]\274\263\225h\274\265\025\253<\224\376\213<\356\363\367\273?\024\001\276\377;|\275\351G\013\275\n\213u\275M*b<h8\216\275\264A(\275j\244b\275\345\010\334<\302MB\275\346\220\357<\202\323\000\276F\260\351<\344\203\005<\344\256 \275\027\036\247\275\257\315\302\274\362\200\266<{k8=\253*\367\272\233\345<\275d\251\303=y\254\213\275T\206\255=7\340\370<\261\266x\273\301qc=9Z|<{\3440<\016\245v<\310\252~=\334 \310\273~.\363\274St\325\273\237\317!\275\310\244\315\275#\257\305<qQ\211=q\227G\275\361_|=m\242\341\275\032\'\\=\344\205\322<\305zP=\\\244e;K\007\310\274\\\210\222\273H\036b<\007\200\263\275\237\241\206\275[\313\336;$4\027\275|O\260<3\275\300<\376\367\'\275\001\3322=8\262,=K^0\275\224\007\234\273\254\213\005\275Q\275\336<\261\264*;)m\034=\324Y\314<\202\237-=\r\227\035=\362gb\274fii\275\323i7=\341\375+\275U\211\366<]L\300\275\014L\310<\220\221\202\275\274{\300\275k\364\036=}\2664=\275\022\320<~i}<\344\3421\274\211\030\234<|\341g\274 ?\247\275\324\262\352=\217T4<\\\247\323<@\240\224<\030\327\007\275HT\035=\320\330\234\274\024\275=\275E\274c\275QZ\022=-\302\204\274\225\252\335\274\177\256\310=U\352\206=\370\365\\<h\346\267<\021\213\321\274\236\036\303<&\350c<\363\315\220=\330O\212\275n2\246\274\230\t\220\274H+\233\275A\322\237<\2253d=\021\344\t\275\341%\336<\357\205\243;\035B\037=3Q\205\275\320\314\351<\374\326\364\274\255\002\354<\356\344\341\272\343\3256=\200\007\353<\023Ys=\263~i<I\243-\273{\021\253<<8X\275\304C\267<\243\364&=\t\307\237\274\312\022\277<\240\230X\275S\322\366<\t6\363<\355\353f\275-\321\260\274<02\2758S\257<y\302\304\274\330\035\325=34\210=r\025\232\274Z\233\240\275\314 a\275k\033\237=z\\\025\275\377\212\202<\347K\267<\344\314\262\274\021\222\254\275No\266<\357\005\250\274\242\235\336<\215f\317\274\220\016z\275-~(=b\010\200\275\037\304\200\275\007\241\034\275j\352m\275\262\215\266\275o\356\006<-x\251<\274\235=\275\024\203@\275||\010<x\323\333\273o\256\024=((L\275\216t\340<|\363j\274\356\010$=b\017\247<6\232\333\274\376\225\n\275C!\025=\335|z\273\273\250\224;\030\033\357;m?G=\265\022u=D\010d\270\222\034\364\273\214\034A<\036\374U=c\321\246=\350\311\243<\210\207p\272p\367i=\256\311\020=z\275&\275hm\200;I\323p=\035x\227\275^\327j\275\350\230U\275>v\224\275\303\332\013\274 \314\013=\203\205\347<\343\261\343<e\r=;/\363.<8f1<\305\333\024\275\\(u\274\354\246Y\275\212m\267\275hd1\2746e\264\273\t\362\315<\000\364\301<;<:\275\244f\350;\253\302\202\275\313\303i\274\273EL\275\320Tx=\363J\331\273|\366\366<\360\221|\274|x\211\275|l(<=-\223\274\253\205\274<B\022v\275;\3240;\365)o\274(\242\260<\312o\251\275\374\033\n\275%P\251\274Y\230z=\314\360\021\275\311h\202=\025\241 \273\361o@\275\245A\211\274\330\210s=p$\253=\260G\240\274\377\013\363\273\320\305\223\274\253\034\373\274\353/\230;j\316\216<\245\021\030;\302\324\373\272\323\263\337<\323;\365<@\300f=\370s$=\3014\217<Y\275\302=\372\336\267\273\245\200\262=7\324\205<\360\331r\275\260\320\206\275\302\246k9\311\n\337<\242G]\275\3745\177<\314L\236<\3177=<6+\346\274G\020\031=[\260/;8`O\275\r\010\352:|W\027=:\327\006\274\r2\230\274$\226.\274y!m<]\274\206\275l\375\233=\201o\2269\316\256\226=BK\330=\032\026H\274\361\035\272\275\341\3573<\313>\204=R(`\274\207\323 <\321r\222\273\026\230a\2747\324\035;O\304b\275\n\355\031=\007\364x\275,\365\242\275a\341O\275F,\315\273({S=M\233\205<\3631\374\271Jf\263\274\302U\030:7r\374\274!)N=bUF\273f\312\370;(w\214<\'\321):\274\264\334\274\363@l= zr\2750\265\214\274\376\rk\275\rra:\035{k\274\337Z\264\272|\354\265\275\312\217J=L\324&<\360,\035:\202\260\004=\205O_=\344\361\321\275|\302\247\273\243\235(\274\351M\201\274\013E\330<\357\241\031\275)\325\336<\324J\377\273!\204T=\202<\225;\314\"\341\275\222kp=\304f\n\275\010\231r=\253\352 <o\372\310\274E\247\230=\216\314\376\274\234\t\264\275\010\302y<\214\177\317=\217\0101\275s\332\263\272%\305+=n#-\275\021\274\004=\306\232F\274\330v\234\274\200p\304<3U\214=\342\025\n<5\027\003\274\262\360\014\275r\257U=w\325X\275\314\365\007;-\366\013\275gPy<\235\370\304\274\304\362\347\274\253D4<\367\337(;\3618\037\275\352@\320\274\312H\214\274L\353D<vj\371\274\227P\t\274\023\223\217=\316\243\203\273\206\234\007<\373]K\275\213;\356=}3\364\274\313\256\377;\325i\340\274\013\371\262\2742\023\022\275}X\216:\363x\224\274\315\014\211=\364\036\301;\211\023\226=\316\316\022\2759Z\215<\241\315}<x\235\346\273\210?[;\027Dt<\340E\203\274\325\300a\275\320\306\377;\177IT\275\232\224\216=\317\337\276\273\342t_=\235\372b<\004\032\244\275\016\2722\275\240\2611\275H\004\220\275\352\272\202;\226 \246\274\265\355\352<\001\264\313\273\342\243\251\275\312\366.=H\322g\275\213\322m\275\315uX=\024t\251=\252\321\224\274\033\323[<\204;\377\273\246\260\211<\303\363\254\275|q\232=\335\307\223\275Y\361\202\274\274\306Z<\371%)=\016U\r\274\366v\252\273\216\261\302=)\234\217<\311q\333\274\r\301P=\214\0061=\372\321\206\2759\001\201\273\215I\025\271\013\245\237;\034\325\026\274\323\362\006=iQ\037\274p\326\222\275~\231\216<\223\341\344\274\217\246\256\274\216-\254\275~9\204\275\027\010U\275\267K\002;\260H\373\274\205\270\307\273r\215\023\275\215j\250=\240@\244<&\274\330<\335i\023\275\266m6<\312u)\275\\p\201\273\255f\272=\r\352\010=\322\213U\275\021=\005=\200\3725=\263\253\016\273\271\346+;TY)=\366\260\315<~\266\203\275;V#=u.\255\275\337.\r\275\036\304\374\274T(\225\274\243\361\255={T\200=\321\376\266<5\253\036=\257\tw\275\337\024\247<\002\343\210\275,\241J:e\206\343<\264#\273<lds=5\365\267<\3526K\275\005\326\007=b\264\256\273\240\n\217\274\213~\301\274\004\346\033\275\233\267c=\236D\336\273%\0208\2749@0\274\370\'\355;\025\370\003\275\351\245\244\274V\030\237\273\036\227\202\274\247\036\260<\361\274\221\275\377\365:\275\204z+\275\253\026\224<T\217b\275ub4\274\000j\017\275rGO\275\267\341\251\272\216T\332\274=\327E\274N\327\257\274{\342\335<\266(\t\275r\351,;#b\235\274d\210\363\273h\222\007<(j\274<\365\375\005=\246\201\373\274\203\247\275\274J+\330\274QYb\275@\000x\274\214$\240<d\2323\275?\344A=\331\021w\275\326\260\374;-\322\256\275\361\226\324<\025\013\330<\001\2018=\315\320\270\274:1\022\275\242\237\265<\315hD=\214\353\033\275\334u\277;Lo=<\2507\277\275\000\244\203\274\220/\243\273\200\306\032\275\023\331,\274Z_\005=\3361y\275E\023s=\235Eq\274\034\261\207\274\"\375C=B\272y:\343O\020=Q\026w=$d<=O3)=\027\244~=[\261\253<\025[}\275p\223\276\274\252A4;QD5=\226\342\221\274\230\360\366;U4\366\274\343\227\254\275c\274\216<\367|w=\"\262\323<\010\3776<\244\313\241=\272\t\017<\242\013\244<0\325\227<h\271\362<!\371U\275\245\"\205=\025ee=\301\003\212\275\341\254\203=\231\356\220<\304W\227=O\206\177\275d\370\273\274O^\2309}\3517<\251\242y\275\025w\252<>\263\'=\212]\306;A(\246=\034\227=\2754\233j\272\260\t\241\274p\003\237=\212\200\022<=\251\027\275\230\014\206\274\215&\316\275\272\327\266\274`\214\t=\003\310\362\275=@\"=\005.\220\274\334=\'=\361\346\"\274\364\302)\274\213\257\002=\201\377\226\275\004oh\275\200\343];\214\016\\<\016\365p\274D\317\370<\316\340:=\334\n\313<\357^\307\274J\370\n\274\316)\366<^\026U=<\325=\2743#3\274\027\250&=l\331\262=\367\320\235\274\265\235L\274\325\247\306\273\207\231\205<\247\363\236<W<\300\274\375\024)\275N\236\316<\034*\221\275&\rF\274\314l\235<\taG=\374\345\222<\031\005\326<\207~\235\273\304\352\033\275\031Z\3639\227\242^=\365V\271=\333|\227\274-O\305<f.S\275\342$\025\275\220\226\260<;\0373=\223>\301\275o\315:\275\032_.<R\017\370<\203\nN\275\360\306\344=\251Y\037\274k\342%=K \326\275\325r\316\274b\356\245<\363\356\n=\352\007q;\353\234v=\031\223{\275M4y\275[E9\275JOZ\275\201\231o\275\376\270\304\273@\246o\275\252\257\'=\251\341q\274\376?7\275\324\347\303\274\363\260?=S\277\351<\267I\312\274Z\r\227\274f/\037=\022\001\271;\306l\n=\271\013\275:<1I=\241\022<<\275b\355\274\243\000\303<YHP=-\334\227<\277\231\375= w\026=\020qy\275\226\033\333\274\326w\007\275\277\306\000\275\264A\331<\223\356\237\274\340\242G\27507\271<-\013|<C\373\333<\200\221\255=\026\2130\275\307\303\306=\331\323\304=\003+c\275q\211\t\275\24696=\220\001\276<\tX\230;\306\363`\273\273\365\210;~0\324\274\367\336|=\340Y\031:j}\332=\200`Q=mY,\275\230\177\210=\374\207\\\274S\233\216<\347\331\2149\210\312\024=D0/<H/4=;=\204\272\343\233\t=\253\355\253=\371\367\274<\003\225<\275ZTo\275\264\256\035=\243~\203\273g\360\237\275\005\217\231=\214\217\223\274\321\324Y\275\305\317\370;\022\377\307\274\032\364\010=\226f)\275\325\331\340<\033\301\262<UW\265\273Q\341s=g\222\264<\002\317%=\366\023\233<1z\351\274(~\003\2757=\267\275\374\2205\274\n\316\216=\202\262\377<\013\362$=1\314\203\274\324\2653\274\022\241/=Q\021X=(\034\017=G\314\311\274\"#k=\005\244\027\275\006\241\211\2738M \275\036\245\224=\031;\260\275\335\340\027\2753\002z=\260`\r=w\243\005=\217\266H\274\311\374\002\275\205\372|\275uhT\275\353\371`=\355?d=\003\347P\272\273\023\034\275\021\367u\275\237b%<B\3437=t\334%=S\031\347<cm\000>`\247\242\2758\222\265=\212\235\274<g\345\206=]f\r\275|\377\\\275\325\005\223;)Ze=\210\203B=\203\254G=S\344\362\273\301\254\244\275\330\265\314\274x\010\370\275\231b\330\274\016\233\242\274p@\005\276\213x4\275\264\233\002\275\216\233\305:\333\243\313\274\226\262\323<(up<c\337K=9\021u<\211/\021\275B<5<80\244<\031\234\377\274\307?\021=c\301\014\275\305\022\366\273\013\3415=G\230;=\240=\213\274\032B\026\273E2B<\355\224T<\234\022_<h\260\242\274\003:j=\245\237}\2747\362\036=\r\315L=?\365l\275g\344\277\274\260\020\245<\261M\025\275j\345`=A\207H\274?!6\275t\001H<\367i\'=\272\221\033\275U\010K\275\233\006Z<\030\004\331\270\201\323\006\275\203o\211\275p\342\002\275\\{\361<y\361\242\274z\021\'=&\rD\275\250\236;\275\200\365K\275\231\320\246=\031!G\274\305\026N=\336\247\226\274\2201\004\275<\026\276\273*\026\262=>\014\266;m\265\277\271(\272y\275\020\333\345<\032F\210\274\340>\036\275p\350Z\275F5\247=F\357$\275\303\272]\275\367u\021;vn\343<\2702\001\275T^\262:\366\276!<g^\312;\376;\007\275\342\225\227\273\342\037D< a%\275\350\310\223;\376\272\237=\371\016\302\275i\362\374<`xj\275\352_\201<`\017\341=d*m=\3336\327<\315\244\267<\014O\265<\346\201\360\273\312\301O\275\333/.=b\374\3359\214\344:=Bd\245<v\343P\275\311\202\203:+H\014\274\264\255H\273\327\255\001=\030\330\332\274\003A?\275\333,\372\274\025]D\275r\276\365\274N\342\215\275\"\035\377;\\\210\212=\316\227\005=\003\255S\2759u\257<kk\215<\\\260\307\274pe\3057Gwh\275>\341\213\274\332Q\207\275*\223\035\275\271d\346<\221:\227\275\245\313$=\235]\361<\263R\n=\"\217A\275\312\223Q<+\r\350;\262\201)=\2777R\275r\\t=\216\3336=\010z\256\275\327B\303<\257\361\224\275en\017\275S\372(=\333\\\271\273\034\302G<\307\306)<:\235j=UQ\361=s\'x\275\324\342\271\274\253\t\237<\252|\273;y<\332<\262\312\273\274\225\037j\275gS\352\274\004\201\275=\211\354\232<\312\322N<^\320\254=\364p\014=\331\210\305\274(\231\033<H\247\252\274\025\306\255\274!E\\=;N\240<.\030.\275[1\217\274W\303D<\016\n}=U\201\260\275\214(E\275b\3439\274\325\037\211\275\021:\222\274\273O%=\366Y\305=\222(\267<\273\216\013\275\035\377+9z\373\316\274h\2340:K!6\275\346$\024\275_MR=\177\2052\274\2221\215\274\346\313,\275E`\312\274H\341+=$\221\253<\032,_=\334\207\242=\325M\237;0x\360<\202Y\220;A\335\203=\304\233c=\342\235d<E\207\250\274\223:K<\207{\323<I\272\326;/\314P<\303H\204<\000\357\207\275\177\241\366\274\315\251\370<\216\276\t>%\013\336\273\245\243\022\275/\213+\274\355\252\327\274\353\313\004\275\340Az<\0140\233\275K|\267\274\357n\236\274T\266\330<\216\207\017<\303K\214=f/\033\275\243F`=\243*C\274\034\335\353=9\303\262<\"Y\027\274\332{\021\2758\013\236\272z\256\237;\305\"\213\275\242\212!\273f\032N\275\215\372\010\275\275\206\200<5Ov=\002\001\025=O\301&\275\024=\013\275gt\301<]o\364<\243\337\"\274s\371\026<\031y4=\333\252X<\247qW\275\306\r==\004\212\256\274\210\316N=\352o\256<\303\013\031\275\372\256#\275\007\356R\275Efe:L3/=\010\251n=\002\273$<\233c\010\274b\347y<\022\024\t\275\276\022\374\274FO\320\274\305\370\323\275[0l\275\323\244\277<\254\035>=\321\230\024=$2>\275\322\037\320\275\237\356\343=\031\023\031=\246\244\006=Q\224\356\2743\334\034=\357\027Y\275- \237\272c\225\026= #2=\344\376\213=\215\216\306<|\325\342\274,\003!=\252u\267;\254\270\202\274\2630a\275e\243y\274\211\r\017=LD\236\274{\212\226=ku\231\275\222I\343\275\363{\240;\340\014=<_\227\247\274.\233\277<V\374\230<\237\031\215=\377\t\313:\235\010A=`\357\023\275\207]\016\275?o\014=\212~\005\273\377}\000\275\262\216\266=\306*&=\226\375\037<\205\301\336;\374$<=P;0\274\303\024I\275LB\211\275w\311 =24\310<%uL<\205\'9\275\362\337\357<\324\331\025=\025s\220=x\345\231\275V\373\212=xS\021;\\\312\r=\252R\213\275\343\301\306=\347\321I=B`\006\274cL$=?Q-=\214\277\005=O\347\265\275\255\253^=1\017d<\"\257\034<=\225\301;\204p\350;\337\n&=6]F=\010v\003=O\0007\275\343\304%=Z\337\t<\245\'\256\275\207\217\334\274u\3667=\201\332\361<\021f\227;4G1\2759\'*=\\\023c<p\351\177;\303p\304\273N(\367\274\224\235\317=\321\001 =\211\354\177\275\034\320\277\275\t\221\006<\215\016#<\317\365D=a\000\240<\227\002\355\2750\227\200\274\013\226B\274\033\355\272;ph\226\274\033gX=\025\270\014\276=B\024=;-m\274\220\353\304\274!\344\022\274\360\244h\274\261\326\t=s2\304<\334\270~\274\021\351>\275\013\032\253;\252t\332\274L\337d=\232\350U\274\344\374\001=\375@}\275y;3\274s+L=\326_\212=\343q)<f\236\253<\027vg<\327\001\261\274\262_U=w\337/<\350\315a<\232\271\007=\250(\034=D\270\330\274\215\037D\275\275{\341\274L/\254\274\027\'\016\275\265\350+\275\3615i\275\222\237.=\177\234\257\273\260\376\306\274\020#O\275\276Q\017=\323\222\351<\227\014i;\213J\365<\222\343\'<\265\225~<h\301>\274Q\265\262< \231\\\274\020\335\210\275\252\300<\275\177\266*=\3001\202\275\375\020&\274\"\260\213=\005\003\005\276H\242\"=|9^\275\277\246\307<\035|\223\275.\244\270=W\020\227<\026\n\"\275]n\206<\225\304\016:\202\377\n\274T\203M\275\030\355,<\3374\217<Nhf=\266\332b<\346\240w\2751E\024\275\267 :\275\213\025\234\275Rp\352;\237\354$\273O}\330\274\014\303\365\273\013\304\221\275\274\255\234\275\371\360\373;z{\270=\00645\274\344O\201=\370\2318=\301\316\341<\234?\233\275\224\346n<bl\244\275Y\272\025\275G\337Q<#\251K\274f\201\307\274\266\003\t:\r\243U=\252)\036\275\341V\216<\262\241#\275\222\257\204\275F>\300\274\3320r\274\373\252\223\274\003\374\034\273\210W&=\251\242\013\275\335>\242=}\203/=R\365\246<\245\005\036=\300\264M=\203\260\211<<\265@\275w6O\275\240wv<X\023;\275\233\341{=i\253=<\335\200\241\275\367\212)\275;\201.\275a\203\250\274\364\332K;\030\330\265<9G\013=SPi\275\317Q.\2740&\2409\271\235\342<jj\000=\005\363c=\341\000\207<\270\303p\275\'\245\317<\373w[\275\320i\326\274\373Y]\275T\235U\275e\031\274\274\362\310\230\275\254\377\370;\356I9\274`\033\016=\260z\326<\007\332\222=(\n\010\275\251\354\"=\3140\352<$\271\243\275\325t\351\274\021\313\250\275\267\331\251\274\000\321.\275\343\372\032<2u\264=\021;L;ii-=\245\271p\273\314\232\363\274>b\335\275\3455u=\253\326]\275\371Cr\274\215\355$\275\224\236\244\274\323\311j<\014\303\330\275Co\033=92\035=7\261\252:\016\311&=\037q\231<`\035\201\275\006D \275\345\030\334<\240_\034\274\352\001\313\274\352\031b\273\213\\\"\276}\"h\275\037\201W\275\241\276!\275\255_z\275\227\205\377\273\272/\276\273=\343\216;\272\206\032\275c\026\302\274\036\177\261\272\to\304\274\307s\300\273 \005V\274\246O)\275A\034\307;\310\212t=\375\260\225=\002\337\002;\223JT\275\346\315u=\373\236\245\273\363\365 =\264\246\230=s`\017\274\2235\253\274\031i3=H\301-\275\213i\351\273i\243\213<l\313\004\275\356\243\275<\315j\023<\373\017\253=\311&\217=r@\214=\234\370\230\274\306\267\366<\032\225Z\275=\321T=\273\241\260\273]\370\376;\375\300\016;V\002\010=\332\350\317\274W4\337\274|M\267\27574B\273\237Q*\274\003\211\n=\376\026\334\274\324\005\240\274TP\213\273\320#M=\033\231\226\274\023\317\016=\250\030\204\273\363\340\256\274\212@O=\267is=0^\032\275\236A\222<\250>\371\274\026,\225\275\341\376\031\274\243\020A=\333_\350<\303DC<\333\300\235<\0374\202\274\037\354\346\273m+v=FG!\275\274\333[\275\3101\341=\207\340<\275i\224;\275\034\232\221\274\004\235\275<\001h`<\026\301j\275\306}3<l\003\344\274\014\265\212\275-\\\201<\014\237\213<\322\215\207\274\225\277]=\231\000B\2746\022/=\002\\(=\303\343E<l9q<\177\031F<N\267J=-\343\306<A>\262\275\320T\013\275\316\204\314<\257\010\225<\270XT\274\036R\351;\026c\215=`\2219\275\206\013^<2\000\376:m\350^\275r\356\263\273),8=\223\214\327\274\211\2638=\214+\343=R-p\274K\t\343<\315@\226\275\232\256\355<u\222\226<\226\332z<?!\221\275=\321\300<\006P\245<\365\351u\274\243\360B\275\t\n9\274\257cM<\207u\237</\360\231=PKZ\275\000\376\242\275\356*\262\275\274\366p\273\037\253\305\275\023P\325=3|\037=\027\002\320<_B{<\373\312\221\275\362\257\303<\225\337\204\275\377\023\206\273[=\260=#\233J=\307\270\'\275\231\354\265=\252O\230<(\367\327\274 \241 \274N\316\303\274E\201\310\275\345\312\024=Z\360\242\274\215;1\275\377^\252\275\325(\231\275\354\375F\275\260QA\275pV\275\273\231\245\346\275\021\325B\275\324\205\222\273\017\365A\274\365\241\210<\303OP=\023m\005=_\034s\275\315h \275\367\203\371\273\351|(\274\0371\310\275\375\363I\275WL\252\275}\342\200=8\240\260<l\267\355\274n\300\257<\026\362~\273\244eO<$\255\374\274\352\315\377<\330\325A\275\255a\226=\037\264\177\275%\274\361<t@==4{v\274Q3\"=\313\321 =(\242\251\275z&\242<\032\256B<\2752\016\275\307\026Z=\013\371\274<\365\365.=\242S%\274\334m\307;6\023&\275\017\223\336<\355n\360<\274\366e=\317\025\371;\025\312\310<x2\340\273\302\340;\275\034\245\373<\220\371\037=o\030\265\275g\376\304\274\013\370\002<\225\305\346=YA\214<E\310\214\274\320\236\306\274\217HN=Y&\201\274o\336_\275\036K\224=\026\317\220=k\302!=V\330#\275\370\342\232\273\234\2626\275\357\032\021<\270w\224\275\335[\005\275/\232\277<\336,\266<z\337n\274\360k\321<\371\223\014>w\r\376\275\306\264\372\274\247t\257\274\312\031\234\274FB\260\274\365\"\027\275\r\204\202\275l\250v\274:\351\314\273\246Q\032\275\310\302\376\274T\241\263=\333\231\"=\336IN<\262\224\'\275\316nk<\240\213\024\274\363<-\275\036D\242\274$|\320<<x\356\2733m\357=\027\210\267\273\245\203\214\274t\360\262;\313\334\334\274[n\233\2752\275\373<\347Q\353\274\375\315\220<\002\327\n=8\212\000=`w0\2743\251-\274\330\261Y\274\312\244\036;\266\236\203<zZ\256<\245\020\327<\330\2253=*\2120\275{\375!={`\213\275\362\265*\275f\0342\275\177\260\220\2749\202\261\275\267r#=\272d\035\275$\342\010=\357I\250<uF\032=N\360\213=\367\026S=\362\326\"\275:j9=\210>\253\274\332\254\207\275\002\3304=Y~\177\275,\310\024\275R\277\337;_=\224=\036_\355<\334\311\023=Y\267\207\274\232\233==\224y\201\275!\312\351<\027\355\255\274\256q\245\272\342o\245\274\2614\010\275C(\025=\2647\375<\037\253\205;\rX\004\275*JN;\321Q\256=Z\302\271\273D=\034=\006\361P\272/\300\306\274\346Y\207\274\340Z\035\275\234H\013\275\355d\010\2750\2612\275\024\2033=\342\246\221;\277f\316=\340\346\245<\350\304\240\275\335\023\212;\t\013\302\274\234\363\300\274^UA\273}\336j\274S\204\365\274\233PZ\275\242\226\030=\373\344\023<\261i;\275\204\306h\275\246\332~\274\223\227Q=7|6;\303P\177:\254_]\275\302\333\364:y\270~\274\007\206\231<v\320\235<\312\364B=J\023\257\274\234\372\272\274\236\213\210\275Uz\377\274\320=\201\273\364\271\346\273\"f\034=\024k\325<\324:\030=R\254h=[\262H\275\2345\266<\373E\026=\020\231}\275%\327\204<m=I\272N\270P;\201eZ\275\2242><\344\320=<wy\322<\206\026\261=A\021\177\275\030\370\037\275\335\360\"\274\363C\233\275\277\207m\274\256.\'=Y~G\275z\264&=C\203\020<\240\325\217\274\\\037\304\274o\315\307<\331\332\272\274\003\212\022\275\374\306\330=\\R\002\275@7\334<V8<<T\365\354\274A=u=\376\025\216<\007\367\262\275\344\030\255<r?\322\274\023F$\275\334\013\251\274F\274\201<<\377\200\275\034\352\315\274(4<\2752\366R=\022\322\203=4\274\214=\026\020\356\274\343\367\265\274\024\244,<\312\245\262=\234\370\230<n\367\377<n\032\261\275\264\200\t\275B\n\002=\377i@\274\0020\000<\215!\317\273\337\203\215<\217(\300\274;f\374<\343\373\226=\214\225\002=u\304j\274\271\306\002>\372c\355<q\341y<\304+\264\275\\\270\352\274\006\263\276\2746\377@=\201\373\027=}\020F=\r\020\301\275\220\341-\275n\020\265\272w5v;\277\017\223\275\"\033r=%\r\220\273\240\274\205=\342\312\203=\202\t\237\275\035\363e;\202\235P\275\222\352\356\274\031\240\205<\276c\236=\374T\224<\032\316\212=q\213\371<\034\322\224=/?\366\2749\333f\274\312]\013<NH\301<\327\302\240<\266\320\002=v\351|\2748\351\214=\000\247\226<\205\3641\275\242/\225\275\203\266\034=\256\361\251\275\275lT\272+\352\224;\237y\255<\3721;=}\031A=1\250\245;i\321\017<.\326\375\274\254:\316\274\266\352N\275\223\2378\275E\030\306<\320\n\332\274\030,\213\274e\010P\274}\000\n\273\n\361.\274;\221\351<\212\244*\275\360\305\007=h\342\311\273\354Y\244\275\2611\330<K\251\350\271\333\354\\\274\356\215U;V\346\321\274L\324\006</\221\371<\220\272\251\275f7\246\274\372\0000=\354\003\277\272\314\'\277<\200\272k\274\240\022@\274NP\352;\357yK\275\336\332\355=\353}e\275\365fW<_\303\347\274\332\204/=\277C[\275d\027\032;/\267\247=a?\005\275D\377\320;S\350\302<Yp\225<jD\300\274Z\r;\274\366\300C<D\010#;\0206\243\274\265\252&=t\207\255\274\205[)=hF\035\275\317O9=\\\016\322<\310\003I<\266\232\014=\262\267\251<\032\030\307\274v\367Q=\327\320\216<\"$\317\275V\335\336\274\244~\220:\335B\215<\376c\303\274\244\260\030=[\221\336\274\254_\215<\216}\241<\357-\360\275.2\230\275I\031\264=J\312:=\336.\213\275\3649~;\013c\t==\223[\2751\324\271\273\273\221\313\275\233\2019\275\2620\007=x\'?\272!\025\027=\316/L\275\225&\271\274\r,\262\274\325\266\301\274r\256=\275}\254(=\316\373\274=a?\320\275\214\310\213<\256\365?;\221&\031\274\266\235\262\273\207_Z;\361T\005<\341\036\374;|\223\007=\030\3333<\024\001\327;\331\227\364\274\037\246=\274\311\225\004=\365\2504=\223\247\315\274\352\0343=\215\310\375\274V\025m<\014\3050\273%\266!\275(2\377\274E\026p\275U\010\261\275\037\347N=%\t\212\275\034\337Z\275\255\235\205\274\\\277\340<e\2435\275P\264Q<y\022\002\276.\301\224\274\350\2731=w\212)\274&\225F\2747\323\'\273\037\255\330;_]\022\275a?\010\274\375\027\242< q\016=\335\374\211\275aL\355;\005f\023=\366\3271=Tj!\275<4S=\035\303\030\275S\357\236=\021\3020<H\370\223=\316\377\243<\372<D\275*\235\323<T\232\271\274\344t\311\2754\241\037\274\324\232\"=\226:|\2755t+\275\'\\:\275\020P\026==S+<\267c\300\274\357\214`;X\2547<\221\330\035\275\326\324\200=m\3331\275\261\371;\275\363@?\275\306j\243\275\"\322\256\274\2368\344\274\224!%<\301\331\211<C^j=\321?><\354\221B\274\332S6=\361\227\372;Ot\017\274\223\026J=\236\033\000\274j\340\357<\212\367\216\275\003\374?<\0133\350;\375\276\232=B\025\244\275\030\331O<\242\002/\272@\333\230\275+2\215\274\0067\377\274$\235u\274\212\375\306\273\016\304\321\274\035\372=;\233\026\335<.\206%\275\337n,=N\320\202=\247\005\363\274r\020;\275\362\367V\275`\375\022;J\304\000<\216\023\233=\275\322\201\2746\371\027:G\347\031<\300\215\267<\3510!\274\213\210D=M\361N<G\332\343\274r\024\017=\237M\222\274W\t8=\334\242s\274\265+/=\001L\314\275\010\344\272<\325q\317;\233\2065\274\247Z\256\275\200\242\210\275\005\014b\273o\335*=\325M\265\273\330_\303\274\247Q(;\323\343G=\327\204N\274\353G\277\274\233\230W\275\036DG=\343\237\020\274\255h\254<\276\206\305=\026\362D<\334s\022;\371\255\365<\266\252C\275W\234c\274\037\231*\275\314n\216\274\212\326\231<\354~E<\023}#\275\335D\253<q\332@\274\020\345\233=\254\217\267\274f\013<:/\021\205\275\305\351\334\275}@\303\274\230b\214=\252\273\275<\322\260E<\310Xt\274\334Tt=\251\000E<\004k\227\274Ql\346\274\002tF=\313\234\364<\377\372\376\273\310\242\245\2752\260\275<\245\365(\274\023\316\000= \270:\275|\241\021;\023+\252<\303*\276\274\241`V=\261\353\270\275M\332u<\255\264\226\275C\001\r\275\324\000\006\274\254>\236\271\376%\325<Z\031\232\275H3\t;\212@~\275\231\242\252=\204\0228=:\273\005=\335\302D\275\261\255\023=\007\251\260=\221\365\t=\223\372_;g2\"\275\323g\206;1\350\313\274\377U\005\275\244\3660\2751\002\357\274\361J\304<\342\2301\275\222+\030\275+i\003=\240\010\020=\336\325\236<\273\225\037<\200G\230=B\026\032=\027[\005;\341\305\234\275\320\360\326=*n\007=\303\331\244<D\032\250\2757A\317\273\226\361^=\340\003i\275\300J\234=\260\250K\275\024)\016\273M\255\201<b\252\321<\246\345\235=\235\276\331<s|\353<ayO<a\266|\275GA\245\274\206t\321\271\223\206\335\274\311\307\300<\030\332@=_\375\325<W[\300<Eb\351\274\315\203\223\275]\027\366<@\306\024\275\356\2723=\333)\375:\177\001\256\274\372\320\241\274+E\207\274\225w\027=FT\334=\333!\251\274\271\n?=O\350\312<\031e\216<Ia\210\274{0\243\275\017,\242<\023No=(@\223\274\267\362H\275xy\216<\224x6\275\220\2251=\254\235&<#J\326;\022z\366\274[Pf\275\220\260k\274hM\017=\247\252\233\274\2737\360\274p\007K\275\210\030\031=\307\017!\274{`\270<\n\214\232\275\236\235d\275\3256\263<+W\232;s\231\353\274S\314\240=3c\224\274\277\230\020\275\215a#\275yc\222<\305\370\354\274\226\256\321\275Ff\033\275\035\271o\274\\\227\213<(@$=$/d\275Y$\222=\333\3503=\n\234\247;s9\255\274\221\312I\274\343\013\342\273R\373\t=1\262\005\275q\037\222=\203\356r<ALJ\274\214d==\272\320\311\274\354cZ<\334[\202\273\263~\236\275\'>\236\274yhh<7S6\275\357\323\000\273k\020\231=D\266\002<\277\335\177\274>\333\240=yO\006<\234>\265;_\342\031\274\377\324F=+\224`\275\316\227\305<\303\217X=O\266C\275s\325\370\274\214?2\275\240[X=Z\343\246\275\023\275\327=\346QW\275\r\003\032=lo\273\274\367In\273\203\351\225=\336\213\267<\251\321\245\274\273S\215=B\273\266<^\212\351;\366\025\373\273\361,\335:x\243\212\275\24323<\315\371\257\273?\370b\275\274\220\023=\024\346\213=\3566\363=\000\376l\275g\270\330<9\246\300;;qZ=@;\247<P\020\203<\235\246\233=\010\222\216\273\313~\206=\rU\027\273L\022?=\n\377\032\275\004TR\275\304\177\023\274m`\023\275H7\266<\010\322\216\274\031\261\214<^O\224\274uH\305=;\354\222;\213Yz\275\357\226\206\275\005P\'\274de\363:\236\005\240\274\376\177\213\273\213\206^:>\267%=$\341\344\275\362e\237<\263\017\"\274\371\354-\275\225s+=\250\005\234\273\2343\325=\036w\226<\356\213\025</\035n=_\262\013\275\226\344k<\211\001\236\275\036\320\335\273~\274P\275:\267\203=c\237C\275\357-\370<\360\321\022<q\026\264<>j\264\275n\367\r\274\321&\177<CFC\274\207\311L\275\261\274i=\"u3\275Y#\315\274/\253\276\273\267\254\336;\251\352\205=\203c\270<\207\335j=\237~\246\275\333\254\272\275\317\212u<\350\021\204\275\351d\223\2747n\013=`gY=f\247\266<8\"S\273\004\037\020>I\242\014\275\322\265\027\275s\303\250<\371\327\227\273\342\257\231\275\335\235s=+Et=;6\345<\327\315V\275/\003\216\274x\014\236\274\306\245g\274\224/\233<\034S\r\276\2700\355<\310\270\214<\262\352\033\275Z\342\371<Q\230x;\260\355\346=\264\033w= \254\276<9\005-\274\230\370P\274\367gg<T\t\'=&\230S\275\363\037I<\245\341|\274\303\313\353\275\365\323\n=\2761\016=.\315Y;\312\245\214\275\226\306F\274E\252-=\213A\326<4\334`<\302\375d=w\325\204:Y\035\331<YA\310\274\2766\367\273\254gu\275\365\346\321\275\313\030\263=9g}<\376\005T\275\314+\262\273\351/\030;U\254\006\274\300\305\312<\313\320\314\275q\347\032\275_\325\202\275\003\304l=\236\265\266\275E\023\232<\320F\021=h\346\225=\177\356i=\364\312.\275\020\221\251<x|\351\274N\202(\274\356\254:\275\255\330\310\271wv\317\274\250\246n=c\324_: )\260<\257PX=(\363\025\275I\322\017\275@\031\026\274\200\235D\274\232~\013<\3042\334<+\363\241=Ut5\274>\271l<c\'1\275\211\306\231<\342E\360\274\313\231\254<\316S\311<\235j;\2758\230\325\275[\215\361\274\310\"\215=\366\267:=|\202\360\272\3155\343=\310!5\274?vo\275U\322(=\037\005\272\275\010f\275:\374=\215\275\376ed\2753\336\301\274\236\331\013<\350\373 \275\303\274r\275ah\301\274.\233 <K~\341;R%\273\275\"\010\240\275\037\201(=\222b\245\274DS0;\325\377R=\303\2309=\246s\374\274jR\234\275\0364\022=\376m\273<\252\234+<\337D\327=Z\353\354<\307\217)=jM\030\275\210\\\304<\256r\002\275\260\253\255\275\331&1\275^\261\004<\363\271P\274\226VE\274}\0050\274${\277=h\253\304=V\032\252\275g2\033\275\037\276\206=d\254\347\274Q\177\262\275\273\010\'=!s:\275rz\201<\014YN=a\"y\275\275\2378\272{\304\247\275;m\000\275l\232\327<{+\022<\307\233\004\274\334dB\275\310\275\247;/\221\020=\215\361n=\217g\341\274\t\305\362\274\257\216\312<\334\265\253=\006%\037=}\014\277<`\357a=\361 \210\275I\035?=\247D\250\274Ic\"\275\227\214\211=^\217u\274~\361D\270L#\"\275\265\363U\275\324@\241<\000\0360\275\034\336r\274\375\254\033=\266Mn\274\010\004\340\275\342;\021\275-{\250\275\2760\n\275\377=\261\275\034\340\322<\307\250\270<\333f\004<\323\265\272\275MFj=\266P6<\337\336-\275\023\276\236\273\267\336U=6\233\307\275\375Z\004=\025\304\325\274\243\223a\274\341\362u=\216/\266<\215c\017=\034&\224\275\365\350\367\274s\344\':\3307\352\272\005\246\211\273\374\371\255=i\305@\274(.\250\275\313B\220\2753\377?\274?\327\351\275\207.\234=h\335a;\275\343m\275#i\023\275\315[\262\273\265\002\252<A\315\340;?\tx=\310}-\275\\\222\261=\343\2738\275\034\373\256\274\302$3<{\225\330\274\177\020%\272\376c\242\274y\350\205;J$\013\275\312\252\364\274\352\375\320<a\327I=05\211:\336/<=\316\004\201\275\337\367y<]<\006=\261\333\213<\271lF\27409{\272\020\272s=kZ\314<fF\307\273\371[&\275\204\345\336\272j\243<<\344u`=\207\243\017\275E]\242=x\247\250=mn<\275\252\2049=\344\277\350<\241\322\006=\202\225\205=u\\\236\275\315\273\232\274|I\251\275%\361Q<\215\033\031\275(\231\240\274t\216\t\272\377\310N\274J\317\251=\313\000\210=\253\345\t\273\350\313\006\274<\345\203\275\010\245.\273#\273g\273\236\345\014=,\270\300\275D\224Y=#,P=\275\377\316<\362z\253\274S/v=h\206\330<\201F\354\275Q\306\001=\241\207\200\274\347\254X\275\352\260\'=\032\300L<\036\336\341=\270:@\275\031\273\337\274\230\350\315:\225\364`=\301\355\346;\003]\215<\363=\262=\374=\262\274\272\321\030==?\300<zK\262\275\256\033|\275\'\213\004\275\316H\021\275\031\214\204\275F[\007\275\177W\204<=t\3119\335m\033\274\245Vj<Z\365\305<\274\033a:\360\215\356;v\377@\275\246~6=g1\355\274, \225\275\214MD\274\271iu<\r@\200\273,\361\235<Hr\007\275\033b\340\273\337\357(\275Z\271F\273t\204S\275[\271\251<T\203M\275{64=\207d\252\274\370!\373<Ig\026<hO\221=!i~=\372\214\213;\231,\022\275\345((\275\210\315\371\272<\233\025=K\244{<\235\330\022\274U\254\233=\357\371a<NO\304:\253\315A\275\\\226N\275\2011D=7\262F<\313qT=\302\331\200<<\261g=mvt=rx\253=\013\274\316\273\322(\t<@\306\":\251BR<i\344u;\372.Z=\326E\202\2750\"\023<\306\307L=\216\233\201\272\"\303;<\243\215\361<_\372\265\275\006w\247\275z\377\036\275\307Mn=@Y\226\274@.\005= \274[\2754\210!\275\260b\330\273\265t_\274\016\275\217\274\353\320\225=K\360\253;=\006\271\275~)S\275\360\004\013=\\\353\"\275\301\007\232=\227]\372\274P\375\303\272\355\013v=\267:\215=n\247\221=\251I\363\273\024\013\323\274\376\310;\275\032U\214\273\277\007I\274w\304\366;\260XK=\377\022|=\037\313\205\274d@H\273\210eR=\342\2125<\273+\362<\205\004\320\275\367:\264<}S?<jc\026<\373+\252\274\200P\027=\346\022^\275\267\026[=\300q\357<\265\350\232;\277\215\000\276\010\342\223<su\213\275m\353\013\275t\230(\275\367\316a\272\307i\264=\005\246\243<\214\304l\275A^\365\273\007&\275\274t\177\210<\277\024T\275z\224\232<\023\306u:\207\027\026\275\205\334H;O^b\272\237\347F=\275\274f\272\344\236V<\232\3669=N\023\013\275D\250\241\274\321+\013\275\014\234\307=\017J\235=3a\021\275D\250\222<MV\332<_\317t\273\263bm=\336\223\335<\252\374c=^\310\21481\241&\275p}\375<\334U\005\275\030\233\350;Z:Q<\221\362\213=\343},=\371\370\372<\315\302\002=f0\345:\264/\365\271\206\372\n<\270\203\031=\306r\204\273\275\275\230=\2223g=:U\031<\255s\002=\361|O<p\336\347\274S\343\311<\205\214\306\274\222\260\267<`\320*=T\262C\273kY\351<m\255\233\274\037\t\202\275h\255\001\274(%\024\275\010ZT=b\262\235\274@K\204=Z\333\020\274\305.\345\274\273#P\275\365\237\207<\263I\232\274\335Ca=\371\032{=\260A4=\206R\277;\377\212\215;\"\360\240=\275\227\000=#\347\014\275\021\306\311<Z\265\203<u\370\220=\366\354\030=\264k(=\030k\001\274\251\205)\275\344f\273\274\353\332q;\275\201\371\274\021\226D<\253:)=`[p<\220\305\332<\236-\321;\325S\001\274\266q\334\2731\253A\274\013\236\361<ZN\234=\242?P\274\233\230z\273\357x\305;;\361t\274\267\014X\275\366\243.\275.\300\n\275\301\270\010\274+l\354\274\017\375\200\275\210\264\215<&L\r<\344\337P\275\214\243k=g~5\275\033\250%<\032\247\210<\374\243r=&\344\237\274w%\205=[L\t=\305w\202=_E\340<\265@\263<w\005Q<\213\020\265\274%))<\317\211\000\275!Z.\275\355\214\261\273%/\236={j\037\275\305\347E\275\212\0351=\300~\t\275D\"\336;\005\321\351:3\333\237\274\333\367-\274\\:\026\275\305|\306\274ZtU=\222w\026\274bFj\275\322\355z\275j\306z\274\337d\332;\010\"\202:\340\017\036=\256\rP;\300\036\271=N\247&\274\357\360\017\275\250\3179=%0\200<\025q\261\275\330\246`=\213$\227<\377\373\203\274u\230m\2758\272\347\274\037\305v=\177\224Y\275\311\006\337\275@Lz=\014\\\246<\232\3057\275\343\033\212=k\0328\274\240Z\364<\007\202\365\273\325\311w9}\023\352<KJ6=)\312+\275^\016\215\275\025w =\n\353\230=(\216\335<0\260@<\027\340)\275\004\357\377\272\326g\375<*\354n=\201\333\207\274\210-\313\274%lD=\355\'\033\275\371\311\003=\272=\214\275\235\021\256\274\0205\237<\222\312\202\274\007\034{\274qWG\275uUZ\2756\342\030\274fai==\221\250=\016\3374\275\311\2514\275\332\234\265\275\007\233\302\274\332Mq;(\202\004=A\213I\274\232\n@\274E2b\273f\360\026<1\n\376;p<j=\345\271\033\275r\274\n=\007=R\275J\354\225\275\357J\204<\223\311\276\273E\001$=mUQ<\233wI<\374J\"=Z\314O\275\317 \\=U\325\245\275\364+z=\3771\315=\013\310\"=#\035R=Fg%\274C\016\031\275\241\334\014\275\032\366:=\030`\342\271\227\247\016\273\030\255\200\275\020&h<|\372>\275\014#\323\274U\203\330\274\360\213\204\275Da==cO\223=p\007Q=\226Ld=\004\331\230\275O\025\271\274E\010\241=\211\306L\275\364\"\371< \263a\273}s\236=\027\345\257<\331\3236\275_\020\033\274\275\332p\275\371\313\203=w\373\033=5\033\001\275\272\230\225=@%2\275\303\212\352\273W\252\345\274\336\372\270={\354\253;\222?\217<\307S_=3\r\025\275\343\312\374\274\307\230*=0\301\320<-9+=\335#\027=\207KA=\345\031\322<\257\210\024\274\373\231\227\273\353\332\210<\021\235\211\274\215\270M\274\251\366\007\275\250\345R\275t/\035;\230\223\207=\261\336\034=\\$\273=\020\262\024;\206\005\217\275\007|\306=\266! \275\373\325\311<\250m\215\272\272\276\261\274\033\266L=\312j\001<\203\340\2729\264\331==\204)\214\275\024\274\020;T\232\306<+\264d\275\'\343\255\274\334\304\225;bj\240<\n\327\004=e\001\332\273\035\3061\2750\250\000<\243zm\275\'\376\235<\320\215t=\000\254\337\2732\3154\275\247\033\334<P:\204\271W\261\007\275 \245e:\211\000\216;\321\335\300\274\337\243\037\2750\343R<\347\217\037\275\302\1779<\316\337O\274\275\350w=\372t+\275I\364I<.\275V=L\037Q=\242)\005\275\324\357\324\272\270\201R=\271\362\365\273\250\213\321\274\255u\257<\234O\036\275\211\236\262\274K\375\344\274G\211\013=xe\362<@\352d<\327\310\202=\340T\025=K\013\254=\200\265\303\275\351\341\014\275\022Dp<\333\'h\274\335\265\341;;E\037\274\240\313\270<\215\335\367\273\303\346\001\275\243\036-\275[\262\244=\356\277\237\274u\311\320;\000^7=\201\313\317\274o\300{=y5\375\273\313mp\273\346\023\301\275 e\343\274;x7;\350\030v\274~\033\225\274\004\033\336<\361\233\221=z\354\014;\300N9=\314_\266;\217\301\245=>\254\014=z\214\001\275[\304c\274\260\311\005\273m\033g=A\271\242;\333#\320;\373\274\003=i\325\032<\234\262\271<\3029-\275\255y\305<$\243\232<\347\244\3628\272\377\234<\303\207%\275%\255\241=m\225\302<\216\\P\274\345\013\326\274\034\267\020=?\250S\275\371\270\361=e\303\231\274K`\271=\211f\220=\023\350 ;\357\344\024=\362p\203<\336\030\200=*\370S\274j\251\205\275\207\262B=G\001\177\274\001\031\226\275p\307\244;\252]0<\021\215l\274\220\264j\275\317\235[\275\331#F=\331\t\262<\340l\216;\334\215\250<\0329\247<\rM\256\274L\200\001=^\344\260;\033uL\275\010O\221=\210\3227\274\004\226$\274\005\350\237\274\325\205D<\365X8=\372L\343<\250.\351\272\337\252\005\275}\351]=0\252g<\222v\206;\342{<\274Q\\\220=\257\006@<q\304\352\2734\002\277=\207b\273\274\245\270\342\274P\031\020\275/\326`=H\343F=~\311F\272z\205\036\275@i\262<\310\330\001=\253Z\003\275\002C\244=\344e\217<\255u6=4K\255=\202ko=U\320j\275\254\200\243<\022\033`\274rz\251<4\271_=\201\342U;\304\277\006=\033O\262=}\220a\275\300\304\344<`\317\312\275\177!z<\215\221\212;L\374\201\274\227@3=\325:\214\273yP\020\275\037n\242\275\327,\t\275^\357S\275\004\037c\275\262\005\260\275\317\327>=\273\257I\274Rxu=\326\236$\275\227#\005=\215\341\021\276\330\211\300\273(\216\202\273\212\002\377<\201\352\t=\016T\240=\000\330<\274\272\3406=\002\316{\273\2722\336\274\371\210\236\272\355\231\331\274b_\200\275\022\364\177<\350\254\240\275\271,\253\274\021\224\026\275\327\305\360\274\031\240\377\274vK\273;\255\305\334;\024!\306\273F\220\230=\266\211-=e\372\372\273\322\003\023\275|\303\030;d\250\033=\006\n\376\274\301\315K\275v8\357<\245]\306<\255z\311\274\275`\t\275\325\006h=\200T\223\274T\037\222\275\026/\367<\331\303j\275Yc\316<uJ~=.f\225=\354\346e;^\306]=\257\016\027\275\254$9\275\036\310\205;\r\343\363<Q\237\344\274W$\221\275#;\347\275\037\371\371;z3\005\274W@\246\274\201\206\\\275\232\312\223<\023\002\233<b\001\323<\220\'L=+\207\324\272\232C\025\275\343\273\322;\365\245\022=\344\231I=\260^\247\274~\"\243\274\t\374\356;\030\253\245\273\357w\241<%\211\344\274\205``\275\227\037\002<\376[y=\023\327F\274\034m\210\275\343G\274\273\330\302_\274d%\270\275\376\361&=K\374\\\275/\316\350<\325\247\"\2732e\370<\276\024h<%x\350\274\334\323\221\274\033w\230\274\n3\366<\252M\'\275\031\371\331\274\017\342<\275S\032*\275\031\277\374;dt\210<O^h\274k\315\350\274\326VU\274`d\370;\224\205\316\275\2603Y<\330\316\223=\r>\343\274\031\216\254<\236[\207\271\342\010\246\272\033\351\213=\302\235\303\274\236\242?\275/ie=\267\324\242=k\364\203<3\311$<+\022\017\275\006\320k=&}\303\274l\361l\275\n:\370;p\342\305\275\310\3059<\205f4<[\367\266<\322Y\023\274\244\201\304\274\323\312\313\273\216\"\201=a|\335<\201\000\301<1\267(<\021\1776\275\375\207\264<\3321\336<\007K\264<5L\226\275(ip;\2416m=\231\351\002=-\223\271<\325tg=\342jh\275\353x\274=\315\271\001\276\371\246y=u\370R;\242#\n\275L\266\245=g\210\343\274\353\262\245\275z\031\344\274\3001\361\274\014\320\277=\252\375\247\275\214\244\346<\035\326\225<\266PW=\374T\031\275IW\267\274)\261F\275\025\210\202;:\005\r\275!\217\204\274:!\274\273\211\300\031\275CW\314\274Ps\244\274^\330\223=\355\017[\275B}\202\274\343^]\274\352\337?=\327\0174\275n\340\230<<\266\232<\246\305\016;\337L\264<\315L\031>k\200E<\314D\332=8\314O=69\263\273{\226\031\275G|\341\275\271\217S=9`\370=\335\321Z<\311\322\345;0`\335\274*\373U=k\272\216=e\357\010<h\240\256\273\000\035\004=\206\266B=\247\324\031\275\231\237\276;x@;\2752\350\277\275\371ou\274\021aS=\010\214\242\275\302\360\333\2756\360H\274\006\"b\2741~\204=\024\004V=\350\311\031=^\310\245<Y\316b=~\001R=\3317\356\274\203\276\236\274\204`\016<\301z\030\275\323\207L=\271\357s\275\211\344\r\274\375\000G;\257\205\272;bU\334<E\035u=\254\026\314=\235\327,\275\362-\264;\027\304K\274\260\\6\275\342\016\374\274@Y\033\275I8\017\275\337q\001\275\030c\257:\347\017\324\274\236\024\216\274*\332\231\274\t\240%=\'LC\275\r\3014=\257~r\275:8o=\013:r<A\337H\273/S0\275\345\356\270=\306\035j\275/\016\034\275\323f\317\274JZ\356\274ch\311<\264\315\303\275,\315\313\274\337\361\267\274\250\363\020\274\317\327\227;NM\023\2747\316\022\275{\326\246<\222Zw\275]!\272\275_\202,=F\245$=}\020\346<F\3140=\337\314U=\014$@\274\rH\303<\347\354\267\275\252\036\"\274\377T\216=\225<c\274\027\324\003\274\260Rm=\211\037\230\273\324\213\351\274\367\230\020\275-\233\370;l\252\201\275\317q\261;8\242\020=\230\273I\275/\\\377<\205\251U\275\257\353e\275\274\375\206<E\0262\275W:b;\020\2456\275\224\243\303\274zU\337<*\365\317\273)\275\213\275\212\310\t=\000uT<\221\346M=K\372\277<\006=\273\274\276\266*\275\365\341<\272\213\221\264<(0v\275\211=x\274\334\035\334\2736T\241\275\347\217\250<\234\345\271\274\002\237l\275\253\3445=\227;\374<\017\316C=S\017,=*-G=\304\"\276\274\244>K\274\036\372\211\275Vgx\272\256B@\275p\n\366\274\327\251\022=\232\242\177\274V\202\212\275S\221\264;FeC<\336w\226=\264\220\035=\325\374\326\274\024\325f\275\356T\342\274\t\377\274=\261F\020\275\260\243\000\275\010\244D=#\315\351;\227\323\202=NM\344\275o\255\017\275\014\016i\275&\346\265<\274i\247=\346u\263\273<d\336<\3714(\275\236\252*=\344Y\204\275\331\347\001\275\375\323\217\274vx\001=\020-\212=\260\332\236\274p\304d;\363\"\223\274\273\373\217;\325\331\020=9\332a=\3337\216=K\350\313<\367E\270<\262\275>=\005\023\364\273\373%\236<;\003s\274\230\033\217:\2425\223\274\300\335-=\265\023\217\273\">\003<\004\r\224\275\216.\260\275-ai<E\245\r=\235\323\030<\215y\236\275\021]H\272\262\332\225=}\036:=\327\272\204=\331\025\207=L\270=\275\372>\214=\237\347&=\034\270F\275A1\263<\243=\214<\341\253g<p\2078\275\261\255\226=\177c\037\275k&\373\274L\326\230\275h\303\203=-_\256<\242\224w\275\311\277\241\274\271\215[=Uf\236<k\323\236\275e\266\342=-\370\212=&%\204\274\237\371\256=G\007;=z\2100<\351j\333<\342\2379\275v$\246=\357\255\262\275\226\340\344\274\201\205\215=p\352\303;\2111S;\030\361+\275\367\246\027\275\365\361\020=\334X\226<\332\t\242<\363\203\033\275\007D2\274\212=\265<F\345w=\336Sh\275Mm\332\274o\220+\275\376\367\230<\023\274\304\275\217-\253<\345\016\241\275\201\375\212<\005n8\272\334\022.\275(\204\261\274F\341I\275\247\265\025=LE7\275L\342?\275\010\274\316<\226\260Z<NhN=\344\306\276=w\020\201\275\031\306\257\274~\263X\274ui\250=\275\026\260\2759y\267<j\\w\275\201z,=\204\320C=\212\323\210;\035\300\233=\325\264-=\324\261@\274\325\026b=?#l\272\3708A\274\247\226\224;\035\355\227\273\307b\"\275\225\210\254<\241\007\271:Kz\223<fx\354\273\361lt\274]C\223<Dg\235\270\'9\367\274\220\251\262<:\004\267<\252\350\223<\001{\240\275;o\215\275E\205!\273\252\360\214<m\343\222;p\201\305\275@}G=\301<\017<l}\227<Vp==\366\306\036\275\332\021\007\275\356\266\200\274}\025\037\274\'}!=g\016]\275Y\0179\274\352\214\373\272\302\010\317\274u\224\200\274\n\007\277=\261\224\\=\335\3748=N\017\370<C^\324=\306\210\021<\300G\223=\2576\324<.\324\230;\301g =\343\2706<\006Mm\274\246\240$\275\241z\373\274\347\002\330<N\010.<\006\0100=\263\366{=\024\0066=r8\244;\221\252f\275\236\211*=N\037\t\275\357\232\217\275ie\374<_\031\355\274\262\023\217=Y\026-=g\330\003=\352\311>\275G\277\330</r\235\275%\220\301=\234\252\245\275\255\2747\274`\242\222\274\302\217X=\025\221\245<\243\202\216\275\001\345\267\2748\366\021\274P\307E<C\305\271:y^\365<q\\0=\250\327P<M\300.\273\307VU\275%\326\327<L\330\037\275-o\014=\312\017\253=j\316\014\275\260\215L\275W\201\222\274\007\274\207\275uD\307\274(?\261=G\323\351\274S\277\303\274\333\021\324<\315\275L=\323\245%\275\352b{=~\020\031=\273\246\316\275\370Q\3729\372\346\251\274\233\277\231=D\227\300\273\266\001E\275\010X\253=\252\361\236<\0213\006\275}\267\024=\255\206|\274\332\035\204\274|#\362<\356\3660=\321(\265\274\025\025\220\274\277\032\215\274\223\231\244=\207\r\027=\231\265\207<\367\353\010\275\372c\024=\014,P\275\275\037\020\275\027\366$\275\227\273\023\273\306a\303<\373`\344<zw\342=\300&\213\274\010\351\222;\347\334S=66\033=\372l=\272Q\204d<\210\253\301<\277O#<\3647\273=\005\270\214<\246\005\004<K\367\335\274\310\341\233\275m\256|=\235\366\024\275I\374@\275\360@\007\2750\036\220\274\246-p\275^\351\261\274(\374\264</\001^<t\367\037=\210\223\317\274\354\305\335\274 \326,\27564H\275?\310\002\275r(\321<\343^\032;\204\377\242<^\210 \275:\262/\274\357\216\311=T\345\200:eY\366;\215\225D\274L\344\030\274\361\000V=T\353\225\274\207.\305\274bo\242=\365\031O=\323\242\264\275Y\250\261\274\3252\016=\274\275\256<\374;\214<\336\006\202\275\235\331\207\274\201E\223\274\001y\232\273\334\345\030\275\271\255?\275@\t\025\274\375e\225\274#\222\327\274\364Ku=^z\217<s3\003\275\250\317a=`\316@\275x&c=_\345\234:\254\021\034\275&\037s\274\222\010S<!\307\332<\377#^=D\245N\274\315v\233<\200}-=\300\310I=\250w\177=\236\027\024=\032\275\307;V,\013=\301\301\326\274\035\226A<\364j\315\274J\010|\275\026\235\217\2733^\240\275\326\220Q=qtT\273\026\025c\274=\033\036=\013\235\022\2730\035\215\275\323\340\305\273g\376\233\274\223h\335<\255\324\335;\007\204n=\007\034A\275\\e\361=1\372 =\250\016\n=\344\211\316\274\372\360\374;\272\273<=\230u\363;\222\201U\274\023{\237\275\223\007\214\275\006\352\260\275\267\021\245<\010\220@\275%\007\022\275\271\301\003<CW\204\274\331\335;\275\177F\t=\034X!;\034\203\':\2012\303<T\264\376\273\230\334\001=c\363`<\022\312f=\375\367\027=\300\222)=\241\371{\275\226\212\225=\200\226\270:\273\205\003\275\233^\276=\034~\370=\236\317\317\275c\317\345<\312ZI\275\261\346t=\'\034\226\2730,\226\275\230\305\037\275\316\254\373=\274\326\201=\202\240\301\274\263\007i<\311\364\314\274\377-}\275\272.\203\274\035\313+\275\\\313\373<\224\302\365<\260t\n\275\247\262D=\2322\334<\273\'\021=\025\034\035\274\327\311\311\274p\000\"\275i\200S\274vz\220\2751K\230\275\240\313B\274\017i\'\275\323j@=\026\260\242\2733\242m=\357\241D;\217\032\200=~^\232\274\315n2=\022\240-\274ka\346;\367>t=.\255\372\273\016o!<\256B\247\274\"Yg=\037\216\361\274+\035\'\275\234\370];\3327\315\273_-\232\274\304[\200=#\242K\2751\333C\275\017r\260=\213\332P\275H\017\261=\r\034a\275z}F\275\\\275\304\274\274\247\215\274\021\236{\274\207\367\006=\2240\002=p\232P\274\304_\225<F/\257<\240\022\224=\025d\226\274 \234\307\274\\\272\224\274#\371\006=n\253\225\274\271\376\351<q\2608\273T\357\005;G\026h\275.\213\365\274\310=T\275\247V\210\275\306\370\203;(\317`\274\314on\272\355\365\303\275\364\347\331\275/\231\2629\205\"\013\275\347i\024\275\004\360\013\273\340\2341\274:\203\304\275\310@\227\273a\177n<\231]{;y\236\217\275\233\360q=\250\252\034=@E\270;\003\235&\275E\334]<\367\324D=\202\211\204;\2646\342=\360\220b\275\326\013@\274\372\232\265=\314\2441\275\201V\200=\343g\245<UL\243=\216\313\203=\014\347\352\273W\234O=.o\252\274\2053Y\275\270\201\'\275s\327\023\273F\301\317\274\346)\010=\312\022\214\275\372t\014\275\334\243\202\273Jw0=`\3032=\211SL<\217\277\306;\2202\020=\247SK\274\032\270\227\274\2064\013\275~\031\"\275\225\233\250=\273\276\306<\325\323\n\274\306\267\231\274\350`\241\275\221l\306\274\236\343\240\275\033\350\212<\007\365\330=\0362\003\275.\036\220\274\t\264\223\275/\362^=\252\374\221\275\017\035\247<\220\334\351\274\240\303N=x=\244=\323\322\370\274\316tG\274\260\272}\273\0262\210:\321\204\235\275!\311\372<\201B)\272\033$i=\341O\0059cxn\275 \202\351\274\206\307W<\320\256\261=\225\310J=N\270\204=\017\030\\<r4\215<\343\335\242;m|!=\320e\240\274\302\254\375;\212x\375=b\327\020\275\014\002Y\272\030\377\340\274\034\r\361<X\256\034\275@\354\264\2721i\216\275/l\332\273\305\270F\274\241\262\240=-*\\\275%\272\234\274\214\370]<\030\205\277\274j\020\227\274\236U\220<\000T\340<\2002}:\321=\232<\361\252\234;\005\022>\274\2768\013=\3403\244\275\rHD\275\215\035N\275x\315K\272\205\354\010=K\033N\275\276\035\013=\214ZY\274\272R\205\275\340,\211\275\034\2203\275\375\025V9-\301k<Ym\n=\324y&=\376`\274=\363\337\251<\211\003:\275\354c\253\274\317\220\212\275\321\240l\273J\315-=f*y<\202|V<\315\213U=U\2006\275H\353\246\274\205C\371<\351\206\026\275\276\324\201\274\244\020,\273%\264\221<&o\234=$^\220\275\350\247\235\273\033\0141\274t\321/=\373>\347<\031f\203<\'\202\271\275AU\220\274-\241k\275\333\265\343<\331\267\215\275\331\357\210\275&\326\036\275\251\265\217<\376\r\234\275\277\206\366\273\017y\301=\002K\227\274\263\207.\274}$\023=G\337Z\275j\323<\273\257\234m\275l\337\033=y\346\220\273\354\227A\275\375\265\203\274\rB\016=\207>\024=K\357\277\274is\245<\013\277a\275<\261\351\274\2251u\274v\025G=\303`\257\2735\252e=\361 \001\275\366\342\205\2740\350\370<\342\021!<\255\304\213=\020\003N<\371\350\t\274\325@\"=\362\006\242=o\271\213= (s\275vzX\274\264\206\215\275\353\327\363=\022\262\262<]2n:D\213\214\274\204\216R\275\242\362\323<\254\375\346\272\317U\022=\013\310|\274\253\317\306\271\201\227\210<\002\013\301\274Hh\022\275\220\273\n=l\363#\275\317\330 =\302S\317\274\363z8<\377\261\016=\036\"3=\004\2576<\362\335\\=\371+y=Cc4\275\343\021<\275\206\025\246\275_qm<\340\226\231\275\"\331\254\274\200\033\363\273p\240\177=\314HY=\2333o\275\210\257\277=\322\224g\275\244*4\274\372\243#=\344\317w=\006\372K<\3637\260=,\240(;\277\346\002=\020\026R\275\372S\335<\2062\231<El\203=\341n\233\274\264\235\202=n,,=3\326t\275`HC\274\354>P=\221\353\026=\002\031\267=\r:\304=\023l`\266\203Y\177\275FQ\267=q\314\364<\304\235\377\272\257%Y<\206A)\275&\031g=\225K\'\274\037\003\036\274\217L3=\347\311/<\275\243*=\341\"\002\275\216x\313=\202\217a\275\364\261r;258\274\003\025\363\274\213\233\337\274\3276\231;\233l\r=\241\325u\275\253K\356\2754\016r=\034\205\303\274,\240O=\346\023\214\273\224\213\333<!<\255:\2741\273=\377\276 =\324L\376\273\275\006s\275\016/\326=R\204\272<\267\020\216<\341\016u<2\246\311\274Mr\376<\232\320\177\275U1f\275%E[\275\033\272<\275\323gU\275\032|\310\274\0042\232\274\036QU\274\206\347\222=\327\0343\274\253\252\003=\326\266\303<\010\357\201\273\205~\202<\211\'E=\240\207\245;\215p\014\275r\347\321:\004& :\271\260\'\2740x\177\2756\336\222\274\016L\017=m\371\270\275\256\007\304\273\263\253\300=wYM\275j\2052=\241\375\225\275\331\236\305<\240^\010\274\022\241\241\274\232\364-\275}w\241\274\223\214z\275\204@\005=\364/&\275\256+.=\034,\274<\002Z7=\266\036w\274\314R\242\274A\337r<\210\267\230<\037\265a;\340\211U=\360D4=\257b_\2748\235T=\265\310\025\275:o\023=|\227.\274\217)Q\275\031\227\002=k\214\276\274\031|3;\202j\351\2734>\201=\361\265\006\274q\372\030\275KS\014\274\274\3707\275Y\3400;\227\224\204\274\327\364S<aR$=\371\252\201<a\232\t\274\232\013B=\036\304m\275\362\237\247=\261O\302\274\237`\275=\217Kl\273\203\030\376<5\334%=\234\"\244<\217V}\2757\000m\274\220\356\241<\025H\305\273^\210>=\177\375\270<\"M\022\275]\230\004\275\233.-=/\016\305<\206\010\372<;\233\365\274\214\376\026=\363\241\024=\376\202|\273\346D2=@x\005=#\253\'=\367\200\203\273<\344\n=\300\233\020=\203\017;=\2447?\274\221E~\274s\031D\275\357\201\245;\356\336\364;\001\'\252;\300\253\327;D\\k=N\353=;\231\232\276\274g\343k\275Pj\374\274\244eR\275O\244Y\274\374\237\262\274\236S\213\275\374t\211\274H\365N\275\260\2404=\247\253@<\307\370\273=?\357\210\274\217\352\275<\2062\331;\330\225\214\274\234\021x\274>Y\373\2722\020\361\274\233-#\275>\315\270\274\367lG<\366\265/=\271=~=\337\256\226\274<P^\273\232\373\r=\275.\t=\245\367\030;\342\267\213\2759\226T=\265\356\304=\344\362\000=\320\014W=\273\3753<_}\002=\205\341\024;\274\327\031=6\n\232\272\366\006\277;Lv4\275\206L\262\274\006\004\347\274\341\002\217=`\266X=\n\220X=;F!<\247D\225<\241\215d=\303a%=\253\000i=\026\203d=\027\325o\275\025 \355\275G\200\300\275\363\225\337;\366\374\t\275\374i\221=\251|\007\274\336L\010=\037/\257</_\322\273\"\037\213<\256\231\242\274u{\274\274\367>\357=/u:\275\304\262\205:\210\336\204\275\032b\252\275f\342\225<\350\\c<\rG\362\274\316~\010\274\360`\315;\370\335q\274\025\005$\275\020\252\017<\276\357\223=\221%\\<\340Ct\274):\001\275\273\276\311;\203\033\231\275J!\366<\374\221\261<\263:\230=&\377\222\2755\277\344\274\373\351\200=\266\256\206\275\372\022M=b)\223;\313\246\200\275\004\322\017=`\320\320<\267\032\331<v\254\021\275~\006Q\272}V/\275\313\361*\274V\252|\275\347\'\257\274\243-\030\275\270k\334\273L0:=\217\246\032<c\002\364\274(\333\276<_\374\344<\273\006$\274E\217T\275\243y\342;\t\366\273\273\300k\223=\261\025B\274\255\212\301\274\351Q\220\274\360\rb;\252\t\246<\355/E=\007\035c=\200\211\251=\273K\226\275\332\235\355<\224\307|\275\251q\007\275\226\371\323\272\317\332D\275 \367}\275\016\266u\275R\306(\275\r\303\243=)h\210\274*\273|\274\241f\300\274\311V!\275\177\257\001<\351\214\314\274>\250\204=\336\216!\274\007;\311<\313h\233<XU\034\275\025\267\315;\254\316=\273\226l\326\274\315[J=\365\020\233\274W\004\340;\230p\217\275\364\376\374<bO\201\272\021\351\303\274\202L\001=f\312\002=|.3<\342\021 \275\276\226\234\274\300\005\005=i\032\313=\374\032*<\301\341\027<\020:\t=3\034\177\274n\212\003=\376p\213=\214-s\275\t\320\321<\007\202<\274\342\001M\275=\363\201<\177\350\335<\226+H=\233\nZ=\213\272X=\216C\323\275\235B\277=\\\377\217\2748 \350\274L\352\254\274\253\340x\274\376\305a\273b&\274\275Dl\014=\3506\314=\010\257\237\274\245\023O\273\177\331)=\250\373\246\275Kt\356\273h\266\315\274\354\260\266<\200o\211\275\374\247\260\274p\323\313\275\305\357C=\0141$\273\020\003v\275y\\\272<\216/];#C8=\311\025\351<\360\003\032<\235t\370\272\003k\261\274\022P%\275\204{f<ow\244\275g\376C\273\355\353\007\274\021\304\350\274\232\245J<\245,^:~\256\207\275\026\270\216<\216\342k=\215mT\274\357\375\342<\314O\245<+\202\'=T-P=bX\273=\375WX\274\355xZ=b\367b\275\317tg=\005 \235<\347B\026\275\354eQ;lk\206\275\336\332\306<\320\220\331<!\024C;\r\347\026\2752\320\026\274\303O\031\275\230\314!<<K|\274{Y\035\275\220V,=y@\026\275\237\r\267;!\302\027=\320\002\226\274wn\202<\246b\260\274\241M\350\274{5\026\275HSR\274K\365\237\275\3636\225\274.4\004=k/\032\274\347\353\232=s\360\221\274]\273\277<\217\265\271;\235\206\201\274\003m\273=\026\361\222\275\374~\025=\343w\231<#\316\032\275\221@\251;\031^\273<\300\215\325<\301\262\270;\231\350\207\2758\000M\275drR\275\247\240X=\025\023\245=\311[\350\273\310Df\274(\254<<*g\013=\347H\217<}\261\264\274\226l\261\275\\\300l=\362Q\331\273\355d\003>\007C\310<\242\336\276=\026\253D\273U\257\231\274-z\370\274+\004\\\275S\263\255\274\017\360\2609\034Z\255\275\376}$\275\266\216!<~\347\316;\346\265\237<\253\355\211=#\316\032=Lm\251\274e\")\275\333\177d\275\346\3215=\225\320\216<\312C\2369\032X\260<i\260*\273\357$\366:\266\034)=oK\202<qg,=*\t_\275{8\210\275\342^\347<\000&E<MAV\274\010\325\222=D\210T\275\005\326D\275a\232\023=\336R\270\275/\026\211\274\326\226\272;\340r9=\034\342\025\275\347\241t\275\203\0137=q\202\244<\243w\272<\372\254\270=\205\376\230\274(\316V=]\337\006\275h3\332<\246\264\225=\374$T\275\323\201`;\227v\350\275l\2039<\2343\232\275-\236\274\275v\344\207\274\271+\244\2744\r\260<\233NJ<a\203b\275D*h\274\375)\034\274\256W\367<\325\257\302=\237aY\275\277\313\253\275\023~\216<\322\241\254\275\370\211+\275\'\264c;\257\255]\275\270N#\275\223]a\275\240\300\177<\306\017\214\275\2575\251=\014\340\003;\036\201\253<\325\334\352\273\371\036a\274\230\264D<\274\322#\274\234u\340\272sn\336<~\375\017\275\251C\201\275$\\\244<\277Aa=\2124\003\2756\27289\302\204D=\254\226n=\341w\001\274\271G\t=\334\010\231<\300\302\341\275\326\224\201\274\272\'/\275\225`\206;\265\242\344\274\213<\321\2749C]=`A\035\274\254\351\302\275\204\276\300\274\375\354W\275]\004\205;\375\2576\274\251\200\237\274\020n\302\275\305\302\213<\025\2429\273Yy\205\274b6><\010\2233=@\350H\274H\377m;\273f\340<{T\263;y\362z=\016\365\017\274\206\217\252\275\346M\255\275b\'\326\274\231+\345<\244\034\232<\276^;=i\251\332<\222\375\177<,w\025\275\346\342\010=\243\017\007\274\200\206\351=\034\355Y\273\317x\252<\'G\001\275\232\036\'\275\317\037\030<)\240\206\272`\311I=\266\360\r\2759\273H=~\205&\274\323H\250<@\003\311;y{P=\030\216[=W7\377<CL%=\343g\225=`\0362\275MfT\274p\361\017\275\017\023\250=\334K\243=;4\331\275\023\267\275=\237\352\257\274\373\212\351\274\332\221\242<(\252\223\2757\247\245<\000zV\274\207\265\246:\377/\357<\204\330\226\274yC\372<\3317e\273\226*\n\276\325\351\203;\336\372X\273\033\337\261<\203\tM\275,0\372<.7\036\275\307\301\221\275g)\016=u\004\310=7\350\203<\335\366\302<\354\263\006\274\274r\232:\026\375$=s\337\306<K\031-=\313Gm\275E\333\322\273\370\023\231\275*\370,=b]1:\036\341L<4N\021\275;4\010<\314\215\211\275f\227\307\274\301l\031=Lod<\'\325)\274f\305\345\275{\271k\274\257>\311<\223\365\317<m\2417\275\272\251(\275\243\223\246=6\363\200\273\275\033\230\274\235\202\254\275\264\'\205=\300\206\265\2752W-=\376\230\006<\252t\017\274\216\n\277<A.\023=\252#\320\274\373\\\t=-\354O=g\277\013\275\312f\261<\230\326<\274\322\336\267\273\366O\010\275\311\366@\275\232\235\r<\201u\313<Jm\252\274\230\260\277;f\316\222\274\036\306m<{\022\277\274`5\254=v\3549=\356O0\275X\016H=iR==7-\272<W\310\310<\364z\203\273\325\371\204=\207p\021\274\316`\345;\277<\022=\347y\223\273$\336\265\274\014{\376;w\022\016=\315\326j=&\355/\275\312\333\343:\037\310\363\274\3074\257\275\265J\252\274\264\223.;D\366(\275\021\277B=t\2227\274\005\036\023=`\'\032=\023D\212\275\264\317\\\274d\r\356<B\351\014\275\224\377\004=\321`\213\275|\200\202=h\362\010=\355H\272< 0*\275\232\325w\275v\323\211=\276\366\304\275U\254\265\274\314-\026\274\341\3751=\326k\334\275\351\326\303;\300\017&=g\350*=2R\237=5X\272<W\t\306=\022\300\242\274\364R\226=\231#\270;xq\271<M\375(\275\235\366\351\273\357%\326<NQ\312\274o\261\272<1B^=\3114(=\361\253\024;\013\2203;|\302)=G\nC=\305\222\231\275\310\302.\275\302\240\274<\324\036P=\373uL;_.\343=X\204\014=\005\024\000<\203\271\222\275\220\002C\2757\256.\275\250V\214\275\306\323\027:+\253\336\274\017/(\275n\020z<+Py<\340\2237=\2214\203\275\027\031+<\225\260\233\274<\'\'\272\220\261\004;\331\340B\275(\211/\275\253]\220\274\232\311\355<\277Z\264<\314\257\303<\271\356\022=\207\377K\275\224\027\177\273\273\352\016=v\301\340;Y\213\\=;+\246\274|\356Q\274\321[\331\272\327\327\272\273\353\033\034\272\267\022(<]`\270;\001\006\033=lz\'\275~\232\203\274\363Y\243=\005\323^:c\314\251\274&t\033\275\226\240u<JP\360<`i,=C\262[\275\017\237\022\275\001$\212\275\265\205\202\274\215\022\004\275\017\014\276;[\266\354<\035\221\221\275\250\226^=02\026=\276\010T<\\;\036\275\333t\225=s\324\223=\014\020\247\272\210G\234\275\2275\205\274\030`\206=\276\350c\273\331\257\226\275\315q\343<\032s\271\274\201\010h\274\341\231\332\2741\203\000=\'\374\256=[Y\252<\315=\215\275^\001l\274l\340\003\275V\002y=\267\277\003<Bi\211;D\357\'\274\341@S<\0257\034\274\001\247\177=\334\243\216<3\\\311\2712\225B=<\271\327=Y\267u=0\205t=.c\200<\341\010\232:\005\240\235\274\223-\245\274\213i\246\274\0217\271<W\377\r\275\333\350B\275v\"e=\313\010_<\266\304\222\273\377\262\036\274\256K\211<\322\227S=\313\235\363=\370\305A=\035\307\r\275\241\362\177\271\313\367\022=},\201=\274\356:=:e\021\275m\353\222=Y\301\361<\251\326R\275\257\033j=<\005\225\2720\330\212=\377]\204\275\225#\020=\030\301\366<N;_=\221\207\304=yG;\273W\';\273\372E+\274\034\364\032\275\315g9\274\340\340\373\274\344\252\376\274s\216\013\274\201\365T=\3106\340\274!j\352\274\000\324\266;\014~_\275\234\t\"\274Pn\304\274\245v\240\273\340s\006\275\222\327\010\275SD\215=\366\243\313;a\237\270<u\366\376<\320\347$\275\326\332\313\275\367\265\202\275S\203G=\'\022\022=\313\3472\2757Z\212\2751\347i\274\317\004\001\275w\356\001=\247\020L=a}^=5\332\320\272\343O&=\032Us=v\215\324\275\250\252\237;\262IC\275\305\364\021<\327p\310;aC\204\275\316J\007=\010~\243=\233j\207\273\250{\216\272\244\223\361<\276\356\005=\272W0\274\326u%<.\244\001=?\331\215\275n\325\257=\370p\037\273\340;\322<\254\352G\275#\337\026<\023\214\362<\246*\206<\266\031\006=\320\211\014=T\326J\275\365\2626=\200\014\200\274\007>\017\275\200B\327<\302\026\364<\205is<\316U\323<_\\\003=\263W\001\274\217\005\301\273F\026U=\027\206/:}5]\274\375\001\217\275\213\301\314;\311\304\324\272\017\350\030=\326C\246<\017o\212\275\222?\210\275\226\245#<#\016\235\274\225\013\250<\316\231)=\216\030z\275IX\205=\021]\325\273\350\212\020\274\351q\n=\020\000:\275\235+\230<T\211\005\275\242<\335\271\333\310I\275\373T\036\275]\2053\274v\300M\2755&H\275\346\221)\275\025\032\001\276\310\225\332<\307s\210<\223.\026=Cc\250\275\260!\016\275>;9\275\370\204{\275#v\316<\312$T\273*2\254\275\025\225b<\273\371\354=\241\\H\275T\233\254\274\260\215r\275\233\323[=i\230\226\274\225 \356\2746\225%=\201=#=\211\230\005=\263/\032<x\354\302=X>\211<\325\265[\275\234e#\275\305\r]9\013j\317\273\254\336\374\274\321 \257\274\377;v==(\302=\020\226\016=\032A\344\274\273\017\030\274vR\230<0\021\225\275g\371:<\301\022&\275\257t\305\274\363+\242\274\313\031\203\274\306\364\236\274\226X\177\275\335\302\214=\351\034\177=\334\007\002=\267\2447=\274\215\216=H\027\200\275\305\223\336<,h\325<\361\273\265=\237\256\226\274\177o\034=I\372\203:u\223\267;\227\363\317=\355\364\243<@\236E\274>\216r=\220@\257\275\3703L=7\227\242<\201z6=\331\027I\275\267\360c</\217k\274+\323\232;\323t\203=yI\306\274\372\362\220=\357\217\223<\010/\330\274\236\272t<\215D\034\275\007\357\025=\333\026\005\275Wh\177<\004\022Z<\352N\254\273WCA9\2456\014=\177\r7\271\213\251Y\275A\021\207=\317\270+<@\354\322<\324\3445\275o[\360<\210\345\233;\373\273\254\274:\251s\275\315t(\275\205,K<\276\317==\323\016\234=D\254_\274\020C\031<7\021u\275g\273\315=a\275\027\275TN\312<\325\246\010=l\325z\275\237\350\316\273\332\363\006\275\377\214\352=\3261C\275U\021n\275}t+\275\022\365Q\275\360\270\267\273\216\250j\273!|\026=-\032Y<B}\267<\234X\036\274\341\317\231\275s\010\227;CkF\275\033*\026\275\030\237\\\275\206n\204\275<\035!\275\307-\266\274\024\356\027<\201\327R=\364\2768=gO\232\272\\\277\031\275_\337\312\275\222\346\031=\232\327W<\026\265n\275&9\177\272\202\277F<<\3516\275O\377\202=)\217\361\274\300ho<N0\360\273L\326\223=;]\210\275n\027 =j\014.\275m\324,=\2028Y=\312\007\013=\244s/<\242w\367<\000F\251=D\372l\274\373\376\245:\332\004?=`\342u;\2530q=W\347\037=\360\374\354<\210\010.=.8\225\274b\274\202\272\250\014\313=~{\354\274\365\027\255;\221l\236\274\033\0067=@\355:<\206h\205=\265\2058=I\'\240\275&W\322<2\357(\275\022\320q=M\252<<&\236\265\274\361H\340<=\247\304\274\330m\n=\350\261p\275\202&\241<\300\271\344\274\355\206\001=\221\367\236\274\305\225\240\273\2329\206=FZ\221\274\263D\013=B\277y\274\240\354\037=\264}q=\260\306\371\274\305\330e=\025D\'\275)\330n=H\224\232\274\200\344\335<&\346e=G\3602<L\211\">\273A3;\247Q-\275\265\276$\275\312\215\327\274\2153T\274|\341\227\275\275%\221\275|%\033\275\334\001%\275\014NQ<6\000@\275\366\310\200\274K\022p=\025\361#<\373:@\275*x\325<\004\2656=\"]\r\275\013\361\313;5d\254;\303\244\232\274\302\350-=\033\331\327;7\014<=o\2028=\020w==\267z\252\274kS\241\275\035\212A\274k?\374;\'\216\313\270\243G\330=\300\273\007=Z\301\276;|\323\004\275\243\032\r=\363\224\310\274C1\235\274\027x/;\255\234\272\272\364L\212<pJ\335\274\ni\227\275\307H\017\275\241)\245=\263\370i=\372\037);\tvu<\006\216\356\2746%\373\274\335&\003=\035\225G\275~\310\001\272\246\206=\275j8\364=\312\264\323<\327\021p<\017B\333=\245\014o\275\205\376y;;\203>;A\035\254\274\013\342I=\371\355\275\274AFU\275c\217\016=\316F\032\275x\203(\275bj\r\275Qu\"\275s\"@\275i\031$\273\214\342\302\275t\264\313\275\302\020\345\275\3222\351\274\311\245\014\274\334)\366<\262\003\033<\035J\341</\"\"\273\007\230r<AU\215\275\375H\255\275\224\"\256<\305\303\215\274\315+\240<\275CX<{\\3\275~\371\026\274@\263\337=2a\237<\003\342\200\275w*\233;\275B\014\276\255\234\266\275\330\250r=K\014\025=!.\201<\340\033\322<:h\323;\265\276i=\247\341O\2758\213\022=\302\223\253<\036w\311\274\314V?\275\300>\\;\271dI=K\201\254=\006v\334<\262\301\341=%\317\247\273\363\242\211=\250\356f<a\t2;\002\037\375<\252\376v\275[\222\006\273\r\315n\275\2155G=\306\373c=\346\330\242<\330\000(\275\025p\330\275-\027j=\273\300\277<\263r\277\275I\271+\274\215\3602=\321k\"\274\354\017\272<\225\352\266=\307d\224<\201\232\232<\373c\202=%v\025\275Q\021\246;\345\033\326<QOy\2757O\241\274\372oP=\327\213-=\210\323\224<\224\320x<\210\037E\274\347\204\232\275\335a\360;N\256I\274\244d4\275\215>\352<B\024>=38\001=*\221\331;\336-:\275\335\374\200;\233{\034\275\250$\355=Z:\234<\036|Z\275\"F\321:cy\305\273~D\002\275\364\322A\275k\304`=\214NJ=\224\225\350<J\263\\=\001e\273\274\273\271\036=\240\370\343\274cv\221\275\2616c\275\321\356D\275\327\357<=\262\016\235;s\205U=\377\004e\275E\377\033=A\261\224\274=\030\363\273Xr\220=\202\271\200\275\345\222S\275\266\007\327\275/\263\214=\030U\272<\334aO\275:\277\321<\0027\014=\367\310\316<\030\370\013\275\347S?\273\261\247\355;Q\267\016\274\307\330\\\275-\240L\275\356\006\342<\360Tf<W\246==\313:y<\020\361\226\273\314|\247\275\346*1\275g\206\270\274\301\240M\275\250-p\274<\202\337\274\010\n;\275P\\\272<W\020X=\325\351\200\275p\250:=%\266\230=\256x\010\274\005\273\220:\333\022\003\275e\035\205\275b!\272\274\301I\337<@\253\270\273\306\332\216\275\310\372\010=\344\313\266\274If\212\275\321\374O\275\204\304\307\272\335\240{=,\371\367<h[\002<\327\223]=\273\001\221\275\262\221\320\274\206\324\276=\362\223\010=\333\240\223<\371\342S<\035\232\274;O_h<\020\313\356\274W7\367;m\273\r=\316_\034=!G*<\234\263\2709\320\201!\275\261\210\307\274\330\330\233<\260\270\207<\214Qa\275!\307:>\252\277I\274\302\'L=\255\275\206:Y\220\311\2744\331?\275\250\227\276\274\211\002\006\275d\001\026\274nZ\224<Z\'\225=\270\013L\275\007=U\275\352\221\353\274\266H\305=\313\260\347:\353G\221\275\242\306\'\2755\317\026=r:\277\274\245\'\031\274\261lL\274\367c\222\274u\317\276\275\361\253\n\275\362\362\315\274\374\212\232\274\370o\343<\016\001\"\275~\023=<\220\t\\<\005E\221;5\272\r\275\244\375\002=\211\237F\2740fw\275\023\257\224=8<\024=$\277V\274\r\003h<\371\242\272\275\361\240\366\274X\271P=\234\340\215\275(l\231=\r\337\236\272\t\264q<H\026,<\204\333\210=p\377\177<\221u\037\275:\016\323\274n\177y\275\210\024\302<Y\007\001\2754\262M=I\310\215<\265_\266\275E\200A=\217\271\240<\244\2504<,c\276\274\246\332w\274\313\331\333\274\310Y\213<I\332D\273y\000\254\275!7\350\274J2+:lk\323<t>9<r\340\230<\266\237\201=\366i\032\275\265\224\032;S[\007=\244\310\223<\243\177\217\274\311\037{<\316w\320:\253\346U\275\353\031B\275\204\377\206\275UUY\275\312\343R\275:\300_\275v\362 \275\374\215\006\274\343\001|<E%\372\273\271\303\201=\204RQ\273\022^\022<uv<;w\240\344\274\201\210[=\332\375E<Z\037j=\375\215\003<\037 \032\275x\344\224\274\312F@=\341\220\230\275C4\311\273;y\331\274\207*\245\275\024\302.=.\0272\275gr\224=\216\2205\274\237?\026=\337\030A\275\362\305\253\273\"\027\003<\007\267\010\275-\'\226\274\263\277q\274\'\177G\275\233Pp=\322\316)=1\324\027\275\210\302\254;]\000\302\274J@:\275S\304=\274U\346\224\275\316J\377<P\206\023<\377\325\212\272\237\206\250<\223#\220<\335\321\207\274\306\202(\274P\363A<\\\254\217=\273\222\324<\213\376\3649\202\233,\275\264\355\245<Hih=\270\270G=\242\215\304<\246ip=\200\347\177\274\345\016\277<mK\322; 1\215<\300\303L\275\301[\230<\254\210!<\205\013A;\344\366o\274=2\026\275\223 \211=\274\313d=\354\222\'\274\346\325\240\274+U\177=\221\037\031=\344Z\254<\327,\306\273v\254\220<|\375\260\275h\203\223\274]Bh\275<\274\366;y\337\372\274\034\027>=\340\0106=)\307\230<\252\243,\275\315\300p;\332N\250<I\335{\274U#\351;\266w\251<\335\307v\274\363\302\371\272\217\017d<\323\347\276\273\250\007m=\007Og=\3604\312;Mz\370\274J\367\316<\016\001\224=\3517\007=\362g\237<\214)\006<\272\r\275<\036Hk<\266(`=\267v\355\273\034\354>=\270\315\226\274$\342\225=\237WK=\237\322\016<Jv8\275\300\327\210=\323\003E\275\033\236\304\273\300\365.\275\"J5=\237Y/\275{\247\334\275\212D\220\27596R\2741\263C=t\270\010<kD\206;\330\354 <\300P\256<\177\310m<\345\266\240<2\r\224;M\016l<\345\336\363\274\340\032\021=\246\361\307<\200\033\230\275\300\274\255\273\333\366\031\275rni\275v\346\031=\300v\r\275@\3641\275-uD\274^ii\273\371\037\302\272\233L:\275\260\226A=\305\334V<;r\037=\306\343\301\274\314)e<\013\262;\275\307~\272\274\2314m=\320\017\257\274R\3619\275\314\350H;\254o\200\275\264\361-\275\327!\267=\213\254\027\274)\"\253;\231f\232\274\004\202\202\275V@\257\275\367\201\337<\037NM\274\222\257\215=.\205Y\275\313\367\241\275\337Jr=#\346i=\247\245\225<\010-9\274\213\2206\275\202\264T<H\332\014<\320\362\344\275\224\367><.R\301;m\271\226\2750x)\275\376\234\274=\351Z1\275\230)K=\334?.=\377 \024\275=M)=\346\223\237;\314RY\272s\360\230\274\323\210g<\245\000i\275\305\304\t>B>\n<\366\226P=\361N\320<*\223^=\335\010[\275\365\177\317\273\302\036\032\274\003F>\275\244>\020\275\260\257\025\275\211\374\340<\334\357\332\273Iis= \034\327\274\204\240Y=@O\021\275\222\205\357\274\236\364\257<\224\232H\275Wi\207\272\005\252)\275\362\010\225\272UM\203;\277\363\257=\030\220`=\025\210\265<\317})\275\017\230\327<\273\244\014<\364}\330<\341\357\037\275h\331\324\2748\373\221=\276B\362\272\030\023\251\275\3359\020=H\020F\275\203\\L:\177\177\227\274^\257,\273\367k\353\274^\367\263=T\031+=\375\214}\274B6\n<+\2059=D\202\232\274\036\363\037=\335Z\200\275\256\256\336;\273\261\000\275\205\027A\275Pq\354<\363\033\221\274\031\022\254\274\206\270\271\275!7=\275\340&\036=\363\356\352\275e\3111\275\200F\212\275\036\273E\274U\370\024=\327\202\241\275\021\324M=\221\nW<\267\306\277<o\364\231\274\203\261\376\274)\003\230\273\3760f\275\231\r~\275\306\222*=\243\034\205=\004\033\212<l\3561\275\215\025F\275S\2136\275\277\270\000\275\004#\'=\213\237\006\275^\343\375\275\322\252\361\273>\212\255\273\327O\302;\246\234\013\274)3n=\301 \343<\003!\250<D\340|\271\300\\\351<\000\326\352\273\252\217}<u\265\206\275\316\367\370\275x\304P<\037\336F\275t,_\275(\214s\2737m\037=\242^\n\275\201\345t\275\214\266,\275\261\264\332\274\0163\002=\336\223\352\275Q\n\266=|\234\217\272\351@*\275=b\272\2747\312\257=\312IQ=\n\340.<\320\331\027;\270\240\237=\021\322\216\273\220,\241=\007r\251\274y\320\354\274Y.\276\274\037Z@\275`\372\340<\030\177\004=\304\226\263\275\220\023\207\274\267\t\235\272\2116S=\014\200\025=\253\003\224\274\210\305\325<[\030g\275\211\3311\275g3\n=\3261#=\262\323_\274*\017\304<\213\234\351\273\003\231\346\274\n\341\355\274\223\361\203\274B]\347\274A\255/=\256G\\\275\376U\250\2748$\017=\353\225\274=u\332\205\275\n\305v=\327:0=|\355\014\275\215\356\206=\000\377\t=\225\351\336\274_\336K\274\322\211r\275\322\276\343\275R\227\345\274\032\311\336<\200;\210=f\210\033\274\345\3264=x\340\262\274\213\033*;\374\273}=4p\314\273\372\271\234<\030jC=\014Nb\274\335\337\021\275\206%\377\274\003\344\"=\254_\246<\023\")\274\314\342\232\275\027@\223<T\231\362;\265\363\354<\206\312\373\274#\325\337<){\274\274\311\303\345\274\"\023S=mS\234<k\034\222\275d\007\325\274K\350\243<\370-z\275\317\311\362\274\245\376\244\273\270_6=\017/z<\272EP=\001!\370\274\332\222w\275\212\247\276\275)\213\\\275w\024\253=\232X\373\274\256h<<\006\222\250;9\322;<\033\312\337=J9\023=\356\212%=Y}L;)\372\374;N\276\226\275\331\266\233=\235\340\"=\t\341\357\2740\273N\275y\354\010=[?\255<-E`\274!\353\004\274\215\005O<\373\262H:B\277z=\342\301\332\274RD3\275_\232\307<u\257\320=\240N\031\274\021\'A\275\304\264T<X)0=d\n\322<((\034\274\253\265\231\274\334E\271<\237\267(\275\310y\317\273\366h\026\275\364G\227=U\204\206<\342r\241\275\216b\227\275\213L\311\274\301\006]\275R\000W=\0373A\275\205\213\201\273\375\206\351<#\240s<\234\030\203=\021\357\362;l\210P\275\352\212\177<\315z\033\275\t&W\275\031\201Y<\367<\037=Lf\035=\324 \306;_a\256<H\356*\275?\223|\275\021EW\274\304\330\313\274\223\306L\274\020W\034\275\360\272\371<CT\305<\0144{<\245\353\307<\343\202p=\322\213\'\275\345P\007=x\311\242=\221\374;=\371\371I=\244\242K=z\000\366<\311_\001\274\007\251\266<\033\253(\275\334\235P\275V\365T=w\307\251\274\343}\363<\270\264\310<\247\244\256\274q\333\000\274_\005\332\274\272\014\373\275\370A\360<l\360c\275\3656\263;\320\361S\275\354|\306\274\201\226\252<\367\216\255\275\351\361\330\274\306\r\031=\350~%=\356\3528\275\274\"\013\275\216\261\021\275\316\242\032;\027\210i\272\304\034\036<\313u\266<e<<=K J=!`\234;\257b\232\275\335\204\303\275\257`A=\357\324\211=\3140\033\274\267\007\366<6\2432\273\320\275d\274w:\240<f\273\235=\326\325\310\274\343z\321<~\277\375<\036\247\210=X\303\016=\005\024!\2757k\233=\3701\366=\263\377\232:\244\305\332\274\242\036K\274\344\337\334\274.\n\215=\322\357M\275i\026\257\275\333\204\266=\275GX=\342\257\n\274N\233\214\274\035\217Z\274g\215D=w\374#=u\000\234<\206\224\317=F(\227<\352\333_\275\nGB=\2543\213\273}\250\277\274x\264\246\275\231X\263\274\026\014\230=\323\345\203\275\211\304\363\273\224\251\212\274O\256\370:\000\\:;n\216P\274\331\017\177\275\371\272\370<\007\356\336<]`G=\001wT<1y\315<\315\001\025=\223\013\201=\246\373\366\274G\307\265<G/\252\273\177\255\250\275\002F\233\274\370\206\212<\204\206\027=\330\246\224<O\322u=\207\253\017\273\302\371\346\275\245i\202\275\212\033\036\275H|\325;4gD\275\277\357x\275o\002Y=1H\002=\036H\035=\031\340\316\274\206\373\021=\370K`=\025\303\343;#\177 \275\t\314\205\274\301\315x\274\257\361\230\274\253\351\262\274\343\336\010=\235\303;\274\353\243q=\366l\336\274\017e\252;1\211\202\275P\t)=$:\315\2733\257t\273\202\312E\274\216\221\266:\333\035,=\230\205\004\274\002\211\006=\232r\316\275\350\0217\275\376p\253<\022\220|<\021\2048\275\331|\361\272\024\303\361<\n\372\010:\355\210H\274-\210v\273\264\377\347<\331h<\275\232\264\230\273\261q\032\275|?\220;oy\324\2755c\202=\207\324p\274\2450\206\274\226\316:<\007\234\374\274-W\313\273\340\"\314<\223\316\005=\025\351\226<\211\345\217\275W\356\032\273\275L\211<\267P\021=\355?O\274\374\345;\275v\232U\274\371\361\226\274\217\316\273;y\321\327<d\254\300<\300x\204\274Q\036\204\274\375\036\025=yB\371<\304\243\254<\251O(=.\311\351\2720\376\022=I\036\'=cT\207\275\014\222\221<\205\215\245;\025<\240=\346\200\323<\231;\212=\371\335\210;\324\030V\275\355\353\343\274\230B\376<:\021\360\274\032k\361<\001C\030=,\223\363\274\260V\324=\227~M\274Y\320{=k\335\304=\332\034\346\274\203\003\234=\325J3\275\317\n1=\342\2767=\010\336\256<hT\"\275\352\321S=F\231\271\275(\271\357\274Zz\254<\001\276B<\305\240\236=\377\310><\265\342\246=\345\372\014>i\023\007\275\377\307\003\275m\317\252\274z\'!=S\223\313</\217\362;\032\373F<d\344\255<&,\337;\020\247\001=\263g}\274.\215N:\251\372i=\320\236n\275\254\313\234\274$EK\273\303\362\275<\375\261[\275\216\272d=z\037,\275\263\267,\275\234\372p;\217\356\021=\251$\014\275\331rL\274\254\000G\275\257S5<\372\004\311\275\340X*=O\355\024\275\333\313\244;|\3072\275\323A\264\275\232\3649\275bc\226\273\253\t?\275\023\232\031\27538\n=\204p\225;\025\364\227=x\212\224<\342\254x;f\005\026=\354\265\321\273\352[\275<\356\245\330<}`\212\274\343!\375<\'\304\224=!t\276\273\234s\034<\265\212T;\220.\253\274\202<\353<\247\200\346\274t\214\214;*\364,\275\274\350o\273R\000\3679\225\261\262\275F\362\n\275\375\037\251\274I\360\214\274\013\205\n\274\306P<\275\274\213\327<\024\203\222\275\213H\217\274\271Sm=|\214v=\341D\301\274\331\365L\275\362\004\005\275\277\177C\274\353\032q<\001\002\225\273\344\255\355\274\330\324\326\273\205?\203\275\365wI=\255\326\343\274\335@_;\317\320\206\274?\333H=kSq\2740U\321<\367\3620\274->\232\275\202\036\243\275\343t{<\207T\300<\201pN;w\t\203\274a\232\226\275N\374\237=\232e\272\274hR\n;\371\017`\275\317\251\033\275\245\363\277<\242\010\226<=X\276=\305s\275\274\230HX=\214\256\237<\333\364\366\274\000\004h=\257\233\n=\344\016`< \231\005;\336\2003=I\313\322\2744\267\236\274\032.K=u\302\002:\371\026\246\274\246\223k=\177\205l:M[\037=M\260t\270\321M;=\272]\275=K\024,\275\246\311\034\275\351`\220\274f\313Y\275\322D\027;1\270]=\233\3505\275\035\211\254=\314\023u\275\020\3738\275\316u8=\211\332\377\274\205\204\344\274 \232\240\275\265I\031=\035WZ=\031\022#\273\307}R\273:\375\t\275t\177\242;\320\303{<\007]*<\321u,=\245\213$=\277\272\010=X\243\334\275\032\023\262\274\247\203f\2746}\207\275E!\242=\033\3021<\2075)\2731\225\221\275S$4\275&\230d=\252\246j;\244Ou=\223\337\333\274\375\r\027=\230\350\243=%$\237;\254!=\275\354\333X\275\340r\014\274\360\027S=\246\370\205<\267![;v\037\317\274\372\2053\274\017+\202\275\357\022\216<\026\026\301<m:\215<*\002\221<*\341J\272\362\342\254;\235V\263\275\243\264s\274x\316#\275\3749(\275\2229\317\273\335\022m\275\371Y\217\274R\306i=\007<\226\274\262\256@<d\256\321<\367\350\017\274P\210R\275\375S\023\275R\205\234<l\217\033\275\313f\023\275%\301\270\275}/\273\274X\213\'<\265\0057<\3630\'=\rLw\274K\023\215=\033]\250;8c\206<_\352\001\275\223\323D\275\033\217\244<\235\202H\274\031B\'=lgs\275>$\027=\346\020%\275\205\223\237=\360H\3719\371;!=\352\017\210\275Y/\304=x\317t\273\365\262\212;}\375\361=\371\036*={\024\224<\260\273\271\275\007\241\311\275]\362\271\273\2640\203\274\377\271]<\341\350\205\275\244\204\222\275d\327\003>Cn\326=\225\004\256=\210\361z<\340f\026\275\034\023\224\274\017\245\203\274\337\220\345\274\247\317\r\275\216t\307\275\r\377%\275\330\332\317\274\241\250]=\n\230m\275\203\225\326\274P\n\265=\340\024!\275\253\026Y\275\016\200v=8\355\\\274{je\273\251\214\032\275Gt\233\275p\247\200=\301\030\200;\307{\261=\206\355w<\013\232\225\275\301I\037=\363V\270\273\207\257y\275\3253+=\3042\001<\024D\225=6\241t;\017K\315;1\330\032;v\3410\274\200`4\275\205\252/=\225\261\230<O*\333<\335f\023=W:\237=J\367\355\273\332Db<\237\312\"\275\223.3\275\370\301p\275\313\024\n\275(\355\343\274#\272\202\275\014\277\202\274\026wg\275\332\007\211\275sz\341<)\370Z;\230\242\271\274\226\246\275<\006\035O\275*\300\001=+&\237=\250D7=\261qC\275\321\3157=\3450\212\271\363J/\275\376\312\261<\376\247\000<\265\231e=\255b\341<\332&V=\242\036\327\270&-\250<\227\200\347\274^\225\355<\034\364\230<\337\003)=\233L\200=\253\320\t\275\237\030\331;\270/\001\274\203\252:=\036\037\330<\006ZY=\263\377\274<\260\262\022=:\210,\272\264\313R= \266\224=G\324R\274\260\241n=\351\336\217\274\373\"P<SSA\275s\254\243<\036\026\264\274\362\342O\275\037~$\274C\313\264=\346\363\302\272\325\346\014\275*\350\232\275s|O\275\337Q\215\274j~\321<\372[\037=\002\221\023\275#\252\005=\016v\231=\001E\016=o\031\036=\256F4=\3032\352<h\306\243<(C\370;\233\262\211\275\013\3064=\023}\016\274\374\346E=\312\223\220\274\330\361\223\273\225\206\240\275JY\213=\010\227\272\274\312\302j=\274\224\244;\203|\226\272\344\033\324<\234\263\013\275\026E\000\273\343\246T=j\306-=\353D\200<&\367;\275\276lA\274\014\364L<\363aP\2750\261E\274\255\"\030=\330?\013\275U\220\220=\333z\216=\344\377d\275\340\024\246=\235\300\025=4\227$\275p\353\276<\002\027H=>\273\003=]8\376\274\013\010U\274v\031|\273s\037\005\274%\256W\273\346Ov\275\002+@\275z\032\243<\272]\207<\376\014\273;w\311\371\273\020\014\204\275\220`R\274\310\025\003\275W\252\374\2749\001\023=\320$\211\274\217\257v<\362\006`\274\2701&=1\006\220=\272Mt<y^:=\010\343\336\272\014Q\034\2756\237h\274\350S\215=\325$\216<\365V|=\275\267\200\274\021\264|\275\253f\367<\030\032\220\275Z\323\231\275\321\374f\2751\277\223\274\354\310\251<\251\022\360<Je\005=\t\006\273<P\352\2369\243\024&=\353\021\037\275#oU\2751\031\262\273\365A\372\273]\"-\274#S\001=\265o\223=\024j\t\275\255\252\251<\217z\272\275O\201f\274t^L\274\"9\200\275M\346{\275&u\031=\253r\343\275\374L\001\275w\315s\275\214o\243=\342\000h=\341\307\362=\036\252\030\273\251SX=1\311\233=\327z\033\274\303]\327\272\360\t\022=\377\237^\274\332/\273<\333\251b\274\025xy=D\311G\275\006K\210=\23436\275=\243\317<~\303\253\274\007!\313\275i\237*\275\"y\n<\200\257\210=\341\n\231\2757\3165<\266Z\016=c#\211<p\016\210<\026\367)\274\271\277*\275\224B\337\275s\277$=v#\244\275ve\316;Be~<X\017\313\275F\226w\275\271Dv\274\005\217\227\275\177\006\335\272BnN=C/\001=\177ZD<\207\377\222\274D\346\310= *G\275v+\213=p2e=\031\207\205=\252\220\327\273D\204/=\0172\265\273a*\3759\242\333z\274\353\013\t\275\001X\340:\315\177\253\274\350\006*\274^\350\315<\024\022\351\275\236\354\342<R\366U\275=q\260=K\256\333\273\301\231\262\272\212\321s\275\341\026\245<\027$\266\274\026\235\034\274\243\325^<~j\006\275\311\3272\275\302_\347<*z-=P\313<\274\266\021b<\236/\001\275\265\370\004=P\0164=\245\025@<\010]\035=p:q\275\211\261\034\274u\331\222\274\204j_;w|\220<\211W\r=\3053\377<\363\221-\275\276\325\246\2757\314`\275\005\244\327=+\367O;\203\241\257\274\355!\250<A3\330<\236\222\201\275\327\243~=|>p\274C\013\026\275\232\223\202;\335\330f:\331\001\253\272i`\251\275\241|\234\274RE\277;\212\243\244\275V\300\001<\333h\336<\000\366N=,-:<\356\377\335\271\355r6<\331v\250\274~<\260\273\254\312\230\274\350\325\377\274\016$\341<n\351\204<\"}\025=<\214\036\275\236\013\327\273\260AP\275^\211\224\274u+\204=\226\373\253=\217E\362\275\215\375\033<D\305Z<D\224\235<a\331\240\274\246u\346<\202lK=\262\254;\274\354Y\001\275\214\262N\275\007Y\277\275/\322\331\274vxi\275F\033o\274\273!\327<\005\177\347\274H\245\214\275BI\272;\024uA\273b\002k\275\216\263\t\275\037\235\356<\006O\316\275o\312\241<e2\226=HHG=\310\026\371<\005o(;3\356\312\275\204x\305=bp\264;\301\367\266\275\240\233s=Y\227\224\273\244\036F=\233ld<\211\222\230=aW-=\301\324g\275n\355\335\2731\206\003=\031N\225\274T\000\\<(\261\276<\301p\374\2744\272&\275d\355\\\275\246\311\236\274/\276\274:\345\216\n\275\016\007\225<B9\244\274\246\200\273=W\221\213\275\274\237%<eu\321\274;r\211=\373\274\201\275\2362\336\274+\314!<%)\025\276C\356\323<\377\251\251<\253\250\317\275a\025m<\324\320U=\026\366o\274x\324\177=\272$\346\274\344\251\033=\264\222\253\275\345\016^=\3641\373<c\312P:\2447\230\274J\243?\275\356\246\314;t\336i\275\3531L\275E\177\'=kq\r=*iS\275\213\247Q\275\245\002M=\3639\227=;\t\351\273hT\025<\032\342X<g\036\027\275\"\t\375=\212\007y\274S\217v\273\260\216~\274a\365\246=\031/\263\274X\316#=\233\332\304\273QZ/\274\241\271\361\274\t\321\232<\260\333{\275\251\215\267\274\336W\364\274XGH\274\007K\201<\000.\312\275\233\335\027=\260L\253\273\333a;;v\260\224\273\252\203\322\275?\352&\275|\224\322\274vO\000\275I\033\252<\033\274\016\275\027,\010\274$\340]\274.\254\\=\262\332\203:\030N\234==\263,9\232Y\262=U F\274\026\006\021=\230\302\207\274\320\331\024<(\247\030\274\237\244\273<\313@m;\010 \324\274j\3462=\300\360\215\273tw\t\275i\315 =:\021Z=\207\262\304\274\342\345\303<\300$\213\274\336\"\252\272\363~\226\274\r|\200<\0234\033\274]\320\233;\321\311\206=\361\031\330\274o\233\270\275l\356\334<u\364\r\273\331\367&\275\007\301D\275\246\317\236;\330*r<\024\213C=\3408\200\275\232\244-\275\340\215\206\275\207?\356\274A\375\006<\311\370\232\272<\274h\275-g\202=\260^o<\225\034\357\274\315FA\275\027S\033=A\224\027=]\261*\275\026\005\000=\320\367\361\274\002a\000=8s\234=\025\376M\272\311A;<Dh\253<\317\274Q\275\026\303F<GW\344\274AO\\=\211\377\032=\2112\213\2735 \250<|;(=(\234\006\275\014\271\311\273\337^\313\274O\311\024\273\305\375\307=\205<\031=n1\363\275\024\341U\275=Et:\273\242-=\325\2431\276be\333<\031\017\005\275\273*\036=\305D\211<\276\374z\275\333\303\207\274\211?\230<\256U\327<\240\177\215\274jd6=\362\312\317\274\020\240\371\274~O8\274\275\211P\274R8R<\330\316*=\216\n\353\274\026\024\021\274\346^\215=?\371`\273\2551:\275S/\212=\241\000\032\274`\246\245<~\353\356<k\264\260\273^2\273\274x\272Z\275\273\357\363\274rN\206=\016\001\350\274\0076\002\275`\275\334<\311w\023\273\031\321\262\274V9\031\274~\310&\275\t%\300<\370f\007<RP\213<\212\035G=\277\207\001=z\364\377\274\226\203+=\202\317\032\275\032;\214\275->\"\2751\340-=\271E\215\275\365\245\322<<l?\275\262y4\275&\307\322<\261}9\2750$\265</\306F\275)\t\\<9\301r\275*,\245=H\245\264<\0377\t=\374\270\035\273Oo\235\275E\264B\275\252\321b\274\004\253\247\275)g\301\274\352\001!\274\032\0356\275p@\243=\336\235\207=hM\026;\021\031\222=\034\354\221\275]#\322<#\001\330;\3300`<\312\240\002\276\024Q5\275\313\365P\274\020\272T\274-\234\345<X&\\\275\2768\320<\275o0\274\016\211#\274\274\233\200\275\275\372\002\272\224\360\274<\315\311\215=S{\264<t\255\345<N\337\217=z%\241<~B\241\275\021\311\274\275\376\243\007=\260\253\322<0C\325\274*X\225<\264MA=\207\232\024=\035\353\t=\345\230#\275gS\272<M\272\n\274.\312\001=z\235\254\272\254\321R\275F\\\247=J\375G\275\207@\276<e\204\243\274\372\341\370\274\2402&=\322!\022=\036\255\006\276\021\206\3209\241\363S\274\320r6<\302\300\003=\365\030\356;\r\217\215=\212=\005\274\320o\217\275;\212a\274B.\245;\036\276\237\273\241\212\305<\263\005>\275\265\254l=R$/<{1\214\274\346\272\306\274\323\377\001\274 E:\275\262[\014\275\2316A\275QE\\=7X\252\274\345A\321<\271l1=>\371]\275d,G\274\002\3545=\252\216)=\"\254b\275\267\267\006\275.\361\201<\322?\371\274a\355\276\274J{\023<\342\2279\275\210\224|=\244i\025=w\300\034;\246F\001\275TY\017>,\351\003\275\211\231\310\275\235H\362\274\327_\267:8\177\343<\367\232\205=\370\017\r\275tj\031=\240\223\346<\010;y<\325\266\254<\006\273\267<\016\266\206\274sCz\275\234\322I\275\240\022(\272\001\\\224=\376\360\301\273\367k\202\273IR\036\275+\001\377<\3360\215\274}P\017\274\206\220\034\274\315\207\255\2752}\226\275\030)\262;\030\200\227\2752\340\'=\205\250\355\274P!5\275C\237\027<O\001\344<\335k4\274s)$\275Q\203K\275\211Lr=\227\246\':\237\001\254=\377\263\n= \301\206;7\345\220\273\rz\375\273\004\272\020<\232\243\300\274`\242\211<%\010\r\275%}\026\275\354^\\\275;\300t\2749\216\036=\206\3578\273&^\004<\344\213\215=u,v\275\300S\251=@\334l=s\263\023\275\2221\223\274\255\232\254\2747\306\277=\036\023^=\270\247\035=\344<\031\274\030\2047\272v\260\210\275\266Lb<\345X\343\272\224S\213=\376\352\034=\005\372a\275\317Y\034\275[\3277\275Aw\231;\234\355L=\361\237$\275\255H\347<\372\354\263=\345\251$=J\242Y\275\266\260\376<S\272\"\275H-\313;Q\013\252=\035\320\251=\003\312\022\275b\374\346<+du\275\313\200O=b\343\025=A\227\013=\rz\220\274.\327.=\027+\202;\232;)<\304\211-=\2319\301\274\222\2500=@\257\032=uJ\005<A\217\311;Q\362\267=`\266\252<O\240\237<`\330\024=\213\377\010\275\260\030\270\274\241\003\271\274\235R1\274\305\267\332\274\004U\370\274\366-V=\233\316\021\2755\213K\274\3219*:\245\024\375\274~\3322=Z7\n;\'\237\251;\222\211\277<\375\002\257\274K\221\214<\330w\241\273\326\315 \275\357!\026<7d\"\275J\2158\275id\030=\227X\030\275\235\014^=\236K\345<\242\205\"\273\230\357f\274\256}\024\273d\030\254\273\252\313\243\274i\254\217<9^\250\273\230\372N\274\252A\221\272}\210\021=\324x\253=\202\312\261\275\265\254\016\275\022\306\250<\307\311\025\275\270\274\274\274<\356\027\272\014\203\220\275}f\274\274\317\352\201\274b\000\235\272\262\306a\275[\270\246\274\ry\237\275_\211\337\274\323n\212=M\320\322\274s\371\003\275\265tU\274\022qY=\353\346\010\275\370a\310\273\021V\257\274\030\325\007<\204\216\221\275p\322G<\206\370\013=Z?N9\326\235;\275\367oE\275|\024\253;/ \225\274u\315\r\275\320G\224\275\302+\021\274X\300\211=&H\265=\014\337p\273\245\264\366<\210\014\001=\201_I\275LM\266<\375\005\261;`;\0029w\027g<~\362N=\214fJ=\365\361A\274v\036\364<Q\"\205<\007.\240\274xL\220\274)\206\203\274\034\021\331:sBI=\363b\036=\345\310f<\350\021\235\275\010[\216=q\231\202:\371\331\344<\2777n<\036\357\324\275\253;\357<\t\253\211=iG\277<\313f\243\274L\226\216=4\314\204\275\267\353\205\2737+\302=\212\272b\274\002\236\225\275\335\024\034\273\036U\261=\211\312\270\274\025S\205\274\224|\020\273\271\321\211=\206*\004\275\346!\260<\371\020\205\274\372\304\236;\355A\237\273\310;#=\261\377\331\272\237\023#=\210R\324\274\033g\350<M5=\275\224o\333\274~C\255;9\270\023>b;\3219v\034\\=\315FY\275{\210\230\273@\\W\275\'{\303\275\200$\022=6\266\227\274\021\\\010=\035\262\363\2747\344o<\207v\210\272\030-i=\003\301\205\274\375e><[\255(\2748\001\013=\362-Q\274\223c\022<\003\375\222\275\252\243Q=\250^\215\2755\020;\274?\366Q\274\"\345\267<\021\303\251\275Yq\007\275\351\300\250<}\016\204;\310\256Q=\353\314\214\274=\233\233\274\347\000v=S\323 =\362\003\363\274\367r\227\273j*=\273\345g-\275\001e\344\274W\004\205<\265\027\224\275*&\'=\344\004\027>\204\236\227=.2\244\275}\000\233= \271\236<\016\344\361<\016\307\232\2749W\264\275\333C\000\275\357\016\246<\204\206\212=\033\\\016>-\346\016\275\265\251\014\275C\360\311;\205\202\203<\271\362\231=/\245B<\010O\206\274\251\201F<| l<\343\312\\=\276nY=G\256\334\274\353\346\025\275\020\335\016=\254,C\274}f\374\274\020\007\347\274\374\327O\275\350g&<\277\360\215\275\373u3=\242Pr=\352\022\274\274\262\277\217=Kt$\275\224\312c\275\365\243\252\275\315\222\263\274?%U\275\002\231\335\274k]\230\275\257\\g\275\313\316\374;\306\333.\275\257\231\010\275\2256R=\304\307\330\275I\274\241\275yP\022\275\177\244L\275j\256y\273\250\003\225;\204d:=\264\226\244\274\356%\214=\253BO\274\345\224\033=\314\340\324<\200\341\n\274)>\272;\276\333\246\274\241\035J\275\026\333\275<\365\245i\275\232\311\237<A\360I=]n\247\273@\212\244\274\003}\033<O\262t=|M\355<G\031\224=\220\242\024\275\256\376a=l\256\236\274\037\362\374\274\351\202k\274\223e\263\274\240\333Q=\230#\256\275;\253\244=1\261k\275\030\336D=\177`\201=\037M\014=!\202t=\177 \001=\201\035g\274\204\301\267<\274?/=\343k>\275U\215X=p\037O=|7\215\275\325\347M=C0\215=\206!\303;\365\237$\275\222\271\273\274\336\337\303\274\016$\200\275\220\252\211=AO\371;\021VS=\207\374\213;\307g\205=\266\331\243=\327\025/\274%\365A\275$\250\'<\3343\242;i\301\243<u\354\026\276j\334N=\352\005\036=\253\266y\275\263\233R=?5\203\274jH\024\274!s\267\273\r\220\033=\t\007B\274\271p\027=\375\3173=\002\205\242\274ip\267=\273\033S<h\322\263\271,\3679=c\374\016\274bU\256;U\327\304\272)\364\'<x\377T=\003G1\273\352I\036\275\211`1=\267y\215=\221\304;=\245\262^\274L~\264\274\002\255\177\273\311L\360\274\3217\230\272\027\t\212\275\303\336\326=^\203\310<\005.\374<0b\313\271+\2203\275\024\240\225=\240\300\362:}\004\035\275\211Q\253=K\245\200<1\202\004<\341d\211=\t\250\266=\263\350\235\274\325\007j<N\020\257\274L\033\300<uf\027=\207\255\202<r\214\000=\316\356\204<s\025\005<M\215M=\274`,=6\322$\273\325B,9\327\004`\274\034\250\327\272X\216\206\274\\\306\305;\353\362c\274\226\321\014\275q_0\2734\n2\275\037C\301\274\237x\232\275J|\231\274\331V\342\274\177Xu<\337X\000=\320\241e\274<\330\234\274\376v*\275V\203]\275\240\335\031<\251RP\274j3\024\275\n\003>\274&6$\274\027s,\275xq\233:&\234\250\275\223z\262=:\257\342\274\001\343t<\010\032\270<\024Y~=F\370j=\337\227,=\"\323\035\275\001I9\275\024M-=\321\303H\275\217Uo\274\376\265\177\274\345\333#=G\361\357\273\241-\206\275Q\3148\275\261u\"=#\253K=\026\000\251\275\324k\200\274\\z\243=\233\253H\275f\266\306<+\210\343\273=\271\270<Y\356\016=\353{\216\274\037\270\353\273Z\265w\274\327\311`<G\005\032\274\356\303L\274\360;\241<F\305\233\271\256K\343<]\202\367<4\3652<b\246\002=\003q\242=\337 \274<\204\224?=\023\016g\274\264\020\341\274#\354\034\275\005\344K=Z9\273<?p\226=\362\013\225\2756\014\202\275\327\352\202=\353\327\305\274\366\006\021=\262\3628<\231\317O\274\255m\213\275\335\322P\272\271\362g\274N\300:\273y\364\223\273G\235F=:@\201\274\305\217\351;XO\303\274\026\265\376\274\000\034C\274\357Q\023\275\3020v\275\366\215\271<\030wG\275\017I\372\274A\323\310<=<\344\273\236\245\215\273\3771\r=\317*Q\272\221\276v\273\372\226\235=G-J=\357\204\256;*\025\201\273\211\031\302=q\261\254\274\006N\253<\253\203\017\273Qi\222=%\010\026\2751\312\330\2749\001J=<hK=B\177\005=\013 \247\275k[R=psh=\206\2362=\271&t\275\007\221\274\270T\307u<\307\n\360\274\330\350 \2744\264\303\273f\303\275;u\200D=,V_=kF\215<\236}\243\275K\025V\274/6\226\274#\253v=\302\272\265\275\324\032\376;V\361\212=\225\340J\274{\326C\274+\344\035\274\256j&\275\220\220\262\274\360\010&\2753\234\001\276\027\2771\275\375i\020\275)\323\354<\355\003\022<\341\306g=\254\255*\275O\276\024\274\236L\347<\203\313\213=\377*L<\020:3<VYR\275\205\336\r\275>Sw=\263\352w<\2600\326\274\013$\264<\226\027T=\262\340\241\274\344\3771=5]\245;\242\017%:\272F&=\375bL\275\245\346c\275x\034\250\273\347\202a=\372\305\t=\224\223\211<a8%\275\013l\027\275$\000\306<\325R\321:\363\245\310;Y\354\024=>\354\353\275\210{\365<_\357\274=\224\004\261<Q),=6\271C\275\213YF=O=/\275\302\016}=\220\327\\;-.\302\274G\217\350<3C\334\273>\220\376\273\212\212U=\311\214(\273d\006c<\304\\!\275}^\202\2754A!=\235\266==\220sU\274\004\2722\275! p\275/\337\223=\203r\367<L<\277\274\336$\214\275\021rh=\335C.<yV\375<\364_E<\000\331\377<\301\235:=_#\316\274\2156\261=_\306\306\275g\227\006=\tHA=\t\'7<l\025O\275\2567:=\230\035L=\233_\333\2743\222\256;\224\274\317\275\024\033\243\274h\321\241\275\310:\032=aR\215\274\3236\217=\350sA=b\202!\275\'g\301\274\261\000\033\275F2\320\274O\342\004=Q\377\326=\362T \275\305\364\";d*\250<\240\0376=M\251\335=\224\342\222\273\325C\215;KQ\314\275\367\016\010\275\271\020\035\275[\325\205\275\036\231\210<\304n=\274uq3\275P\037\205=\n\177\247\275Z(\275=eN3=\335%\250=\'\252\201;\307~D\275\r\245l\275\237\301t=\026/\327;\346\027\240<\330\034(=\240\330t\275\331rH\274\204\243.\275kU]\275\275n<=,\202\205=d\265\223=:\032\375\2752\014\327\275\207\032l\275\346\351N\274\276%A=\210\304\223\274cK\261\275\3704\200\275\3720T\275\026\214u\275\246\342_<?\014\036;\237\312\235<\211\207\001<6\2726\275\241\234!\275<\263|\274\322B\355\274\375|\215=C\034\232\274$\002\271\274}\241@=\253XQ\274\256\244&<\343y\341\274a\360\203<\253fC\275\277\316\201=\177\331Q\275y\311\316<\017X\233<\313R\027:\271E\007=\177?Q\274\324\225\227\275Cq\230;\200\253G<\347\371\205=y\217l=L\344\373\274\315\250\370;\2076w\275\244\020\315=\276`\275\274\255\214r;l\256<=\356\201\203\274Y\004\222<\205(8\275\326<*\275\224\374\214\275Y\r\203<\240\357\013=\357\2522=*\232\235=\365\212;=\236\351\207\274Ol\360;\211\234\222=8y\206<\026\214\221\274t\225\034<\304\'\232=\037\201<\275\026\354\376<\237_\360\274W!\206\275\303r\206\275\'\026I=\335\325\314\274\306`\023\275\311\'\261<D\247\n=\221S\261<\203\347Z\271RP\246\275\202\231\203\275[\034\357\274\205dl\273x(\370\274g\232\223\274\362\360\332=\37246=\354$s\275e\020\255\275\272h\020<d\314\005\275\277\034k\275s\244\347<u`\262<\310@\212<z\3617=\305\370+=_\034\363\272\321Q\204\2745\007)\275\001\211+=Jt\035=\301D\377\273\014A#<\231 \234<\370\327<\275\004\210\t=\'\255\035\275\254\026\365<\356\232:<\007XD\275\232\336\345\274\336\373\"\275.>n=\336\234\014;|\234\225=R\350\250;2-C\274\271\334\352<r\366\232\273\257\017%=\347\017k\275\002\373\321\274P@\200;\231e\001\275\231vO\275\253\317\326;c\221b<g\036i\275\272]\255\274~\002<\275\022\324s\275\330_*=C\016P\274\302:\306;\004\217\020\274\222\026\202\275\360\212E\274\177\374s<\253\276B=>Gn\274\265\321\211<\341m\205\273\332f\037=\034Q!=\340\313\337\274\353\004\335\274?D\314;\214\321\030=\302\246\327\274\322t+\275\252\020^<\205\233e=\317VQ\275o\326V<`\234T\275\'\222\023=$/\354;\016\215\032=\262R\357<\314z\030<\342\342?\275\034\371\265<\245\214\'\275\022\204p<-\227_\275\337\257}<\021\312\347\274\346:X\275H@\364\272\004\275\254<M\026\206<^g\037<\250\224>\275fL;\274\255\354\016=\303<\206=\035\353\036\275\007\013j;3\245\244\274\324\001@=\232\326=:\032\241\031\275\265\360[<\375h\353\274&Y\032=\341OE=U\023\365<\2437\354<8jZ\275\373*\034=\007?\3567\202\370\205\275lA\232\274.\266\354\274\255\255\240=\376RP<\021\346d\275\243\026[=\371\036\034\274\223\325\263<\010X\274<#q_=\251\337\316<E\3726=\327TH=\202\006\262;\332\313==qe\201<~\347\210<\370fF;\002\303<\274\206\250<\273\224\355\271\275h\376\263\273\336\245,\2752Os\275S\t\314\274\316\365\244;h\307G\275\326]\270<\267\376\357;\036\225\254<\222\343\265<a\254]\274`\367\005\275\344$p\275Z-J\274\032,?=\334\237\034\275#\360\\=3\255\035=F\256\230\275\245o\244<TY\032\275\222\304\303<_e\001\275\213\177\215\275\230\247\265\275\224\373M\274M9==\272F\307<\206\033\004\275q\362\001=\324\201\214=\027\353y\275\0133~\275\210uS\275\244\030%=EI\234\275\277\370\t\275\216\320t<\205?L=*\'\251\275\317\354\210\274^ \325\274\227\023g=\026\n\332\274\335\256\233\273q\320\'=N\312$\275\3542\346<\014b\352=\367\0201=\234\304\377;g\225\\=\230\324\214\274o\033\260=\227)\003=\325th=\311\315\240=\273RV\272`\234\242\275^n\005=L\'\214\275\204\307\026\2755\241\330\274a\210F=\307pv=\031!\255\273NK\311\274\365\t\017\275]\207\201<\234\324\341\274\215\337\004\275\252R\221<\307e\237<\212\364P<k}\035=\320f\337<\277\314\022>\256\003\226\275K\352\251\273\216\317\306\274\006\206\367:\023N\252<\251\225l=_>#\275\347n*\275\355\335!<8\n?\275J\255i=8N\310=\326\037\'\275\317H\031\275\231\'\026\275=\363\320\273t{(\275\304\365\206\274\r:4\275\334g\261\275\3000J=,\336\375;\"$Z=\306\305\t\275\332H6=\314\243\033<?x\353\274\t\316\342<4`\002\273\027\347\245=\357\315\343<G\306\317\274^\027\247\275\377\206\031=eeR= \335\227\274]\'\255\275\3459\346\274>k#\275\365\336\232\275j\0177\275\371\246W\271\332@\023=\271\204x\275\375hX=\250\350==\001\230\217=\353i\212\275 \221\250;f\243\217<\014\377\033=3\267\023=j\235\023=\355\323\"\275\257\275\214\273\3208m\275d3\221\275\036\300\236<Mz\213=$\242n\275^>R=\225\210B\274.4Q\275b\217\245=73\251;3\021\021\275Dz\006=\332\345\257\275\303\232\221=\2525\302<p\306\342:\247\242\261\274*n\222\274\025\254\223<h\267&\275\340\244\312\275\005uX\2749\303\333\274:\336$=\247\347\026\274S=\227<u\255\367\274\361R\316=\033\226\315:\276\003\026\275\217<\241< \023\311\275\301\236\236\275\036\227~<$\205\342:\014\0359\274X\257\333\274\251\275\220\275\211B\243\274\302#G\275:\213\002\274\267K\215\274\213\t\344\273e\016\026=v{F\274M~Z<3y\306=\r!z=\360@\014\275\035W4=\263\354\321\274\352\034\244<\250m\306;\036TI=\215\277\023\273\237I\301\274\265Qa;\033\024j<\032\001s<9m\233\274\323=L\275\222r\366<\214\030\033\2751\000 \275\266*}<\307z\232<P\031\034=\221\272|\273\230\2043;\227\277\240<\024\223#\271\314a~<\027\276\233\274_\367\324\274\272\\\001\275\033\224\205\273\252\273A<=\303\263=\260_A\275\3075\020\274\336L\251<\202\267\371\274\302 C\275Kn\220=\241\371\005\275\306L\253\274\330\010/\271\232\217\327\275\267\217\374\274\250Z\003=v\"\201\274\035\001\004<\020+\251\274Nz\"\275B\250\237;0\023\246=\224\322\216\275\265\207\236<Gd\254<6B\3409v5\326\272\375\372\256=\206g\224=\272{|<\226\021<=\327\273B\274\322\267\022<1_f\275S\355\323\274\270\276j=\370s\262<\3629_<5c\025<\356\305\':\333\362\253=\265\020\205;\333b\001=\257\3412\275\333\005:\275\332p\213;Y<w\273\204\346\315;\331\310{=\200\340.<\324\374G\275\256g\027\275\2376\\=4\302|\275I9\234\273\\\353t=\201\n\013\274\323g\374<~\241u\275\030\004\260\274\231V\222\275\224\320\312\274\274\262\026=\232\365\217\274\tW\276;\0060\341\275_\204\222\275`\367\371:\342xR;\251\325\250=^15\274\352y\253\272\301W5<\r\354\302=K\323l\274\360\273o\274eo\252<\362\360\212=\322z\270\272b\026\260\275\313\007\216;\375~F\275\253\"\226\274\325\202\034\275Z\036.=\335QJ=\242\336\202\275\244\344\227:&\364\202=\006\273\001=\336|}\273Yv\r\274\276=\312\275\316\215^=\321q\317\274(\314\224\275j{\213<\r\034\252;L\243\225\275\254BR\2746\224\005\274\227\032\360\275\347\307\300;\367\305\032\275\234\304\302\273h\362b=\350\220\330<\023\356\347\273\270\303R=q\3627=\246\020\210\274Ens=\325w\373\274`\353\241<q?^;\220\344;<H\022\363\273n\363 \274k\266\377;\270MN\274U\274B=v^\240\274\003\371\";\256\214\202<Zn\345\274\361Ro=O{k\273\266C\007\275eDp<T\247\202\274\026A\231\273*\014\177=\005\202\014\274yH\324;X\031\320\275-\372\325\273N\325\303:\257\234\311;\350nz\275\331\216\003\274\343\023z\275\260]\306\274\370\273\030\274\030L\361;4)h\275\370|v\275i\2431\275\2378{=p\033\005\275\342\036\237=\270[\005<jm)=\32062=\325\301\375\274Q\340\035\272\300UJ\275\262`\022=\316\315|\2752\317\255<lD\002\275|W\253\274\\\261\337;\010gN=\014\210U<6\233\235\275V\022\204\2747\321\010\275QAm\275\016)\017\272:m\214\2750\246\033\274u\n\242\275\270\2632\275\316\260\265\275\351o\201\275\230\n\320<\265*\252\275\244\002\320\273N\273\020=\335\345\255=vS:=\022D\241=\220Z\006\275 \253\271\274\276M\370\274\303\2157<\014E\003\275\313X^<&+\352\275\\\337_\275\212\254\270<A5\242\275\347o\001\275w\333\237<\3407\036<\322\324\307=\220\373\304\272\002a{\275\232\035}\275\304wt\274!\036\233=8\022\"\274\374Y\013=\311+\365;6\352\217=\227E\257<0\030\211\273\025\3276\275\325o\214\275p\033\"\274\375\347\246\271\250;\336<\237\203\022\272\224\222\203\275\2627)\273\271\374\213=\007\rw=Jj\337\273,\364\221\2754\333\346\274i\223\236\274j~\262=D\325\266<_\035\275<\002\260.\275\\\203\262\2740\001<\275\260\210\207<\021\230\022\275\311\337\340<f}o<nrK=d\235\037\274\035\220\215=\222\300\240\275*t%=\006\375\360\274\364\334:\275\376\030\024=`\254\260<a\223\225\273\020|\212=[-\300\274q\271+\274\231\021\010=]S[=\224F\302=4\333\263\274T\020\215<\3539H\275\3762D=\346<8={\354\233;\211Q\203<\376M\001\275\311\366\010=6#~9\037\006\010=q\351\256<\247\"\222=\243o\252<i\341\002\275\020\373\017=\240\317\t\2751\353\000\275\265\361\036\275\206\233)\275\245\205>\274\202A\223\274\372\006\303;5\362\245:\355gN\274\335Fa\275{\240\271\274Bi\021<\033\253\003=\314RP=\004\3764=\324yZ<@*\377;0\367\302:\203o\256\275uu-=+\230\322;%\240\362\272\247b\301<z\225n\275\255\345\321;\247\335\"\275K\223\212=\004y\326\275U\301b=\231nW:\030-\"=\262O$\275k\010\030\275\317d\241=E\313\034\275\303\323\217\275\010\215O=\320\033\013=\243E\010\274\256\253l=\274|\025\275;\214\262\274\335\211\265\274\304O\327\272\202\035\227<b\357\323<c\376\217\275a+7\275}\246\031<*}\264=\002\216T\274\321z\024\274U\221\201=\275\255^=\321\035r\275\303\214\033=\333\022\237<K6\305\274\312<>=\200 \220\275\363\343\303;\016m\275<f\014\307\275Cg\224\274\273\031\r\274,\3523=\327\024R<\'\261\250<r\360\244\274\230\347\210;\361\034\024=PfL\275\254\203Q<h\025\274\275\257\324#<8\364\013:\307\'%<_\270\271<\210\237\233\275\023\315\204\274\236@\261< /x=*\\\246\274\007\330\230\274\225\030\206=\371\024\"\273\014A\325<\364\364x<\321\313G\275\303\036-;h\351\030\275\354\242E\275\347\r\034\275 \334\224=(a\n\274\234\017a=\031\301V\275G5\n\276\220E+<w\343\351\273\030\334.=\256zE\275\350\223;=\201\232p=\271 \307:1A\200\275\3361G=\202\377\332<\276.\017\275\245\336\250<\005\333e\267U\260\367<\275l\304\274\347Q\356\274o\332p;4\3017\275\213\013\217\2755\205\312=y\2704<\033\346\313\272`\020\262<\352b\n;)\226\327=$r\253\2750II\274\202\311p<\310g\330\274\204u\023=;I\020\273J\207\215=\340\362(\275\000\002\n\275\313#,\273\362\332H\275]a\221\275\246n\257\273C\231/\273\034V\323\274PS&\275\037\'\202\275\225\301h<~\266\221\274nH \274\271\212\313\274i,\032=\240\027\202;\022z\221\275\210\354\337\274\341\314\341\274~Pv\275O\347\276<\260\ri:\215\257\005<\312\324\346<\366D\237=\237\356m=Tc\347\272\211;\022<S\316\272\275jj\203=\341\031%</\003\3529\276\371G=\204\006\265\274\343\007\304;3_$=\326A2=<\035\236=\255\003\035\274\032\251\311\274\377Z\313\272.0N<OqL<\225*I\275\017AR\275\357\\\213\275\222:\335\274\331\202(\275Z\223X<\321\263v\275\034\361&\273\017\006\320;\353.\321<\250V\203<yF\211\274=\t?\275\326\016\367<\207\374=\275\377E\'<d\245F\275:x\r\276\347\224P=\357\335\226\274a\2706\2751k\252<O\027!\274\373\007\307<\370\370\307\273\030\346\257=\275\373\003=GgP<a\330\232\273\262sL=\200\030z\275)ib=\036\274\005=\253`\t=MS\266\275@\243\343;MK\341\275\033A\003\275\273f$=\036G\234\274C\272\315\273q\301\307<\275d\266;\37357=3y8=\205\254x\275\247\321\r\275\265_\340:\373fS\275\330\310-=\024\250\032\275\207\212t\274\005JS:\033W\223;\010[t\275\217H>=\024\205\231<\270\322\026=7\236\0058\024\022\003\275\211\255\013\275\370\240\234\275\214\372\267<\277\304\003>\310I]\274d\357\350<\361\352\032\274\303\336$\274\343\033K\274\370\354\026\2755\236U\275\010\353\357<\362k\263\274Oh/;\033i\325<\364\306\346\274\354\3011<\362\215G\274\275\205\241\275\323\240\212<\r\224\207<@(\366<S\250\374;\304\323\231\275\317J\275\274\316?\215\275*\306.=\n\240\313<\377G\334\274\313!\351\274\214+\314;{\035\215<\370\374\227\275\014o\265<\347\203\346<\255\322\033=\372\242d\275]R\306<Q\330\010<\0253v\274J\276\363\275\272\315\341\274\224\271\251\275\000/\256<\210\032`<F)\206=J\277\323<u\211\210\275MO\353\275\n\232S=\247\310\334<vY\233\275\200lG=\347:=<\314\'\016<\340[\036\275M\316\334\272\004v\000=\223\033x\274%pO\273g\3344\275\273k\216<\254\277\023\275\236\222\303\274\251\206\201<S 7\275\277 \005\273\260\320\311\274\350\tC\274\337\220%;\314\202(\275\250\336k=\347\353\253=\357\246\254<\301\233\270;\276dO\275\26358=lA\262<\354Q}=\270\203p<=\357(=\306\3620\274>\222\246=A\201q=\213\334\030=\005K\363=6\177\247\274x\360)<\020]\022\275\260\235\215\274n\264\017<\177\213\025\275 ^@\275}\375\374<\377\303\217\275\326\361\215<_^\362;?\351\302<N\352\242=\272\352`\274\016\327\247:\004\233\007\273v\267\007>\000\2430\275\0062\027\275\217\202[\274\373\310\036=\032\311\212\275\335:\232\275\303?\027\274\277u\334\274\005\000\004=B.c\273N\335\225\274\310\347\t\275{\223\'\275\262\377\227\274H\376\314<POL\272\320\257\250<\332:\305\274\347\244\203\275\361]\006\275\332\245\300<\365@\016\273\001\006\023\275\'O\032\275\205\214H\273#\377@\274\030R\330<[YD\275\0235&\274\212\301x=\013\232W\275:\021(=\004\216\007<y\007\017\275\036\036\233\271\356*\000\272W\330\030\275\340e\223\274\030?\214\274\374\274\276\275\212\3633;L#\300;28d\273`\251\343\273\316\246#\275]\327\016=\353Y,<\367\274\271\274\n;M=\'8x=Mu2<\323\373\007=\254\016\216<#\266b\275\362v8=\303\271!=\370V\303<\315\204\013=\345\251\005=\000p:\273\231\023N\275\340`+<\311\367\251\273\356\025\025=\027\244\300=7O@\275\037\317\204\273\313`\221=\254\227:<m\331\375\273\0338z\275\350>g\275\326%a=\343\351;\2756\222\264<\345X~<%\301\367<\022\275\373\273\033E\310\274\035\333\'\274\342$\177=\364\377\022\275ES\003\275\305\335\236=\244\220\026\275\020R\317\274\241O-\275D\352C<\345+\264\274\037\336\273\275\220\014R=%\302\261:\373\334\201=\350\307\262;MQ\235=\375I\231\2751\243u\274\0027\231=I\025\317\274\317\211\310\273\210\265\202=\373\\\272={\311\275\274C\304\232\275\010\341C<\212\024\244<VuD\274\361\241\033\275\306H\027\273Ip\201=\032Y\266=\372\221\034<\363u\331<hZu\275Eg\206\275\212?O\275\261\371>\274]\001t\275\211\352\241;\275#\006\275\313\375Q=\314at\272\354\361\213\275\344\007\255\275\"$\007\275\025\251U=\343\'\205=\000\341\366\273wi$\275`P\236=\246\031{\275\352\236\014=\354\276\225;x\211\263=\364\363\346=\250\357\243\275\3316\372:\255xL\275\t\235\000>\217\354\235\274\022T\005>\017\362\357;\261\030\023=\024\251\311\273\265G0\274\334Vp:\000dG:\300\314\030\275\372QI<\360\234D\2758{\031\275\362\254\270\273\035(\026=F\000j\274\213\221\272<\352\222m\275\020\243\211\274\206\031a=+\250\215=O|+\275\265s$=\213v\361<;b\246=\333y\247<=cA=2\006\246\274l\001\306:!\273\002\275\231\332\342<GO\246\274\330A\373\274\335\033\324<\251\217\014<\341W\242\2753\177\363<\266\250\235<\314e5=\037\034&\274\263\360\212\275*6N\275\360\305\352<#\261\000\275\016\221\020\274\350\034\r\275z\010^\275KA\246<\252\354L=\205\363O\274\266\221\220=\276=\'=\275\026\276<\002\371\213;c\235f:\302A\026\275\317#\210:\235\022\256\274\255\222\204\275\007,#\275\204\3679:\206\211F=\201%\210\275:G\214\275\360G%=\320\271\027\273\354\270\327<\356\022\027=\237\027G\275\003\307\316\275`\311\321<|J\016\274\002\320\201=\013Ye=2\2111=\265o\n<uPI=\267\217\243\274\263{\220=T\236\010\274s\030\332=m\324\034=\273\314\222=E\245\203<B\001\000=7^\271\273f\223~\275\236\326\202\275\360*q\2751i\272<j,k<\021\272\321\273\243\377\203\275jC\002=/\256\027=\037\330\"=\037)\272<##\215\275\236+\200\275\314o\332;\317\000V\274\376C\210<]U9=\200!0<nK#;\273\321r\275\276F\223=\350R\226=\037\366w=\326$\013=\2407+\275\027\201P;\341\351(\275\225\213\216<\272\007\335<6b\245\274\262g\"\275\252\227\357<\350h\317<\266\207\016=\007\315\"<\303\272\365\274}\030=\275>\253R\275_\243\214\275\310\314\242=\373\205F\275\201\314\312;l-\233=J\0045\274\366\371F\275\006_\254\275S\301h=i\245\226\274&\244\236<\310\177\210<2\2124=\315\374^<\343\024\207=4\177\201=\205\252d\273\373\355\214<\022\277\027=\007RT<\030\205\034\275\005\371\302;\336\350\256\274\20123\275Yz\273<i\024\272\275s\342\254\275`\332\013=\325C9\275rU;=\365g\021\275\326\272\232\275\273qE\274\036\\ \275\220\\\215=s\355(<\216e\357<A\353\216<,\246\373:3c\036\275\r\332\236=x\357\326\272\030\226L\275Q_]\275\261\331\275<\213XT\272\214\321\260=#\213\336\2737\324,\274#\344\027<\346L\276;\023\347\346<n\246\206<\353\205*\275R/ =E\263\364\274o\333\221\275\271\177j\275\275\031+\275\"1-=/\032\260;\365\200\036=86\212\275\026\275\240\274\026\222\036\273\227r\253<\236}\304\275~f\020\275*\3166\274as\272=\360\244\270<E\241\205<\376)\203\273\363\267\247;\030S\\\275\201\365Q\273\235\272\226<av\235<\316\226\230\275K\355*\275S\327\213\275\010|\365<n\256\013;\265hD=\305\314\256\275\022\362\031=\205\323\314\274\033(0\274\307zY\2754\266\201<\342\303X<\177:`<\201\264<=3&\005\276-)\275<\330C\000<)\235 \275Tv};\224K9\275=\024\021\275\021%Z=\250;*<~\231m\275\374\241\201<\247PV=J%\365\2743l\033\274;\310\375\274\274\3709;?\237\315<F\034/\275+\244y<E\371\271<Q\271\223=n\347}=\034oN=\370\313\001=\022\263%\275\344\341\007=\026\032\207<\350\250\266<(\374@\275i\203\316\272\226\305\\\275\010Ep\274\317I\210=\274\036\221\275\014 \241=Lw/=\202\2739=\351N\035=\337\244\273;}\240\252;\301\207\231\274\355\226\357\274Yu\352<\370s.\275\315\274 ={\260~\275\r\345\260\275\305X\234\273a\244\326\274\030\223\357\274j\031\233\274aA\\;oZ\260\275LLh=\203\343\261<C\276W<]\360%=I9A<\311\252\235<>\345\350\273\3539\330<\021\252\032=V\032|\275\326\030R=r\367\323<\307\026\003<~\313\340\272[\r\305\272\030\333\014\275m_Z\274tNs\275Wu\025=s\326\360:\034\226\212\274\026\241\312<N=\330<\274\330\205<.\261\353\274W\272\364\272\323\300`\275iD\315\275\225\373\":e\347\265=GU{=\246U\256=]\032(9-\327\331;\351\030\312<\344\335\214=\321\245\302\274\033\031\321<\202\342\311\275\233ux;\201\221\023<\270=\260\274>\321x\274e\362\201;s\300\200<\203aR\274TM\023\275\013\037!\275a4\275<\264\017\200=\2646>=\341\r\215=:9\326\274/\360\312\273 \353_\275S\000\221=T\351\023=K\247\016=\014g\030=s\350\355<&d?=\037\345\336;\323\230[\2753\003P=\302Y.\275`eh\275\'w\215\274\365_\023=e\2472<p\276\211=\265\2253\274\220ng\273\005\244\330\273`$M=\215*\244=\230\r\264;H\021\352\274\370\372\277\273\345%\272\274H\225\214;\364\267\300\274h6r\274S\255\374<]\261\017\275\371^\302=\271\033\025\273\027\2172;U\334\210=1\306e=z}\323;\310P7\273\371I\r\274\017*R\275\'\002\210=T\027\233<\3540\216\275\355.g\275\315\260E\275\360\342\005=\360-7=j1w\274:\251\354\274\010\235\037\275\354N\223\275L\271\207<\240\254\244;\214<\266;\2441R\2756|n\275\265\353\327\275\230\026\034\275t{\341\274\250\300\217;\026\035\230;\216\177h=\353\347\212=\337x\022=\216\210\206\274\330\"\037=`\223\325\272\355T7;\245\010==\376\035\244\273_5H;\314\'\027\274\372RG\275,\257\206;\022\202N\274\215\033\251<g\263A=\226\270\035>w+L<\362YP\274\325\340r<s\030d\275ui\"=~\334C\275\244\357\261\275\002\274\254<R(_=n\305*\275\302\004\307<\361G3\275\204\332\353<\316\252\304<,;2\274\212z\367\274\330ul=\275\301B=\365\343\236\275\320\\\"<\365KL<\027SF\274\367\344R\274\214\037H\274\313\034B=\3779\275<\365n\223<d\017\357\274:E\223\275\257\000\'\275\335\326<\275r\016\305=\250g\200\273\270?\334\274\016\016?=zl>=GK\255\275:\260\030\275\007\320\271\275)\365\244\275\264\310\'\275\226\257\003=*\\\265=l\353\247\274\223$~<\235\231i\275\250\274 <\365\375\347\274\210)\214\272\271R\321;eoR<\211\026d\275\317\375\306\274\246\323\257\274\345\026p=dz\006\275\034\342\032\275\313\223\257\273\317\344W\275;b\221\274\332T\221\273J\007J\275f\355\335=\320*\022<\357\013h\275@,\224\275\376\243z\275\335\337\210=\262y\020\275\266\016)=\350\376\272<\240\302\254\274U\002\350\274\304Gd<\326\262\264=f\340\346<Z4}\275\250VQ\272r\334\300\273Q\310\352\273\334y\222\274~,\246\275\217N\227<!E\367<U\322\300<\307\003!\275c@\201=^\204\221<(o7\275f\361f\2749/\361\274:Un\275C\234\310\275\310:\202;\363)\234\274\302\215\350\274\035\252\203=\341\230\377\274ro0\2752\023{=\266\317\216\275,\372\370<k\027\243\275\350,\227\273\016\213\316;\203\344\302\274\232\235\347<\2063\372\274\252_\327\274\314#\315<@\255\353\273\021\035\264\273\326\246\212\2748\273\216\273\007\345\020\275[5\021\275!\334\222;K\221\257=\325\361\307;\233O\213\275\356\3523<a\013\243\274\314\n\321\273\213,\305;\021\355[=N0W<s\2242=\210\233\026\275\275\303\202\275\211\246\303\273\225\003\035\275\357-\366<\267_\210<9\350\202<\357x\265<]\016c\273\341\231\360<\344\251\177=\242\267\234<=\370\260;\013\024\3719\024C\236=\217*,=k\367\356<$\317\227\275\351e\370=\264J\"\275\360\256\002\275\345\'\223\274a\240x<\236f\332<\227DP=_\346\020\273\276\365\313<ux\225=\362\334\236\274\372\247\322<\302\"\216=\203B\373\274^\357j\274EY\177\273\346?\203\275$\355e\274k\311@\274\263\231\035\276\224\265t=O\351s<Z\323\252=_\0026=\307\252\270<\3017\222\274\215r\005<*\022\023\274,;\252\273}\276\"\275\305\033I\275n\333\201\274\021\373\232=\226\365\230=<\205V\275\263=\244=/~\210=4yk=g\033\307\274\215\310h=Y\013r\275\316Uf\275#\353\313<,\307\277<\303\302\245<_\310\302\274\020V2=\276\273I<4\321X\275\275\263\037<\327./=\325R\366\274ov\036\275PB\305\274\216\340\277\274\316\261n=\207\323\343;$\224=\275a!\014<pm_=\240,\352\273\264\014\001<hU_=\020\333`=\347\266\002=\020\377\r=*\314\210<T[\014\2752\257A=b\346\312\274\243\332\262\275<\"\245<#\322\361\274x\034\006=\017\371\027\275\265\007\035\275hs\036\275\343\253\005\274\006\004\247=CQ\000;\374Z\220=)\033B=\314d\244\273\370\240)\275u+@<\347\017\343<\304\026\024\274\033\363\241\274\312\220\264\274\242r\313\273\253\007g\274\037\214\377<4\021*\273G\232\313\275{\271\211;\371\247\024=\214\'\276\274b\2422\275\275e$\275)%\244<\250\322\2629vDE\273\n\002\001=2\3635;*\233\366<\245g-\275\214\031;\275\233\210\271<\203\363\224\274\253\375\201;\375d\367\273\2474@;\331\tY\2757\004\355\274\372B\t=\245\\y\274\205\364\207<\314\013\000\273\301\303\"=\322Z\356\274\302G&\274\345{\362\273\301Hd=\350p\274\275?g\250=`\240\270\274\260\245\031<\327\206\223\275\327F,\275K\316;=,\321w\275\271]\255=\0064I\275!\233\211=\261w\235:\341\340.\275)\316\213\275\267\346\010\273\364v\314\274\270\260\362\273o%i\274\027C\207\274)\177\377\274\240\373\374\274\241\007n\273\246g~<\024\357g<\373\342\351=\032\241U\275\023PE=}\033a=\247V\2239\364)\005\275\336=\026=\313FF\275\026`8=\314\243\024\275C\'\206<a\330g<\026\016\256:\005\230j\274\360\177\355:\204\305\204\275\363c\336=S 1=J\354\322\274\214\225\226=\003\342A\275:\3220\275@f\221\272\312\315\263<m\264\002\276(\274\230\272\020\275\236=\226\007\202=\250\356\327;3\016\232\274\325\244\273\275\024\024;\275IN3\274}\301;\275\0007\026<\234\340+=\360\001}\275\330)5\275i-\217\275\220\013b=\246.E\274\216\372\003\275\002\t6\274Cn\212\274n\215k<\230\232\234<j\001\035\275\307\234\005\274::s=\211\224\214\275i\236I=I\200\267\274._4=\271\347D=7\034\262\273\264\346\r\274\233\256\007\275\254\333?\273\024\177\265\274\034\024\205\275V!\014=V\250Y=\004\360\230\275#\335\003\275[\242\202\275\356\233\023\273\311\302\327\274\013\315\252\274\303u\213\274,\003d=b\257\276<\0234z=\347\236\"\275\223\254\222;\203P+\275g\021@<\200l\247:3H\343<\326\350\360\273\021\233\035=\346\210\207<&\027.;\370\306\311\274E\276\351\274\372\320\355\273\207\355d=`\230\302\274\342/i\274\336H\\;#\352R\274\332\375\251\274Q3\373=\360[\035\275\177\313\332\274\330\333f=jO\334:\206k\264\275|\324|\275\026\226\334\274\013i\037=\277=\215=\373\303\022=\365\221$\275\363\376\314=\265\352\332\274!\3422\274\205\307\010<\366\302\344<\276\2445=+/\224=\362\244\366<\247\331\037\272hE\211\275\350\267\333\274\343\371\204\275\252\033\010\275vP\317<s\355\222\273\316\262\255=\3521<\275\355\3618\274\363\257\253\274\20660;\213H\312\273\'\025%\273\316R\216=\323\314U=\037\234\204;F_\221\275k%\016\275f\002\034\275\373kU<\272\324s\275\351o\326\274\212\355\004<\240g\271=,\215\225\275R\212\212<\252\301\227<-\235\321<|\373\213\274\320\337`;\230\245\021\275\341\025]\275\276\352\014=\250\371\327\275\003y\273<\000(\352<\334\276\302\274S\023\302\275v+X=\314\001\240<\020\331\214<\333\275\364<[S\370\2748>\231\274\274\253x\275\"\037\355;\022\032O\273\350I\026\275\026\370\231\274\000E;\275\201+\356<XD/\275\216!\006;\254\217\017<\371\354\016=vQA<\216`\307\274Sc\037\274\035\272\227=S\257\004\275\352\274\254<\267\333\323\274\222\250\371\274M(\377<\267\215\266=>\330\220\275\2038\267=\254\315\315:\033\267m=\241\343z=\337\010;=\223\342\340\273\300\275\017\275\\\242#\271(\003#\275O\355$;\262\027\013\275\002\274\255\274\354\2263\275\301\"\341\274f\337\034\275\222E\030=bdr=(\241\327=\2151]=\356\021\247\274\033s\356\274{\344m\275\266-u\274}!\014=\2711\304\275\r\275\313=\377\252\251<\340w-\275\\\355\220\274\230\235\251<\034e\310\2751\363L\275{\256T\272\336E\200=~\021\370;\215\244\021<\324\005\276<\226!:\273\225\203\r\275\013\203\037\275\251\037\263<\350\310)\274\355\204t\275S\377\252<\030\377\213<\225\026\340=\246\266\315;tW\n=L\033A<\370g-=\254\336\204\275\202\377\357\274\206-\\<+\350\007\275\2101\253\274\\\252\313\274\255\350\303<\331\344\336\27485\275<\017\241\030<NK\\=\032\264\340\275N\252\366<\225\264;\275\224\306\374\274\002G\377\274\336+q;\032\t\r;\225w\315<\233#w=\037\246\020<\330B\344<\374\024#\274{\354\215\274\021.\313=\353=S<\327l\220\275P\325\326\274\371(\010=\032<\202=\213\321\311<\032d\210=?\202\035\274\316\216$\276\335D\260;\266\3376\275\'\023\210=\005\341\002>\216\236\211=\360\334\215=~.\226\274\220 \001=\367v\"\275+\374\035>\251\372\017\274\216\356\253\273\023\031\340\274\025\002\214\274\364\232\n\275\336\320\241<\"\036K=\344\2611\274\270\203\360\274&\324m\275d\373%<. \033\275s\375\317\274\016^W\275,\037\233=\215-\245;\334D\033\273\250h\337<\276I\033\273\353K\261\274\244\222\036;\315\211\003\275J\365\000=\207Z\205={tc=\324\337\223<\2750\302\274\035g\226<_\020C\274\227+\020=\363\340\035=\375\361\241\272$Nb=%\3148\274j\0058=tM,\275<1\355\274\322\376\216=\003\220\311;Y\020/=N6k\275\265\004\267\274\255\257\326\274\010V\320<\025\222\004\275\264N=<\230\373l\274\210\025\304=\253\243\250<j\272$\274R\360l\275\0006;<*ky:\256)I=\003\277\201\275\276\364\251<.\321\304<l\2134=-\312p\274]\267\227\274k\361\320<_;b\275\3127O\275uM!=\352\tf<\177\331\375<\333t\035=N\306\255;%\270\002\275\257\267\234<\263\275\231=\370x\226\275\234\325\242\274\272\364\240\275M\341\177<\006P6\275\246\227w=\217\006\007=\265\210\355=4\n(\275\304\323o\2731\320\244<\204[\032\273\261\310\322\273\254\207\210=#\265T\275\272\313\235<;SE\274\217\367Q;\360t\234<\377\2031\275\033W%=\242a\335<;\374\315<\374\n~;\246\253U=\260\3378\275\347\"\202\275\215b\005=dB\336<<\030Q=1b\"=M\324\234\2757\223\255\275\003\352?==\374m=\325\373\241=\001\255\303\274\324\230\353;=:==\234\004\034\275\005+C\275\244/\267<Q\0077\275\217\344\020\275\3101\224<\212\320\202<\365J]\275-wJ\275\020W\014=\352\310;\275\2138\267\274\'\204\240\274\311(\\<\200\206Y\2758\206|:\223\211I=\302\252,\275\275\367\207<!r\005\275\317\027\334<\235\237\257\274\370\254*=\274\253\240\274\245\301\371<\336a[\275S\333\302\274\310\2103==\351<\273e\006k=\021B\001=\330n\311\275xnv=\rpj\275\013%\236\274\330\203\230\274\312\244\253\2748\257\312\272R\345\212\275u!\216=\246rC=\262^\216\275\267\031\340\274\227\212 \2742\233\354<\345\254\035\275!\246r\275 \241;\274}H\370\274\222\3764\275LA\230=S>\213\275T#\335\274\207\002\331=\355M\313<\321\247\037\275\377w\024=\031~\247<\332\255,=\275& \275\212\223]<Z\371W= ){=\313\017\376;$R0=\240B\330;`\275n\274\376\311i=j5\334\273#\353\325\272jF\300<4@\337\274\333(\376;\352\027D\275\'\360E\275X\373\262\275\022Z\205<_wu\274\342Z\242<\n\337\020\274\335~\303\274\210\350S=@\250T\274{\000>=\313\363^\275\253\356\032=\375\265\335;\347\360?\273\332\375\355<\310\247\222<LyI\275\360\201\035=\345\2247\273\361\021\217\274dZ\314=\223X`<\266B\267\274[\323\026=\225\"\033\275q?M=\260\262-\275a\347\216=\\iz\275\201\272\353\272v\267\334\274\010\364}<\254\344\240=\224}\210;\355\337\203=\312s\020=\233\374\327\273\360\227Y\275\006 \034\275\260\351,\275\n|.=\361\r\375\274N&\220\275p\243\226<{\266{\274\357 ?;\r\333\325\274\317n\031=\276\231\306\274\252\252\265;Md\274< \035\001\275\231\213}\275[\276\355\274F\302\206\275\\\\\213<r\376\334\274\272\025\224\271\364\\}\274y\234\242<+\340\307<\334\347\r<3\333\223\274\016\314\333<\304&f=\002l\224<\017\202*<\3632\233=\276\255K=\022 \205\2753p\332<\251Z\216=~\003\203=$\267N=\2275 <\363\304*=U\305\037\275\234\351\n=\001\211~\275\321\227\375\272@\200=\274&:I=?E\370\274\204J\274<\304CP=HUC\275\307:Q=\344\031\316=\026\314\306<\354\016@\275,#\362\272\212\331\334<\333WR\275\370\021\373\274\265\346\306=\022\3675\274`O%\275X\343\020=\305\334\"=\234\031\361<\003\337t<\003\230\r=\377\216\307\274E\215\"<&.G\275\265\005]<c\321\032=P\260?\274\376\250\005<,:\377\274t{%\275-\236\341\274}\177\207=_\224J\275\322io<\256\001\344<q|\263=2\"c\275\307I\316\274\300q]\274\006\266\215\274I\035M\274\322/\320\2746h\343\275\033}\212\274`\024\024=\273\363^=\264\003\366<\304A\220=\234<\246\273\030\370\026<w4\360\273\202qN\275\352\035\242:\313\374\227\273\277,m\273\273W0\273\336\204\336;\3178m<t\370T\275B\210\377\274]V\210<\205\007.<\345\345\236<w\005\352\274\332k\220\275\177\272-\272\306\207\206=\0076\250<(\246\271\273\223\000!\275\260,\3649\034m)\275\025H\204<\007\312\265<\366\2101\275\002^\035=\212\022:\275\255\220\240=\201\030\255=\213:[=\244D\010<\305\336j=/\212\334\274\225-\021\275\211T\007>\224\213\035\275\236qM<\324B<7\307\377\312;\242\211\331\274\\\252\\<\322\221\203<\331\256$\275\261cQ=\350r^=\2077\352<\010\210t=n$M\274\244\224\273\275\272\272\222<\022\322\227=>\333w<7\273\301\275\264\0377\274O\304\243\275\250{\001=\336\315\341\274u\004-=\266\245D\274\276\320n<\374\200\177=_\033\244\272\274\301\321<2\374\242<~#5\275\211\303\r=\r\375\254=\234\371\366\273Fd\027=\242Q\030=\256\230\023\274\374\217\302=83\356=\250\010\016=+\302\346\274-\2013<pW =\'\3257\275\266u\334\274@7\204\274;\205\033=/\3022\275\347\3554=wX\026=S\312s\274T\330\301=K9\021\275CYX=B\240\014>3\266\333<8\210\254=B\023\211\274\327 \024<D\364\240=/oa\274{\263i\275W\302\003=L\000\223\275\330\234\333=\377}\376\274\243\223\206;d\202C\272\223\3219\275\254\324\177<\366\300\204\273\302\326m\275\261#\t\275r\367\370\274X\205\245\274\207\353\2649\000\002\003<O\255\234\274#-z=\242y@=\203&F=\'#\323=C\220\323<@]*=\342\322=\275\007\222I=\374d\241<\006_\232\273\036\251\002\275\344u\236;\031V\327=}y\223<\217sc\275\310c\371\273m\237\037;\222Y\364<H\257\227=\t\363\222\274\371\277=<\274\230\'<\036y\273\275S\t+\275\313^\351\274R\233P\275_\035\275<\037\236\220=7\3673\275Ld\304;~\370\301\274sh\'=,!@=\322T\274\270\376\177x=\376W#\275;\027\222=mo^\275\333\234\003\275\374U4=C\314\267\275-\rF=\346O\033\275\357\212\025=\212\375U=Xq\213=7z\274\274;L\201\275H\364\222\275\370\'\245\275|\326\234;\270[n=\256\241\222\275\3661t=\203\272\031<\221\271A\275\017j\000=T\240]\275@\234*:\222\326\207=\322\020\234=\026ah<\317\353e=\017\n\220=\354\016\274<\233\335s=4V\231=\021\327\205;\357^\377\274`\035\\;\371\202\335=\r\346\010=^\3360\275%\302\013\275\307\241\233\274\332\317\025<\006.\r<&\'\\\270\370\362\223=Eh$\274\236\335\235\275\302\002\253\272\223\306~< -\030\275d\204\020<\002\370\200\275M\327A\275r\205$=FS\005>\005\022\326=\212\377\026=]\253I<2;w\275\275\354\327=\037c\212\275\350\376~\274\026\005\367<\010\234\026\275^\371|=,\362\336<4\246S=E\203\246;kx\253<c1\242=\333\323;\275G5\333\272\342\366\207\275\224m:\274+\3639=\361b\344\274\036\003b<%e\205\275M\224O\275\335\333\267\274tX{</E,=\302\3314\275\303\034-=\306\032!=D\247\242\274\365\272\261<K\206\330\274\026\n`\275%\311\022=\226F1<\206N\023\275\313\341\010\274\001u\217\275\023K\n=[\"Z\275\230\000\036=d\200c\275\344\'\211\274\374\332\t\275[\307a;\362\005Q<\2031%\274\252h\224\2753(\302\274\203\350\214=\351o\277\274\2764(\275\240\202\250=(\331\300\273HF\n=\354\031\210\274l\212\014\274\242\031$\275\021B\024=\270\273\034=<\237H\275\311\214t;\355\007\372<T\374w\274cC\321\275\331u\236;\206\312*\273We\265\273p<h\274\362t\266\275p3r<\260\230)\275.\314\233\272\206\002\205<^zH=\275\306e<\262\030\214;\222?\247\273\223lI\274^\177\301<|\370a\274h\006\265\275>\233\314\274\017\227\255=\007{-\275\272wH\275\3270Y<1\275\216\272:\367\304=2\354\365<\261\237\253\273\336c\230\273ZN4\274:\t6<\204$\037<\373L_\274\340\n\320\274\312\242\372\274a\354\'\275\347\206$\275\317\007s\275\352\322\272<+\255p\273q9\364\273EO\235<\262@\035\274\005\274\021;\340i\250\275p\231\275\274\035\025\205\272\221\230)\274_p\357;\213D\343\274\351\237\n\275\226\312\313=\337\262\032=\036I\223<[\257\222< 5K\274`_\310\274d\332\350;F\226\023\275>\260\360\274f\372\311\273\251Lw=.:1\275\251\027\226=\340\207\344\275\276\013\273\274<qi\275K\273\256\274e\355\"\275`1\340;\273R\374<v>\312\275x{\352=g\204\312;\212\237M\275\354T-\275C\232 =)\202\205\275\352\355V\275\033\004?;\347[}\275\364\355\236\274\321oJ<6\204\204<\216\203V=\0176!;\022\0037=A\215\020=\207GQ;\345\310\233=-\005\020=\313\202\224\274\245e\304\274\203\375\3649k\315\354\272\026\031\342;\324\375\002\274\026\311G=\007\233\301\274I$\360=\322\323\n=\203\025\352\273\341?\341\274\376PT;\341\003\363<\341\332\343\274D\014t<<\331\354<A\234+\275\210\3115=d\214Q\274<\220\240<\310\264-\274\224Y\355<\r\264\'=\360\311\347<\242\361(\275<\265\311<X\310\010\275\365\327\241\275\375,\375\273\031\321\034=S\2325\274&\270\236<\304\305\205<\nY\214<\305\321\332;\340Bo=\241\264\255<g\021\317\274\023\246\\\275A3\205\274\365\260)\275^4\017\2754D\216\274\244M\343=\227\305!\273^y-9\016\251\301\273\334w\274\274\205\nX;\310z\360\274\010\273\204=\343\251\302\274?\250|\275\024\252\022\273\331\363\354<\032\n\202\275\234\"\t=\272\222S<\033\311B<\226K\027\274\225U\032\274/-\253=z\024\'\274\023\313\017\275\ra\340\274\310\007\231\273=\277\021\275\242S\014;\2214o=\350\034l<\356v\302\274 \'\274\273:\0314\272;<\001=~\253D=\0020j=\0204\224=\311\254\212\274b\003t\274\265S\353<`=\334<\271q\301\275\020\335\330\274\200d\202=\272,L=\351b!=\010}7\273a|\214\274\326\241@=r\375\225\273s8\267=\325\213c\274u\357&\275\345\373x<\254\017\351\273\201w\372\274\343)\210<\374\313T=\244\315\211\273\237\333C\273\234}\320;\251}\013\275\364p\033\275\344\003\221\274\336\275\352<\362\'\236\275-\013,=3\022+=\033\014\200\275|r\326\274\266\242\231\271\230\303\031=\n\325\271\2752(\226\275\371\256`<\357\263\212\275\327\250\254=\313\003\036=\366-\367\274\253w[\2752\307\024\275\317Y\037\274\303\227A\274\023\254\014\275\213\264U\275\316\270\232<\234\274\017<\246^\370\274\345Q\003=]/\000=\206o}=\365\212\222<zQ&\275\036\020\231\274P\033==|\233\006<\276\370}<q\205\367<\267O=\274C]\367\273|\021\231<y\252\222<\321?\214\275\304\331\204\275\307\274\267\274\361\206Z=K\311t=\255g\204\275\001\304\207\274\031V\342\275M\266\206\275P\246\253\274\315`\232<\0234r\275 \223V\275S\211\377\273\031J\033=\237\242B\274\245\242\004\275\225\014\210<\353St=\331rf<(\234&=\030\'\224\275f\321\337=\242\265\224\275mc_\275Al\025=+A.<\313\r\r<\005\345@<\332\016\201;\274|/\274\240\276\023\274\243\323\212=\276e[\275\2610\242<E\326\276\271\211\316o\275qz6\275\327\030\177=}\236\243=\217\266~\275\357\034\344\274\230\361T9U\"E= @\263\274\244\244\t=\354\005\245\275\317r\265\274\376\212\214\275\030\322\207\275}\014\025\274x\3509;\034O~\274\005\363\266\2753\322\216\275dW/<\201\365\347;\n\317\200\273*%\201<\237\303\260;\350^0\275\361\240\261;\276q0;\303\237\"\275\267\276\250\273\332\211\201\274m\212\'=pYN\274\317\031g\2742\233\363;\225@\310\27425G\275\230\212\247\274~Dw<|Z}<!pa=\377\nm\274\213\"g\271\336\005\035=\224\027\330<\313\323\356<3\205>\275\022F/\275\023\031\316;\236\365\214=\325F\327<\000\236\223\2754\327\236\274\272\301><\274)P=\370\312L\275HS\236=\376\336N\274gT\315=\247\n\226<\222\220\303\275A\250w<\230\002\252<X\253\373:\317Pt;\326\032>\275>O\204=\367L\036\274\215\016m=\367W\215;\230\035\243=\374\020m\275\330%\312\274r\302\037\275$x_\275\232V\230;\334\322C;\336-\270=\177W\374\273\356\234\325\274\022\\K=\232P\010=\377S\r=3\222)=\r-\242;\027@\377\273\t\307\330\274\263E\007<\370A><\253\205\342\274\364\030\272\273u\347{\275\003\233\177\275\316\335\302<\326U\321\272\220\026\010=\272!:\274\232[\351;\334\250\017\275p\322\311=W_\311;\334j\000\275\306XR\274Ef\020= W\007=\355C\006=\322|-\274\250\212\333<(\361x\275T\006\214\274\365\315)\274\336w\007=\224\265D<f\307\374;f\370\213\275\246\252\200=3R\014\275\300n$\275\226M7=~\306\256\274\307\236\341\274\326\356\357;\336\305\226<\370\302\222=\002!\006\275\366\266\201\274\270\226\323=;\347E\275t\334\327\274\344\372\t<\204\\\035=\316\235\351\273p\340\003<m\320@\273\333\277\036=Db\211=H\016\022\274\020%@\275\001\304\352<\241\214T=\364\"\r<v\220z=,\375\207\273f\237\331\274us\020=\301\313\332;\353\037\267\275\300D7=\324-\n>\032\200-=\2006\004;\351\370\216=z\254\006<M\324\276<\326\205\034<\364\252\030=\010\374\263<\022\232\\=M\007\357<\235\270\217\275\001p \275\374\325S\274\262\255\237;\346(\270<\366N\334<F~)=\001\0139=?\225\213<\313\010\307<\232\005\360\274l\301&\274P\ns\275\322U\\=_\345\326\274i\316d\275Q\326C\274\005I\374\274\250LX\275=\300[\275\313\245\252\275\035d.\275\314\032\025\273h\343K\274\n\to\275\303\034\344\274j\255\366\267\266\310C\275PP\371<DB\260\273V\373\004<f5\220\274y#\013:q0\221\274\250\266\014\275\016\232*\275!\2017\275\310\313<<]\000\242\274\237\333\r\275\213\267\033=\304\313\213=\224\230Q=\320\362\207<1\324\361<\316r\034\274\203#\235\275\033`\307<\'\330R=\007\\\343=\257\2555\275\363\325\322\274\t\210Z\2753\353]\274\217\323\352\274\332C\207=\366;/=\242\325{\274a\306\014<@\305\213\274\3756|=0\211\324<\277\315\271:\025\"\247<\265 \260<%\217\354\274O\241y\275\261%\343\272\207\256\"=\323X\212;V\274\244<\343\277d=F{\310\274{#\251<4:\016\275\331gq<\351^\303=\252/P\275\322\306\3408\304\336I\275\2217\030\272\312\314?=\346\014e\275 U\255\274;\023\307=l\021\237\2744\324\362\273\251\244Y<\370\234q<\266\226\245=\257\177+=\234\257\223=\303\013\005=\t\356\211<h2\347=\020pc\275W\332\301\273x\343\253;\247K0=\252*\202=\204\275\366<&\236\230\275\202\324\251=\235\344\201=2\231\217\274U\222\212=\204\276\312;\221f\271;\020\316\t=(\330S\275\362\253e<\340\020\200\275g\222\274\274b\341 =P\n\226<G\3336<3\\\300\275\351\376\227\275<&\001\273\335\002F=\203m\204<\312\026\277\274?\241\200\275!\327(\274\225\032z\275\332\034\n>\363\234D=\235\010\236\274\017]\370\274G\032\330<x.[\275D\\\300\275\'\002\332<\321\367\225\275\013\207\021=\tk\201\275\314\264p\275%uG=\265c\037<WQ\332<\000F\327\274\2543A\275C@\026\275\013\3019\275\326\025\025\275\246\203\206=J@G=Xh\236<Y\027\224=\177\344\332\274\264:k\274\276\r\016=\366\372\t\275P/\035\275\266\352\277\274Y\301\361\2743\033t\275j\n\302\275\330t\321\274&n\005;E\0355:\025\360\314\275UG\273\273V\323\306\275\224n\350\274\342\220\245=\342\263\363\272\220Q\023\275k\261\226=\262\026A=\254\217\203\275\r\334\220\273\367\0172=\205z0\275?&t\275r\231o:\200,\245\272\231\200\230\275\302~\254<{\034\254=\360\222\032=\204\\\354\274\034\212\324\273\342\210\247<\353\363\347\273\323U\343\274\352\210\246\2745\2417<\2660~\274j\357?=\242GS\275\376V\202<$\"\010=d\373 \275\316\241l\274/V\016=\221\246\021\274\222\216\336\274\337c\266<\233r\035\275\222cB\275\254\3744\274b\225\346\275r\372\267\274j\335\314<\347e\250<\337\027\001=Uj\203\275Qkk:i\361\014;\373\302\310<LJ\344\274\0204\230=\026\034\331\275G\317\024\274\212|\007=y\210\007=6\334\003=m\365\022=,a\r=\035\257\010\274\210 \262<;[4<\377\333\240\274{\364\331\2737k\232\275\342\016\3429\235\336\243\273\220\261\315<\266\370\370<\r\300!\274\020\267L\275!\250\326\274\025\307\333<\353H\020\273\361d\257=R\327\376\272\\\341\321\274\311a\306:.\252\334<\020=\323<\0100T<2YF\273\240\021\331\271\236\374R=cm\265=\212\2105<\204#P=\317\362\013\274\233^\254\274\r\264X=\353\276\333<\347\262u=\247\231\302\274\240\023\377\272\2524\017=\317\246\240=\031\365W<\233\363\210\275HX\215\271v\245Q=\320\372\374;\361\356\352\274\335\231\323\274\210&\333\273l\301\033\274\013&\240\274\265\341#<@\023\010=\326:\300\275\205s\370\274\315`*<\206\333\010\274\340\322\274=\222Q\313\274\303\252n<d\021\313\274\312\3005;A*L\275(=\202;\020r\225\272r\036h\275\262R\206=-\323\235\273\217\316(;\352\335\330\2755-\001=td@\275\2375S\275\267\227{=?u\034=LS=\274=\326\007=\347X]\274v\233\364\274AA\026=\020\r\t\275\347m\262\274\244\330\252\275\275E\231\275\367\360\372\273`\334\021=\316]N\275m\321\364<t\271\211\275\330\014\033\275w\305G\273\032\242\355;\016Y\313<\211\361\037<z\001\240=\346\330\315<K<N\275\231n\363\274\274\371\300\274\216\205\003\273a\373?=2\000\226=\344\205\262\274\204\252\276<\321:5=\033\000^\275\353\000b\275\004\207\313\275\330\336\027\274x\215\366\275\302\370@<\303\320\201\273\367\277\201<.\2113\274xC\256\2736K\t\270P\236m=7a\016=z\211\235=c\033\326=\315D\335<\343\314G\275eU\317<1W\352=)\010\177<\033H\304\275\361|\355<-\253\001\275\263O\207=Be\314\274]\301(\275\342\245A=\254\356\217=\221\373I=I\255G\275f\262\324\273\312\353E=ci\016=\303\276-<HT\321\274\305CT=-\001~=^\302V\274\177ib9\231\374\026\275D\333\033\275\255\030z\275\'}\016=\250h\255<\320\314m\272\321q\022\275fkW<\024\2248\275\264*\222\274h\244\342\274\"\267\021=\353\\\025\275\244\237\314;[V\226\275\233\217&\275y\271\021=v\353,<4\252\002\275\226\366\327\272\365j\n<F\352\361\272/+\310=\220\'\364<K\031)\274\241\224d\274\322\367\253\274*\330\275=\244\336\315\274\254l?\274\241\241f\274^[?\274\255\376\024\275M\001\001\276\345\325\350\2749\334\361:\321\023\323\273\024\001&=x]G<\224+\220\274\250\016\242\274G\204$\274\352\305\265<\372\0012=\336\206\275\274?T#=\351\200\322\274\267\321\267\275\204\001C9\265\261;<w\216\340<\3467\375\273\r-,\274t\263\321<\367\016+<N\216\225\275\"\030\201\275\177\255\350\273[?\205=\306\256\240\274\013\025F\275\240\304\301<:N\327<,<\253<I\r4<as\013=4^\244\274\377\300+=]-_\275\335\333\205=\216\003(\273\341_\253<\250\352\342\273El]\275.\207R\275\347wf\274\366\333L=\275\251==L[\226\273|>\206=_N\215=+\304\201\275&g\033\274\340`E\275\254HS\273\231\232\341<\330L\331<x\266\372\274m\001\325<\024E\262<\210]\342<\302\304\302=\334\236\364<\331(\326<\020\271\247:\"`\307\275:\200v<3\203\311\274i\337\014\275\230\000\031<\0372\342<\'r1=\016m\200\275;-W\2756\"\026<cB\216= y3=\243\314\200\275W^\037=)3\211\274\003:\333\273U\275D\275E\302\275<\277{\277;\222,\205<\0227\326<q\241\326<\032\t\325\274\310\353N=\360\375\001=\346-W<\235\232@=kI\206\275\307w\007=\243\030\316<\213+\370\274P\347\305<_\022\214\2751o\232=\237\260\243=\307\275\023\275\r\320?=\027\372\264\274;\317\317\270T\034-<\303u\253<\372\253\344<\243\002~:\265\000;\275$\276/=\200R{=\024KT\275g\213T=\245Ov=\3241\275<\311\027\271\274\255\236\271<EX\305\274\\\331\221;\324\212u=\361\371\255;\361\230\220\274\273+/\275\303\373\275=\364\325#\274p\306\201<V=v=\215M\270\275\335a\204\275<\244\223<\220\016v\275\337\024U\275\310\2529\275\340\357\273<\370\212\221\274\352q\306<\360\321\303\274\016\273\373\272\253\215R=Vw\005\275\320\201\223=wN\254<\004\032d\275Q>\031=J\302\232\275R@|=A\\\005\276&\236\302\274=\223+\275V\360\352;\242\223\303<\001p\246<\240\024\004;_?\006\275xp\224\273o\272\300\274\255\022j:\261O\343<\256\227\252=\215p\361\273\360\302\027\275\023\234\036<d&\000\275q\272\245\275\306OU\275Y\352\233\274\002Pi\275\004\371\273<n\376\230=g\275\373<\0338\374<\362\307\027=\035]%\275\r\305\016\274\2643\317\275Z;\200=\311.\260<\305\325\356\274#\370!\275\023{]:\331<\222=\375y\254\275%\006\035:W\003\201<\033\351\200<\346\233=\274G\251\320<\000\035\"\275\337\355\037=J\336$=p\245\215\274\224G\220\274\230\263\010<]\010\232;\275r\204\275{\204\351<\337\307N=\006\240\356\274\263\226\3039\034\2543=\232\243\n;\244\007\273\274o\010v=5\214H\275\237\203^=\357+i\273\020)\201\275\230\035$\275\275\027\274\274\017\304%\275B\007\036\275\354\307\265\275\240o\213=\314Tr\275!>|9\350\253\340;\353\352\350\273\2403\374\274\266\205M= \006\006>\362\363Q\273\232\033\177\275nFd=\247u\177\2744,l\274\377\324&\275\n\354\205\273\242\334\237\273\332\2549\275\351\236\324<\320\2060<\322z~\272\345\317\232=\035\272\255<\032Pp=\241\366s<40+=r\376\331:#\0263=\307\220\206\275\233tK=\312\307\371<:%\263\275\317W\234\275\313\366/=0Hv<\331\214A=\254\355\335\274/Q\231<\034`*\275{\217O=V\304W=\230\335>\275m\337\260;\301\320\004\275l\"\205\274\010\"\270\274\257\3306\274:\374U\274\344p\021=[\364\203\274\013\237G\275\003=\010<\317\366\215<\276\224\214\275p\363,<\204\223\271\275\023\026\340\274\256UV\273\374jv=z\316W=9\245c\275\254V\207\275\306\330\223=:!\372;\037\317\202=\225\031\004\276\001\331e\273bM\212;w\024\345<d\177\217\275\027\342\212<\236\'S=\027\211\315<p\345\030=\243\254\315\273\025\335\215=\367\352\261<\351lF=\371\217\023\275\004\270\317\274\313\305\n=\255<I\2755\306\214=\351\254*<O.\212<\357\206\234\274T:\250=\262gi;<|J<\323\370N\275\323\367\223=\035;|\275\276Mf=\252\253\235\275zt\330;4\003\210<\336`\240\274\316\244Q=\222\005\000=\236Z>;\363\203X\274\203\367\001:\235\001\376;\223\233\216;v\254R\275oL\361<bT\245\274V\362v=\356\274N\2759\233\227=\301\014\247=\217}_\274\337\0145\274^\306\006\275\2777\376\273\361\200\030=\t6\247;\370\220v\275\\\320\230\275\200\321\224<\'\260&\275\333\312\235=!\026\270\272\322\025\251\273j]]\275\'G\014<d\273\316=\031sM\275 \036\014=\003P\351\274\312i\256\2734n\206\274$R\374\273ae\332\274\346:\242<\343\334\243=\346\351\334=i\261\256=\300\026T<hBp:%\305\266\274\365s\266<=\313\275<\310-\241\275\020\005\241\274VC\345\274P\274\365:\277\275P=\303\r\373\273\323d\377;\214\000|=_\035x\275H\022\262\273I\366\021=\031d\317\273\266\361<\275\223\350}\275~4\310;\315.\025<\315\260\336\274\031\023\022\275\225\330\336\274\037/\260<T!\255=\245D(>>\001\320;a\217\242\274g\374\233<\272r\250=\n%\010\275\254\232\334\274h\244\316=C\226\317\274\300M,\275\025J\210\273\333\330\273\274s\315d=\264`\224=6*\200\272\316\272\027>\342U]9\325\255\335\274\251\257\025\275\331\333c\274\016\0361\275\236Xy\275\331\232%=\201Y\355\273\t\224\214<\367\201\320\274\017\3679<\247\033\245\274\034\035\247\274)\245\n<Q\001{=\t\242\242\275%\3359\275Q\247\351;\377L\310\275 j\364\274-\246/=\311\367\017\275\267\023\364\274R\314\234\273:\263\250\272\364\334\335;f\366\251<\307\r\210\274\352\243t\274\206\271\007\275\357\035\232:\357\n\030;\236\272\202\273\315\0367=\035\343\346\274\253\'\002\2752\256:\273$M\377\274\005H\240\274.\253&<r\236\342\274\372\007C<\027z)\275D\220/\275s\022\021\275*T\274<\031\203\365<ii\037=0\300\177\2741R\034=ID\020<\341\336Q=\363\220u:\371\"\301<\201+s\275\334\001\231\274\017w\263\274\021L\034\275\2356\324\273\331N\255\275Mz\203\2746\375\240=\346\262\276\274\026\246T\274Y\263\215=\002\202\026\273q\246\001=\233\227\317\274\022\362.=y\222\251\273\247S\354<u\226\177\275\0342\033=\257?~\275$\356\375<\0055\'\274\242\037\227<\204Y\327\274\313\242\256\275\307\241\n\275\335c\230\273m\366\341<\234\213\261<\332\030Q\275H\335\251\274\024\342A<\020!\270\275\340\270\357\273\231\247\313<\332\341\377<\320/Y=%V\236;\344\034\320<{\226\022=\027\005\202\275W\233\377<\037~\304<@\274[<Ok\327\273\303\247\251\273\0042%\275^\214\016=+xY\275/\3201=~\370i=\305\376\022= \022\326<\252\353\272; Cy\273M\357\022\275U\207\215<t\332#=\251_\345<\373\205\245=7\317\221\275\353\355\331\275}\200\201=\364S\373\273\303\251\002\275\347d\321\275\252\013\r\273$(A\2751\345\216:}it<3\260\'=<\274\016\275\306\225\307\274\306C\205\275\200\346\250<\376\022\277=\026\251U<\241\212C\275+\227;=\322\023\350<\275\353\341<\344e\202=\021\323\201\272\004[\305\27514\001\275\365x\211=\261(k=\201\337D\275j\223\352<\377]\305;\204\341\246=\033\250\232\275\004\\\024\274\307\030\342;\345\317\202<<\265D\274\242\0238=\224\222:\274\337\236b\275\256\026\r>\362s\346;Q\211?<A\262\014=[L3\2730&\022=\360Hu=\317b\327<t\207\363\272\034\n\231\274\016\010\232<\373\3512\274|\365\005=\210\302\272;\227\327\350\274\307\225\220=\327\034\003\273\243-R\274\2250Y<P\262\005\275\321\3617=f\220\010=M\307d\275\357\037\251\271\000\010\352\275XS\233<\025\000\214\274\252}\304=\363\303\243\275^l%=\311)\232=\222\270\236<\205l\274;e\020\377\274\363\224\372<\030{?=\366S1=\330\004\355\2742\357\275=\214\rH=Il\207\274\022E\202=&\345\320:\326\335\360\274\003\357\234\274\206\003\370\274h\221\016\275:\277g;\306.-\274\206\311\232\274\354\254>=\r\321q<1\324]\274\347\307\361<\211\303\274\272\324{)\275aB\356<\033m\200=4\370\204=\307`\217<\371y\004=\325v;=4g\323<\305\216Q\274]w\034\275\240\\)\275\365i7\275;.\347<\021vw\275\215\351\032\274,\t$=+D\002<\257\352f=\257 )\275p\016@\275\350\262\222\274\241q\246\275\334\024\274;\345\3065\275\224\365\204\273NJ\212\275O\257\340\274\032\216K:\255F\350\275 \000\202=\177\024\345<\315@\354\274\343\025\331=5\367\260=\212\033q\274J\337Z=L\035\203<6O\362\273rSl\275?\272\244\274\277M\220\275\031\337\301\274\373\215R<oFz\2750c\372;\345\264E\275\030\375\335\273\036\034\245<\263\010\211\273\004\244\314\272\3079g=<\005\332;) \203\274H\340\234\274\000\203\340; \263\211=\261F*\275\205\222\3439\277\243\200\275\"\020\2759m\r6=6j\347\274\351%3=\224>Y=\216\200-=\311\'\241\275S\'\034<\377O\024=\323\314\307\275\267\204b\274\001\313w\275\263\264\353\275v\005A=\206\320\322<\210\333n\274$>Y\275<\037\213\275\302,S\274T\201\360;K\247_=|\306\231=\233[\032<B\370\n\275\265\362\252=\\[\013\275\335\027+\275\337$\275\274u\254O<\373\231\177\274eH\365;\260\362\033\274\354\3638=z\\\331\274Ek\374<\037x\265\274\362\205.\275\026\350\265<\235V\234=\315 O\274o\373\376\2738{N<<9\201\273(\2163<:\233?=\0231\036\273`0\r\275\013\001(\275%\240\030\274<;\320\273W$m\275Q\277\007\275\000F\276\274\257c\n\275k\032s<*L\255=\370\026W\275<\276\023\274\025\362\266\273\330b9=\341\370\242=\215\267\230:L\242\363;\251\322\270::\034\264<\3216\022<\223@X\274k\247K=,\201\024=\326\\\241\273{\035~\274@\304\322<\266\351&\275Y\366\204\275\001NX=!\244\245\272\356\215\217\274\026\317\031\275\277n\026=\224\026\013=\300\355\231\273\320E\330<Y\001\233\274{\221y\274\023BU<\2344\377<Y\nI=\224\355\371\274\305\243\014=\032\324[\274\200f\201=\236\305L=\032G\014\274\322\353\350\273\272\265\224<\t\330J\274\3062\301\274|\3721<]\237\234\275\211uG\275\352\204\333:\316\206\326\273\"\010\005=\244\365q<n\004|\275[9\333;\240\342j\275\361\244\366<\037\236I=\335xM=\031\252a=e6\034\275\306\347\'\275\274Y\001\275\005\221\215=Z\t\312=\007\220g=za\273\274[u^\275.\247C\275j\252\256<\036\370m\274\210\276\032\275W00=\2067\017\275\222\213\315<\356]\305;?t\217\275\2756\323<\243\2430\275\352I\252\274c\244c\273\332\353\007\274\017\321\250=\337o\216\274\307\372\212\275\235K\233\274p\266\377\274.^\237<\371\273\326\274?\347\004\274W\270\340\274]\355\201<\225;\033\275Q\266y<=\225\314=\242\203\270<\224\024\214;Y}\272\273\231\"6=\213\212\221<\367\221\310\273\212\367\342<}Q\320=q\266=\273\365f\275\274\233\'\025\275%\250\273\274N\325N=\354 \201=\276\335\311\275z^*<\266\004\201=\014y\275<S\352\306\2754a\202\275\346]\321<\235\023\313<\233me<\024\202\341\274o[-\275)l0\275\204\323\244\275;@\236<u6d=\317\377a\273yT\337\273h7z\275\250\305\252<\314_\314=\335\262\246\274\351\310n=j\344O=(0\305\274\257\017\360\274\340\004\006>\003H\206\275\372\275#\275Y;\211\275\376\270\014=Q!<=\250\254\232\275\233\033\020\275I:M\275\327\316F:\007\236\217\275\275\366\230:$\003k\275\217\014\014=\010w\314=3\000\234=\274\n\375:_\0321<MP\332\274\350d\300\274\273\251,<\\\'}=>\312\364\274\001\377w\2740\351{=\234Y\211\274\007v}\273\036\224\326\275hq\003=0\023\273=\"\213}=\037\231Q\274C\257D\275\235E\001\275vk\212\274/\270\207\274\2600\263\274\220<\251=\367\255\240<\335Mg==\210\210\274\263\034\202=\203Af\274\320\305;=`\377%\275x\362\006<\016\370i<\007\302\235=\346\214\356\274\314\010\346\274\242\246&=\003\016\204=\211\375\021\275m\2254\274\000\272S;+\331:\275\240\231)=\276\306\306=#\213\034=F\005\255\275#b\230\275\207W\t<*s\224;\260\241U\275o\016w;\264\360?<\364\223\025<]\234h=\346\010\004<\362\022\306;t\375\027\273U\317J;`\376X\275\n\351\226<\022\032\351\27495\202\2754\341<=&\242Y<\226E}=\222i:\275\022\254X\274\243\017\340<\255g1\275M\220\203\275\006c\352\272\t\3564\275e\300\242=\270\331A=\016\3263<i\356\364\273\366\230y\275\237\213\335<\370\200\204<Y\323%=\372&\322;\326\024 \275\273h\\<6(\016\275\000; <\375\r4<\014.\222=\224Q\261\274C\024-\274G\016\335=qX,=]/\340\274\2571\003<\214\355\317<\237\312@\275\212u\305<j\264\221<y\245(\274Y\2312=O\027\245\275\3708\004\275!\300C;X\340\374<\300\360{=\334cG=\033=\n\275\327\244\206\275w\324}=\201\0269\275\237\303\315=%\304n\275\037\305Q\275\004\323\365\274\260\303$<o;#\275b8\345\274cm:=\230j\006=\006\211L=q\265\000=Fb\022=\311\013R<C-\327\275#\005\016\275\023u\214\274\273\243\204\274\036^\224<\230\350\004\275\220z\221=I07;\246\271\225<\231s\016=\340\207G=\202\360\007=#x\371\274d\027\334<o4#=\337\361\336=\256cU=c\023_;\3216\002\275\\np\275\301\252O<\301\262\031=\271?\032\275\211G8=\346\301s<L7\255\274\241\220H\274\023\255Z<\000\036#<_vo=H\244\013\275\377\014\251<X\330E<\355\262}\275\272\3162=f\255\201<\316\265\253<bT\201=v\350\020\275\032>G<\032\250N=\331\335\331<A\020\'\274\237\367\205:\3732.=\322\342\223\274j\341\351;\334-\023\275\251k\335<\326:\324=.*\"=\017T\254\275:\263\240=8[N<\254\224\\<&\201\270;\312\275?=\006\243R<\377*\030\273\277J:\273!C\005\275G*\222<d\371\031\275\207\300(\275\006\256\224\275\324g\333\274\235y\237\274\201\260\010<u\2515\275\354z6<9j\377\274\213Ky<ZD\212\274^\016X=\327\003\225\274s\276\251=^\016+\275N\355\311<\'bC=\304\034\314\274\333\265\314\273\345\323\256<\261\352\340;uM\255\275O\024\010\274\035\300z<M\306\335<\270\204D\275U\373\224=\323\365\026<\336G\205;\2359\274<\350\374z\274)\333\271<nkn=\227`\022=\342\221\347<\230x\246\274\375\207F\273\001\230\033<\331}P\274\364\034\237<\321\265\242\274F\320\317<\006\260r<\205\372\377\274\322\243\214\275e\2236=\270f,\275\255\326\024\275\331Fz\274I\255I\275u\352\260\275+_\201\275\304\370\035=\305\177\260:\n\330\243=$s\005=\307}\n\275>[^=\307\270^<NT\254\2746\251\250:\246\361\350;\347(_\274\313\025\222\275\245Q\027< \351\027=\030(\363\273\222\030\206\275\022y2=\366o\244\274 \336\236\275\336\274\307\273\364\021\375<\350\004f=E\003\350\274\357\200P=\333\230\356=OX\010=\336\310\365<\271\373d=\204\230j\275\331t\262=\236->\274>\030}\274\350,\037=\216^\274\275\262\217\213\274.\343\314=\231+\355<n\217\203\275O\013 =\2362X\275n\207\333\274\377\355w\275\036\301s=\177YQ=\007\000\033\275\231\277\210=\001q\207\275Bm\222;\245\261\222<n;\010;\267\026\016\275\304\302L<\214&\251\275\352\263\252<\325\262\003=I\247\002<\036\211\217:\214\362\241<\036,\342<\274,\035\274\212\020\231\275g#Y<\321\234\352\2742\242\363:>\030\374=\304\013\326<P\234\007\2759.\231\275\266Y\227=\"4T=\020&\025=\261\314 \275\3446B=\205\262\345;k\334\275\275\316\002n\274\027\250\023;i\250]=\363\2068<T\014\200\275\246]\262<q\350h:\344-\210\275\346\032\226\2749\246\343<\t\273w\274t\242\202=\277\222\376<\200\375\013<\225\023\\\275\356\310E=9B!\275\243m\233<\016j6=\026\324\312\274cv8=\347b\377<\264\227\373\273g\374\261\2745\010?\273\263\333:=\241W\362\273\200\206\373\275\312\014\376<-\023\206<\260I\246<1e\212\274FR\366<g\016\020;c\201\266<r\205\216\275\305\263\017=3\255\251= o\215=\367\262K\275\017\273\362<\267\357\273\273r%\360=\363\374\010\276s%[=\345:\216\275\t\344J\275\250\362\335=\275gm<{x\212;\254}\372\274{\364{\273\205\332\023\274\2373\333<*O2=\2335p\274\265\257\356\274\351\374\375\274\377\026\232\275\316\352D=-)\346<C\007{=\234\305\274\274yL\027\274\351\364\021\275l\006\373\274\211\316K\272\224\334\222\275]3\327<.\372\327<\317;\270=0\177\026;T\255p\2750\367\000\2754\310|\275\024\020\362;\320j\000=\227\315\243\274\257X\320\274+\324\370=\360\232\312\274\320\022\201;>\225\\=\014Ax<9zh\275\263.\211<\nt\271;{la\275\213\332\233=o?\200<$\274\275<\340\203\252\274\344r+=\276\370\200\2751gO;p\314\260<\250\354\370<\310\242\252=^\026\335\273\"\215\207\275\321e\324<z\202><5\263\217<7\'\006=/\230\224\275\237\204P;\354\353\361\274\202\026h\275\245\002\376\274+\277\037<\t\367?=\267\214\017=\363\272v<\034\\\002=\223\350\375\274Th\177=\003\205Z\274\323\2109\275\332Q\376\274\317\221\344\274\256:\341\274GWK;\221\377o\274\206P\207<\377y\371<\371\300\316\274+E\020=\032\260v<\304k\020<&\3052\275\001\347\331<Qp\t\275\256\3563\275H\267\224;\247\336d=\030d\001=\205G\n=\207\262\230=\244\247\236\274\244\357%\274\231\376c\274\017[\024\275p\332J\275\332\022\343\274\"&M<2\321\211<\236N\330\275\013V\247=\331I8\273]\221\001=\267o\263<\002\236\036\275\273+\000\275\253\030\t\275\315\005l<\261\356D\274(8\212\275\357P\204=wI\235\275o\272\013\275\267\230&=Q\227\213\275\355\337\240\275\361E\370\274\'R\245;\023\256\030<\240\374\377\272bh\275<\212J\376\274\032ro=\264)\r\273\205<r=2\330\033\275\301\tV=\203>T\274\307\261\243=\177`\206<5\027\245\275\\kn\275\022\372\337<{\005\'\275$\276\233;\365\251n=\327\246\265\273\342\024};\2307\021\274\207|\214=\343jF=\264OV=;\207\243=\356\357\225<F\010\232<\343\006K=1d\251<\277\247,\273\300\353\020\274u\002&=t\340Q\275C\364\030\275\234\020\003\2754\224\031=\037\362\026\275U\200\006\275SV:=P\251\325:$\205\261<\3522\206\275\024\3161\274\2211\347\274\201x\310\273m\366\005<}\206d\275D^\313;o* <\261\204\237\2749#\213=\313\242Y\273:\277&\275\312\277\336\271$)n\274\030\022\320;\004\031\020\2755/\314<\230\002\231=\347\312\275<\001D$=1\301\300\274E\032\233<(\323\210\275`G\024\275\322\211a\274\311\367\236\275\230\236\224\2750\255\275\274\344y\236<\217\371\324\273\363\316\267;i\001\031=\231\356\233=7\326\370;\226A\306\273c\365\215\275\232\305\014<\035r\243\274\343\305\037=\373\022\261\271\331\2467\274\t\315\243<\024;N=\033\330\264\273\264\177\003=;:C;F\325\262<\025j\020<\234\nQ=\013\n\332\275\242\227\014<\261@D<qUo=\332\306B=\300\"p\275\014\274\227=\0210\315\274\374^#=\254\245\251\273\033\365\203\275L$\242=\004\307\277\275\257\347\320\274\034\363\232=O[%=E\366\016\275\242-\204\275b\366O\275\274\315\236;\330d\312=\354\366\221<\\7 =\232pA\275@\222\245=\374\203\023\274\026\031\315\273\020k\300\273\242\177w=\215w{=F\376\022=]A\203=\003\311r<\263y\273\275\026]\033\275\254,\204= h\':\202\321a\275\246\001\277<\207`v\273c_i=\222\345\002\275\371z\307\274\305\342+<D]V=#\232j\275\2459\201;\370\364\014=\253\016\202\2742\'\370\274\013M\013=F\0353\274\202\235\013=\004\331P\275r\207\360<Bu\027=\222\351\t=\342\2137\275\335b\332<]\266\262\274\206\245\210\275RK\207\275\003n#\275\273\202\346;\036$B=\227\n;=\334\007z;\334\261]<\035\212T\275\202|%=#\234\004\2757\237\301<\265;\214\275&\376\005\275pue\275\000F\r\275-^T\274\3441\213<\241\215>\275\272\205\3119\326\375l<\037\257\235\275\334&\307\275\200\221\251\272\224\304O\275\213\342\267;wb\266\274\020\031\240=hh\037\273$\003X\273\211^]\275\200\271\305\275\2344\316\275\326a\204=\300\371z\275\271\234\203\273\372\032\341<\310\367\213\274\202*\342;\0308\271<k\021\214<\177\020\217\275<NK=\305\0001\275\010\257\204\274\221\276K\273\333\203r=%:z\2757V\344\271\212\233\250\273\233rO=`\361l\274\030\220\004\275F\326m=\323\214\346;\304\336\331<o\352\204\274\326C\005=\243k\375\274\005\334\304<\020\345\211<\273\372{\274\366\027\005\275%q\335\274\366\202\002=\235\226\334\274\016\310\351\275\316\006\342\273\224=f;\270\362G=)\327\322\274\271\004\335<p\352\002\275\335\317\202\273;\367`\275\364\3367\275`V5\273\263\242\207=\205\235\027;\325\\\340<\233$\242<3\257\023=\362\272\270=\323~\031=\201`\350\274s|\331=\0014\000=\225\241\327:\ty\227\272\"\225\330</i\010\275Z\271\214=\210\242q=g\325\003=\373e\r=\246G\230=\3619\023=\360\374D\275=\275v\274\324\376(=\214\235\311=\036\234a\274\001\3776\275v\227\031=\265\213\307;\261m\023\275pW\330<\310\375\324\273\243\302\207=\3620>=\252\320 =\257\000\251<P\313\030=l\223a\275Y#\350\275\031\320\275\274\020\255D\275\347\223\343<\001\351\r\275\212~^=O=P=\200\000!=\263\331\034\275\377T\031=a3\354;\035\210\236\273^\375\255\274:2\367\274\322~`<\236\377\326<p\032\220\274>KL=\301\310;\275#\010w\275\307\364\365<\273A\323;\203_==n\016\010=\365\004G\275;\356\017\275\336\234H\275\205s\221=\"\030 \275\362\233\222=r/\305\274\n{\245==\242W\275\266^8;y\365\232\274x\251\010\275LN\347\2740i\246\2757h\002=\366\032\307\272\\\3037\275\254\264\200\275@\306\263\273\272<;\275y\363u=Oe\326\274=\256\237\274\354OZ\275X\207\371\273#z\337\274F\342{:}\327\347\275\003\321\204<B\263\314<\372lg=\216\337|=~\007\004\275(2b\275\305\317\022=\206\334d\275;r\232\274?4\316\275\345<\222\275\212\320t=\242\t\213\275\"\250>=m\006\214\274\027\000\006<W@\374\274\363&;<\327\370X<\323m\252=\263\306\033\274\265D\322\274\271\340\371<\024\272\007=Gx\035=u\'\023\275v\367\314<\327F\362<\340\361\023=8P\006=\271DX\2731\024\3019\347\253u\275\250\352\325\274\214c\037\275\255\021\322;\260\022{=\'\207\311<\263\346U\275\"\274`=\216\244\201\275\3071\303;\007\275\254<e\340\326\274\022\230\202=\346\220\310\274dR\367<c\300\260\274=\226\333\275*\2006=e&R=\317\361\265\274\336m\213\275\256\nv\274Lo\373\275\017\327o=\017\232\214\275e\323P=\027\275W=5\332\325\273\213F\306\273\324\244r\275\277\304|=\022\207\246=\rh\236\275+Y\201=\2201\351<\217#6=@\241\027=\'<\250=\324\000\336\274h\210\033\275\\\326\305;\006F\346<\010\242D\274\006\305\276\273%\212W<\326g\014<\375\014/\275\203\214\363<\272\351\t=\372\273\224\274\265\216\330<\332w~<j\332\032=\370\271\374\274Q\237\220\273\r\315O\275Xl)\275h\036\330\275\362\335\t\276\003\365-=\357\371\373\274\206Qz\274\300#\307\274\032\360v<A\345X;\353\'\253<b\313\036</\325\031\275\177\273K\275\242\304\373<^\340B<\016eO<\363 \214\273\376\017\214<\351R&<\033\305-\274\0161C\275i\327\236;.\025\321=\314/+=\361\247\242\274\211\r?<\354\277\032=\\\257\205\274\320\221\002\274P\016\301=\026N\332<\022\004\237<Up\357\274\331B\266\275\240b\213\274X`\304\2743\020\274<\364SC=\001\366\236<@\361\361\274\332\346\207<A\'\036\274&\240\322=i\035E<\267\014\346<\022),\274\252\021\n\275bF>=\242d\351;\364\355\336\275p\327\034\275\344\000C=\034\t\212\274\241k\264<Q\2213\275e\177\336;\017\016\326\274+fA<\232q\320<a\356\241=\203\201\367;\203E_\274\306&\313\275\3530\233\274\212\307W=\252g\024\275!T\331\274\035\'\222\274\354\361 <78T\273;q\237=\340\2102\275J\227\237<\250Zc=k\306\003=\032\376.\275\020\306:=!\337\010\275MY\255<\337\033\030\275\344\264a;T<*=!\003\035<u \232\275|\321a<\234\3762\275\207\270Z=!\036!8\232\003;;Y\347/=\355*\302<\035\205\347;j~\030=\245\010M\275\366\275\212\274\005\207\223\275\003\207\204;\267#O\274\257\326\360<\235I\n<\037x~;\243I\241<\3610\243\274\021`F=\355\244F=\204\016P=py\021\274\005\225\234<\342\341\334\2757P\211=\2615e=:++=6\355\370\275\214\014\006<F\221C=J\244\350<\331\272&=l\360\237<lY\306<\343\241\210=t=`\274\366\364Z=\344:w\274\210\212\216\271\3121\235;\371\n\240<\\\260\337;\336\007&={K\376\274&\274\270;{Ud\274V\334B\274C\203^\275G\223\304<{\007\245;R\032\317<\177}A<\374u\256\272F\376\250\275Qd!\275\250\254\035=\ru\310<\272\"\"=\377\317-=\347\361s\275.GN\274\277\201\300<\356\335\341<x\265*\275\256@i\274\250\263\227<\302g\217<\3274\221\275\327\030?=\344k\227\274A\346\000\274B/\362=\362=\256<\r\033\237\274?3\030<LV\020\274\002!\017\275\010Fb\275Wu\\=\202\032@<\270X =B&\314;\211\024W=r\346\301\275]\024\352\273\201\271:\275\032\255M<\360a\254<j\267:=S\252\310\275d\276\017=\322\016\200<\270\000w\275\253Rx=\002C\013\275(@\027;!\310\222<\322\321\025=\216<\272<\203\232\321\275\350\265\363\274W\324\231\273\256\017\230;K\3375\274\246GU<\351\n>=\235,\235<\243\223\352<\000\225\022\272\202ci=/[\364\275\223\345\300;_\254\003\275\311\354\263=\024Z\222\274%1\247\274\336\334\222;\023\331\010\275r\004\254\275?\375\361\274\3674b\275\212\222\207\274\350\026\024\274\2549\264\274\315m\030<\220\242\000\275\205\265\006=J`\345=\341\nK;\312B\022\271\2133\246<\345\255\025=\207\205&=\362I\001>\216\021\270\275(6\243\274\332x\312=U\334q\275\214},\275\206\362\326\270\244\353o;\270\372\327\274\334\366C=\317=[={<\207\273\222Q\313\273c\177\304\275l\237\226<\245r-<\230\304\216=\244\214?=\251\376\266\274\206\202\215\274^\302\232;0\206B\274\223\242\026=\270#\201\274z\004\350;#\236\332<\340C\202\274dG\026\275\320z\227\274\226\255j\275\203\304\307\273z\307\347:#\237\2339\032)\205\274\024\3314=\240Uc\275\351_T;\331\314\267<\325.\345<\253S\235<v\246$=\302\325\327\274Ndo=\201\277y=\245\336\245<\033\033\205\275qY\206<\3231?\275\272<\311\274\004\023\225\275\254b\233=\273\020v\274\376h\205<\301F =\361\022U\274\326\n8\274\336\353<=u\230]<)\t\\<\334h\001\275(\304\217<\302\334\207=-\0001\275{\033l\275[\237&=\274\340*=\320\371\"\275\002\230\344\2748\300\270<\334]\316\274\334\243%\275R\350m\275\345g\013=vI\010=f`\335\274\316\366<=MC\323\275\277.\006\272\324\241\237\274\275\t\324\275\276vS\275Z2\016\275G\267\334\274\344\234\n=9\251\252=F\253q\275\235\010\024\274\362\370\203\275e\362\"\275y\002\007\275\340w\342\272\345)<=\036\251\212=\334\274\361<\363\227_=X\352v<\033\323\'\274R\377\334<\\)~<\031\230$\275^\207\203\274rv\3559O\345\224\273\'\013\260\274.[\246<\346\224\323\274\355\356\312:\021?&=\024\022\327<mp]\275%\260\370;\'H\304<W\344\310< \035:\275\037\342\330\274\003\316\254\275Nx\365\273yP\022\275\025\351\244\274\0003\355\274\306B\346;\373\366\241\275)\215\223:\274\253\351\273Q|\376<m\363\216<\345\3337=L\352\333<\256\246\217=\335\365,\275\255\347\037\275\365\200\034\275\264x)=Ba3=\274B7=\t\344\370\274\337D/\275\212J}<7\312C=rZ\\=\256\206\037\275\253\234\216=\347z\302\275\021\326p=\241p\224=(\327\302=\347\273\310<H\304\243\273\247\224\351=s\242\202<\r\rM\275\345\263\331<\222yI\274\360n[\275\022p5\275\320lJ=\304m\364;\316\rk=\223&~<\335\367\t={n\202<+\n\202<\322.\031\274\036,E\2747\273E=\357\225\315\273\274os\273\230!Q=\353\331\321\273\005t\231\275\031\366\207=\014\237\233=\221\001\275\274!y\014=\305\251\r=\307\303\337<\251\312\007\275\024Bh\274\017\323#=z\360\242=\333\013S\275vJT<\234\2167\275\243\025\205\275\023\347\013\275m\302\337\275\270\372\304=\355\033V\273\226\202\021=\256\355\316<\252\023\202\275\016\320G<\266\337\211\275\005\233\263<:\371\264\274pC\225\275\250Y\253\274#\014\207\275\373\002\245\273\310\021\353;RL\311;\n$\006=\230\276\001\274\265\266\275\273CA\324;}Vu\273\334\314\023\273a\200\265;\263\202\"\274\342\225\350<fK\250\274\235\233O=*\354N\275\304\311=<\245S\341\275\273\027\217<\234\025\343\273I\217\346\267=\3466\275\206G8\274s\353<<\014\251B\274N\376\214=\3333\230\275\224\337\301\272x\n\227\2723y?\275s\240\222\274\363\211\222<.\202\201;\0039\221=0\272\r\275\035\337\277\274y3\201=\211<\202\275\247\377;<^F\303<=\246\235\275u\331%=r\223]\275\373\367\356<D\205\276\274q\305\010\275\224&z=\251\353\037:y6\004\274\024\362L\275\261>\025=\362]\333\270/\336\343\274\247\275\027;\311J\227<\014\374\252\274v\n\006\275\257F\214<\375\246\303\273\274\006\013\275\271\261M=~\340\344\275\224\230\037=4y\025\275\357\264\246;\021\004\232=\214e\005<\333m\363<\365\000\013=M\333\241=\254\372\241\274\322\322\364;\\\330\323\274m\204\\\273\022\027\343\274\246\375\024=t`\333<b\216\262=\204=\262\274\235s\t\275*\300V\274m\2527\2733\245V\2756\036\n=\257\024\222<\037\315\313;%\005\236\274rs\243\274{\'\304\274\177\364:\275\016\225D\272YS\242;\207 D=K\350\025\275km\225<\342xz\275\\=\365\273\235\232-=\201\240\267\273\360E\262\275\264\217\230\275\271\376\023<\177\007\202<\322\214\317=\202\201\377\274e\250\237<\371\0359\275-\332\001\274\rH\266;\351\\\327\274\256\343\010=Vh\3669\016\216\336<&\301\223\273\333\347\322;\231\330\034<Q\274\211=g\237\021=\276\335\025=1\313h<\301\260\037=\025\030\271<\261\361\217<\005\360Y\274\034)\022\275\240\026\214\275\243\251d\275T\241I=\252\256\213\275\361\374\331</\301\373\274N\234\262\275\204o\210=g\332\255\274\316\013\274\274\023W\215=\272A\264=\221M\277\274\006gp=H\376\275\275(w\325<\301I\240=!\331\200\275(5\254<\362\031z\2742\346\203\275\201]\214=W\224Q<]\014n\275\362\276\247=Z\300\204=\220-v\275\350\232d<N\351K=\354{]=\016i\177\275\306\365:\275\266\264\024=M\276-\275\212@\214\274\177\341\247\275`$+\275\321]\226=5x\301\275c\303\332\274\233*\337<\345\314\244\275\203.S<\234\275;=z\250\207\275\271\332\017\275\365\217+=\312\315\206\275\251\3434\2751\223W<\240j3<\215:\330<\034Q\026\274\014Q\256<.\3154=L\217\000=F\213\302\275\022sf\275\324\231\361<5\234L\275\276 f=\271\314\"<\246\340\342\274\302<Z<K\216\370<T\207\033\274Xk2\275\271v\234<\036\217\032\275\327U\002\275\312\r\223\274\013Y!=\0361E=r\244\275\274\247\233\214;\267\2749=\351\345I\275l\0012\275\305\236\235<\354c3\275\354P\214\274.0\242;j\261\220\274\177\177\365;=\353\201;bX\253;_<?\275v\3700<\323\206\234;2\3759\275\022n%=\251\351\364\273\312\361w\275\333\264<=.\254\217\274\324>p=\035;\313\270\351\337\005=\016A\254<\3503\030\275\365C\274=X\312Y=\243\n\377\274\267\332\370<\0067\t=\333\032N=\2428i\274y\310\232\275{f\314\275qE\025\275@\021\242\275$\200\314:\215\2109=Xa\315\274\206\2024\274<;\213\275\304 (\275\2721\352\273\224e\353<\014\240\212\275\344\007\240\275\002T\305=3\221\242\275Q\030\322\274\311\256\341<7\255{\275c\224\222\275\023f\276\275\261\2538=\257\211\031<\207\031\272<\356h\014\275\347\365\245\275\3120c=\033\236n;7\032\275<m\207\350<\302x\023=R\316\353\274g\302L=\213\005\311\274z\336;=\260\0272=\273\210[<.\021\035\273\305\034\017\275\264\352b=a\031\252<\311\204[=\370g\206<)k\205;\0132\216=\327}\236\275\3656\300\274\200M\226\274]fa\274\346\236J<\006\017\231\275\341\337\036=}\252\017\275\266LJ\275\254;V\273r\300\203\275\024\233<=\360Y\343\273\205\370o=\366M$=\353\330\223;Yg,\275\035\370\310\275D\370\200<\240\3446\275\263\346\263;\233Q\254\273\305\211\206\274\275\221\341\274*\205]=\002\365\201\2743\366\332\273~\277\235\274\007;2=\010z\241<\206\314\024=\262\3010=\031\233\020=g\322\024<2\010\212=\253\320d\274o \017\275\031~\033\275\376\341,=\nPV=\315~\001=\330\322t=\322\030\230\275p,{\275kIK\275\242+\337<i$\240\275\272\205\234\274\217\017j<\212\314\241<M\244\017>~\350\245\274\327\217\320<\237\362\367<q\327[=\007\362\234=`\243\314<8\225\247=vgD\275 6\222<\227\037p=\333I\017\274\323\362&\275\340\354\237\275\n\n\r\275l\010\233<f\030U\275\221\237\323</\356\312=\205X\\<S\226\273\271\026\317\223\275AL\271\274wC{=?\003\252<\332\303\033\275\343Pj\274y\367J\2758\307,<g\226\233<;Q\352;\240\277\252\274\243e\215\274\034\235\362\274\033\021#\274b\265Z=\364\032\236<\210\304\020=q\326*\274\0335\276;\254@x=\363\021\273:\t\336q\275\271<_\275!\003\211=I\010\227\272\302\377h\274\360Z,<3\243\257=\200\302\'\274\206\337\370\272U\261m;\344\201\221<\256\350\314<#\225\030\275\274\265C==\302\224\274\257;t<\215\316\217\274\302\213k\275O\376W;\002\201x\275\240\232\211\274)\3438\275b\214j=\211\202\207=\264y\000=\200\374\367\273\021\241\336<\023m\\\274\006\'N\274~\211\323\274\310}_=\204\335\206\275\256\033\240\275Z\010T\273\3469o=Y\361\226<\245\354\201\272\376\305\336\272\036qi<-\220B\275@;\013=}\242\264\275*0n\273\333\240\315<\346\203\207\274y\216\236<\262v\214\275 \330^=\321\2151=\237\247\333\27435\223\274KwA=x%D<\311\270\363\274\234\324\005=L\236\255\275\304\334A<p\000@\275M\226\225=\353\377\022\275\257Ro\274\2467\257\274\202f\302<\373Pz:\301\004\007\275\357oG<\316\\\202\275N\375\216<3\372\266\273P\236R\275N3\305\275Ao$=C\256\240\274\253\266_\274\030\375\367\272f\0347\273)\211\016==j1\275\330m\224\272\262=\332<1\3745\275Q\336\202\274^\311\275;\326\271\n<\345i\332\273{\271\032<la!\275\214\356\034\272o-J\274\3034\003=\276g\300\274\237@\301\275y\'\263\274\016\345\205<\n0\261=\304\'\306\274\006\315\333< s\323<\231\315\254;\344p\231\273\232Z1;)#J\275K\343\275<\333<\000=s\323\026=\n\017\211\274Op-=\325\'\323<\350\324\362<\254\216];\266\235\233\275M\360\267;}\026\330\275KIE=\312\371)<\224g\212\273Ap\023\274\210[\001=\233`\301\273\325b\313\275\244?\204<\343:P<.<Z; \2177=\017\316\202\275\215\301\240<\257V_\275\260c\266<\032\344\223;$\352]=qC\352\274s\365\022=\020]\251\270\'\201\026\274s\005\261;\333\267B\274B\017\037\275\003\'\366\271\303\336,=:.z\273\030\250\327\274<:x=\232\256\343<\227\215\232<@\035\245\275\204\251\316<\021\317\212;\221\312\242\273\021\354\275\274u\223\305\273\360\376\231=?\367\325<\322\373\305\273\352\254\365\275\272~\037\275\2741\240=\303\237\244\273\310\247\204\274q\"\001=\355\213\201\273g\236\025\275\376\023\221:\\\366l=\320\022\004\275\371g2;\350\3649\274f \010\274\353\371v=\355W\250<\005\313\027<q\207\246=\366G\371\274\252\217\254;\025\n\237=\332\t\206\274\274,m<\232\320,\273\324l\275\274\321\016\276<\377\227L=\337\246\332<a\211R\275ul-\274~\201\220<\301IQ=y\270\231=\000Dp\275\004$]\274$%5\274\255\nb=\223`\310\274\204<\272\274\244\332[\275\3049\001\2752\371E<:\t+<Z2D\275\377\367\275<N\036H\275\300\\\211\275\300j\207<\242i\234\275x<\244\274\214^\244:\243\302\375\275%u\251=M\034\030\274i\362\024\274j\237e\274a\034\271\275\354\035O\275\335\017\367<)\311\301\275}\303\033=\263nk=\241\022J=\376\342\270\273\3602\341\274\327\206 \275Z\251\250<\312\367\323<58\265< \360\370=\333sF<\314}U\275y\251\250;\350\363\224\275\276\351\305\274\024TL\275\016\017\210<\231\205\331\274\\\240\357\274G\360\213=\236H\261=\347\243\004\275N\222<\275\377x\231<L\232\340\274\352:\316\273\231X\245\274\001hO=^\037u\275\207\250\276\274\200\200\024;\326\234R<s\331\023<\203\346\375<W\261\177=\365\347\214<A/\277=6K):\376\256Q=hC\201\275F\254?\275\376\257s:\273\353\014\274\276\365\341;\020]\233=\244\215\021\275\377X=<y(Y=\007\242\277\275\212\261\331<\\\257\242=\004\022\224=<R\233=\2049\236=\266\037\200\275\220\216\'<\376\230H\275V\r\247\274\351\250\240\275\302\'\322<L\253%\275\277\262\331\274\200\362\336\274\230qT\275[ u<\177n(=\323\257\321\274\216\265\256\274\374\226\252\275i\007\254\272\027\226{\275\366\033\376\274-\005\031=C\317F\275cNf\275\023T!=\213\332T=t!\206<\335\350K\275\211/\177\275\366\354S\275m\t\235=`\252-\275\306\302P\275EI\020\275\'\370\276=5\344\352\274\"\214\312\274\267\316+<\276\024\316<q\036\t\275\212\032-<\225D\024\274\361\303\307=\007\210\333<\252\213}<\241\230\267<\031\221\371:E\007/=@\376\324;\r\247V<j\213S=\366\025\244;^\327\311\275\226S\307=\241\277\000\276\200\224W\273\347\223s\275\201C\320<\237\2048=y\224b<\031=)=\0022\212\274}U\265;\214\242(\275\220\244B=\340N\023\274\026\030s=-\210\307<vU\233\274\326\241\202=od\355<\232\365\022=\262\016\021\275\306v\276\274\2455\200\274\353\202\025\275+}\017=e\332\304\273\271m\240=0\313O<\202\023\233=\247\254H\274\270\242\010\275^`\305\274lZ\021=\256\005^;\331\344c<\034\206|\275t\267\00487\344\020=\242\224\313<|U\372<\263\034\204\275\310\363\226\272\312O~\274\257b\314;\346\257\347<\020\224\242=C\277\217;1s\217=F\252h={\237z\275\237\355{\273\242\325\200\274\371\214\340<\233\371?=\370\235\033=\315{\302<\304\0010\275J|6\274k\200S=\307(\234=(\376x\275\325$\007=:\266<\274\366a\010=\020\2241=\223\326U\274\032\254\214;\334vV\275}6w< M\306:\253\224\004=\363\024\021=\316\330\017\275a\003\237=oC\r=\332\036\300<>\r\354;8o\026=\324\\\272\275z\211\224<\001\267\t\275\346b\203=M\205\270<\026\024\211\275<j~<\224\302\271<a\266\025\275kk\273\274\352\271m\274\224\030\270=\200x^\275\362\230\250\274\332\327\020=\213F\000\275\331\267;\275\231\210\006=H\345\313\274\315\203\016\275\013s\227=\201\032W\274(\277\236\275?h\264\274\n\313h\274\022E_=\006\242\231=\037\205\212\275\3317\211=\353\035\023=+1\321<\365y\202\275[\r\"=\251t\014\275z\000\223\275=\324\211<\336\013\037=\226\241\341\274\2035U\273\210\321\305<\360\010\003=\270\332::\014\311\241=H\310\022\275\342\203\363\265<\233K\275M\233)=fw\252;\320b~\275\270\371\237=\307\321\214\274\210\302\230=$Q\356\273\231\316~=\037\344\024\275\035\372\370\274$\nk=\226\363\246\274\211\2319;\000(g;\315\2077=G\321u\274&\235\373<\305\272}\275\223\275\337;\345\263\r\275p7\341<<3\265\275\205a\030\275%2\230\274\361\305\r\275}I\274\275\352ed=RBY\273e\326\372\274\n\213w\273\213,\036\275\310R\335\274\2231\263;\235\306F<t\355@=\0261=;\212\034\002\275)\317\001\275fd\313\274\371\t9\275\004\214\025=G\035<=e\"U=j\371\226\275c\031o\2733^\346\274\304\207\270:j\212\263=8e\244\275I\366\231<u\332\246\2724n\363\273\225H\314= \305#\275BHo<&\206\035\275\253\367j\274\242\217L\275\266\234\017\275\203\344\315\275\377\317d\275(]\343<\256\353\210<\221y\250\275\021\1772\275xA\315\274\020dl\275\376c)\2751M[=\360\006z=\231z\213=4B_<\313\013\254<(\366H\275&\037V=\207\010$=7\217\236\275\'P\203\274\324\027\241<f\210-\275\037x\325\274\003\371\305\275\225\337\021\275B\230\247\275<M\262;\313l\273<%\036\010\273\256\340\247<A\213w\274^^C\275\315e%<\273\020E\275\203y\201=\377\000S=\353!\024=\325O\207<K:\n\275$\312\226;\017\322\013\2756\347\032\275\273q)\275\343n\036=6\244b<\262\2733\275f\245}\274\343\031\374\273\020\365\021=\272\203\307\275\\\241\324:\265\271\317\274b\304\035\274Y\343\274\274\275\367e\274\304\2151=\314\250\000=\037c\006;\357\266*\275\300$\210\275\230\205n=\025\220\r\275\226\372\350\274e\202\313<\307\006&<1\257\236\275$\243\203=\376]\022\2755\371\210\275\354\005\267;2\243\016=\335\023c\275\276\335\243\275;\242\252\273\271\254\220=OF\311\275\370\361\336<{\351\022\274Nq\227=\241\257\317\274sY\013<\224\323\257<\363}\206\273\013\320\357<\315\315\031<8\177\232\274\341&\001\275I\250X\274\3710\262\273\353\323\337\274G\020\032=W\375\025\273\245\2427=j\010\031<&cP\274]m\352<\031AK\275\372E\363<\210t\201<\026\247|\273\305[\227\275W\312\265\272\270\315\361\274l\202+<\372\224\346<\304?T=kK/\275\to\004\275\303 \235\273\004\241~\274\244\252\270;0\253~<\356\343`\275\036\207\246\274\021+V\274\354\'M\275\264\203\317\273J\206\315<\205\014(=79\361<B\267\263=)FU=\207\322\325<@\270\353\274\265\320v=G\373T<9\325M\275\375\316\261=.\246.\275\275+\"\275\025\327\027\275\350v\375<\306\267\253<\377\007\200<u\321\226\275V\263\221\274\252\026\304\274\3346\032\275\331\355C\275\233s\200=\247\206\370<K\001\325\275\273\265!\273\367X7\274\267\014\304<\261\007\277\274\220-C\272o\341==\002\265\346;\221\022\252<d\003}\275%5\236<<\223\257<(\345S<4G\312\27461\326<6\257\032\275S_\322:\366\377h=]\300\236=\037\353[<\254\021\221\275\332BI\275:\362\221<.EA=\323\301\214\273\326<<<\221Z}<\205\224\234\275\267\001\001=5\016\222<\033\255\340:\034#h=\223\311u\275\030y\241\274\232\306\000\271\366\025F<6c\266<\210\301L=\016\215n=\257u\256\275\007\315\023\275\364\t\207=\211&=<\360\335\353\274\013\022\222;\310+\334;\340_*=\275\263\035={i\305\273\035A\226\275!\223\230=\340\270<=\332\375\000<\242\355\320<\245*\357<\220.o;a\315`<\326\332\201<\306M#<\rO\215<\310]\254\271\3161\211<\203d\377\273\332\276\347\274\311R>\275%}\361<\3311\217\275r\031\022\275\000\014:;t\rd\273\263R\246\2723^C<$/\302\274f\302\034\275\017y\203\274\r\334&=\003\365x=z \336<k\277\201<\020{\001\275\274\311\233=c\330\300=\375\354=<\262\370\226<\262Fp<\327\375?=\377\002\236=\206\340<=i\3639\274G\212\025;\366T\211\273\036.j\275\340\364\265\275\313A\221\274f\241\355\274\236W\223<V\315\244<\264\260.<\356\006\221<OS\245\274$\265\254\275\023A\240\274\370\t\253\273\334Ke\275F\337F\275\275\346]</\364\342\274\016\251\225\272x\315M\274)$\212\275\027\275\205<\264\353g=\243\022\216\275W\215\267\275\245R\276\275\233\272A<\371|-\275aj\350\272V\030k=\021\207%\272A\321\267<\023\244\314\274\rf\277;\330\270,\274\217\r#\2741\333\311\275\250\022\335:\003<\261\274\3335\240\274\371p\322<c\322\206\274\213\002\275<\217\277\005=\006S^\275`39=\235h\307<\001\275\307\274i\262\260\274\336u\211\275\355\365*=\rG\361;\311\363\226\272\017k+=:\243t\275\273\304\007=\214*u=\352_\276;P\225\227=\317\177\271<\276|\222\275\'\363\256\275\307\213\252\274}\306\"<\244\240%:\001\245\303\274\3339%\275K+-<\351\2549<e\342M\275\225\217\273:\200_d\275BL\344=\353\031\310\272\017t\323<\"=\n\273G\223}\274\310|\243\275 \030\033=\240\323\267=\337.\014\2754\204\027\275>\203&\275\375\023\037\275\222\244\201\273\020\235\230<\372o\032>@\000\r\273\n\361\225=\237.8;?41\274 \330\203\275(\320\203=\'\310\363\274&\273\017<k}\334<\354.\031\275\253go<yCN\275X\344\006=g.6=\026\230\352\273?\333\033<88\262<6Q\326<C{~\274\327?\t\275\360\004\227\275\205\276O\274\273+\034=\216\353\233=\264*\265<\340\004T=\222\227\004=\354/.\274\266Z\250=\275\211\364<\247\302\225\274\237\331\347\274\204\352\262=\335S\360\274\241\357\373<\217\2756\275\234\337\317;\374\313\014=\221\331\3219\311\357\330:\245B\201<f\226\375;\334\220A<B7\207\274_\206\255<o?N\274e}=\275}4\027\275\373^\326\2749\200\277<J\345\312<\350\263N\274;\027\213<NI\033=\235\371\215=|\021U\274\261e0\272\242\020C\274=\371(=\277q)\274\366s\323\274\347&\356\273\005\333\024<w\212]\275tb\251=[\200\212=x}@\274\353\221g\274\304\365P\275\233\3071\275\027\252\234:\232\273\337\275.\256\260=I\362I<\205\207\330;\215,G<\331\250S\275\004\216\177\274r\243\323\272\341}\204<2\233\217=lDm<U4*\272\347\023\t\275vN\222\275\307f\013\274@?\306<\254\255-=\206Z\212<i\305U\274\343\351\326<\262_&\275\333m\324=\3354`<K\240\373\274\320\2777<\\\362@\275\3358\275\275y\343\205=\375\010\222\274h\253\014\275\314\363\224\275\316\361\276\275\031\261\222\274<\202,\274p7\202\273S\255i\275\364\302b=W\237\270<\253\317\277\275\376@\324=\316\265\260\275t\177&\275\014\rS=\372\264:=u[\332\274\205\252\026=q\217\213=\256P5=e\262\220\274\343\000E<\\\221\274<\367}(\275d\373\267\275b\355\371<\352\273\244\274\263y\352\273\211\354\275<vj*=|\243\210\273\224@\275=U\246\246\274\256\244<\275\246\275\3579\3474\023\275\250a\003<dR5\274dex\275\256\255\320<\203t\370<\205E?=^\360\266<\347I\275<)\'\314<8\203\234\274]\317\001\275\034\003*=\021\221\273\275V\242\265\274UN\022<\215F)\275t\033t\275\211J\226=\335\2216\275lw\327<\371\245\357\274{\207\243\273\237\376\343\274\022q\206\275\r5\264\275\340\202\000=\325\007\203\272\030\252M\275>\240 \2761\t\353:\227q&<\225c\215\275\023\241\202=\352\244\026=\202\316b=G\017\005=D\302\272\274\'{0<\362\354\216\274q\277\260\274\322CN=(\263\031\275\243=\246\274A\356 =)\252[=,\301J;\251g\r=\342\357\017=\213\205.=R\244\260\274d\333\375<H\273\235<\307\260_\275qw\034\275h|\214\275\360\303\201\274\311[R<HH\325\274\262a\331\2731\314#=\352\030\263=\266\210\327=\022\221x=*\364\227\275\203\210\231\275\255g\211\274\343\007\033\275\311\343|\275\254&\240\273\027\310\254\275D\303\331\2750\037\203<\177H\233=\325\373\306=\305F\035=\217]\206\275\t\tt=\003\357\207=\320\376\210<yyf=\312\363\232<sY\205\275\251\256\037;\273\312(\275Z6|<&\006\026=\024\252\354\274\001\362z\27300]=\036\254\251=\325Y\007=\361\354\266\274e\325\264=wuo=\376\275\226<~\016\313=O\367\236;\020\017\030<s\202\303<\021\352r\275Ow\t;\n|i<\230\340\260\273\014{\235=\365\302\241=\304j/=+@\035=42)=\216FG\275TU\325<As\334\274*J@\273\225\331\370;} \034=\221\354\016;\262\307T<%5\351<\355\013b<\"\277\307\275\037\212\030\275B\256\315<\362\027C=\356\224>=!\347\315\273\243K\205=\017\251|\273\302J\304\274~\344\365<\021)\036\275s\016\200\274\350\207\275\271\347\010\273\275\241\016\370=j\245\353<\003*\005>\252\347\217\275\252F9\272Q\372\213\271X\364\302\275\232I^\273\007\213\201;l|\335<\366\353q<\n&\301<\204g\033\275z\245\375\275\033k\021=\232S<\2744\016l<qO\320\273s^g\275\273\357\353\274K\031\222<z\254Z\275\322Y\332<\351\006\216<+\246\253\274\221a;=\350>A<\306.4;\256\007\005=\367\231]=\203$\201\275:\303\014\275\374\345\337<c\037k;\2254\027\273\2415\203<P\360\257=\027C\217<\272\313\231<f\202L\275g\327\204<,\313\300=\251X\226=\220/\273\274\\$<=\206\322/=\2070`\272\317#H=\317\250Y;\3532\355\275\317\320\372\2740X$:\364\260\236\272u\332\346\275\022\037\313;\375\267\341\273\234\031\007\275\314\022\247\275*\375\230;\007\321\\=\263\235\360\2739\347*\275\234\341\351<UV\030<\224C\300\274\253\324\251\2731\255$<\252\006\263\275\\W\210\275\3571j=\312\351]\275\r\207.<MWy\275ebr=k\007\200\274\264%\022<[\203\217<\020\226\001<l\313\002\275\371\254\014\275yzZ=\236_\212\274TJk\272\305\257\375<\240\232=\274xt\215\271\267e\373\273F\273 =\033.\247;\001\311>=\341\003\363\274\345:P\275`?i\273\273.N<r\226\222\275\ne\275\274+\304\\=1\255i\273\364\340\343<1r`=\267I6\274a\035\201<\354\206\204<\321H7<\024Y\201\275\313\032\217<\236\261F\274\017G\021=\006\370\222\275E\273\032<p1\340<\236<\242=\337\270\305\275\202.+\274\315\262m\274FGe<\323{\247;\220\356\376\274\236\226\230\274\02386<\003\374\260<\317\222L;\\\267\305<\322\027\210<\217M\264\274 \275\t=\r\000-\275\324\227\341\274\'\346l<\\C\330<\305\250\007\275\314\'\266\275\314\265\223=\023\220[\274\205L\214<\030\177\253=.\tj=q\335\203<J\n\036=]\344\034<\312n\257<\355\256\014<\020u\t\274\032\204\364<(]\357\274\210b\003\274\244\2009\275\246\275\016\275\263\344i=\341:\247<\346\014\240\274<\247\007=Z\310\212\275\202\300S\274\227~@=qLE\275v\200\240<6\232\275<>7\317\2744\311\274=in5=W\021\240<K\25009\031>Z;\\\226\237\275\254E\352\274\327\310\360\274J\217R\275\205\311\207\275\320f\030=\236\244p\275j\351d=\256\365b\274rL\343:\315\360\267\274F\"R:y5\025\275@H\230<\243\213\214=\2502\251\275\nU\211=0\262\237\273(#m\273h\032\217<\246sT<\322\207y\275\341\303D\275\365df<\314\312)\275\265e\345\274T\3430\275f\275\352\274y\034\240:\264\3733\275\314D\021\275\265r\220\275\241\342\347\274s\315|<\213K\255\275ti\326\27504\266<\013\303V\275Z\t\r\275\2029\302<(J\351\274-It\274\247\237\030\275\272\354\261<KrW\274\277V<= \006\261=5\373\215\275\232\0010\273\026\304\034=\261M\327\273\340\370\020<\337\273\227=\014U\n\275Y\021\026=\2124g\275ou\344;\365a\202<\361\025\224<\313\001\003\275JQ^\275s\370`\274|:\226:.(+\275\n\3062\275DGJ\275\000\362\230\275\247\316\212;\341\225\024=O\222\227<\270n\313\274PP\345\274\203\226A\275\023\324\234\275\303\332\032=zN(;9\217A=\247\350\276=\ri\325\274\203\371\360<]\315\276\272Y\217J=\224n\207\274F\337\203<\036F\253;\023\347\037=\272\352b\274\216\341<<\274\002\337<\307\370M\274i\330I\275m9\266=c\320\264<\034^e<\302\262n\274H\030\272<\3056T\275\305\2629=k\201\222=\305\252==\033f\225=\207\221\\<=\347\307\274\253\352\\\275\014(\324\274\037X\221<n+\027\274\014\245\020\273\373J\020<\350\000l\275R\326\230\274\233\034\373;!\301c=\025\n<\274M\341\202\274\244d\330=\025\034P=\001\247R\275\234\211\210\274yv\213=Uw\020\276\327\324\n=\362Y\004\2737\356Q<\353\304\255\275\2512\274<3\322\032=W\016S\275\025K\024\2750D\220=\2716a\275\307\245\340\274Lp\000\275\273\362\026=\t\336\005\274\267Oa\275\242x9=\227c\250\274\364\271\202\27534\310<\210\000]\275\236\271\310\273s+2\274\357l\311\273\322\276X<{/\252<\365\"\245\274\363\277\217\274\014\376\010<\240 \247=)\007\017\275\t\367\303\273\374\233\201<\324\255n=\311\360\020\275\270\320\226=~\024\301\274\260\002\255\274BTA\275\275\377{:ZR(\273\3058+\275\301\354\031\272\370&\242\274\232\250Q\275\007\372\211\275\n\207\020\275sgX=\233j-<\224\017\250=9\365\323;\266\177\366\274\365\014\243<\237\225\275;\322\036\253\273\206\202\013={o\365\272\013G\022=(n\220\274`\332\002=\262\n\317\274\211\026C=\252\246R\2740\010\216=e\"\311=\010\000z\274<\345&=,\242\311<\021\271C=1\221\231<\227\355O\273\332\253T:\256\340\230<\222^j\275u\303\353\273\222\343S=i\326\013=\205\274\021\275\177@\300\274a\034\261\275\260T\240\274\0303\001\275\305\272s\275\321\031\275\275\237\305\224\275\347\033\201\274RL\341\273\260\275\230=H_]=>\\1<o\007)=\347\302+\275\356F\034\275\313\024\223\274\271\311\306=\241\317\224;\272\205\216=\370P\324;\270`\226\275\030\2439\275\265\t\260\275\250\265\'=\261\177\233\275\245}\266=l\277\217\274\351\233\207=\377\350\305\271\267\2439<\003\270\355<\204(\246<\341\222\021\275D\370\210\275\266\375\214\275\256\304+=em?\275a\365L<\207\322P\275Ir\317\274;\341\266\273\231@\263;\247\0077=\177d\264\272\261\223h\274\334\330\021=$9\216<\363\231\264<\177\240\224\273\236\267v\275\307\312\353\274\317\344F\275DK\205=\017\335\213<\300\203C\274\216\266\315\275\207\226*=$,\210=\244\217\300<\277\'\035\275\316\366V;\200\263\234:\227m\363\274^\314\210\275\220u\027\2746\244d\273\254\326\230\271}4a\275\243H\367<\231\374\231\274]\336\363\275\352\034\211\275Y\245\257\275\205\273\202=~\314\233\275\366\355\241\275\016\233{\275\355Ch\275\007\320\337;\234\370\306:\222o\"\274\206\252\325\274Ove\275\335/g\275\272m\326\274\234\357\"<\027k\276\273\007\372\\;\365u\203\275\377\261M=)\360\203\275\317\031\225=\022\027.=\214\033\242<\272\246\311\273\024\341f<\243pP\274d\220\021\275\376{\202\275\013 \024=\343\267\000\275\010\240\215\275\270\305\314\274\261\256\007\274Bf\220=>\377\\=\267\021N\2759\354\263\275\300\212;\274?+\021\275\327\252\217\274;I\016\273\002|\000;<\034d=w|\020;\006ZS=\247\016\021\275\330\352\232\274L\270S\274\323\313\245<\221$d=\356\370\260\274<T\265=\177e\217<t\"\203\275\230\306\366<\357OT=\017O\022<\264\272\206\275\224\346a\274\031\353\335\274\210\0235;0\2652\275A\226\230<j\034\003\274\210NM=\361J(\275\302\216\333<\324\334\234;I\277Q=}\342,;\271\021\376\274/\237!=x\236\376<\341\316\273\275\324?\002\275\207\332 =\003K\241\274$\213\372<\255\360Z\273\003\351|\272\025\235\235\275\214C\365<\204Z{\275\266\004\032=\225\247\\\275r\227\365;-Q\305\274\0028r\274H\372\006=\206\353\"<\\\035:=\324\325\013\275W\355\320<\221R\230\274\224\343Z\274~\377\312=^\372\207<>\265:\274\312\257E\273,\242D\274\363\241\362<\262\333\337\275\027\031\375\275M^7=\367\260{\274@\200\300\274\320\330\353\274\273zI=3#\212\274\370\343\354\273#\375m\273ed\361\274\216\204\033=\327\365\260\274`=\003\275\271T\350\274b\202\233<\243kD<3\367\177<L#>=G\0040=$\276\270\275D\365\207\275\265\0005=A\303!\274\254\322\031\274\356\350r\275\3529\206\2752\t\215\271\365W\221;\326y\021<\335\306=\274F\300\254<\242\300\364\274\351|\212=\235\351\250;F\317\325\274y\216/\274\2758*\273_\024J<\270\020\222\275[\245X<wl\177=\006\3202<\325\236\203\275\026s\267\272}\356\207<!\'A=\014\237\307=\001\003/\275\026\262\350\273\367\327f\272\275\345\267\274\223;\231\2743e\020\275;\003\311;o\234V\275\030\213l<\225\236\211\275+U\247\273y\3752\275\020\"\036;\3211~\275\271\277\362\274w\214\t\276\254$\000=\334\303\005=t\021\247<\351\252\255:\034(~\274\245~(=\264\r~\274*Bh=\351t\252:\245\324\272\274\215\366\314\273\331\021\317<[\216L\275\\\204\325<\326\020\201=\213+\002\275\263P?\275\327<\267\2742t3<\216\303\322\274\025>\360;i#\262<\216_=\275\332\264\017= 3g\275a\035\007\275^\343,\275\353\252%\275\315\232J=\247\017E=\207m\217\274\237\215\016=9\2559;\002/\265\274\n\365\376<\215\314\262<\215\361:\2748\325\207=\330\253\251\274\343i\003\274]\375\t=\023 S=#\207\231<x\270\202=~\364\035\275\326\222g=E~/\274o\302\353\274\341\245>\275\034\262\327=\275\264\r={\256\310<\212\240\250\274\214\2152\271\317`s=\272\033\265<\276\351\024<\302\316\252\274E6\002\275\306\236K<\311\220\357<T\350\020\274\224\007\235<\321+\273<=\222\207<\247\373\205=\332\237\016=\254u\212\275=\213\227<Q\320f\2746\376\360:\341\312\002>\374g\003=`\254\325\272P\346\242\273J<\223:#!*;\014#\n=\216\363\232;}\3126\275\372t\002=\317\256\357\273u,T\273\216\242\254\275i{0\274\343\216k=\251\230\030\274u8\221\274\232\344X\275k\265,\274Pz\330\274Lv\006\275\303\310H\275\347\222\227\2755\233K\274\2708\264\274\227r\342\275%\217\t\275\217M\332\275\243\037\005\275u\355b<_\306\275\273\363\014\203;nc8=\275\223S<.|\246;\334V\266\274\017\207\315<T\366\214<\327\310\276\275Sg\265\274\261\236L=C\333\217\274h\202`\275B\233\352\274\r1\336\274\264\201&<{_\032=\215{\327\274\264\251\004\275H\234\327\275r[\212<\351cJ=p\200x\273\325;\210=\372\360\242=\307\361b=+\'Y\275\370r*\275\205&3\272j$\352;d\234\302<\243M\301\275\3503\035=>$\240\275k\315L=\234\004G\275\216\314\234\274\354%\024=\360\016\211=\364\001\242\275\215\265\213\274\214HQ\274cG\275=Yi\034\275C\274\207=x\001{\275\343\004Q\275UK\021\274\3755\223\273\325\030\005=\037(\310\273K\243\204\275\177\264\223\274H\213)\275\376\214*\275\241!\003=\340\000\376\274\320\027\251<D\300\013\274D\206h=\242\276F\274\330\2158\273\034\211\304<Tjj\275\224\033\362\274z!\002=\243s\335\270\243@\372\273]j\366<\201\350\376<\254\3418=\355\202\317=\245\316\210\274\374\327\213\275\034\247X\275m\n%\275$DX=yT\340\275\236\246j=\257\0149\275\034\335L=\204a\274<T\014u\274\325\365\300\274\247\205==\352=\274<aJ\257<+QT\275\027\232Y\275\260\353w\274\306\235\246\273\276{\233\274\212\177S\275Hp\247<\017\345_\275OJr\274K\345\000\275%5=\275\274k\363\274_\211)\274\371<>\274\235)\'\274\216\006\214<X\327V<k|\004=\343h\214=\245\3040\275\020O1<\235}\340;\316\350\004\275\212m\346\273\300\205v\275\016\272b\274\237?\\=\313c\340<\245\242 =d/u\275\025\211\033=\212\201\332:)\311\t<\376\206\325\275\024\232\245\274\232\277\024<V\237\245\274]\225\371\274\315<Z\275)\030\207=\207a\321=\004\356\255\275\234\260~\275y\212x\275\230\272\264=se\016\274g\355\242=9\312\301;>2\266;h\n\256<\253\023\027\273D[e\275\005\374\206;TO)=\t\356%\275\366\252d\275cCb=\253\247\264\274GT\326;\227\010\301<\240\263\004=\263\nb\275\365\361\351\274\240u\200=\233\007\347\274\265G\267\273\202\017\225\275?\006|=\t\303\234\273\014\325\252<\366\'\353<U\231\265<\001\241\250\275\317\335(\273+\230\217\274\256\211l=\245\3638; \277\334<\204\374$\275y\"p<5,\305\274+K\032\2759K\272\273y\002\246\275\351@\213<\347`0=\362A\356\274\022b\340:[\271\275=\'\260\324\274\253{3=\240nq\275a\020\200<(\331f=\317\033\367\274UL\254\275\275\250\267\274\371\317\007\275\245^\307;\204\026f\275h\367\215=5\312\347\275\272\205\336\272*sF<yp\325\274\335\021(=(\020L= \321\364\274\213\214f\274\032\344l\274\265#I=\n\177~\275\357\370f\273SD\025\275\006w\350\275\316t\230\2730\016<<\205m\025<\215\337d\275z\222i\275\213\310\314<;a\267\274\005Q[=La\207\275^\353\006\276\255W\003\275*\335]=B\322.=@q\014\275\2640\030;\274\354\332=\202\202+\274\256h&\275\372k\341<\343\tG<P\243\247=\350m\302=\304\3316;\300\036T<\3400\321=?\311\022\275\315\307!9S\2435=+;\247;\035\264\303\274\340o\214;\346f\270=m\301d\274\250p$<\352%\205\275\333O\203<\357+#\275q\033\214=\206\270W<\321P7\274\r\n\027=\257\004\004\275\247\226B\275\370\377\302=!|\200\275\307di==\275\017\274\213Y\325<\262\214\327<P\276\022=\032\005\217;\242\317\213\274\370|\240\274\353\001\343\274\013\027\035\274@\344\364\274 #\207=\302\277\024<EO\207\275\023\372\r\274\013\3234\275\230\025\316\274R@p=\263@U=`W\261<\271\230H=\010I\200\275bH>=Wy\203\275C\206Y\275\254/C\275b\340\274;\341,:\275\030\026\203\275:_\200=\034M\306\273\253r.\273w\246S<\313\2521\275\367di\275E\235n\275\265\371\244\274E\322\260<=t\224<\"\343\220\275B\257\007\275[\002M=<cy=*\2368=\343Y\366\274T\213&=\376\276<\274\305\341M;R\214\361\272\317\357\n\275Q\003\374<\036d \275\223:\250\275\022\230u=\327!\031=\206\304\t=\312\231J\275\216\200\220\271j\356\231\274\370\026<<o\270\003\275sA\240\275\351 \232\273\256\220\026=\264\245\021<\250(*=\272\037\263:&\010\373\274H\301t<\262\010\345\274\200~\247\274$\261\325=\200R6=\353<a=\326/%<\017\376P\275\2309\343=\267\002\230\275\367\214t\275\250\235\304\274\264\201\024\275uRI\274\303\370.<I`\206\274\014\005\363<\344\3765\275\341\311m<\256\020\375\274\326\204\246;\372\276\266\275;\033\004<\375\372 <\035\261\216=A\247\272\275\037%N\275\364\016\331\274\346\017\317\2743\016\234<\225\375\377<]\025\273=!\233\245<2\204\210=\273$\230\272\255\301\216=\331e\235;\000\220\257\274\306E\010\274\234F\245\275\361\301\224\273\305\352\214\275\0264\227=\023A\247\274\360-\232=SL;=\276\036\320<\252`\302<<\225\345<6\3531\275\320\304\023\275\300*\222\274\222\243\000=\357Vi=2*\251<\374A\257<\325\243\226\275\210\220\221\274\270\006\t\274A\327i=9\"W=\234\342\324\274ju\213\275|\310\250:\212Z|\275X\267\277<E\3378\275\347\001=\275\352\345b=\377\213\200\274_9\245=\367\312\225\275\272S6;\227\271_< \313\312=\203\212\201=r\206\226\274\373-1=/l \275\013L3=\235L\0009\370\311\002=6\0161=\301\331\027\275\004\001A<\217\026\301\274\225\227\371;\333\022!=\335\032\323;\350\373\r\275\1777\213\274\353\013\361\273\307\317(<\212#k<\225\265\206=P\021\346<.\001Y;eH\n\274+\264j\273\037\275\227<\356\302D=\230\320\252<,\3133\273\007\330\210<\375\202\345\274%\374\242=m\276 \274d\216\303\274\371\262\217\275\301\026\265<\260~\023\273\3736%\275\324~\342<\236B$\2754gF\272G\320\006\273\350\303\311\274\261\310\343\274\031\262\000\275\243\035\362\273\310\321\357;[\204\r;E\226\n=2\245\354:\032\350\274<\216\304\214\274\277\177U=\247%\302\273]<\230<S\275\237\272\235\315\226=Aq\362\274\263\362\006=\230\220O;\351#\347\274\000\205\247\274*A\354\274B\2276\275z\225\215=\355\2731\275X\377w=l\\3\2759\276\356<\254jx<[1\253\273\320\222\026=\347\301<=\025\231\237<e;\020\275\024}\316\274$%\242\274R \017>\260^\017<d\035\300<}M,\274 P\027=\004\233\265\274)O\270\273RG\230\274X\345Q\275<\213\241\275\310j$\274\031\020H\275\222\277H=\323v\316\272\315\270\353\274\345V)\275\250J\004;\027\350/\275*0C=\250\241\003=B\315C=\353\204\226\274\031 \001\275?\323N;|\353,\274\341\264\350\274]A\021<S)\005\274\310\3028\274\344\360I=\220f\017\275\350\220\314\273\225\307\240\274\223\346\254\2745$5\274\242\031\303\274\224\214C<\224\310\250\274\356\313f\275\246_\216\274^Z\031\275!\234\252\273U\360\254\274\327-\327\274\355\t\234\275\262\006==\313\365\206\274\344\325e\2745\240\215\275i\313k\275\223\264\023<\354\335\033>>F\315<\003\330i\275q\206+\275\322\241\240<\223\340\371\275@\002.\275\023\373\270<\222\203\215\275+\347J<\240\342\324\274\260TJ\2745\007E\275\036\265%\275\254I\221\274*;\244=\247L\026;\261\377\317\275\34593\275N\271\240<\022\252J\274\026\277\024==Z\"=\224%q=\256\275\206=\241\016\n\275He\217\274\020T\030\274\222\206\264<\275\326\025\274Y\236\231\275\325~\242:\301c\221\275\0034<\274m\234(<\023%6<\337\225R\274j#\352;q\036\231\275p\026\221\274\326\214\236\275\3226\226\274\001\354G<\342>\364<\036?~\275\3243#<#\242\222<!\222\035\275?\213\035=\246Fy<.b\237=\323\036\023=z\200\201\274i\255N=\237\272\r\275\246\316\255\274\305\344\034= ti<~\265\370\273\265V\227\274\025\225\260\275Qu\340=KX\n=\370{\211;\215\255g<\323[>=\204\277\356<#\227`;`\244\323\273\177\365\227\273SZQ>\323j;\274\236\213f\275-g\272<qY#=W-x\275\374\027\025\275\254\350\375\275\206U\304\2747\275\365;\260\000\201\273\224\001\214=\177\223\233\2748 l=%\330S\274\200\020{\273Y/\237:\336!\177\275V\322\206=7\267\017;\216J\036\276\210\254P\275o\357^<(\267\203<:I\'\275\221=\312\273\215C\244\274|\177\n\275\324\t:\275\253=v=t\326I\273\204D\003\275\037a;\275\255\247\201\275^G@\275L\304\335=\216/\342<,A\245\275wM\035\275\205\372+=\371U\234=a\245\004\275(\276\252<C\363\025\275\025\002B\274\311\372`\273\353\252\003<\311\022G=\326\026\261\274\035i\235\273Q\345\374=\262\340\251\274\203\350\207\275l\306\316<O\232>\274+{\275=/\270c=m\215\222<\214\357\254\275\353o\300=\367\302\371\274\350 _\274\370_\216\274j\302\021\275\316n\265<Z\242l\273\327B\245<>\001\311\274\272\267V\274\254u\021\275m-\321\275\016\356\346\2730\372\024=,\022\250\274\246P\316\275=\032k\274gq\236<\"Z\r=n%0=d\253\024=\224\261\261;\247\214\356\274\344\004\033=\322\274\324<t\373;=}\326\212\274\244$\334\274\207\231\337\274\204\342\030=\"+\267\274\265F\235<a\327w<-P}:&\222\264\274\232\036\202\275\001\312s=\352\026e\274\357yD\273\2369$\275\373(\207\272\3513g\275I\2107\275&oo=\264\336\247\274_\363\252=\216\177?<\252\224~<\251\347\304<W5\227=\345\\\177<\355C\261<,\307\320\275\316\312t<a\202\376<^\273L\275\311\026&\275\233\332\357<[\035@:<r\347\274\304\306\271\2755\244\337<no\204=\331\271\351<\344J\221;\323\245\037=&\243\007\274ob9\275\310\245\204\275\t\225\222\2748\255\221=\262Q\225<\250,<\275\036/W=\203Qp=\252\005\273\274n81=\360\352 \274\365u\272\275vb\034\275j\024b=\370tM\274\217\033|\274\005\312)\275\266q\345\274\364\330\177\273\221\361S\275\306]8\275\3265\236<w\254\235<z<p\275\353\037\t=\266\271h=\2044\204\272\331\222I\275\210\214#\274\312\337\370\274>\2508\2756\311\241\275w\377\315\273\243\313\225\275\271\255I\274\361K\\\274\251\217\260\274\365\367>\274\024\333?\274\306\223\305\274a\020\217\273\036u\010\275\231\326\303;a\377\341;\3710D=i\005\224=\314\252\260\273\307\364\260\274\341\235>9[\332\211\273\325\255\002\274\326\250\351;c]\236=\031\257\306; ?\004\275\202,p;mC/\275]\330a=\337\311\270\274C\243\347\273]\010\222\275e\310\354\274\273\202\276\275\301\210\253<\213HD\275\350\225A\273\026\007\341<\003\223D<\262\220\243<d5N=\026uK\275;R\330:@\257>\275\n\256\017\275e\013Z=\360u\332<\010-^=\242\242h=\334\325Z\275\265\326*\275\003\202\264\274\330\224r\272\021E\202\273\251\204f<9\345\356<8\272\007=\211Zo\275\022\345\214<\025a\3019\377W\256\274D\246Y\2758\307\266<\300\340\"\275l}\350\274P\371\315\274\325@\375\274|\0361\273\'\320\247=\035P\222\275\3671]\275W\210\036=\254\331\330<;\375X=\014D\205;\007\363)=n\231_\275\304\377\205=@T\024=\225\270\274<j\007\254\274\365)6\275\236P\023=\300\356\212\274\316\245P;\0055\020:\3676\204\275\035\227\204\275\203:V=\227(c=\000\321D=\213\261\265<H%e=\312\247\210<\030~\312<\363j\255=\263\300\213=\'A\203\275\250\t\334\274/\306\000\276\216\234.<\335g\265\274\221,\201<*\262\203<3\315\327\274r\r\020\274tAz;#*\315=$\243\227<\030\320\260\274Wfy\275z2\213\275\337pI\275\222\001\210:\341n\"\2742+x=Qh\210\275\364\335S=\310\370\'\275vx\356<\215\263)\275\354\317\243=\2272\301<\033\301\336<\363\354 \275\221G\250<\350\226\223<e\362\\<\003\302S\274g,\200<II\017<\303\336$\275\272k\306<\313}w<\366X\031<?\320\202\275\323\225\314<\221$3=\r\235\t\275\014N\3438q[!\275\337W\212\274\334\272:=\224\276\343=\245\274\237;\346<\"\275;$\313\274\207\016\020\275\303\214\212\274\327\035\205\272\223\321\335\273&`p<\330\233\262=\017\260\010>\254\347\021=\211D\206\275\0026 =r\007\016\275\375QR=ZH\006=\344\343i\275\037[g=ym\374\274\376\000\231=\343\340\003=\255\321\350\274\241\224\305<\356\205\202\274X\330\016=\313\3713\275\373 \013={I\261<jz\205\275\242C\204\275\352\246\352\274\211\347>;\021;R=w\302i\273Zd9;\233/l\274\374\005(\275\235<\353\274kb&\275\033\217\033;\301i\321\271\376\001\027=\021\206\016<\305\002\306<zP\255=\215\231\235\273\367Qq\275C\321\021\275I\t\272<\340\301\003\274\347\346!=\034O\037=(<\222\273\236>\273\275\342\205i\274\233\201&\275\354\207Z\275\237\\;\275\277\323\203=\'G\202=`\222\224\274\027\232\210:\327\311@=$\2636=\004\332\302\273\002]\000=\356\211$=5\323\232<\232\032\231\275\345)\021=\373\362\215=\300\311/\275g//\275m\304m\275a\002\276=&\3167=\263\247\327\274[\251\320\274[\326\250\274)Er\273\024\305\251\274 \367\022=\203/\366<W\232\266\274\245,u\275\000\346H\2741\234c\275g\312\300\275\363\n\243\275\271\207\320\274\343\td<`\265\254\275\260\006M\274a\306\302\273\275\266\022\274\020\026\203<\366\277B\275\207\'N=\023#\244\275\273\274\212<\016\257\267\275K\037\t;\034V(\272\004\007\273<\030V\271\2741K\"\275\374\250\013\274F\207c<4\234o\275\363\301&\275\361\222!<5\276\261<y\320\271<\247\013]=\217\332\224\275B\356p=\nO\272<\n\200\031<C\032\321\274\215\322\020:\335\3278;\220\265\316;\203\226\337\272UN\240=6\350f=\036\372\221\275.W\252=\323\033\212;d\256\303<\244s4\275\265\326\001\2755d_\274\261\377\214<p\247\005;\017\261\216\274{\244\010:\346\216\023=?\300v\275\221\325T=\252yq=\370\334\270\274\370\271\306\275\365\022\3139D\252\215\274\217]\004\273N\017 \275\216\353\316<\351\025c=Y4\207\274\307\365\256<<\027Q<\247$\201=\265\251\304\273+\376\210<c\323i=8\270\200=\230\203\232\275\272\226\203<\265\002\375<\357\363\002=\\\360%\273\226\357\367<6\016\201=\316\253\026\274\214\310\221=\263\255\271<\213P\350<3\274w=\317d\375\274\236tz\274x\373\347\275\203\237B\275.\331\204=V\223\356<\017\257G\275\376c\267<\024|\314\275\257<I;\241\365/<\205C\004\274=\356%=\315j\362;\026\254g\275\031\227\234\2755\272\267\272lW\300<\334\200Z\275\214\017Z\275y<\340<\373\036\313<\343\357\242;\375Ru\275)\317\235=\223w\263=\224Z=\274c\r\031\275B\312(\273\245\372\n\2745\356\367\274:U\247\275o\033P=\\Z\371\274\322\032\310=\230\243l\274\035\355\037<X7[\275\372\333\271\274\203\3356=\214\0351=\242l\262\2743m\021=\366VP<\362\024a\275u\315\262\274\201Fb=c\261\373<\343F\320<4\200\307\275\032\273\224\274\027\245\374<QN\372<^WL=\357\347\000\275x\2216=\311\324\367\274\007\365\037\27586\344<\252\373\031:\223z\023=\034)?=\034@$\275\362\rn\274\247\234\361\274|}N</SA\275l+s<k\375\362<\007\347\266<\377\246\273\273\221\313\324<\375X\323\273\023\216Q:\265\262\364\274\374\003E<\327hM\275\262\307+<\036\303%\275\364\033\220;\203\356\233<\210\261\265<(\226\202=\326L\304\274\361TP=\226g\352<\' G=\373\034:\273V\361\347;\310\364\372\273\320\300K\275w\310\026;\311\274\277=Gf\237<\235\344\355\274\245\327\034\275\275\246\r=\301\341\r\275\350\341\342<iv\320=A\235w=\206\305\266\274\366\342\225\274\274G\277<\230\265\222<\263\017\301;\270\023@=\255\314\000\275Q\351!\275\306Gw\275\202\364\250\275j?1=\345\311\366\274\376J\005=\237$[\275|\027\020\275\217L1\273;\025\252=jL\010=`\321\240<\341\365\260<$\261\316\274\351/\343\2741\324s=\324=\004\275\354\013\034< P\244\275\353\2200\2747\247\004=\036{\323\274>3m\274hHN=c\316\324<\t\034\026;N\211\232\274\253\263b\275\227~\225=\262\203\365\274\344F\265\2741\204\202\275\317\300\233\272\206\307E={\312\032=\016\310\251\275v\264\023=\273\301\347<\244\2164\275\370\371\321;\\\241\260<5\344\325=\235\002\262\272\334\270\003\275\226\213/\275\234\266\033\276\235\220\221=z\361\303\275\037}\367<\017s\216=h\357Z\275\213\253\013\2750\312L=a\3611=\032@\313\274^I\220=q\240\235=\033o\345\274\341\257\021\275\276fW\274e\234\201\273\272\\)=\007,\027=;\300E=y\000\001\274SyM<)l\277\274\027)I<\216X5\275\227\350\301\274p\007\260<\312\306\207=\265\251\255<Ur\256<3\273$=a\362\242\275q\220y<\366P\330\274u\032\311\274w\004\236=\255\326\304\274\250R\200<\247\035\211=\362\303\2608\205\365\201=\032\254\220<\256\225\005\274\301\351\002=\026\016\022<u\237]\272ne\r:$\253\301\271\357-\320<+q\010\274m\323\214\272\017\266\207\275ZO\220\274k\240\366<\204\276\002\275\035g\210=\335\244\033\275\037B\034=\325\245\023=d\032\221\275\026\333\223=\020\262\371\275}\202$\275\"\226\251=\3537b\274\354N\002=d\341w=\224\027\333\273\240\265W\275L\327\237=\035;\265\274\223\331\227<\246\200\240=\221\030\030\275\376.4\274@n^\274\tN\261\273\021\362\222\275\220\313\361\274\262\030\205<\031\271k<=\006v\274&G\347\273\033\320\026\275\340\264\013=\337\3266\274MG\035\275\312\215\325\275x[!=\323\226\304\274\027\352\001=@qj=H\010H<\361\000\251=\006\224K;\nO8\274C\220O<\235\256\270<\271L\004=\237\224\207=\034\251\370\274N\223\203<]\017\376\274o\354\036=\203\370\217<\374\n\236\275=fE\275\334\376D\275F\237\244<R\3068\275\251a\036\275\275]X\275x3\017\275\001\307 \274\336\330\336\274\326\177\275;*\362\252\273\243~\331<\222j\216\274\025x\245\273\222\244z\275{\021\026=8,\240<\207\216,=\016\326C\274\223\344J\275\024\205u=\001\366r=\345\254\253=\206\322\216<I\222\307<d\232\222\273\220jy\2752y9<\303}\251\275\254\373/\274\th\240<\002Y\322\274WXd=}%\305;N*\235\275I\311r;\212y\023=\374!K\275\345\267\262\273dUe=Z\300<\275\200Xs<\254\310\030=\232\242&;\227\rV=\353\217\207\274x\352\234<y\020\002\275D\336\350=\354\031\327\274\321\037f=\305\352n<C\216\273\273\363J\3178x\315\036\275\304\242\241\274\205\th\274J\344\007\273\251\027\244\275\324?\220\275\343`p=\200\032r\275\216\231\247\274\371X\211\273c=\242=j\352.=Y\230b;\243\350\257:\351\211;\275\325\001\221\275M\031\342<\323\371\237<Rx\177\275\363X\336\275\251\276T\275\325\'\326<e*\341\274:\027J\275\203\002\205;\177\016\264\274Wb\230\274W\007L9\210\205\233\274e%\204=nq\234<n\326\357\274ZT\254\274\223\035\250\272\332\271)=6\016\235\274Y\341\206\275\256a\213\274\360\302_<)L\212\274\200\333d\274\376d\266<v\346d<\361q\376<-\331\004\276\027,\365<\277\377Y\275\251V\235\275=\302\363\274\005h\234\275\273\033D\274O\233\020=s\260\240<\327p\203\2748\260\343<\306F\246=\311;1\275!_\312\273\311\243!<;`\017\275\242\241\032\275\234\3221\275\001\021\310<\001\201\016\275\006\253\037\275fgh=E\005n\275h\363\212<\224\245U\275l{\272\274\255\203\312:e\323\300<\200\322\014\275\r\364>=@\243g=\230\313\337\273\030_\2609\243#3\274\366\255\313<m\272\006=\266\302F\273\321\245\227<\000\301o=\212=,;l\034\001<\351S\031<\331\037;\274\311V\037=\325wi<\343^\246\275*\362\r=\243\217W<\352\360T<\327\262M=\244\263\213\274\017\036\301\275\341\270O\275!\032S\275\374I\333\274\002m\230=\271\367\006<\211\006p<Y\002I;\310\024\315<\314N\023\274\024\364\001\273\202\202\312<>w(\274i\212\220=\312j\375<$A`9q\316\022<\323>\241\275;\217\274\274B*2\275\331\261)<\314\231\t=<\343\002\2748\357];\355\002n= \335};\326P\311<\010\252\231\273\255\270\215=Kk\207\275\\\204#\272\361\341\214\274\034\236\\=\351J\233<Sq\236<\321>\245<\302\036\006<\n*\275<&\024\021\275TO <[\342\300\273\236\232\231\2755\324U<\037\352\203=\032\374\306\275p\3722\275O\320\006\275U=v=v \266\275\003\371\007=\347\370y\274\335\240O=\207\305G= \301\202<_q3=\020\353\204\275\313^\225=\214M\205\275\212\367\n\275\271\021\216\275\312XS\2748!\252\273\231d\352;\'\344\263<\377V==\003\200\377;\221\215\274=\266;\261<\336 h=R:\317\274e\351\335;A<0\273\241?\251=\207\027\225=\304\265\251=6\312\233;\031\006E=\371t5<9\260I\273\325\223(=\346\374K\275j\256\317\273\220\206\361<{d!=\210/\306\2745\354\t\275\002\331q\275\322\207\017\276\262\026\324\273a\251\214\273\003\247t\274B\367\003<\017\246\031;\232\310\224\275\342\315\201=<\n\247<\034B\036=r\360P9\354s\362<m\356^\275\320\322l:`\223\002\275?X\032<Y\314\022\275\366\375\217< \306\006\274\273\361&\275\016\274\204;\360\202\242=\250l!=\313\274\002\275\216\210\243\274Q<T\274\332e\214\2754\177\244=\254\351\261=[\347&=\201\360\307=UY\241\274N\003\241<\376\324\205<7nx==Z\005\275\266\035\256\273P\240\345;;T3\275\223\311\021;\3546L\274y\335\226=\337\002\004=A6R\275\361M\025\275\226\005x=u(\275<\014H+<\347r\020=\274\2669\275`\240t:J\355\"\275!\t\231\274\3463)\275\361\354\250=4;\026<6\313\324\275v)|=-\262\3349\003\304\324<p\033\235\274\336\364n<P \216\275\033\337y<\016\246\240\274\3475\001=\023C;<\265tL=\341\005/\275\270\253\367<\006R\007=\345>,=U\237Z\275\331\323\213<\030,\377\272x\224\257\274W\315\032=o\034w\275\340\237H\275I\306q\275\036<)\275\354\030\024<w\006B:\223\372b\272\242\037\307\274\215=\244\274\200\243\231;]\2670<\237\225\006\275\266\254\251;\326\341\311\275`\035*<\007Y\001<\247\354\320<\324\365\014<\034\361\253\274\240\377 =\321\231\177\274\274\330Z\275\373\337\022\275A\377\310<SF{=cC\241\271N\337B=\036\025R=\353\010\013\275\031\201\347\274-+U\275\206\034\227=d\003I\275\023\000\215\274\207W\221\2755B\223<\323\377\014\275\231\216\306=\004\220\337\274\010\226C\275\020\306\200=7\244d=F\247c=.\337]\273\313\206x;G\302\266=\014+\225<\330\0077\275n\373h\275\002\263V\275\255\002\244\274\227\246>\274o(\006\275\350\207X<T\025\000\276({\222<*\377&=P\216\033=\007@\353<(!\330;\311\244\024=\260\362{=p~\304=F\013l<\3379\246\274\305q\007<\036J\033=]9\201\274C\006\217;1\035\240\275\237\211\n=r\376B\275\002\020@\275{\202\236\274\024S3<\'\243\325\274r\205\275\273\\% <\201\364\333<u\206\221;\341k\'=X\320\221=\024\364m=\030\264\002\275z\036!\276\250\217p\275\317$\022=?k\202<\"\345\337=\310\235G<@\327#=@\262\017=\305N\345<\017\263r=y\3035<\204m\227\275U\221\363:a\035\230\273\301\010]=S\310\277\273I\341C\275\032\253\364<aiX\274\311\356\006=\014\326\032>\325G\225\274\226\006\024<D\r\274\274\206B\r\274\005\275\210;\223\307\224=_\326\346;\027g\220\2742\304>\275\327\231\205<\236\n\271<z\261\317=\201\305+<\244\364-\2753\301\317\274y(:\275*\371i=\031\314B=?\027\n\274\373\304:=\004\267\002=\010\316\014\273\372\241E=\245\374,\274o7T<\215\016\234=\265\236\005<\2576\303\275\333\343\340\273\224\200\177<\317=\370<\244Y\234=\313\336\321<\355If=\rm\320< \375\213=h\005;\274\256\245>=\251x\034\275\314l\334;\005\233\017\274\021\036\004\274\221\260\005=mhd=\225\035\"\274\352\0330\275\375\216\r\275\272S\237\274\001\277\245<\241Q\352\274\254x:=\331\234=\275\275B\342\272\342\367\000\275\014\366T<\236\032\251\274\274fh=\236\355\306\274 \272#=B\320\016\274\r!\013<ZF\215\275\312N\021\274Z*i;\007\005\352\274\264\235l\275Y\343\354\274Md\n=Fv\223=\275\237s\275L\341\250\274\373%\r\274\033\205\250\274uz~<\207\351\n\275M\371\344\274Z\342\365<+\370\221=`Q\020=a\247g=^\362\342<\254\212\233<PSa:\242)!=\003\213h\273M\252\252\275o\026V=\355)\205<\000\304z;s\300T<\222\262\332\274\332%\322\275@\371\336\275-\376\n\275\324\271\202\274o\002\306;Q\317r\275\334\371\337;\030\254\206\275&\371\203=\"7t<>\333\024\275\314\264\373\274\364\355?\275\355a\234\275\000\310\243\275\035P~\275\212\367P\275\217U\205\274>\032\242\275\226rh\275\317\221\300<\177\277\241=\177\334\320\274\366\\\002=V\027\216\275}\341\323\274\304\273K= \374\276<\302\226\226\274\253y\021<\246\363?\275Z\014<<\242\202\177=N\375\233\2742\214\r=\030\0061<\367\352\225\274\255\222\271=Y\217\227\275H\000J\275\233\242\366<\301S\005;\000\026\r\275\007\306\326\274\237PA\273T\217+\274\026\317\344\274\347\024}=J\247I\274\215#\254\273+\215\371\273\310\221%\275\334F\030\274\225\032Y<\232\202<\272;\272\036\275&\017\007=\354D\242=\r.h=\260GO\275\274\003,=\022\230a\275\270\262 <\331\351\027\275\013\3276\274\312\034\223=\366u\010=\353M[;U\300\236<\2674\017=\367C\254=\200VW<\207\313t=\273k)\2753\254\021<F\315\024=\002@\034\275\004)\263\274\361\006\024=\337Q\352\274r\232\304\273g\330*\275\367$\247<\343W\334\274\225t\351<\336:V<\264\002\242=S\"\017\275\rD\203\275\352\263\304<W\206\210\275\223\025<\275\331\227\240\275\224\001$=m\200\223=\027\023\317\274\367(F=\324\310\346\275R\253\363=1h \274\002\207\276\273\'&\202;\024\266)\274\037\005\277<4\334,\2751\313Q=\305x\373\274\277\220\247\275\313d\355<\204c\212=\262\226\243\273P\020\336=j\022\253\275\337\224\311;\261\364W\274\350OC\275\340\330\315\275\266NL\275\005\017!<\237\340\256\275\323\t6\274\332\310\252\274\260\r^\275d\'\343<Xv\221=}\234\35087\031\005\274\010\212\205\274)C\242;\202\362\013=\242!\201\274\033G_=Qh \275|\322\310\274\242\226%=\220\272\013\275\246B\336\275\351\336\252<\317\350m\274-A\337;\331A\243\273Q\347p\275[ac<\004\227\306<r\267\241<\3459\367\275\350\310\367<\336\231\225\274\020GJ\273\007\344\366\273\007\377\002=E\224:=\312G3\275\276\346\261<\362\226\023\275\022\321\253\274nK\316;,\364O\274\231\023\005<\367\337\r=as\211\275\223\004Z<D\202\356\273\374w\004\2757\017N=n\317\271<\304\342\252=\347\327-\275\027p\376=C\307\214;\305\014_<9&\302\274rU\330<\262P\';\010*><BJ#\275\327#X=\212\364\243\275\332yN\275\307\233\'=\032\255\035=\327J\233<i\000S\275\317\366\000=z\274:\274\216F\214\274\246<\222;G\351\257<\304\356&\2750\231@<B:\030\273\370p\217<rT\300\274@/(<\344\347@=\263x!\275{\246\016\274\036Wg<\332\270^=\303\330}<;\276(\274GR=\275\005\r\002;\032\277\001\275Y\033\\=\222\244@=O\325\226\274\342\016O<\217p\274\275 \251D\275*gJ;\237h\031\275 D\013\275\320@\371\273\337\201w=\216\211q\275msN<m\262\275=\361)\220=\205\222\021=\360\222B=\240%\222=\000=\315\274j\210\270:k\243\034\275($\240\274\233a\233<\377\376\356\274{B\252=\370\214I=7\255l=\023\2572\274\261\330j=\307\n\273\275\243\0238\275d\344\363\272(\221\221\275\326/7<\211\265\320\273\226\025\210\274\207\231\224\273!\215\354\273\247\034Q<\304\340\271\2744\017\"<\244\024\271\275w\006\247\275\225%x\275\267\345\017\275\265\271\372\274\032\315\364<\346\347<\274\340h\206=\t\360\365;\3149\202\272/\247\207\275\272\301W\2740\257\352<T\2607<,\252-<\222\030\301\275\213\367\027\274\033\004?\275ZE\315<\353X\252<\021\032\300\274M\224\013\275\322\035\261\275\036,\032:\214=\212;p\240\"\275\035V\034\275w\210\006<B\324B\275\213\234Q=\363wp\274Io\007\275\270\316u=\264t\265<a\345\273<=@b=\033\355\325\274a\203\222\275\311\037\321<\307\305\261<|\010\037\275\306\227\230;\013F\034\275+\241\244\274\356PZ=\334mP;\014\033\021=\230]\250</0\246<\2138\212<\002Yo\274`\337\337\274\004\307\207=\371\373\003\274u\227\023=\2236u\274H\344\371<v\354\200=yo\211\275\352\211\026\275\375\rn\274\231:T\275PG\030=\201*6\275\257J\341\274\340\371\270<5{\000\272\366$\274\273\316C\217\274`\317l=\360\324\303\273@\246\251\273\376o\t=.ec\275\314ox\275\275$\211=\231\274\215\273\212\\A=\201\347\005\276\356\006\273\273I\253\226\274\250\231\315\274\214zk\274\363\373!<[\200s<\321\304/\275k\205K:\264v\352;\306V\307</\"\374=\332y\010=(\270t=s~\323<\327\250r\275Q\244\200=WE\027<\010\'\230\275\246P\006\275\274!\320;U\224,\275\212\031\236\275)r\034\274gL,=\372\254q\273pT\007=D\317\243\275>\304\236=\362\243\020=\226\330r<!\274\030\275o\273\030=\t\2149\275\235d\254<B\247j\275\341-e\275\241MM=n\220z\275\357\230\004\275\007\3130=\234\253\200<\230}l\275`!\237\275\032\313\203\274j<\265<]H\230\275X\254\007\275\237\3477\275HL;\274\256A\336<]\307e=\014\332\325=bs\252\273\204\205\225;l\276\002\276\252p\243<\277U\203\275\357\356\007\275h\205\342=\370/0=\312\342\232\272<\006/\275e\266\357\274\261\035M=\315\321P=\205m\267;t\311\211;J\002\247\275}\314\331\274\243\221\322\2743j\235<3\017\367<5\352-\275\301\244\\=\"k\037=\305\317\321=\035\200\234=\023\354}\275x~\244\274.\365\223\275\200ei=\031\002W\274rVU<\233WF\274\316\306\333\274_ER=j\217F<\240\026\202\275*\037:=\3672C\275\272\036`\274\316\234\003\274\303\261\222;\225\265\302<?\035\021\276\205\211>\274|\327\\\273\367\2725<\363E\330<\254\244&\275t\320\031=3L\242=~u\343\271\350\034\230\275\214\2743\274\344\037\273\273iA\321\274me\210\275\277@\005=\334\273\372<\361\233\340<\252\023<=\372)\000=}\334H\274\274|\023=\232a#\275V\267V;\036\373\030\275\204\227\020\275]\037Z\275\317\366\206\274\303\307\";\253\005,=\321\033\024\274#\223\315\274O\226\005;\361K_=)\005\224<rf\022\275\250D\247\275\315\277*=V\310\334:\n\223u=\353\325\256<ibZ=\004\225\021=\025\304\356=3\314\247=\"\334\203<.d\373\274\227\023\207\274Y\0253\274\250\304\333\273\361p\000\274\322\217N;\253\270s\274\323\302z\274E[{=\3761\334\275\330\200\003\274N\221\034<\264\206\245\273\000i\210<\370\021L\275}\"\030\275\270\205\237;\355\371F\275\tS\227\274\357L\004=q\030\021\275(\200\366<\257\035\320\272y\253\277\274\247\362\020=\013,[\275\257\320&\275\035\202\316\271\223*A=\233Z\211=\026i\324\273|.\220\273}\231\026=\254\2504\274nrS\2750U\022=\377\221u=\234\031:=\340\241\233\274\331y\345;\307\014\007=vI4=\217\260\302=x\372\t<\023\264\307;\267YQ=\324:*=\023D\362\273w\177\347<\003\206\021=\200P\220\273\205\247\265\274\231\022\352\274\336\313M\274\247\250\002\273\013g\216=i\222v=\021\003\301\272\nU\013\275\022\352\223<\020\347\315\274\236l\257<]\247I\275\002ng\275\246\337\037\275\024\013;<\202\370\035\275A\"\355<G\265\n\275\275#_;\316\261\030\275\377[\024=\351\031\214=z\320\233\2747\022\223\2742&(=\2739\212\275\363,\361\274\255\217\224\274\232$\020=\022\222J\275t,j\274\321h@\275\000W\246<\372.!<7\224\231=HB(<\375\356\241=\033\314k\275\000+\311;PN\253\274e\302\261\274~\3617=\251\227g\275\216j{\2757\350c\274C\333\014\276\374\305\242\274\212\002\265\275\332\250\205\275\005\232\316<\003 \305<\216\t~\274V\234\322\274\203\340\'\275q\221s\275\0205J\274J`\020=\263m\003=\022\336t\275)\333Q\274\033\034\025\274\334\2228\272\2002O\275\231\024\n\274t\316^<eU!=\214\016\236=\351\363\273<97\222;\263\000\224\274\255yx\275>W\316\274*E/\275\364\316\010=\316\027\013=7\033?\275e\352\017=\311\326\362;\331\353\037<(\037\022=\372\250@=VN;\2757\302\'\275\325\214w\275ihR\274kO\200=tR\'\274\362\355\264<#\232u\274\272\214\203\270W\330:=Q$\305=\234\254\341\274\246\217\377\2745]\354;\355\233a\274\231\017\326\271 O6\274T\017\270=(\025\225\2752\256\017\275@K\357\275\311\225\316<\220gG\275\370\220\000\275\332\366\217\275\204\332\236\275\230q\004<\261\236\032\274\032t\214=\214ds=\205\243\007<\272$\352\274\342\014\235\275A\212e=HW\351;\220F\344\2739\334W;\362\344\220=Cvc=I\341\237=\277\201\367=;\265\225<q*\256=\013\303\357;\231\230\236<\360\267\223\274\266H\246=1\363R<\314Y\177\275\307\027\314\275\212\\\264<sY\224\274T(\002\275-\307\254=\267\275\275=\314\224-\274g\262\213=n\232l<\313\341R=\305\335F=*\245\202;\221+\273\274%\307\220<)bF<n\235T\275Mp\002;\201\352\311\274^\276:=\004n\243\273\016\030]\275.\302\241\273\016I\356\272\204\023Z;\022\204\201\275o^\275\273\335\262\001\276\231\305\004=\334\300c\274[\332\r\274\214Y0\273~r*=Q<I=U\003_<z0\204=lgu\274@>&\275x\304\210<\263\205\216\275\0232O=\327}\273\274GQ\315<\014\210Z\275<\324X;\231\2116\275e|\216<\224:\355\273\036\274\177\273\017\013\016=y\027X<\254Y\021\275B\267`<\362\260\323<KZ\337<Am\313<q.P\273?c\202\273\0373\264\274\213\226\213\275\233\257\030=\306\236\213\275\345\034\214\274\265\252N=\275\205\n\276\357\230\013<Hwn=\201\224\030\274^\366z\275\251\'\250\274wm]=\214~\203<\276\322\003=\2617\202=\207\270\314\274Ww\215\272\300\227\316;\366!\235\274\257\362\242<\271\214\036\275Qs.\275\253_\346\274\3673\030=\004\2225=\325w\201=\305\226\316<}6\236\274x\377\251=\267\362\000\275[i\036\275V\214X\275\233\002\202=\371\305\257\275\324\257 \274\266\223\202<\300\030\355<\221u\314;q\'\304<\006\335\351\275\373}J<\217\347\"=7 k;>$M=\'\220\200\274\340K\317<\336\2215<_A`\275\302\335\300=\350U\320=\305\350\275=\373\036\255<\3619\317;T\235\005\275\335\235\025\275\2322\277<,\004(\275i4j\273\210\'\261:\232_K\275\244RE\275\022\005\212\275\375\236\352<\335s\371\274\237\200\336\274?\343\322\274\257\344k\275t\242%</\372\257\274\355\276\031\275>\204\230\274F-\304<\337\025R8-NO=\026\266\270\273*\016\263;\335\032\273=u\215\002<\200\260R\275\013\326\200=\031a\330<\3728\010=1\214*\274\300\341\311:|\313\227<\333E\300\274\356!:\274L\350\t\275\342\223+=\006\316+\275\234a=\275\264N\370<\r#\324\274\177\204x\275\202\226)<\t\325\271<,g/\273b>m<{\200\206\273h\t\203<\211d\340<\377`\014\275]c\260\275\027p\336\275\365f/=\323\013\002\275\300\022\241\275\324\275\215=e\\7={\313\025\275\001\2720=\025\3236<\347\033\271\274\023\362\321\274|e\245\274\301\340\234\274\354 \220;NUs;\024^\"\272\362U\024=\274\021\357<\265\032\013=~6\021=k\033\272\272\003\312\331=9ZU\273\306\355\333<\203Y\006=\017f\347<(\024\247\274\361\'\001\275\306C0\275\320\304\323\271\2414\230\275A\204h\274y\\\034=\246\203\033\273\312\362w=\240\255p\275\334&\023\275\002@\343<)\tL\275\215U\355:?\352 \274\237v\301<\207\216(=\222\214n\274\370Q?=\345\3426=#z\202<\307\342\025\275yL2=Y\004\264<\211=\326<;\031\237<>/)=\001\350\031=\302/\227\274\034?\341\273/\316\244=\342y2\275\204\031\013\275R\0000=b\313\370<\366\273\224<G.\206\274\033\"Y\275\325S\271<\363\230`\275\312\236\210=\262\226\224\275\026\372\222\273\270=r=\226\373\201<\020U5\275bJ\034=)e\323<-\333\031\275\364\320T\275\323\255\204\275\277\276<\275\252\002\000\275\220\313\306\273\255g\252=\256\211\240<[P\254\273\214\214\313<\262Xl=,>*\274\334K\244\274K\3679={6\241\274\217\265d\275\317\257\374<\206sM=\305\356\203\275\233\370\221\274\261\374A=B_\342<\025\r\353\274_w\024\276\036\257H=\274\177\341<\206\374\260\273\375\324\224\275:\265\200=\220g?=\242v\364<\005YS\275\237`\013\275f\202l\275\361\251\222\274b\3758=\272\272~\274U\371\255\273ht\010\275N\320\354\274(\377\266<T\272\235\273\257\027\222<cJT\275 \2607\275@\205\000\275\\l\r=Y0\203\275\2412\200;h\332\244<I\231\365<\221t\322\275\361\351(\2754u\213\274|\017\201=\232\216p\275\216\031\241\275\221\261\202=xw\200\274f>\304\274\007\247\266\275@\333\005\275\030\361L<\tFS=\240\034,=\322\330\317\272e\031\\\274\365\242\000\273\266\324\262<U\246\264\273\033\326\207\274\371?4\275\247\271\330\274v\332\000>\250\301\260\274\257;\214\274\247\374\231\275\322>!=$\230\237\274\254|\021<\370S\206=0\335\275;\345\236\204=\314\233]\275\233\252$\275\321f\021=\014\217\004\275B\335\025\274\020\007\027\275\250\375\227\274\324\244\021<L\353\215=\'\242\340<\032\371\276\274\214y\023\275\225\261\020\275;\312>\275\250\330\000=\322\206\261;\331\037n\275\361\215\036=\210\334};\035\301\367<\351\367<\275\230\017\016\274\014\222\030=\221\255\205;Sg\204\2751U\034=%\342\214=%\373S\274\337\365\t\275\235\225\2059~\221\025\275\0014\221\275\306\275\265=Q\270M<M\220\224;\254\276\212\274\033\201\221<]\004\322;\n]\224<]w\230\275j\351\325\274MQ\300\272Js\201\275\020\340\343\274\364l\363<\274n\241<\212ll<\262+x\275\026\346\373<o\"\224\273du\2749\234\320\234<\201\326?\274\372\317\371;:\266@\275g,0\274\006\302:<%\210p\275\022g\004=\000)\335\273\270J1\274\007\203\216\275\313\004\177\274u\323\271:\374\251!=\360\nM\275\355\313C=\253y\021=3\243d=\265\236\203=N\246\034=y\342v=\360\337\006\275\211Z\034\275?\256\320\273\2571g\274\352\234\263\273;\234\267\275O\375\267<o\353\016\274\3359\030=+\323\211=\310\356\215=\252u+=\241/\361\272\343\226\350\274\311C~\275\373\300|\273\232[x\275\341+\213=t\007 =\340\355\214=8\367=<\226\030\235\275\372(\246<\245\214\215=F\357I=\004i\204;\246\304l<\256&\004\275\360W\027\275\001\202\243<v\025Z\275<\205=\272,\240\344:\276#\305\274\350\243\003=\010\377p\275\274\027\177\275D\020\213=\325\326\201=\374\362\003<|\331\313:L\231,\275m\3617=%\214\331\274\327\255[\274\307\350\376\274\177kp\275\323\030[\275P\324L\2750\022\375<\301g\365\274\306\001\377\273\254\221\027=at@\274\027\020\303\274e\366\301\274q\3333\275\306\027\021\273L\001\212\275q\t\002=%i\231\273\232\0042\274\312\337\250==q\326\274\214\211\320\273&\353G\275\376\355\007\275\003\262\242\274\\y\202=\002\005(=1m\240:\333\222!\274\210\242\332\274\312\310!\275\273\024\315<\233<\001<\021\374\304\273*\034\252\275\260\210\264=V\366\341<\373\'\272=\202\013\221\275Sz\014\275>+\007>M \032\275\365\021\257<Q\244D\275\273=\270=\306V\362\274)\324\226\274n|\235\275\307\016k=\202I\223=w=\202=\301@f:Y\004y\275;\033\330<q\332\035\274>x\305=\204J\341<Z\340\311\275\335\262R\273\031\026]=\342\241\346\274^\336\224\275\036\234+\275\016\307\317;\212Y\277\274\366\353\213\273\230\204\036<\373\035(\275#e\214\275\037\345~\2740/\032;t\025\257\273\032h\331;N\3036\275\025f^<\266tH<\271\022!\273Ux\263;dn\250\274\354l\255\275\323_\005=pr\274\274SK\014<y\262\226<\220\034\376:)\221\013=\2013\221<P\035#<kQ\373<x\200r\275\272\222\335\275\317W\023=K\312\350\274^\006\004\275\277\221\020<\371\216\025=\262 \335=\263\034\304=d\353\364<M\242\\\275f\312\257\275\351\273|<\220\252&\275\270\312.<\222D\255<6-\264=\374\2263<\226_R= \354\257<\003\301\"=t\0063<\251\025\021=8\247\023=\313\t\234<\205\242<\274\360<v\274\375V\374<m\352\246\274R[\r=\014\333\021\275K\026\274\274 \027\335<qD\247\2749v\224<$\370\363<\340Z\356<\'\030U=v\276\214\275\323\224Y<~\253a\275\236\221\177=\313\022\'=\375\270@=\035\225\030\275-Q\342\273\334\032\013<\361\036Q\275\370X\031;\253\305d\275>HQ=\346\373\222=N$\000\275[P.\275\020[\022\275>y7=\233#\232<s\244\316<\235r\255\274_\223\237\273\233p\371\274@\314 <\211w\001=\177\345\374<\330\311<=\035\275\031<\217\263\254<\317\270h=\320\035;\275p\316\034=\035\372\333<\305\207\212\2745\224\033\275\312\t\357\274\261h\355\274\277\231>\274\333@\204<\377\275L\275\201-\367<T\016\375\274\211i\235=,S\241<\022%\003=\031\027\312<\007\346\027\276\221\251\016\274\245\020M\273\310\276\203<O4$=\013\266\035=\2442{<z\374\214<\276\r\001\275\027(7\275\2458|<u\320\003:5un<\244\200F=\217\210\306\273\353c\r=\321\250\311\275\262|\007=\227\345\r\275<\\\255=\253\324:\275Zb0\275w\237\237\2733\306\010\275A\2103\273A+\311<\033\255f\273\365\242\230=\321|\202<$\235\313\274\254p\264\275!E\255:\357z\202<\010\207 \274\370\003,=\325\220I<\033\223\242<\3273&\274\032\263&\275\215aN\275\273\233\010\275\231\005\373\274bJ\032=*\246H=)^;<\325L\210\274\345\305\250=Y\363\361\274\374Yr=\214G\310;\213[N=.\\\361\274\343\020\253;\3218f\275\346\302_=\322/<=\375\221!=t\031m\274&=M=\242ow=\026\355\206=\362\260e\2757FA\275\256\0135\274\312\204\241\275;~u\275\031C\357;N\365\360\273+gF<\346s\\\274\212/@\275&w\313\274eC\270\274\245\t\376<Pz\213<\324e\240\272\207$\256\274C \213\274\314\222\242\275b\362\"=\315|\031=\n\200\205\274\341\300\241\2755\371G\275\030u\213<\036\261P<\\87<\n}\350\273\211|\245<2\014\262<i)i\275{\314\273<\330\363\374<\217\002\322\275\377,&\275\330P\321;[J\247=\214aw<\351\265\201\2755\212\252;\252\261:\275\207\225Z\274\375\352`\2759\037\013<\345h\024==\242|<\3147\002=JY-\274\373\020\376<\230\034H=e\216O=@.\215\274\036\216\024=\n\2463\275\0140\255=\3651\\\273\277g$=\316t\037=n\"X\274\374\216\005=\241i\036\275\367\2213\274\3611\025\274_\343\t\273\274\031K\275\005\',\273\340\272B<J\335\205=\320\024I=\327^\326\274\225\322y\275\371W\024=\032G_\275*\037\250\275V\355\025<\362\230\377;\366\257?\274\300\243>=\271\317[=\013\256~=\227=\036\274*v\362<\240ll\275\007\027\326\274H\2450=\235\207\315\273\010\315\337<I\226\254\275@i\243=a\224,=W\225\004<t?\326<\212\363\031\275\371\344W=0\300\004>\030\334\273=(\036\002\274\272\3054\274\204\231\006\275?W8=\247v\002=Z](<\025\235g=\245~E=bY\030<\231\204\013\275_\223\025=\007Y9=\201\202\002< \030P\274\320\312\236\275x+?<\307\370\336\274-\016\022;\n\253\212\274s^\261<h\374\252<\007\230\304\273\217\000M\275N\014\213\274!\3357\274\241pS={\360!\275\353{+<\r\306\310=\317!L=\257\343\233<:\306A=\345B\035;\256y\031=\000\363\317:WiX<?\246>\275\376\020\204<\014\3203\274\372\022\266\275\265]\007=t\213&\275\206w\303\27458B\275\236`\024<\316\362\332<\356\267\001\273\0312-=\252G\361;\203\007\211\274\n\261\231\272\217\366,=\356\245t<\021E1\275\t\371\276;p\231\343=\351\324\370<\217Cw=\'N]<bW,\275\305_@=\222\342:=\307;\016=\233j6=\275\2063=\366{/\275\364p\306;(pV\275\016\037X=y\r\200\275\341%\205\273\233q\237\273rv\235<\216>\245<\274\362\244\275\230}\346<lA\242=\252Nq<\363\0000=\377\365_=\3059\211\275p\237\265\273k\362\002=\004E\241\272\260\254\371\2739x\305\274\000)\221\275F\367\270<Mi\202\275\212\250C\274\0240q<\345\303\370\273\321$\347<\233\311\017\274Zd\236\274\371R\211\275aV\335\275\273\037\354\274\004C$<\271\306\313\274g\027\212\274\371U\222=\317w\031\273\354m\231\2754\376i=Z\366G<\202\227\220\275\213\262\301\274\265\216\336<\261R\t\276\333)\242\273\315s\026\275\306` =\321\244~<\000\324\204=\350,%\274j\2763<\"\250L\2743\250\341\274g\257d<\ryU<\2702\000\275\351\336\362<g\244\020\275\005_\257\275?+6=H\006\307\273\223\274\372<\267:z\274GK\032\275djc=\267\206^=\262\023;=8\215\237\275\325\303\315=\313H,=\030\221\001=\254 \214\2752\317\213\275Q\022\316\273\252\373\361=\245Q\'\275\323\245]\274\310\021\357=\014q\215\275/\315\345\274\243\213\226=\314\270\006\272\260\325&\275\334r\224\275\317\337\224\274\331$\010=P\0057\273j[r\274g\017\356\275*\023\354\274\001\324z=\276^N=\335\373\031\274e\257-=\007\356:=\251&0=F\255\266\274Y\253\266\273b\033\205<\361\331\230<u\307I\274j{\030=7\342K=\347)&\275WAC\275\026\315D<3\014\n=\002A\357<\204M\347\274\257\316,\275\001\252\267\274\226U\\=\263\346\030\2751\010\200=\331\374.\274}\300U=\333\343\002\274\350<\332:\'p\033=\216\237G\275\356\253\345<4\304\033\275\211;c\274\266I\211\275\270m0=W\356\251\275\373\324\353\274\375\224\016\2729\332\240<\371?\322<\002\223=\275\236\215n;w\267\030\275+\267\"=\201\355e\274\2313X<\262$\275<\353\017\002\2756x1\275\254\335R:p\021m\275\333j\373\274\217\221\017\275Y\361\266<\na\r=\215\014N;\032\\g=\037K\301\273\232`\260\275\341\266\247\275>\225\202<\332\227\373<\255{~\275=?\251<\3051><\251{\311\275*c0\275\272Bi<^\037\261=\202\355\025\274$\374\004\276\34108\275\257\360|\275\232+\257\275W\t\344\272\324\243\343\2755\377\005\274q#[=@y\254\275\022\357&;\322\t\016\2750s\242=\245\271B=\204\"\253\275k\215%\275[\335\324\2749\270\301<V\035\022\273 \377\350<R\001\210\274<\312\220\2751_\177\274\370z\321<\220I:=\351\267{\274\242\360\256<\026n\006\275\304\373\010=\027\001I\275\212J\004=\023\317\004=\340\334\031=\310\"\366<\262:\214=N|\013=!($\275\363b\356<\303\030\201\275\305\337\263\275\256\202\210=7P\227\274\210\2330<v\215N\275\276\344\203\274a;V\274\227a\274=?3\340\274\330\355g;\350\030==\323\372\353\274\336\203\035<\026L\307;\257\027\202\275(\344%\273f\022\243=*\315\020=Vl,=B~\005<\264\371\300=4\211\237;\257V\324<\010I\236;\324M\010\275\304\016\242\274\212\344p\274\340x\236\274\016\273\246\274j\266&\2752\237\237\275\020\021\276\273\177Am<\364\355\372<+\237\003=\020\234-\275\343\323\030\274T`\261=\270\013\273\274\363,\007\275\007N\260<\006\227M=\333\212x=my\010\273\334\366N\274\274\327\231<SM\250\275\260\004\025\275\222\266 \275\250\372\330\274i\\\346\274\303P\324</jx<H<]<s\233x=zKv\275\276\014\022\274\310@\014\2759\322)=\035\306\231=.\272\355\273\025\315x\275\333m\373<[\r\300<\256\277\027=\327\313$=V\365\000<\352\215\234\275\025\310\017\275\222&\224\273Y85\275y\030\274\274\363\346\375\274`\211\324;\025\334\357;\2423\014\275\010\315!;\245K\255=l\326\201\275TW\207=\374\254\220\274y\200\357\273\327\005G\2739\316#<\270\222\023=fN\244<\353D8;\351RK=\tA\247\274#k\021=e\335\000\274\r\242\022\275\324\275H;\343\351I\275\222\313\236;\034\364\201=\242\3264\274\265\252\252\274\223a\"=D\202\232<\323y$<\206\032E;\021\310\342<\313S?\273G\177P<\260,\336\274\323\364b\275E\311\223\273\231\314\246\275\265y\216\271nZ\036<M{};\'\344\022\275I\224A\275\033\223t=\366$v\275?\014q=t\3330=\355{6=k7w=\032\347!=&@X=\340\n\241\274\205\234\201\275\210\005\013=\362\341\213\274\314u\220\275ov_=\311;\'\275\246\354.=\005\006\027\275i\304\371<<\247k<c~\254\272\350,t=\361\266\323=\000\'u<\020\2018<\324\3325={d\215\272eL\304\274\003\247\323<\220\025\225=\004\035^<ocC\274\327X\030\275\212\354\227\273\214#\330\274\"\360[=\250\271\313\270k\206!\275\241Y^\275\20547=\306?\033=\221\242 \275\330@Q=(\371~=\366\024\t\275\306\\(=~N\323\274\350a\001=\2116<\273\344\223\224=b\261\227\2731n\266\274\206\3760<\356\335\203\274\302\313\014=\374\3774\274uD.=,\245\350=\354\350\220\275\2546\300<\321\335G;\375\002\032<^\374\217=]j\270<5\266\007=\317\310\210\275\203Q>\272\2066\225=\340\200\226\275\241S\263=\r9\021=\307@\264=pE\241=\3713 =(d\354<\263\264\253<\347\330\261\274\001\377d=ny\343<\006\222n\275\001h\225\274\306\032)<\312\177\014=\375\351\330\275h\327\n\275\344Q\003\274\216\346\305\275\237L\242\274g\213U\275,\021\250\274 \334^\273 \t>=\245Q[=\260X*\275*\025\315=\267\222\231\275\355\364\023=:\nv=@~\260=\005v3;\342\3262\275x+\223\275,\2421\275=3\266\275=2]=\022\331\271=\214\262\200\274\303[\263\275KP <\225]\254\274\273y\035=7\240\036\274x\373\027\275\2204>\275\326\202|;#,\035=\357\327\220=\333\233\335\273K\217\004\275\327\330\"\275M\272t\275F9\307\273\267O\215\275\230,r<\3757\310\274HQ\014\275p\2776\274\234l\371\274\030\361J\275\330\254\374<.\356{\273\2473\373\274sAx\274x\035X=I\202\004\275\366``\275n4\007\275O\037\245<\006]B\275\332\353\025=\320\302\346\274{\213\301\274\23740\275\343o\275:\3325|;\206M\307\274\234]O\275\224\220\362;\033B\372<T0\030=\371\327b=\326\337.=\376\221\306;\305\0058<U\004>=(\211\347\273\337\346\344\274\'G1\275x\023\305<\033\310\014=\213\302\241\273\036`\373;\354\037\003;\305\035\277\275$sS\275\304\307\206\275\305\037S\275Sq\321\274Rh><|s\312:9\317\026<\366\201\240<\253\030\227=m]b=V\0074\275~\272 <dt@<\236\030\315:@\371\034\2757\3770\274\366\235\243\275a\337\212\275E!\202=\251U&\275_\036\326\274\210\334w=r\231\247<K\265\337\273v\342i\275\325>\321\275\202\271$=\017\211n\275\226])=E@1=X\r\226\274\200\221x;Q\013\311=p=\247\273\244\237\311\275v_f\272\257y\301<\021\332\262<\036\367`\275\206\312\313;\3124\360\273\332\375H<\336\373l\274\373\276\030\275\377\003\030<\371\0131=Q\347\226<\334I\013\276\020\022{=X\263\\=5\210\240\275\244M\252\272\016S\t\275_\345\003\275RJ6\274\244\"\214=\312K-\276}\374(\274-JP=\341\301\351\273\021\353\317<\252\001\362<Mi\024=\027\235\241\273\226\213B\274B(]<ws\340<\033\2559\275\345e\300\273\304\024j<\001\203\'\275\ng\341\274\204\262\244\275xT\236=N\223\337\274\363\220\225;\025;\213\274\200\207\036\274\271\267_=$\016\252;\027\313\365\275.\320\014\275\252%\221\274\020[\232\274\307\007\245\274dG\013\275f\013\302<\306\226\'=n\357\222:F\237K\275\224\335&\274\204W =\306\363\253\274\317\035\210\275\026\232F\275t\234\t<{c\371;Z\253\262<\211c\266\275\2754\345\274iC`\275\365\211\233:\322\375\204<@\317\224\274N\215L<\217\211\262\275\226\2162=\345\277\346\274\252\002\224=\342\2268<\007\353\024\275k\030\026=\350\177;\275\221\263b\274DO\016\275\003\270z\273\246qN<\223\257\374\274(\025\345\272\023\005\376\274\"2\300<\030\0327\274\005Ak<\263\337\201<\013D\357\273\326\\\265<\021#J<\256f+<\315\210\214\273a\360\372\274J\355P\275\033\342\246\274\2527x\275\211\262\334<\000\255\376\274\247=\343<\353#\324\274[%#\275\364n\267<\346\230\244<<\371\233\274\326Aq\273\356\313\346\275\240e\211\275!$\021\273\244\314$\275\315\201d\2740\2503<\254\307-\274\220\344\265<\301\206\320\275\337!8=\236\272\245=$@\246\273\202\336\026\274`\243\323\273\325t\200=\233`\335\273$k\310\274\"\336\371\275\227\321\263=\362\036b\275\302)\n=K^Y\275\370\"\303\275\340\276/=\325\014\017=\274\354\"\275\262\335L<2\022\031=0:\037=\313\237\334<#\344\346\2749f\234\275;s\233\274\t\312\212:\2257`=\222\222p=\037\n!\275\352\256\373<\234\306\265=\374xM=V\335\362\273\033\250\216<.\2575\274V\3577=\333q\364<H\033\330\274\345\032 =\332\310\227=k\360w=;\231)\274\002\300\312\275\314\231\032\274\355\014\212<\200=\206\274@\322J\274\375\226F\272\327\376\023\275#\245\340\274s\364\334<P\357r\275mJ\215\274i\325\230\275\337$\207=}U\377\273\017\004\303\274\'\005\360\274\014vC\275\320,\200\275p\332\303<D\233\224=\037U\023=\321G\034\2744m\203\275V\"\251<\010\317\312=(:\323;\266\266\312<\225\216\252\275\036\334@\273+y>\275\270\357\303<\n\001\360=\274C\032=\001\207\220:\006\224\r<\003\327)\274\007o\017\273\264i\327\2739A\027=\277\322\363;\275\273?=\261\340/\275n\001H=\t\2229\274\275\274\331\274\276f\306<&\251\013<\356 \226\274\323\214\224\275\226\377\207<\332\201\210=wp\265=\215\034$=\261\r!\275\210\343<\275\025\337\341<a\3079\275q\245.\275\301\254w=\252\356\020\275\376\312\327\274\0107\027\275\340c\230\274\302\266\r=\250\243\244\274\023\366\375\274\332\370\226\274l\201b\274\300\233\232\274l\230\326;\261\332\275<\352:\232=\245\225\235<\260\024\321=\223%)=\010+\312\274\360\003?=\342\260\340;\217W\236<\353\373@=\354\t^\275\0018\317<\273\246\320=\354\236\201=\324\0010\274\031\354\264;B\014{=\014\331n\275\206\255+=\025Lv=\022l\357\274\254\030\212=\341\027a<\224\2743\274\246\371\347\274A@\354<P\236q<\2661\216\274\202\251\000\275\222\025\311=\032\244\371\275/\177\277\273=\252\366;:+\024<oC\365<\326\204p=h\267\307\274\264\\\032=-\217\246\274(\251\352\274\306MF=\202\260d;o\205\302\274\267\274T\274\350.[;d\020\202;&N\354\274\375E\211<Z\375&=\317\201O\275s\2128\273\315\266\266<\261b\240:[\370J=\353\224\001\274o\032\035\275\376\335@<\310\307\342\274\315\201\n\275M\261 \273\353)\344<c\367#\275\025ME\274\314\206\020\274\235U\002=\264J\315<\'q\310<\005r\250\275q\232?=\307\334N=\317ob<\276qx;\372\005Q\275\251\307;\275\021D\220=a\002\204=\231\021\376\274ity\274\016}u\274\007\264(\275\261\340\255\275\373\260C\27506\273\274\220\'\265=\304t\336\272e\373\237\274\032\362#<\342\254\026\2738\212Y\275$z\007<\006\177.\274Q~\202\275\317\013U=\004\262q=B\230&\275g`E<!O\322\273\344\211`<\301X\334\274\360c&\275\330y\211\274\301\036\273<\346q\351\274\316E\264=\245\177\035\275\177\216 ;\365\360W=9,\332=_\373@\275\177\243\253<\016\001\033=\223@\262\274\265\372\033\274\2510\006=.\032\303\273\336\364T\274\211\267\210=\347^\220<\337\314\265<RH\000<\373\267\007;/\225;\274\220+ <\310\217L\275mP&=\237cc<\376\027D=B\244\210\274\352\231\357=\t\332Q<\373\337\230<`\300\037=p\033\242<\315\334%\275\202\326D=\304|\333<\352\251\364\274Q\326\210\275A\\@=\255\010\360\274K\t[\275@\177\367\274\263\005<;\376^\303\274h\220==[o\033=\234\001\334\274\262\224\332<\336\233J=~{N=\026Y\274=T\3339\275\231\313\\\273\270tn\275!\216\210\273\203\271n\273o\230<\275\322\367\216=\365;&\274d\025/\274<\271I=\010\233\233=7\244\307;\207\200a=\330a\351\274\262j\030\275\235;F=\326\034\013=}\034\217\275\276\271\313\274\367wT;\nZ\217\275qC\253;\215\350\372\275\207\003\037<8\321\344<\300$\270<J\016\213<\017\022\025\274\327\t\357=\320\372\"<\023\270\250=*\203\342\273\317\314\367\274n\374\305\274\"3\200\275#F\205\274\345\304H\275v3[=\030O\347<?\3552=\361\242\343<\026\345)\275\202\357\201=\371\355\234<\307\017\241\274\t\tl;\327\375\346:\361Z\354<\323\344\235=\367\276\254<$\247%=\311s\356;\035\241\353=g&\326\275(\235;\275m{n=pp\315<.\276\376\274\272\304\t\275\353s\002\275\223\001\211<\323+\346<\271}\005\2753\351\376\274\023\376\247=a\031\001=}\321\212\275\373\364\371\273\237\230!:pH\206=\031\325\230\273\246#\222=\273\020\002\275\017X5\275\202\233\247=\023\224\352;\221\336F\274\356\206\301:\217\222\273<\332\352\203\275D\304m\275\276u\320\273T\345\002\2750\217\004=\270\303\331;\306\313\034=\317\333\324\274\006\353\275=\301\310\304<\353\224\230=\274:\304<3\364s=V\n%\275\314\340\010\275\332\266C<\217\027\305\274\231\274\221\275\025#*=\037\340\201<Y\347?=\331\3462<\007\274\235<2\322\375\274\352m\232<\'\240\223\275\330\"\210\275\314\264\216<\351\010,\274`\337\250=\242\205\304\275\243\276\327\274\273\n\001\275I~J\273Z\025\235\273\317Q\306<\270\257\334\275\010\273\264=\326\210\302\273\327\257\202=\nx\322\274\rK\003=\255\277\366;s\215\226=\231\267\251\274\377\216\264\274\353J?\275gV|\2757$#\275\274\274V<\004\317h=\345\230.\275\025h\267\273E\256.\275B\250+=\213\316\222\274\231&#\273\242\260\266;w-Q\275\371\331&=~.;\274W\2578=t\351\360=b\241\252\274\t&\240<\210\0102\274\255\340\013=3\303\364\273]\302\r\274h\311\311\274\204Y\027\275\000\034\201\274\201\212\206<e\272\"\275\203\2074\274\320H/\274\326td<\0348a=2\242\\\275\333\357,=\335\357\361<\371\204\347;\361\331\007=HM\246<\360\235\231=/\272\253\275M\224!=#\005\253\275s\227\246\274\222\272a\275\234\343D\274\361\357\257<DK6=\2666\226\274\362v\240\274\237\362p\274\261\271\212=\003S\317\274>\013X=\215\003V<\223\343\275<u\340\t\275\033\022@\275\3152,\273g\021\306\274\216\325A\275\257\356C\275d\203O=\036iE=\313yk=\234|\'<\001\204\233=\223\220#\275\220\207\252\2748\221\004\273\3662\220=\"\222\254\275\377\3704=S?\230\2747\232\016\275?\377\2178\360\325\227\275\024;$=\333\021q;\215\214V\274\314h\365\273\353\213\004=(\n\200\275\201\026k<\376\213\204<\223\214\343<\237\270-\274b\177\211:\340\322\254<\232<\200\273\334\366\245<\240\373\255\273N!\242;/#\005\274\010\312\035\275\037Z2\275\266;}=WJ\034\275\232/k=\221\261\356\274+\254\035;\206;\\\274\233\263\350\274k&\035=\251\003U\275 \263j\274\201\306\301\274\307\217\327\274\321\240S\274\237^\253\273\372\203\335\274pM\345=\324\233 =\305\377\236\272/\002u=\224v\305\274\276\251&\275\243\366p\275\276\336\020=\211\003\225\274\000\255 \275\021\317\026\275\016JD=E\232I=\324\340\301<U\317\345<\337q\217;\211\375\315<\256\352I=\270M\373\274/^\211\274~F:\275\254\332\321\275\340\'\027=\241\207\\=\026\275\264=\247\231\361\274\352\034\371;\235\235V\274\234\2724=(\032\201\275hl\226\275[w\270\274\000\244\245=@g\243;\025B\017=\377:\n\274\274\315\312\274Q\300\007\275\2318\226=\345!\016<\347\355A\275+,\267;\274f\307=\r6\376\274NO\n\275U\366\323=\342X\014\274Ph~\274\216_A;LV\277\275\334\334\342\274Yp\234\271\311;\351\2741\210\255=S\300\000\275\345\3113=\017F_=\272~=<\'K\216\275\237\323F=\r\223\273<\0264\376\273\271\020\242=\305\224_\274\250U\261\273xtn\275X\002\206=\273\033\230<\277\300\\\274\340\256o=\201-\335=!5Q<2\377!\274\332\354,\273\332i\365<Q)\226\272\300\274\353;J\335\215<,U\002\275\367\333q=\032\030\210\275]~\375\275\223\312\367<\3300\026=OD+\275?;\205<\374\350(=M8B:\276\n)\275\273\266\221<5\276\036=\230L\021\275\317\3651\273@\377\013\275\200<T;w\237\341<x}\330\274>\235\315\274\025\031\317\273\376\321 <\332)\315\275\254\177\022=\227\377\317\271\365\201\302<\333\232 <\216m,=\236\365\324<\300:\350=\214\002w\275\036$\265<`+\341\274\226\007j<3%3=_*\007=\265\262\232\275f/\250\275\031\256C<k\257\307<\232\347d\2738\206\207\275Y\370\263<\306\031\305<fGA\275s\006\254:\003y\217\275Z\334d\271\310r\210=\262\0002==\270-=\201\271\230\273\014\374\014=\235\230\021=[\203:=\236\2036\274R\352@\275U\340\234\274\314\320\205\274\305\371\004\2742\226\310<\027\034\244;O5\023\274\231\241\304=\3166\'8BQB;@\331M\275\337\347\243=8kx\275\371\252F=\250\360\276<\276\021\022<\361\334\242\274i4\005\275.9\340=_\347\263=/\321<\2746\221\350\2755\232\036=9\214L\275\023\2260\275\266G\036\274R\300$=$pW\275\016\033\213\275\350\254`\274\262\364@=^Ej=\207\232\243<\014\213\214<\247%\025\276\276\206\013\274\230\327Z<\337\374\211\2746\027S=\310\212l<#\355\022\272!\315\333<]\301\204<U\224g=\t\347\254\273~\217\267=\243\220\367\274\2249\216\273>\\y=0v\230<n\361\251\275`\3230\274\271{b=\346\316\225<B\226\345\274\t\002\257<E\307l\275+}\026<\267\230\215\274\342eX\275\361&\330=\213\350\016=\221|V\275\246\210S<M<\316;\301Q\355:X\225\003\275:\236?=b\211t\275\265\312\213\272R\313\232=\315Ll<\357q\374=Fu\3179\374\256\315\273\021Q\211=\303 \301=\227\351\274\274.LC\275\336\366\345<\243\361+=\200\274\346<\216k\312\274l\273\274\274\311\0216=#\030C\274\035v\313<\206\370\214=\3130f=\271\212\n\275\317\275\344\274\243\006\250=\264\t\027=\264\215g=Z\014.\275\017\232\212<\241E\276\274\250B\004\275(6\250\274\001b\306;\3258\301=\202;?\274\2144\344;)\r\232\274kKm=\220_+=X{\253\273\320\002\252=\025\3537=\3701\032=d_\303\274z\273\356\274Gf\314<\374\2208\2753\204O=u\241\316<:\246\210==\245\243\274L\326\377\274\203\014\363\2742\0046<MO\271\273\2063\n;\212\266\036\274\206$y<)\206\334<E\314\026=\217=\206=\354{\247\274S\315\224\273\365\342~\275\376\n\247<lU\024=0\347\256\271\200\242E=I5\332<\306/\022=\340\304-\275\217\230R\272!\233\376<?85\275\007\330n=q7\001\275\336\025k\2750Hc\275\207\2511\273\2747\215\275\\\003U\274\356\004\205=\357\237\301=b\337\264\275\231\000\205\2749\201\027\272\230\277\343\274F\372\030;Tn\262\274\022\267s\275\311L1\273\274\371\226\275W4V=\034\037\245\274\275\267\037=\2166\272<V<p=\032f\005<T\2343=,\206S;)\272\207\273\231\341o<.\313\212\273\2032\025=\332a\213\274\027\310\224\274`\377\305\274h\255<\274`B\242\274\302<\220=\371\251\221=\322\334\265\275g\021\226\275\001\301x\275\017\206M\275_?\242;\321\357]\274\320\342\242<5#\220=\017\232\211\273\225\361i\274!\376\225<|\302\344;\2639V=\2234\207<\022\260\214\275\004BK=\324\273 <\305`]\275\360\340\000\275C}-=\336d\350\274wn\217=\235\261b=\333z\354\274\267\336\'\273,\274\366\274\2521\232=8\252\341<O\2025=\225\020\034\275\343\377\234=\014\203W\275P\\6=\022[+\275o\220!\275o\035-\275\335\347*\273?\315\232<\250\225%=\324\217\235\273\332\274$=\026\225\222=\246\365\262<0\361E=`\267\327\275\325\014~<\350\333Q\274\007\367\013\275\001>\326;\245\010\354\274B\240\024\273\257\342Z\273\346\253?<Sv\301<\035b\237\271\010\270\203\2759\216\016\274_Ah\274\351D\331\273\236e\006\275\262\006\206<\333\177\036;k\223\234\274\351\251\375<\314\275I\275`\275\321\274\271\022\202=\210\302\370\274a\373u\275\255\001\r=\372\035*\275B\220\026<\307to=|\230\226\274\322\004[;\004\310\351<^Z\207=Jr\274<\200\331\t\275g\274\017\275M\354\250\275\255\352\352\274\340\203\213=\027o0=1\014\367<Bx\231\275\377=\337;B9\t=H\346\336\273/hc\274{K4=\222\312\252\274\036\310D=\240\233!\275\223\350\206<\352\355\031\275\221\262\253\273=8\334\273\331q+\275\027\204\005\274`\265\205\275\250F\036\275 \027Q\274l\000\363<\321\327Y=\274|\313=\316\340}\273\337\345Z<\200#\230<fp\353<\237\367\331<iMg\274Cn5=\361\353%;\005\303:\275\346\337\377\270\035\023\306<0*\326\274\023\177H=\r;\007=\376\032\204\275_#\374\274~V{=\271M\224\273|\3055=\362]/\275X\322\356\274\337Tm\274\016W+=\024\217U=q\327\007\275\272\204\310<6 \367;\000wC=\366\236\014=\250|C=\303h\313<\304\2631:R\233\224\274\267\352\233\273P\340\214:\255\337\267<\016:\215=\330\313\206\2750\376\273=\300\235\013\274kp\371\274eA\337\275\035+\350<\316\330\n>\222\212I\274\276\231r\273\335\271\336<Q~\274<z\301_\275\024r\035=\tg%\275G\247-\275Mv\320;\223R\250;\330@\023=\310\350\360<\021\223\256\275\032OD=\355\302\003=\367\0362\274\346\'_\275,\310\367<\231\353\r=\014\362[=|F\271;rtu\275\2334h=\205\351O\275\244\330\003=\310F3\273?\2443\275`v%\275\322\215\253\274\310\021N=\300\341h\275\222\306\304\273\2134\234\274\342\252\'=\247\020\367\275\374.\210<q\230\024\275\226\013\214\274\037\n\266\272\243\213\357<\320$\335<\030,H\275\241\273\201\274c\340\363<>\021_=m\000\256<\306ZE<|\257`;H\001@;\t\302\235\273\022\204\335<\233p\004=44\016\275\\\313\003=\261uE\275\317\225\357<\025\350\327\274sd\033\275e\036\203\275Q\245\234<\252\247\306\273\265\300\222\274!\330\206=8\255J\275H)\017=]\351\331<\267L\204\2750A\241=\217\255\227\275(\257\305\275\336\223\331\275\224rw\274)\273$=\004\310\007\275\025\370\240<d\246\010\276\226vH\275\311\310\n=\310Q\\\275\000\320\007\274=\2266\275\037\233\265\274\352^\024\274\324\276\213\274#\262e\274\335U+\274/\3721\274\212q\000\275E\300z=\366m\"=\251\263{=Fl\233\274\2438H\275Bw\036=\340+\'\275\204\032\010=Z\214\026<\273\203\324\274\\a\342;<C\204<\362L\253<\024\333:\272\301\250\207\274\235\257\000=\227\236v=\034\0029=\267\177\032\275\025\010\227<\313\377a\275M\nA\274\246\\ =\211\221\276<j.s\274\273\337\220=\2136z\275\213Y-\275\020\213\315\275U\205#<\026K\366\274\265\031\267\273X\357[\275\227?\205;\020\t\032=\270\334\276\274\341g|\274\307\266\215;\256\274\365\274\n\013=\275h\254\010=\213\307\262\274\316\223\236\275\020m\342<x\330\034=\253\257R\275\267h\001<$\344\377<_\020\342\274\315Z\032\275\322/\211<\373<\203\274\323Z\235\274\257\177y=#\360[\2758E\203\273\313\300\251=D\236d=\312Ja<n\231I\275\020\"N\274\357\327t\275\263(\336<k\275\341;\n3A=_8g\274\330_\024=\016\255h=(\325\212\275\373\\\244=\255x%=9\321-<v\237\330<\345\231\251<\313\335\233=\370\301;=B\361\364\272\310:\007<.\201\367\2732\342\255\274\335/+=\273\320\033\275{k\032\274\234\3007\274\302\267\251;J\235\017\275\246\022\241\275)s\022\2744_l\273\037r\304\275\020I\245=\000a\225\274\365\023\r\275\311L\230;2\345@=\003\363\020\275\300\303O\274\200\270\300<\324\277\001;\0233\227<\010|^<\240\272\332\2731\r\225<\306\316\204\275\247\031\033\275\252l\262\274\211x%<\276\027\266<\310nE\275\350\302\032\2753!\025\275\243[\315<\240su<\213\246*=\237*\004=\t\321\273;\266\257\t=5\261@=\023\234\002>\024\362@\275\004\2473\273\374lX=\223 \270\274w[\344;\231\2070=p)\022\275_\217\254<\331\267\206\275|\324\375\273F\213~\275?L\317<`\235(=J\2041=\311`]=S\361a\274\330O\237=\270\262,\274\235s\215=\002\245\213\274\240\270*\275\326\345\375\272\227\304=<\273\265\221\274c)\206<\034O\272;\031\255\304<\333\300\016=\350\014\246\275\223Et\275[\276\240=LGi:\2702\225\273\353K\326\274x\3336\275w\226]=\033S\263\273\214\333P\274\2454/=\234\033\240<\323\177\207\275p\242\310<a\353\312<]\366q=p\302e\274&\250K\274Vc\037\275\325\2322= \3025\275\330\004P<#N\253=\205\252\333=L(\t=\375\021]<8\300\260<\356\014\t=;{A=1p\275\274%\372?=\356\007x<\r\371\031\275\201.v\274\207\023\234\274B\303\215<\"\022\224=1\277\235\2752\354N\275$p^\273\3046\203\275\t\303L<\2753\213<\007\251\331<\001\201\264<l\242\210=\006\003\223\274\255\346\331\273\362u\027=\311\275[\275\3159\375:\311\223\350\273\210N\336\274\224r\314=w\313\312\274eM\002\275O@\376\274\340\265\221\275\"r\346<\275\226\031\2750\226\247\273\0207\013=dV\313\275\032\236\222=q\"#\274&Z\305\2747\037\265\274\n\351\274\274pV\320<\265\000o\275-\344\272<O\235\267\274\371\273I\275\342=\324<z\270\201\275\255\356O=O\2647<~q2\275\227d\355<.c\000\274\007E_={2h=\244\272\005=!\030\031=y/\254\275\325\316\004\274\300\211\215\274\266\020\001<\235\224&=\271_\005\273\321\331\313=TU\236<\244bv<VN\227\273\272\340\030=\207\013\234\275\350C\014=N ;7r\227a\275]\301K\275wzB<\033\361\275<\372s\346\274\027\251J\275\363M\360<\252\017\254\274L.\276<\\H\'=j\3528\275\336I\013=\371t\361\274\255\234\262<]5r\274\262\213\276\274\006\017\224\274k\010\214=\025\'\264=0C\250\274 U\257:7\r\271\274U3F\274\300\257\021\275O\010\241\275*\241~;\027}_\275.\270Q\275l\362\242=\250\332H;\356\201\024=\014\310\254\274,\273\317=C\204\214\274l\357t\273\240\353\035\275\033{;=ju[<p3\265=f\330\023=>W&=\201\300F\275\334@\203\2755\325\377<\026%-<\327\023\035=4\374\246=\206\007\212\273\0356\010\276S^\311;\"\330\312=\350\2624\273\332\303[=V@5=A\200\005=\317\300\271\275u\303\\\275\305\037\277<\215\014\364\274\262\274\316\274\322\341\237\275\360\240\306=\213w\303\270\300Xz=z\271\322\275\372\213R<\354\032\320<o\201d<hiI\275\245\036\306\274\3451\341\274\001\272\205;\346?|=(\330\036=\363\207\323\274N\363\013\275\010\376\033=\025\330\363<\2474\026<\231\024{\274\266\213\035\275\267\373\307\274u\235T\273n\342\306=#B\332<G\021D=\312\206\240\275\355\022\010\275\356\006\374<\374\246\272\273\036p\031=\006\337\267<]\t\201=W\300E<;k\247<\333\246\001\275\254y\025;W\370\276\274K\032\244\275H\367\263\274\324\360\267\274\372\335`=\214\265\005=A\237\200;\356\261t=\254W\351\273\353\'\\\275/\245\361;E\220\026\275E;\363\273\216sd\275\332\341r=\314\211\216\2759<\"\274\224\'a={\274V\274\222\244\204\274`\362v\274\373\353\216\275\246F\025\274X\\\013=y\361\212\275,\340k\275\300\014\317=9o=<\016\321n\274\213{\251\274\303$\254=tr\316\274\214\271\230= m\227\272\256\235\307<\016\340\250\275W\332\211\275\204,\373;o;\007\275\261\333\221\274S\2511\275_6\254<\030d\027<\017\013@<\260\311\303=r\204\205=A,\312\273uk>=\031\362\000\273Y\023[\275[\036\267\272\350\246\024\275\213\315\200\2736\236y<\375~@=\355K\267\274\203\2009\275\210\205\216\275f\335\203=\006`\302<\370\372\243=.\231\236:\305k\214\275\330`\202\275\2103\022=\254\337M\273\235\r(<\360\343\353\273\254x\322\274\034\035\022=\030\033\r\275(F3=\007=Y<\211\013\233\274\363\267R=\210\220o=V\363\227\275)\324\210\275\030c\200\275\'\242\027=8\"\237\275P\256\320\274\213\271,\275\366\177\312\2741\032@\274\226^8=M\341\032\275e\0265\275\004\337\300\274D\364y=\242%V\274\274jJ<)\212\013\274\370\004\202<r\004\256\274^pD=V\231\213=\302\033\007:\221\371\007\275\036\243\026\2754H\001=\220\226?\274\245\263\024\275\337\016\372;O\242<\275\313\036\377\2748}\343\275\025\242\260\273\267\031\251\275\366\005\3469+\345\200=S_\321<\357o\254\2742u\336\275nn6\275\212\200\300=\360i\322\274X\245\242\273\327\371\237:\331\037.=E\345\321\274j\365\204\275\360\266]\274\ry\247<?u\264<|\203\252\274$\333_\275\001\356\363;\207\337\221<5\323n=\211&\211<\326\261\032<<\337\322\274$s\377\273c\241\251<\270\313$=D)L\275/\233P\275w~+\275^\357\240\275B\263\222<\245y\327\274\245\320\235\273\356\254X= Ae<\253\235\360\274!\301\032\274\232S\002=\364\363.:\375;\310<\007\253[=f\246\270\274\314U\324;\\\235\333<v\022\311;X\002\303\267\300\005=\274\273\004\237\273\267Vw=\265\251\213<\347\010k\275\314\222<;=\t\200\2745\240\215=\2142\203\275\214<\017\275\216.^\275\334\334\276\275v?\022\274\340\263\267\274\313\001W\274\300m\026\275\336\355\001\273\236]N\275\377\223\'\275\\\253\037=\365\037\274\273\370\030\233=\350D\020\275\023N\343;\240$\033\274\016\251\241<C\301$\275?\207\253\274\317\272\017\275\264\230\026=*}Z\272\213\353\250<Gi4\274\216l\017<|\026\231\272I[\365\274s\235]\275:\214\022<+\336g\275p=\237\272\201\330\212<ke\345;c\220\312\274\021\323y</\200\251\274i\353\017<\322i%\2746!\217\274#r\333\275LZ\254<\352\305\270\275o!\t=\276\243t\274\355\356\251<\021#\311\274\030\212\311\274\322\004\310\274\0210\221\275\261\207\212\273\025R\007\276\345\324\240\274\\\037+=c\007 =\034\342\344=\275@y\274\262\0074\275%\340.=E\177\234\274\343>\232=\234M\r\275bT\223\275\235\177\n=\304-\233<Y\224\316=F\203\007=\034\240\007\276_m\207\274o\336\310\274\314W#=\t\262\034\2753\351\'\274\035\332\251\275\273\0069=v4\256=ZGu\274+\333\025\275/{\231;\275\323\256\275\360\006\006\275\021\317\025\275\275t\331<y\031;\275\262\372\342\274*\307\216=\332\340&=,=\355\275\363\363r\2743#2\274\246\352\357;\340~\037=\362\337\214\2754!\t\275\321\312\325<\302\005\264=\373@\010==\206\252\2757{\003\272\202\343\037<\013\025\245\275\t<\374</\020\222<\360\356@=\3143\214\274\250LL=%\273\333<\203\277\267=\236\363\247\274\303\2163=\254hx\274\272\321\335=\263\237\014\275\017\213#\273\276\257\254=\013g\274\275\211\200p=\221\031\250<\222\241\236=\316\377\256\275\321\2510\273\233\371T<\235\324e=\347\350\035\275)\"\363<\347\250\240=?\377\206;7QQ=\364\336\225=G\243%=\213\2225<D%\313\274X\377\261=<Sm=\355\362\000\275\325\374\244\273\204\244/<b\375\031\274\357-\272\272\003\2446;}\312\354<\260\373\000=\251o,\275\302W[<\352\306n\275)\253_\275\214\0130\275b\306\350;\031}\'<\3176;<\365\354~=\001\366\240<y\363\223\274\326\252\035\275\005P\215=A\204\"\275Q\261\314;?-\305:\202\271\263<\311\350\315:\272\275\232\275\235*/\275\230\313\016\274\272\205;=\216\027\006\275\n\036\t=g\261\371\274\355\231O\274km(;W\340\002=\352=\273<LDf=\363.\230\274 \334\270\274G\032\260\275\212D\203\275\355\177\231\275\202\273\365<\365\230\302<\251\247\223\274,!\225=\236\306,\275\353\333B<V%F=\311\304\271\273m\343,=\"\025.\273\005)\200\274\017\314\213<}\023\264\274\020\262E<\266Q\355;\211+b=\215\3432\271v\373\231=\010\316\212=\352j!\275\217\270\215<\324\321\331\274[\303E\275\210\021-\274\373\2622;S\333&\275\'0\357<\337\036\354<\371T\t=#\241Y\2755\344\230\273\3635\033\275\224\200S\275|\234=;<,4\275\267\307\361\274:\200\"\274\346C\244\274{\325T\272\212\367\020=\276\372J=\276\2242=F\022\001=D\360\214\275\237\235\213=/\376Q\275\305\227Z\2738\376y\274\275D\032<\303\375\323\274\364O\310;\222\221O\274\021\235=\275\002\000Y\273\207\270\257;\002l4\274\315+r<\032\306\207\274\310{N\274\212\323\253\275_\345\335;\270\347\202\274\221\347c\274Y\'\304<\371\333\335:\305\365\320=u\332d\274\367\207\034\275\363lS=\235,1\275\214\350E\275w\330\241=$\330\024\275\366\312\267=X\211O\274\254\035\357<\362=\231=\217\220L\275\265\007\204=(*\264<3\365\222\275E[\264<+\274n\275k\t\231\275-]\273\274R\314n<N!\262;\177\320\002\275f\3266=\034\001\334\274\363\t\346\274\266\263\260\2746\305Y=\333\353%\274*\273\351<\024\301S\275uK\3719\316\017\214<\270^\266\275\350\264`;\3762X=\327\031\323\274\026\333\"\274\274\245o\274{#\262\274\t\376r=\032q/=\316\352\200\275\303\031\235\275\243\022\013<\262N\317<>\361[=\201\215\023=\275\265\202<\301\341<\275\020\232\232:\031\210\220\274\216\213\340\274\326\246`=E!\317=\273\230\224;\255l\325\275\203k\310\274\005iA;\033s\306;=d\\<\344\242/=\260E\r=\373[\252<f\205C\275\t\226\225<\340\301A\274<\376\366<\342\274\024\275\305\322C\275\024\251\254\274G\2103\275v\247\305\274\016\030\024\275\3340\301\274\325\201\260<\364\241\027\275\356\234\222\275\215\250j<xxK\274\030\320\266\275\261T:\275:\232t\272Sm1<\2071\027\275\211\277\227\275y\352\366<\253\2666==\311Y\275\214\275\255\2730\325\207\2757k\244<]\370S=\255\257N\275\242\275\256=\330\375\255;\247U\255\274\033\016\350:\\\237\354\272\272\316\027\274\206l\237<E{\236;_\303\014\274\323\026}\275\314Uz\273\371\307f=\244\3160\275\272\"\263\273I\304\226<n\305\256\274\177\357\232\275,S:\274kW\022\273GZ\301=\206#^<\277(\235;\313\231\026\275\247\204\255=\221\341&<\'^<\274Rs\211\274\352|\300<|$\231=\256\321\017=\302f\364<\310\251\241\274\324}\224\2740\254R=\0166\324<0(\201=E\317\340\274T\207 ;;\330\216\274\317\354U\274S\3379\2750y\354=f\261\002=\2237\355\274\266Lo=\017\274\226<\017\255H\275s\000%<\013\224\257<z!>=U\247m\274\t\347\017=&\305\010=$\rB=y\355\237<\002\003\202\275m\262k=\307\014C\275\253\366\007=\014K4=\327Be=\205]\002\2744\365\211\275\027\254\330<\222\325l<\325\371U\275\324#\335\275m\221]\275\201\023\312\274\233\305\347;\032/\373\273\364\333\202\275\000i\022<J\333\315=\0267}=\"`\215\275\263\356}=\314/O=W}\357<\357M\203\275\010l\256<\214\265\356<\372\"\346\274\263mN\274\354\302\211\275w\000\001=C\200\310\271\355LD\275^\301\344\274j\271 \274`\224\307\274^@!=\016\000\345\271\244\370\026\275 \265\241=#\354g\275\316\234-=\036g4<\346\274L=\230\373\255\274\357+\022\275\024\342\r<\023Gh\274\276S\033=\212#!<\277\270n\275\026\247\320=\364\021\225;Vw\035=\256\201\244\274\201\322\305\274\302\361\025=\377\206n\275\2212\032\275\027W}9/\010\034<\262\177\216=\346L6\275\252\274T=6j\240\274O=\337\274\2561\300\274+qW=\006\r/\275\347\377-=\251%\202=)z\215\275qJJ=\263L%\274\026\316\255\275M$\220\275\235 m\274\326\244\006=\335n\336\273@\234\355<L\354?=\260\360\210=\005\372g=\253\222\327\271\344\326 \270W\0200\275\024\265&=\365V\216\273f\020\002>\340d\272;m\0148\274\345\035\321<\267\244R<\321\242\207=u\026\230\275\025\005s\275\"\336N<j\027x\275\022\3414;b\377)\273\006\320\350\274\272\n\333\272<\362&\275\344G\312;\367\'2\275<\"\353;L\214\353<\031\374\272<\177\317Y\273\207\374\365\2744W\026=\317\232\226\274\207vW\274\351#1\275\025$\374\274z:\214=\014d;\274\236S2\274v\264m\275+\033\007<\312l\225\274q\251\215\274q\357\305<\003\203\231<\252\033^\275`\037\347\275\356\273T=\275\360y\275\023\242\210\274\374\031\n=\222\331\376<\352\252o=B\034\021<n\312\221=}1\322<\3734\254\274\272?e\274^1\273<J\266\376\273\307^\225<\375\371`<\364\007\267\274\034\311\313=\363\353\366\274\003D\277\274\\\372\013=\276x\030=\202\021\204=2w\200\275g\300\244<x<\002=\302t\251\274Q\276\023\275\036\364\276<\257\314\037\274\227\353\377<\237G7\275m\003\330\273\265\201\263<C\267\020=\033O,=\"\342k<J\252@\275:\246\200\273\2161\206=,\225\203\275\"\272f\275\201Q\026\275\276I`\274\032\363\366\274\357{\225=\360\325\203\275\357>\221\273\3446\237<\302\214\225<]P,=\371\245q\275\026m\036=\006v@=A\010\013=\300\207\355\274B\303\363\274\033ei\274\275\350\033=\021#\030\275\311\033?=\213`\006\275\357\246\275\275h.q\275zS\215<c\336\020;\020\334::\034\346\\=\254\274\013=\271q\364\274\014\322I\273\204\336\013\275\001<h\275\260*\004<\262\371\251\274\210\377\222\274TB\250\275;\236E\275\230\n\226<\357\234\342\272\335\242\334<\376.\000=:j\256\273(\336Q\275)\3311=\037p\004=\341\210\355;\205-\213< \353\003\2750\320\351<\026\374\323\272\341py<\001&\226=\325\3531\274\356U{\274\2755\'<DY\024\274\036\021s<\\\030\023\275\346\016-\275\374\202\303<\340^\201\274\354fo:\305\341\266\274\346\337\035\274\364\237\322=O{\250\271\325s*=jB\355\273\333\373\016\275\236\301\214\275l\324x=to\233\273W\0075\275\032\241\234\274]3%\275\235\2706<@\265+\272`b\345\273\355\237\347\274\002\350r\275:\213\241=\231\323\232\275\214\316\337\274|b\270<WL\004\274(a#=\"B\204<\250*;=\254D\366\274NT#<\223\226]=&\213\214<\243\224\035\275L\310\375\272\376\373\300\274\261|@=\326}\305<\3174\027\275yE\305\274J\303\237\275IR\177\274\316M\037\275\304,\240\274\203J\202\273/~\235=\031\260\337\274\322x,\275\253>n=xh\016=\000\210\342\273\272\033\356<]\252E=\225\242C=\262\016f\273\377k\346\274v\\\250\273-\276\267=\242\317\246\274\'\353\324<\233F\205=\262\361\030:\177\332\230=RE\017=\275A\254=\300\3548\275\347\237\033=\315_\224\274\262-\t<\262\324\263<\037`\231\274.&\267\275Zpo\273s\243\'<\374U!\274Yu\253\275\244\221\320=\336#-=\366\037*=\330s%=E\035\204\274\323o\265<\314\246\245\274\243\357\n\275`k\215=\3078\370\273\262\262\023\275\030\330\302<M\373\023:\000Jp;\261\331\363:\177_\002=O\225\335:\243\246<:B\300)=\032]&\274|Z\013<\223\311\226\274\246\357$<\222\342\032\274\347i\022\2744\017\215\274\221\342\312\273\317s1=\rB1\274u\271><2\315\352=\264d\341\274\023\"\201\275\217\370m\275{\260\223=.\325\220\274m)\014=m\212\342=y\347\211\275 \276\202=\366\201`\274\021\251\036<t\354@<G,\"\275\216\322\267=\032S\266\274;J\r=\251\330\272\273\317\211\211<\343k\207\275\204\210x\275x@\2318\0031.\273\240\350\206<\035\267x<\031\260\007\274\253$~\274\204\243t\274pI\026;\241W!;\243R\037\275\344\025r\275\365\001\320\273J\312\363\274\255\262l\274\304\223v\274\347\013\004=\211\225\225\274I\210\264\272\030D\355\2744,\200<\221<\243\274\205c\300<\320\261]\275\242J\342\273\303\375j\274\207\314\234\274lR\024>i\357^\275l\304r<+\203\205\274i\ts\273\357{\r=6\357\230\275\373\315\212=\031\257\313\274\277\\#<\024\026\230\275Y\021\317\274C\207i<\023Y\302\275Fo\260\2756v\017=\371\263\022\275\002J\023<\374\264<\275\000\377C<\2378\270\274:\202\233<\342\340N<E\014\314\275\222i\257\273\002\202\205\274\247 \020\275\272\376\210\274w\031\375<\017\274\235=\344tp\275<</=X\006i\274\315\376\226\273\003\177C\275\226\216w<\220/\2569p\225B\275\013\340\001\276\233ls=\224y\035=\244J\031={\\\266=VD\272\275\301\306\005\274\3223\224\274\233\002\254\275o\206\037\275\224\345\002=\037=(=T\035\034=\017\200\245\273\206\266\t<\235y\203\275\300\311[\275\273\013\325;\245\024\207\272\240+\331\273[\017e\274a6,\275\207`\230\275\261\261\023<\372\220)=\332\210\333\274\213\026\252=\200~O<~\357H<\354<6=\374p\336\275\020\352\031=\017m\272\274T\365\314;\021\227!\275\t\327\033<\310b\213=\001*5\274\021\"\216<-\254\235\274\312\013\221\273\335\353\374:\340\247E\274\334\261\217<Q\032\301=\001E6\275\307\220O\275\006\212\310\274\273\321\204=\317{\240=\325\235\212=\242\311\014\276c\205\035\274\001\341\211\275\2200\200\271g\253.\274\227#\031=I\304\203\273P\266\360\274\236\366\314=QEF=f\032\254\274\036\271A<\262\210\034=\226\246\314\274\\=\224\273O\275\364:\235\354N<\265\3156\273|\345\225<\\\3456=VPY\275\332\301U\275\220\266\271\274\206\027m=\002\223z\275\026>\255\275@C\344=^\274\243=MN\n\275\0374\262\275\2454X\275\'\346\230\274\027P\004<~[9=\227<&=\345\367[\275\235Z\000=\026T\264=\3748\037\273\n\227\026\275U\332\346\273\305\304\237<y\277\026\2759k\316=\016+\377<?\314/\275:\373\030=\355\027\\\274\272\377\222<f\002\205\273\300\243\\;\275eL< \342\177=\335h\216\275\257\266/=*C\254<\324\335N;\266d\025\274\366#(\274J1\336\274\364L!=\204\227\232\275\234\307\036<\001(\252\274^h\016<\366\225\024\2757&\224\275[O\302=\331\342\306\274\220\260\372\273W\013\302\274\235\257\010=\363\036\262<\020\177\316\275\245,f=\243\301\315\274\250>I=4\321=\275J\334%\275\362^\210\275\321\210A\275\004\017l\275\226\256\211\274\301\005J\275wJ\321\275H\373\032<\2553\267\274\202\036\345\274H\323\261\273\034&P\275IBm;Y-%=\220\036^\274\375FC=\t\r&\275\244\177\317\274\240\267\334<\225\277\312=Aj\t\275\275)\023\275\000\321\007\275\312\321\206\274(\351o\274pu0=\216\314\233<\202qF=\226\2562\274\016P\303<\t!\316\272T\365f\275\233\'4=\022\321\367;\230\214\225=^B\3569B\010\236;\241\376\353\275\272\246}\275\211\200\316\274V\317\237\274\230\374\360<#\231)<\"\241\336<\350\231\201\275[\310u\273\362~h\275n\304\336\274\354/\240=W\232\353;7~\260<\205n%\276\245%\274<P=\213\275\3148S=\251\231\227\275b\"\r\275\337\231\235\274\307\324\027=\034\017\034<}L\376\274\257\337D;\006V\343<\035,\357\274jeo\275\376\024\236=b|\001\275\357\032V=\371\030\355\275\273\032\356<\001\323\251=\264\367E<\017\360O\273\267B\014>9\027F\272L\r\232=~V8<.dF\275\227\363\362;6f\207<\337\204\257<\004g\237\274\222\3643\274\215\205\024=4\024\036=\361!|=\216\310\246<\336\376\010\275\034>\361\275\222\353)=\301\305K=8\243\211<\306l\302\274\240\225T;\263\260\037\275a\227\003=\336\245\371<R\"\361\274\"\'c\271\271\233E<\332\242\t=,%\327<iu`<q\265\207\275\233^\261\274>\333\207;\220a\014\275\231\022+\275\352vy\274n\242\366;\001\315/\273\353a\363<\210\222\224\272\374\r,<5h\214=\014K\334\274m\363\037<\221v\313<\000E\203\275\346D\216<\000\242\206=\231^G\274\017\025\256;2\346e=\t\231(<H:H=\010c[\275\235\214\265\273\226D\354=\023\222\274\274\331\316.\275\3630}=\002D\n\275%\370\366<\323\365\207\274\t\305\202\275\371/c=\366\354\254<T\264\265<\263\357\200:\201[s\274T\357\231\275+\253\304<^\223\033=\310\335\016=f\357U<\350\346d\275\003\312t\275X\024\237\275\034\225\t\275S\372@=\247\333\254\274\336i\377\273\225\222\351<\035\014\234;I\204\367<\347\340M\274\010\307`\275\202\266\215<A?\005=\367!\320\272\331\"\212\274\206\202\330;&B\307\274X\332\206=\353\013\267;\337\300\233\275\324C==[A\241:\034n\021<P\233\204<\341\010\345<K(\371<i2\246<\025\341#<\230\232\207<{_\250\274%\320==\323\336\034=\232\332\356\274\261\222l\275\373\327\304\274\002-`\275Tc,=+^\315=\035E\325\274]\010\231<H\207\310\274\336\250\266\275\345Z\"\275\310\n\331\273\351\033\t\275oP\355<\306C\021=h\320\021<7\021\242\275\271}q=C\341?=\036\237M\275X\202\235=\351yW\274\343\275h=\325M%<<\305\341\274>\373\000\274z\262]=\'\222l\274w\3050\275\323\2243\275\2225\324;\377.3\275\'\231\303;\347\201t\273\253\363\022\275\217\343\222\273B\017C=\364b\0219`\321X\275i>\025\274\262\"\216=\304\307\316\274H-\233\275\226N\301<\277X\244=\301\323 =w\325\272\274\261\250\007\275\231)m\275/\242K\274T~\202\274Idt=\352i]\275]\034\210;/\320\004\273\252\320\340\273\302V7=,\343\204<\303$\n<\240\034\311<V\3100=\022j4\275\022~\232\275\313\352\335;\226\372\341\274N\341w=su^=5=\320=\233.\312;\240\036:\274\251\204\257<d\nt\272\363g\331\275\035\263\271<\247\231\254=\246\341\344<\004^\273;\361\212\203\275[KS;q\375J<\317G\301\275\035\025\237:\236f\237\274Zo\252=\201\023\301;\347g\r\2748\035\372:\344T\267\275\255\345Z\275\270%?\275\002\004\232<\372\252~\275\001\276\031\275S\214\362\274\377\223\210<\277\2715\275\262\254L\275\227\2719\275lc-\275\326OA\2758t\242\275n\363\227=\t\006\023=\207}\200=\307\373P\274X\232Y;\305\373\243=\257P}=\242<\357\274\217\t\303\274~*\207=u)R=\250\366\303=\367\337\032\275\247\030\240<|\201\326\274\260\024\376\274t3(\275)B\343\274\271\244\360\274\177\221j\273\346\210I\270IO\247\275\373\340\341<\247+-\274\2267\373<>,\341\2746\354#\275\232y)=\016m\361;M\236\243<\270\207\262\274bm\320<\202\375\\\275\220N\372\274\200\030\272\273\347%\253\274\2148K\275n\340\002=\262\373\226\274\246\244\254\275X\036\223;E\264\252=\237\212\202\274|\344\236<\232=\205<L\237L= \351\317<<TJ=B$\353<T\277\'=\025W\361\274B\307(=\322-\227\275\202\327\005\273\315z\005</\254\320;\020\001\245=8\"g\274\353\343I<q\216\371<\006N\277\274,\260h;\333\360\005\275\346*\315<W\264F\275h\355\264<\355\263\277\274\351PK=^;\004=\275\234\234\273c\207>=\207\314\004=y\364^\274!J\3319\014\036\025\274\216\333\034=Ih(\275W\353\235=\373\177\212=\351v\220;\370\030\211=8\373\215\275\316\277\320<C\337\211<\030\017Y\274\243p|\273*\301\217=\022\334\335\273\201a\277<c\032\023<\010\273\013=\025V\203=\277\\U\275jYV<\321*\273\275\224\\\014=\306\350\215\275\020M\"<\3073\245\2732ms\273\225\333\346=\377\377k\275\330xH=\250\246\357\274\325#\375\273\216D\335;,\316\034<\256\020\205=\031\003\266:\037\006d<u[\323:\233L\\=\221?\200\275\276\324\320<\346\336\320\274\361\0329\275\322\223\033<C.\244<\026\206\025\275\224\315 =-\317\353;\2209G\275:\213\330<\352\366?=\232\034\010\275dv\242\275\276\203\201\2756\0318\275\357:\\=\323\253\177\273\356f\016\275\023\342\332\273-P\231\271\234:L\274\333\337\245\275\263\375\021\2758\210\206\275\222\322\221\274-\246i\274\337s\217<\253\020\320=\360{\010=\252X\274<\241Q\217\274D\2750\275`#\256\275\270-/\274j\372\017\276\007i\304\274\262G\255<\034\264\221\273\3166)=\251\214M<\2468\340=\356\300/=\237I\326=\257-\251\273\211^\204\274q.\013=\013\272\207\274\t4W\275\211\363\213=\311O\301\274\365U\235\275\017k\263\274g\247Q\275\032N\231=~\300w\274{H}\274\275\3329\275\214\276\033<y%2\273\037\037/<\321Yk\274 jG<R\355\254\275p\344\240\272\010x\327\274\340j/<\313\204\341\273\242g\377=\233\343\353\274\236\370-=^\375\345\273v\373\360<\302\034\205\274\036\353^\275\315\245\262\274\336\240n;\232\331\221<E\271I\275;\212\207=\247\335\006\274 \026\r\275\371I\r;\327\241\257\275\242\371\202=\016\330\275\274\314\236\037\275\276\\f\275\305\320\201=7\365G\275\356\3529\275\241\004\030=\265>\222=F\247W=\2204\016<\'\266\211=M\027{\275C5\373\273\026!\331<\341\266D\273g\2402\273v|\271\274|\302\006=j\250\n\275\273\013\271\274\342\325\303=\342TF=\277\343\221\2758_v=\261p[\275%\371\261=\203\226\211<(\301\307\274\177K\222\275\266\016\224:V\210\357\273\2279]=\302\024=\275\205jc<\330\3105\273\343\355M=I \244\274\0166\363\271\210\346^;\301\314U=\275\376\226\275\365.\263<h(\010=\250\0375=2\021\200=\316\177\237\274\255T\\;\234\r/=\244\327\370\273\264\003o</\357\231\274L\363\237=Z\320\036<M\237F<\3309\370\2718\014o=-IB\274\321\274\002\275\257\337\004\275x\034I=\221\334\254=uf\374\274\216\016{<\346\r\364\273\210Yv\275U\333\024\274B\277\226=\343S\244=\264$N=\340|j\275s\000\342\274\357X\334\275\324\r\013=\314\340\006\275\204\215V\275c\375\201\275T\3552\275\202\017\000\273c\037N\274\240\302T\275\244\3644<j\373+\275\330?\343\274\354o\017\274\236\036x\275\313o\376\274n\tB\274\010\365\255<\213*\302;&\320\227\274\336\'\021=n\362\226\274\307\313\312<\177k\344\274\037Q\307\273\263\373\271;a\000j=.\207m;\251z\216\272\3030\001=\224\252\267<YK;;\210\304\202;\335v\241<O\250$=\213jb\274\234\307\357<\365\361\341;\254\032;;R\315\216\274\263\213\371<\263\206\323\274\330N\276<n&\217<\301\017\236\274mA\025=~\006\004=\245^}\275\354\376\351\274\202\267\367;3\311C\275A=\222\275A>Q=],7=s\222\250<\241\"\243<\272\351\263\273\362\0267\274_y\352;\356\321\323<\027G\355\275\272\276k;@\034\345;D95<5l@\273I;\226\274u\3516=\234\302U=O\251\350\274\027\006\251;\306\240\206<\213\316\327:V\301\371<b\217&=\351\007\216<mD\237<\022\212(<\tD\246=\010\233?<i1&=\346\tF\274a9F\275\236q\200=\000\2634=\327\345\035<\273a\034\275\035\377U=\230\255\033\275z\036\220\274\237\365\371<\264\270D\272\303\256\226\275\'\021\221\274\236\236#;\200\r\312;\236\315.=\270\272\204=\270\375\010=\243\266\357;W7\247=d2\332\27400\026<\037\257\276\275\352\367c\274\276\2013\275v\344Z=s\266\035\275\255\352\311;M\365\337<3\302O\274\010\275\221=V\271\314\274\r*\230\274 \037\361;h\"\220=\263\"q\275\332\355\232<z\263!<[YG\274\024\"\324\274\2108M=\206\253^;\366\273\034\276\363\301Y\274S\277\240\275k\013f=\211\343(=iY\010\275=\267\223\274Z\003T\275KU%=ZM1\275\300R\027\275\0057M<\223\321\275=\263\264\366\274\016\tw\272\242\027\257;\013\026\013<\374\\r= l\022\275\002\031\350\274\242f\005\275\257\362&\275;\223;\275[j\330\274Z\356\023=\355\331k\275\177@\013\274\034\n\272<P\274{\274\377\227\214<A\343\217\274\016\001u:I\363(\275\252\377\377\274P\007\006=\211\273\252\275\206\264\276\275\221\353\215<\322]\303\274L\253{<\367\350\321\274\311d\310\274\371\203]=k\031\237\274\"\375\016=\3533\021=]\303\252<r:\037=\351\351\017=\013h\031<\226\334\250<\366a\032=\351\341_\275\214JP=j\275$:\025\244@\275J\000&\274\3234\325\275\r\314\326\274&+g</\275\n\275];h;\253\177\362<#\235Y\273+\354Y<g\331\001=Q\034\246=>\351d=\274\227\006\274\220\244\216=\244\201\275;\360\262$\2750\227\371<\275\334U\275\226=\262<\rM[<1L\242<\007\276\013=\243%\006\275\301c\233\275\335]\024\275G\"\320\274sM\250\274\336\232B=\334\214\344\274c#\203=\256\'\035\275i\2365=h\303\033=\013\263\006\275\350}\230\274+P#\275\360?\252\274\024xB=s\266P\274\350\360q\273\\%\375\274\252\006x\274\340\004g:\351\030\312<%\025\221=\350$\312\274\372\227\311\274 -F=\001\367\200\275\323\351\032\275p\366\237=~\227\020<!v\272\274\364\225\000<xV}<\025t\274<n\375\256\274\207\225\360<\306[\030\275\337\016\223<\226Hi=\3732\'=A\263q;\250N\026:\177\030+=\332\000\241=\026\264\354\275\226\014U=\233\202l=A@\245\275^\2557\275\223\324\233<\321\276\261<\357\301\273\275k\227\264<H\211]\275a\322\220\275\005\253p<\317\202/\274\277\024M=Ce\023<\320!`\275 \353\224\275\355\007e\274W\207&\274Od\260\275}\264F<\376c\257\275x\332\365\274\345\357\224\273R\001\013>$\365\366<\206\231u=;L\2469\022\302{=)\214j\274\031\013#=\2509\303\274\262k\013\273\367\232\002=!\226\236\272\315\224%=\323S\251<PV(=\'J\2019 \342\237\274\363\255a\275<\210\203<\213\n8=\333B\025>\032\rv<\346\300?\274\3043b=\007\343h<\350e\304\274\255\217\304\274nR\211\275\352\364\270<\223\275\203=i\277W\275\222\330\000=\251I\376<\\G\341;\203B\351;\003c\316\274\260D\202=\247\315V<E~[\274\370\320\230<\001\304\271=9t$<\343\213O<\254\212\253\274\376\365\327<\302(\331\274\327*\312=\200\342\005\274\034\315:\275\366-\255\275\200%\217=c\252N=\274\221;<qsM\275\036\311\272<u~*\2758\202\250;\213n\350=\345w\031=\177\226\323\274\213\016\202\2751S\036\275,\030\247\275\3524\276;\233G\245=\360\004\3359\225\034\202\274\205O\225\275%\203\205<0tK<\221\034\271\274\007e2\275\037\037\326\274,\001\224=[\033L=L\321\024\275b\022+;\252\225\247<\311uI=uP\3108\201J\242<PDb<}[(\275\340\342\303\272\261\314-\275OS\255\274b\314\006\275\007\357\206\275\033\325\000=\313\265\327\274}\021\355\274\235\323%\275\364\337\037<\242\320\227:\374?\263<\010\317\312\274;\377v\275\3358?=\237\023T\274ZA\010<\333=\030\274\242\305\030=\207)\020<\306\222S\2747\350\024\275\0107D<\r\032\215<u\207\273\275#z\233\274\334X\320\272\r\366\203\274A\342p\274\261\252\235\274\267\261\226<}\356\030\272\010\350G\275<;*\275\257\223S\274\301\371\037=\267)\010=KF\234=y0\222\275\242\221\201=h\247\322\273\010\370e<\314\210\266<@\205V\274\302\002\231\275RM+\272\033\022\276;\263\0179\275n\374L\275\267SP\275^3\027\274\2663\365=D\277/<\212\001N\273\017S\211<\262\366\214<\305\346\343<B\276a<\017\347\"\274\350V\222\275\360_\255={\232\020=iM\351\271\363S\351<\202\303#\275\257\375\007\275/\375\014\275\013\254l\275\205N\204=\303\204\027\275\031\030\230<[\332\230<N2\220<\0371\206\275\360\305h\275\222\232Y=\234i\374=h\270\270<V\244\260\274\n\307\014=\005jS\275DV\246<\0236\243\274\261h\241=\025\223b=\214ha\275\221n\244<\207!]\275\323\277\'\276!\026\013\274m\345\271;\247\237\204\275\332\013\356\272\342\205M\2757#k=\325h\t<\007\302\336<\324\376\371\274\372\337`=\020\256\277\273EZO\274d>\306\274F\340\311<)\202O\275\317\373\203\274\367Ry=\215\217\255\274\211}\347\274\334\303\231;\354\364\223\272\310\2559\275\2248q=\245\211\256\275F\300w\274\247\247\300<\317\022\010<`\005\350<Q\231\315<\367$\222<\260F\346\273\233\216\265\273\306\347\211\275-\346\206<\034W\217=\203\013\034<>\260\204\274\244\203\237\273i\273\025\276\006\274\214\275p\003K=],\202=\'\334N\273\207\004\240=K\332\241\275\025;\256\274\347#\t=I\2052\275{\307\022\275\225\365\250=\027_\216\272\212\272C\274\352\014)=~\223\346=\334\373\366\274L\0314\275t4\341\272W<\277\274\307x9\274\224\322.\275\325\213\372<i]\002=\202\366T;nFF=\361D\215=\300\252\215<.\374\231<\025u\316=L]G\275\364\211\370:\370f\333<\025\214m=\014\034\206\272\033\037\301\274\245\301\345<2T\265=\231QX=W\370O<Ky\344\275\304\234\'\272\215\215\260;\242b\212\275?\251\037=\263\365a=\353\352T\273\201\200\243;\022\237\327<\340\214\343=`_%=\366bI=\373\025\230\274w\223\201\274\302R\002\275\376\231\202\274\332\0075\275\300\007;\275\036\025;\275\343\241^\275kid\275]\2369=\3242\000=\030m\245\273)\313\372\273\320O\031< \262\274;|\3772=D\313\334\275a\220\256\274b\350\004\275>\010\002=\325\341\226=\324H\273;\242\264\254\274f\215\331=!\376\245<\270mD<\373\334\r\275\376-\376\274O\345\356\274\260\033\275\273F\200\014\275\257\321x\275\317gj\275Z\232-\274\222\006\022\274]\351\216<\256 \226=\245\030@\275\251\024\325\274l1\023=\031\024\036\2755Je\274\211\347\374<\336\272\021\274\207\007m=\344#\220\274uS\306\273\230\320\014\274\364M\235\272\305\252\006\275\3256\234=&\265g\273\023\376\317\274\363\321\235\273w^b\274\202\303\023<\205Y@\275\320V\234\274`\243\032=3\346`<\310\276\257=\221\034&;\346-\303\273\370\303\354\274T\3779\274\363\234=<d\032\366;=^\343\274`\325:\275U\226\315<\231`\354<\371\034\347\274\372\037\312\274d\321y\2743\206\230\275E\327\241=\257\215n<\215b\246\274\007\327\024\274\361Z\301<\342\304\206\274(D\213\274q\342\371;\272\007\205:\343qT\274\371@\326<\315Y\004\275\016je=\212k\235\274\277\200J\275\224\356\221;\263!I=\307X\201\274\204\260\204<\215\226#=};\250;\2605\231\275i\351\356\275;>\240\2747\350\342\274\037\227\220<8J\277\275Z\354?<\374\316P\274\226\"&\275[\206h\2749\265/\275#\325\355\275\367n\037<\005m\016\275\333gW\275K\002b\271*\315\025\275<g\354=\240e\223<0\313\017<\340\362\364;U\225*\275\361vF\275\023\000\306<\224\263\212<\256q\231\274\270\002\264<\275\261\253<Su\007=\2442f=\014\244\031\274&\262\245=\023T%\275G\305W=D(\202<.\311\023=UM\235\275\177\010\271<\327\355h=\327\365U=\330\361\031\275\246\341\347<\277\205\211=N0P\273\336&\243<I\207L=\360vB=\210\330w=\254I\356\275\267\010\370<\340T\023\275\374\325,=\305L)\275\265#J\275\203\020\251<1B\201\274\262\366\035<J\270#\272Z\206\254\270(\232\271\275\315\034E\275\\\366\210\2751\215J\275\320#\235=\037c\246;\235\234\201\274\314)\202\275\030\204^\274f\265\303<\233\177\370\273\325\314m<\270\236\210\274\371\027\034=\324r\264<\250c\257\275\366Q(\274m\350\222=!\000\020\275\373\245\032\274\326\0375\275\013\032o\271]\030\013;Z\215\360\275}\230\261\273\343\246\033=\275PD<\353\350\343<~2\007>\241\343\313\274\364\"\201\274\212\034\035\275S\255\024=\265&v<>! \275\236Y\203\274\177>\346\2746\010A\275.\346d<\351\205\206=0!<<\271o\257\274\314\334\250\275\353\224[;\336*Z\275\345\247\177\275\006-\366;\300\354Q=>*\341=hH\337\273\205\242\260<\332P\242\275W\374\330=\262s\363\272a\010\253<V{\004=s{\256\275Iw\031=\312\351\364<A_\252=\350VT\275\216\243\347\274\247\031\270\275CB5<F,\023=\254\'R=\3665F\275\301\321\351\273\247\034\354\274\223\267\036=l\324\243\273~.K=\330D\337<9U+\275\245$\205<)\365\202\275\253\245r\275\324&\034<\231\247\346;\t_\232<?\2266\274o0+:\023\367e\275\204f\301\274\244\266\214\275vcV\275\363\204\357\273-7\202=\032\036;\274PIh<\277\327\226\274p&[;\277\027\035:\030\025W=\267\377\303\274;\235\316=\201\242>=;F\356;\266h\217\275\265vA\275\347\264\035\275\326\307%=\310!\004=\220\377\025\275d\364\372\274!\343\200;G-M\275\203\217S;\353\005j\274\'\037\326\275\222\356\363\274d\266\335:C\026\226:G\035E\274C\333\236\275\321|\316;y-\302\274\254\3009=r\360\024=\266\256\256;)\262O\275p\227q<+\007_\275\217\222\000\275\r\"a\274\030\340\360<\234\226\267\274p\324A\275\247\236\206\273\207\'9<\323z\362\274\342\347R<\363\022\034\275\253\027I\275\035\300\216\273q-,\275 \225\226\272\255\002$:\000\031\241\274\3565\030\274GAV=J\325\250=Rm\007\274\340\213o=F\216:\275\317\342\\\275|\'\356<E13\275\232^\016>y\007#\275i\266C\2754\245s\274<\252F=\344\350\201\274\207\233\264\273\337\2239=\177\246C=#s\237:\201lq\274\237\321\032=E\033\222\274W>;\275\233{/\274\304,{\275n#X=\252\222\004=\036J!\274,S\330<\241q,:\305\221\026\2743\251\367<^J\021<yw\276\275\243FB=v&*=\234xm<\377\225\311:&7\"\275C{\276=b\257[\275s\206\t\275-S\204\274\250{\317\274\241W\324\274\233\366\265\273\300\306\353\272\204\330\336\274\r\364\023=1\224\"<\307\317o;\270\252\350<\031\177$\275\266\331\370<7\207T<\010\'\033=v\227;;\336\203\033<_,\241<\016.\326<\220E\202\273\207v\267<*\345\250\275\257\2144=-\220X=\214\222Q\275\360\336\267<\305\002\314\275\262\362\302\273\377\375w;\371NB<\014$\241=\3223\210\274x\242\361\274\024xU=\017J\026=E\354\355<;H\236\275\241JD\274|1\254\275gzF<\206\212\364\274\260}\205\275\251p\242\275\370\206\'=$\\\227\274\236\2658\275\342>Z\275\025\265\234<F\217\322<\254\367\265<\000\343*<\360\246\313\275\013=\332<\013rE;jw\027\275\231!X\275\317\026O\275}\350W\275s\205\026\273\251\226\223=]\254q<\035\031}\274:\201\004\275\3335[;1k\264<\020\267\332<\226\344\265\274\302\n\307\275\220:#=\241\252$\274\2554\233=11\306\274\344\030?\275\321u\004\275\362\353\026\275\224\032\274<3\243L<\317\253s\275]\315\371\274B\262\020\274\237\245:<\306\234\257=\353\320\212\275\346\303\037\274\337\246\"\275O\342\021\275s\334A=\033r\006\275[\366\320<\213Jc\271kh\243=\320~\372<\324\\\266<\241v\016=c\327:\274l\213L=\260\271\242\274\350\261\"=M[X=}\017R<\362\304\222\274\216\247\346;\r\004|<\252\023\367<\0135E<!Uo<\007M9\275\0235\225=^\025=\275\321U\242\274#!\016\274\320\305\307<u\271t\275\375.U=&F7\275\257\375\337\275pO\347\275w\001l<[n\333;\202\374M=\345\276\227\273u\346\253\275\346B\260\275\354\'\202\274\367\\\300\274\014\342W\275\326\267\371;=m\323\275\3166h\274\221m\212<\365\032J<\226\242\013=\r\246\333;\275J\"=90\334\274\272\355\357<M\022&\274\314\333M=\343\\\251=\036\031\";\023\225\007\275\207\016\344<1_b\275?\351\214\275q\262\322<\350\200\005\275\211w?=`\303\236\274d\366\250<\342@h=\212Y\n=\301\354+\2756a\002\276\277\361\214\275D\002\305\275@\2174\274=q\324\274\0323\006\275\216\370\005;x\220\354\274\336\234a=I\327\211=\304j@\275\260\351\315\274\tA\344<E\216\t\275\005\2741\274yj\272=\264G\255\274\340|n=\363$\236\274\\\305\t=\240\344\323<\004Rd\275dp\n\275j\036z\275`\341*=9J\026=\341\242\222=\260\200\310\274\212|\230<Q\003<=_\371\210\274\310\0130\275\257H\'<\224\376?\275\001\357-\274\277\210\364<u\343\374\2741=0=9\254<<\314\340\r\274\322x\260\275\204\337\227=wh!\274M#\270<t\215\020\275D+\023\275\272El\275j\353\241\274w\342\030=\034j\277<\342\201k\275:zZ\275\356\330+<\215Q\207=\314\354\022\275\226/\033\274\210\257\263\274\216<\204:V\340\351=\223y%=\203=\007\2738B\307<4\025\006\275\2034\016=\214W\342<\3533\211\275\22210\274\'\244\251\275\300`\267;\227\257\024=\321\252D\275\361\305\353\275\200:F\275\254\256\216\275\216\007\241<\272m\371\274\2256\271<>\224\037\274\300\004\002=\350\214:\275\313\"`<f\330\235=_\344\022\275\'\357J\274jT\310\274a\245\224\274_\006\212=c[`\275\323g\033<\235\260\251\274\013\2156\275\313cV<\341\211B\274*)\335;[T7\274\201%_=\312\3570\275\026\237\361\273\305\276\243\275\036\223\276\275\270\031\237\275\344r =\345\377)<\303\356P\275\337\t\352\273\036\366\306\275\227W$=\225W\225\275\001\3756\275G\223\211\274\224\262\373\274DH\237\274\262\272\250<y/\231\273\342\010C=+\327\245\2740:\252\273]\266\221\275\274\214\355\274\221.D<\340\214\200<\346O\377\275\343\026\021\275c\237\025\275h\232&\274.\245\206=\334z\374<\375\366\354\274\306\334\206<^\025\224\275P\330\224\274\222\201\223<\234Xt\275\273\271!\275\250g\303<c_\373\273Q\310\304=&\2675=\01338\275\323\354i\275c\210\357\273\251\034\326\274\252\035(\275RG\251<\257\334%\275\025\322\302\274\266\267\t=,O\214\275\231b|\273[\272q;%\033w\274\311\244\235\275*\212\262\273\252s\270\273\322\370,\275\260\0020\275Aq\033=\312C\304<|\253:\274\030\364\257;\303\347J\274\341\025\210<W\342\031<\266\253-<\341I\276\271\220\201\032=eP\267\274\210q\315\273\344\252J\275\345\024\016=\030\234\222\2750!&\275\371\010\005<)\272\024\275\257\201j\274\251\2370\274z\263M<\023p\252\272\333\355c=\223\\P\275\305z\013\275\215\316\210\275\000\255.=s\335j=~\315\001\275\276\241\"=\201\000\246=\023\334\207\274\364\270z\274\314\267\224\275F+G\275\230\376\256<q\372\026=\272!\225\2750<+<Q\"K\275\211\234\306\272\241\351`=\311\003e\275.\241\347\274g0/=\311\253\235\274\363 \n\274\001d\243\274\014\277\357\273\005\000\230\274p\"\233\275\347\303\334;--h\271\001B\320<\361\020&\275\367\026\341;k\242\026\275\305\017\224\275y\332\366\272\371\327\256<\314\222\214<\260\315\272\274\257\310\332\273H\021\345\275\026SZ\275n\023B=\262?\220=T\013\001\275C\323\205=\374\017J\274\377\227\t=\3778\222\274\231}`<\333\363Y\275f\361\034=AA\351\274\344\310\204\275\031\257\301=*\021\316\274\366\374\013\275\202\222\025=,@9\274\210\307-=g~\272=\177x\225=\237\251\321\2741\365o<\010\262*\275\302r\245\274\204]R\275\333\266a\275\265\251f\274n^O=\307\2428=\337\006\r=jk\t=\240\330\214\270\376|\207\275rj\224=C_\324\274l\374\267\274U\017\200\275\350\374\221\275\364\336\350\273\366g\313:\235\361\226<\253\320p\275\221\340R<\222\024\236\275\201\361)\274\024\324j;)\323\021\274\2755\353<\2030\303<\273h\374\272\177T3\273\261\212\215\274\312\036\204\275\'\315R\275\3642j\2742\246\n=\267\3776=\224n\267;bby\274\207\032\255;,\000\230;=19=\276\220\305;\366\3362<3\341\036;\267\036x\274<R\307\275\307\000\200<\033\311\347<\275\247\215=\350%\'\274pcR\275o\336==\367;\373\274\236X\024\275d\321$=\354\324\335\2757\302\350<\271\266\002=\355=\377<z\330|<\362(\205<\n\221\215=\245\277V\275\317\253\345\275\215\323\037\275\233\262\267;\255\201^=\330\211\'<\211\252\331\274\002\250\220=\200\216\003\275\372sD\275\362\260\252\275\262\342K\275\303\260\"\275\331f\004\275W2,=\260\227T\275\300\370\233\275;\310B=m\244l\275L\243\031=\240\372c\274\243@\364<\363&\341\273N\2621\274\220L\271\274\223\t\327\274I\001\217<\317FL\275qxe<\213\244\010\273\314\377\245=V\236\206<\205\271\271:\3244><\321\313O\275W\342\202=\343\376\017\275\354#7=LB6\275\213\3410\274g\3672=\n\351x\274\301L\371;\207\"\035=\303h\201\275Ea\"\274\366\007@=\205\013\010\275Z\355\326\274p\210~\275\031;\333<+\257\240=+\233\203\274\244Y\263\274\223C\204=\351$\355\275\336w\217\274\020L\301\274o\373:\275\241\014\340\273\030\311)\274\030g\374\273\232\354\332;0\243\252<1\r\260:\207\030\212=\234\367\327\274\314\337\325\273\023R\346\274\202\214\006\275\367\313P=5Ba\275:\312\272\274\231\361l<\201\373\227\275\324\272\026\275\267\324\030\275\312y\251\275\360\324\\=\005\023\025\274E\3617\274G\024\253\275\266\000\247\275\262$\230\274\315\270\331=#\310#\275\312\177\204\275\321\302z=\337\356\014<\030\204\024\275iY\020\275{\224\017\276\r\242r=\024\031\262=\027.\353\2731:\030\275\310\313\010\276S-\324\274F\375\300<\217q|\275\375\204\036\275Q4\023=\026\352y=*\n\005=E<\035\275\367\331\243\275\322\027\332\273\377\306\303\274\016\353e\275\355\376\315\274_~\014\274\2510\225=+>\004=\321$\014\274\005&\222<\033\306\376\275Y\213V=\222\262\235<}\224\255\274n9l=-[4\273~B\356<\rAu\275\'\261\266<\250?\240<\304\0046<\r\310\016\273\264$o\275\n\220\264;\013\226\220\27456=\275\224\225{\275\315\027\342<\376i4<\373\276\235\275\324s5\2757\374\005\275\267t\r=\340\346\235\274\325*\347<\027-\252=&d\214=`\275\026\274\211i\210\273P\230\000=\330o-=\357\325\006<*A\204\273\234\315\031\275\350\260\021;#\020$\275\237\237\"\275\013\262V\274\372\236\177\275\224Ih\274A\036\306;\001\177\272\2747\335\246\274$\360B=\317\332F\275\315T\275\274\251^\225\274\010\336+\275\254\030\355\274\227\226\346\2749\006\374<\361\"?\275\017\342\374\273\236\255\'=\357\301t=fs\305\275\276XQ\274\35197\274j\316\355\274l\210\221\275\223L\371;\3275\375\274\274\344.<\265\203\236\273a\303\273\274\220\302V\274\2544\035\275\315\220\032\275T\247i\274xb\235=\002\313b<]\365\232<Qv$\275\231B\316\274\354u\005=\223:n<v\341\210\275\016lU\274&\251\317\273\360\242}=\250?\227=\252Y\232\275\375\254\330<\032\324\203\275\231m6\275\320\237==1a\266\274\277*\370\2732Z\366\274\333h\030<\027\371\017=\023xy<\372\324 \274\321I\013=\253!\257<v\312\000=\212\274[\275\r\271;\275\'\313\032=\"\351(=\037\334N=\340\266\224\273\220\204u;zn\3639\322\227\377;\323\357\001\274\243\027\246=\246L\016\275\026Lg\275\004o\373\274\3209\243<\177\360\364\273j\306\345\274\362\3725\275\313\021\372<Z\204P\273&3\362<\341\003\332=\346x\202=\357[\013\275\275\3041;\307d\373\274\031H\306=S\305\307<\317\305$=\272\024\002=\035\333\247\2753\001 <j\221\267\275\376`\240\274\205f\213\275\246\256\253\275P\022\333<\033|;<]\'\034\275\005\311\326\273\227\301 <\004\300\005=6\027\333<\242\256\200\274\345\331#=\033\376\203\274\356#\022\275\204\363\350\273\1779T=\277,N\275\212\226==+\260}<\257\205\t\275\262\266B<y\n\010=\362\340\245\274\246n\013>\303+z\275\302gT=\237.J\275\255b\3579~)\261<x\315\010=\007\326\033=\317#\324<\302g\023=g:\014\274\303\226L=\320\322F\274r\027\256=\202\363\005\273\256v\276:\177\000\034=\271l\246\274WZW<\200\305H\275\300SN\275\340N&<\242\0139=\202\302\025\275\206\305\214=|\233G\275\n\222/<[hk\275\350]+\275~\260\215<\264m\363\274,P\226\275\265\241!\275,\203\022\275\206\210\300<y\002\320;}\223\245=@36=\254g\346<>\0027=\370\205==\r\326\351<I\304\020=\364\301d<pX\222=\303$\035=\250\322\347;\257\267\235<\203\200\325\275\027!\363<\210\024D\275\220d\266<y\010\366;%\346\263\275\224\212+<7\'\270;\315/\222\274\'q\215\272B\200\201\274L[\347=\355\247\004\275\255\3064\275\026eY<w}\\=\317\210[\275b\022\262;\014\240\235=\004\272\352\274\202\316\253<\000\203i\275G\351\220=\2227\311\273\227\006i=\016\022\002=\316.\006\275\306\024D\274! \365\274\203\036}=\306\036\'\275q\277\023\274(b\016\275\340\274\252\271\314=A<\273\346x=\3577\306;\311l\300\275\241^\032\275|g0\275\325\207\324\275\331\353;=\330z)=\303hE<w\326\263\274qhy\275h\206\366:l\312\342<V\334\260\275d\342\212<\036\221\374\275\3324\027=\201\211(\275\"\024\311\275H\210G\273\244C\000>\216\236 \275-03<o+2\273\214A\371\275\3137}=\n\030Z\275]\335\245=\334D\265\275\240\325\305\273\375\253\205=\034\261\016\275\001\262\212\274\352-\014\275\317\\\006\275\203\017w<\035\307\377\274}Z/<\032\030\207\274\212\274\201\275M\326\003=\363\364\255\267\235`\221\275h\221\262;\237\260\324\273x\360\025\275\257X\000\275\363L\222=\252\030X=\'x\255;>/^:t\"\261;\365@W=\034\307\361<_\032x\275\313*\372\2744w\027<~\241H\274\216l\224=f`x=\nB\033<\273\241\244\274My\227=/\000\266\274\261\305\202\275\364\201\346=\315\336t\274\253\2549=;\376h<5\362\227\275\001Q\230;\033l}=.\366\177\274-\254\\=N\307\'=\373\355\240\275,\302\230<k\374\201\275\0372\232\273\016\265\016\273w\316A=`\212\020\275S\026\236;\272%j\275\010\226\004\276\247\031\220=\277\206|=\313Rw\275\371\210y\275\2576\225=\n\313\222\275\232\223)\275\017~\010=\372\241\313<7@$<YP\346\274\272r\326<\363ES=6\2554\275tq\265\274\254\033t\275yx?\275/\347\001=\263\227_\2750/\250\274Q\026\250<\325.\256=\007\250\334\272\"\"F\275\004\376C<\201\317\224<\223\363\014\275\330k\003=\034\243r\275ha\342;\311\345\233\274`\263\\\274\310\231\340\274\003d\024=\231\016`\274\375\331\334\274\314\370\370;\177h{\273\201C1\274\264S\035=T1\270\2730\303\311<\224\3730\274\302\376\003\273\267\355V\275\275\026\234=\035>\004=\253\321\365\272\336\177\227\274\005oO\273i|@=\234\351A\275)4\177=\206\202\245\274\2339\305<50\303\274ZbX<\233\226\371<n46\275\265sG\275\003x\345;y\242\026=#\2066\275\225\246\222<M\001w\274\024P1<\243x\264\273\021\200\240=X.\020=\252\255\006=L|\206=\263\253};\205\021k<\270!\035\274=#7\274\303a\310<\241\222V=\000\261\002\275\265\235\266<A?2\275\013\033\001\275u\237Q=\247\177=\275N&!\275\3722\035\275\375\364T\275DH\n\275\243\301+\275z\217y\275\271;\244\274\310M%=%\367\251\274Q\241T\273y\271\245=\021E\023\275\217\215\242<\302.\207\274\031Yc\274\365e\201<\215D\336\273\373c\271<\213\226\006>\217\003\030<\312\027\245=\251\224\253<P\'i=\205\371\035=\320p-\275*m\215;\245P\255<sj\363\274\312\240\312<\013zS<\027\022\007\275\0255\373\274\360m\225\275\031g\267:\322\035\200\275\307<\001\275*\313\335<\367\341\"\274c\036\237\275\362\021\000<\310\013\300<\346\366\031=Z*\277\275h)\372:us+\274\246\033\302\274A\307+<\232\277.\275\224\345\377<5u7<\242!\"\275\214\242\356<,\315\251<\234\ty\275o\206!\275\217px\275f\206\220=\302\233?\274\025\276W\275\251\204\037=HEV\275\374\001\013<\253\025m\275\333\272\013\275@\342H\274;m5=\257\325Z=\276\333o<\241\267\336\274\377\356\273\275\220~\221\272\220\\\204\275m\322\332\274\370:\242=\216\243\231\275U1C=\212\302i=Y\336\234\275\343M\250\274\244yc\275{!@<\007#\246\272\035\220\266\274\nA\313\274^8\010=8\201\221=F`\265<\264\201\215\272=\3325=\373\265\350<\014b\020=\230\230\317\274c\033C<NrD\274$\334\016=\026C\240<\026j\303\273\322\033R<`&j\274qX \275v\016\007=t\270>=p\254\356:\362\254\302\274W\357\336\274\303\264\007;z:\031:\212oy\275\032i\314\274\n\326\252<\0136\311;L\300\246\274\312\364\203=6\317G\274\261\321\372<\226\272\371<;$\311<j\036\322\274\016\356\306\2756\365b=\327\250\204=6\311\343<\210\031k\275+\265\204=;\344\260\273XIX\273\335;\364\274\236FR\275\274\270\310<\375\244\226=\374s*<\357\2140=\253\203C=Lm\243\275\r\375\237\273\'\364\330\274r\005\032\275\363\237S=_\254\203;\207S\377\271\263\327\r=\270&g\275\367\036x\274 \345\373\274L\311}<L&R\274\021\177\240\275V\307s=\323%k=\351\354S\274\360\r\267=\311\301\265\274\327d\010<Y\264\225\275`\346\334<\002\022+;u\371\'=\355\221\037\2753\323\025=\235\217m\274o\322[=\243\0351=\324\316\345<\001\255A\275\344\224G=\260\232\275<\3239\362<`\345\033=s9\003=\255\035z\275\3528\216<%%\234\2745\273t\275V\374><g\334\216=0\0032\2748\211\255<\217?<=V;\246<\"\267\201\275\203\375\244<\300\362\300<<\236\377\2747\321\235\274\022\352W=\372\357$\275@\300\022\275\342*-\274\366\300\317<\241\2032\275\214\0301=n\211\r=\2539\200<\2150\262\274T\240\007=\226~\217=)\311\212\275\256\020&\275\374\202\225\275\276V\001=\271\215?\2751\324\274=\263\267\317\274\313AQ\275X\026\344\274qU<<;@\032=\263R\276<\2127\267=\306a\260<\206\211H<\313\177\243=&\3779<c\244\003;\264>U<y_c<H\026Q\275j_\370\274\273\266r\275\207l\'\275\360\\U\275\230\355\250\275I\026\036\273\301\370\006=\t\351e;\037AM\275.\231\253\274\364`\006=i\340\271\270f&\204<Psj\272\025\341\223\272\314\\\351\274\272\220\206<\r\302\270=XJ\207\2757\220}:\307\010O<\353o\017\275\361\230\344<\3347\024\275\277\347_\272\355\213H=\031\3642\275\241[\236\274\363w\031\275Z\370?=\341\303i\2745\017$<\3144^\275>\211$\275\177\343\240\274\n\211\337=\332G\313\274\234\2134\275\023\334>\274N\262\204=\277\203\036\2746\372\232\274\264\314\307\273\020D\246<\341\250\212\275\272\364\256\274`\025\325=]\323\256\274\025\360\304\274g\320\014=\371\252\356\274\227\336T\2748\306\024\275\026\\\\\274\252,g=X\342\233\274\376\r\025<\370Bl=\273\025J=49==\024\256\276\273P0\343;\303w\231<m\252F:Y,Y=b\004\023\275\022?\207\272\307\252\370\274\264#\225\275\352H\225\275\312\3220\275\336^\n=\177\214\207;\276\214\376<\316l\375\273Q.L=\231\004~\275r\250\017=\341S+=ag\373\2738\036\010\275\236ot=!u\365\273\001cD\274g\324\256<\261\021\336\274\302)|<\207\037p=\023\007\200< \331B<G\330\343\274\002\001><\264\260\020\274\\D\026\275v\351E\275\364.\325\273\307\331\200\275.D&=MZ\364<|w\237\275\317\264\275\274\004R\203=\024\316\t=\267[Z\275\263\265\244;\273\r\204<\223\"\232=L/\252<\345\004C=\247\014\215=^\263T:\203\301\027\272\037\007\244\275\312u\302\2748G\277=\237\212i=?\034\231\274\237\010{=\374\244\362\273+F\203=\213T\372\274\r-\327<\312Bi\2752\t\232\274s\240\022\275k\005\313;#\332\224<\361\266\321\274~\224R\275\202\275\211\275:\266j=\007\200a\2758\262\t<\235\260\203\275\3375\237:QQ/\273\210\340\302\274:s\003\275\235\006~;|\375\201<|B\215=N\272{;\276\266q\274\262\031$\275\217o\276\275\273\001\307\274O\027\273\274=c\006\275\r2\002=l\037\223\273\307\t\023\273YM\232<\330\367\344\275\240\262\222\275\316\223\207=\266z\010\275\271\312\014=\033\363\326<\343\266A\275N\016%\275\313lX\275\235\341\364<A\300\272\275>\021\024;\305\263Y\274\345\336\024\275/\222,\274\316&\234\275M\235]\275\262-\202=b\010@\275\354*\r=KE\245\275\276(\310\275\365[\335<\366\202\241\274\317\342\275\273nOt<\022\213\375\274U\357\030\275L\254\031=t\362\t\275\353^\246\274\267\266\225\274\247\231\372<&f\216:\276::\275)\n\241<\222\201\307\274\341\367\274\275j\367n\274\315\251\227\272,\264\227\2759\323\003\274\230\241\212\2745\n\030=\230\022d;B\345\315<h\016\315\272\211\367\225\274\316\324\242\274qg\210=qSf\274\344\365\002\275\3078\035\2752}a=2\252\232\274^\003\206\2749\302\215=\237\023\261\275f\354\240;~b5=\216\313\232\274\003\271\267:\023\275B\273,\035\177\274\333\331\223\275\270\235i=A\355\221=4\2403=^\216[=$|\251\275\356\327\223\274\204 \236\275\036\033\271\275Rv\206=\335\256\352\274\230\343\203=\354W\357\274k\232\347\274s\027R\275\342Z\216\275\r\344\312\274j\224\263=g/\030=1H\352\274\3648\205=(G\367\273g%\231\274\372[\352<\024\306\201\274zBW=\226\371Z\275k\000\321=\226[%\275lt\275\275y\017\242\274z-<\275=Y\372\274y\030\232<\314\247\033\273\026\001\227<\374\025\264\273j\025B\275\373\247#\275\232\356\354\273d\200\217=t\203\232\274\365\335:<85\355\273\001Y\242\2757m\240<\362\301\004<\272\337\225<h+\323\274\301j9\275j\260\351;\356~\226\274\212\302\313\275%\376\206=(\343\205<\025\007i<\217\2327\2750\036\243<&`\t\275\016o\223\275\301\353\014\273Ah\005<u}\245\274\323;\304;\337<B\274~h\276<L\001\205<\312L\013=\372\312\035\275\220J\252\274\0204\243<T+\352=\262\362\023=_\204\017\275Z9\177\275W\301\177\275\374\272\374\274\022\3073\273_$\212=\213b\'<\232\023j\275c\376Z\275\306\307\234<\244\322\t\275\374!\020\275B\251a<\343Gx=\3274\021=\206\245\322:nA&=\316[b\275\332\025\221\275\204\030i\275\205\000\021=)3\030\274\211:\006>\030U\303\274!\273&\274\260\245\025\275\371.\330\274\261(}<9%\000=\204R\005=\250\214Y=\006\327\020=%\002\254<\363D\r=d\246\204\275\375\233\245\275u\016\\\275#)\204\272w\267)\274~\252h\275\210D\037<\206MM\275\353E\265=\312\230$=lmk\275-5\274=\377\212\251=\216\346r<\016A^\274\242>P\275\033L?\275\203p\305;\253\026\246<9-\276<\257A\014\275\263\325!\275\236\214\236<|\255^\274\273t\000=]\006\014=p\200\236=#\226\t;\026\246\327\275\210\005|\274\205\014\274\272e2\235=\342zM<\270\251\177=0\235\253\275\237\317[\275\000\037\037\275Y\346\027<u \272=gq\212<\372\007\"\275\266\203!<\270\352c\275?\235\036\275\266\0379:c\000\347;\370\023\310<\212\017\225<=^\330<\346\361{;\214\263\221;\336?\343;\225j\217\275\324\230\257\274\302\363m\275\346\317p=\004u_=M\352\231\275A\361X<\243\211\236\274\316\"\325<\211\230*\275\346\220^\274\232\346\313\274P\304\251\273\276\002\254\273x\356O<L\277\007\275P\347\363\274\217\332\341<\354a\324\2721\363\000=dt|\275J\210N<\326q\275\275\255&\002\274\233;<=7T\t;\315\007C\274\315\252E\275\306\321(\275\345x\371\275\267J\354;\034\260\017=\244t\037\274:\276\236<\350p\311<\220X\203=\001`6;\256\r\242<\262:X=\202\372\331\274_\375<\274\363\323\217\274n\246\264\275M\265\266;u\271Y=\335je=\212\016<<\3719\000;\322\2163\272\372\266\006=\356\310\004;\240\352a=\023\277L=\004\233{<N\315\036=\311o\301\275\215\310$\274K\301B\274\362\372I<\302\t/\275\202z\336\274}\330I<\352n\210=\264*:\274V\031\212<^\036|<|W\020\275JHD\273\033\244c\275!{\234<\340M\025=P\310\305\272\314z+;,\305\324=\006\260\320=t\315\304=\272C\001<=`\245\275a\262\201=\235\373\223<\232\233\262<\235\201\264\275\270@\343\274s7\314\274\324\220\030=\263\221\007<\020l_<\310\020\320=\253\2442\273\234W\215\273\367\255\034=\227\367_=\002e3\274\241\034@=\037\342\263<\242\205\214\274\233?F\275O~\301\272\203\033q\275*\246\263<\261\3229\275\312\301\037=/\341\023\275\255\214\302<=\271}\275\223r\244=\337\350\300\274\251\000\301=c\261\322\273qX\014\2744bn<x\273\316\274\317\346\207\275\204\374\026=\345\302\200<\337\r\372\274\177\327s\273\225\265\276;\364\244\221\274\330\2378=[X\261\272\206\276\035\2756\016\253\274\366\354\264;\315\351\026<\332}\214\275m\227\220;\276\240\025\275O\205\204\273n\300K<\353x\272<\274\334-=\276\362\241<brW\275 $C\274\317\305=\275|\255\206\275\244 h=\301d\256=\261c\004\275\200X3=0\321g;\321X\034=_\215?\275<\247\251\274!Y\264=^{4\274b\2771=\010G.\274\303\361?\275\207\ry=\360\241\n\2709r\013\275N\"\213;s\240\304;\214\313J=\177q\302<#\024\266\273\267Z\307=\253@ \275\362\204E=\211\257\220\275\202\332\016\2726-\213\274\310\246@=]\266\177\275\254\356\276\272\214u\014<\350sQ\275\2067m=\345\021J<:N\226=\327\217\315;ju\275\274Z^\">I:\304\274G\246;<>&\324\273KV\017=@\373\271\273\234\233]\274\203\235B<\356\204\t=\365\237N\273\214\n\324<\244\026U=\n\231\224<\014+\214<\374\251\003\274\311\006\013\275Kq\213<\251\005\030\274\326\345\276\274\026-F<cPz<\211\016\017;2\257D\275qv\277<r,\301\274pN\326\274\243\321`=aT\203\275K\034\220\2752\202\265\273\204\265<\275\377}\335;\301\300\344<iJ\003=\247S\353\274\251\243\247=\365\226-=\360&]\275tZ\270\272\033m\245\275h\027\235=\262\3412\275\316P\305\274\004\347b\275\213\t\n\275\310\3701=\312[Y<\321B\347\274IC\310\274\314\204\304\274q}\321=]\334%=\022v-\274\351\254U=\253[\276;P\353,\275\226=\n=\013\234\315\273\225$\276\275\364[\374<e\004\226\275\r\330@\275\013\"\250=F[\227\274C\202\302\274\252\372\252\275\303U\371<\313\220\221\275V\255\211\274\206\223\000=\031\206W\275q\325\274=\3037\257<\254\222\000\275\033\363\376<\267\'#\274*\330\251\275\344CD=\360e5\275\231y\311;\364C\236<\365JH;\353\322q\275\340\364\036=\235\035\223;\n\330P=8bD=\272U\222\275#\364\240\275\245\305\322;\340\317\023\275\021\340D\275]\215\257\273o\370\204<%\313\335<\035\364b\274\335\205\213\275\347x\365\274\213D\013<\262\206\274<\327\314O\275K\033y<-\370\227=iKo\275\347\340\211<8A\223<\352&\307\274\330\226\260=\227f,=\307\262\373;\371K\363\274\304\261w\275\001Yk\275<U\001<\212\302\312\273d`\004\274\013\017\224<\335\001%\275\230v\005=\255\3047\274y)\347\274\2504\210\275\332\025i\273\242\251\244\274\376\004G\274\224\000,=\362\246\362<\376\275\357\274\316pM\275J}\027<\272\257\303\2730\245\236=\304\304j=\300\006\340=li\204;x*\327=GEZ=_2G\273\"\223\330\274>\021\005\275\362iL\274GK\305<\235\243\363<\336Z\277=\305A\313\273y\024\227<\'\r==\263GR\274\351uY<A\260h\274X\314\346<\275\3166\274\306/\233\273I\277\266\274yy\032<\230\322E=\036\334p<\004y\025\272G\231\245<\013\330\205=\214\005M\274\322\000\360\273L\304\227\274\374*\006\275o72=\013\332\266\274\035\306\343\274S\251Y;.\304\244\273\026\324\272\275\277\036\362\272\303h?\274N\336\377\274\030\037\206\273\220r\377\274uz\251=w\216\262<\035\251:=\263V\226=\237\3404=J\373\';\216uq\275\355\263\000\274\216\275\317\273\032H*\275\340\356X=\202\\ \273\245\036\266=r\320K;\345\356\206\274\306f\376<J\234\204=\0268b<\255\370\037=10\262;\206\253\036\274\017\237\007\275P\367\"=\264M\177\274\270@[\275\317J\002\2752\r\n\275|\246\204\275\037\251~\275\217\006\014=GAA\275\243&\272:\316}i=x\232Q<\200\215\300\274\303\t\003=R\203\017\275\316nh\275E\335\005\275A9\010\2758\360\257\274\025\030M\274\004\334\223=<\360\227=\237\034E=\031\003\t\274B>\341<b6N\274\274\240\251\275\237\234\252\274F\'\250<\336\341\200=9\004\037\275A\246\226<\202O\033\275\250\204\330<Y\227\377<?\340\230\274\375m7:\275\206\337\274\034C\016<=\324\242<F\004\205=Y\361r\273\323\227\3539I\252\212\274\225IJ\275 \211F\274\210\264\310<\254@\235\275\225?5=.IE\2751\251\271\275\260\375\267=\222)r\275Q?\265<AH\203=\3525\223\274\261\350:=(\204\243;\\p\"\275\222\376*=\261\255\207;Y\246(\275M\202\235\275\021I\374<]\256\336\274\374_\020\276_\222\376<\332\377\000\275\317\314\222=K\366\215=\337\201\200\274\247\327o=\206w\n<\326\304 \275\0145\323<J`\241\273T\304\r\275\335\307\332\274\031@\021\2750\364g<\343\370!\274)?%\275:\022W\274;\373\262< 2b\274a\241\217<\324\220\222\274\230Gn=\211Z%=\223\202\266<\207E\201\275R\343Y\275\377\246Z<\372j\310\272\354N\327=\230ZL=\333?_\275l!\310;\345;O<u\271\272\275\204#\331<F\301\005\274{o\002=\227T\014\274zB[<\263C\211<\017,\206<%\357\014=\271\301\2249\2427\326\2748\335\032\275bTe\275\374\216\2349\001\031J\273\317\017P=\215\177j=\314\007\237\275\365\336\336\275\372\335C=c\\\232\274\377oI\275\230\030\017\276h]U<\037p\033\275\002\254\022\274o\374U<C\330n=\033\250|<\274\272t=\345W\020\275\245\340\213=`\3405\273\375\261\024=\3707\267<\034Y\232\273\345J\023\274\315\327\256=\330v\274<I\237\220\273\242+\316\274wH-\2754\017\351\274\321\210\202=t\202\306:)\th\274\000\334\250\275\214\231P=\207D\231\275&\267\035\275o5$\275\026C\232\274\024\325\231\275\371\314Y\274\001^\346\271\345\006,<\317_{\2755\362G\274\275eK<\365\326\026\275vwH<\257\324X\275\264\224\032\275\000\331\032=2\3324=to\013\274\203?\266<k\346\247\272\326W[=\364h[\275\303\210\237\275\002}\204\275\202\345j\275\3665\001\275\231\311\3439e|t\275\276\361H=EM\353\275\207\314\361\274L\225\216\275\314\3459=\035\330\n>\236\254\222\275\231j\327\274\"\252%\273`\021-=9\350\233=\357\307:=\221>;=\214\336\257\275\036\204\031\275\334\377\321\274c\000\210\275\256\224\227\274\020\273o<\007Y\210\275{\264~\275\275\240\221=Owu\275kk\251=9\313!\275\365q\255\274g\010S\275\231\325h=\264\374\217==\300l\275\001z\376\274\271\336\313=j\245x\273\307\271\351\274J\212\207;/\r\305\274\214\211\276\274\304\377l<jL,=\270,7=\202L\307<)\260\267;\223\234\033\275\016\351\022\2753\333<\275MN\222\274\372ZK\273\003\232\334\274:\030\316;~|h;\362h\257<\365\301\375<\232\320\004\275\322\232H\274\3031\236\275\367\340\361\274 \220\260<\325\260\n\274K>\306<w\260T<\273\261\372<w\357\302;\260O\004\275\3044y\275ZiM\275\216\005\347<\201\335\301;|\373/=\312-\376<\003\210p=\253Z\223\273Dy\211;Bc*=1\275\353\272/\356\326\274RJ\321<\236\2314=\204\370\254<<<E\275\006D\265;f\3729=\246_\341<\342\002\030\274\224\201\263;:\260?=(<\276;\340dZ\275\036\354g\272\376\202Q<\364\034\212\273\317\375\225\275\357\362\024<\302\271\r=^\237\207\274\224Q/\274)\027.=GW|\275\212\240\307;fy\014\274\026\365\356\274\315\370B<\342Q\342\273\363\263T\275\254\227\265<g17\275\270\235!=\372\336\007:s\274\345:\343\027\332\275\303^O;U\365F\273<\000\242<=\256T\274l\366\001>\350\370C\275\250\210^\275\221e\260\275 %\206<l\240\010;\321\252\227\275\270\027\253=\271\017\235<\242\306U\275\362\364\n\275\r\010\t=iF\205\275\274\216\217\275\333o\267\274>\360\024\275J\236\024\275\214?\010>\306p\260=\037\270\361=\335\3461\275\237?t\275t?Z\275\031\331\013:r\360\255<Y\033\260\274\371\377\306\274\033\300\036\274&\3732\275&\210?=\305\330\0379\273\335b=JD\214\274d3J\275\342\377\027\275_\213\205\274\322\315s\275\252o\342<\241Fn\275\324\306\316\273\247wJ\274\035\026\273<\230}J<\333\253\026\275\2179\226=\3312>;\2770\251<`\313\242\2758\234\272<\245\271=\274\371P3=!\353[\274c~/=F\217D\275\326\3234\275\351q!<\0025@:\2163\231<\253e\235\273Z+\003\2757O\007<\201h\215\2742\204\037\275\372\245\222=\350\274{<;\014\t\275\247S\312\274\257+\267=\347\032\200\274\320\\k\274\271Ov\273\242\320\332:\034 \221=p_\241\275\201\344\216<b\322\025\274:\335\352\2747\336\254\275\314.\r\2732\252\313\274\017W\276\274b\263\251<\340\357\342<\274\315\025=\033:\317\2728\'\006\275zo\203=*\003`\275\261W\211=\201\222~\274\366\242\'=\366\"\207\275q\240!\275\375%&\275\002\307O9\006\300m\275\307\341o\275\340\260S\274UP <)XU;z\014\'\274\301\004G\275\231\360\322\274\r\245\262=nU\300;\325\004\013\275?P\3079.\361p\274[0\367\275g`\300\273\343\316*\274\000\330g<\237\273\215\274\217\372*\275\377\367w=f*%=\255a\200\274i\332\210\274~\3432=\032L\230<\211c,\275\030<\217=\325\223v\275s\350?=\204,\n\2757\324\023\273\032\304_\274<\270\256\274\336\307\262<$B\345\274MCH\2731xQ<\247\240\253\275\2234i<\335)=<`\233\324<\307\016P\274`\340\244\275\324\251\307\274\215\227I\275M9\211=\364\342\211=\303\334\360\275j\r\005\274\252\365\200;\337L\261=\222\341\240;Br5\274t\252\207\275\351\20009`;\220;\261\227#\274\304\330Z\275-\316)\275\330\216$\274Xc\324\275\310\tW<\007\033-\275\211\355\n=\026\232`=\230\370!=m\013w\275.\344\222\274\354\245\227\274&1\262<\010W)\275\202YV=\345\tz\274\253\336\305<\3622\363\274\307\371\272\274\001\014\371\2722R&<\354\353\016<V\226\352\274\024\'q=\002\270\235\272\375\305:\275w\245\014<\243J\212<\032\302\274;\256\352\275\274)\r\332;D\220U=\325\034\222\275\226\372$;[\230\031:\007\320\373=)\000G=h\233\301\274A\366\022>\270\354^\275e\340\362\274D\006\357\274\235\356\211=t).;\342\213\204;\212qK=^v\037=Hs\216\275H\201\007=5}\335\275\327s\215;\263\331<\275\364HZ<\363\351\330;\032OH=\322\001\322\275&\320\327;\251k\270\274\227*\\\273\004\023\371\272\014\013\376\273p\036=;\242\034\000\274\206\031\302\274\234^\330<(\304\305<\0169\034=\357\241\034<l%/=\276O\307\274\266\"[\274\303}\210\275\320\3454<B(`\273D\355\342=s=\223\273P\224\201\275&1W\275\377\037\'=u\2257=\016\2706;\265/\265;\374\374\333\274\2207\311\274\024\030\202=\2404D\274\213\215\360<o\030\311<\332\253\202;\324\203\211=\372\370\315\274\275^\275\274\305c\027\274x+\004\275\014\357\213;[W\312:\267\260\025\271\222\241\366\273\320\010\250<)\036G\274\265\020\316;\350\236\007\275w\210{=\307~\013\275\030sh<\014\340\237=Wx\270\274gmy\275\335C\304\275\372\014\265\275F\271\007\274\221\331V\273\026\231\266\2752\010\215\275\357o\n<G\3423<4\317\303<\335\372v=\333K\002<\223\271\022\275i\330I\275\357\305\024=\206\2612=E\326\214=\322\021\362<\370\203T\274\277 h=\002\331\220=\265\'H=\205\346\022=A\356\226<\373*\313\275\'&\250=\214[q=\034\3724=\340\246\217\273;\203W\275[\005F=\352/\240<To\201\273\031\211^=\241\2106=\nI\202\274v#\256\275\344FI=)T\321=VX\234=\365\246n=@\217\274=\276\351\002\275\210`%\275\"\n\317<\212\031I\274f\360\256<\367\244\261\274\344\333\031=\310\013\270\275%\267\210<y\177\340\272\325M_\274\240\311\310\275\205\031\232\274\271\307u<\232\'\256\275\254\373u<\270\326F\275\007x\024\275>\330\240\274D0\302\273Q\024t=^FP\275\304\316\235\275\203L\213\274(\377\033=g\266\032<\273Vk\274;\033)\273\322UC=\257\275\251\275\r\231\010<\306\\\001\274WC\221=\010\340\246\274a\014\345\274\024\334\026=\267\304c=\030 \336<\306\334\373\274\022\206\231<\3119\225\272q\366\307<\030F(=\022\363b=\336\331!=F$\305\274\205\n\r\275\357g-=\375r\237;l\256I\275\246\317W\274\207\260\221<\244\260/=\"N\355\274\223\360\206\2744lk\274$\206l=\332\346v=\254\235\016=\271\231D;Hh\370<\'\206\233<\204X\271\275\315U\037\275\035\343\352\274\354\000\r=\325\330!\275y\031\330\274\303zS\275b\322D<V\325\365\273\207s\340<\331\225O<j7\\\274\'V\r=\355\302\013\275\022@s=\245\274\021\275viM<4&(=a\336\000=?D2<v\321`\275[}\367;m\0070=\342n\343<t\3448\273\'\342\367;\007\265\027=\357\021\375<\371\030\n;\002k\r=\330\244|\274\035p\211\274\225N\233\275\231\346\022\274\027\022U\275\000\200A\275\323\031[;{\307;\274\305\031\212=\251\207\177<@1\'=\357@$=\227\271\211\275H\002(\275\325\347c\275\227\302\250<,\016\265<\300\255o=@\373\260\274b(\323\270\032\217\034=\335\207\232\275G\307\254<\034\276R\274\327c\017<\017Ii<3dN=\276\251\201\275E\305\035<\244\024Q\275\313\315_=\334r\346\274\344\315r\275,\242j\275\363\035\n=^c\223\274{AY=E\231\212<XF\337\274\260?E\274\004Z\177=\232\244\311<\265:\016=k\353\244=,\230\223=\227tU;^\023\005\275#pD\275\233\034\256=\210\352F\274\215\363\246:sA%<\031\305\203\273_\315\235\2752\244\207<@\341&:,\251\221=*\023\207<\263U\'=\232\255\020\275\233\3437<\312\250\221\274/\034X\275\352\t\007\275\3049\251=b]\224\275\210\300\303\273\013_\375:O\223\244\273\274Q\223\275\252I\200=\2477\265:B\265\306\274\320\276\363<M\372\322<\200_&=\3102\324<`\247y=\270\241\177<\327\215\237\273\000r =!\354M\275\312\243\223=l\353r\274\351\225>\273!\352h\274Q\000\000=\267,\036<#\246\234\273\251\233\257\273a\265\257=WN\355\274\355\202J\275\324\0208\275w0\001\274;\236\220\275|\322\216;\3037\347<\\\350B\275<\014\241<\264c\261:\3020\204<\322\236\300\274\257\021\232\275! \267:\n\305Q=\330\203\204<\264\344\214=\341\0374=\227h\263=\356\252\036\274\331\007a\275r\210\005=\304\350\320<\300\221\212=by\245\274\3548n\275\373 \177=)L\225=\000B\373\273\003Q\261\275\273\307/=\236\225o=\322\3554=\356\355J<\210\3351=\345\375\301\275\247\230\026\275\014\354n\275(\2156\275\354_\243<m_.\275\341\364[=\225\020\036\275g\300\212\274\001p\261<@bw=\300\371\375:V\325\230=\316\026W=\27390\275{\3166\274\315\305\006<\357\247\364\274\373\221\275=\016s\227\275\243\026\302<\357p:\275$\246\017=\377C\037\275j\210\253\275N\022&;1xS\274\206{\351;\004\023\225\274Ay{=\366\223\036\274\200\370\343\275\377\277\320:$\237\242\272\002K\032=\202_D\275\333\333\243<&;d=P \337\273[>\335\273\275@\276\274\366\020\210\274w\237U:\234V \275DE\025\273Q\275\006\275\200\375&=\351\331A\274/\356\201\275\261\343\251\274\330\225P=\237)\322=\314\377\212=d$\270<\365\2363\273\010|\322\274\335\211\246\274C\002P\275\210]\316=,\337\203<\222d^;\332\263w<_\037\000\275o\364\232<$\252\"\275\320\311o\274\227\035\251\275\022\302A\274\277.1\272K\371\265<\346\007&\274\252\026\031\274\021-\260\274J\323\364;-\232\277\274\177\007\241<{\256N\275d\244\013\274\332X\236\273ob\251\274l\357\007\274\306\250\317\274It\206\275Lv\373\274\002[L=\03581<O!\213<\234\234\023\275\201s\346<\276e\253\274\370\337\037=\031\373<=^\310\202<-\271\273\275\316S\311<@\360\320\274s\032\274=\335\266\325\275_k\326\273.\317~=\022\371\255=\233\306\024\275<\202m\275\177C.=\034\210\215<\316Q\262\274\227v)\275C\320\234;U\316\302<\312\210\005\275\260\223-=\004o\373=\256\372\006=\211*\022\275y\010\300=\361F\n<\367\264S<\270D\240\274\'\310\314\274`=I\275\004\204=\275g\374Y\275\\\n\244=`\200\037\275_\340\301\274\177\250\241\275\364mx\275\243\267\262\275\350\215\200<\001\353\343\274\243\210{;\313jM=\350\365\t;+\033\"\275\r\271o=s\023\030=\024\216\314\274\256\237\255\274m\323\236\274\005E\231\274\027\365[=\224\247\362\274\362\362b=#eG\275}V)=\177\'\363<]\003\225\275R\023\251\274\315\210\322<\026\320\035\275\301\332\021;\020\224\225\275\3119\257\275\342K\364\274|+X\275v\273\351\274\275\013\202\274\366\361\200<\274\371\231;\365#\256;\215nr=\323\005\313<\246\206E\275h\030\326=\342\223\204=\002Sq<WT\367<\372\257\277<\177X\234\274\232\321,=\272R\313=\'F\227<\r\361\002=\004E\220\275}\3221\273\275\304\210;~\250d\275\351\275^\275d\334C\275\256\211\312=\337\3359\272D\340\236<2\325~\274Pex\274\330\336\320<Vl\247;\212G\342<g+\236\275\276\210\367\274\266\001\367<H\304\323;\314\2341;AM\013=9x\004\273\327 \316<5y]\275Y\341\241\274\000\221*<\246\274\275=\325b\212<\342E\345\274\324\026\215\274\024\223\005=\233%L<\350\252\021\275\306n0\2741_\222\275\036V\000\275\306\016\304\273\005\235\220\275F\320\241<\017Cf\275\301\314\003=\366\240\343\273\301\263n<\035\343\236;\251\376\221\275\350\337\026=.\204\220\273\312b\004\275\206q\311\275\250r>\275\320\211j=\231\001\251<\021\254\024=\0311\003<\373\223;\2755\207\032=N-\250=\312\'\223\275UG\256\274$\264\204\274t\023\265<\021\315\255<\252\371H=\325Z\024\275\206\352\270\275;lc\274[Ok<\235\267\331;Iu\007=kY\032<\262\330.\275s;\033\274\005F6\275\374i\036\274KYY\275#\306\005\275>\313Y\275\216?+=\232D\345<\273K\017\275\n\225-\275\3162\320<\213!\177=_\355.\275>\231\253<\036\371\345\274\320i\332\273S\312\266;ao3=m\336\003=\353\212\244<\237?*\275;e,=\342\257!=\224\034{\275g`\021\274\224\352\302=\304\334\371\274\\\246X=\036\236\"\274\027\255\2358\262\373\216=\001e\005\275\t\013r\275 0\276<)[\216\275@n\265\274dT\205\2756L-\275\000\372\014=\206\263\261<\246vE<\300u\027\274\3426\366<\261\301R<\230\275/=\0165);\242fX=E_\312;\013&\254\272a/\265\275\257x\345\273y.\372\273\022\274\266\275\205\234\360<\2479\351<Tk\363<A\324\203\274U\235\\\275\370l\035\274H\002\364<\202@9=\260\324d=\014K\306<\rT\236=\245\212\244=\333$5\274\t\273\374\274\201Z*=\177\203\007\275\024\000\203\274\322\224 <\365\304\266=)f\325;K\205Y;d\242H\275p\213\001>aY\304<\204p\262\274c1F\274\347\306\243\273I\221h\275wa\261\273\370\300p\274*\373$=yVB=\325,\001=\014\224\355<\003\322\246\274\343\323\210\274\001|h\275\200Ov<\214\023!<s\3523\274s\"\226=\266\201\222=8?\375\274\303\211\025=\210\240\370\274+~\026=\226>%\275aB\355\272\033Kv\274\335\275\003=\r\276]\274\200V\261<;\202\240<\233Zq\275\366]t<_\255P\275\010>Z=;\224\234\273\365\006\350<\371\211\233\274/\267\356\272\357$\220\275.&\343;\224\\\334\275\255\014\031=\213\323\227\273\217w\014\275\243\357%\275+\024B=\023\262\253=\3329\217\275P\276N<\020\031\322=\243D(\275g\362\356\272\201\261\223\274d\034\372\274p\222\n\275\213)\226\274\327\262q=\321\003o\2728\363\003=\257\341\257<~\322\021\275\216=\271<\305\371\016\274b1\211\275 )\033<A[\037\275\375}\233\275\320\236\225=\341\244n7\300\303\375=<\237\023\275\017\365[\274\3071\"\275^\273W\274\376|\027\275\353\340\241\275\207\326\2779\303VT=\241;\351<\203\036A\275\245\347\325<L\204\215=\341\017\032\275d\235\022<h5D\2759\311\277\275\3622\034={\236\214=\332\206\333\274\214bE\275\022\305\271:G\t\216=w\344\256\274h\275\303\275s\017\222;\314d\036\275\312\327\232\273\314\336+=\r\262S=\331[\353\273gL\020=\335\227\006=#\037s<\313\274\322\274C\241\227<\202\223\301\274\365\335\023=\022\032\371;,\"\027<\266&\261\275>\200F\275y\034m\274n3\266<Gd\006<\026ia<\203\220\005\275%\244A\273f\036\202\275\204C\033<\236\327\003<\212\021\371;\037\2039<V\244\211=NU\270<\342\351\\=\276v\240<\216\335\354\275\354\220\203\274B\264\230<\027&\202\275\210Q\305\2756r\313= u\252\273\235\327\215=\177A\260=L\221\252\274\364#]\275\3447\361;\364^c=\331\026\237\274\204\364#\273\212\215\213\275\314\342\260\275qw\351\274G\300\007=x(\000\275\200\343\227<\321U\235<M\213_;\273E\014\274\356\2321\275\277W\207=G&I<\216\227\317\272\266\007H=\334\3237=\235X\356\273\204\257\221\275\031\271\230<\301\203\277<`]\220=\325z\203\275KNP=#\023\'\275\310\331 <\250z\343\274\346\223\010\275\020\351_<^V\002=\374\256\003\275\t\035\371<$\353p<\256&\207<\234\225}\275\226\217b\275\024\001!\275\213\023v\273\320\211\247<sq\247=e\3143<\013}\335<\023\352\211<\242\253\202=f\376\306\274\3552m=\237\207\274;\327\226\014\275\026\257\202\274Q\370!\275,\024$\275K\003\335\274(\340\271<\002\t\371<\030p\210\274\260z\353\274\266\321\334=Rr\305\274\322\202\200\275Q\216X=C\016\271<\333\376\334\274or<\274o\312\033\274\344V\312<\347\037!<m\\w<t\352\252;\033\321\362<\376\275\007=\346\212\347<|#\217\275\234\211\210=\340\0214\274q\007\010<\332\007F\275KYE\275qg\212=\214\003\321\274\214\220%=\004\335\004\2759\3034=\356\023T\275\274\360\206;\0238\230\273\231)\031=\205\003,=\000\016\272<\202K\226=\021bX=\326t\372<\266\273\266<sX\'=Z\377\224=l\301\246\274\223\311\335\274\305)\314\275[\342\006=]\261\270<\221n\344<o\354\310\273=\227\224\2753r\331\273\2545C\273\204~\270<!7\025=&\241\257\274\217\237\347<G\344\310<\270q\217\274\n(4=\317\276\020\275Ye\216\2754M_=\222h\003\275\357\374\006=\272\253\246=\236-\347\274\364\327\024\274\034\362\331:p\243\355<\\1\035\275*r\243=f\013\371\273/\030\217=\252\222\350\274K\331x\274&\307\300\274-,\322\2739Pg=\331\335\274\273\335U\367:M\376\310;\326\316)\274B\321\314\274\252\302&;\231(\317\274\223\303\340\275\316\016\026\274\007e\003\275\223\267;=\204\236\322\274K\005\231\274d;\255<\016\305Y\275\317\345/\274b\350\025<\0340\365<\243\245\016\275\200g\226:\021\\\210\2755\346\201\275\333\304\233;\321E2\275\030\2474\275\214\335\263\275\305\273Z=\214z^=\330rP<\022\t{\274\021\275\342\274\303\354\253\2748\037\026\275]y_<:\221\376;\2225Z\275=\370N=\n\260\345\2742\302\235\2758aw\275b\342\005\274\213~,;\2701\005=bd;\274b$\206<\024g\220<\014\017\030\276\371\340\234\275\256\251\013=xN\373\274I\005\244;q\206\201<\033\324\343<\372\022\200\274V\363N=\300\rN\275 \253\340\274\014\322\222=\205\020D=;\020h\274\335q\242;~j)=\340d7\275\r\204\031<\314\030\350<r\267\253;\251+\023=\220g\014\275\344y\221\274qQ5\275M\352\251=m\014P\275R~\016\275\211\241\254=\335\251Y\273\214\303\017<2\252I\274\021\202\272<T\3717\275\230\276b=ETH\275p\366;\2754\004\200=\316\330\230=\372R_<\357\262\273=E\333\225\274V\205z=m\274\226\274\373\271\"\274\374c\302<:\237\237=\267\251\236<\217\243\245=\375\036\217=)\000\003<]\004\227;\360\373\333\275x\250g\275\023\007\013\275(\352\264\274K\377\223\2752\345\027\275\277\260\027=\'\312[=T\307\252\275U:}=I\3753=\227\3454=\000\231\237<x\327\260\273\'\346v<\347d\033<\0263\031\275\020\276\335<\342I\236=\216\214G=a\007k<f\346(\275\377\312\023<\275\365\230<\031\362\025=\272O\322\274 \341\277\274[#\212<\305\373\372\272`\235\341=eq\002\276\023\324\222\273{\367\003\274\341\205M=\200\363\334\273\255\341\260\274Y\305(=\001\026\233<+\007\270\274\216\204\326<M!\332\274G\n\323<k\373L=\367\203F=qP1\275\327\342\t=\256\313\360;\252\302G\275\245\261\227<\034m\020\275\271\224\350<9\324\324=\366{s\275\375\202\036=\241\230\247=\260!\022=\375r\214\272v\222\204\275\321\323\203<\212\217\227<M\270c\275\271\257\342<\337\275\034=\325\037(\275\314\374\030\275\317\216\304<\365\225N\274\373\302\224\274Ve\031=\324Y\206\275\277\350S\275hA\363=\271\266\344<\344\344\227\274\310\'\030\274\351\354!\275>%\257=b\304q=\346\214\271<x\336v=d\252\017\275\021?4=\2655D=K\255\227\275>\312\326\274\322\216\261\274V5Q=\036\350.\275\245\315\337\275\002\210D\275\177\363\220<\207\237\255;6q\240\275!\034\t=\267\311W<\350\343\350<\350\351\030\274\314\251\360\274bH\301\275\235\234\210<v\276\301\273]\271\200<De\375<\014\006#\275\355p\372<|\022{\275)wz\275\n\360\014=t\277\241=\030\347Q\275\231\264\242<\004\232\302\274\274\230\341;\tn\210\274\315\265\'\275\230\257\262\275\340H\010\274\252\224\222\275\324\340m\275\034\223]\275\262\205\035=\n\0319=\031h*\274\250Ny\275\355\240\027\274\315E\216<\2231\302=q[\031\275\223\022\231<\006\243\243;\024\307\033<\330\354\206\274\3277/\275\t?\255<\2712\013=q\213H\275\023\315\275=M(\237=\230\001\317\275\r^>=\310\362\334<4\204\252;\274\311\316\273\233\337N=\317\233l\274\376i.9\020X\354<\221\356D=\235\261\331<\247\216Z<aJ\004=\220\315\002=\334\372\014\275\177\311\335<*\027\260\272\244\360\013\274:\235\022\275\230\312\217\274\225\316=<\264\215\337\274\017>\035\275x\205c=Nq;\273\321J\354\274\215\213#\274\211\254\222\275*\377K<\312\350\013\274L\347\245\275\324\003/=Y\271@\275\367j\305;\360\020*<\003\216\210\275\373}z=\"\372\274\273\260\234(=9\245\333;\256]\230\275~\274\240=LhD;<o\025<\304QX:\002\216\233\274\375\220\007\275`\303\257\274\207T\322\275D\305\346\273o\tf\275Y\256.=\205\037M=\264\252T=\264f\267\275\370S\304\274\020\331\350\274Qw\334;&!7\274\210r\332\273\373\215C<\335T\325<\347\365\000=\376\264\222\275J\226\316\275`h\357\274\303\315[\274j{C=W[\244=i\373,\275\224\037g\272\245\r\216\275\032C =`\252_\272\351\355!=\024\"9=*HO=%\030\013\275A\216\002\275\260\217\256=\024\354\216=v7\t\2755\023\212=0\201P\272\020r\036=\235~_=\230\242\215\274\234x\207\274W\272\212\275\332\377\264\274\301+l=\370\223\345\274q\354\213\274\336\237\325;F\205\014\274?]\273<\nd\363<\351\264\246<\026\222\200=X\210\361\275\332\266\274;\341(\207\272\252p\373<0\342\252=\037.\272=\025\366\232\275\000H\205\274N5D\275\244R\263\2740~\201=d*\330<\026\027.\274\213\267E\274e\203o<\213{\314<\205\n]=\232\310X=>\360\031<\014g\230<\315\260m\275P\324\024=\225Z\017\275\010\264J<\324m>\274IE\230\274\305\177\025\274q\310\224\275w\257\'\275+o\274\272\234f\206\274,/U=,\254\373\275\352t\013<\037\364?=\304\246>\274\224$\260\273f\023\r=\220\360`<\214\003\265\274W\314!< \236@<u\337V=\314*\272\273z\220\215<hv\310<\313\305\330\273\312\030\004<\367m\020\275$\346\020=\345\206\003\274u\252j<\236k\200:\3308+<\010>\253<A\340~\275\212k\005=p9\016=n.3\274\327\177G\275@\035v=\264\347T\275\211E\242<\220\352;\275\262\306\201=W\005\333;\332\316\n=\013_e\275c\206\242\274W\231\340\274e_\030\275\222\311Q\272\373\017\245\273T\375\302:\267\206\034\274\253dk<\2067\030=\004\306\261<\232\376\321\275\324\262\001=\261\322x\275*\335\330;\374\017\002<\326B\000\274\027\200D;\254\353\201=\372\344&;\364\266/\275H\317b=^\'\013\274\277\351\245<\303`\314\274H\311\037=\314\376i=\351\370\367\274\360My=bJk=0\353\201:\275\244\254=i\345\0039\027\000\322<\252\036\245=&\353\215\273\271u7=E\201\243\273\223\033\035=\343TF\275\311\301\210=h\344\366\2744\010Z=\005\266;=\313\177\367\275\366\340\347<u|\344\274\265g\341\274\342\252\271<i_#\275E\264\203\273\374\020\340\271\303\265\034=\271\267V:\336\350\254\275\227h\352<D\345\336<\364\\\272<5g\314\275\356,\n<\034\210\317\275\267\014n\274\253\375*\275\275t\\\2753}~=y\344[\275\355P\212<\312\315w\275D\036\255\274\356A\330<h\007E\274\340\271r\275\234\236\231<\337<X\273\207#\264;\262\225\306\274\321r\303=j\004\234<\210\266W<t\224\202=\233\235\235\274\002>\235\275\314\024\210\275O\031\261<\017\323\313\274\267\334\237\275#H\314\273=\013\014=q\006\315<\322~\224\275Fqc\2751\374$\274\374aQ\275\311a\212\2759\365E<\t]\025=\177B\325=|\343D\274\273^\032=Xe(\275\364%Y\275I\265\233\275I\323\203<$\224\"\272\232\036\n=\317\215w<\004}_<)Q\241\274\260\325\037<\n\213\236\275Y5T\275\317I\365\274RIT\275\221F\321<\227\225\373<b\307\\=\274\355\016=\210\316c\275\001|v<\222\325\301\274\215\231\245\275\244\377Z=\302\036\203<C\332@\274\227$\254\275\327H\206=ft\264\274\370\246\177<\325\300\023\275kU\2008\302*\014\2757\267Y<\033\177\264\275\311\234T\275\351TN=\366\354\006=\312b\202=\212$\302\274yJ\234\274\344aD<\177%\030;Y\323\232<\304\025M=\241\215!\275p\311r<#T\277\274\377\313\236\275sY\327:\337\360\252=\350\022\016\275\014C\025\275\342pb=TP\177\275k`\302\274\302\240\021<\305\252\036=e@\215<\275gM<PNM\274?\227:\274\256\023\226<\215@|\275i\303\221\274os\017\2757zH<\317^\201=\245D\346\274co\017\2758\205\336\270\027\177f\274YA\251=\303\033\t<\345\367\276;\205\367\345:pw_\275\276@u\275\331\007G=\255G.:\027\311\220=7\270\313<\313\017\014=;\237\342;\\\365Z=\367W\032\275\351\255\245\275\340\223\343\275L\222\247=\356W\345\273\250\205w;\320\330b<\337$5:\366\2729\275\241A\332\273a\225\322\275\300\257\234<\365\021\252<${]=\233\234R<\235\301o\275*\230\313;\327\371\226\273?iv=f[0\275O~l\275\226]X\275\277\270\005=\17714\274\300\257\327<\342\322\026<\214\337\t\275a\360e=A.\003\275\014\257=<\353:2\275\353\2731=^\017!\275^\nn\275l\326\301\2742C\014=\342\371\245\275)\322\320=\362\227)<\336\202\t\275\031\021\005=-\325\200<\376\030-\275\256\000\254<9\024\027\275`_D=E\r\212\274?\253\211=X\261\223\274b\355\010>\017>F<i?\010\275\352,\363\274bn\252\274\372d\323<JUf=Y\340\352;\235\326\330;%\007\221=m1\212=\370\n\303\273m\322N=\365\361\342\274\327\223S;\033\357\343\274r\027?=\017%u=\331Z\227\275\275\222\201\275\206f\206;\204\3061<\220#\270<\272\344g\275\331\210F=o\270\006\275\264?\001<@3\010=\201\272%\275\014\214e=\351\272\301\275\252N\336\274\310\2016\274H\242\207\274\326k\025\275|\225w\274|nD;G\0221\275\264\301\3039p\345\220\275zr\260\275\014\202\214<\031\277%\275b\332\210\275\203\306G\274\227D\266<7\362:=\313)e=-x4=!yY<\323\240\266<\3058+=\t\340\235=Y\344h=\003\014\001\275M-d=wKr;SR_\2744\231\210\275}\273\t\274\200M\340<\343\261#<\177,\263\274\307\376\247<\322\203\202\274`\260\321<r{\n=i\310T<l[\225\275\332.\241\274\347\254\206\275O~\\<-P\214\274\360!\363;`p\366<2||\272\006\330\277<#\004\031;\244\"`=5)B;r\317\273\274\017\272\270;yk\345\274\213\224\220<\231\225p\275\240\251\221\2745YA\275\206\303\230\275\177\216\033\275\335\034\232\274\'\336\215\275\352\263k<\322\202\016\276\016_T\2750\203h<\331+z\274\342\t\227\273\366\227<\274\006\227\310<\216\013\242\274\r\031\204=v\032p\274a\"\253:0\355 \275\213\236}<\265o\342<i\004\303;\225\231(=\235\017\341\272\247n%=\302\n3;\215k\'=B\251l\275~hP=aZ\244;\252F\013\275\312\002\226\275\016\234}=\274\227\225\275J\237\231\273\303\303\332<\345\022n\275\214G\010=\304\005\376\274\"}\027\275u\257\001=ga\035;\034\325\033\274Z\224\354\272C\032\337<\\K\351<\010)9<f\007M;\031o\371\274\033q\343\274\010\350@\273o\222&<o\237\252\274q\220{\275\005\331M\273\267\342\200\275\245/\276\274\227\002\223=\347\024\226\274\2561\332\275N=\211\275\326\226\215\275\177\360@;\033%==$6\213=\022\257\230\274\354%5\275s\307F<\'\003\317\274\270\255\177\274\376=\037=H\212\230=H2Z=\3531\344;\2072V<T\264\330\275[\"`\275\225\016\024=\323\217R=/\312\000=\326\2056=1GE\275-N\262\274}AP\275c\310\226\274\276\376\310;\211n\232<\226\236\240\272p?\005=\'\324N\275\004\331\337\274\264\241\303=/W\273<r;a<e\027+\274\360A\277;\001-g\272\312\313\355\274\345\354\252\273\320vn=\375OQ\275\322@K\275`\276\017\275jEL<\377\307\200\275L(\317\273\317\276r=Q\n\204\275\377\345\024=[\332\226=xlJ\274\351\360\035=\341\267\026=\034\220\266=*\036\036=\372\251\230<\343U\014\275\340;\226=\313\227\372=\243\034n\275qv\213\274v\364\300=o\206\275\273\324\246;=\010\314d<\241%`<\026{\260\274\225\333\377\274\300\2115=\326\335\356\273\035\311>\275\332\372.\275\310\026\206<\0051:=\226@I9*\231v<\257\031\244\274\251\"\201<\334!\004\275\365\230\235<\024\037b;|\203\010=\262j\003<s\326(\274\nH\237=nt\312<R\235\230\275\207Q\225=\362\335\232\274\201\302\020\275|\223\0239\317\331\241<\301gD\275(\324\376;\332\233/<+)Y=Y)\312<\354\247\007\275;\371\027\275i?6\275p\335\232\275\246=\036=\225k\273\272\312!<=\237\324\226<I$\372\275\350\'\274:6\264\272<N\322\357\274\357\313\002=\017\266\311\275g}\331<`\211\326;>\0215\275\347\013\233\274M\245\307\274\\\227\340\274G\343\007\276:\035\251\275m{k\274\366\027\024\275\344\177}\274\004\336\007\275U0\214\275\273A\014=\315mI\275\342\231R:=\241\006\275W<%\274\237@\263<\275f3\274]h\201\274\321\376$\275\007YX=\250\0317=\353\034}=\366Zp\274Yo\245<\331\232\000=x\003\266\275\030\226N=\370\334#=\376~w=O\317\232<\310%w\274\013J\032\275E\336W<\330\333%\274U\355\030\275\234\250\265:C\233V\275\024w\362;C\005$=o\016x:+N<\2756\325\"\275\355\352\326\274\242\002u=g\007\256<\210\337\021\275y\201y;\374\245\034\274\371\226g\275\030\362\024\272\312\216\334\2731\213\263<\217\341\216=||.=P\371\020=\235w\351\273\035\233\264=\303%\242=\340@{<\266\272\240\274\352b|<\252})\275\324\367O=#\303\007=A\256\236\273l\307A\275\010M\350<\3033\035\275QQ\257\274\332\372s=U\010^<X\007I<\371\3102\275\254\017\371;\360\332_\275M\032j\275\321\033l=o]\340<\271J\272\274\357\234\234<\222\226!\275\347\214\261<a\327P;*$f=8\226\"=\\|&=n\345\003=\202A\360<\033\312\267\275\237\320\031\275]\312\320<Vk\026\274\026I\255=\373\233\177\275\203M\330\275\014?\r=\270\336\232=\211\254\305\273*-\334=N.\252<\013\330\032\275\272\021\010\275vb\0219}\356\240\275:\356\333\274\026\243#<\377l&\275\237r\225\275\021Z\211\275\213\237p\275\265\256R<iK\206=\367\313C\274\005e\204\274d,\357=\023qU\275\013\335\005\274\330\270m\275E\331\317\274\205RG=v\271\221\275\321\256\372<c\'\010=Eu==F\0130\275\005.\231\2758]\003\275\025[\250\274\023fI\274tC\014<D6\217\275\371\246\305\273\351\037\033<q9\276;\031\211`\274(\306\253=\356\277\252=\002H)=\372\201I\274\302>\327\272\250@\004=\247\376\232;:\334:<\205\264\020\274AG\207\275\300\373\206\273O\340g=5#\035\2758\375\235\273\246q\231<\360\246\331\274\307C\343<r\n\227\274\375Z\215\274\361\357}\275?8C\275\374\020\210<\334\236\036\275\000|:\275H|\370\275(m\n\275\257\206\n=\273M\211<>\203\343=\377\353^\275\265BX<\346\243\277;\221\t\256=\342\234Z=])&=E\240\254\275\025\022\370<]\252\177=\255\217\251=\354;3=\331\363\366\274ey\237\274\233(\014<\240n$=\220\237\021\275\"\353\270;\216\273\365\2744\256\031\275\310L\234<\371<`</\226\347\274}\334\276\274\376\201\020<,\372\202<\211sQ=:M\205\272\"\262.\2744q\242<,\371\373\274\307m>\275|\014\256<C\rS\275VUd\273\327\3613=\240\331\341<\315\333\313\274\221\302/\275\2160\227:\270o^;c\212x\275\275\346z=cL\254<\220\255\030<\274A\025;\027K\255\274Q\240\255=x#\205\273\371\363\022\273\365\311Z\275\002BY\273\207\005\314\275aN!=\266O\316;\2008\241<\357\312\010=E\030s<6 \266\274\030\026G=\352\177\320;i\202\004\274\316\206\244<\2417\036\275n\3347\2757\010\240=\r\366\345\273l\025\177\275\036\301S=\217G7\274\033\007\322\274i\177\277<\245\370*\275\274.\350\274p\203+=o\346\';\310X\334\274\265\205\313<\330\217~<D?O=^H\345<B&\256\274=\226\004=\355\346\202\274\362\206\226\275{\271&\275?\333+\274\242\373\225\273647\275T\314%\274\310\360\271\274\303\016<\275H\0276\275\2070Z\275\377c\226=\320\234\356\274\366\307\r=W\211[<\340C\363;r\316\360<\004A\210=};\r\275\233\351\267<\001\026\250\275\267A^=7\377\002>\266\307X=p\263\"\275\216\353\203=\347\031\346\273\204\346\215\275,\254\313=d\273\200\273)\036\345<\025$\266\274\\\357R\275\232\033\000<\217\335*\275\241\227A<\026e\206\274\000\234\234<\247\177\361<\312\037\026\275K\013o\274\221f\305<\353\303\032\275\354#\373=m\003\221=$\267.=\034m\313\272\271\220.\275\330\252\202<\304&\206=\240:j=\264\032\326<\265\r\027\274\337\375\256\274\264\361+\274Dy\246\275\027k\'\275Ka`\274\013\324W\275\300p\362<\005\256\017\275\360\022\005<\217\034\335<\340\374\035\275y\':=\307\260^\274\302<\267\275\313(7\275\300\375\347<nc\005\275\242\332\370\274\353\317\270<\267d\325;\2228\376<:\355r\275\017\317\262<\251\330<<\250R\271\275\263g\267=\020\001(<\270\023\216\275<0\313;\2245\000\276\006\034\204\274\r\252w\274a\013\236<\353\"\000<\267\001\237\275\301\307\236\274o\025\275\274\321\337\254\275W\372X\275S*\233<\212\316\230\275\261\244\366;1)6\275+\267\340<c;\226\275Fkw<\324\272n<?\332\006=\212\313e\275\277\201=\274\230\264\227\274\225\353\272<\347\211\252\274&\230\374:\0231\201<\201.\032\275\000\344S\273<1\233=\310j\255<\223\007\003\275\261\213q\274\267\334p=\201\267\034\274\346\274p\2753\"\006=#\275\335\274\276_h\2745J\204=I\300e\275\203\004\374<<\253\035\275\225\304y<~>\212\273\212\014\366\274\215\340\236\275f\273$=\217\022@\275\264Q\236\2743\341\365\267\302\037\250\275\322\244\231;\323\360\335\273\210\327\022=}A\'=\3236\370\274\374\032\364\273]\227I<\244\3009\275W\372\n\275\212\265\030=u\360\375<\337\233\315\275a\335\032=\262\322L=\213)`<xv\201=\270J\036=\361\237\214;\313*\t<\224\006\215\275K\260\222=T\252=\275 \331\323\274\344\016%=\264&\031\275\004WN;\035B2=!\3331=\210\020\030\275?\"\260=1\362\221\274pMW<\006T\2448\325qh<\263\256\'=8\321\013\274\351\321S\275\306\021n\275b*D=\265#z\274~\247j=8\341\"=\371\265\337<_V\034=\356\251\003=\003rt\273\016\225x\275\003\335\316\274[\373\214\274\nQW=\030\347\320=\023h\375\273\032\021\376\275N\370\254;AC\260<\352\354e\275cY\213\2751\3308\275d\301\250\275\261\\q\275j\2251=\301\233%\275\002u\251=>\030\327\274\327\302\272;\204\030m<\005s\244\274\211\340\200=\263FV=\246&\266\274N\256\006=u`\301\274\363\000\t>\317\326\\=g>\220<J\210\240\275 \244g\275\346\000\341<\301w\014\275\022\330i<7\3375\275\270\363\031=\224\241\234=\177\357\317<\021\0357<\213!\216:\337\273X=\316G\001<\"M\2429\317\376#\274\253\222\370<j\\i<\360\245\270<\367\034\216\274\361W\374\274}\027\202<]j\001\274\206L\313<\231\375n;\222_k\274\325q@\273\0304\276=-\006\026=\017\361\034\275\371F\006\275\242<\275=\344>\201\275\353]/=\"\276p\274\254)\323\275\300x1=\201a\003=\351\354i\275AT|=\236\035\202;\3445 =k\0271\275\346\t\342<[_\206=\025;\013\273\344\037\016=(\221\375\272\034&\266<\335S\200=\277C\231;\016\367\037\275\236\244/\274\017\017\366<}u`\275P3\025<V\362\315\273E4\205\275\263\223\014=\341,G=\242t\345\274\370\000\024=acq=\252\276\333;\311\337A\274!?\032=\2214\007=k\204\237;1\366x=\227\034\t<\002\000[<\'\374?\275\223\355:<3\241\021\275\025\033\177=\356x\033\275\032\031m\275\252\n\340\272\210\342\203\274\254r\036<\251\200\341\274\340|\0019{y!=:\347\006\275\265B\030<RwF<\314^\274\274\205\021\363<(\253\230<Z\3575\275\276\306B\275\334T/\275\350\tg\275\375\037\221\274\216\2526\275\326\315\032=F\001,\275\031d\251\273T\3666<\235\030F\275\354{K\275\345\240!=\301\232P<\034\310i\274$,\326<\275_s=\236/N=8\262\256\275\272\261\034=\277\206_\275\273\013\371\274){^\2743\031W\274\300Jj\2742\024\242<\354tm=e\206\n=0\273\264\274\333\361-\275\261\314f=n:\247<\2016<\275F0\221\275\004\275\310\274\274F==L\367=\274\267\305\022\274\377\272z\274\245\\p<\3726B\275t\373s<t\226,=Gw\226\274\256U\204\274\217{=\275\317\327\023<va0\275R\022\036\275u{\216<\3264\334\274mq\211=\317>\'\273\346~\363\275o\240.\275T>%\274\177!\222\274\204\"\200\275u\017\352\274\212\255\n=\227\355\261\274\005\264\016=\372\247\347<\346\216J\274V\030\321;\364\014\305\274ejV\273\271\300\277\274h\233\216=<\377\327<\327\365\200<\303\371\244<g\367\243=\217T/=\257\241 =\264sT\273W\"\021=\022hn<\2235\r=M\333z\274\2276\030\275\215cZ\275\016\256\237=\361\360\322=\2121\254\274\336\030\023\275k\345\027=\370\364\316\274\277h\274=\006\255\344<\326\266\023\274|\310\213<\306\277\313\275\317\230\004\275\006\2646=\222D\017\2756p\261<\217\227w\274\005;\"\274Z\274\003=a\231n=\3713c\275\213\232\372\273/F\037=\2724<<\246[ \275\273\000\033\275\177\300\033\275I.`\275\351$3=!\200\223\274\342*N\275\245\205m;\361\210&<\275\277\336\275j\312\317=\276\350n<\223\022\336<\356\257U=\266\252\2639\245\260\210<\025\354\342\273i\245\203\275\200\003,\274\333\0055=\001\275\263\274\355c\367\274\305\315\224;\314\215:\274p\177\025\275\002\323\266\273*\200%=*h\317<FZ\365<5\031[<\340\036\316<hR\243:\351:\366\274\326m3;\223\223\227\273\374\315\353<\243Q\002\2750z68\006\014\212\274\033\013\316;\355F\315\275H\335\372\273\237\300!<f\352H\275\313\002\217<w\327\337\275\201\271\021;\313=\267=\203z\265<\034\364 =\303\347\235\273M!\371<P\236\016\275\222\021\006\273e\331z\275o\2442\275\2613<<\222.\206\27563\345\274-(\346\274\330)\367<\242v\\\274\330\033e\275N\307B\274\247\246$\275\341%\306\273>]0\275\t\221\262\274{(%=\252\211G\274\357\3246=u\022y=\220\010V\273\245^p=\014\216\322=\3563\365\273\315$\200<\235\344J\275\025\212\t=\314X\372\274Q\216\331<\306>\253<\210\367b\275\335P\031=%+\254\272\245\270L=r#\035=\r\016\237\274\300\024O\275^Q\221<\252)\242\274\370\234p<\263\261\362\274\273\215\212\274\2139^<\375\320\t\2758\260\276<\322\215G\275\211\324\\\275D\035-\274\312JA=g4\316\275\025\353x\275\356\246\036\275\005e\221\275&\210>\275g\362W=\n\303\221\274\023d@<\212\214{\274\352\344I\275\025\332\273\274\240*\231<r\3438\273\250Jj=\270e\331<\333\253\177<\013\310\253=\242\302)<\201\370\363\2734\346\212;O\222\343\275\002\360x\275b\261\230=\233\332?\274{~\245\274\030\277\003=\360\252g=]hb<\340~O\275\375\323\031\275#\302\207<?kp\275\246`\257<\376\"\377;Y\000\335\274\201\235\005=(*\327<\002\265-\275ZD\010=\255\200Y\275\026\345\030<V\031\276=\007\005\031=~\375\350\274\227\236P\274\3725\352\274\277~\354<nbz\273\217t\035\275i/S\275\"7\222=\2150W\274Oh\254=;\215\033\275\221\3666=\"\273\354<&r(<G2\263\2759\300\214\274\252\222\315<\332t\205\274j?\006\275\032\022c<\202<<\275l\222\010=,\246\017=\337\300R\274&)\201;\275\007\'\274\327C\241\275\335Eg=\314(\303<T\025\207<\343\337\206;\262\370e\274Z\030\221\271\210\321|=H\\Z=\230P\202\275\021\234\211\2758\3028\275\335\334\210\275\315Pe=kb\"=P\037\n\275\274 \177\274^&T\274\013\360P=<\0331<\277Q\024=k\311\233\275\220$\233\274\303\277E\273\226\203\347\274\253e\001<\342\233\205=\274{\323\273\220n\250<\271e\232=O2\343;\334p\357\2734\327\304\275\271!\244=;J%\2732\216\204\275\230\013\331\274T\362!=\366\352Q\2757>\235;\010e\026=\356\343\r<\263(]\275\367.\371;\351\347\205\275p\311R=\357U\034\274\274\3629<3\013\033\275\340\313\037\275\310\025\233=\341\222\200\274h\200\321;\254\304I\275\017\026\273<\313\265\205\2748M\273\273\014\r+\275(\214\375\273C\361\263\274\007\222p=\013\365\013\276^\340^\275(\037\266<\317\254%=}\2406\27405\220=\245\336\203\275SZ\227\275\347\365\t=\352\240\275\275B3\276:[\361\244=\264\372\357\275\217\204\210<\300M\010\275-:\364<\274SR;)\272\303\274\301\364\231\274G{\017\275\204\2256=\014\213\377<?E=\275H\267%=N\035\254\274\363\371i\274O\010\266;@\233\207=[I\022=^Z\t=tg\262<\205d\235\275\211\267o=\312wL\27494\n\275\274?\210\275\337\352\347<\337\373@\274\304\314.\275\036\357\321\274\332\227\260=K\262 =\034G\254\275\004\351C\274\357\357o=\300\301h=g\341\306<\251\022\250<w\362\236\273\030\305\001\275\030?\002=\312\352y=\273Z\225=\305\357\217\275\206\233\000=EN\r=\'\376\375\275h<\354<\344Q\227\274O\234z\275\030<(\274k\256M\274)\2472\275\352\221\370<b\232\256\274\030\313==\034\313\227=\002`v\274{$\220\273\007y\r<\344\200e=\205F\325\275\333/\255\275\013\310\323\274\034/\'=\3509\200\275\366\235P=\010\031s=8<\220\274\303\235\262\273\343\244\006=~\'\234\274\217\215\273=_\316H<mn&<\275~\276\275\222\314B=\261\2468<&1W\275\034\311S\274(\207\r>\007\240\246\274\023\213\254=\263\201\000<\262\320\021\275<n\313<\220\270\272;\027\265\314\274\210|\231\2751\201X<\020\366\246<\\\316&\274\243\240\363\272I\300x\275\006\365\256\275T\265\005=\240\370|=\215\027\341;\351\242\201\274\'OV;\006eX=\322\244\301<\240\202/;\316{\033\275\345_\024=\205v\353<s,^\275K0!=\201%[\275\365k\014=\365[>\275\277\017\234\275\365\243 =+Q\267=\206\353*=\220\000<<\306\310\316=\006\360k\275\263\343\033\2759L\212\275\247\302\027=\375\010*<\304h\024\275\200\347\351\275\356\307<\274,Je=\317m\021=\327\003\246=ba\013\274\277B\337\274\303<\370<\200\312\003\274uwf\273)K\r<*2\210=h\036\207\2742\220\263<%\277+\275\rS\017:\217\263\314\273\022\272\251<\025\202\256\273\352\030\023\275\014S6\274E\262\031\275JE\316\273!d;\275\264\306\035\270\307u\202\274\001hI\275\251\314\232=\267?$=\014Z\225\274\031\t\216<\246\3473\275\206\004\035=\216\270\003=\356;F\274r$V<\345<\300\273NV\353<\367\363\337\274\345\212\025\275\343=\017=ILR=.G\241\273\261\200\256<\",\026\274\373K\321\273\036>\245\273$\220><\274\032+\274hX@\274\2724Z=T>\340\273.\030\223;\321\253(\275\354Y\021=\020D$\275G\004\212\275\216\342\211\274taE<\302\352\306\272\372q\224\275$J\277\275\370U\224\275wi,<d\010\307<\003\"\260\274|\274J\275zn\260=iZ\253\275;X\216\275~\351\002=\273\257!=(\323\t\274\221,\252<@9f;\231\315&=\271v\027=\026\350\244\274c\007n<T\251\226<\300\256q\274\002\247\313\274\206\020-=\334\032\372<%\3457\2737\3679<\304\372\274\274$CP\2757\243{=\201\233\264;XG)<\217x\252<,\272\014\275\274S\200\275A\025~=\201\251\324=\3409U\275\366\035\2249_k{\274o\222t<\031[\037\273N\024\032<>R\261\271Q\301\021\274\313\210i=\022\221E\2759\247\335<1\000J\274\323}\365<\313e\371\273\214\020T\273W\026\303\274\210\004\001\276\027\355\271\274\264\023\\\2742\356\022=\241\217=<\006\3329\27516\001<\257.\213\272\205\301V\274F\240(=\325S\206<q\014\361\274\341\300O\274\323\362\264;\251\010\362\274\361\207\203<\354)\344<&\361\322\273\363\363K\273\315Z\001=2\245\210\275\357\271\336\275\230\036<\274\271\022%=\337\321\231;\306\351\367\274F\017\027=\357-\013\275\023\332\034\275\r\272\206=\255\"Q\275k\374\031\274\362 u<vK\223\2758\033\037\276\203?(<\324\230\274\273Z5\303;\317\tT=\264l\002=`\315n=\365\227z\275\245\356*=\023\026\322=\371&\020\275o1\200\275[\235j\274_!.\274\201\232i<5\271\246:\230\356\020:\220\344v\274O0\310\2732\323,\275J\014\315\274\033\223\213;4v\230\275AF\341:\353<\013\275\326~\227=,T\253\275[\312\n<\337\310\210;\'q\233\2734\3131=\315\303\025\275\330\202\207<\2328\n\275\341+\260\272\030\366\274\274\340\336\243<\35667=]\313W\274a1b\275\235P1=;}\265=\035\003\213=\376\024F\275\235Dl=m\326Q=\354\031\032\274\246\227x<Q\334\234\275\371\252\305\272\204\322\007=n\007k=\240\200\221\273\346o@\274\211@\222:`\301z=\210\234\013\275\206\302}\275#h\273\275\t\036\222\274m\033@=\231z\363\273J\224\206=\256u\250=\217\353\376\273\273K\'\274D\252\245<\310\315\260=F9\203<\014\367\202\273+\263\374\274Gb\217=\271\307\255=\376\320\212=S\364Z\274s\352\265<\353<\313\274\364\342E;l6P\275\245\227N\2754P\007\274\343<!\274\266\364\010=\002\250\025=\272\332\221\274\031\317\267\275\027\231\032\275\305c\004\2742\004\213\275V7\310\275s\307\201<\261\327\233=\357d\300<\r\346\247<\303\034$\273\225 \341<\021&\212=\236\227\036=\001\314\216<\300\360\007<\213R\356\273\340D\314<C\r\003=\350#\243<G\235?\273\0160M<i\337\014\275\034\3525=a\264S=p~\026\2750\212\235\272\036G\265\273\371\246\205<\216u\237=,}\243;\017W\031=\270[\207=\302\266\330\274\240\360\265\275\301\t\234\272K\013\221;\322\247\235<\273CM\274xi\342<\317>m\275\0251H<22\0009\253r\306\274\223\300\330\275R\021\223=\2726\226=\367\356,;\313\203$=J\255%=\355\241\341<B\367E\274$\020\n\275\325\374\371=o\225\275<\207\336\202\275\356\033\210\274!N\251\275,\207\245\275\212\'\316\2747\331\245<\344&\376<G\366\262=DC\025=\264\013}=\367tQ=?\246c\275\302\237R=\247\370\236;L>I=\223O\342\274ev?\275\0254\214<\365\\\n\275\227o\225\274\315j\245\275\\\216\306\274K\301\225\274\204Y2\275\340\371\202\274JL[;\275\243\007=\265c\204\274h{\321\272\236\202\340\273~_A\275\265U\023\275\330i\033\274;@@=\0063\024\275{l6\275\000&\035>s\272\373\273\232\024W\275\251\245\022\275I\345\253<\005zo=\270\316\241<\300\363\2769\260\267\367;U$\255;\033A\t=\'M\227\275+\305\366\274\227\311H\275g\332\202\275\324\021\021=)>o\275\300\251\202=r\232d;\347e\252=\260\005\224\275H\216\214\275\214\213P<\261d\323\275\367\234\204\273 \314(;\312\014\223\275\246\201\005\275\331(i=<\350\235\274j\300\\=\037\234\213\275\215\226\272<\271\371\370<b\006\213=\346\236\367;\334\371^\274\005\212\262<\2406g\275G\031\206=ye*\275\036\314\276:I;$\274\302\231\332\274}\240o\273\232I\215\273\310t\302\275e\254\255<\260x\325<\327j\330<\316|\260\275\370\213Z\275rb\370<\370\300]=\235G\233<\227]\306<>\220#\274\217\315\014=\rC\225=\214~\302\273\025\212\035=+\320\255=7\241\302<\352N\316\273?\334\032\275\220\013\347\274\204\035s\275D\216\022\2759:\355\275\315\223t\274\360\375p<\370\244\324\275\312\254\006\275\214\253\"=!\322@\275\002\025\301\274\235RM\275\223\361\n=\366Z\225=\315\321P<I\273p=\377O\034<\373!\177\273f/\032<z\257G;@{\030=\307\217\230<\277\"5=\315\255|=\020\037\262<n\273\232=>m\200=\177\370\245;?\244.\275\224,\303<\367\235s\271\010\004\362;\253q/\275\'\274G=\244_\315\274\307\261\373<j:|\274\212\310\003\274D\204\235\274\230\252?<\360\"\252\273\213e\264\274\341\240|;0\250x\272]\252\212:9W\236\275ns\223=\211z&\275\214_:\275\'\017\304\275\004\330\253\275\016\3434=SN\246<\036\307\223\275_R\221:\241]\261\274\022\213\220;D\322\251:\\{\224\274@H\250;z4\303<\267\253\201<\212\325|=\220 \200\275\020l\t<N\344?\2754?\201\274\240\271\245\272CJF=M\336\035\274\252qB;:\177\332<\3210\007<?m&\275\351J\035=\370:Q\275\224\002\222=HU\332\273\2621,\275\244K\202=Hz\206=\315q|=\222+\035=\217A\217;y\227^\275\221\215\236\274\n[2=?\002\210;xz6\274 \371\361;R\223\206<\341\327\244\274u\006\371\274\225\020^\274\323EB\275P\035\241<\336\301W\2757\301\314\273\370\260\036<\014\264\017=\211\226?=_\027o\275K\333\026\275\222\347\027=\232\362h=\245\035\215<\310c\264<E\221i\275i\375\322\274\326\204\216<N\007\300\275\323\006z\274\005_\350\274\257F\014;T%\260\275\313\311\243=J\253U=*x\224<\023\325\266\274\273\031\301\275s\005\331\274\225\200\207\2754|\271<\272\300\327\273O\004>\275\007\320O<l\355\342;\247\031\332\274\360\342f=\353\r9\275\203\010\320\275|\344\203\275\366\"\206\274j\266\323\274\305 \270\274\230U\035\275\345X\217=;\n\233<0\246\311=f.-<[\206N\274\014\256\'\275\021\010\334:\2061\376<\353\000\343<\022\212\245=GD<\275\030\350\303\275\321\361#=\344\r\274\274St\222<jQ\030=\025}.\275H\325\206\274\013\363o\275\315\252_\275C9t\274w\\I\275\315\266\274<\316\230_=\021}\274\274A\210\221\275\032\331\021\275\334\270\027\275g\026\005\275\345\200H\275\010\313\271<_\277\272;:9);\374\"r\274\372fJ\275\010\260\205\274$\222\223\274n\261i;W\231\016=t\311I=\274f\003\2751qV\274\177+\374<\001\356U<\325\314)\275\036\004\330\272\001@3\274\265\002\004=5\0341=\0263\010\275\370\030(\275<\302\263<\331=\204\274^\227v\275\251\253\316<\243\306\244\274\033)\220=\030\231\016\274\330\324\035<\252\332\316\275\020`-<t\3725\274\354\277i\274\260\367\340\273r}\212=0\304\031\274\306W?\275\023\253 \275\3148\316;\300\340\260\273\333\303v\275\202v<\275\371U#<zD\"=\016\300\362<\330\216\254=\024\271\206<#an\273so\303;\036\262J=,\222\217\275\032 \222<\276!x\274\367\232\264\275\002\227\026<\001\344\304\274k\341E\272\350\310\306<\365\300\001\275\007F\024<\262{.=K\345K=\374\252n=W\1775=\013\032\244<t#\327<I1>\275\334\213\254=]?\035\275\367\271\014\275]\035L=[\260\034<\354u4=\027\n\264=\2403\370\274u@\322<?\010\226=\002\006\253\275:\017@=\2579\275\274\362\031\030=:\230\026\275;\302\302\275\345\367L\275\020\354\215\270\261\346\261\275\001\322\245\273\323y4=\305(#\2759\205D\275Cug\273aA\t\275\313\327\242<\274$\354\274\343p\023\276]U,\275\313\035\270<\307\212\232\274\035R\373<V\020\025\274\004I\202\275\300\240\267\274\362\274\227<\001\213\362\273\3475\344<\022\200\263\274\267WK\273\227Cg\275\235V\246\273\343\025\022\275\032ad;\"^)\275\234\222\232\274\377(-=\n*`=Ud\005\275,q\303\275\250\2265<\350\235_\275\342\364\372=\223\031\325\275\t13\275\235\010\034>}\nd=\177\036\365<+\313T= \375\201=\246\375\207<\t\334:<\360\224J\274\365E\257\274\0352\316==&\357<\021Y\313\273\341\'\354;\275\214.=\226a+\275L%\357\274\244M\273<\310W1<\304\201j=\221\232x\274\254\251v=\367@\353=\266Z;\274-}\244\274\3450\302<\222\226\354\273h\003\335<\206\214\354<P\311\316=\t\217\355\274\344\226\253=y\310\254\275\220\332\330<\327yL\2730$\036=B\217\336\275\254Z\234=\207\t\252\274{\353\211\275\243]\220\273\345\322\024\2746E\251\274\220v\241<\202!`\2748\3152\273\227\006\254\273\244l\372\274\305j[\274,5_\275\033Cn\2739\257\200<L\214z<\352FT=\343j]\2759\255V\274\232\232.\275\372\365\361\273\367\224\301\274\326\323V\275Pq\277<s\027M=\326\336\023\275E\330\326\274\303\305\357\273h\027U=\235\233\212\274\010\r_=\347\204\037<\371&\316\274;\214N\273X\244\023\271\271\342\033\275\311\257$=i[\235=tb1<\355\275C=O\332j\275\202y\203;d\363\n\275\236\323\304;\271\004Y=\246\265n=\205p1=\264~\212=\305-\237<\357\335\004=\027\372o;D\315d=h\220\014\272\304\255\014=\363F_\275\370\005\266<\033^\267\274h}\225<\000\3276\275JE \275v4\271\275u\355\013=\t\214\230\274z?\266\274\320x\377<\231W0=\350\315\215<Iu\300=\236SF:\241\252\307=^J$\273\206\367\231\274\231\234G<S\270\356<ck\305<h\372I<t<S:_\006.=\010\004(\274\225\216\305\274I\025G:q\245$\275\207\204\305\274\324\035\007=\277vM\273\016\304\224\2748 R=\000Q\201\274+3\327\273\222\206\320=\'O\017\276\236u\323</\255Y=%-\007<\214=\257<\006fM\274kc\006=\354\242\272<\377\314\377<\263\3205\275\377x\013\273\300\262\253\275\373h\026\275=\3430\275\2465V97\037\321\274J\362x<\233\026%=\374n$=\226Va;\241\205\301\275\214t#=o+\254\274p9t\275\326~\024=\351<c=\206}v9X:\031\274>Y\r\275.\273\362<U\301\367<\331U\266<#c]\2759R_\275\227\372\233\275\237\243\223\275\261\326\302\274\267#c=4\362\371\275O\274\255\271i5\335\274\033^\260\274\017v\263\275\231\010\004=\224q\r={G\226\274!|D\275\276\004\004=\271\203\242\275\203D\222=\246RU\275K\335\276\272\345(w<z\377\330<7\376m<9*I=\376H\213\275SG\030\275\300&\230\275\007U\005>H \222\274\277\305\233<\0004\274<#z\005=y\227(<[\326\240\273\020\030\033=\013\0354\275\024\371\214\274\323J$\275|\341\225\275C}Q\273Aq\305\273\342\377=\275\222\026\236\274\250\327\307\274\224J\304\275\010SV\272\253\300\303;E@\256\275\\\016n<\236a\302\273\205U8\275\375\210-\275\307\345!\275>\346\027:\252\2545<To\003;\313\004\202\274ev\322=\303\003|\275\267\365]\275\300\000\372\274\354E\374::%\233<B\362\220\274:&\266<{\251O\274\366\016S=\334\274\001=z\335;\275\354M`\274\275\244V\275C\377\213;\002\177\252\274mK8\2754mc=\333\330\231\274\277\3152\275`h\304\274_\3373=K\351,\274|(\r\275S\344\265\274\212\363\240\275\317\017\022\275\342\0033\275cB.\275Lt\210<\241\027X=\333\025\215\275m\377\325\274L\'\205=\007\276\215\274&\023$\275\235\033\321\273lD\035\273\367\2535\275A\361\236=\367]~\275\302\346\353=\267I\204=\014\371%\275\305,\016=\264$G<\275i\330\274\266\361]\275\221\253\240\275\253\014A=\243\374\030\275\247\352\010\275\234\227\365;y\214\352\273@\232q=o\342\215\274\001\006\360<E\242\310<\270\275~=\025f\237\273o\277\233\274N\222\330<R\265\333\274P\345\220<(\033\211=L\303|<{\221\376<g\233\262<\373\324\306\275^\341\347<\246!\261<\226\376[<\354tc\274d\265\313\273\010\213\001=A\240I\272r\376\021\275\274\333\014\2741\217\243<\215\021k\273Y\365\226<0\020\217:\266A\002=yu\030:PZ\003=\3770\232=\303Oy\275\365\201\006=\237\023/\273}\262\021<^\367G\274b\036#\275\263{\035\275\211;\264<q\252\014\275\255\221\272=:l\215\274\014r \275\303\205\025\2741\353I<\334\304\275=\237\337.\275\340q\227\275j\223}\275\332\316Q<z8\'\274w\202h=r+ \272\234\254,\275\245\260^=h\016`;\340\263\376\274S\305\254=\275xc<\332$2<\303\233t\275C\360\207\273OD\001\275\373\034q;\300\355%\275#\034m\274\277+#<\304\000~\274\204\306\327<D[@\274\023\022\177\275\340\n\274\273g_!\275N<\301=\351P\014\275\210\250\303\274K\250s=\327!c\274a\230\372;\370\355\343<\226a\203=\207\345.\275\224\374\034=7\t\025<!\314L<\277\225-=\231\201\007\275\217&\242=`\203b\275B+\'\275&J\'=\2707i<\217\341\211<\247\034\013=S# \2725\206W<\'\327\300\273\214y\002=f\230\346<\263\374\301<\"u4<\216\234\216<\213m|\274q\355\250<:\265L\2759q\202\275\006\214\211\274z\035\025\275\3673\254<\r\330==\236t\234\274\237\244\214\275\265\232\207<\355\314\363<\020\355`<\301\312\206\2740zw:\311\237D=\336\241\370\273o\374\203\275F\360\021<\270\212O\275\311\033\216\275\233\306\320<\264\377`<\007\236.=\324\2122=Xa\224<m\374\250\2745\210\251\275)H\205\273@\021\007==\n\t\275M\371\001=\336\314\t\275\353\330\026;l=\'\275(\351\326\273K<\205<\312N\006\275\233\217\215=\215V\203\274G\034\'<5\267\234\275\365\000\360\274\206\261\360\274\231\226\354\2747R\206=5p\235=WJ7=k\367\226<\016\216\347\273\330_.\275\233n\035\275[\237\224=\\\202*\275w\351\307<\252\330\220\275\034\224\254;kz\200\273\204y$\275\354\323<=\224lI\275\207\362y;\007\274\301=7\232\355<\352\005\260:q-C\2750\225\325=\313\334~=\243l\'\274\250n\014=\274\225\265\2748\027\245=.\013\213\274\277\307\337<f\3050=X\302\233\274\304\022\217\274\342\327\361=\010b\265\275`\020\224\274\271\'\226\274\366\274Z\2746\021r<l\2475=T>\032=\327\033\233\274=\267{=\323\365\254<\301X\250\275z\tI\275:A\022\275N\010\372<o\223\247\274W\036,\275\312\2177<\202\312\014<\352\370\240\274\352\314\217\275\214\260\227\274\316\207\\=\204\206f=2\025\201\274\272q\007<9\376\217\275\035\277\025\2749\026\246<\377\314\037\275%\035\034:\206\t\274<\247\200K=\\@\227\274\355\220C\275\254z\206\274\024\267\203\275\002\234\331\274\317\313\"\275\376\323\313\274\313\203K=Pp\024=\'\226\013\274\007\030\016=\327\210\203=\273\376\200<]\257\216\275\375\\\334\275\272\205=<9\321l<\347\376\351\273\253\214t\274r^\336\275\240i\227\275\3402\032=h\245W\275}qA<L\3354=\374.p\274)4\006=\006\352\203\275\376\263\215\275\361\310+\275\025\221F\274\'C\235\274\307&\036\275\n\001e;\273\t\273<\035\304\016=F\"\355\2748\200r=\010\334\211=\222\026M\2752\346\334<\263\274\377\274lBQ\275\177\356\231\274\004\204\004;\276_\343<\370v\337\2748h\300\275x\312\251\274\364\020\215<\033fO=n\274\313<\376\204\325<\266\2026=\201\341\021=\375\370\236\274\330C\n\275\231\231\024\275\216\364/\275\341R\235=\247,\013\273\375\320\377;\nM\321\275\021\277;=\331\333\222\272\305\342\215\274\010v\034\2754h_\274\243\325\350<\212 Q\275D\324d<\325\031T<\255\340j\275G9X=Hy\250\275\031P$=\242vt\275\353\024e=T\300J=\370\366\336\274\251\003\214=\2354\250;+B\301=d\007\300=4\323\213=\311\021V=.\3732=V!\245\273\301\336\034\275\362p\224\274\304\364\211<V)_\274\315a\206<n8\240\2753\373\306\274c\026Z<v\276\033\275\336\\\005\273j5;=\r\013\210\274\377\254?=\316(\031=\365jK\275m\210\010\274\346\333\335=\254\001G;\347\035\035\274]\342\025=\311z|<\270\037V;\265\'\032=\202\336\377<\2647\300=\274#\334:\273\315\303\273]\247\244\274\322\002\360\274\177\361\364\274\222 <=\365A\215\275(\207\220\274?:\252<\246~\361<i\223\352\274\341>\340\274\207\344\372\274-\321j;\234\254\307\274\261\'\252\273\310_\376<s\031\303=9\2564\275g\275\225<\312~\305\275\332\'\213\2756\010\347<N\027\241\274.\\\260\274\300D\333<s])=\347I\226<\343\275\211=\\/\\=Z7~\271\007\262,<Z\204\345<\232\254\377\273\246\007c=\215\314\017\273\021o-\275\035\336\266\274.\247\205\275ix6\275Jw<=5t\376\274\355\225\312\274\315\371H\275\367\325\024\275\354\"!\275|\350i=\220\273\271=#v\206\274\200\216\004\273\315\037\005\275\212\374z=\022F8\275,d\277\275\"\007\306\2757\037*\274\363\362\352<=\032\270=\227\366\304<qK4=\276\303?\275\203%H<aE]=_\266Z<\\\260\030=e\246\n\275V\206X\2758\264\257\274\360\335\333<\021\271\332;\337b^\273\343\361\327;v\331\332\2748\270\250<SF\315<\230\326K=\303\006|\274=\005S\274lS\004=\347~\021\275\004\326\310<\263\353\200\273\233\221\036=\245\227\200\275\200\263\323\274\0171\266\274\222\235\202\275\354dI\275\224`\233\275\010\205\301<\017\370\227;\301\272\016<\314\242I\275\tZ\345\271\343\271\223\275\270\352\335\274C\231\322\274T\036\272\274!\302\236\273\344q\223<\002R\203<\246\237\200\275\036s\350=\364\226\212<\034aL\275\240\206\327;\230\\N:]N}=\262\000\237<\367\'\230\275\364\311B;\356a*\275*\003\274<\347\307\007\275\307\274*=\212\360\307\274\3707.=\227\252;\275\003Kn<#\022\241=\246\200a\274 \311*\274)\302\337;e\323\317\274\344:N\273\036md\275\260\243\230=\277\325B<~T\216\274\322IL<\352\300\235=\006\377\034<\261\210$\275<\376\216=T\272d\275\33283=\273\277\275<\272\326\245=|\371\004\276\231\014\214<K\\\332\273?\305\267<\223}i\274\331\272\233=\004\006{<\372\211\257\273\010V\001=\035\231R\275!\203\010\275\212\027,=\227\242\270=\377 \224\275\307\325#\275o\032\257\274\016\265\203=#\217\031=\364\367\345\272\256\232\366<\306\351X<}\261M=-\336\262\275y\025\366\273\263\263\323:}\342\016=\034D\247=\n\225Z\275#\333P<\262Kj\273\362\202#<\215j\324<A\253\014=\367\3212\274\205\226\216\273\360\001\036=\274#\311;\356q\333=P\356\034=a\205n\274\232\210!\275#:\273\273d\013\277\273\256\201\001\275S5\203\274\205%\236=q\316\007=\361\375Z<\213r\t=H~\334;\\\n\357<\316\301\211<\304u\023\275R4\005\275\\\200\263\273\031\021\340<\276I\253<N\246\210=\223\303\301\274\253\363\203<+c\360\273vo\345\273\243<~\275b\353\005\275\273\377\307\274\003K\005<_\370\322\273Y\201\027\275\001+V=i\347\351<ii];$\'\347\270c\364\233\274\260x\304<\225y\013\275-\336\263<\027e5=\010&\036=\214C\217\274G`(=E\026T<\247\033\252\274\246\335\233\274L\365\266\273\0165r=\303c\227\275\303\231\352\274S\320\010=\357/\373\273\0315\034<jA\271<\352\234\016=2i\004\275H\300[;_:r\274\303=x<\311\341\302\272\014\0056\275\264\337\245\274\021\203^\275\244\023f<E\020\036<\205l.=\215\247p;\033\253\206=\262\001\245\274\257\347\201\272\203\355\217\275k\257\323<X\302.\275\027\234\372<j\322\034=$0\010>\234hV<\332\3530=\000\314\n\275\005\246\337<\271\313:=\361Z\236<\242#H\275\210s\177\275\215\217n\275]:~\275>}\274:\212X@\275\350\214\322\273\004w\n\275\312\265z=-\247\223=`4\362<\204\314\220<0\021]\275\020\023\021\275\300\203\346<\317\361o=\n\252\016=\276\300\357<\234\200(\274=U\032=\3622\357<\354t\260\273\001)\211\275\275}t=\253\037;\275o\227o\275\001)\033<Xu\222=\017\232\340<7VP\275!\363\354\274M\344\007\276Z-\204<dD\331\274G\254/\275\344\343\313\2740\375m\273\214k\226\275{a~=\002\3047\275\014\354\036=dC\360\274)\'\254<`gv\275v\254\311<V\342\220<wTJ\275\322c\325\274\326\207)=\300\266\340<_\215==7\237\227=^\255\\\275 \037I\275\325\252\351=\001\315,=\353Ll\274/\216\024\275;\221\324<\035\3047\275\365\200\324\274$^\204;\237\276\246\275\252\014\246<\0140\243\275\005\305\242=\213\362\322<t\010\267<\257c\025\275\263\332\221\275D\216\271\273\200,\236\275QR[\275\247\230\377\274\306!9=u>G=\232\347t<\233hm<\270iu\2759\206e;kCO\272\032\237\253=\212\'\355<m\334\023\275\275\206\313\275\367Bv=\001\223\003=-\2057<K\354G\275\235>\204\275ux)=4\277\"\275h\277-=\227\270\364\273\363l\202\275\350U\230\274\364\026\216;\222;\262;\355@\306\273\252\234:\274\222\n/=\270t\026\275W@\\\274\353\004)\274\214\255\272\274\004\234z\275}.\232\274\2010\337\273&\016\200<[\314\254\274\014\312W<#\360C=M3\264\273\367p\023=CW\007=\207\t(<D\357\235\274\n\027n\274\372\231\214=\'\352_\275\026\216\216:\215A^\275o\342\"\275s/\"<\003-\317\274\227E\022\275e\346\026=\363\2743=v\004v<\340\227\212<\223\303\211=\311\231\373;\024Z\372\274\201\026e=\001Ir;j;\272\274S\243]\275+\352\005\275\320c\t\276\273f\206\275h\024\014\275K\210\247\275W\351+=YB\232<\363\320`\275\223\341S=\257\302\256\273\033\263\255=5\030\225\274\211\341\033\275\035\007\231\273\376\212\023=\267[\237\275\035\317\377<\252\203\242\275\013]\333\275\221A\007<\210\342\262\275\265\336\212<\006\2448\275\025@\257<p\237\006<\345b\374:\365q\245\275\255\3343<\214g\271\275\032|\314=\2608\202\274\222DG\275\016\211R\275\3112\016=>\014\333\274\323\347m\275P\213\016=$AI\275S5\367<\023=)=\377&W\274\210O\230\2744\311\325\2752\216:\275?M\005;y\353\022=\240\t\211\275\213\324\243\275\325\266\215\274\317\372\010\273\302P\231<\241\3738\275\346\323\364\273\366\352]=\227A\351;\244\270g=\333\032\035\275\2772\342\274m\013\017\274\221#*=\274Mw\275x\354&=\263mn<\276,\233;\334H\262=t\036\213\274\36585<\2226\311\273h\367\276;-\370w=\301/G\275\310R`\275\275n2=\374\321+=s\234r\273\367\2262\274\234\325b\275\227\013}=\010\325D\274\203\204\247\274=\267\010<Q\002\272\274z~\244\275\010\306K<q\267\350=:\260h\274\210J?\275=\2407=DI\236\274\343\235\330<\007\272N\275\216(\243=\232\252\232=\255\333Q=\263K\232<2\"2=*\330\216<L\033(<\"\346\006=3\306\330\274\302\3019=\312\3370\275\\Ci<\304\263b;\311\251e<W:\032=\226\363\242\273a$W\275r\3467=\200\364\n=v\271\235\274\262{5;\216\003\271:\314uC;\377\241%\274\263\361\326<\311W\267<\205\3775<\207\020e\273\333\270\035\275\240\233\013<P\230L<:\375-\275\341\363\230<\356K[<\314e&\2750oR\275\356\246\340\274\343\254\003=\245\311I\275{\242\247:\231\034_=\377c\345<\227f\3459/c2\275\3663\353;\2325\222;Y\352\226<\372\234R:\262^B\273\312Fs\274\225C\026\275&N,\275\206X/=P\020\025=\215\246/=\325\206\205==\377\326\274?\260k<\324,\211\275\r\272\241=%\035\374\274\213\215c=RW\020\275\310\376y=\271*\254\275\335\"\371=tGq=\245*m=\037\024\345<\345\342\'\275>X\027=-t\275\275\324\036)=\311\257\370\274\220\3576\2738\253\\=z\321\005\275\267:(=;\033\313=\031\027\221\275\217\'?\275\324`\200\274<\022f\275\320\"\373\274\367(\251\274\274\2109\2747$q\275\264\322\303\274\270\023[=D\023\177<\365*\013=}EV\275\370\364\"=?\005\224\274\203\021\231\272\213\014(\275K\240j\275\371\332\225<\014\207\204=\265\310\031\275\361\361\375\274\002\337\326<\025\332\371<\360\333\244\272\366*\212<\017\003\276\273\002\025Z\275\222\331\024\274\360\244\031\275\032\276\271<`d\276<\360\351\321<\350\237#\275\216\305\307;\310s+=\363/2\275\273{\003\275]\254\205=\2216\307\274\367u:=E!(=\026\254\240;\343\362\001:O\375P<of_\275\357\213\314\274\300r#\275\232C?\275\210\313\341<\t\336l=b~5<\030\2706\275\263\022B\275\330\200Q=\221$0\275P\227\262\274\271\022\213;f&\230\274\324\024\336\274%\0340\275\261\010\323=\033\212\327;\300\024\030\275\224\035H=F\262?;@\313z\275\326\225\261\275q\206B\275\3642\206<]6F\275f#3\275vP\026=\204Ph<\003/\201\275w\331K\275a\344\212= \375c=\317Q\312<\222\223=\275]HO=\301\240W=b^e\275\225wa\274\001\210\\\275\243Q\003\274 \201\001=q\333(=\315[\317<\177.;\272U1\225<\350\241i=\246z`<$Bh;\003E\177\274\226#\234\273m&#\275H\307\342=>cG<\024\004\377\274\035o\344<0\010\217\275}\236s=jX\t=\3351\224\273e\225M=:1\367=\375V+=) \352\274\273\304/=\224\371\304\274\270\232\275\274\237\024\037\274Maq\275\016\0331=\025\261\303\274u\032\013=\303@\257\274\317\274N=\220H\020=L\375\335=\010C3\273\272\016\321<~d\215\274nW\037\274\235\360\312=$\002\"\274\237\314\366<Y\252\313=^&\005\275\310\235\236\275\213\260\223<|\232]\274\022\027Z=\223\361\263\275\312Ki\274\256&\370<\365\224\240\274\336\352\370\274/\035!\275\013\3616\274=\201p<\034\367[<q\024\246<;:\032<u\206\n=\246\237I\275ER\347\274N=w\275=\017\250=\253X\213;\324\373|\274\177G\324<\rLz\275\215~2=\322,\231=\317\036\214\275\271\327\306\274\215\324\371<\332\n\235\274$\306\200\273|\232?\275/\254\231\273.\310}\275s6(\275\201=F\275\004\324{\275!E\031\274\215\364\342\274\240\014\374:_\025\327\273b\315\305<\025\376\177=\355\023\317\274\253\265\t\274F\267\312\272\250X\341<7\0373=\311\214_=\252\265\031\274\271S/=\230!\353\274\376\323/=\227\031\211\275\2545*=\351\240\276<\344V\321\274=\307<<Z\024\214\273\221oV\275!3\274<h\364\243<zV\243\274\211\225\020\274r\013\032<\325\261N=\243\237\263=;\004\206=>X\201<,\375\367<\274\364n=\021T\227=\324\357R\275\335\347\241<-\215\242\274@\371\214\275\363?\n>3\244\025\275\3122\003\275\337\n\275<.\243\265<\007\277r=k\362\025<<r\002\275\243\303M\275xH\304\274\245\201u\274\306rM=\300\244D=\232\277\320\274r\235.=\230\312\n=\010\301Z\275+@\261=\373 `;\374\260\301<H\202D=4`\231<\205\255X\275\010&\204<^\352x;\335\202 =\303N\002\275\354\220>=\262\2065\275\227\242\027\275\t/\260\273o\314\014\275\244\353\000=\217_\246=\203(8=)\222[\275\013\325\255\275\355\365M;\210\356J\275\024\017\343<#z;\275,\233\322\274\212TD\274\265p\202=\3400\330\274-\366\236<\244\3324\275\034\221\322\275\211\367\220\274w\360\223\274=[U\275%9\264\275Eg\177\275t\032(<\024\277\212\274\034j\223=\024E\033<>\304\n=A\004\250\275\242\232\200=;U\020=\372[\355;\205\347\206=\t\024\031=\245@\237\275\334U\323\272\242\3471<e\215\033=\2048[\273\233i\216\273\3536\022=\370b]\275\027\331O=\347\272\203\274\275\254\003=\335\302\200\274\265\374\311<\211Q\334\275\024\357\306\274\262\3506=,\035\010\275\337\272|=Cj\034\275\240\004\245\275\346[\217;5\205\275\273\024\270\371\274A\223\235\275%\3773\275r\024M=\234\212D\274\363|\307;\330\302\277\2748\367k=\310eX=\361]1\2750\031!=M\357\033;\034\030\235\273@\266\211=\032\335z\275\r\343\206<\244f\313\275\004\301O\274?\004^\275i\327\240\275G\241n\275\\\200\355\273T\005\265<8\342\035\275\275$X\275\314\001\256=a\215~\274\303\320\021=\377\277\371=\316\263\022=G\2372\273\302\345\026\2758t\222\274\024\331&\273x\371E=\0347\202\273{D%=I\370y<v\035\000=\274\220\307<\336\t\214\275\037c\001\2750\316W\274\036\204S;&\235Q=[\372b\274\'\342D=\236\321\007\275P\212\026<\372\226\340\273\357r\'\2755\205Q=\2279\013\275\0031\362<\030\251\366;\r@\211\275\310\026S=\203}>\274x\347!<\177\216\036=\374b9=v\202w\275\306@\215<YG\242<N\342^;}\214\375<\224\345\247<m\266l;t6h\274#\211S\274\375\255\375<\376\031\225=o}]=\360\246\315<\200\317\'\275\207\331\235\272-\341\246=\311_\235\274\344\030\227<ft\204:9\335\026=M\321z=\037\360\345<\321\317\311\275l\r\256=\374,\244\275\257\024M=\265\006\232\2755K\366<[\353\032;Qd\372<\212rM\275\312o\333\274\261\243.\275\235G\350<\311\374y=\233w\346<\027@7;b:\334;\036J%\274\014\035\352\274\230p:\275\214\253\232=\260A\230\273\261\245\321<\223\017\217\2742\257\214\274\256[\305\274\220\256\030=\262\273\250=\265l_=\216\022\325<\302\014\344;\000S\255;k\361j;\236;=\275\365\306\275<S\010\207=\212\231\211<\301\340\221\275\263\n#=@B\234\273M\005\004\272a\372L=\037~N\275%b\272<\304\207t\275\331D[\2740\220s\275o\372\211<?g\003=\315\326\006\275\210\336P\275\263A\024\274\213H\363<-\367\255=\0322\000<36\204\274V\351\207=\261R\344\274G|5=\335;p=^\235\370\274\370<\330<%L\347\274\031\330\220\273\361c\215\271\343\304Q=\201\205\"\275\202\332\372\274\361@\254\273-\2672;B\234K\275\211e\035\274\271\221\261<\024\244\r\275\022\207\310\274C\031\276\273l\206\021=S`\214\275\315\274\016\275\034\002\212<\024\346\212\273|\226/=\275\347\003=\"\275\330<\356\3418\275>\300\331=\357\331R<3\235\257\274\340 \323\274o\306\202<\3740\022=\354#t\274\020\231\223<\215\212\354\274\371\236}=\223H\304\273\274+5\275w\330\220\275\210\023\220\275 _ \274\321\341\025=n\034}=^s%\275\301\001H\275+\330~\274[\260y=\373\313^\275\351b\016=\353\361\302;\001l\214\274\265\214\025\275\030\3618\275\303\363\214\274/?\030\275\262s\243<\247\203\034\273\342\361!=P\007\243<v\223\254\273\3144\017\275\331h\231<\332\014\224=\306\344,\275\205n\321<9R\343<\351\270\226\275\340~\260;\003b\032\2749\373\311;t[\322<\350\006\271<%r$\275\311\350\222\274\025\376&\275#P\243<jO\237\273oC\257\275kQ*\275,\246\200\275\370\333d\274\255g\236\275\376\355\354\274\226\252[\275\230\021\225;\226\306e\275?\370z\274\001\255~\275\306Q3=\343\260\230\272\342\372\216=\307\247\214<ME\263<\003\177\t=\206\375\301<i\350Y<\346&\364;\020O:\273\023\237K=\262Kc\273\0358\227\275^\205N\275TM\273<\35008=\217io=P\332\310=5\014\253\275\274/*=\230\317\031\275\243\206\344\274\201\202\347<\270\014\345<N\230\373\274\233\"\213\275N\017\210\2745w\344\274\260;P;\242\237\006\2741\261U<\200\255\233;=\334H\275\005\334\033=i\226\226=\332\341t<\345\264\204\275\300\215|\274e\321\312<D\223\330<\031\2335=\240\275?=Y\260\260\272\332~y\275\t]\003=\350y\304\272\220\272\002\275z\243\203=<\325C<S>\317<\2664\314\274\244\230\216=\263x\266\274\034\326\223\274\216\365\201\273h\267+\2758\"x\275n\244\321\275\371\2672=\346\201\213=\347\235R<\203\020\321=\241\377\002\274y\3335=\020\264#=\264\036\260\273\303\300\337\274\002\017\242\274\375M\231<\343\313\240<f~\301\273+\252N\275\266\254\225=\313\307*\271\303G&=\256O\274\273\326GM=\265E\305<\'`*=\n\270\201=\026\262*\275\363Q\262<\321\017\316\275:\375a=\311W5\275=\016@=\'\035\250<\257}W\272[Op\272q\342\234=\345\247\356\273R\215Y<\255\033\360\273\2539V\275\333\005\221\275/\234\025=\2163}\275P\"Y<7\216\223=\317\001\202\274\327\314q\275DQE=5;N\275q\234\231\275\377\360\201=\267L =\2761\357\274\316\346<\273\t\302a\275\355\341\343;\232\330\005\275\247c6;\177\362\230\274Ys\202=L\215~\275=\300\225\273\253w\227<`\036X\275 n\225\275\222?#\275\252*\277<\356:c\275\273,\274\273\235\237\005\275Z\262 \274\310\234\177<-\204\023=\323v\'\274\253\322\364\274\017\315\203=\225\365b=\213\273Q=\377H\001\274wa\203\272\n\374`\275\312>\255=\215\251<\275\033\244\367<\316~\024=Z\217\017=XN\003>\310M\230=\2061s=3B\203;\215\013\313\275\212S\241<i\372!<(`\022\275\231\301\225=6\243\261\274\377`Z<\332v.<\332U\005=r\242\247<\347/\222\274#\2638\2729\273\027=\325\237\002=s}\242\275\267\000O<>\232\016\274\344\262;<\344@\265;\037\343\317=\210de=\342\301\200<g~)=g\324!\275\252ps\275\363\343?\273(\217N=\372o=\275\020\223\361\2739\277s<:\3304\275\244l\240=5\r\030\275n\027\260\274l\244\216=\371\337\202;\363\214\221<!\322i;\034\ta<\366*{\274\242\342w:@\377c=\265\004\274<\317\251\204=\301\003\033;*\231\350\275X.\361<\027\"\323\274\246\253&=;\006\025<G\341\202=u\364\222=\344\265%\273\302\340\271\275\205hW=i\271\020=\335\320\030\275\200@\232\274\377\267\210\2759\244\006\274\023U\014\275\005\367\004\275\311\252\265=\213\r*\275m\037\202\275V\223\300\271Uq\302\274o\235k\275LCa\275\272\354\264=T\2375=\213\\\206\275\360y\205\272\026J\234<7P\034\275\225\333\225\274\374\377\240=*\213r\274\003\366.\274\206\256\200=\274\235\014=\321G\346<\233>\231\274_\214j=&\357\271<\245\332w<\333\014l\275f\017\030=\376\203\010\274_G\262\275\'\276\236<1\033\260\274vW\203\275\327\306\032=\316\215\201\275\'\241\017<\024<\203\275\355\236c<8\033\232<\"\003\227\275i\020\244<*\231I\2743\354U\275\027\367z=S\273\265:<5\325=\347\244\354:E?\311=8\366\244\275\223/\330\274\250\260\303\274\351\375\232<\177\036\235\273J\254\014\274x\325\256<\025\025\326\274\007\226\'=-\274\037<\232\363\177\275\337%1\275\357\r3=\2375@\275%\305\271\274\256}\237<_Uz\275-\231\277\274<\266\326=\177 (=\377\334\242\274h\263!\275=\333\365\275Y\036f\274+\300\031\274\373\243\005;\330y\'=\370\3718\274\222\306\342\274\352\305\265\274\347N\007\275\2654\032=\"\302\371=_\022\215<+\031\255\274\215\343\360;P\361\236\274\203\2758<\217R\335<{\262\276=\376b\370\274\267z\236\273\315\310\360\274\215f\033<U\260{\275f\316\330\274\315Kq\275|\322\217=\366\302\320<\276\262\335;Z2C<|0\312<\355\357\222<\242\014\255;\304\236Y\275}u\220\274b\000`\275\301\206\267\274j\2176=r6w;\346\036#<\2703\261\273F\236\223\273\017]5<\371>2\275a;V\275\006VL\274\220\250\201\275}\007\017\273\363\372\214\275\034\371Z\275\t:\005<\203\"C=>\317#=\005\267&=\007PW=x\255\200=:\273\243\275u\366\232<s\014\246<@\234.\275\270\021v=\225\247B\275\322_\357<k\\+<\342?\250\274\336\021\202\274z\006O\275=]\275<\362?\r=U\375I=[E\305\274\2324\232=\272\255\020\274\360\350\364\274A\264\316\275\264\264\224=/j\005=\032\247\\\275\311\337\342\275\232\177u=\001\201\217\274+\343\354<\322z\271=\360\273\t\275\026\0369=\253u\023<\032\036\210=.\351l=\362\241\267;]\036\265<~\221\312\274\'A\204=\032\035\351\274\025\276\250=\006\364\200<\205@\235<\242\\\021=\334\201\227\274\274[\031=\331\303!\2731\017\337<\332\257\214\274Q\004X\275n\r\233=\266\t\201<\037\030r<]\264\001\274\237\267\r<$\276\034\275\210\213\242\274\375\216 =\023\311#\274\036K?\275\223\211\261<\326h\034\275k\253\306\274@\353,\275t\303\342<\376\221\024=\234\311K\275\241\316c<\271\214\306\274#\207i\275\223\373\333<&}\036\275iu\313\274\272\023\317\274\334=\014=a\241)\275rP\277\275~\212\013\275w\350\272\274\306^\255<~b=\275\233.\315\273\037_\035<\307\1771\275@\036;\275\324\305~\274}\006\274\275rW\254\273\350\024\234=u\221\256=\365\200\245:\016\340\027\274\331\214\233\272I\024\240\274\2248\234;\252dN\275\332\026[\272e\301\020\275%t\234\274P\330\027=\355\304\022<\350l\213\274g\031\027\272\243p\270;\312O\007=EzI=[o\307=\351a:=s|\210=\036\260\020<\276\221\272\275-C\234\275\363\303R\275}@\360<\202\010\005<\270 Y=K\353\217=a\333C\275$p\303\273yCx\275i\352\307<\2346\216;\320\r\327\273V\016\254<t\213\335<\221,\310\273>T\001=\374%\252<%_#<mR\033=\311M\332=\177\206\006=\257\357\007=\273\254\377<\362\023=\275s\245D=}nr<\000\007\347;<\275\317<C\237\254\275~\273\212\274\345h\020\275;\340\n=W\276\007\273o6\220=J\177\003\275\221S\356\274\3206\002\275\316\235\351=\222\036\232\272+Z\027\275\230\325\n\274\271U\007=\262\031V\274\343\213O\275N\363\333\274RhY<\255\273><\337\234\003\275\262N\002\274J\377\223\275\266\366\223=\370g\005\275/$\371\274_Ss=\330\233\212=\340o\243<g+V=\037u\371<\022,\252\274V\222Z\271\t\313\377\274N)\331\275\372\002\325<\333sm<\004a^<\366\027\005\275n\3151\2751S\336=\265\246o\275\206\367\034=W`\031\276.\232\002\274\334KN\275\006\0174=v\360\272\275\310\001\342;n\273\004=2 K=\021\022\202<\314+\317<Q\364\220\273%\2204\273Xxp=\014?\336=b\234Q\275\302\2230<\006\265\232<\333_\001=\025\341d<\266\260n=W\217\217=_ h\274L?^=V\026\253\2753u)\274\246\004\036\275=zk:\353\335\357\274k3\320\274s\237\225\275\350\030S\275<\352E<\301=\214\274\371S\023;N\211\247\275\355\n=<]\340\201\272\242\336\202<%\344B\274\346\275+\275\355\030L;\371L\362\274\372\203\317\274\210v\250<\262\336\204=\010\206~=hs\"\274%QY\273DI\241<\340&[;H\325g\275\205\217\270<H\366q=(\333\005=\024n\330=G\203\300\274\211\353M\275\360\264\346<V6&\274\253[\310\274*\376o<U?\375\273\355\352u=\350p\354;\316\211\r\275Xl\272<\367\301\327\273\223d\346\273\343\251\305\274S\252H=!~\263=\t#\335\274\350\'\231\275\332)\203=K&\021=p v\2758\277\270\273Nq\243<L\304\242=\210\357\001\275\315.%<n\n\261\275h5\204;\336\333\304\275\300\232\356<}\234$\275\302F\202=E\376\341\274\004\226<<\r\264\204\273\366\214\037\273\273\334v<\332\221\025\275\030V\206\275\322Py=\252s:<\023U\221\274\326\004\277<\000S\n\275\3373):\030b2\274\237\006[=\354\006\321\273\001\n}=!\"\204<\366\000\007\275A(\227\274\363]d=\003\016\376\273\352z\032=X\265\241\27449\213\274|\325g<\233\315\203\275\263\006x=Y\244\271</5S\274G\331\277<\346\372\203\274?1\210=\377\333/\275\036\323\027;\003\276\237<\023\224\312\275dQ\342\273_\355\362\274QE\305;\200_\225<\357\004\026\274r\256v<d\322F=j\317g=\036\325\211\275\347@\220<\257\217G\271\217\201\365\274`@F\275\321p\362<\0173\204\275\340}\030=x\006g<X\367\332;Z2\276\274P\363m=\362jw=\356\265\327\274\377\227\256=\227\327\211=}\370F=\224\037/<9\031k;\027jR\274o\343\247< Y\267;\375cP<\250Z\215\274UM\260<\321\324\224\275\246\203\347\274`\277\322<N\230U=\311\341H\275\016\227\267\275\317\216\250=\275j\356<T\010\227\274\270\233\334\273t\310\256\275ob\017<\355\255\273;3W!=b\363n=\242\353w<\016zg<\227o>\273\257-\264=\232\253\216=[[4\275\206\212\360\274\245\257O\274%\266\013\274.\rJ\275\014l8<\231\232q\274r\304\213\274\366\001:=YW\004=\222\005\253\274\217kB\275\035\022\002>\206q\350<\255\323\004=\3076\2068mg\215\274\274\364\000\274X^,=7\2476<\020\241\213<\033RL<\277\330\346\274|\267B\275\036n\310\274\006\3463=\001Q]\274\236\357\013\275\265\027f\275t3\004\276\237\347J\275\376\274\273<\223c\020\275z\322\203=\357\323\273\274\236y\353\275\322]C=J;\350<\372\215u=\033\256c\275\337\231\236=\t\256==B\267T\274\354\203\234\275\277\326E=\006\344\217\273\026\362\342<\263)\026<\312\202z\274\020\216\330\273\262|u\275\004\322\207\275$\337\263\273%\216|\274\230\332\354;n\204\236<0\305\227\2735\021]=Ih\303<o\232G\274\217\211\215=2\250\216<\362`r=\312`\002\275\0165\"\275h=O=\r\354\036\275X\013V<w\373\335<\022n\306\274\241\025p<\315\232L=\003]\201\275\316\353\001\274\367\272\305= \211\004\274\233\024\330\274v\022\373\274\352\325\325\274Tk\264\274\317:3<\325\n\237<WB\217\274\240\316\013\275\215\222\200<C\035\026=\337<\312\275A\267\033=\024\272\223\275\013t\252\2740\3300=\347\231\356<\251\205\227=Z\344y=\352\314V\274\303\231\207<\207BN\275G3\315<#\332B=\305\250\020\274\247\214a\275\337\326\307;=O\224=\002O\245=\023~\326=\325\221\253\274\207\274,=c]\330\272\353\217\211;\346\023E\274j\227\350\274zl\200;\322\322\t\274\351\364p\274\025\020\273=\254\313\2219\215\373D;\364\3250<^+\177<\t\375\r<\224}b\275\244\264\260=\201\327<\275S\250\204=\"{Q=\371\327\225\275{\302\002\275*\272#\275\006\227\277\273H\372\334<\272\254\n=\370\360\t\275\221\034\214\274\247\013N;\360\343\031\275;\210^=\350;#=\302\007\202=U<\021=C\221\324\274\177\016\201=\352`\312;!eg\271X\372u\275\000\r\307\274\334\305E=<\260\237\274\031\217\217=\016[o=-8\227=\213\346\347<\214\273[=\245\021.\273|\325o=DK\225\273.\251l\275\364\024h=\215?b\275\235\375\232;\261\211%\274\353,\321\274\302\346\340\275!V\366<\222|\224\275\255\201\206\275\246\256\233<&@\013=\020\006\357<\215\333\016\275\250\032\224\274\360\3433\272 JC\273 \017A\275o\272\036\273!\317\360<CMN\275Y\022\213<)\341c=\356w7\273\261\212\267\275!\245\325;\222=\230=G\322\220\275\236\331\001\275\333M\264\275X\234\004=H[\253\275\205\201\032\275\251(\030=\251X\230\275\002u@<\016\362N;W\251\227<\373\027\002:\216$i<\n\212_=\205@\276=T17\275LZ9=y\325\244=\307\220&\275\200lN\275\272oT=\035;\217:\031\207\242<#\271\256\275{\304\227\275v\366\354;\006\271\025\274\334\305\260\274ri\032=\022\357=<b\001\013\275\375\250\331\273\334>P:*\017\356\273r7\315\274W\376>=\325\320\037=\036\232\203\275,\021\353\273<\217\341;\031\364\014\275\201\214\214<*(r\275Q\262\222:%\305r=\242\202\025;2\233\030=7\375\016\275t\355\\\275\215\374\026=\263\367\014=\036jC\273-\214!\275\"\223\'=B\031\006=s\342\366<A\277W\2744c\031=\245\247\235=\016\245\242<\243k9=A\232\030=\370\355\217\275\210g\036=\236\'\221\274rf\266<(\233\007>\2727\255<\031\245O\275Shi\274n\211\277;\n\221.=r\316M\275\177\026\266\274y%]\274Y\240\337<h\352U=?-\271<\231\345G=\314\352\212=w\311\233\274~\250\t\275\"^ \273\367\\\210\274%\275\347;\310*\007=L\332\372<\001>\201\274_\223<\274\257P\026>\336\221*<_\354\227\274\212\264\252=N\336\336<\241\371\367;\213\020\303\271\266_\224\273h\024\350<\325\211`\275E)\215\274\347\374>\275H\344W\275YX\027<\364\032\035=\341\350\313=\005\023\250=Z\006\336;j\346\317\273\330I!\275\376:\226=vn8=\000u\256\275\212^\021\275\304r\204\274\357\243l=\317\312\025\275\rMC=\246\352#\275y\r\232=[uW\275_\256\201<:\200\014=\367\336X=<\365\023;\033/O=G\200O\275\271\267\326<o\236\226\275\0241\227=y)\263\274aE!\275\311*\221;P\013\335\274\025\0063<\307\370\r=\227c\260;\302\351N\275\370SG\275|\240p\274\257?\341=\321\363\031=\024\272\021=\217\320w;\'\347;\275\230\252\207=\266\300\275=\007S\310\274\032\307>\274`\342\366:K\177\003\275\26759\275\354\233/<\303C\216\275\233\000\024\275\312/\205\275P\323\322<\177\017\254\274\314e\301\275\372\276\033=\253b\234=3\231\224\274B\312r\274\202jA=\305^g=4\343\321<\232\215G\275\335\220\212\275sR\203\273\257\300t\275\357]1=\223\220\244\272\315\257A<\227\255:=<\256\313\274F\375\230<\206\024\313<\230E)\275\007}\032\274\251\356\242\273(\032\"=\027\324.\2753\037%\273H\3114;g\201\237\275\261\304\307<2\306\345<\352]s\275\226\2372\275\366\244;\272\300\314.\275\355N\251<\365\324\346<\254]\326<\005\201#<\356\270\340\274\357\2369\275Q;\303<K(\267<z\234X=\324\242n\275\377\017D\274\201\221\235\274\243?\031<:\222!\275\002\'\316\275\345\r\367;\321\037\276\274\300\335\032\275\340V\265=4\356\361<\212\237\242=P\rq=#S\270<\347,\201\275\027N\212\275\201\024\020\274\021\026\264\274\216k\241<,\002\036\275\036\035\235<r\001\235=\030\362\330=\367w\324:\276\212\270\273\264F\224\275\362\323\030=\027\311\351\274\317o\243\2742\313?\274>2)<n\020\225<\245\033\202\275@\r\030\275\303=E\275q\033\340<\347\244\237\274Fr(\275\240\266A\274Sbn=\204\232K=\375M\225\273\3227Z\2742U\276=ml\263<\313\014Y\273l#Q\275-\327\217<\027\216\214\275\244\326\253\274\257\3415=\200\361\361\274\247NF\275\016\254\223<\303#4\275\320\221\372<\212\t \275\203\030\223\275U8\307;\330\213A\275:|\363<\336\020\206<\007L\233=\250\253\224\274k\0055=\006v:=\231\321\263\275\354g\237\275\316\244\267=Rmf;\213\2727\274a\327\033;\000)\215\275\216\234q\274\232G\035\275lKG\274\rT?;%\374\005=\344\016\342\274\017\274\302\274\211\343v;/\225z=\377\273)\275\332\362\216<\241{8=T\244\222<\317\317\323<\275l\021\275\t\372\213;\273\222\353<#G\322=\020\352d\274\366\003T=O\300c=\367i\003\275\nJ\024\275\333\226\023=\345c~\275\004\355-\274\226\016\340\273t\362 \274\026\262\025<ww$\275\271\204\243\274\301Z\263<\242\332\302\274>N&;\213NL;\3671\026\275\017\275M\275;o\344<9\362\t=\222\007\324<N\256\026\275}\367E\275\327\006o\275\005VM\275\243\315\217=\337y\025\274A\001>=F\010\t<\256-\245<\220\235G\275\230\267\263;\035\350n;\210_\243=\030\370-\275\0076\216<\t)\365<\003\326\231<\212\324t<\240\255\023=\307\307\346;F\341\351\274\340\330\213\274\220\366E\274N#\322\273\024d\372\274\205\265N\274T\243u\275\277\324\340\274\370Ey\274\221\007\221<\215\370\35390\355-\275\'t\250\275\033\342\353\273I\005]<\274\263\223=\347\037$\275k\337F\275\306e\332;k1J=\312\274k=0z\331\273e\374\253;$\234\255\274\322\215\304\275\217\367b=\326\246q=\253\275\301;O=\001=\230\347\314;\214\314\206\274H\275\227\274\365D\013\274X\217B\275\021\270W<n\245\324:\357`\333<{\016i=\226\354k=u\362\225;\334\034\007\274\262\\\000\276P\211\336<\2037\374<@\367\035<MA\274<\233\200\355\274\360\352.;\336lE\2739\322\320\273\274\307\266=\0277\234=V\320-=\214)\007\275\233\007u\273|FB:\274d\247=\336\373w<=B\374<\033\245\251\274$\214\361\274@-V\273\341X\034\275\363!6=$\215\2759\2612U=1M\232<\215\2705\274\256H\024=\376V\260\272\200\017\262=+* \273\001\\\366\274\204\252\335<\330(\002=\341\326D=\367\256}\274C\233\275<\222;^\275E\323\343\273\371\357\255\273j\200\243\275P\221\037\2752h<=\275\202\314<\313a\246\273\332i\203\274\24274<\273!\362\275|\360\250<\344\366\335<}\263\244\275k\n\242\275\376\256\310\274\200\225\314=\024\206\207<L\326>\275\275\215\332\274\221\305C;<\362\244=:\241\200==\201\200\275\274X\001\275>\243S\274\343\266\262<\271QZ=\200\314\027\274\331n\375\273\217\230\344\274I\3202\275\006\036p={\324\004=\352\331V=I\302\224=\003\267\";\020\326\035\275\305\223A=&\261\024;\231\205\237=\360\365f\275\321\000\032=\363\256\301<\344\007;\275\266\010k=7\032\362\274\367\334\370<\233m?\275\335q(=\034\254/\272\214\032\205\275<\2359=M\3537<I\310\373\274W\377!=r\202Y=\002\347\206<\314\321N\275\254\211x<\014\377\270<\\\347P=\203C\224=t6=\274\247\032\275;M\014\267<\223\201B\275\342\247 \275d\034O=/ \345<|\333~\275x\333\003=)\276\003\274\233\261\013\275\352<j\275\222\346\371=w\236\017\275c\326^\275c\303\025=\246j\227\274\255\361\022<&\375T\275\304ZC\275\363\255\326=\203X\2469\0018\032\275\271\320b\2758\007\340<\313\356\356\275\035\006%\275D\356\026\274\330y\246\2744\366N=\000\005\000\274\003V\201<\337\375\217=B\375\004<|N\315=;G\0179\rs\002\274\016\314\226=\360\313\372<\250/\007\275\277\020\245\274]K\022<S\330\201\275\264\254\002\274!\207\201<C\367/\275\010\t\376<\342\035\215=\374Jg<\212\360\025\275H\260\024<\306=\245\274\357;+\275\351\274q\275\t\275\246<:\377e\275>a=\275]\021`\275\226\256 \275\375\214\030\2750gP=\027#\234\274o\367b=~\316\374<\325\277\352=\235 \363\274H:a<<9T=\365\350\r<~\302\262=\345I\221<\216\216\003=/%d\274d\332\373\274\345\266\336<\022-\370\274\036\267\'=\036\230(=\016$t=f\321X\275k\004\274<\005?\256\275\274\334n\275\365\363e=w\327\231\275\325\031|\274|\263\225<\240\007a\275\305\350S\274\033\3305\273\334\007\355\274N\264Q=\323\261\253\274\355[\213\274-\036W\275\245\200\331<\253\270\260\275\202\223L\2747\376\255\273o\000\322<\263\362c<\0264\350<.6>;Q\254j=\010\221U\275\256GD\274\0165\031\275]\304*=\362\036\016\275\353\233*\274FB\374<\224\037\374<\206\234\236\272\361\346a=\257$\314<f\341\366\274\016\006\227\275\341\226\007\274&\354{<4Ur\275\346\365\023\275\304\034\245<cJ\022\273\307\246\312\274G\307\347\275\377\316\263\275\360\201>=\355T%\275S\214\210\274[\254\336<\3073\201\275\2018\244<r\325\362\274\333\201B\274\223\023\024\275\354\220\324\275\263\346v=-\305\205=|\306\032=\366\317\220\275\302`\266\275\335\267!<\004T\233;0\212\t<\300\272\032\273\300\206\020\275\004\030\332\271\2236\324\274\036Cz<\217\205&\275\221w\337\274\225\304E=\307\001\033=\217u\237\275 \326\002<\264=\365\274\260\014[<\274\340\224<\345\020\240;\0273z<N+\226=\202\374w;\200\267\021\275\254B\253<\301\227\337<\221\032\342\274\t\035\231;1K!\275\006\343a=\025I\247=z\326/\274\267\260\220\274LmL=/\243\210;\277b*\275\356\342<=^\257[\272\230~_\274\026*\244<\002\356\255\272\245(,=S\336\255\273\022\340?\272\013\255\n\275&\016\211\273V\010\262=\226$\253=\235\256\254=\314\305\220<\247\3467=\331\314\213\274\t\037P;fjR\275\261\250\002=\365\226\221\274\326rM\272\255\262\202<\220\2366=T\304\251;\324\241\302\274\341\032u\275\306\222>\275Y\263\333\273[|h<\355\240~=xOQ<\024\n\327=\277a\315;I\017\003\275\353\351\203\275\001\317\005\274\233\313\224\274\304\234\340<[\004J=s\347\317\275\345=]\275a\215&\275\326d\242\273)\313o<\235\236\241\273A\037\306\274\367\357\340\274Dj\220=\264\311\362;\302\316\253;\003\030`<\221\006[=#o\345\275\037\250\201\275Om\n;\033\t2\275\206\253.\275\'2\372<G&\201=\243\333\243<\010~\330<+\232\3409\262\340\004\274\350\323\232\275\274;\322\275\270-W;2\253-\275\01680<\202\277^\275\242\036\205<3\236\021<R\260\017\275;#\303<m\372\205\275\356\026\023\272\377\254:=\"\007\205= \360\010\274k\203\026\275e\232$\274d\253%\275\027\314T<\231\301\323\274x@\'=\310k&=\036Y\257\274\020\300\371;N\207\322;&l\304\273k\343~=\265\367\337<D 7\275\372\032\300<\r\354\320\274\240\312\254<\377\201\310=\000\231\311<\345 (=!\0222\275/\313!\274]v\371<\374&:=\023\273\230\2744\331\201<\304\320\324\273q7`;5\234\257<1\364\310<{`S\274\030\\\332\273\r\235\212<X\311$\274T\005\376<g\252l=7\3510=\264[\'\275\3371\377\274Q\013\000=\377\244e\275\273\001\243=c\311\272<\251\335\242=H\276\262;\214\320\014\275\331[\205<\032d\004=#\024\211<\205A\336=0\305\035=\315\206p\275\000\034\250\275L\231\265<cY\200=P`\003=\316q\312< \221\305<0R%\275\346a%\275\266i\207\275\237\006-\273\360\345\347\274\230$\267=\246\371\265\274\201\346\337\273+uW=\350\232\235<\014F\326<\362\323\370;LJ\236=P\013}=1\006><\021\0136<\365\303$\275\374\021\367\271=\242\346\274\367@%=\263\303\310<\220d\021\275o\300\364\274\364\271\307;\037m\225\275!r\002<\2015\242<\361o\236\275\334X\002=\374[=\275\356\032\212<\230\274.=\354\236.\275\262\246\314\275\322\'\024\274\257\265\205=\363\023\003=\264j%=v\370\211=MO \275\253\220,=\311\177\263\271\337\212\034=\3055\277=~ks=\217\311\361<\014\212`=%\037\274<\270\312\301<\224\214$\273C\277\330\273\311\t\t=\351?\014\275\224\003\005\274\252QS\275?\376\032\274\322\327\256\274\036#\243\274\324\302\267=&\364\037\274\370\252\223\275\232\263T=0\037\332<\033#>9\1771\037<\374\374}<B&\373\275\251\325\001\273\204A\374\274\360\002Z\275]z\347\274_\247q\275W\206*<\037=A=;\001p\275xba\275\216\201\2219\002)\261=F\370\\\274w\303\"=\016\364C<\222$\300<\233\314$<`\030\214\275yO\200\275QK\201\274A1\204=\325\030X\275\013m=\2752\2213\273\372\216\017\275\265E\200<\317\217\301:\206i(;Z\231\216\275\325\\*=\313\250m=\247{#=\200\253\244\274\325\247\221=\000I\251\273[\360+</m`=Ug]\275#\376?\275g\304@\275\336\017*\275\202\323C\274\273 \322\275\204U\214\274\263\"\266=TZ:=\376n8=\274\225\270\273\363w\357<U\n\323;5x\233\274\255\026\317<\212\036\234\275#\225\n=R\347n=\014?\000=\234\336\r\274\361x\351<\203\245!\273\257i\230<Ov\n\274r\3452=\346\373\242;h\345{\275X%n\275\206\345#;!\3354>7\037\014\274\212$\304<n*[<\035\334d<\216\242\311\2740U\265<\310o\237=\264#\246<\215\3303\275x\360\211<\376\025Z;%c\351<U\320$\275\344y\356\274\205\204\023\275\202\311\356\274\322%\361\274p.\246\274LO \275\312\r\200\273P\030\021<\017\225\303:\tI\026=BP\270\274\224}#\275\272\253\323\275\001\246\216<G\000M<\211\014\026<\030b)\274I\016\260\275\363\323\255\274cX\240\274}\216\246\275\305\027\343<\004nZ=\274\357.\275\375\255\'\275\362\\\022=\000\332c\274.[\252=\330\305\314<\201\032\202\274\212\246.\274\345l\271\273F\022\313\274@\371\021\275\231\212a\275UY\025;\223\340@\275-97\275\362\000Q<ey\321\274\316{ \275p\207H\275\202Jc\275\241N\376\274\262\225L<7\200 \273\010\0220;GiZ=\034y%<yl\277;(n\213\273mAK\275\374\247G\275\247\014\266\273K\n\237\275j,\212<\207\353G\274\275\333\177\275\340>\321\274\265\303\246\274t4#=aD3=.O\354\274\010\335\356\273;}\266<\303P\036=\261;B<#\257%\275\r\327\031\275\003Pj=\231V\254\273S\372\004\275P\200F=\206#8\274sAH\273\362\211\035\275\330P\335\274\271\020>=\035Y\360=Bn(<\244\366F\274\367\267\254;\0000\254<r\237=\275\350y\021\2752S\205<\255\373<\273\203\321,<\202\213\340<.\000&\275\224\253\032\275\347\034l\274\372:\257\275\301>R;\276o\013\275J\001\322\274H\034C\275?\344\244<\301\260*\274\347\322\352:\227\027!\275\035GW=;\357O<\330\306\013\275\363\324#99o#;\313\371\273\273$\274i\275M\370\217\275J\245d<\027=v\275\250*\212=\340/\364\274\322E\244<\306\201\235\273\364\312\033\274\346\347|\275\231\222\376\274*M\001\275\300\331\364\274\030\266\034\275W\252\321\274\000\034#=\363\rg<\274\313\322\273\341\003^\275[2g=\017\305\216\2741E\236<\243\273\375<\334\246q;/F\311=\334\020\215\273\324\201]=!\027\t>b\344\253\275\372\350\261<l\344\262<\216\232\231\274\252\267\225\275v\036\036=\354\ng\275\314uw<_\007\255<\322u\327\273\234\031\214\274v\255\234<\351\022\240;uc\306\275\367\022%\275\371$\2468\324F\037=\360\231\332\274A\302\255\275\010\246\300\274\247\221X\274\345\347\352\273\2028\036\275\324\222|\274\377\226\263\275y\212\273\274\320\356\270\2754\330e;\007\002\232\275\200\022\005=\006\276\003\275\274\337\307\273\201\346\206\275\262\265\316\274\360w,\274\364#\201=\003\301\316\274E\331]\274\226\262\216\275X_\230\274a\226\342\274\252\251\220=\0367,\274\254\315Y=\3205\270<\220\316\342<\220\247\306\275u\367\337\273\343\315\220;nk\206\275}\267\206\271\233_\205;\217\'[\275\330\313\356;9l\241<M0\027=x\272\330\274$\320\017\274\2515\327\272)n\312\275a\333#\274\025bP=i\253\201<\353t\365\2748\345\273\275\372\375\322\275Vw\205\274\203\371\310<\266\214\022=\311\017\254\275\374A\237<[\252/\275\251E[\275\253\364!\275T2_\274\276\273\336\273\310\322\033\275\032\005h\2755\016\003\276l<\032=\270\375\203<\244\264\242\275\021;<<\250K\273\274\261\3415=\007\216\200\275d5\226<\270\324\305<\321\224\021;\rd)=\020\001\027\275V\354h\275T9:=1=\243\273\260i\317\274l]}\275\214\242\330<\nW\337=g\004L\274\340(\3379\020\304\001>\t\245\253\275\235\226)\275Q\243\305\274`|c;a;D=\2408M=l\326\235\274\037r\270\274\237-\027\273H\235\257;\035\361\240<K\014\213<\375\2725\274\014\314I\274\236\370\214=\314\027U\275\356P\231\274\367q\310=\252V\"=f\265\325<b<=\273b\001c\275\276\203\376\274@,\r=l#?\275G\364\t=E|\201;4\022\247\274\200[\341\274\245\235\302\275\310\326W\274$\251\206=\230\324\"=\232\360\362\275!\372-\274^\213\024=\202\366\'\275\244\343\306<\346\nV=\026\353G\275\343\340F<\355u\362\273Bd\360<\301\327\200\274?Ho\275\240\r\225\2758t\024=\026\257\374\274\303<\n\275\223\332y<\332C>\275<\022\242=y(\320\273\022\361\265<\255Bs=\220\030\272<\027\020Z=q+\270=zQ\024<\r\240\240=\376\\\377;\355l\356\273x\225\005<\224\373\315;\025g\006\275j\245<\275\2639\224\274_|\231<\177\0244\275\277\240\342\275\274w\206\274\260\377#\275\333\317\245\275\3348\363<R]\237;|\225*\274\377\026\002=\217\264\217<\023x\377;^\232\264\274\275\245\220;+\221\331<\314#0\275\372\337\252=\034\346\241\275d\034:\275\274\226\244=TS\010<\346\263\336<\n\003\327:\344\031\244\274\336ZC= E^\274-\243\376\272\373\251\032\275$~\343<\271\013\202<\201<q\274{l\352\2741GW\274s\301\367\274`\261z=t\022\r\274z\233\365<\324K\234=_H\000<\244\373\241\275D\212\251\274\250\0168\275n\272\217=:\341\315=\273\"\t\275\nE\r=[_\003\273Y}\264\275v\256\026\274\347\200\254\275\026t\255<Rc\036\275Riu\275D\334\203=\347=\312<y\312s<\026\006\320\274Y0T\275\034\321\227<nB\320<\263\314U<8\325\302\274\004.\263<E\274\350\2748|\203=/87\275\204\344!<\360\"\207\274\356\315Q\274\014r\216\275\3568r\274\031\036\327\274;Zu<\013 \200\275\234\202A=vk\350\275\363\334/=\341?\354\275\025\217\256\274\225\177\265<9\276\214\275.\337\315=W\220w<^\303\272\273u\266\'=\177\314N\275PuF\274=G\220<\363p\374<k\243H\275J\001\r\275\343\305(\274[\360\337=\203\242\206\274\206\3703=\271\n\203\273m\262\310\273\233+\231\2745\331\361<o,v9[\333\345\274\027\235\261\275\232g\032\275\034\247^\274<\302q\274\205\211\031\275T\335\003=9TJ<DF\016<\376t\365<3\023B<\033Y\206\275\263:\344<\215\260\003\275\030PR={\206\314<\315\244\323<\236\027\267\271\nu\017\274s\372\223<B\235\026<\376\354\225<\271\306\247\274\372\277<<s\216@\273\272\367O=\315@b\274\356_\307\2746\363b\274\336@\004\273vQ\251\274O\0241<g\231/=\223\0028=\033\035\231\274\344\256\210\275\205ua<\034\263<=h\301\320\272\212o\010\275\341\031#\275T\322\231\274p+\001\276\340\271\006\274\362\230\377<\325\353\005=s\\g\275\nn\276\274\355{\267\275\204\247\\<\225f\322\274`\010\244\274\350\265\225\275\3154m\274\025\r%\274<\337K=\031\374\336=c\001\n\275C\247=<i\340\201<i\020\310<U\260\031=\3427\200=\357k\212\274\304\"=\273A\264\222;EF\201\275W\250\270<\366\312\025\275\"\016\305\275\013\350\232\2743\200\237=\254\244\255\274\304$\201\275%|\223=_L\316<\301\017\305<\243\243\300=\2172\270;\037\325\003=\324is=\356\334\005<{M\321\274\251\002\215;\2611\007=gK \275b\332\3729\225\347\206=\331[\2468\343\307\212\274R\205F=\000\200#\273\307n!\2756z\353<\023\321b<6a\021\275E\253\310\274\335\027&\274a\363\r\274i\310\353\274\024\214\336<9P\236<\3421\017\275\336\373\261=\2731\032\2750\324\377\274\3761\262\274\223i\307\275_\002\000\275}\343\205<\227\303\215\274H\316;\275\363\013\317<`\362Z\273\312\017\317=\344|\244\275\356Y\n=\314d\301<\355\316\227\274\037\312\234\275EZ\t=\232\001V=r\356\021\275\317G^=\031>\344\274\264\366\255;\220\207Q\275Z,`\275\202\356\026\275\334\2334=4]7\274S\'\230<\375\253\006\275\266\270\331:\220\005\026\274f\301\232<{\002\037=\312\350\204\275\316\227O\275F\255\004<-rN\274\te\020=\341\310\253=\322\2066\275.\212\332;\301\266\275<\367\256G<\322P\203\274q=\300\274\3146\006\275\026\212N<\303My\273~E\343<\204\205]=Fcw<A\021\213<[\366\241\274X;\370;\267\233B<\364\273\222\275\363V\026\275;\260 \275XP\25790\354\354\274\205\021\303<\n\266E\274f9k<\223>3\275\016\275\355\275\035\276&\274W\030\230\275qj\365=V\347\365\274\266;\370<\201.\326<\010,\212\274u\271\222\273\347\222\240\275\022o\300\275\242\372\363<\023\201t\274\004S\321<m\022\005<+d\021\275y*\031<\2424w\272\330\367\020=\240@\347<\030I\365<3\2771\275\315\271\227<\206b\260;\311\376\352\273\225\201\333<\300\237f<\305\313(\275\ny\370\274\255\267\001=\300L\333<\224\271\327<\017\303\315\274\377\210&=\261\275\351;\324\375\037<\266q\217<x<e=\264EA=7\364\276<\314\310_\275\200\022k\275\034F4<\333\343\201\275@\224[\274Dw&\275\274\260&\274R\351Y\274\r\r\006=f\020\375\274O\232C\275\351\304U=\025\203\023<\340\211l=.\301\301<\005\307\220\274\211\3022<\223\271\206\275?D^\275=\226\241<\203\222\375<iIQ\275\255@\272\274$xc\2753\275\023<\364J%<\027`\255\273\273<\017\275\247>\213\274\2461_<\263\270z;\020\271\347;\240\010\223;u!\021=\371OR;4\346,<\035\310Z=S[\237\275\0227\352<l\272\203\274\034\373i\275\325/\301==\362\227\271\371\251\260= \241\311\274zZ\314=\372\324{\275uD\352\274\227\265\274\274\351\245x=\346@D\275\362\330\242\274\250\303\207\275\361\374\242=\320#B\275\235.b;\023\3469<\334y\306=n\222?\275u)\037\271\025\335k=\206z\001=\273\rr\275\322\213[<Sn\255\272\255\267I\274\202\274\013\275s\211\336;n\230E\274\361$m<Q\240P=\331\032\276\273\234\263\367<\365_\320\272\004\366\304\275\351\274s\274\253\332\304\275c\035|=\301i\352;.\234\005<\335R\277=B=\253\275\277[\023=9\"\216=\264\317)=\363\247\306\274S\225\024<\254\313\016=\263*5=L0P\275\341\313\034<\250D1=\t\033g<\004\212\246<\316\316*=\230\3704\275\340\307\307\272\307\363\010=l\215\376\274\255l\026<\221\300\177=\025#\266\275\366s\037=\325\234\201=A\275 \274\350\016Z\2756E\036\275>\007\023=\245\006.\275\212$\210\275_\252\251=\250\312%=mV\020\273\250\327G=a\310\362<$^\001\275\201!!\275\221\325#\275\234sA\274\302\277\033\275iz\010=2\367<<\024\315\304;\305<\272\274\014\370O\275\214\206\230\275\376\177^=\251(\211<\217,\363=zb\265\274<\227|\274\3646\006=g\310\320\274h\374\227\274\241\014\024\275C\355\224<\350\203\002:\242P\345\275\037\300\"\275\001\034\365=\0070E\275\036\225o\275\361\311\311\2749P\204=\030Y\221\275\2014G\273\360\236\022=j\305\224;Bs\201\275\037\310\177<\320\346\275<v\277\371;Tie\275\333\354Q\275\204\361 \275\360\027 \275\007\233\271\274\372\t/\274\364r\254\274\374M\327<SM\250<[\210\006\274\227\345!=Y\271\326<\352\374Q\275!,\254=,\277^\275y\035F=is\\=,\367\321\274\3013\031\275@]\350\275\330\177\260\273\345\025\373;\367\034\212\274LC\217<x\320\215=\026{\023;\334/\027\274\210%?\275l\244\276\272\010P\233\275\r\251\r\274.:.=\233\267\000\275\037\256,\275F})\275\006\327\017\274E\3142=\211\260H;%\265\307\273\240\212\'\274Pz\243\275\354\261\312<\306s\014<\004c\306=\312P\306\275\200\220S;w\300\252\274G\261\337\274\317V,\274#\345m=[l\026<1\005\320;G;\275:M\253\022\275\000\342\001>\0135\022<\330\235%=\346\024a\275F,\304\273\265R\331<\212\274\227\274DV\376<\327\362\311\275\364\336e<.\t~=\035m\256<B\322\314<\324\333\260\275,\306\360\274B\\J\275\342\022q=H\316\213\274\323\014F\274\277\032\\=A\372\342\274\315\211T\275\335b(<\"t\214=\261?,<\272|\351<FM&\275\264\330&\274\\\311\036\275G<\365\273w\357\206\275v\027<<L\301\206=\207\364[\274?\235\347\273\201\202)\272\020\353\000\275Hf5=\325\235\225\2755,\205\275\025O9<V\026N\275\321\027\030\274\374\327\263<*D\352;\264\031i=v\267\371<\\%a\275\247o\303\273\361\372\207=/\204Q=\262\225\016=\346\351m\274\025\007/\274v\177`=G\031\226<\004\251\305\274q*S\275t.+\275s@r\274\215\345\335\275\272\341\214\275\037G\344;\352$\302<\300\226\232\273\263\240\325\273(\033Z<%\022\000\275J\214*=\317\t\362\275\274\006\227\275\340\223\245;\265\374\003<\271:\241\273o\217\266\274K\300\225\274\027\013\007\275\340\364\210\275\217\036P\275\016*a\275\302jg\275\235Z6=\354\275\347\274\377\205\252\273\220&\317;\372\225\214\275\247\356\211<H0\340<\263\243\264\274\366\345\257\275?\206\016=\216\356Z\274C n\274\026\234\256<\032q\014=L\342\237<Y\371\222<kz)=\354\232\302<\256\022T;\2724\217\275\206z\353<A\027+\274\373N}=\345TC<\221\216\004\275\212\200\240\274m\354*<\022\371\372\274\342\234\255\273\330\217\246=\301\330?\275\nf\302<\202T\275\275\364\334\253<\017\371\302\274t\306\211\275\236\337\214\273\0362\200\274\345_\n\275\031|\225\273uP\204\275\302\375H\274.h+=Q%\036\274d;\266<ca\217;\226u\366=V\310\206\273(\356\210\275}\363\210=\242<Q\275F;\322\275^p\364\274\247k\263\275p\t\236\275\374\311\007\275P\366\347=\234i\327\274@\330\373\274fi\263<\277\241K\274\032{*\273Olm\274\350\357T=2\ro=\305\256\327<?\001]\275\253=\220<\341W\363\273\247\002V\274\222m\016;\n\240\177<,\006j\2745=\364<\260\253.=Zn\007\274\016\376\r=\366e\226=\330\020\240;\267\366\343\274\326\364\263<?\005:\275\200\307\367\272\337\225n\274\2732\204\275\265\377\005\274?\223\236=\270y\345\275\341\332\243\275:\311\201<\004\271\002\274\335G\032\273Ke\262\274m\371\034\275\274\302\203\274i0\004\275\312\212O=\307\261\262=i\327\271<\255{p=\323\226L=\214#1\274d\205L<\255$\322=4\257,\275\207Z\207\274\214\'\034\274\313\266\371\274\\\305z=[x\n\275\244 \211\274\250C\303\274\245\316\315\275\\?\215\274emP=\014\312l<\213\334\\=\002\203e\274\313\354\312;B\341\361<^\257\357\274s\322-=\231\231\372\274:d\310<\261\360\205\274\334})=\036$\r\275GJ>\274\206\\%\275\245\244Z;\204:\014\275\331{\237=\3634\201\273\003\224.=R\363\345;\243x\320=\014\234:=\002)G\274\253\3338\275>\362f=\231\357\210=\332)\350<b\342V\275\212t\027\275\333\264d\274\354|\225=g-\320<\203\257\275\275\265lk:\315o\263<\327\036\034<\214\377-=\367\333f=\206\350\222\275\273fu\274h\364|<B\322\\=\nqb<\332\367\"\274l\203\010=\021Y\024=%\005\362=\354\274\005\275\372~b<:^\001<\000pW=\226i0\275\324,\200=\010\007~\274\261\227V\275\3440z\273\343&1=\3259\221\275mX\013=\320\367\003=\261\347\237<\216\217A\274\243g\235\275\264\274\020\275\tN\003\274h.\217\275\341\0327<^\347\261\275\331\337P=PS/\271\220\027\370\273H\221V\275\023\2102\275&\327+;\334tR\275\253\353\260=\200\035\032=\270s\216<\233\014\005\275\222=\000\275\235\204\247\274Ga\365\274d\237\301\273elO=fT\314\274\203!\211\275K\273T:\201\201\021<\342!\273<V\206\360<\002\003\022\273\224\262\260\274\344\244/<\017\247\203;\232\212\264\274\375\357\302<\314\305s\275\253\025\327\274\275\013N\275FI$\275q\212\254<\204\004\245<\223\376\\<\337`\005=\013X\020\275u\216\";\312\354w=\202r\221\275\022`#\2758RZ=\245\257%\274\016i|\275\212\320$=_\251{=\302\017M\273\335Q\177<\343\\\301;\234s|\275\023\311\'\275\211\004\342\274\177\366\273\274\213\304L<m\262\220<p\233X\275\027\002\000\275^\224\323\274\000\0047=\341\030\211=~ r\275$\203\205=,\254\013\274\310\3077\273 M\344\273\217\261D=\201\014\204\275~9U\275\32770=\245\231\t\275\377\340\262\274\016\375\224\275\343a\251\275\367\234\252\273\0238$\275\262{1:\2361\007\275\337D\343<IWF=\340im<\314G\235=\357\356\373\274\032\374,=\004\256\267\275c5\233\275\223\203\322\274\234s{\275V\306\276<\226\321\037\275Q\272\023\2743\323\023\275wb\271\275i&\253<\337Z\001=\221\300\255\275\"a\216\275\226|\222<\343\210[<\365\362\275;\307\244\027\274 uP<c\000\221<\3033W\275\3671\326\274d\376R\273\267\370\374<\225\026n<\203*\346\2749\342D<\323\236\253\275h\311\035:\031/Y=\206\236\231=M_\243;5\302\363\273U!\215\274\225\336`=\237\320\031\275\300\336\025=\005\006\374\274\344\004\217\274pzD\275I\004\006<a\326\314=K%d<G\352\007=\364Z.\275x1\037\275ZoA\274\256[\340\274\027\222\315<`\350\017\275}\373\377<\224\203<=Za\'\275sm\023<\260\312F\275n^\017\275\210\352v\275\326H\224\275\214s\252\273\202\325\003=\310\202\010=\324\256\237\274\201B\304\275BzG=\262k:\275WF\233<E\311E\275\037\336*\273\264\277\004<+\323U\274\235}\020\274\237f]\274\272\"p\274\031\260%=k\224\263\273\265\320\334<\2228\224<\303*\025=O\232d\275\216_\020\274\035\202\243\275\204\307\234\274:\330\035\274\006VW\275\322\2634=4w#=}\326\033=\330)U\275\312I\314\273c\260\372\274\252S\350<\003\273\207=\331\273\227\275\010\365#\274h\260\020\275q\326\001\275b\361F=\261?\211\271\330g\325\274\377\036\233\275\313\242S\275\310\370\217=\023\354\221\274\351.\\\275\352\206\013=\317\363\204=\214\224\207\275\312\360S\274n@1\275\020\207`=\306\200\317\274\301%\374\273T/*\274l\306)\275\241\275\206=G\312\032=\024\022\205=.\2364\273\276#|<q\256?=\2306^\274\232\256\036\275\306\034\315\274x\327\302\274N\030\343<\330k\r=\231\022\223\2741o4\2752z\014\275\356@c=\212\252\361\274\033rK=\345\330\270\274\342^\326<\366\030\016\275\260\346E<\254\214`\274\316\034\322\275e\325V:{S\307;h\025\232\274\024R\220\275\345\013\307<{\322\261\273\364\314>\275\304\177\300=\2164\361=\204\2635=f:\034\275\377\257<=\232E\265<n\256\330<\217^\006\275\366\007N=\'\276\206=7\350\235\275*A\216\273b\251\356<k\331\331\274\014\370Y;\232\232\335\273\356\231\177<U6\'=\233\366\333;@C\301\273\033\0306=TX<=\014\210\266<`\233\233\274\016n\027\275[\203-9\371\274\026=\214o\202=l(J=\230\373\247=rA==\370\312\010\275\244\211\302\274\327\031\365\275\207\215\202\275\267\364\304\274\360=M\275\347h8<\240\225\320;mn\007=\362\226\260<B<\334\275\327\210P\275\205\310\267=\300[\233=\364z\271=CH>:7\005x<K\254<\274\337\265\016\275\024\366\230\274\201\007y<\322!\314\273`\222M\275R\3443\275\352\200|<2!b<\316\253Q;\277o\010=\327w\312\274\250q\r\275\326m\001\273^\311\220\274\'F=<\317\024\265;2\314S\274\277\336\261\274l\021\274<l~\304\274\3449\224<\350qT=\365 n;On\311<\232\363\200<\323]\206\275D\374\336\273\017\037\354<\332?\023\275\227\306\364<^\252-=(\312\261<\201\237\201<=\r\315\273\362\023\265=Y*t\274i\243x\275n\242\232\274~\266\026=\265\363\257=\3000?\2736\264A\275\266\315\375;\210\221\365\274\321q\226\275 \013\337;A\320\236\275\206t\210\275}\013\372\274\303k#=\313@{\275`\235\217\274\2448-\275\336\266\341<\335\337Z=\322\253\370<>\324\342<w\260\203<\354\334\230\274+\235\003\274\301h\335<1}m=\260]\372<\361\274\005\275\367V\006\274\255[\332<29\013\274~S\325\274\226\214q\275\027\3277\274\262aP=\203\357G<=\347,\274\311\0223\274\341y\n=\333\317\220\274H\273\201=In\300\275xO5\273\270\225Q\274\301\036\022\273/\365\006\275\030\202\277\275x\022\033\275\200m\215\275\314\034#<\276\304\357\2747\321\033<\t\007\004=\360=\326=q\262b\275\245\271b<A\316k\275\236\274r=P\250\324=\034J\371<\367\345a=\300\270\326=\241\024\273\274\251U\340=\234Tq\275\n\374\000=[\'>=\t\347\265\274}\220\'< {\354<\034\211i=O\225\276\274\252Rk\273\371\216D=\033\023\177=\330\200P\274\350\323\230\275=\t\003=a\232n\275\025O\n\275\364\233\311<\323\332\272<\025w\315<\356\220\003>\241\340\315<x+\231\275\241\276y<%p\235<\340\355\272<\347%\323\275\335\326@\275\007OG\271\316Q\367\274\026\256\364\275W\035\201<s\314\316<\0067\277\274m\016\250=9\257\031<\266\202\037=v\\]<5o+=\022\037\365\271\354<\301\271b\226\016=\\\261\375\274\234\322&=+\014\254;}\377\033\275Q\263P=\274&\333\274\312l\324\275\346\364\346\2726g\267=u}=\274\302&\227\274\251\336\021<D\226J=\251\021\177\272KR\275=\360\205\'<\326$\307<\332\347x\275\367\0161=\001\215\314;\357\323\310;u\257j\275L\327\312;\356/-=\'pc\275Q\322\004\275\226\320/\274\022\205C\274\251\204\3669\017l\334\275\352}\224\275u\217\250\273\314\214?=a\237\256\274q#\213\274\360\377\304\274Q\242X<\246S\306\274\214a\033\275\272\250.\275\002n_\275=\372c=\262\316#=(%m\275\243\316\342<\221\3754<@>\253=\022\314\314\273\251\251?\275\315\004?=\0028\033<+\374$\275I\204\207\275\242\025\027\274\326\230\027=_\354\236<\360\362\273;vA(<\302\234\210<\363P-\275\021W\261<g\257\007=\226\312H\275\221Gw\274^|\353\272\250&><\244\266\032\275kp\000=\024\234@=\307\201\355\274s\210\363;\340\004(\275\333\3772=D8\234;\t5p\273\351\376U<\016\235\370\274\353\300\354\274\003\275\241\274\372\357\300\2758t\347\272\264\361\301<\344\342v\275\207\324W< \270\211;\271\226\243;\2050\233<\010M\220\275\037\021\002\275\313T!=\177\324\030=u\243\205\274\274\266\243\275\036]\230\275a\211\026\2759\242\242\275\250\246v;T\223\271\275\017#\265\275\342\207o=B}\272\275\020\264\375<\320\001\357<\304\244M=\20734<\367\245{=j@x\275\270\362\177=\247<w\275\243\343\200\2731\310f;`u2<\277\352\021<\275\010\214=\2125\311<9b)<d\317\251<r\365\236;N%\\<&\017\265<\025%\217\274B\254\024\275\356\253\255\274\3125[\274\364\312T<_o\361;\200\034\371<\r-\002\275:\344\010=\335A\323<\003/\003<\376\375Y\275R%\362\274\321p\361\274\226A\256\274\267\361\216<\303\334\222\2759\333\207\275u\320T;\346a\206\275V\363X\275\205\022]\275\233ic\275\326\346{\274l\354\335\272\201\241\336\275\036\321\265<\277eM=Lu\207=\357\327\315<\337\277{\274\t*\030\274\212\315w\274\327\335\023\276\\U\236=j\024\335\275\322L\302<\261\022\322<P\311\002\275p\2051\2749\\\343<I\017\332<\366\371\010=\210\316\225<\230\355\303;l\010h<\216\253\025=\351\324\013=\304\343\005\274#\343\277\274\013\007h=\354\022\017\275==E<\222\244\234\274J\037\200\275vT7;\253\020_\274^K\004\275\002\262\001\275\260\0215=\215V\232=z\362\363\273\357\254\323\274\351\321C;}\033\314\275\310\003&=H\260\232=\310b\004\275\255\216\005\275W\264\000\275@\243\212=\206\242\271\273\377\301)=\364\246\303\274\261\370}<\273\324\221\275k\264P=sV\332<\265\251.\275>\205\357<q8J=\350<s:\362~\322;\306J\361<\242_\235\274Ezn=\244\224\322<\272\374\274\274\203N\202\274&Zd<#\310\311;\023\370i\275{\350\351\274\377\352!\274\341\361\230\275\360\213\n\275\360z\203=\306\337z\274\006\303C=,\261\210\275\303s\341\274h+\013\275<_\023=\217\2359\275\267\241T=\037\353\256\275u\321\362\274hi\336\274\275#t=)/$=\364\314.=a\255\270=f2\025\275\266\325\020<\220\217R\275v\301]<\246G\260=&\023Q<e\225\267<\030\276\222;<XL\274\262\273\026;\033.l=I \224\275\206!x\274FP\025\275\236\374\007=:\026:\275{gU\275\003\353\030\275\3513x\275)\237z\275p\320\343\272\021*9=<\344\350\274s\231\016<\354\204\237<\372\306\332<\307\242\371<\270\333\323\274vTV\274\n\363\320\274\3202m\275\035\004\262\273\351l(=v<C<N\301\361\274\252\342\211=t\242[\275\005\305\223<[>\351=\235\351\340\274\2100X\274\370R\271=2\365\340=\326\313\337<\365\346\r;(\322\322\274?\006c\2745\337]<1ms\275/l\"\275E\307\200\275\213\275Z=\214\204\006\2745x\353<$\367\205=0x\241;M~\341\274\272/\t=\357L\240\274/+\221\274\023-D;Zv\340<D\315\236\275n\201\266\275#<Q=\240^x\273\360\2427\275\221\206\001\274]4\231\275\361::;,\306\004<-\203\202=\235}W=<\274\362\274-\263\237;~\026s=\"\343\306; \270<\275\275{\t=\225@\003\275\376\301!=G\007\033=>4\020\272c\276\316<\346{\016\275\215\r\211\275\356%\267\275j\352\321<Yp\300\2753\327o\275:\2064=_uC98\260\337<\036K\'\274\346\t\n\274\366\200\341\274obc=\343\323\025\275\331vZ\275U\363\263\275\310M\236\275N\214\346;\234\337\254\2742\301.\275\016l\2139%\335\312\275%\330{=\371\002\\=\302\375\352=\373\"\037=O\305\344\274\025\021\223<\365qB\275\321\313\313\273\300_\025\274\002\300\373\275\242\212$=|\002\032<\177\254\226\273\0015\213<\227\331\010=\355\262\261;\\\312\264=\270Zb\274e\326B=\t\237\323\273\035\332\\\275\026\005V\274O\305\021\275\212\232\303\274d\322r\274\207\225j;\325Q\'\275\377ER\275\312\337*\275v\242\217;\306\344\253\274uX\231<\214\217\340;;}m=\351\237\034=])\271<6J\317\2751S\"\274\004|\207\274\314U\305<\211=G\275f.\244<0\324%<\250\025?:F\216\236;\'\253\342<;\250]\2754.:\275\317(\204=-\341\'\274\315\251\204\272-\316\350<E\375\203\275T\300o\275d\237\362<\274H\315\274\233w\365\274\031\336\304=i(\200<\000%k=g\315\276<_\272c=\034\202k<\35387=E\364A<\234\036\032=\257B\205=1\351\302=\002{\216\274-\221\266\274O\np\275\265\324\377\274\265\033\025=n2\274\275\210\236`<\2228\276<{\333l\275\212\226J=\305;\307<\002\014\303\274\215\321\242=\201\323Y=\331\354\227\275-\247\002=+.\214<\354?@<\0204\250\273\003-\357<\352n0\275K\342\356<uK\212\275\016\022\025\275\310{\302<\305\323\304\274RM\020;\241\323&=\3458\322;;\013\304\275\355\361&;\217\324\370\273\343\317\016\275\323\373G=\231\244\266\275\241\216s=z\375\213\275\024O\t=\232$\322;\234\\\246\274\000\245\234=\300NJ=\253\306\274<\3773\242<\235-\314\274\200\t\263=$\331\036\275\357\270\022\273N\346\305\272O\002\335<\337.\250\274\023\313\353\274\244\245\001=\026\332\223\274\310\270R<\022\276\241\274K\334\273\274&#\317\273Q[/<\355\240\246\275\241EG\275\224hU\275\316\035u=\031\370@=\265\223@<a\240\267\274#<K\275\003\377\231<f\304\217=\177\256\243<\221\221\370\275\266#W<p\021`=\000\250v\275\235\225\350<\257;\007\275\021n\257\275\211\000\222\275\213\317\355\274M\262I\275\237Sy\274#!\204\275\\\242\261\274\211\3267=1s\243\275YM\336<\000\232\317;t\357h\275\354n\257<! \035\2744\353\036\274M\202\361<\t?\'=\0013\253<\336\244<\274\023\233\3029a\212\001\275<\3523<\373\224\177<\317\346T\275A\201\367;\200=\206= d\307\274+\356\206\275\000-\210\273\261\257\032\274\207N\376\274\377\277\264<\276\237\272\274\250\354>\275\224\307\371=\265\177\n=|\351N\273,~\273\274a\2303=\274\344 =\210A\203\2738\026\230\274A\257\345\274\312t\373\272\210\366c\274\273\272t<\317>l\274Y\365\310\274\020\253~=\334[\017<a>\253\275\231\340\335\274\216\023\262\274\035C\266\275\321\211\035=\211\004\252<\232\036\271\274Tb3=`Q,=\001\344\332<\240\033\374\274\241K\367<z\321\225\2751\361%\275\n\374\004\275:\375\216\275~\036\001= \3232=\032e\202\274\001\370]\275\244\267(=\315\031\363\274\363u\267;s&\340\274\246\004\202=\003>S=x\374\033\275\327s\235<\247\'\342\274Bhn\275<\205W\274\231\271\021\275\222\350\t=%\311\032=\212\032\323\2756X\001=-c\225\2729\312\306;\033=\013=o\271\027=\304\331<=\2039a=\237\232Z=c\373\321\274\250~9\2758!\245=\274\360\247\274H$V\274\227\316\227\274\315\243\256\272\206\353A=\325\273\244\273w\014\235<j\330\002\275C\265i\2758`g\275\371\005\260\274\241\355\377<\221\013V\275\000\0343<\321l\224\273\304\366&\273\247\374\001;\243\304\310<\251\377?<)\027\345\274\261\207b=\224oc\275\204\331$;\205\332\026;g*\205\275\344*F\273qi\273=\023A\027=\010\254\225\274\364\364O=3gf=\335y\346<5\255e=\020\005\314\274K\256\r=\202K\272:\310\371\205=\252\\\242<h.\327<kQg=\251\220E=\035C\r\275\r!\225<\345\202J<\003\266A\274\034\246\320\274\016o\340=J\367&\274Ea\206=~\023\227\2745\257\211=h(\307<\324d\306\274\366\224\245;\341\314(\275\272\236J;\366\'g\274\231\367\206\274\024\266G\274\203\2514=\021\273\326\274\"\235\002>\226\330\273\275\343\232\360\274\n\021C=\335\331\224\275:\272\303;\206\033\024\274\2716F\274\256j\240<\257\357\256\275\221X\001\275\004\370\201\274Tl\267\274\025P\207\274b\235\355<{Q\342=f\344\252=\260\311%\275W%/\275J\200~\275\032\320[\273\364 \220=\261\204\342\274\332HG\275\303S\374\274\247e\214\275>\314\232<\215\375\205\275e\375\313\274r\030\250\275\267J\006=\276\3779=\246\367P\275t\335\351\275\302\315@<\370#\275\274\351=\021<\031\350\367\275w\006\020\275\026\225c=e\356,=8\036F\275!\217\214\273\240\327M\275\340\302\373<N\307\312:\000C\205\274\221\273\013=H/\004>oL\000=zxb\275_\024\270:~w\264\275(\354Y;\031\201\251\275H\364\014\274\032\010\217\275\336\306\264<B_2<\320z\320=)\325\036\275y6B;\000. =\272\252\005\275g\265j<n\t\036=\312\225\221\275\320Y\177=\212.n\274\2029\311=\017\277\032=\035\010\350\2740\342\036=\352\206\030\274\2274\013=\224\250\014\275I\257\235;\225T\"\275\306\264\347\274\345\337\232\274\230H\337\275J\200\334:\032\003\024\273\336\223\255\274\324\354!=\307?q\275\376\227\231<\374\250\221=\3739\261\274\027Sq\273\224$@\2757\263\303<\230\263\212\274~%\205<%\232?\275\217O\333\275\325\271\212\274&\351><]\355E\275\343\360n\275\013\035\335<3Sa\275u*\317\275\323\263_=}\231\023\275\226W\020\273\306\010<\274\377\313\215<\327\211u<\2751M<Z\233o<Ro\344\274<V\333\274\\\2674=\177\'\255=K{o\274\315\364\003\274\321\223\360\274o, \274#\335\370;\306\370\237\275\206\322\314=\0217\233\274\321\277Q<\324A\006;G\212-\275} \363=\215\301\t;[B\245;f[P;U\377\007\274\375\365\200=G\272\230=qp\265\275\253\021\340\275\0369\230\274\206\211\037<\356\351\003\275\021Z\262<\340n.\275\355\316\226=\364B\200\2725\266\t\274\026#c\275\222\256\211=q\362\234<\234\212S=\242\362\034\274\321e\265<\202\023\356\274\317\202X=\024\221\244<\251C\314<\3439\034=\354\276u\274\230\031\360\274\222\343\237=\020\334\002\275\327\021\n<=\213\355\274Gk\r<\254\001\220=\205\313\236<\031\032\033\273\336\347\220\275\202\340M=\020P\014\275r\016\200\274\227R\037=\003dh<XbY\274\037\007\024=\321\350\273\274\364\016\215\275\200\022\335\273\033=\333\2726\325\275<f\337i<|N3=\257\017\253\273q\001@<D\023]\275\030\275\226\274j6\357\274m\235\032=f\303A;\362\320\374\274\245\007\340\274s1\243;M\242\022=\341A\220=V\177\337<\3353P\275l\373\353<\233\322\231=_B =\031\315\273\274\356\272\362<\236\241\36493\337L\275%\244\203\274\031Y\251\274\005mB\275\250<8\275\251\324\344\273\224m\203=M\216M\275aM-\274\211pk<\3243\210\275T\326a=<\316\353\274M.\377\273z\230\310\274\214\033\3735@\310\277;\231y\267\274\217N\352:{\240*\275V\346\036\275C\0069\2756\265\351<h^\212<\255\315\271<\026H\002\275\224f\207;\263\351\007=\261M\354\275\225\035I\275\217\361\014<\326\324\333\274\021\003\300\273\014\312\374;4P\256=Vf\270<J\344\233<,\265\315\274\324\213>\272\354\322\027<\336\242\301\275\n\327\361<)\030!\275\2050\367\274t\021\232<(\0162=\365\202\310\274\006\275\330\273\371`H\2742\030\r\275\267\364<\275}\325\205\275 $\351\274I\034[=\022\354\034=;$.\275MUf=\246\326%\275lo7=,\266\201;\236\251[=\026&\220\275\246%\267\274\304\370\203=\n\342\311\274ZZ`\275\035f\021\275my\237\273\317-(=U\355|\275W\271\324;\035*\003=<\247<=\177\213\036\2757\357g<\236T\024=13E\275\251\234\034\275\365\251\304;5\347\223<\233]M\274p\002\255\274\200\375e<\035\235F=\362\2406;\366lI\275\021\305\330\274\030\331\020=\202\260\351\274\262 \336\275\344\223p\274|\267l=0\246\260\274kn:\274\3458\360<\277\2103\273&\212\021\275\007\266\240\274d\327s\274\007~\010\275$KM=\265\225\215\273V\274Q=\321\200\341\275=(j\274\t\024\270<\246\373\352:NA\205\275/R\021\275\001\206\201\275\211\317\211<Yt\265=9(\212\274\346z\031\275\276\2037\275\273T\032=Kj&=\362\305\232\275\013R\21384\275N=\312w\210\274\307W6=\326;C=\034\301K\275\033\221\223<S,\005=\205\231\353\272Z\343S\275\020\205\"<\\O\211=\264\025\271\273\277\323\212\275`\022@\274C\206\252;\326\217\016\275Y\320\005=\000\330\005<\304P\264<M\254\271\275\210M\216=x7\271=pK\223\2742\267\301\274r\205d\275\322\301\200\275\372\275D\274\337\327\024\275\"\024\262<\351\253\312\274]\207\307=\177{\267;e\252\225=4k\271<\037\001\202\274w\366<\275w\246\376\273\246~\024\274\356\371\034\273\010\006\210=G}]\275$~$=xBA\2758a\257=0\370\t\275P\241\347\275 \006\256\275n\347\355\273\251\002\010\275\177\222\315<V2\256<\003JD\275\327\312\232=H\'U<%#\373<\"|\213\274T\231D\275\022\247\004\273O\323L\273\347\2045<vD6\275a\345\016=\360\236\307=\301\020U\275Y\323\324<\356)\025\275\216\335\005=2\352q\274(j\321=\272]\036\275PT\016=\007O\"=\242\244B\275\003\n\256;\234D\017\275\204?!\274jd\353\274~\342G\274\031\303\326\274\243\004\204\275\276*\023\275\313\017i\275\224f\262\274\226\256C\275\013D*\274\343\300A\275\007\272\033<)\356\201\275\375\327M<\335I|\274\370h\217\275\272D\260\273 \321\026\275\226{k<\033\250==\273]N\275w\013\027\275\374\014&\274\031Y?\275\336\3126<0\236\002\275\275\250C;\3547$\274\340\377\303\271]\331\274<\370\r\006<\344^\216\273\212\017\311;\220d\356\274\022\270K=\223f\006;\257\006\343;\376\375\322<\367\267\261\275\340\340\302\273#\340\257<5\034\367\273\315y`<Z\223\006\275B\265\255:`]]\274T\021\235;G\330\252<\310{~<\212\2255=\264\255-\274\237\356=<\374\305\237\273+\021\236=\220\014\001==\200X<\230\365\204\275\227\366$\275\333\024\233<\345$\031\275\010\336\221<-Dh<\351\345/\274\000AC=\310\351\022=\342\216\2769\034A\255<h\033%;\275G$=\357S\325;\353\344\003<\243R\n\275\177\022\344;Dc\234\275\356\253\003=-k\302\274\002p\313=\372\202\324\273(\303+\275a\375i=\250\340V=\010\305\267<\221\273V<\224\3535\274\203\032.=vN\360\274\370\340\216<\376i\320;\231/\247=|\035#=\306\360\356\274V\230\002\275\034\200\236<\323-\337\275\256\001\243\275n\322X\275\276\001\026\275m\375\217<\253\n\'\275\300\322\242<$\216\023\274\327@\n<\306\324\373<\343\243i\275\273\200\010\275\344\353`<\262\311+\275G\350\247<\211zJ\274W\227\305;\334*\005<\316m\205=\377\241\200\274#k\243;\033fw\275\rs\021\271\220\337O<\016\034\017\275\324d\027\274@%z\274zO&\275\305\261\362\274\363\357~=\307\302\t\275~k#>c;a\273n\244q<-Y,=\364\344\332\275\313\340\351<\007HW<\375\246(\274ij\226<\210\022\r=\246\321\231<\377!d\2742Q\234=\300\"8:\266l\350<\004,\376<jU\256\274\246Z\271\273R\321.=\340\372\257=T\263\260\275]b\004\275\027g&=\334\312><\357\302\322\275\246\005\025\275Qe*\275eb6\275[\367\t=,\355\351\273\215%\237<%\007\374<\010\312\371\273\003\017\217;U\003\250=\375.\315=}\226\355\272\014\223\343;\202\215\307\274\303\004~<\221\314\203=\267,\266<h\327\020<\225\'\327\274\033{\257\275\202\246Y\274\314I\001\275\260\377%\274\213\377q\275\356\351\212\274\302\026\222=L\017=\274L\230\010\275\275\251/\275|\2573:l\374m<\204~\217\274\247G\267\274\330\240X=\\{\346\275\t\316\324=L\3719=\014P`=\354UK\272\323\322\303;\030\027\027<\203\375\331\273\217;k\273e\372\242<B\025e=vS\201=-1\315\274\016\315\362<\347\210\026\2755\356\213=|\363\"\2746\205\313<\343%T\275qH\257=\2151\340<,\303\251:~sW\274\243\224<:\261#T\275\361Q\352<j\224E<\351\320\247=\346\326H\274;2\005\275<\025\016\274\362!\030>4\213\3469u\000\214\274\262\354\212\274~\254\004\275\333\267\023=\246\337.=\235%\002=u\2001\275\354\373Q=\212\270U=\302IS\274a\003\006<\246)\016\272\020\334o=\035$\334<\177o\033=\025u\214\275m.\257\274\270\014-=G\235\035\275[\260T\275\353\220\362\274w\246\254=\331\232\"\275\247\004\000\275 \177\377;t\251\226<\030X\323<\236\361<=:\233\031<\275\314\002=\342\317\222=\371q\037\275\313Z\241\274]&\247\273\t\246\201\275Ye\033=\230\325&<\273\245\331\2722-\300\273\007&\312=\315v\351<\316W\367\275\\\010%=6\367\352\274b0\235\274|\321<\274\276\031y;^\010T<\267\325)\274\322\306\210\274\2631\243\275\252?\213\275\245Wx<\364\251c;\205\305\211\274h\315D\275\263\001\237\274lG\266\274\335\311\033<\334?x\274\220\264K\275\354\014j;U \216\275\351\346L\275\025$\362<\016\261v<&\312&={\315\0059(\326\007\275\212\022d\273\236\032\321\274@\203\213\2754\177\370=\020\356\035\2742Z\224<\366b\026</\020+\274\026\365\261\275\225\232+\275/\207\215<\207Q\204;e8\371\273\367\377\253<=/O\275\331\213\332;.\337J=\234\202\027\275\356\371\006>\177\357\266<\315\242\250\275\3269\367\273\036Mj\275\201\356p\274\263v\204\274\327\267\317\274g\007\245=\027{\360:\205~\r\274\322\240\022=JT`\275\373[\274\274\2304\242\274l{\315<\307iF\275\031\224\202\275\261X\222\275\231\332g<\024 \001\274-1`=A\343\356;\315\322\311\273\260\244\276\273:A\177\274%\320\207<Q\316\246\275*Q\222=9\227\356<\262\234\255<\265j7\274\236\251\007=\200\203\310<\360\031\353\274\206\375:\275\205\221\260<7|K=\232\020\260\274\261\rn\274\023[\231<w\265\005\275HPN\273a,\371<\350\016;=\021\362|<\336\201i=\nro=\201S\350\273\007c\265<(3`\275=4J\275\3212)<\325\336\017=\270LT=\246Y\201=b\000\373\273K;\270\275\223\003F=\001\2574=\371\021\231<U\260\206;\332k\241\275\206\346\362\274\377E\010\275\347[\220\273\305V8=;\327\335<\315\255\003\275\213\260{=\233\350\177=\006\343\200<\322n>\273\330\256\021\2752\374\301\275y\031\247<\244\353\270;b\221\200\275a\257\206<\035\367\024\275\254\263\327=Z\005\227<\'\355\237\275\347\335\016:\225\216\203<5&\264\274\370\332\033\272\314\351]\275\025-\014\275\321\332\365\274k)\207\275\2716\t\275e\203x\273\333t<=\237\366J={\t\263\275\303w\262=\303g\321<G9!=\2470:\275X\260|\2756\177$=\236}\036=\202}\207=_=h=\366\373\343\274Z]\031=L\313\363<\253\314\017=\312\006\343<\366\243A=>9\350\2745\264C\275\302~\365<\373X\225\274\206\t\337<\254\337\311;\222r[=q\241\273;\010Gj\274s\275\356\274s\220\206\273\036r\247\274\355\307\265\275bD\272=\360TU\275\344\tM\274L,t\275\236\236\214=)\274\2029\247\300\345\274\000\3549=TeP\275\017{\314\275\376{\375\274\010\322C\275\3355\253=\005\302\243;\360\234^;\304\014\227<\212\371Y\274\256\337\243\273\256\234\001\275z\006\317\274\260\323\207\274\250P\263\275\322d\035\275\202\340\025\275\237W:\274\017\227\020\275&%w\275v\251\211=\312\273L\275\330\227\306<f\307\374\272\034\256y=\234\036\341\274\000K\004;\207N\361\272\274\200\220=\336\002\023\275\025l(\275\027Ty=\360~\030<T\371\022\274\326\265R=\002\222\341<U\366p\275#\363\243;\257,\230\275\367J\347<\007+\r\274\320\323\370;\345\3403\275s\353M\273\034L\234\275\220\346\037=[E=\274\376\032\013\275\361\227\226;\030A\207=\246\024\313<\254O\022\275\360t\250=<\021\n\275\377\'\t\275\320/\221<\005Z/=\235\302#=\333P\326\274bd\206\275\225e\255\273y$U\273$\032\004\275\373\314\002\273!\346\327<j\254\000\275\204)\200\274;\3006\275\374\366\236\272\371\332[\273\024\370\247\274\200#Q<\324\377\261\275\305\033 \275\337\360\006\274sE\250<\315\224\312<\223X\037\275I{[<\335\326\375\274r\244\274<\001\033\237\2728}\237=\315s\200\275\373\240\317=Z\3157\275\006\027k\275d\330z=X\033\004>xt\223<\377\340\263;V\031\215=$\216\023\275+m(\275A\371\006\275\1777m=\232\300\244<\014\353\206\275\"E\254\274;|\014\275\353\272\364<\303\207_\275OG\310<s\245c\275\255pG\275\231\014\371<=\244H=\0316F\275\r\372*;\360\330\222\275\305/%;8/#=\006;\013\275\334]\272=i=\370<dP\256<i#i\275\200\014\205:W\014\216=\031\t\303<\270\0166\275\t\216$\275o\032R\275\354\254\333;\365\317R=I\\\r\273~\204\002=\2502\325\274-\340\317<\270\177\215\275\306\343\226\274\302\375\335<\220m\203=\321\340\204<\323\267\271;\t\272R<\201\315\306=\234\2501=u#\355<%\343\304\274s\033\030=M\267\230\2753U\353;\352v9\275!7\276<\346\372s=`\001\205=\351]J\273\237\332\r<\352\204g=|\2662<\320w0<t4\225=q\203\233\275\347yw\274\333,\026\275\315\300f\274\255*W<OZ\226;\344\345\214\273H$\222\275\004\2066<F\342Y=p\303!<\223\251\037\274H\376G\275\317 #\2751\034\371<o\311\301\273l\336\301<\006\270\207<\343\354\\\275\323\344<\275\303\325\200=\210F\263=E\377f\275\355u\013=$\235z<\200T\251=\203\026*=\033\335G\275\002\371\373<.\215\036\274\302\243(=?\333\303\273\205\343\236<MJp\275\351h8=\034\001\307=\251v\346\274_\236N=\225\342\304<7\374\320<c\306\222\275\013\023t\275\216\275i\275\241\000\357\274\311\234d\273\022\177?\275\362%\020<g\352S\274\314$,\275\035|\335;\2722\253:n\326N<\247\341\227=q\230\243\274\256M\347\274\361b.=\242\'\246\273~\232\204\275\254\\\265<\202\372\367<&\334\225\273H\230d\275\354\235\273<\243\253K\275\265\275Y=\370\221t=\265\232Q\272\304\323\312\274Z\265\266<7\346\030\275M\313\265\273\335\001\222\274n\361`\274\314\213Y<z\311\275;]z\230\274\331\246\371;2\177\230\275\364u@=\215\262\233<\034O\313<\na\333<8\377c=g\233\307=#\221\035\275\245\367\257=\020\311\023=\035,\240\274\255\351\205\275\325\013\263<\343\334\006\275Nn\004\275\242y\376\273\311B\226=V\224\204\275f\272\206<\201b\320:\376g\240=\366SC<\016{\251<=\215\310<sV%\275\367\262J=\353\302\224<\326\026\253\273\346\\\314\272[\246d\274\254\326B\275t&\003\276\370\241+\275\'n\020=\373\022B;\243\252\236=\340\2738\275\355\314o;\330\306M=\033/\311<\205\"\t=/O\231<\022\202\271<I\'\357<\335\035\247=\353\227-=q\317\245<Xj\301\275)\3762={B\200\274\373_a\275\022\266\316<\001\341\227\275\216 \201=*\035w\273\372\316E\275\335\311!\273`>\316\274\032:\353\274\332\326\337;\n\270\023<\311\364\002\274E\267\022\275\rq\202=\262\364\005\274&&\200=\000A\317\275O\356\257\275\311.\301\274\231.\204<0[B\273q\272\347\275\001\335\013\274\217\270\036\274\344\253\030=\360\355\327\275\227o3=[\025,<<\330\351\274\001\031\263<\030U_=\332\375\217\275[\352o9\204\330\3539\362\227Z\274\034\332\246;v\205N\275\312\306\n=TX\'<\221B\257<\304\177\217\272Uz\213\274J\025\322;1\322g=vc\022<\261_\317=\334\332N\275pZ\254\275\247h\202<\212\327h=\204\324)\2739@\330\274\327V\027\275\220\265\373<\254ql\274%$\036\275o\303\211=\240$\240<^\312\2339e0\t\274\315}$=U\254\325=\344G\244:\253\254\334\274T\"\374\274\207\000\025=\214/\215\275\362\236\003=\343\000[\275i\033\212\275.\370\277<\256/P\275\276\376\217<\346H4\275\025\0323\275\367\036\246\273a\265\340<-k\'=S\317\216\275\331Z\307\273\235\273$=\246\321\"\273\001\351\200\275\032\371#<?\323\313;\3032\003=\340\250\213\274\311\016\027<\335\032\257\275\333\353\250<\232\254\220\2747oU=\333\330\360\2735\225\177<\340\357V=t\277\207\274\0010\315\274\276b\237\274\326&\277:t~\254\273f\236\017\275`0\206<\037\224R\275\2411\223\274K\2077\273\266*\017\275\367\256~\274pH\234\275\243\326>=\250\026Y\274\214\231 \275\021\235\272\275L\307\005\275\244\232\265<m(d=\244H;\2734\364\027<.\352\223<T\3654>\224\331\020\271d\251h<\300z\331=Q\000\276\274g\3506\275y.\213=\332\255}=^\377\233\275\203\265\311\274\013\363\267</\033\211<\227\334\221\275g\325&:\301\201\n=F#\220<\234\037\276\274e\234\000\275\242H\025\275ZM\267=J\306\234=\354\253\r;\310!4<\241\351\020\275?\n\035\274\266\363\250<A\027\311\273\252\241\334;&N\254=\322\220\360\274\277\2761\275\355\274\360;Y\374\006\275\370\366\236\274\267\005\036\275\342z\213\274*\250\200\274\232G\211\275\"\221t\274\271N\252=\274\210\317\274\261\r\210<\260\260\004\275u\023;;El\001\2756z\220\275,u\253\273]\223#=\214\363\016= \027\330\274\014]\022\275\240\244U\275\237C\000=\273\014+=`,\314=\222\216s=\253\305l\275\020\235:\275\344fP\273\223\000#=\020z\005\275My\000\273\312\253\2518VB\235=:f\t\274\277\332\177<\236\357;=F\000\010<\022VN\274.r\372:/\272\016\275s\233\037\275#\311\225\272\342Y\302;P\334s<\362\362W;\337\205i;%\257\337<}GD<\025J\235\275B\026k\275B\'\037\274\244\215>\275\267\257\207=\222\227\241<\227\365\371\2731\307S\275\275N&=\242\275c\2750\275\352\275\343\262&\274\224\213\177=\267h/=\330\212\313\272M\013\254=\023\200\006\274\275\014\000\274q\311\310\274\242\242\222\274lz\351=\317,n\275\343\241\307<(;\202\275\342&\225\274(\035z=V\372\201\274AG\256\274\257I\310<\262\030\014\275\2059:\2750\342\355\274H\204\262={\350\014\275o\236k\275\024\225\221<!\177\312\274xIV=OE\217\274|\0366=\371\270\276\274\336\347\262<\362\210\245\274)X\276==\030\365<\n\023\245=E\312\230\275\253X\230\275+\346\211<\024_%<\022\014\234;\353\275\362;\217j\233\273\200\227\235\275\356\245?\275\372\377\007\275\336\324\324=C\265\207\273\026\266\226=7\364\031=\327\023>=\213\366\327\274\243e\221=Q\305\031<:\335=<Y\272\321\275\235\224\263<W\366\333<\376$&\275Z\250-\275\233\361\240=9\317=<~\353\263\274\272\301U=\371\330\372\274\260\'\202=\315\345 \275??\246=\215p\223<y\226\265=`\276\350\274\033\222+\275\363\261\251\275E\330\307<\305q\340\273\354\235\332\274\236\213\327\274,\035\317;\001b\306\274\200<\351\273\n\322H\274\232\031N\274\240\225\220\274\377\321Q\275Y\231\316\274\332M3\275\337\232\276\2755I]<\300~\234\274O\244\340<\216\301\330\2745\277\200=\311\023\002=\260\023\231;\336@\033;/=,\275y[\221;\023%\017\274\306\271x<\371\325\307\27492\316<\017\353\014=\272\r\332<\240l\216\274\257k2=1M\223\275\304\252Y\274Rj\023<\370r\226<?\375\244=\211[\010\275\020\312&=\361\247G\275\202A\355\274\340b[=\026E\202\275\205\335\010=J\004\323\275\"\206\177\273\330\030%=\215\327\314<(\325\327\274\325Q\037\275\366-\217=\202e\212\274\212z\205\274$\262m;\376W\267;\031\356\023=#v\311<\236Z{\275\311\350x=\022E\200=\215\355\245:\305\323\002=\001\302/;KW\226;?M\360\272\025J \275\r\225\345\274^|\034\275\341\346\216=\261q\276<\0254\225<\031\326J\274X\276y<?h>\273\210\327@\275\r\025\022\274\352\247\321\275\2636\231;\205\371\363<\233\226\217=\234z\202\274\\\313&\2755| =\363~+\275\020\323\311;\301\334l=\006\250\304\274{\n\342\274y\330E\275\366J\203<\231\203\253\272dQ =\325\233\276<;\374\335\2754\360\334<E8\225\275^\223*<\365\320g\274\241@\240<Id\352\273\257\225u=W\236q\274\225p1=\313\372s<_b]=G\344\307\275\327a\202\275;\310\377<\241\022\323<C\025\263<M[\013=\376\256\257=\375\3772<\327\033\222\274$\010-\275\344L\203\274\361+>=\240\326h\274\257j\264=7:\252\274A$\016\274\206I:=\315\331V=fc\2559\357\r\034=\376l(=\207\242v=\205\243\001<\013\264\224<\031aU=\204\277\300=k\3655=\211\030q;\322\363\001=kh\250\275\024^\202\274B@\333:\25536\275:\325\230:m\252\257<\273\207t=\255\251\325\273\363\250\277=\324\210\302<\225\355\265\2733y\361<%[\217<)p\270\274\265\303\017=\027\014\017=+\303\334\274\340\023\203\275(\313\362<\014\r\337\274\037v\000<\231\361t=\322\271\233\275\336R\356<\354Z\216<\346\237\336\274\253:\345\275\230N\271\274\225\032\252\275\002\030\213=\\D(\275\031J\335<\351H\217\273\250\263\'\275\302u\314\273\355\315^\274N!\234\275hv5<\212|\n=\235\271&=`^\251<T\350;\275\004\264\027;%V\367:8\223\035=\341\214\215\275\372\222 =8L\274\275\354c\236\274\267\224\317<\221Y\211\275,\231\271:\023P(=\323\327\210;\367\346\200\275i\255~\275\275r\231=D\'k=0\351\223<\006Ui\274[\372\341\274>\007`=\037\3472\275\253\266\002\274\300(\205=\310\205\235<\026h-<\021\261$<X\241\240;\010\013\351\274\203\244\277\274\204]\206=&Tg\275\355\357\377<\347\020i\275\177\255\321\274\305X\020=\034N\n\275h\204\3419K\266\204=\2050\034\274\032\230$\275V\315\216;\2324&=D\030\261;7:\002=\025\'3<\205\246\303\274f\376\364\272\354\240\374\273\373\374}=F\240P\274\237\314\326\274\343\'\264<`\340\210=\241D\'=\373E\202=\327$\251;\267\210\301;\345m1\275#\270\025<>\231\005=U\235\244\274\247G\273;3\017F\274v\016\217=\364\327\250\275H\371\007\274\016\371\204=@T\211<\253\205#\275\004Y\347\274\342\224\t\274\210\010^=\202\243\220\274+!@=\010>7\275\014\307k=\237\2321\275\321\277\224=\224\271\357<\017\266\324\274\343\2211;x\373/<\274\003\337\273\224#\004\274\327%\274\2727\3414\275h\313\031\275\200\000G=\255\2133\275\345Dt\274w1\334;\253\233\203<\253\3314<\364f\235\275\177\220[\275\302\014y\274U!W=\224\2629=_8[\273\366\266\236=\375\302\261<Lc%\274\003\273\177=\243\222\363<v.h\274\234\320\240\275-\t\210;\0246\'<\244\335\317=d,.=\013\021\237\275x\030F;\253De=\037\023\311\274f\t\301\275\220\331Y=r\240\030<\226\377G\274|\253\354\275z\201\013<\261\260p=e\216\210\274\307\267\224\273R\371\345;\016G\374<\213\232M=q?}\275f\202D;\017\257\322\271\003\206\355\274u\363\213<i\t\023>\r#\326\274P\034\035=*(\316\274\007Ci;!:\203<j\251\216=\377g\244\275\223\245h<-u\206\275MIF=l\327i\274Ax\245<\346\217\203=\366:\241=\311}\335\273\000\343\266\274\244\347\241=o\025y9\312\031\023:m#\024=~\374\302<\2404Q\275\251\375e\275AFd\275\035\177\211\274\313(s;\332\352\305;/\235\316\274\331Y\324=E\341\215\275\266h^;w\202\241=Y\315N=\260\337\033=\\\026\374\273{t\266;k?\010\275\206\306\365<)}\375=\242|A\275\217m\265\275\323\244|<\\\003\271\274\266\266\352\274\302K~\274\206\2729\275\305%X<\205t\013<u\367\250<X\374g\275~9\215<$\023\021=\200\032\353\275m\337\n\275Y\360\253\275\346\001\322\274a@_\273\002\356\302\273\005}\201=\361r\030\274Ad\210\274.c`=ib\270\274;1\200=.\334\252=\030\234d:\352H\215\274\252B\252\275\322(c=7\332\231\274\310 \314<\343\337\360<%\220\211\272\365\305\336<T\031\252\274\323\275\243\275\266\336\223\274\261\017\010\275\177\210\333\275\256\252^\275\212\354\227\274&\337\303\274<7$=\245\005\354\273\340\364\307\274Q\\\034=\010x\361<4\251\267\273\320\335N\274hH\3429\324\346c\274\300\351_\274\324s\014=\240\307t\275\212\034\003=\225T\213\274\364(\257<\277\301\262\273o\337\246</y8=o\263H=N?\365\273\234\333\307\273\177F\017\274\'\035\263\275/WT=\301~w\275\276\276\212=\314<o\275\035\357\245\274\275__=\307Z\340<r\272\002\275\364z\351\271/\235\026\274\017bb\274w\033k<Z[\237\274\202\366\371<\301c.<>\235W=(\246\241=Y\302\202\274\037\226D<\032\302\033=\010\355:\273T\351@\275\376y\372;\036)2\275[\270\342<\022\264\205=\341\225\262<\226\3463\275\253\305r=j\235q=29\330<\200\2529\275\235)\236\274@\313\031;\317n\317\274\263jb<\354\273\033\275hj\'=\370gz\274\235\365\254\274\002\246%=-\032\240\275J\220\240\271\321\260\023\275J.\037\275\010T1=\246\355\233\275\257sO<\322\340\210<\246%r<=!^\275\330\021\004=\211[\003\275\250\242\275<\327-\317<K(\342<EG\346\273RV(\275.e\002\275\304}\300;\205*\217\275\226\224\224\274\372%\205\274\220o\023\275\234\276\000=\324qK\275\017\034[;?\366f=\311j\302=\202T@=\347\204\021\275B\013\216=\306@\231\275\014\232y;\265H\t\275\262O\240=\335\275\234\275h\370\207\274_\006\264\275\331\266o\275\243\256\203\275f\365\020\273v\360\'\275Pi5\273\002\020\304\273g\337\232\275\021\021^\275\355c/\275\255\213\001=\370t\324\274]\251p\275\316\373\215<.\224\302\274/\213*<\0363\302:\231g\270<\022Y\005=k@$=\004jF\275\033\350\010=\360\037\325\2740]\375\274\000\017c\275\007\274\222<jN.\275c6\206;\342\267\024\274m\003\315\273\021=\006\274\206\002\366\274\204\232\242\274\302\021;\274S\365\215<\033ht<\355\203\177\275\340V\003\2753\314\263<\036\270\210\275\236Q\215=i\000h<Q\245D\275\376\343\200\2742S\225=\243_^<\276\311\203\275\2118\016\275<\342^\275\253k\024\275\310\336\007=Lp6<\001\214!=\247\310\010\275\242~\362;\213\220\034=\342n\375\273\243\237\233=b\252\203<\014\016q\275vDi=\226i\247\275\311\276\020\2758C\216\275p\237\313\275\214\005\024845&\275\221\264\221=\206\373\222\274\206\301\353<X\317r=\025\347:;-\375c=\005\367\315\274\354+\315<\227v\331\275@oM=\034\212\032\275U\236\014=.\014\212\274\30561\274\no\301\274\234\215\237\2741\254\213<d\302\307\274\247U\203\274C\013|<.\263k=\246\210I=S\252\000=i\355T\275\327 \005=\304 2\275l6\363=x\225\n\275\316\237\277=wC\026=\250R\303<\263\016\202;@\325\350\274-\303H\275\374\201Z<o\243\375\274J\201\243;\336\246\323<T\330l\275\374\331\371<\230\343\203;\023<\260<\035\360\235=\373\333r;\030\310\006\275\310\373\004\275\"\232\303\273\324\301\310\273\371\261\'=\245G\214<\2110[\275\273\267\025\2757\345~=\237{\363\274J\010(\274v\021\204=\240=\240<\210\177\036\275\246\273\002=\034\324G=s\344\315<\325\256\031=\262\016\235=f\360\337<\014#\324\274\202\323\261<\357\r\200\275\211\013\177<k\372\026\275\300r\006\2741\335\315<\376\002m\27523\323<\247\227M\275\377\346`=\030}\216\274\320|=\275\204!H=\313Z\242\274\347\274\304<)\r\024=+\226V\275\245\320,\275\240Q\232\275\311\325M=\252M\207\274\256\010\220={\221E=\313\325\223=\254Z\216\274#\021\343\275;V\334\272^\027H\275\263)2\275d3.\274+0\362\274\000\035)<t)\027=\007\001\023\274^\010\207\275\313\327\371<\030I\002\274\356t\301\274c\374\3449\327L\323<d\337\216=\225\212>\275\363O\360;K\336\210=J`\271<I\022\r\274Y\335\364\274}\337\025\275P\206?=\206>3=\340rq=\242\006\'\275O-\342=\360\273\002\274}\333\210\275Ra\241\275\021|&\274\217\036K<\270\027\220\2731\t\225=h\2273=\203\"?=\245\363\272\273\324 \210\274\206m\232=\235\2166\274!\300G=\261}s\2751\264X=\317\267\204\275AS\257<\267\236U=\334\311\253\274;\307\212=\263P2<d\347[\275\316\3353\275b\2566\275\377\261\344\2747\226\314\274\234\323\003\274\303\340\260\274@>\304<\2749\237=4\235\260\273\277\340\242<\335H[\275\2341\202<\377\3124=j\235\322\274\255d\240<\010*c\275N/D\275400<\007|\034>\311U\210\275\227r\212<\2031q;R\024\312\274$\247\340;\307i\023=\007\305\207\274b\271Q<\020\221\016=/ ]=)<\371;i\003(\273\352\010\037\273\0172\206\272\250\203>=\234\372*\274,\262j\275g\253]\275)\343\275\274\014\367z;Y\212\023\274\350\344}\275\220\035|=\232DJ=\320\242\024\275\300\217Y;\304\371\"=\323R\272\274\203\035\036=\006q`=e\010\343\275\345j\340\274\342\"r9\243a\272=\305jB\275+!\275<\025*\017\274Q\027\177\275\340\202\216=\0332\201<an\277:.l\257\275\335\361\362\274\250\206\017=\265\356\206<\215\340\r\275\2741\323<D\376\230=o\301\016;\373\001\235<h\372@=\303Q<\275\026\233}\2750\001\200;#\207?\275Pu\203\274i\245\201\274\331\271\300\274R\221\203=\0345W\274\304\231\366\273\222\371\220<\004\207\025\274\031\303\212<\273?\016\275\316\n}\274\363\204s\274\261%\304\274\211\310\026<*@\214<\217\205\261\274\367E\331<X\223A=Z\033\320<\305@\021=\r6\340\275\006\262\260\275&\244\t;8D&\274{\303\230<\242\373\330\273\303\250\254<\323Y\005\275+O\255=\230\356\355\274\272p\n=\276\r\256\275>\340\313<~\001\024\275\313\233\013\272\300\276\325\274\272\213\226<\210\324\344\274\331>\225\272\023\315E\275qdX\275\004\234*=t\327~\275\364\355\245\274lc\021\275Bb\272=\227I$=\2308\003=mg\250\274M\227\267\274\200\207\214=\317\001\306\2744L\007=J+$\275Qm\330\275\n/\001=l\225\n\275S\267\354<c\020\310\274\000N\267=<G\022=y|\221\275#\206\026=\373\335\216\275\004\346\201=\353^\216=^\246\007=V\300$=\005\026\035\275\325\304\355<n\025\374\274\353\004\254\273vW\215<q8\310=&o\037\274I\021\223\274n2\231\275.\030u=\217\315|\275\177\271\335<)\326\241\275\277\334Z\275\375\257\034<\022\376\035\275\0279\026=\345l+=F\363\314=\356\334H\275\254\242N\275>%A\275\255\354\202\275V)b={a\003\274\340\330\221=7\3640=\355\365l\274\331\343@;0\204\210<kAl\275-\035\315\274\021\361\270\275\\\246A=\354\026\303\274\253\343T\273gO\367;&\221\244\274\303\312U<\211\240r\275\211\250 \275r\032\245=YlR\275\376\327\257=\215R\007\275J\270\321\274\2013\207\271`\361\010\275\277\323\260\273\370\270\002=\2161/\272\021\272\234<5\200\211\275l8\235\274b\017\365\274x\260\362<\307\365\026\275\207\013\310<b\210\365\2739_\260\274\232Y\341<\275\027\356\274U1P;|\374\215\275\323\212\221\274\265\302\205\275B\317\236\275`\2530\274R3?\275a\340\220\275n\023e\275n\277\036\274\346z\241\273!\240\377;\331(<\274\032-\321\273\332G\252<\0000\312<\342\333#<\212\010\n=\212\000O\275}\316\335\273Fu\364;9\316\200\274{\027\364\274C\274\316\275|\376\355\274fJo\275o\225\224=\225\222\325\275\322\371\240\275N T=J2\006\275\345\356\260; 0\200=&~\022\274\356\272\207<\177\363E\275\366\236-\275~\225\317\275\326`\360\274{\271\252=9\035\256\275\354\350k\275LVb=i\230\364<T\027\307\275\362\356\"=\032.\002\274\364\013\245\273j\205\223\2743\260\200=\270\357Y\274\212U\216\274\207>~\274\352\t]\275\274\203\333=&x\357;;\266\353\273\277\342\211=3\276\240\274\336]\275\274\000}\007<\023\212\021=\375\016\367<\301h\005\275\004l\213<\034+\031=Ys\334:<\0055\274\2322\345<\326\357\313<\3272%\275\332{\315<\316g\300\273E\371\333\274[\rD\274\300\025\224={\206+\275\020T\376\273W\363V\274\020\371\034\275\273p\354<\033\334,\275\002\003\t\275//\262\274+t\371\272_\304\200\275\032\253\265<e#\037\274\322\225\364\274\351\253<=@(-=#\233\021\275}\217\017;\366\316_\275\262\360\253\273\031\242Y\275\355,)<\320\347\034\274\3508\003\276m(T\274\234Z\024;e\022\003\274\214\n\267\274\000jV\275\202\356\324\274\207\334\000\275\361+\200\275l\224G=J\237R=M\357\372\274l\177\372\274E\320\203\274\377\326<\274\341\311\250\274\365\237\256<\013E\016\275\327\027\307:\r\252,=\206\313Q\275\352wj\273U|\343\274\3353\204\275\3365\351\274\003L1\275\342\023\213;\343\307\214\274,1\310\274;\346\346<\324;\264\275\203\232\345\273\366G\232\275\310@\010\274mz\013\275\261<n:U\030Y=P\345\322=g\034\321\274\375\275\347\275}\r0\275\200\211\274<\022\363\005=\204)\027=?1\301\273\356J\030<\021\216c\273\204\023\277<X\033\336\274*\"\203=}1\371\274[@9=\271\234<\275 \322\345\274\356\3002\275\241=\033\275\247>\020\274\373.\t=\266\323(=Y\016z<1l\355\274P4\367\274\205Y*\274\336\020\000=#\351?\275\324\346K=\217h\206\275IZ\202\275\253\225\035;\340\2472\274\013 \247=bS\227\275\302\232\325\274\350\344\003\275\226 \036\274 \010\307\274g\034Y\275D\314\226;\326\361\325\274\256\037\023=\024\035\013\275\016P[<\246\273!\2754R^\274\220\367\337<\331\324\206=\214Qk=->\316=PT^\275\242\377\224<\262G\221=\214k\013=t\252\260;x\201\034\275\257d\004=x4M=3\225\223;|\\\236<6\214\007\275`.\367\274z\250\270=M\362]<#7Y;ITW\275a\2071\275\203z/\275\373P\260\274b!\333<\255X\255<\221td\275\353\003\223;\203\251g=\023\301\'\274{\374\003<lzO\275\263\033v\275\3677\351<`+\226\275\350\365\235\274\215\350\261=\367\3070=\225\364\323\273\225\303\026=F\321\317<n\366\221\275\340\217G=|\336&\274\246\275\276\275\305LL<6wJ;U\265\376<x\323\003\275\226\025\\\275\036\315Y=h\020\374;\034\013\026\275\326\312\026\275\024\316A\274\177od\275\254l\333<\267\342\261<&\204s\275\322\312\312=\211H\317;\223\026\322\273XY\037\271\037kd=Q\376:=h\250c\275\375\215\265=\24383\273-L\010;\t\306O=\020M\r\275\270\3450\275\343{0<R\276b=\244\226E\274t\037\202=\240\"0=<\022\340\273@\224\036<^\370\246<\212\246\270\272|\337\304\275W\034\210\275b\321;<\026\262\305\272!\207\r\275\342=\206\275\370c8\275\306a\005\275\315\312\275\273\365\263\003\274\224\274\336<\363\273\304<\354\370\007=pWK\274\006\363\";\317\335\236<\321t\274\271K\257\361:\253\365\227\274]\224\263<\023d\214:\337\352\344\274\307\327\034=\275b8<d&,=\224\304#\275\364\240\001\275\344\013\305<\235\010\261;-]S=\376g\\=+i\035=n=\376\273!\253\210\275\357\301\374\2744\266$\275p\322\346\274\2079!\274V\277\363\274\247P\350\274\212\217\221\275\252>\231\275\215\317\342\274\033\201\010=\214#\177\274\367\201c\275A\244\037<`\025K\274\327SQ<\316\323\352;\246E\034<\202\023\021\275\340fN<\364\233\341<\340\317~\275I\247\263\275\366n\337\274w\220\247\274x\263\231=F\355\030\275\356\226\347<\223SB\275\206\217\314\275E]$\2755\254\320\274I\257\177\274|\346\346;\220&x\2753\371\035;\215\234#\275W\244\250\273\364\253\257;\\|\034=\270\245m=\252\356\325\274P\210\237;\350<!<*\033l=l\'\202<d\026\036\274T\237U<=J\236\274L\343Z=\177\025C\275\252\240\203<\266\270\271\274\201\252\376\274\255\371H=\355\225@<U\307\244<\006\030\234\274\270AX;\264\256\3149\004\374/\275\2722\322;\374B<\273o5\233\275\'\031\225\273m\362\272;}\275\210=\362\023\204;P\005X=@\n3=\311\207\014\275\245\306\361<>I\347=\275\205\271<\031\216\206\274\240><<\023|J=c|\247<\350#!\275\335?\026=\255]\264\274\014C2\275\226$\342<yO\222<\244c3=`\361\353<\031T\361\275%\nd=\253\310S<\372\324\306<~\205\213\275\351\177\270=9dJ\275\253\246\215=R\2366\274K\t<\275\223\225\243\274\256\365]\275\264\363\333<\342\366\020\275\275\207\"\275]\305\'\275.\025_\275\\\263\240=\327C\t\275&\304\264\275a\231\206\274\030{7\275\364\035\247=x\3060\275k\306\027=\226@\354=&\2378=r\230\352<1\305\337\274\251\220\236\274\026\373\204:\361q\353<\323*\304<\362I\314\274\352\207E<o\360|\275\3503\'\273\233N\253=\202\346\177\275\266\224\033\275*Ud\2741\237\016=\352\356\362;\"\257\241<\261h\033=_]\'=\305\336\211\274\334\334\227=t;P\275zJ\225\274\373\031U=}G\263<\344\225\261\274]\370\373;\351\246\250\274\320\333\227\273u)\241=\223\301k\274\217\341\270\274\203\007\212=\037\354-=P\207\205=\254\024\200<db\2166#\263/\273\330\361\276<\264jp964\300\275\273\003\247\274u\2030=#7T<(\332\213\274\262\226\367\274\353,\023\275z\024\262<A\223C\275\032\317\017\275\373\222\317\274\222\312\004\275\002\241>\275\355\302\017:\234\313\207\2754O\322<\353>\253\275\265\201K=d[\252\275\211\221a\274])0\275\243\325\313<\253,\006\275\352\346D=}T\006=\336BD=ipx<EB\274\274\253\271\\\274V\005!\275\254\220\252=X\345z\275\220e\031=}\272<\275Z\365\004\275t\021\035;\201.\270\274\333\010\000\274\346\245s\275)\233\247=l\245\363\274;n/\275\314\260*=TU\210\275c\274\227\274a\315\004=}\033\207=\276\347y\275\314\373\025=\273/\233<\245\246\353:\032\370i=x\250\312:\307\225\270\275\235\007\211\275\240\3400\274\333\321\206=\231K\247\275\001y\'\274\217\226O\274\245Ke=\202\320_<\3451\034\275q\203k<\265.[\275Xi\360\273F_\336\274\005-6\274u>)<+\236\247<\034\036]=\347\272\205\273\340_\223\2755\234\273\273%\353\"\2759Z\265\273\375\"e<\270\351\241\275`\267\272\273\257\303\205;C\345\313=#\255\033\275\004\016\226\275\031\221\360<\266\365\256\273\'a\371\2747.\r\2750L7=\200W\263\274\177f\320\275`.\366\274\033S\014\275u;>;u\211\304\274H0\222=\314\\B\275\374D\211\274\211\250\340=\321\035\310\274\205!w\2754\030^=\277{\314\273A\'\024=3?m<gL\016\274\374\264-;s\274\177\275%\014a:6\006\236\274\000\264\031\275\376\326R\2755N\r:\265\300H=r\010=\275\246\336 <\r\271\271;\265>I\271\007\t\223\275EC%\275\333\021\327<)U\274=\003\203X<^\215\341;\334#!<X\005\377<\224\024o=%\300\225<\274\255\231\274T.g<S\237\206<\to\322=9d\255\273\223\013\362<:\225\260<\320.\235\274\202[\260<vt\027\274\3153d\275f\313\223\275\352].=\2163\007<\\\205\336\274\357aA<\206\304\362\274\326\226N=X\217\351;\355\007\347<,\317\330;\014\372*\274b\362\370\274\363\274L<\346\362\003\276\306X1=\240\2773=M~\372\275 /\257<\347g\007\275\272\325\214\275\226y\204=\220-/=\235\275\202\275\367I\"=);\227=\342\371\363\274\301\366W\274\010\223\277\275\031#\201=\305e\035=j\241]<\217\262\001=\2338\024\275\325\"E=\020\207\354<[g+=e\000\r\2750\373\223\274\022\013`\274{\377\227\275=\247<=\217\227e\274\036R\360<\274\270H<J\247\356<\275g\375<\210\215%=\265;\r<s\273(=\020\3067=\370]\317\274\206\236\335\275\372/U<\332\2706\275-\242\036\275r\006\025<X\326\207\271)\233\275\275\2059\222=-9\254\275\355\027\263<\372\357\306<\232Ux<u@\221<\372\205 \275\000q\202\274,8\232\273_y\034=\'\300\236\274a\"`\275\353H\\\275\267H\255<bi\243\273Nd\375;\006+j:\241\345\206\274\265\217D=m~\327\2747\321\226\275\262i\037\275KJ\361\274\2356\224\275\332\312\027=v\233K=#{D=\350\332\337<\2426(=-Ec;\206\252\212<l>\236<\037CQ\275\372\367\304\274\027\030\232\275\262\363\315<\000\336~:\343\207\337;JB\323\275Rn\325\275\333p\207=\216g\026\275\232\205p<x\374\316\274$Em<\211H\366;\0204\244\275\251\375\006\275\223\223$\275n\326\036\274m\244\202=7)\223\275F\254\326\274Z%w;\264r\313\274,\033-=\222+C=\r\232\210\275\224\257{\275\247~\211=ZG2\275\277\347\001\276\237\205C=D\303\014<\017\241\274<\0140L<\034/1\275_~\204\274\274\341\300<\316B\204;\363A\366\275\350\214\'<\315\317\354\274\245V\037=\214\004\233\275\220\031S=\325 X=\024\337\223\275L\366\270=\0256\276<\224\002\316;\245r9=\367\232\231\275\360&\332<\251\246+=\312Y\357\2733\224\230\274`O\037=\233T=\275\335\3164\275\017B/=\323\025d\275\003\321\333<5\022/<\361G\017\2750\023\"=fv\221<\326\304\273\274\025\373\210=P\021 =V-\321<.\265\003<8\007e\275^\002\376<Yf\356;eT~=\367\222);_\275\251\275\357\351\013= \347/=\261\372\251=0\377\020<\207\013\207=\205\304\216=\344;\345\274cTk\273\016I\210\275\225S+\274\ns\277<!a\023\275\t\257\013\275\311\302\361\275\003@s\275g\345\241<#0\231;A\315\272<\007\217\274<\370\306\014\275u&\234\275`w\320;n\307\353=\272\225\021\275\351\333\243\274\265\263\215;=\"m\275\260\305\273=ql\030=3\2135<\221\357\220\275\201%\020\275\351\367\005=\203\201\375\274\224\013\345\274\n\'\245<\211r\225\275\226\267t\274\204\261\001\275\333\322J=\213\316#=D\263\032=\177]\202\2745\245H\274\274\320\241\275W~\366;Q\026B\274h\277\311\274\0020\r=\367X\334<\303*,\275\326\2041\275\236\n\330=7\211\224=\353\351\030<\362k\201=\353$\267<\354\242\007\275\370=\236=\355 i=\3308[:\356\222g\274\324\033\354<\322\311\037\274 ua=\227\251\031\273U\272\021<]\374_<>J\261=)b&=\327\231J=\2505\025\275\002\244\206=\266\350\345\274\263\222d=`;\254\274PP\243\274\314\307~\2757\365\276=\334\227\363=\217\n\025\273\216\320\214\275\"\021\323=\3552l=\"G\254\275\301<\244\274`^+\274s\n\203=\316\343Q\275-[\371\274`?A\274\'\344\013\275\321{\220\274\222\274i=\261\305\252\274s2g<\023\031\253<\341\344C\273A\300\021\275\021\230\351\274O@\244<\210>\245\274E\251O\274\337\304D\275W\241\206<\372\220J\2745\310\231;\244\265_\2752z~<GW\324\274\351tL\275,&\034\2755\302\214<\336\242\367<\354\364\242;\365\345\355<\2008\246=\307h\014=M+^;\251\354\206\274gf\256\274Y\317A\273\027\215O=\216\340T\275\252\357R<\211\177\204<\353\263\326<t\214\267\274\242G\332\275\362\005}:c\330\211=D\030\207\275TCH\275Q\374\204<8 \253=\351 \\<\303\377\323\274t\370\332;\367\243I=\277\231\017=\014\241\215\274\004\251\t\274\342\220\266<?\277r=a\305\217\275\307\260\022\275\347\220\215<\330\354\226\274\376\332\321<\266W\306\274\317\323\302\274\253j\n=\014\206\265\274\030;\232<i\245\t\276\216\006`<\036\204^=\326\223\232<?\3376\275\246}`\275\356\013A\275\013uh=\236k\\=\361\221\257\273\001\260\376\274\320e\237<\r\374\024=\251\357,=\361B\364;X@}=\312\2219\274\020\227\001\275~\277\t\275\000\331\236<\213gU<\316ik\273%\000*=\017\235\234\273\354\307\220\274\221\236O\275\t\370\206\275\n\303\'\275\2308\330\273\005\303\220<\314~\327;c\005\035\275\0307_\275\001TR=\310\212\206\275\206\335\306\274%L\036\274\263|\232=B(\244\275\217j==\214\003F=\312\007\017=\277\266\005\275p\267\212=v\353u\274\357\246\303;P\2031\275\201\005\367<\352&o:U\207\'\275\243\263k<\261r,=\316\3344=/_\017\273\3636\211=\256\003\306;\376\003(<?3J=\277Y\245=vH\237;hi\210\275b!\020;\250\266i<,\337B=%_\2619\231zj=\341\240\256;\303\347\216\275\330\177[=\364\037\272\274+\353\253<e\371\001\275\311*O<Uj\014;\270X\027\274{\227\220\275\214\222\036\275\222Y|\274\356uG=\311\371\224\275\235\374\036=\331\027\004\274\377\037c<z\033\024\275L!\031<!\331J=\"3\026=\206\231\317<h\252\223\274\023F%<\264\001\263\275\206\311\250<\315\026\306\273\325\273\272;d\244\333\274\302H*;\211\003\306=s]4;.\305\233\274\222f\202<\223_\214=\261\215\226<\316\260\221=\356\224\302\274\'4N=\312\345s<-2J\274\212\370\361;\347\371 =\347\267\014\275\334\235\006<\204\273r\2741\020\221=;\007\337;u\276B\275p\232,\272\322\304$=c{#\275\300\317y\275\276\001\007\275+\241k=\363J7\275\357xd\274t\n\230\272\206S\225:\255\370\367<\265\334\332;\353\227\263\275\310\202\253\274\\\371\235<\333jj<\3058,\275\217\247Y<\272B\230\275\031\250\337<7\306\276=\010\215/\274hgI\274\032\010\274\274\234\212d;\323\225\246\274\266N\351\274jd\234<i1\375\273\037\226\352\274\261\207\251=^\267\002=O\000t\273\206*\370=a\005\256<\2442\010\275x\263\261\271\236\030Z\272\265S\240\273B\021\003\275\371X\306;\330\023\263<\253\r\356=v\277:=\025\004\220\275\3638\213\272\306\315\201\275\377QA;\t\017\034\274\240f\002\275U\242\356=\373eE\274\342b\t=\013\270[<J\375\'\275\200$\347\275\356-k=\245\027\031=yT\355;@?Y\274`t\371\273\004\312\201\275\222\305\233<}\375\220\274<\216b\275\306!B\275\346\2765\274\303\215B<uL\363\275N\321_\274\014/\237=Y`\215<\210@\251< \034C=\020;\207<4c8=E\036o=.\016\026=\347C\034\275\3208\213\275\022\230\333=.\302^<\323k\326\275wP\022\275E_\247\275\034\tD\275\333y\022=\033\255\035=\233\0354<\232_\034=\231y%\275\314w\242<\020Dg\274\255\002\232<\225\177\323<\177c\354\275\276\354#\275^\360M=^^\033\275\350\201@<\311\357\227=dIg=Lt\227=\234\223\215\275\377\260\034\273A\241\241<\017V\026\275*Y\227<\344\364\r=\035\377Q=\177\0323\275\023\351\035<r\376s\273x\255\204=\031{D\275\213\240\006\275\265`);\355\030\026\275\357\276\310\274\365?\020=Nl\357\273\343d\333\274@\356q=\026\177\010\274\2146\200=o\216\226=\23782\275\360(\017\275g\233\216;\255\341\006\275vY\016\274wm\035\275\271#H<6\016\234\275\ry\275<<gC\275\000\256\313\2734\310\322<\215\242\006\273$4\037\274\2730\223;\322(\361<\333\305\034\274%\357\314<M\335\215=\256\270P=\234\031\264\275\\Xy<\035\366c<\021\345\223\273s,\305<\2522f=\321\032\251\275#\032\243<5D\325;\366\266\225\274o\"\036=\356\272\313;\234\373G=1\373\n\274\375\250\244=\336\347\266=O\315\214\274\261_\013\274\316\376\335<\221\243\343\273(\367D<\251;\017=\251{]\273(`\321<\211\212\037\273\323\016\304<\211\364O\2750\216\206\275\211IP\275\356\250\376\274r\211\257\274\324\377/\275\240\356A=\027\304Y\275Es\200\273Y\303\313<\303-\213;\264\304\r\275\020\347\351<wK(=\322\2122=I\002v\275\244q<\274x\237\330<\037\212p;\203\232A<\321\354\023\274\240zQ\274XE\t\275\254\0266<\353\350\t\275\263c<=\343e\204<\334\035\006\275f/K=\365\"q\275\301\032!=x\302\003<\363V\201\274\355\262>=\tV\312\2745S\023=\rz\230<jOb=\315\361\261\273\010\t\203=\335v\313\2747o\226\274R\260\017=\371\362-\274E\003\010<\202&i\275h\320\236<\t\273m=3Z\235\273\027\336\226\274\352`)\274\3226\256<\227\316\245:j\260#\275\030*\t=t\277\225<\365D\242\275=\2722<^\177d\273\241u\302<\274\356\260=\322\366\212\274\031\244\201\274Z\240\300<\251/\243<\"\033\350<\270\013\253=E\203M<\203\243B\274\310m|<\206\026(=\010\013>\275`\337\004\274<\220\372;\305\331\271<V\265\354\274\366\350Y=\330d\333<\3622\025=\230\343-=\036\245f\2753\300W=\341\241 \275g\203\354\274\272\317i\275\202\255\273\274\275\244^<\316\r\276<N\265U\275C\033\362=\223\335\330=L\013\300\275\350k\023\273!\276\320\274Z\005\033=\353\320\253\275nu&=\223Cb\275_\205\301=\255\006\220\274\016\220 \273\372\034f\275\236\267\016<\357\247\210\273\357xo\274\373Ys\275\351\325\023=\3363\244\272\252\027\365\273b#3;k\215\302\274\021[\214<\223g\'\274\177\234\273\273\313\271\240\275\002\3459=!\0229\274:\215X;\021\273\245<i$\003=\275\361\206\274\217\323l\274\0371\350\274lyM\275\236\355n\273\314y1=}\336\240=\237\233\340<q\220\262<\335\356W=\375k\200\2757\357B=\010\370^;\3203\260<\200\253_=\233\006\246\275\316\257o\275\n\316\242\273R\216\t\275\303\352\205<\245\303\321<|\324\247=\266OP\274\266\364\347<.G\r\275\245\267;\275\3525k\275\t\023\250\274\036\203\247<\226a\365<b[\000\275#7^\275\031\021K\275\216H\025\275\343L\216<\013Y\304;\253F1\275q\006\220\275\207s\307\2730\265\021\275\316\217\361\274\336\014\232<H\t\200<\352\031T\275\002\312\232\275Q\362O\275\254\270\000\275z\r\\=rd(=\217\330O=g\377\205;\257\3167=\211\274;=\336%\265;H\177n=\360\232\335:d\222\260<\2346\021=\355C\022\2750\213\326\274Q\361\024\275\305n\213=\370\335\332\274\376\3239\274\'\376\323:n\345\225\2751T\343<\274\\\307;\315\204\266\274U\225\276=\275k\254=\356\334j\274t\352\215\275\377\334O=azn\271\216\205\237<\201+\336\274\240\032\341<\004q\204<\275?F=\263\311{\272|\327m\275\247?\214\275\275/X\275\005\222A\275\263&Y\275\005\002\304\274j\2776=b\272\236=\364`\3319\323\345\226\274\211\345.:\331\244\335<2\022\007=P/\335=K\300\205\275\004\000><\227$9\275\366\306r=\316\025\372<\r\303N\274\023\253\263<\t\021\177=g\205 =\321\033r\273s\251\217\274\317\177\215\274_\004\324\274c\334\244\275*\363\362\273J\307\r=\330\201\001\275\264R\026\275\256\036\027=\277\3417=\003h8=\031\277\035\275\336\236\361\273\224\003\021<\250@2=1z\'\2754\373\222<\207\271n\275cnx\274\213\025\257<\225\265\"\274g\035&\274\226\024\240\274?[T=H\333\240;\220\3131<\021\324N=\2541X\274\020?S=\r\000\343\274\306\340\373<\003G\010\274\365!T=\254\323z=A\253\302<8UP\275\305\'\234<\341\301\303\274x\002A<\005\024\244<\002\227_<Z\226\017\275}\365\373\274\266\313N=Z\376%\2754\370\265\273\321K\223=\377\037\320\272?\246\222\274=\351\250\275\r\247\213\275\357\304\201=&\370\251=\307\276\034=LUH<\006\006\020\275\031\000\264=\210\021\236=x\014T\275B\261\027\275,\256\037=\307\363G\275\036\2103\275\356J\037=G\tO\275\206c\023\27643\313<\325\2377\275\025\023-\275_C\330<Rr\"\275J3\t\275\234\375\210=\344,\275<3\021\240<\007\356\255\275\3265#\275\300\306\227\273\226v\367;PvZ<,u\304\273h\366\327<.q1\275\206Y9\273\311\027\207\275\014\272c\274?\241\204=\327\304-<{I/<\350c\207<}j\302<.Z\032=\315\367\210\275\214;E=|o\207=\017]\243\2755\373\372<\000#\343\274\262 |=\323\262\324\275\272p(=\315\376\325\275\365\3028\2734\257\224=\353\370w\2757\t*=H\036\251\274\314\010\216\275\233\265I<R<\276\274\0337\303\273J\267\037\2758\320h\274WeD<?E5<+\"\207\275\007\346\321;Y<\030=\350d\213;\301\001O=4w\260\274\323}\201=+.\206\274-2[\275M\3476=l\225\004=\014\345\367\274u=5=iL\254\274\336\025\227\272:\260Z<\241W\221\275\r\312L\275\024\006|\275X\305\230=\327\017I\274\261\256E\274\203f\203=T\341\202=\371\206\031\275\025\226\036=\372oa\275em\214\275\254\254R;\327\261\203<\267\353F\275!(\003\274\262E\224=\247\372\201\275\0179\003<*!\254\275r\307\355;P\350*\275\0052\235\274\330z\211\275\301C/\275\336\026\211\274\355\340\202=C\333\241=\006\207\221=\277%R\275\304\177\365\274l]&\275\300+\r\274\027\221\214<\262\373A=\231_\211\274v9\330\274\276\300\306\273\231V\376<\337\343};\240\365\327\274\365e\001\273\024\016\022=\032N\033=\274\245F\275w\301\244=/\330\030=\233*\036<\n7 \274d\327\000=:\344N\275\227u+\275Q\267\353<\323\257S;Thu\274L\371\207\274\272E7=\344\223\221<\243\326U\275G\375\002\275\207\303\n=Vx\242=\016\373\004\275=\245\350\273\242\257W\274\363\016\370=\254\247\344\272C!\021=\177\242\027\275La\377\274\227\311\202\275\222\241\003\275F:\211\274\345/\230\275\001\r\037=|\316D=\210\"\217\275\373\2406=P\212\367<N\226\200=K\372\202\275\272\025[\275\014\316i\274\334\213\034=\235\036\027\274\2113\365<p\"\360\275\264\357\332;Z\225\275\275\021\332 \275\374*\370\274\304Z>=\016\302\200\275\232\207,=\t\310\214\275\250\010\023=z@\326\274q\035y\275\016\312\262<\t\"\333\2739\353\210=\031\357-\274\214\312\213\275\343\337L<Sq\360;\013\263\013=\343h\312<\375\'\204\2740\023\004=\21163=\236w%=\365\241M\274b\264\010\275\353\312\020\275->\254\275\316=\023\275t\027\351\274\356B\215\273\343\370\205=\355\261w<\230>q\274\313\215\323<\271;,<9\353\030\275\362\377j\275[_\354\274\\1\220=/\336\223\274~\250\241\275)Z\n=2\350\204=,?\007\275D\276\223\275\347\233q\275\014\334O\275\322\207\303<\346\2473\274\004\033O\275H\332\007\274\266\374\204=\237Cv\275^\320\200<l\336\374\274\215\rl\275\035\235\n\275C\376\036\275W\3418\275`\207\004\275\232OJ=\305T;=;\306\227=\242\000y\275\305d@\275B\341N=0\215R=\302\017\245=\034fG\275\227\215\"\275\037\204\266\274.,\215\275\274\246D\275\240\006\266\274\342\276\376<\253\311k\273\301\376j=\nw\372<{/K\274\305g\231=\2528\250\274\362\207\033\275\263Y\261\274\342\n)\275r\247\017\275T8\210\275\037\263\326\274\215\002\225<\373{\215\275\221&\032=J\t\335\274)x\355;\252\253\321\274\t\255<=/db\275\307\257\010=o\370t;\332\3353\275\327&C<\230\252\241<\345\344Z:\270IH\275\305\'\207=\"\3243\274\3079\301<\354\241s\273xF\206\275p\207\226=M \026<\223\206\340:\370\021\037\275\362%\251\2758=\021<\014\033G=\327\326\374=EM[=a\313\336<\330\260\014=\352\313\334<\367\337X\275:\312\331\274\317s\274<\366l`\274\331$c=\360\312{\275\211\025\\\275\267\257\323<(\354\004\274^\',\275\301\227\245=\226\3072\275\243\033\346\272\201\246E<\374\271\036=#\331y=\260<<=\240\255\350\273G\334\377\274\351\030\221<U,\t\275\356\372\224\274%oZ\275\274a\370\272\335H\314<\003\343r=N\025\260<\342E\307\274\240\273?=\2622\373</)\246\273\334~A\2730\025\014=\023\341\025=\327\255<\275\262^\034=\305`\001\275\260\255\242\274D\245\202=b(i<\262h1=\345\276\211\275\370\022\315<\241=\203\274\264lY<0\314;\274\363N\004\275\351s!\275\343-\214\273\232=\021=yqV\275\347\263\353<\370\371r=we\211\275\264\343\006\275\251P\352<\177\255c\274\n\025\233=\024\263}\275A\255\306\272\204\323\022<NGE=/\356N\275\363\200I=\371\217\320\273 \350J=\031&\001=\265$\"=\310\224V<|~n\275*0\213==\350\317<=\2669=7k\"=\201\027\224=!o3<\242\330\255<\200\301*<T\366M\275GB\206=Pe(\275\357\336p=\2120\316=:Ya\274g(\2779G\027\343<\2061O=\347\023h\274W\225+=~\325\241<\004\207\021\274\327,\002\275N\252\225\2749\315\014=\216\231\366\274\322\212%\275kZc\275\311\236\240\275S\342\242=\210\006\225\275H\332{\274x\357\004\274\355\323\207\274D\275i\274\221*[\275\0225\275\274<\004_\274&)\332<\317&D=\0348H\274\000n\026\275E\312\345<B\325\310\2757\217\027=9_\'\274e\0202\274\331\217\253\2755\022d\275\245g7=\252P\213<\016\220\301<n\210\357\273If\217=\244v%;\261\332%=]\326\374<\310f*=\367\244\237<\345\227q\273\233\266\304<\201\003t\274\365\315\252=\220\214\005\275c\205\201<\327]9=\177t\240=\000\260\016\273(\363\241<C\310 =BJ\271<l*\037\275\215\335E<6\276\037\275\025\315\203\275\366\301R=\217\254\242\274\337i\302\273\260\272\003\273\265\204\220\274\333\332\263\2744\307\026\274Z\023l<\210\340B=\025y\347<\316\3453\274\334\307N\2753,\303=\205\254\213=\tq1;\312/f\274~\320\213\2754\243\206\274\005\360\236=\033w\204\275KM\r\275\365\346T<\235\321\203=\351l\221=\230[\270\274LF\354<g(\260<\\\016\354<\003\210\242\275t\331\321<\023F\332<\037\372&\275\347\316\233\274\342\035\204=O\032\370<\2317h\275tL%<J8\002\274n\327\265;S65\274\317\350\000=w\324\271<8\3728=\306\276\212:\001{r=\322\232#\275C\346\\\275\212\026]=>\346\007:?\267\003\274\214T%<\\L\336\275\267C\001\275\326\0063\275\000\343~\275\026\202 =\006\233\202\275Npk\274n\227i\275\026cy\275\3612\223<E\006\207\275k\037\211<\375\240<\275$,\230\275\274\371$=\035\025\221\274\205\032\270\274\307\363^=\030\203\300\274k\212z\274\326\212\262\274AhB\275O\326?\274\340\334\375\2740]\340\275 g7\274\323\205\361=\2726U<N\013\320\275\2530\344;\030\256\240\275Q)\202\274\0335\010\275\354\372\211\273\364c\201=\000\213\201<\274\337.=\023\323}\274\203\035\241</&\000\275\344\361\201\275a\251v< \000\004\275T\337w\275\302\307\235\275\241\301\310\271\216\354\362;\221=\005=w\0318=\335u\027\274\321\324\360<\253\334\032\274\331\331\016\275\375\002\t=v\266m<.\304\302\274Q\340\351<\223\374\311\275\327\2607<\t\232\2249\250\232\316;\376q8;\206\'l=\001P\330\274\230\252Z\275\031\014\362<$\177_<\256\023@\273\021&s\275-\023C\275\004.\343<\271&<\275N\220\261<:\265\233\273\2379\203=\353S\261;\253\000K=\375t\222=H.X\274\024\267\243<J4\220\274&\371\316\275\277\251\363<\233@\302;f\233\021\275\342\306\235=\032?\316\274\266,<9\244\271\306<j\205-\274\032\300\036\275L\232m;\205\313\037<\037\314\236\274\231M\304\273\252\371)\275\320V<\275\261t\252<\364\365\313\275n\370W=\nfR\275\236\303K\275\265Z\262<<\332^=\220\320\263\275.\333M\274{\352\252\274\316\355O\274\301\275B:K\0317=\312\247\033=\201\236\332\274\345\221N\275\314\370\316\274w\216\233\275c\275\226\275W>(\275\014u9\275\314D\004\275\245\251\366:g\240\322\2754j\233\275i\023\250\275\330\013p\275\200\nM=H\245\243;D\317\202\275\360\367\021;\367\374\224<a\341\215\274\0342\375\275\237\215n\274\262\224S;\333Z\204\274\001\315\'\275qq\204<!\333\313\274t\307\235\273s\347.\2759\032\215;\377\3705=n\014\014=\364\255\217\2757\337d\275\274\0227:r\243\236\275\'\267G\274^\201t\275l\374\235<\307ex\273\202N\010<\036\r\230\272+G\265=\311\272\016\275\337\304m<\341\325\206\275\240\266\022\274\213\305\265<\273\234*\275$\211V\275@\303\227\275\304&\r\274\322\260\335\274HW\220=\204,~\274\205\350\257<~\361\025=\275:\223\275\nr\267<\253\342\375<(\002\314\275~\360\001\273\372\313_;\216:\221=\271+\254\274\246p\333\275\366\365\214=\332\014\235\273\004\351!=\231\254 =\244;#\274]\245`=\357\352\244\275\266\352_=\255\010\021<\t\010\372<\263(\375<\021\301\325\272\202\036\271\274\365\321Z=\331\264B=|^\007\275\270\240e\274\014\347X=^A!\275\310\014\243\274\331\373\273\275\033\244\243<\323,c=\006\024\201\275<]y=\303\032F=\204\t\210<\302Sq\274X\365\362\274\306\350\001=\231^\217\275iQ\264=\263\253\251\274x\371\264<68\245\273*G8\273X\250\342\274\225\252x\274\260\021:\275\350\233\257<\303\021\200=\327\020\226=\020A|<\316\237\005<#?\347<\354\230\226\274\363\360:<K\037\311\274\374\010\306\274p\022n<\250\226Q=g\314\240\2748\312\t<np\237=|\200\341\274E^\252\274\025\375\276;t\322%\274m\354\327\274\222\325\260;\275B\203=u\310A:;\254\346\273\322\034\225<\271a\267;\375\366\366\273\023\366\215=\220l\363\275f\355\355=l\305G\275\\@\255<\r\201\331=\230\000\020=\305m\312;\245\001\234<\260\377)=\227\353\365\274z`\254<\306t\027\275c}\262<\260G\304;\203\0042<j\313\033\275`\200\340<;3\223\275@:\367\274q\240\374\274\201\016g=\203\004\223=\271\037F\272\325\361\271<\315&\233=}\356|\275_\007\017;\265\037\240\275\307\242\032=\024\344\344\274\354IK\274\027\266{\275\312E~=K\3109\275\027\036f\275^\003\361<\036c\367\274\037\007\340;e\034L=+3g\274\216A]\275w\373P=\013\347.\275B\300\002=\272ac=O\177\016;\177M#\275\354M-\274/\341\244:\345g\324\275n}~\275\327\367D=(\004H<E\375\320<c\260%\274\204\312\004=\016\014\356\2746`\243\275\365\253V<\264\241c\275\227\351R\275=\312\256=\357I\034\275$\031Y\275/n\225=\\u\222\275\224@\246\274\255r\262=yP\226<\2212\267=\"B,\275Q\305&\275K3\324=\236\3343< \026\224<\031\365\247<\365\221\276;\370\313\014=\303\371\273\275\373\344\006<\317\t\243\273\"X[<\216=\013=\t\250:=\317\304\311:\006=\337;6T8\275\335\225#\272\022p\251\274]\215 =z\356\225\273\r\031\277\273\365\301C=D\225\333<\206\315}\274\230\340\352<\027\340T\275\002\006\211=a\004\204\2747\370\277\273\t\030\032=\367X\353\274\210\r\215=p\214\245<D\223\037\274\373(\032=\307\321\317\274Y\250\241\273\246Q\033=\271\020\000=\214q+\275\263\345&=\203?\201\274\232X\317=\330\003\340\274\207*7=\261n\253;\327o`<\354\005\304=VI\357\274\005\026\177=q\336\245;e\217@\274\017\331\022=#9\237\275v\323$\273\317\030\010=i|\217\275g\001\320<.\327!\274\250\'\031=\375\306\245<j\270==[\207\2329\241`\003\275G\224D=\361?\252\275V\216-\273\210o\341\271N\007a\273\264\305\013<\'M8\274\236\004\200\275\273R\010=9\253\315:\302\211*=\035\304K\275\256%\237\275M\313\267\274#\354x<!\n\315<\345sB\275LS\035\2754\230\330\274.W?<\t]\210\274F\235\306\274\316\311E=\026\325\340\272o^><\306\321\322\275\314 \'=\212)9<\036\261\215\274S\030^<\236\251a\273\375.H\275\221\231k\275\023\262n\275\304\201\027\274\000$u\275ov\252=\201\217m=#\331\223\275L\330\323\274\367\341\241\2747\345L=G\243\027<\2558J\275\233\237h<\375i\014=\037\355a\274\211\316\027\274\320\373\013\274\265\206\276<\221\225:\275`\017&\275pz\017=\020:]<\r\244\327\274\316\177\355\272.\205\006=\227\207\225\273G,\250<b\376\267\275\344\343o\275iyf=\230\017\242\275\362\330\262\275\035\373*<\335/\005\274\354B\333\274\370nW\275--\201\275\345\314[<\341\257M\275^\226c\274\346\236\010\275\234\265\002\274\325\024\\<\277g\251\275Wga< qa\275\256\261/\275\005\007\373<v\n$\275\254\331\374=r\314\026=\322\342*=\335\322V=9\235\310<T\n\225\275\257rr\273\305\203\357\273\016\324\252\275\340>\334<~\2078;\240a\247<\202{D\275\211|0=\202\324\234\275\340\215w=\252V\206\275=\312\370\273\355\026:;\007p\021\275\210c\007\275|\306\270<\213\017\271=\250\333\255\274!Q\207\274l? =\245\333\212;(\337\342\273A\324\322\275:\262{\275ax\204=\211@q=\315\"\332\274{\242\020\275\224\004\337\274\233\301\366\274d+\023\275p\336\251\274x\301\003\275\334\3564=\026\303\223\274/\330\276<\207\343\266:T\225\332\274\3408\200=\371\3466\275\370\352f\275%Y%\275\026\013\021\275\313\305\244</\206\344<\352r\367<\035)\230\273)\to\274\255A\331\273M\242\313<\22443=\022\352\230\274Y\000\261\274\256\374B<\023\261\345=\361E\323<\007\202G=\003|c\275.\001\241\272\245\345\266<\312\r\254\275\354\036\177<\371\0313\275\014\206\210<_|:\275\256mX\274\346\241\353\2734-\241;BdR=\'\310\025=t\300,=\355\237\345\274\334\021u=4\372\311<\\\023\230=uXe<\373\215\261\273\343\256\355\273\246\035\237= \031\356<W\305\022\275\330\262x;bv|\275\262T\016=b\210\361\274\267\006\240\274\253\345\010\275\030\264\"\275\201\021p<\306;)<\356[\270\275!\343\352\273\373\002\210<\235b\"=\240#\357\274\314\324\002\275\212\337u\274\252\356T<\246ts=\006\010\\\2750\3739<\344\035\262\274o\361M\274g\323n;,lC\274]\257\302\275\355\021\023:rH\374<\230Lb=\001t\315<\362g\234=B\256\254\274\212Ao\274\231\020h\274\362\2455=4\352\271=\343p\006\275\\\266}=\240\321\255<\323\024,\275\364wY<y~c\275/}\353:\272\"=\275J1\242\275\325S\320<A=r=H\344\263\275\213(/=\270E\013\275aK\030\275\245\017\336\275\334\350H=\352\342\030<\313\t\005=\'\363.<}\034\002<\221\363\005=\217\270\337<4\356\220=\304S\203\275y\212`=y1\260<_\317s\274\223\310\223=-\303\224\275\364\242R\275\237\340\302\275\323\025\241\275\201!\031;J\255\274\275\2739\226=\026F(<I\032\314<8b\002\276\013\004\315\273_\r|<%6\022\2756\364\261\275\236\324D=\354@\326< 7z;P\217\256\275\035\000\264;2\315\242\274\331X\256;\302v\211<\317\265\213=rM\206\275\222:5=\\\254y=x\302\326<\316\207\204<\307I\302<\236\254L<\233\0208\274\\\024\244\275_\036\313\274\3545\234=\n\313\311\274\320\014\256<qat=\326Z5=\375\334\034\275l\364\317\2747\006\202\275\200[&<o\211Z=r\226$\274]\205A\275\022N\233;l\373\227\275|=\004\275|\301V=\262\020[=3\260_=3L\226\2751_6<\3158\324\274\247\177\203\273\234\376Y\274LB\326<t\360V<\213\020\006=\237\274 =\310\343q\274\n\333\230\274F\364r\275\017\244-=\227\204\210\275Xsm=\331pH\274\260Xf=P\244?=9s\343<\354z\231\275\302V\376<\242\354Y\274\020\243\037=\3722~<\222\002\252\273\207\371\233<\322\274\326=\226\020\217<-@^\275\027\244\365\273\262O\202\275\020\376H\275\271B\212\2743\332\202<\006V\232<\214?\004=\311.\031\275\252~\326\274\211,\230<hl.\274\310C8\274\273\334h=\343v\017\275\247=,<\006\366\n\275\327\213\245\275\351}\031\274\361E7<\343\202\002=hi\246\2747\212\021=\314\002\026\275\211%v\275*\220\235<tRd=\356\033\213<`\337\220=\177\0371\275[\327\316<\267\222:=\036H\177\274=\"\033\275~k5\274\365\220\005\275\037\236\002\2741\267a<%\302{<O<`<=\334\273<\014\211\021\274\026H\254\274\266]-=W,\323\274\002\026\014=\364T\276\275\262\306\225\2746\036\344\273\272\243\203\275=\270\270\274?%\323:\271\362m=\246K\326\274Nn\261\273\247\262\213=\370\365\362\274\245\233i=\300hZ<-\340\353\275\366\260\n\275x]L=\325O\001\274>\271\307=c\264\027=\240\r\213=\024\030B=\022\213\3159\3548\003\275;>\234\275\\g\352<\365\361\272\274L`g\274^rW;\305\016\237<{IZ\273\3153\n=\206PY\273!\r\216<\222@P=\334\235\352\275d\260\214\275\254\000\242;/O#;\242S\007=\\\376\013\274\307z\177<\245\206\030=~7-<\314\014b=\330\305\037=x\373<<\360)=:\340J\276<O[\214=\3522\257;\303m\362;\320\363n\275kY\213<()\251\274\263\245\222<\212C\022\274\r\"\200<\341u\350;\003M\010=\273\361q\274\260\036d<2-\347\273\223\225Q=iz<\275\252\017\204\274r\031\311<\377\307\342\275\226\316K=U\210G\275\315\255\023=\037\234\223\275\325\274\340\274\0039#=\262&o=\375fe=\204\222\265\274\036\362\317\274\2255e<\360~\201\274\244\025\027\275Yg}\275\177\0342=0U\t=6\203\330\273\213\317\356<F\305\203=\001n\345\273\006\251\266<\370\007c\2739\227\010\274;#\370<P\007\254\273\036\225\241\275\351\221%\275Q\336e\275=\222\217\2755-\204\273\341\270\206=\005\266@\271m\231\310\273\267E\030<\002\014[\275\224\305\300<>\261\240\275\361.\n=\271\312M<\217\337v\274J^\"<\236\r\362<\014Z\325\273\240\203\323\273\263=\224\274\234kS<\257.:\274\200p\272\273\"\237?<\243\335\245\275\331\330\030=\321\027\351\275&\314\202\275\313\312\314<BO\354\274\232\232K\275-\226\324<-\355V=\264\242.=K\301\212\274\250\355\013=e\322\276;x\024T;bN\212</\225[<ckV\275\252e\267<\266\023H\275\323\327\235\274\355\200c=\265\326\264;V)\241\2746l\313<=s\242\275\340Z>;&\000\301<r2r\275\342\017\'=h\371<\273\374\244\226\275A\364:\275\252n#\275x\342\253\274\022\371\336\274T_\312=h\275\303=\2448\262<\326\361L\275\205r\351\274\"\262\325<*\031w<\351E\236\273\374-\013=\3564;=ct\260<r\376\024=ni\355<h)\306\274e\366M\275\351\356\361\274@\336\340\273\327\210\233\274\001\032\314=a\316\375\274^\343\354\274\257+>:\225\'2\275\3478G<\267H\367:1/\010>\375\032\345\274C\037P=\236\377\327=\037~\256=W/J\274t\237J=\377<\201:\010\261\300\274(d6\275\316O\356;\216\247\217\275q`\321=\222L}\275\"\376\270\273I\375\223:\3540\373<s$N\275I\217]\275\r\034L\275\245#R\274\251\306q\273\347\363\272<\257\242\374<G&L=\306I\275<\236\250\010=\240\006\324\275\331:\212<\2410\253\274\372G\n>\241\373\033\275\373\253\237\274u\273\021=\364\304O\274\272\216M=\363\273\030\275t\306\210<~\340\326\274\234m\261<\240H\235=\317#\373\274 3\225<=t\221=\260.\321=p\325\231<\210\301\246\275\240\341\336\274\221\336\215=\306\340\300<]t\022\275\030\267*;d\327\025\275s\026\256\275p]\224\274WN~\275\274\225w\275\317\'\030\275`m\277;}#L<\312\332\251\274R\306\025=\305\334D<\320O\225\274\252F[=c\216\201=v1\232<\346\001Q=.\"\360\274\352\020$=\260\370r<\262<\313= \363\266=s\202\205\275\000\312\314\271Y[\315\273\2234\027\273\323H\237<\346\311\247\274\350\375w\275\224\335\003=\317x\223\274g\020C=\253\261\252<2&\337\274\321$\212\274\2154!\274\216\002/\274\n\234`=\240\276/;\035\353\346\275\327a\351<;\276\n<\024o\227;Y\232D\275j\251\334\274\023\337\225<\350$\372\273\360y\007=\024\004\006\271\210\246\025\275U\006\251\275\237\277-\274_*\240\275\320*\210\275f\250\235<\242\002[\275)\316\256=\370k\222<A\305\261;N\247\345\274\265b\236\275\242A\020<\223@\347<\265\000\233\275\204zs<\257p\023;\365\r\036=`@\020=x\005v=\247\355\\\275X\023\320<\222\305 =\363b\277\274P\207.;\346\234\321<s\010P\274\310h\327\274\032P(=\354\3254\275.\262F\275\316g\324;\203\270\301<\324\267\273\274\200\220\"=}\031i;\237{\207=z\017\337<bO\005<^\2771=\016\360\367\273\330\335\243;\363\370n\274\317\335@;41\204=\030\373z\273\251\363\n\275v`\323\274\266bi<@/V=\036\2032\274\013\031\346\274\240\236H\275\213h\236<\245\242Q\273\202\035\304<\005\237\245=\244 \001<\035\322\020\274u\360\003\275\300\200\227\273\335k>=\177\256\006\275\005w\001\275\217\006\030<n\205\010\275\223O\337\274\207\233T\275\364\016\335<}1W\274\014\204\360\275\227\322\242;\004\312b<\356\355\003\274\345\253r<\0219\331=\305\260\254<\232\211\226==+\016\275\005\242l\275Z\240\205\274:\321\236<^\263\220=\274\013\213\275\232\205\002\2751\027\306\274\037\345\352\274\2645\263=G,e\273\350\306\255\274\215\220<<a\370M\274\025\211\220\274\032\274\216\274YLc\274\036\325\363<\205\347\344=\231\304\303=\243\026c=O\237\026<{\322\343<\261a\212<\344\372-=\224\305\213=\037\2209=\3249n\274Y\242\200\275\365\321\237\275\017\023p\275v\003E=$??\275\277\201\226=\0066p<*\203?\275\\g\210\274\354]f\274\232\327\310<\364\371\226<\027xf<\366f\357\274j\005v;Gr\366\274*\013\333<\037\242\024<B\371\265\273\273\311\021\274Q\321\237\274\026c\252<5\363\t\275*|\336\274\223+ <\006\207\'\275\331b\251=MJ\217=\213\203\214\275r\3646<lq\246<\021\260\307\274\363\030(\275\274\336\300\273\007k\244;\251\227\243=\007;\027\275\202\256\274\2746\022\031\275\036\323\004=?R\217\275\304U\374\273\222\317\n=\217u\r\274\255\236\361\274\253+\013\275~L\037\275\365\255k;\255\244\016=\246o\205=\201\357\031<Gd\274\274\333T$\275\366U\177<d\3451=\201\333o\275\005O\252\275\364\341r<\330\\\234<\2115\177=\355\244\000=\264\336Y\274\002\267_=\216)\374\273Npf=^\377\260\273 :\300=<H\025\2756\'\006=\355\366v\275\362\013\026<XoF<B\025\025=9\274\017\275@\341/\275VL!=\301m:<\305\201$\272\214c\231=0\"x=\240\003\023<\325\241\372\273\002\2767=\024\342:\275:\355\222=\253\345\245\274\276f\347\274\3515\r<\200\2172\275\3401\377\274t\350\232=\225\242%=&\352C\275\251\327\336<r\264\203=\271\321M\274\003\215\334\275\253\220\267=\224\177*=\177\231\026=@\226\216=\375i\242<\312\355\243\2736\334\\<s\240\261<\316-\201=\235\362t\275A\227\320<\333(\322;6\371\310<\241\301=\275\037\221\251<\3760\231\274n\333\020=\"\030\357\275\323}\376:\275\200A=\305\032\274<4d@\274\00794=\332\351$\273Bp)\275\352P\211=)\357\331<\034\002\344<\356V\201\275r:\322\273\274`\315\274*\207\202\275M\"*\274K\033e\274\357m\237\275\262J\222\272\264+/\275\315uI=\374\"\324\273\031\031G=c]\002\274\234\014\247<\273\270\265<R\325\374<B\370\327<Suu\2729\016$\274\177\311)=:\360C\275j1C<j\n\301<@\247`=\235\236|=\026\347\233\274\263O\'\275h\246\313\274{\247\242\275\371\351\202\275k\204\004=\315\275w\274\323vi\275\300+ \275\002\230\036\275\t\351\016=\235\007\'\274\364\020\353<\271\005\235<\026\355C=\261\026%\274\240\241\366<\337m\026=/\335\365\273\216A\313;\225\005\214\275\377\241\032=\211\221\026\276@]l\274\225\330<<\353\0000\275\362\204\265\274\027s\037=\244\356]\275\316Xm\275\377_\002=?\331\236=\375\021E\274nE\203\275g\315\224<\000\336_\275\0161\000\274Y\214\277<0\340\245\275x\274\324\275\365\t\237\275\321]L=25S;\374\3135=^\221%\275\t9A\274\253|\274\274\310T\336\273\001\211=\275v\255g\275\265ds\275\225\246\005\274\316w\311\274\333\342\222<\370\236(\272\004\310\032\274\334\242\362<k\307\252=\364P\335;]\327\367<\177W\t\275\270\026\035=@\024d=\317\360(=\244\356\220=R\000)<\256W\375\274(-f\275<\017\362<\367\367N\275M\364\246=Rg=\275\272\3411\275rG\214<\377\323\315=Aa9<k\037\300\274\005}\017=DjP=\310?\023\275\301\315\036\275\031\004o\274I\324\231\273LDb\275\241p]=\241c\017\275C\332\325\274%\260\023\272\033\024\010\274\357\262\017>\327\340\013\275U\212t=s\344v;=\342V=\365\351\212\274\346\335\"=\231J\212\274(\3715=FZ6\275l C<\026-\377;Kl\010=q\246\230\274\362\273\273\274W<\267\274\226\354\224<\242pO\274\352\022\207\275v\270\313;\353\234<=\215!5;\362#\360\273\217t(\274\333\026\227\275@=1<\374\273\034\275j\351\240\275\357}*\273\312\256\327\274\352\311\026\275\"T2\275w\245\352;A\351v<9\305\000<\010]\232=\021\265\262\275ZZw=wJW\274&\240W\275O\0006\275?\260~\275Y11\275[i\034\275\315\230!=zT\204<\351{@\275\260oB\274S\220\200\273d\030\362;\365\353p\275\"\321\205=\366kG=\302\273y=]d\030\275\235pK\275%\311T<\025&\320<\226#}\274\027\304Q<5\030w9\017\024\365<\r\346$;%\337\212:\004\267&=\351\202\307=7\331\002>\240\t\336\273aE&\275\261\373A\275\240f%\275\221a\030<\177F\035\275\213\263\377<\373\033@;\302\022\211\274i\275#\2749%h=ax\010=\007\n\214\274es\210=UG\250<\324Q\027\275\344C\n=\341\005w<\347\372_\275f\006\023\274a)\006=\343>\024\275\223\205\340<\347z\023=\250\323\244=\216\024B\275\312C\031=U\206R\274\375\342\332:q\301\177\275e\234\232;\332\267==k\025\024\274m\033[\275\"1\372;L\372\274\274\r0\205<\330IE\274\202\257\206\274\335\322L\275\025\031C\273^\345\031\274\227s\376<\370\3773<q\266\037;\033\266\341<\214?\355=\355}2\274Em\222=Izh=\000K\215<\204[\211\275A\214\356=b\347\330\273H\351\337;\360~0\275\237\275\312\275\322P\013\275\370\212\256=,\270\376;K\375E9-\340\004<^M#\275\237\326\\=\0020|<\357ig<\371Z\332\274>\217\232<\255\235\215=\026\320q<2\002m<\301\220\204=\0304L\275\252\337\025=d\266\025\2742\246H\273\234\204b<\030[\213<\314\323\276\274\034y\371<\365\346\223\275in2\275C\005\232\275 H\305;B\251X\275,\262\020\274N\373\227\275\313\240\007=\240Y/\275\324,79\350\267\260=C\373\002\274\260>\n==\326\301\275\013\232\213<T8\332\274\017\365\210=$\311%\274\274\333\271\273\364u^\275\274\314\001\275\333\242q=\233c,\273e\227\252\2741\316\315\274\301fr\274?\352\212\272\023\306>\275k\213N=h8h\274m\374;=b\255\363\273D\232,\274N\272j=\347\321o\275\255\263\361\274\330c\330\273b\212\371:\322Dy\274\306\356\225<r@*=,E\370\274%\341n\275\371\034\222=S\257\023\274\274M\277=\336\022\303\2748<_<\306{\002\2753\333\374\273\335\2278=\267c\313;\177}==\034\014G=\270\013\364;\370\331\022\275\243o\215<\334\220\007\275\272\251E\275\217k\327\2757|v= B\227<)m\360<\311\014\343\274\034\016\366=\3203(;\030\322R\275E\214\301\273Mf\217=\252\335\234;\2326\201\274\3222\243=\301.\004\274\004\r[<k\262\243\274q\373M\275\242L,<\365C\024<\0042\311\274\010\202\374\275!\204\227\274Jh\273\274\375\251p=\325$\325=\212x\255\274k(%=q\351\357\274\353\304\027\275\261\364R<|\233H\275 KV=w\232\026\275^\2534\274\3309\246=F\256\317\275%\306J<@\177\225=/\305-=_\231:\275\365\032\254<\267\321\267\274\341\323\222;\303\304\216=[\250\305\274\204\322}\274\260\344|<\002:7=\205\013\325<\372E\327<o\377)=\375\203z\274\305\206\260=\241\303N=\033>\311\274\364y;<\256\304\313\274\002\277v\272V?K=\247: =\275\026\034=\344\017]\275\316\302\320<\364m\376<]\336\026=\\b\255=\213\3074\275\3426J=\212>\206=\361O\232<E\224\261<B\342\r\274t\255\331;%\360$<\010\266\313\274\221\351\233\275\336\374T\273\1776\026=]J!\274\212\230\214<\363\330\355<\325\034\356<\367\345\226=89\226\274\254\006R\275c}O\275\221\243\213\273\231\200\226\273\365!\231<\354\200\237\271\223\325\357\274R\344L\275\343g(;4MR< \255^<]\206\316<\034\327\321=\276zA\274\240\0309=\025\271\346\274\2426\212<\224\003\271;\243\316n\275\346\000\306\275\320\233(=\022\302 =\006\034\324\274JC\255\273H->\275\256\302\372<\235\025p=B\325w=\037\320\n\275\3124\004=\327\317*<\304V\251<\331P\245\274\251x\342=\364{\244\274\304\223\271<\016\226\360\274\261:E=\262\034A=:\240]<\313\n\217\272\221\323\374\274\243\004@=\022\301J<\300n0=\2510\305\273\214Z\033\275\022p\323<\325\323i=\376\3236\273\357\261\364;\373\026A=\310dK=u\320p9\001\n2=D\177Q<\304\221\006=\277K\353\273\316,\347<\317\342\315\274\330\203e=mj\242\275\245\217\033\2752\301\334=\203\007\303\272\254j!=\031^\337<\250\246\020=\004\021\267=&\324_=\356\024/\274\367\360F\275\342I\t\273o\rj=\314\362B;D\273\026\273\177\332\317<Y\365n=\255C`<\235$J\272!\360 =\335\327\204\274\231\010x\275\304\\\004\275e/\210\275\2774v=\013\025f=\002\240\375<\362\254_\274\036E(=\246sb\275\311S\370\274\361\\\037\275h\253\034\275\230R\245\275\010\202\332\275n\267X<z\373\000\274[\r\207\273\230\304\217\2744h\354\273\351\336\244\275\014\351y\273\340\307s\274\275\351\017\274r\223\345\2743\304\316=\342B\326<\310\366d\274\247\2364\274\000\262\227=\032k\305=\3736`<w\332\206=C\254a=\037\315\377<\r*D<Z0\004\275\335\227\215=\010\301H<\267^p=\221\203m\275\301U3=\037\234\337<\372\t\337\273\036=\233\275\243\234m=\3172z\275\267y1\275\213a\352\274\213S\256=\253(\341;\300\330_=DE\002\275;2\214=\025\341)=~\213\356<rU\030=k\235\025\275\345\010\332\27333\364<\013E\035\274v\270\270\274\215\t\221\275\200\021#=\255l\206;[5\317<_3\244\275\035\204;=2b(=\223)\014<\367\344\200\275\013\331\004\274\303\330\025\275\351\330S=\347\251\017:\367\004\327\274\210\203{=q(\266\274Ls\204<_\375\275;\362\344l\275v\237e<;\366A\274\352\327\302<\253\216\200=\362X\336\274i4\341\275\344\021\":\t\r0\275>\371/;Z\2646\275\302y\235\275\207\300,=\324\010\027=\314k\244=zt\242\273io-\275\356\014g<\200\203\225\274:\003\n=l}\225=I\264\246<\224\216\360\274ow\204=\013\r\372<\201]r<\313\000\232\274\306\373\004\273\3275X;\256T\344\274\336A1<u\355F\275\321\372\226\275\340\261\341\274\263\035u\273\313\300\300=\360>\260<\375b\356:\306\220\277\275~\377\210\274\277\n\251\274\006\3420=0aG\273\036\315\234\275\004\251\231\274q|.=f\241j\275z\346\235\275\326\274\330\273\265#\255:\353\255\276<\205B\276<\325\'C<\375\265\237=Km_\275\314O\322\274\366\"\027\276\376zt;`m0\272\256k\250\274e\334\327=}\230\375<\316fp=\316\340\304\274\002\272;\275\001\310\220\275)S\262\274\256u\220<\241s\020=W6\305\275\260%\213\275\222\310\264<Q\025\315\274\323\243\227<\252\033\002\274\231*d<\335\3073\275\357\303 = \032\247=\367\'\260\274\000j\370<\346,\224\275\336D\034\275\274\2608=\206\311\235\274\320\032\261=6\317=<\342\"j<\215\372+=y\327\323<\341\005\"\275\tq\243=M$\231;I2a=$o\001=\216:\317;\323_\252=\334\177!=\327\233[\274\260D\307=\026Id;\315\346Z=Ky\201\273ws\351=\304\252\036=\367\375\365<\322@\233;%\354\367<M@O\275\305\236\360<\227\\\021\275KtL\274\374a*=\270n\332\274V\3629<\241\207\244\274F%\224\274\027\315\203\275\3129m\275\256;z=\260\021\021=\316\354\245<\2568\373<\253\353%=\010\341\202\275 \3468\270k.\356\275\235h\342\274-\261!<*\001e\275\0044\252=5\227@\2757gB=\225\022==\200)(\275\351\235\205\275P\352\323<\273\207$\275\301\350\363\274x\323\r=>\024r\275(5\365\274Q\000f=X\342\262<\356\265X\274\362\333\274\274\224@\334\273G\255S\274\266\272\352<\201\003\211\275\3609\260\273J\215\205\274\037O\036<\025$\314\274\251\372\201\274\007\342\\\275g\217>\275=6\240=A\250,\275f\344N\275i\271G=\2523\325<\207?\323=\271@N\275B$\033=\\\220\362\272\341\374\031\274\247D\327\273\365Lg\275\214\225\366\2740\246\317;\226\240\013<\204\026\204\275v8\030=\363kU\275\000\"\251:\301\277-=I\317\212=\263d\207=\263\313\205=?\274\022=\367\230\242<U\254\241\273\245\263(\2753\255M\274\370\344\230\275\001(#=\340\372b\275\035Y\376\274\332\377\335<&\225R\274\237\037\334:\243x\000=\032-\021<I\253j=\220\210\271=UE\240\274\315\230\313\274\310C\021;\033\276\332\274\254\264s\274/z\301\275\177\321{;!\007\364\275d,\035\275\363\n\263\273\377\372\246\273\033\236\024=\351\007e\275\322\246\225\275F\322\355\274\350\307\266\275\224\362\003\275r\333d=\212#\010=\0212\364;\212\207,<\250\360\223=\304P_=T*y\275(k\252\274\272!\212\275\261\257\001=:p\001<z\341\320<\371\t\027\275tqq=\262i9=\221\010,=\010WQ\275qE\025\275\206\207L=\247X\347<\2530\214<\273\214\007\275\032Q\177\272c\311\277\274uC<\2750\247\276\274\232w:\275\222\360\216=\013\222\024\275\330\256\334<\306\250\327;\240\261.\275\270\001\321\274hE6<\205\275\277\274A\355k<\236\246\316\275\037\006_\275}\375C\273y\240\r>\331p\262\274\003\210\322;\203\225(\275\313x\210;\325`\001\274h\263\001\276%/\231=\2218\335;\353)\264\274\t\211\335<\251\315\241=\256\3146\274|-y=\234\303\247=\r\344\"<0:u\274\324\237\271<\0254Z=\264d\\\275c\371|=\320\0355\274\224\252\025<\265\\\242\274\325\207\t\274C\327\033\275Xfz\275\366\035\271\275F\257-\275\332sF<h\345\214\274|\033T:\355\316q\275\315|\004\272_\250\203<l2\363;\"7^\2746\255/=\226\365(=\203\210\177=.Tv<\353\217\320;\277\300Z\274+\365\010=\0029\304\273\2765\201\275s\345\357<\320\220w<f\363\"=\244eF\275o\316h\275\220\370E\275\321\345\263<\t\003%\275ir\351\274\254\234=\275SP\201<b((=\306\'\335\274\271\377/=\036\302\274<&\022\t=IO\244<I_|=\350\3003\275\275 \010\275\371\021\212\274\342]\t<B\310\034\2753\021I<\375%\265\274\204\223\242;\000l[\275\267\310\330<X\327H\275\245T\212\2752\313\207\275\322\377\036=\036r;=\r5m=v\304F\275j<\035<\006\364\214\274\264\257\233\272\347\330\217\273H\365\032\275`a\242<o\177\t\274|\306\230<>\244\350<\242\214u\274\224\347\263\275\246q{=wY\001=\236\234Z\275P\211\216<\377^\340\273\324\353\240\275\346\ra\275\376\331\032\275\251\307\031\274\217\236j\275Kd\305;\256\231\361<\001\364\243\275\210\'~\274\347T\230\274\206\303\264\274\002\213A\274v9j=\004\217\203\274\235\346.=pM\263<\007\256(=\312/\255\2738O\306\271\2564 =v\330\336\274\020r\033\274\363\272\237\274\200F5\273T\244\223;3\343g\274\342hE\275\\\346\260\2743\277\224<\216\265\331\274w\231>\275\036\\\243<R\316\214<\201\2229=\332&\227\275|\275\010\275\360\002.\275\343\246\306<\233sL<D\303\224\275g\311&<\217\263\210=\331\245\263<-\245\365<\275j\364<=m\354:\215\200\006\275\317f\246<\002\306\325;6\370a=\217A\265\273o\373\354\274\016\033\232<\332\"\225\274/\355\023\275(\260@\275\356\346)\275y\242\206=\262\301Z\274\2141%=\225\265\377;\037\200\355:\275\037\243=\336\217%\274\235\\0=\017\256\241<\267\216B=\225\361\237\273\347\030\034=q\320\234<{\364\320\274\323f\201\274\356\014\013=g\r\n<D\232\211<W\234<<\234\317\332\275u\374E=\202\370\017<\333\300\002=\313\357\007<|\035\205<^j.<\224Y\217\274\344\031\335=\265}m\275?(\021\274V\027\010\274\256bg=\222\306>=q\303l\275C\344\221=rJ\035\274\314\267i=\223T\025\275\2371);\'\201\200\275\323\367x\275\r\326J\275\330T\324<C\271\204=\221\024x=<\213X<\314h\000=\232F\323\274\321\335\t<\200\276\220\274\301\354\203\275R\330\004=F|\305\275\210\3467=\033\343\230\274\250\345\277\274\310\244-\273\342\021\014\275\2235\337\274\312o\257<\307\030a=\245\337\223\275\374\226\262<r\317W\275\355\t\002\274\362\016\240=\333!\2619\242\212\362<\217\375==\026Y\236\2723\2377=\311s,=\r.\372\272\311\371Y=\341\007\214;\224y\226=\340\374\033<2\3764=\177\331\337<m\311\201\274_\"\024\275\022\307\377<\271\317?\274\033\320g\275{\260\014\274>i&\274.\2251<H\246\365:9\343\205=\223N\220\275\251(\223=\361\353\205\272:\305!\275n\235\035=\362\201]\275*@\274\274\340\332\207<b\371\033\275\207\025\200\274)Z\'\275\366\276\303;\036\321s\275\026\231f\275\366\3615\274\367\305I\275fW\337\275\321\227\210:\003n\035=\341\320;\275\334:p\275\320K&\274\205\0048<0\305\362\274\243t0=\024\025\342;\306~\266=P\221\214\274\364\n^\275\314$ =\256\255\004>\303\3504<\314/\026=_\361\344\274\263\016W\275\344J\322\274\232\016.\274<\201\207=\003\315\240\273\325\275\010\275=\307\212=\r\275\254=\031q\277\274Om\023\275_\257p\274~\251g=P\347\276<\031\230\262<\014\266\237\274\201\366\022>/\256\246<\203\222\312\274\311\226\035<\035\366\003\2756\214v\274o#\'\275\311\323\005=\260\r\342\272\306\337\202<\303\014\213\274\002\0258\2752\245\264\274\241\033\303\274\005\231\017\275\221\274T=Q\355\276\274\377\356w\274\026\036C<\362\003m\273a\216\t\275\260\243\024\275va\301<\215\370\030\274Y\240V\275\211\005>\274d1-=\277\325\236:\3038\010=\177@w<\302Q\202:\357\000\226==\001F<e\'\013=\340\202\221\275\257.\020:\275\236\364<}\024\257<0\343\201\275\200\347\323\273%\324\375\271\037Q\205<\277\031\251\274.(\022=6\331\215<_\021\262\2749\2169\275]\375\237\275x\007\214\275L\356\226\273\"P\217\273G0>\2759\357\332\274\350\245x<k\322\217<}\332\007\275z\000\325<%3\027\275PW\225\275\217\275o<\210\265\262\275R_N=\261\363R=\t\022\220=h\256\224=\026\245\243\2743.|<G_\254\274\230\'&=\036\r\"=5cM=~\206O<\020\2624=\rB+\274]Ln\274H\236\302\274\343\375\321\274a\255\t=},\304\274Jx\252<q\347\361\274\332\265k=`)\311\274\000|G\275\035\034C=v\231\242=\374M\035\275\353U\311=\334\326H=\2241 <\323^\212:\027\352l\275\370J>\275\366\323P<;;@<\275 \271<j[(=@\340\353<:\267\236\274f\357\363<\335\205\247\274f\210\232<{\314\021\275\347\221\252\274\374I\215<\247\211_=\n\t\221;\371\243\004=\206g{\275\204Wv<\n\013\035\2735\235E<oP\242<\277\002\366\274\245\225\250=\305\274;\273b\3121<<o\r\275jq\217<\242\361\306<\000\r(=\367\210\010\275\377\363\354\275\005\320\032\275\256Y\200=\2762n\275t\357\304\273e\353\376\274\210\202\036\275h\234\222\275q$\032<G&\034;bO\324;r\036 =\247\243\261\274\004\003\356<\220\304)=Q}\260\273\301&\002=\r\035\264\275\356\037\025\275\013\240\354<\340\231\017\273\241\226\217=\243c\262\274\005\367\231\275\242U\263<P\355\360<\375\373\235<\\\252\236\275\2006g\2747\322\253=\256\322\276=f\000z\274\341S\351<\303\r\332\2733x\020=\327\314d=\204\0343=W\3531:\r(\340<-\234\227\274C\271\317=\347FJ\275~\243I\2749a\266\275\277\032\273<@u\264<\317\371\331\273\0254\030\275:\265j\275\272T\030\274\0247\253\274\025@!\275\177\017\246\274\371\245\203<\305;\035\275\332\322P\275\242\370\204\275\304+{=\337O\366<^\306 \275\255\322==V~\233\274\227\345\002=I\221\312\275Lq\007\274\365\362\261;\003\226\002\275S6\331\274%\325\354\275\325\000\242<\313^v\275\205d \275\'X\274\275\027F\210=\252{\305\273\370I@\274\314\032E<\302\343%<\031)\237\274!\021\327\274\302\365\230=\304GW\275m\324\370\274|\276\212<T-\345=\024\217\261<\363\377+\274\255\307\226=\027\021\035\275w\353x=\031}\023=F\222\273<\244\354\315<H\353B\274(\356c;X\373\220\274\352dQ:\025\350C=~\000\240\275)\202\235=!6\367<g\013.\275ED\215=\3778y\275\177n\266\273\277\273\365\274\342\305\005=`\306\225<\237(,\274}\211\375<II\222<\247me\2751\237\002\274\302\231\234\275A\303\202\274\306\010M\275\225\233\266\274]\267\354\2746v\032=\354\225\032\273\322\312T\273\027\307C=k\357(;x[\304\274\204\247\241\273\353\033\223\2744\246\203\275\205s3\275f\223\204\275\010\022\010\275\201j\224<2\355\271=o\311\264\275\010\375\221<\357\246[=-8\n=Vt\203\275\366\306\362\275Z\324\002\275\340\274i\274\036\335\207\274\272\347\322<\326D\305<\310\030\027\275\254\353\322\273W\312\213\274( \332\275b$\210=[H\225=\022\026\033\274\022\251-=+\306\224\274d\205\234\273a\310v;\274Sb<\210T6=\026\320>\275\236\023\315\275\275\360l\274\323\366\177\274\237m{\275\366s\203<4\361\225\274@s\'\274<\033r=\210\247(=\026`\245<\227\251\231<!M\230\274\'I\016\274\255\320n\271\340\365T<\326%5=r\023\331<W!\212\274\003\016\177;\365V_\275\360\005\213;u\236\246\2748\344\021=\332\301l\274\200S\217<\255^0=1\260\022\276\264l!<\277\231=\275\301\216)<\356\tD=\215@\004=i?\303\274\325\377Z;\357\272\003\275\324.;=\236>\317;(\235\013<\021\216E\275slS=\206K8\275\266\304\006;\267\t9<I\341\302< \340Q=R\247D\275lZH<\310\253\212\275w\023\262<\216\212w=\233\020$=Z9\003\274\240\r\271=.J\330\275\320\226\235\275\0063\255<\356n\001\275\260\227\025<{`\320<\277\331r\274`lN=\013\300p\273\032k$\274{\357\264\275\276\366O\275\230\205%<\334\260\226\275\254\245\257\273|\2565<\212\277\255\274\025++;\031\266\351\274+\267\241=r\336n\275\232\202\330<]=\303=?L\250\275e\264c\275^<\360<\024\237\237<\231a\375=@^\227\274]\350E=\302vh\275_\356\224\274\t\257S<\262\231\362\2740\334\243\275\242\213 ;\342\366\203\275\266\303\233=\272\374\201<\232\207F\275 \2526\275YUd\273j\352\273<\224D\226\275\345_\254\274\331\234\245<\020\244\006=\272+\t=\024\371\312\275\026\211\314=\211\307{\273\016\001\202\274!\354\235<\217\016\001=&X\206\275\215Mi\275\365l@=\023\255\257;\317gA\274\376`\027\275,\265==\257I,<\002\302\034<\267\243\375<\022\361\331\273\374\3674\274EZ}\275\342m\202\275\253\304\247\275\236p\321<W\346\306<V\377\302<Cu\003\275J\347\002<%C\027\275\374\035\274:q\255b\275Qz\037=,\247\211=\356f\206=b\241\026=\322WW\275\0215\316\274\342g,\275J\266\024\275\014\036\223<\324B*\275K\205\300\274\325\362J\275\322\027V<\322R\r9\032\330\237\274\332\316\226\272\351\365J=\257\266\002=\350\'\'=\364\366Q\275\021\353\036=\374\3777\273M\352U<x\223\026\275\302*\203\275r8\220<\311[\237=X\205\375\272\277z}=FW\321\274\010\260I\275\373P\\<\r\231\207\274{\234\266\275\257WA\275\275\375\002=\275\027n<\316,\205\275\177\000\n:z\324k\275\337\211\213\2758\002k<bK,\275\305\001\234\274Y@\337\274\201\307v\274d8\222\274\306p\\\274\022\214i\275\035\260c\274\2265\257=\344H9\275\363\343\307\272B7@<u=r\275\314\345y=\360\306\355;ht\354\274RM\020<\264M\273\275\002\222\337\273\271\321Y=\213\272}\275M\245\003<U+\355\273a\026H\275q\372\337;p\264A=1\364\026=\250E(=\240\210\020\272\242\216\223\275\005\022t=E\252\033\274\300tV\275O\206\036\275\336\372\347;\261\3167\274\007p\351;a\230\356<\016\322\370:\240\r\002\272N\277I\274\0364\006\276\251\326k\275C:\035\272\024\350\212\274\317\\\336\275\315\321u<\3074\027\275a\264\020\275\337\010L\274"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/concat"
  op: "ConcatV2"
  input: "lstm_1/Const"
  input: "lstm_1/Const_1"
  input: "lstm_1/Const_2"
  input: "lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/read"
  op: "Identity"
  input: "lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/zeros_like"
  op: "ZerosLike"
  input: "lstm_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Sum"
  op: "Sum"
  input: "lstm_1/zeros_like"
  input: "lstm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_1/Sum"
  input: "lstm_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile_1"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose"
  op: "Transpose"
  input: "lstm_1_input"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1/Shape"
  input: "lstm_1/strided_slice_12/stack"
  input: "lstm_1/strided_slice_12/stack_1"
  input: "lstm_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1/transpose"
  input: "lstm_1/strided_slice_13/stack"
  input: "lstm_1/strided_slice_13/stack_1"
  input: "lstm_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/MatMul"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/MatMul"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add"
  op: "Add"
  input: "lstm_1/BiasAdd"
  input: "lstm_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul"
  op: "Mul"
  input: "lstm_1/mul/x"
  input: "lstm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_1"
  op: "Add"
  input: "lstm_1/mul"
  input: "lstm_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/add_1"
  input: "lstm_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value"
  op: "Maximum"
  input: "lstm_1/clip_by_value/Minimum"
  input: "lstm_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2"
  op: "Add"
  input: "lstm_1/BiasAdd_1"
  input: "lstm_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_1"
  op: "Mul"
  input: "lstm_1/mul_1/x"
  input: "lstm_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_3"
  op: "Add"
  input: "lstm_1/mul_1"
  input: "lstm_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/add_3"
  input: "lstm_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/clip_by_value_1/Minimum"
  input: "lstm_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_2"
  op: "Mul"
  input: "lstm_1/clip_by_value_1"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4"
  op: "Add"
  input: "lstm_1/BiasAdd_2"
  input: "lstm_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh"
  op: "Tanh"
  input: "lstm_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_3"
  op: "Mul"
  input: "lstm_1/clip_by_value"
  input: "lstm_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_5"
  op: "Add"
  input: "lstm_1/mul_2"
  input: "lstm_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6"
  op: "Add"
  input: "lstm_1/BiasAdd_3"
  input: "lstm_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_4"
  op: "Mul"
  input: "lstm_1/mul_4/x"
  input: "lstm_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_7"
  op: "Add"
  input: "lstm_1/mul_4"
  input: "lstm_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/add_7"
  input: "lstm_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/clip_by_value_2/Minimum"
  input: "lstm_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_5"
  op: "Mul"
  input: "lstm_1/clip_by_value_2"
  input: "lstm_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start"
  input: "lstm_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "lstm_1/transpose"
  input: "lstm_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "lstm_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter"
  op: "Enter"
  input: "lstm_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge"
  op: "Merge"
  input: "lstm_1/while/Enter"
  input: "lstm_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1"
  input: "lstm_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1/while/Enter_2"
  input: "lstm_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1/while/Enter_3"
  input: "lstm_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Less"
  op: "Less"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1/while/Less"
}
node {
  name: "lstm_1/while/Switch"
  op: "Switch"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1/while/Merge_2"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1/while/Merge_3"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity"
  op: "Identity"
  input: "lstm_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul"
  input: "lstm_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_1"
  input: "lstm_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_2"
  input: "lstm_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_3"
  input: "lstm_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add"
  op: "Add"
  input: "lstm_1/while/BiasAdd"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul"
  op: "Mul"
  input: "lstm_1/while/mul/x"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_1/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_1"
  op: "Add"
  input: "lstm_1/while/mul"
  input: "lstm_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_1"
  input: "lstm_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "lstm_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_2"
  op: "Add"
  input: "lstm_1/while/BiasAdd_1"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_1/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1"
  op: "Mul"
  input: "lstm_1/while/mul_1/x"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_3/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_3"
  op: "Add"
  input: "lstm_1/while/mul_1"
  input: "lstm_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_3"
  input: "lstm_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "lstm_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_2"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_4"
  op: "Add"
  input: "lstm_1/while/BiasAdd_2"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_3"
  op: "Mul"
  input: "lstm_1/while/clip_by_value"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_5"
  op: "Add"
  input: "lstm_1/while/mul_2"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_6"
  op: "Add"
  input: "lstm_1/while/BiasAdd_3"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_4/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_4"
  op: "Mul"
  input: "lstm_1/while/mul_4/x"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_7/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_7"
  op: "Add"
  input: "lstm_1/while/mul_4"
  input: "lstm_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_4"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_5"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_7"
  input: "lstm_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "lstm_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_5"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/mul_5"
  input: "lstm_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8"
  op: "Add"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit"
  op: "Exit"
  input: "lstm_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/TensorArrayStack/range"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "lstm_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/sub"
  op: "Sub"
  input: "lstm_1/while/Exit"
  input: "lstm_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/sub"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 761405
    }
  }
}
node {
  name: "lstm_2/random_uniform/sub"
  op: "Sub"
  input: "lstm_2/random_uniform/max"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform/mul"
  op: "Mul"
  input: "lstm_2/random_uniform/RandomUniform"
  input: "lstm_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform"
  op: "Add"
  input: "lstm_2/random_uniform/mul"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/kernel/Assign"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "lstm_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/kernel/read"
  op: "Identity"
  input: "lstm_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "-\214\200\274\203_\233=\375\261\246=},t\274g\2022\275\300fn;\225H\362\275\030JT\275>1q;t\360\301\274\217!i=\317\207\221<\310a\322\2747\026\351\2758p\262\275\350\217\324\274\210\3078\275\332\215\271\272o\241\204\274\237E\003\275N\024\304\273\264\237(=\020\225\031\274\0244\020>\n92\273\\Cf=0O\210=\341\"\225\275\251\346\266\275\265\037r\273Q\037\275=\215\276y=!\223\325<\317i?;\340\266\007>\250r\315<\264\010\001\275\256\275\247\274\2669t=\024\314\214=\221\t\352=\020\340{\274\234c=\275(,\032\275\335n\007>1\227Q;4\322_\275\014]\252=Y\214\361\274\211\320<\275N\352`=n\361\033<\276_B=\313]\003=\0141\310\271J0<=Jx\342=3\217\216=\267\276*\275\311\251Z\275X\256\025>\333Q =\037sb=\233\207H\276\232\001e<\333Jp<|\020\251=,Y[\275\3105S\2755\026\020\276\346\313R<\266\245\252\275h:\302<\334\201\253=\361\274$\275V\361\234<\226\336\251\274\266\357}=\232Q\301<\242\003\002>+\220\230=\347\332\362=\242,o=\355\002Z=}\217\200=\303$9=X\312l\274KJ\337\275\253V\236\275&N\034>\363\325W\275B\371\254\274p\346\376=fc\207=\261\022q\275\n\301\n\276\032\306\032\2743z#\274L\251\212\275\177K8\275*\"8\274\223&p=\t\2054=\225\336J>\373\030\220\275Qs\214=\370\333\320=wuW=A\013~=\262s(\275)\266`\275{\347\032>\'\3309=eE\237<$\007\020=2\254*<\206-|\275\255\207(=\332\342\235=b\022\352\271\276\315\021\275\220\343\346=\375{/=\252C\t>\273A\365<t\311\223<\205\223\032<\335>\206\275A\352k\273cJi\2746\" \275\364\331\260<\274\267\225=\276\332\\=\232\360\316<s\265\244\274\354\225\372\273\311\000m\275`\013x==F4\275\3436\377;\0355\244;\241\341e\273\222\220&\274[\251\016=\322\322\001=\264d\372=\244\214\262<\"X\303\275\263\273\267=\004r\212;|z\250=\245\017l<\"+\200<_\304\021\275Z\2152\275\006\227\206\275\314\032\253=\\ \007\274n\310\271=\257ZS<6U\311:\313om\274\013\273\370\275v\004h\274?\307e\275\300\3012<4\375,=\324=\306<]\035\350<Ko2<W\\\033=\035\177\307\273\342J\301\275(@\277=#\034S\273\363\312\265<o\311\304\274\216\272\300\273\347P\274\275\246\317V=\311p\036>\321+7=\266>\315\275\300\345\205=u\003P=yQ_=\204E\214\271\346Z8<7\324\217\275\201P\n\275_|\224=q\235\362\274\247\253\275:\362\250C\275\214\373\261\273\243\005>=\312\224J\274c\261\235\275\271\014\001\275\377\033\306<\317t^\275\276\2532=\030\024\306\275Ei\266<\377\006\022\274pO{\273\317\250\270=t\312\346\274y\272q\275\037\327\'\275\'J\204\275\312\327C\275\3559\004\273\\t\234=Q\310\344\274\277U \274w\215y=H\245\216\274\024\257\256<\033\232N\275D\204\216<\364\221|\275\211\007\234\275!\\\016\275W\000\\=\252\204\341\274\022\244\250\275\20534\275\024\333\031=\033]B\275\345u\244=\374W/\275\320KP=\267\256K=Fu\177;\311\210\220\275\016\354c\2754\"\353\2722\215\247\275$y\305\274[\356\333=\213\034\212\274\271\003\337\272\330/\212\275\323&v\273\003Z\260\275\210\242&=\345\307\202=n\273\255:\027\365\335=\336\321\"\275\343?\000=tv\320<\347\360Y\275\030\257\203=\033o\276<u\351N\276w\2262=)0\020>D\314\330\275I\024\032\2758\263\251<\213\025\032\275\304\272\246\275\031h\r=\320u\027\275\341\337\031<.m\201=JC\020\275\350\t\331<\253|\002=\027h\331\274\032]\201=\255&o=\304\2243\275\335\354\201=\010\257\014\275\204\035\003\275R\247|\274\003\254\201=@\024\314\274\227\335S\275u\002\240=\344-\036\274-3\327<\031\255\025=\255\243\201;\270\211Z\275\251\326\233=0\311\301\275\317\214\264\274?\337\222\275\003\022\010\276I\302\023\274**U\275\033,\312\2738\314\016\275d\035\020<#\313\201\275\327\211$\273\304\216\205\275\002t\375;\261\020\251\275\203\327\202;\031q\000\276\340f\340\274\200a\014\275\355\360\255<l\316\240=[\256\263\275*\373\324\275\243\363n\274\302\365Z\274|\274d=\242\353\276<\007\222\353=\332\303\212<~\343)>\352&&\275o\023\344\274]\024\354\273T\037P\274\"\331\017\274_\307e\275\305\364\223\275\353\332A\275z)<\275\201\273\333\275?\302\027=\024\237$\275\267r\233\275\205;\256=\247\206x=u\267D\274\270\230\372\275cU\260\273\216\337\323\275\362C|=\342!\'>c\000\300<[\010\"=K\313K\274\314\014s\275\366\352h\275\371I\334\274x\265;<!R\223\275\263\020$=l\307k<\330\034\006\275\340\035\014=\3014t\275\023N\260<8\274\254\275p\337b<E\352\261\2746\271\362\274\345\341\361=\307P\205=\235@5=\244\230Q\275\017t\030\274\265\345\241=\225\345q\2750\r0\275\321\364\344=\352\201p\275\221\221\365\275o\373\314<=]\215=e\214K\275\020\224\237=6\023A=\020\222\n=Mj\316<c$\224<\240\316Z\275\014k\320\275\257\320\324=\367\2506<.$\204=\354\260\243\274\263&\234\273&\312\212;A\021c=\n\350$\276n<\310=V\265#\2756\206\016\2756F\266\275\234\212_=\365p\265=\\\030D=\026\354a\274\025\032\r>\006]\344=\367\346\217\273s\207\310\273\221~\017\274T\236m=\271\271\r\274G55=k\334_=\337\200\204=\337\330G=d\256\251=?\223\244=\220\260n\274\267\230?\275. \241\275\177\207\022=\317\n\332\275\277\370\205<F\301T=\2406u\275\373\261\032\275\313D\035<\023\246\342=i\253\211\274\271\375S=\2100V=O\216\253\274$\245\004=\376\342\022\275\257yY=F\277\026\274\224(|\275\332\333\212<\231\265\270<\346&\204\275\321f\220=\241\342\345\275Za_\274\232\305\272;\037,\251=I\212i=f)\036=}\236C=\355n\355\275d\317g\2742\020!\275\212%\305=*x\323\274\253\000\344\275#\016\023\274J\345o=\352\t\222\275\267\264\200\275\241\247\357<-\203\002=uv\\\275\200\3434=G@j=\314\276\034<\301o\037\275\260\035\255\274B\266\257\273\253O\311\274Y\226\277\273E\373\363\274b\257\272\275{1\244\275sk8=\2741\321=p\277 =\245v\005\275\021\310P=\240\233\267\274\"\024n=\207\027H=S\370\204\274Q\"%\2749\346\324\274L\022K=\236\247Z=\315&\327=\335V\t\276\271\271\210\275\r\342<\274\026\327X<\356\240\004<[\3660=/l{\274L\324T\274\301h\331<!\301\314\275\326x`\275*;\345\274\013\2475\275\223O\006=\'\236&=\217\250\014=\2754\245;jR\201<-\332\244<\351t\206=\310\236\272\275o9\000\275m\3029\276Q_\302\275\331>\234<n\r\206=\204\'\037=\343Nf<\333=L=\260^\254<}\177\317\274\312\013\036\276J\205\210\275\257\030\325<\212\000|=\244id\275<n\206<8\022J\2753\215\003=\207\340\213<D52<r\361?=\257T\037=&\336\240\274\310\303\215;\321\016\211\275\327C <\016\273*>\324\346\224\273\024\2308\275\202ls\275\245\336h\275E;6\275\310A\304<\034,H=\2542\224=q\263)\275i\361\236<6\324\227<a\007\344\2740\300,\275\216p\251\275.\317\310\274x\034\240=Ah\023;\325+\367<w\025\357;\231\204\374;\235t\267\275\246\036J=u# =\177\024\376\273,\314G=\027\212a\274\'\365\324=\247\004\375\275\374\312\256\275V\355]\275\212\2355\274J^\016\274\346\337\365< S*\275\377\005\335<-n\031>}\006\232\275Ft\303=\216\003\334\275\246\351\220\273\372\224\004>\340\265\037=\346\266L=\350O\025=\331\251\274\273p\345\204=}\373\263\275p\033\232<\235q\254\275)\327\255\274<V=\275\263\351\273=\272\037 <I\022}=<#;\275gY\013\275, \326\275\244\311\005=\235\0362\275e\336\000\275t\246\265\274\261`\234\274g]\033\273\203\022\023=\246dI\275\262\303\352\275\315S\251=1\231\202\274_\255\217\275\310V\217=\237\270\224\275ku\212\275\027\353\275\275\350f\346<\325`\331<\257\206N\275\027\204f\274&}\251\275\251\332(\275aN\026\275N\013\274\275\331\355\232=\320\270,\274\357g\300:;\222\241\275\207\025\367<t7Q=F9w=Uj\361<z4\306\274\212\336\n\274o\360\253\274)\236C=\351\253\310\273P@$\275\344\373(=\346G\370\275+\237\320\275\247\341*\274\265\017\027\2757\335\331;&6\007\275\215\\\224\275W\314\362<2P\216\274\317\222E=\362\021\273\2742}\003\275\331\356\212\272:\375\345\275h7\246=\2068o;(\003\301\275 \321\307=\263x\316\275(\nn=U\261y=\"\253\030>\345\235\251=\033j\033\275\364\303\375<`\212\354\275\017\374\273<\207\205\026=\206\350\264;~\245\300<!1\334<N\036Q\275\354\240d\275\351\352\265\274\212\002\376\274\272=\217=f\210\265\274>\336\210=\204\265 =\030\214\335=\365\270\260\274\331lX;K>\301;l\312\024\275\352\347\026\275\202\3037\275%7\370=p\026Z\275D\252a=\322,V\275t\252.\275\336\272\303<U\320*=\310\363\335\275\257\001M=\215\nw<\365\037o=a\t<\275A\365f=z\036\341\274$\007\314\271\266\366 \275T\366U<\253U\320\275\234\347\252<\304A\216\274.*P<\"H\332;\241\257\241\275W\221\352\274\271\341\227=k\321\203\274\005\205\363\275\341x\244\275\314\317m\274+\035&>\366W\202\274\010\'\237\275yGk=\243\236\270;\371i\245\275\222\256\345\275\325\020?<*\312u\275\003\244o<\313\251\274\275\234\263\343=>\321\276\275-0\353=J\205+=\273\222\022\276\314X\331\272\3548G\275\274\006m\275\375\301\010\276\315W\362<\227\022\231=\201\244\360\272\300{\305\275d\'\213;e\\\330;\265\031\270<p\3616=\001\254\323=\262u\244\275=o\007\275\212\356\001>\247\203\235=\355%\363\274\010z3=<\225)\275\020\363%=\233\327\344\275\203\311\205\275\216d\343=\027A\200\275\347<\252\275P\262\212\274\346Y\302\275c\241\334<-Ep\275\324@O\275\306\346\255=\335\211\352<\032\330\204<g\220\000<\203\0372<\327b\324\275\362x\007\275yh\327<8&:=(\271#\275\020\224\315\275\314V\375=2\304z=\365LQ<\326\003\343\273{P}<dI\032\275\305\003\021>M\344\251=\302iT<mf\212\275\277\027-<kx\356<\364\264L\275\362\214\204=\351}\032\276\r\351\263\275\215_\302=k\0265\276:\2121\275\343|E=\006()\275o\330\303=_\332\244=\013\216\253=\206\334=\275\334t\274\274\225\'o\275\037\177\202=\340f\212\273\265:,<B\352\323\274\335O\334\272\364|\026;\250\340d\274%;\276\275\262m\226<\342 v\275r\017k=i\375\212\275\261n\301\274\301h\367\275\022\352\256<\207\351\371<\315es<\213\2425=\270SP\275\232? =@\224\016=}\365\311=\374\027\252\275/9S\274\023\236\312<B^S<\014\215*\275\245\220\214=\345\303\017\276\010\026@<C>\037=\325\347\247\275\352\303\355\275\033\004v<r\014\024\275\033^\377\275\310\377\310\274Im+;\220\256\026>~\022\247\274:\036N<\037\264l=\213\352Q=_\204S=\337u\240<=\212\364:\257\022\036\275\316F\250<\2659m\275\030zW\275a\331A\275\270X\357\274\354<\033=\r:\301\273\326\370\004\276I>\316\275\244\312S=\220\231\250\275)\033\016>&{G\275\325\tW=S\004^<:\217\271=\216\365\206=\335\314E=$O\273\275;\352M=Q\215$=g|\271\273(;^\275\037xx\275\301\374\203=m\241\032>\017\031o\275\203\3132=\242\232\003\276\\]u\275\\\243\032\2756U;=\005\250\216\275A\003\260\275\033\\b\275\023\313\017\275\223\341\315\275s\2433\276\323CM=\370\\s=p\321r=\360\275U=\261rS=\254\226\251<\300\352(\275\013\031\300=c2H=\326jj=\230\375<=\366\205\234<\032\206 \274\3668$\275\t\216b;\3209\225<\331\216e;\307\203G\274\317#.<@\330m\275\205\335,;\234/\322=<\310\302\274\224\205\375\274\237\322\327\275\222\311\332<R]\205\275\276\0277= \203\315=\260\241t\274#\366\252;&\332\371\274hd\017>Z\260\276\274\341\355\267<\014\374\314\273\265\342\r\275Xy\313<\353\337\r\274\224\364 <T\306\205\275\213\352\227=\037\250\326\274\252\234\240=A\200\334\274W\326\223;\340\352E=;\324\330<P\371q=\375\361\010\276\021\271\320=x\373a\274>-F<\304&_\275l\265>=\335x\276=\266\'N<\231\210\343\275\344\272W=\370\252\267\274\326\244\313<M.M=5\236\227\275`\334.<\352\275\205=n\226\276\275u\260\347=\317\303\243=Q\362\033\275@\252\212<2\027\232\275C\247\376<y\001\257\274 \3470=\203\256\235=\303\014>\274\014\252\302\275_\022\302\274V^\212\274\020M\355\273\305\302\006=\232\354\364\275\212\266\350<\251\204\217<.\254\235\275\t\320#=yy\023=a \231=\332\3479\274q\252\257\275\325n\332;\005jj\2752CT\274\247\247\002\275\002\205\025\275\300\271b\275\3325\330\274\204\366\204<.<\365\274YQX<\035)\331\272o\377A\274\325,!\274\350\322\334<\014\177O:\321\224\r>2Wm\274\206\2544;\033\313&<>\354/\274\213F\340;\304$/=4\362\216=\330\263x=\377%>=\204\330\306=\021\314\345<\235\266\355\275\224\237/=%\245\232;\3154=\275\222{\222=\233\363\202;c\222\030=?T\273<\210\025 <\n\364\367\274WV\312<\200\216\245\274\226\367\206=\237\3175=\311[,<P\320\313\275\340\023\273\274\0301\310\274\215\233\010;( \236<y$b\275\035+\275=\307\275\234\274\025Z\364=7\341\256<\2728\216=+\326\352\275\241\327\r\276\361_\221=)\270\351\274\243\216.=\231\317\237=3\333F\275\023;\274\275\033\323\230=b\\\'=\235\202N\275\212\030\264<\0045\222=\201\221l\275\363\211\341=yNT\275\337IP=\310)H=\344\264\304=\224\376]=~V\024=Q\320\305\275\212)\324=\250g\205=`\355\353=E\007O\2756\207\240\275L?/\275\037\375\030\275d\222`=\277\201C=\225mD=\215\016A\275u\227\351\274\253\252:\275yO\272<!z\326=\234\021\263\274,\322\203\275\\\250\212<\300\350\247\275\177\334\256=\201\270*=\2138\026\274\343\225f\275\205\252\000\272\210\254\004\276\204\377\017\275\312W\031<\326v\230=p\363N<\307\256\017\275\304B\275<t\322\276\275\361\247#\275.X\313<%\255:\275r\220\310=\232\250\000=\346 \335\273\2702\\>\002\016\021>\013G\273\274\3473\341<\226\017\033=\005a\352\274\205\315\236\275\216\004E\274y\010M=\335\"\203=\207]==:\367~\2757\205\253\275y\305\373\274\231U\330=\216\305\033:\342\026\343\275r\021N=\311\337O<\035a\"\275\005\027\250<[\025\371\274\2742-=\275P8=P\255\252=\261\307\003\2750\021\003= \036$=\340\327\222<\\d\215\275\321\002\303\273u\275\227\275/q\273\273g7i\274\376[L\275\336\2530=v\215>=\002\223X=\273K\347=/\364\377<?\352\257\275>U\344<\226\245x=\235\356\210=D\232\233=^\231\255=\007%\013<\220\271V\275xo\206\275\355\337\222=\n\273|<\241\035\006\276\377c+<\362\214\261\274\331\3161=\361FQ\274\215\340\344=\366\tK\274=7R\275\223R\311=ND\036<\025B\275<\274pX\275\355\261\014<U[\244\275$\252\237\274ey\255\274\260\254\212:h\276[=\330!\007\275\336\334\r\276\331\266B\275\254\224\247\272\330qI\274\251\027\014\275\020$\340\274\372{@=\005\335u\275 \223j=\374\372\345<\233\037\r>\212\032\r\274M?a=e\207\001<k\354w\274\220\354\344=Q2:=\234;\256=W{R\275\236%\251<\254s\241;\375\217\226\275\313\216\367\274\000\r\026\2756\300\320;\032y|=\204\2223=;PA\275@\332\020\275T`\033=oC}=\362\340\270=\265\003\243<\266\214\207\274\021i|;\367\0072\276t\330t\275^>\007=\336}\235\274\215\263\234<\034\021\222\275Z6\261=}Q\357\275\230\236M<\324cV<\001\360\342\274w\016\200\275\010B\242=c\374?\275\023\315\323\275\343\322\207=\300\215j\275,v4\274P\244\313=F\307\000\275\010\315\354=u\242\325\2759\006\243=\264\267\022\276|Y\324<\253\302J=\225\273\317\274\233\3341=\304Qg<\233\237Q<\226\363v\274\355\215,\275 \257\305;o\333%\275\031\t3=\231(\323;\262\344`=o\372\367=WN\236\274f\273\263=q\177\361<\026\001\022>\277OX\275\236\032\013\275s\335\356\274\376\361\274\275\222T\276\274N\361\027=]\n\321\274w\251\264<\033\263\030\276\313\227\215=\370\021\026\275\360]\017\276\371Q\265\275MkF\275,\360\340\275\332\022\257=\'\2506\275\255\353\266\2755J\211\275\364\237\367\2748Z<=\037v?=\273\244$\274Ji\257<>Q\337=\230\316\303\274\'\337l\274R\320\344\274\210U\202\275\324\343\323\275\241\002\217\275v^5\275\177_\301\275\375\371A=\360\235\215<*\374a\275Q\231\006\275r\0218\274\256\212\326;\217\344Z=c.\323=\000\031\007\274P\362B<;l\025:\002\t\305\274\362\363]\275\221\372\371\273\377~)=x\025\\=\002\t\010\275\274\3403\275\365\273\377\274q\246\275\273\\\035g\274q,\324\274\324\273v=\"\322\241<\274,\353=\016\375\355\274\2636C<i\3618=_\365I=\016K\265\273\273n\003>Q[\263\275\221~G\275D\002m<\300\275\245\274\223=\213\275t\2235=7\300\371\275\335p\307=\363\315\330<\315\242\323=\216\236*:k\003\274=\211\230\033<\213@\335;zH\267\275bvN\275\231&U\274\333\237\213=,\2502=ksj=t\026h\274\377\241=\275\230\2001<,\025<=\204D<\275\231\313+;\342\335\006\275\270\375\252\274\234h\267=K\022\031=ia\227\275\213\026\t\274%\215\035\275\253\330\341;\003\001\263\275\313\300\202=~d,\273\002\0030\275\020#\031=\013\235d\274\267\033\334=\246\365J;\"\331\222\273w\327\217\275\224\273\307\271\226\255\264\275\362\302\215<=}\310\274\326\222\343\273\240V|;\316Y\003>\343]4\275\265_D=\006\226\240\275/\232\227<x\357\327\275\002,\307\274\267\351J=.\255\003\2767\345\232\274\252\306\313\273`*\013\2743`\214<\241].=\365\265\217;\253~j9\007\022\003\276\336\206g>-\326\352=_\210\"\275\272\271\206\275\345+\365<\017V\"<\303\n\321=!OB;\210\273\320\273Id\200=\376\321\277=\013\023\236:\335z\026=\250E%\275o\361\201\275\347\214\270\274\n\006l\275i\017\217=\250\014\221\272\307\341\235<c\331r=\370\034\206\275\254\352h\274\017\334#\275n(!\274\037\210a=D\275\260=\345\001\301:O\270\206\274\021;\200=\265rS<0\363x<\354\204\254\275\224\317\366\275G\030\241=\372b\355\275\362\211E=\207\343\377; \021\224\2744U\352=d\234l\274\021\0228\276\t\023~<S*8;ByQ\275\365\372\014\2751\016\335\275\357_\r<\327\330\t\275\n\236\216=R<\031\274\225\252\"=\3669k<5\335\266=\014\327h=\031\253\324\273\177\362\265\275\203}\301=\222z1=\005\350\031>\352x\211\274\263\316\026=\275\227`:I\344\303=\337\301\322\275H\030\216\273\273\"\021=\223\260\331<\010\237\266=\372\014\263=1\323\202\275\262r\021>\317F\224=\272q\363;\361\203\265\275\311\236\371\275\311\234\363\273\002\035M<p5\003\2750\306\217\275\313\014\204=\204\351\r\276\242\\k=,E\0059\354W\031\275P)\375=\343\315\251\275\200X\021\275%2\026=]$\033=;%4\275\276jW\275\340\263\356=\257\257\246\275N\233\203\273\2637\005\275z\270\213<\201u\256=wx\207\275h\260\254\275r\335Z=\021\330\017<a\230\023>cD*=\225\235a\275,m(\274\033}\230\275\337\373\314<\337\227\312<\345a\241\2749R\\=\375\234\271<\017N\304=TJ\266\273\351\033\247\275\323/\337\274\354\315\320=\316l0=\023\035\244\275.z\250\273\242\267~<\035\311\301\274n\023&\274=\326\212\275\233-u=\276p\026\2750\261\005<a\231F<5\255\363<\331\204\220\275\305\341\257=\332\351R\275\356\203g={q\343\275\035\351\344<:\037S=\030\333\002\275\300\\\320\273&\251\210<}A\255<\241\207\376\274\375T\273\275a\353\252\274m\253\226<\260\276x=\276;v<\377D\227\275R\354\356<\260\205\003\275tp\236;\\\362\322<\222\362\375<\362\324`\275\374\273\214\274:>\231\275i\006\366<\314\200\322\272\261\270U=\370\024\223=X`\016=\001g\227\275\010\010\013\276? \231=\273M\331<s>\360<\010\350\373\273\346\352\200\275F\036\247=\331\231)=\270\230&>\201dR=?j\\<\237\240\r=\007@\274\274\267.\301<\235r\016=\371X\026=I\177\237:\036a\301=\'\327\354<\241\315\030\2737\236\361\274\007\302\373\275\366\235\341<\277\203\334<\336\030z<X\2566\274N\273\224\275:\352\205=\327\217\262=\323V\007>\370\212\220<8=B=\'\025\"=\000.|;\251\365`\274\"\202\331\274U\301G\275\315V\327<\351t!\275\327\222M>%\205\013\276\212h\234\275+\210\203\274\331\212\305\274~\036==\3024t\275\237\302b=\314\007b=\362\022\257<\'\206\233\274\323S}=\344\231\253\275\021{9=\027\242&=\215E\036>\333}\216\275\336x\\>Y\303\214\275\0176E=4[\225\273\001\314\363<\333\317\017\274\26515\274\362\355%\2741\341\355\275b\314\204\274\0031\325\274\350\260I=7\037)>\241\330\024\274P\322*<d\343\201\274-\274\304\275\231}{\275\234\317\030=\354\333\305<\353B\220=Nn\244\2742#\200<R\206\017\274\337\270\020\274\365\346\222<\233\234\332\274\364G$\275\260\3067=\261\344\364\274,\022\006<\376\303+\273\336\334\005>\200\343\001>\000\203L=:\312\337\274\212\r\257\2747`\231\274\346Y\020=`\223\321=\016\224\346\274\325\334\027\275\004\373\332<\302\n\316=],\031\274\010XR\272\377\354\276<\327\201\222\272\314\375/\275\257t\035=\223\374\351<o\"\345;\207\030\007>@iE\275\202\027[\275rR)<\373\226\n>j\254\357\272\031\032\206\274\224%w\275:\035\272=\311o\302;}Y\324<\302\342{=\177\330\211;\\\020\340\274\254\206\377<\324\236\013=\216\370\232\275>\252\204=\007\275\362<\034i\253\275E9S=\210\210\341\275\336\252;=l\273<\274A\365\320<\337u\020=\334\312\014\275\224\267Y<\307\252b=\377\n\227<\007\277n=\026\356\251=\246\235E=\304E\366\274k<\331=\\\343\002\276d\245\343<\370\233\205\275(\376d\2742\023\255=C\210B=\003\274\036\276X\310\202<\037P\'\275H\206\212\2752\316\255\274\256\313\220\275%\201+=\224\330W=s\263\017=\363p\322<\225{~<\345\037\331<y|\342<\232\372G=r\210\212=\231\253\310=\255B\347\274\323\356\342\275\274NH=\2509\247\275\217W\252\274x\276)=\225\010\340\275\337\330\016\275\0250|\275\317d <\022(\356\274\225\274\272\274\360\0218<JL\337\275\241\364\200=\024\307\264:\347bS\274\021\265\223\275F\244\234\275\224?\266\273\310\312$=\265\351\370=\033K\236=\204{\214\275\337\357\022\275\364\274\r<&\250\222=\207*\270=\206 \220<\250\0226=\310[\371=\023UP<\004\222\345\272\274\n$\275L\226\325=\307\024h=hJ\245=\360e)\274\354\233\025=\202I\325\275l\330\200<L\220\250<\037C\247<\003?\232<\204$}\275\007Z\005=\327\272\343=\343\260\003=F\025\215=\026A\307\274J\213\251\274v\213b\275%b\256<J\037&\275/\251\263=k\270\236\275\225\262\261=\253\t\230\275~\363\347<\007\327\200\274\t\223O\275tPP\273\337\272s=~\305\325\275\324o\014\276\246U\033\275T\261Q\274\261\310E\274,\2619=\377r\376\274\217,\232\275A\253\\\275\257\361\022=I88<\035\020\235\2757\323E=\236\221\304=\3348\301\275\'+i\275c\007\265\274\'\217\272<u\334\276=\334\214-=.\376\003:\373/;;\246=\023<zX\360\274#\272\323\274\344Z2\276\241@m\275N(\217=\025\3211=q\242\200\274\030I$=\021\231\262\275\031\016\276\274T\243E=\230\355\251\273\243\353\222<P\242\245\275\337\332\032\274$\305D\275\221B\243=z\262v\275\013\340\346\275\277.V=\304$Q=\n\014\026<\345\022\214=cr\256\274\022\"\342<Y\275\250<\241\357\377<\017\315\205=\271\344x\275\222\005\342=\232\010@<\344\326|<\275M\343;\2063\266<\301\342\342\274\317b\020=\340\324a=\027\273\177\275\033\275R\274\361\2665<3^R=\267\333;=\020\323\233\274\300w\217=v\230\202=V :\275\326\334X<w\346\262=\263\206Y=\3347\214=\322\t\223;k\305\306\273X\371\250\274t\025\341\274IN`\273\204\360\254<\201\207R=\360\211\027\274\367p\002<\002\214\344\273\2555O<\r)\272\275q\277\302=\210\"\234;Cq6\274@\304\376\273\020\222\221\275R\330\214\275C\021\327<\023\315\316=\037x\"\275B\327\335;\343\373O=\320\2036=a\227\036\2757\000\254\275\355\020\322=m\342\313\274\362_\233=\200\353\256\273xni\275y\306\010<\000\227\035\275\252\373\270\274:\255\376=\373\330\336\2746T\270\274FD\245=6/\311\275\302\351\342\275\225\036\026\275\207\346\027;\301M.\275\363\215\224=D\311\341:7\0342>h\277\244\274\037\351\376;\225C\030\275\000z\003=~\3322\275\007\366\026\275\344\r\267=\211\326\222\275\236\3723\274\202\233\010\275\376\236;=<\344`\275\377\376\326\274\014\2275\275v\223\262=0\330\021=P\001\r\275(\365\3759\2665}=\341\204\261=3\221\205=:\032\225=\271\264f=w!3=\302]\223=\010\030!=\203\327\311\274p9\360=\205k9<\205\327\245:\244\332\220=\366\"H=x\007\237\274\031\370H=\3754\304=\004x\372<\337\017\330=\212F\241\275]\304\257;|\032\016\276\330k\001\272\376\355c\275T\303}\275\014c\301\275\t\003]=\255\245==s\373\325;A\320E\275\357n\245<\025\321\305<H\366\334<\201\234\306\274\344W\274=\307\334+=\260\031v=RB\351\274\223\317\330<\030^\377\275\356V\260=\375\303P\275\231a\305\275ZM\242\274\336\232\232=\034\272\230=l\364\000\275\230\212\275=\233p\032\275\013\3658\272\353`\370=2X&=}\226\232\274\313\201\t=\265\241\255<l\370\277=\242:\255\275\204\224\237<9{\223\272\2036\344\275\254\257\264\275\364h\232\275\036\2253\275xg\274=L\301\003<\261 \324<\347$L\276\277\037M>\233\351\364<\234\347\246<\366R<\274|\333\005\274\345\211\217;\247q\305\274y\030\273<\371\354-=L/!\273\310\271\241=\323\177\213\274]\276\256<\232\215=<\377\342M\274=\252I<_G\350\274\247\201\321\275\226:?\276\233PR=\337+\037\276Lp*=.eL=\2240\203\275\3741\022\276AC\276=\033\253\375<27\r\276r\251y\274\344\370:=\242\016\003:6V\305=\177\204\305=p\353\374\273(\302\020\275\0022Q\275\212\270[\273\241\017\337\274\023=\211\275;\305\317\275+\305%=H\214\226<\300\245\212\275|I\203=\363`\000=m\021\\=\356\334\261; \370\320\275\006=\032\276C}|\275\\\320X\274|@\034<\277\004\002=\206\340T\275z\350\253\274\020M\221\274\232\260\003\2755\302;=\312\322t<\013\225Q=b\210t<\211G\330\274Z\357\304=\223 _\275\303\322)<@S\226\274\253\210o<\257\370g\275\316r+<\001\016\"\275\335\004q\275\350:-\275\322\214\014=\321q\272=\007H\010\275\203\002<=\353O\377\275\313z8\275\214\366.\275O\203\213\273\267]\207\275\004F\370<\236\026Q=\345N\003\274\323\333<\274\321&F<}\360\321:W\356\354<\027\355\346\275Q\030n\275\361+&=\326\2654=\354\357\361\275\231xQ<\302\350\272\273\226U\225=\277\260\235\275K\207M\274\023\251\334<\316\2254=\301f\214<\033\225a\274J\350\243<J\353\034=\277X\261=\252\343\321\2753\303 >\010\330Y\2742\311c=<\343\225=Q\317\\\275hp=<\375\240\226\275\326X\215;\3230c<R\344O=\007O\203\274\332G\215\274\nt\255\2730LX\275~\033E\275L\341s=\310oH=\345\025\356\274\177I\303\275\000\345\">G\244$<&\370\214<\222\307\376<\024\272!=\311\331\242<\347a\331=\035\373p\275\261P\035\275\t&4<\345\035j=v\272g=\nO\300=\301\335\227\275\245\325x=\343_\241<\262\023\347<s\324\206\275\245\035\221\275]w\344\274\257m7\275@#\321\2758\212B=H\237\315=j\204\355;_\013\257<$<:\275\242;\027\275\034\216\214=\210\323T<\036F\344\274k\300\022\274\322\002m\275i\004\210\275\035\254\301;r+\010=\316\250\304=O\004F=#\210\014=\211\247\260\275\211\330b;\271\026\257\273\204k\270\275\232\031\277\275b|\242=H\326\237\275x\354 \276(C\222=\223v\262\274!\270\221\274\377\211\337=}\226k\275\014+\033\275\350\372\237=\035\'9\275\2172\241\274\342\273D=\240Nm\274\365v\231<\223!S=\356_#=o\254\232=\336\017\303=\234\272\227\275X\010:\274\371\274\270\274%)1\272\312|(>\305\022\257\275\345\353y=7=\010\274\016\200\312\275\033q\221\275o\342.=.*\235=\3172\347\275\351\014\271\275R\265{=N)\r<K\304\005\276\257\254\214;\367\2245\275\027\317\365\274\264\000@\274j\273\301=\033\356\265\274\375\030\031\275\000\226\r=E4r\275\361\342\006=R,\355<\230\031\256\273\2552\201=1\232\261\275l\000\304\275\220\014\035\276|\351\240\275q*\360\273\307\205\037=\317\262f=g\2517=\242M\307\274\020\177\213<\005\214\344<R\3525\275PKo\274\372\272\023\275\255\310<=\310\247\013=\332\212A<\275H\303<3\355\226=3Ke\275\345to=\275T\233\275.\032\322\275\266;\177\275~\373Y=\304\226\225=\237\360\251\275\261YB<`7\245\274\257\345\267\275\354\275\365\275\234\013[\275\253b\204<\224`\362\275_C\340<\261\255}=\323i\265<\300\324-;y@\366<\317\345q<\343\305\001<n\031\236\275+\2554=\222\220j\275\3408\017=5\223\227=\352&\032\276\272\240\273\275Wh\002\274@\256S\274w\272i=Q\202\027=\306|\244\274\303\356Z<\307b\366\275\250B\255=\240\362\326=r(<=\026\331\236\275\254\342\231=\376{\270\274Z\300P\274\335K\342\274\005\326\257\275?rJ\275_@^=\301\000\021\275\374\253\311\274\275\316_=\"\006\221<\375Y\367\2745\326\247=\355\221E<\256#\017\275\001\221\224\274\235\246\202=\331\013\242\274\005V\326=g\2105=\202\272\354\273\377\342e\274\344\202\236\275\342=\033=\0249p<?\242\347=\271\250-\275\364\250\245=\032\336o\275\230v\210\275\227e\354\2740>\352<=\354\260\275xtN\273\362\364\330\274\263\177k\274\316\340\206\274\333\235#=\301f\356\274\276\242s<\005j\233\274\222b\201=6R\257\275\227} \276\314\342\255=\311|e\275\204&\223<\206\375\237\275\302\324\033\274\302\210\345;\312\323-=\003\217q=/\"H=\000*\014\276:lb\274\275m\365<\337\376.\275{B\341=(\300\303<wE\311<\005\001}\275\017\250C\275U\037z\2759}6=\241I\202;\340\315\305\275\234 N=\3336\004\2769\252;\275pIV=\354\333U\2758\213{=\300e\267=\036\357n\274dz\241=p(S=Sdi\273M\232\236\275\250\306\255=87\004\276\252\366`=\350y\230=\235\207H<*L\237<\265\032\224\274\214}\010\276\270\013\206<\233\301\257\275\225\000\215;U\212\362\274R6t;a\332\336=\243n\306\274\0203\233\275\336\272\351<\336w\016>\207\364W\275N:\n=M\212\246\275Ew\321=\264\375\364\274\257\250\216=\245\365J<\276\030\003=\241C\030\275RZ\370\2758\371\275\274\370x\241;\"O\031>\271E\213\275\366\266\364;j\216\303<\347\220\376<\367\304)>\023*x<\235\360.\275}\024\262=\226\274W<\324\376\320\275Iq\272=^\367\225\274\023\212\\\275\257\006a\275\t\344\027\274\0077!\275\212\236\250=\367fY<m~\202\275\001\261\363\274r\"\215\274L\351\247=\255v\204=pg\333\273ge\332<C\363\010=[O\201\275\245\023\241=\020\270\203=6&\300\275\227\376s\275_\376\\\275\376\2507> \302\017\276 K\230\275\013p!=\366\2027\275=\376\300\2755)N=\266Cl\2733I}\275\002l\231\275sm\251<F_ \275Z\331\033<\244\272\211=KF\013=\034\212\204\275\203\255\007\275\363\260K;\317k\364\275\266\241c\275\317$\372\273bco=\345l\241=}\013d\274\001F\220=\375\263\237=\307\2475\275\376\017\223\2757#:\275\210\335&=\253? \273\031N\234<\217\254\217\275\305*\214=\320c\035\275\270!\241<\373\371\275:\244\351\225=$#1\274\342{1\275\004`\367\273A\020\206=\357\366\352<h\357\024>\231<\223\275\023jB\275\356\355\236=a\262\236=\307\310\037<8U\330\274\307\220S=\023\017\233\273\304\233\277\275\272\323\030<\227\247\200\274V\313;=\267\260\304=\367\246\334\274\332/b=3\037\217\274\355;\221\274\344\n\227\275\256\204\224\275\332\320\217\275\237BU\275{\003X=\202\014\307\274.\002\r\276\013\342.<>\340\235=\177\207\231\275\220\243\256\273\3264r;\220\004\000=\025\t@>\224\345\215;4\354\326\274{\244\244\274fVb=\233\324\004\274\313\r\301;+\363\207<@B\275=,\250\252\275x\217\005>{F\004=~\305\276\274\266\206$\275\014\244\306<\210\361\312<\025YU\2725t\377\274\016\007\'=\250$\225;\'R4\2746W\247<AQF\275\333\031\231=\355\271\"\274I\023:\274\2114\001>pW&\275\376\260\210\274nu\036\274-*\343=\302\341\264\275I\326\037=\202\203\021\275\036B\346;\232y6\275\356\036\300:\373\243V\275\210\235\020<\310\342\312\274\033\006D\275M\2046\275\343\252\265<&\267.=\352\003\301<\333\023\346=\376ue=\300m\220=\r*J\276g\374\263\274\026Q\201\275\251\353\014\276\005k\323;_o\205=67\345<\300\236r\275\233_7=\026\314\010=\006\321\202\275\337\310\324=\332\032\263\2753\344\371\274YK\336\274\205\365\336\274\n\371\r\275\"J\277<\261#\272=E<\247\274\225\267\323\27428\326=\327Y\347<k\355>\275\275W\360<[\366\205\275\321\337\270<$tW=\203n\212=\322\223\342\274\222\242\035\275\014\215J\275\241\340\343;\365\002\003>\020@$;\324\315\271=\361\0074=!\364\224\275\247\337\334\274\203\347H\274\nw\276\2729\t\356\273\3079.\275\021\240a\274\265oD=\367\204\352<\312/2\2757\3504\275\367\032\227=\304\304\007>\201\215K\275\251\214\371\275\215\333\030=s\212\345=\235i\321<\217\301\367<N\340\020=v\226\244=7\311\177<V\231\340\274\222O\242<H\245\344\274\3710\270=\215\252N\275\226\307\331\273\222c\250\275\355\305\026=\200\207\217=\270+\320=\272\320|\275\272D$\2754\346\245;\037\212\353\274\024\342\034\275\230\243\214\275qr\n:\321\022\213\275\222B}\275\030\323\"\275|\031m\275_\233\235\274\030\210#\274\323U\007\276\241RJ\274\001\014\211\274\200\372\221=-\017\250=\322k\354\274\342\035|=\323\334\233\274\035\211\234\275I\300\036=\300\250\314\271g+\006\274\222\251\267<\300\313\314\273ms\221\275\t\020\355<\273l\262\274^+\232=:\371\327<\345\317\223\274\334\221T\275\347]\216\275\\\243L=\212(\233\274\267/\333<3\036\020=\233\2505\275\351\326\216<(\241\204=\211rX=\373\254\226\275\022\371\302\274\3564\323\274\177\002o\275\332\352\243\272\255\227E\275\314\017$\275}\264\212\275\214-\316<\210\213\010\275vGM=\276\313\212=\326%\243\275\217\317A\275\034`\022\275\003\254\254=1\342\270\275\277\215\333\274\254\313d<\020\223\322=\223>\301\272\003\345\031\274\305E\236=\014\234\202<s%\202=\022\330\202\275 \375A=6\216\215\274\360tW\275\323\013\216\2736\212\221\274Q0!<{/\303\275\352\324\005\276\330u\370\274bI\247=\270\t\027<a\367\221\274j\216\214<\007\222\212\275P\326\037\276Nd\327\274\214\314\321=\021\'\343\275\202\020\327=H\271.=N\252\311\275\251\033\313\274\362\372\347\275\000Xs=uW%\275\233\026\363\274M\233\214<\321\243\215\275\213\177\244\275x]9;\351\220\333<(\315\344\275\363\353\007\276\226\345t=\006\323\370;n\005*=\006\201\025>\253\345\371<\r\346\021\275\222\234\216<\216\231Q<T\356r=\216l\006\276\221\243<=\034\311\206;\n\232?=\333\350\362\274J\033\206\2733\227\331\275d\222Y\275\3029n=\001\351\032\2761\023==X\276==\000<s;\316S\t=\372\233\203\275\367\336\242\275in\202\275,\240\203\275\335;\222=\005e\257<#\373\272\275\005m\017=\224\371\261:\327]\210\275\265\231\200=Y\350[\275\223\001?\275\313\202\004\275!\310\211\274\331\240\275\275\345\251\326=\303\322?=\200\256\207=\335\177+\274\014\031r:\205\275\260\275\234\352\325<l\244\225\274]\253X=\262A\201<\024K\266=\306\004\362;\252^l<b\375\376\274f\263\034\275\324\021\216=\014\321\205\2738\027$=\202\332\234\275\321\256c\2749\324\227=F\355\016=\311K\217;\237p\375;Z*\205\275k\327\210\2746\212\251=\206\304V<A\241Q\275\277RR=X\276w\274\346\025\026\275%\352\235=hJ\201\275u\204\t=G\r\223\2748:\216=T\203\014\276*s\351\275\337\241\021\274\253R\266\274\236C\220=\307\n\210=4^\230\275x\006\177<Z\r\237\275\301\212\216\275\337\365\222\275\013\223\264=\007\352\227=\220~\207\275\376E\372=K9o=.\200W<\222]\000>2\350\372\273\303e\273\274\344\300\035\275R \211\274{\246\331\275^\305\371\274-&\317\274\306Qi=\323^\010\275\301S\224=\334\024h\275.\302\326:/\0024\276\372f\346\274\3226\266=\212\323\377\274Wh\234\274\027\317\275=\320#\220=q2\231<Q\374U<\363z9\275>\007\225=N\26179\231\000\201\275?\222N\276(\031\277\275\003\304n<\220\370\346<DFo\275\202W\304=\235\254\337;\363\275v<\372\324\231=\001\334\273\275\206V\243\274#E\255\275\321\274Y\275c\317]=a\323\364\275\232\344\256<\317\035\"\275\324\223\300=\240\020\247\275\322t\253<M\370\263=&\006\231\274W\272\026=\327\316\322=\025\305W<J,I=\263x@\275\301\235\030\275\376\262\016=\037\274y\274\024P\205\275\376&\256\2750HX=J\374\201<\024\312\260\274V\205\251\275\214\353\252=\207to;\361\270};\374\n\203\275\2148\231=W^W\275\246;\030\275\316\307\203\275*O\264\275@\013\206\273:\366\311<\013F\324;\364\331\317<\217\266b=<3\211\275\325B\377\275\031g\322=\221\025\223=\323\007\223\274\275\017\227=\372\215\223<\341Z\327<Ek\261\275\255\234\246\273\000\373\007\275\252<!=\024~\321=\273\366\320\275S\210\266=MB\001\276\211Cn\275.\213\221\275\200\204\207=\3136C\275\2545\204<Mv#\273\301\274\214\274\274u\302=\204\177\210;\370\247\316=_7\301\2749a\300<|\013\232;\013\277[\275\335P>\275W\324\003\275\301<\366\274T\254Y=\372\321B\275i\200\311\275\323\020m<\343\346\271\275\025\276\212\275C\274[=W*M<\302c\261=\004\025\236\274\"\202\371<\375>\302;\211&\246=\351v\310\275\336\337\'\273\254\013\360;\240\210\005=o\014<\274lt\244=\350\037\026=\256\177z=\031\333\304<\302\345\231\275\261T\207=\271\021%\275\316I\231\275\306y\013=N\360#\276.1\256\275\025Z\235<\t\236\335=\341\004\024\276\263\266\305<\304^\307\274k8;\275r$\206=\252\362\004\275\363\337B\274\004\013\220=\035\3415\275\265\201\237\274\365\214\361\274\rH\"=f\251\002=L\2579\273\"o\254\275k\326\177\2755\214\375<\003c\250<\177)\016=UHF=-\264\253\2755+\037\272O\2438=\301\222-\276qH\252<Z :=1!\203=\272\342*\276-4\";-I\201<!\266\272\275\243\200\032=i>d=<{\233<)i\310<f*\245\2758\323\317=y\360\363;\352d\271<\216 \326\275\215\320\342<\266\022\207:\306D8<\204,n<\226sT>\340\026\275\274[F\271\272\034\360\001\276\025\024\203\274\235\332\321=\242ZA\274ZJ\257\274\276>S\274)h\'=>\025\315=\223\277\200=L\345{<+\222\215\274\364\251B\274Y\342\217\275\257\374\027=\342\253Q<\222\225\203\274\\\357\201\275G\3564=]\254\252\275\0250v\275\362\354c=$\024\306\274\355\354\203\274\323\010\034\274\357\002\001\275 \246R=f\t\227\275l\336\366\274\360\3752=\216\371\227\275D\306\251<\300W\222\275\367\246B\274\362\276\207\275\3549\037<\237\337@>\332\230\232\275v\240\024=\212\302o\275f`\301\274,\372\024\275%\210\346\274\"]\203=\246\302\264=\251\373\016=q\235\026\276IS\237\274+\257\017\275\353\307\210\275;\244\024\275v\023\255\275\273\002\017=iH\206=\363\322\016\275\037\245?=\310\027\223\275]\346\327:c\240\021=\230\215\267\275\267*\244=\005W\325<^:o\275\371Q2\274Ve\t=\036\004\031<\276\255T\275\342Eu\275\341\365\234\275\331\006\326\275\300\360\235<\240\033\330\273W%\370\274\354\000\311<\t\344\334;\023\202\230=$\376\341<\352\370\322\275\007|\001=(?\335<S\335[\275G<)=2-\263\275\315\261\271=Y\304Q\275J:\016=\337$\255=\016\301\201\275l\305\202\275P%\317=\036d\337\274\255\206\222<\t\306\260=\017\341\272\274\253\313\336\274\010:1\273dZ\230\275\321\226}\275\233\330\001\275\344\215\017<\251\007w=>\324>==vG=\373\010`\276\037\322j=\225!5\275|8\273=\014\032\216<\t\"\360\275\350\240\022\275[\003P=q\323\037\275@\345J\275\034\360\362\274\364\332\306<\364K\032=^v&\275\306T\217<\006\033\276\275\230b0\273\244\261 \274\306\252z<LS\237=c^\240\274\212D\n\275\022!\201:\313\230k=|\347\314\274\014\213H\274f\3540<\022N\323=\031\317\355\275f;\351=\321[\203=\264\316X\273\267\334%<\331\314\371<qR\305:\211\206\321<^\017\022\275\222\351&<\212\343\014\274\031\2623\276\273\300\301\275\303z\255\275\276v#\275\203\227\275<\222\177\027;\216`\260\274\224\232\214\273\315\303\230\275\353!\237=\215\235\332:zOy\274`62\275\235\212\245\273)r\243\275T\006q<M\207\017=\252\025\020\274`\244Z\275{\233;\275{:v<\320}g=\365\241%<\305\361\003=\347\277\331\274\331[(\274\371E\333\274\3615\032=\177\303\225\274*\276\332<0\232\316\274@\035q\275\335\302\306=\261\327\203=r\307*\273\\F\253\274\271\035\\=9\243\022=\327DO\275\\\232N\275\034\352\016=\r\026Y\275\254\340\217;I\275\320\274C\"\035=\033,\233\273\303Y\033\275+\t\006\275hU\367=y[*\275\313\264\263<k\205\007=\356\311\224=\344\216\212:\027[\001>\233{\n<\225\242\377\275\372\034\227=\340\225\3159N\344\266\274\234T\224\275rG[<\257\211\274=\334X_\276)y\230\274 \341\312\274`\274\245=\036ej\275R\250\245\275Wg\265<\230\274D\274\344\237\013=\013\010\237<@R\263\274\267[\312<W!\003\275\312\t\034>\320L\222\275\376\376\027=\340x\212\275\327\337C;\256c\202\275\021\177\240<;\304[\275\2450\215=\342s\355\275\346o\016\276/3\356<\005G\267;\310\237`=\333\370\r=F\356\201=\023\374\331=\262Mh\275O\375\217\275(\'\337\274\034\307\032=\361\331\213;\226p\207=\024!*\276\214D\034\275bY\310=\300\005\313\275\037x+=\2676\227\275\214\017\212\275?%\316<\244\0209\275\315\204=:\266\357%\274\310\266t=\326\006\226\274\371\006\022\273\271\242\350=\315\324q=\211p8=\32155=\341\374G\275\3641\014=\216\322\212<_;W\275\346(A<\035\232->\202\272H\274\364q\017<\363\307\340\275\202Q\207\275\023?\013\275\024\251\250<\311}\"=Y\3346<3\313\301\275\322\275\2229A\321\334\274\0234O\275\310$n;\3645\000\276\356\323U=\376.8=\256\334\205=\323\005\300=\353\233\216\274O\236A\276\210\215\000=\037\245\006=\tM\366<\225\212\230<R\345\247\272\000\023\320\275t\337K\271\205\331\341\274\204\265\272=a\270K\275\204\250\007>:\310\010\276\315\302\014=\027F\372<\336\315E\275\032\257I=hdm\275w\356\300\274\324/U\275\360\306\'=5\202^= \267\014\275\255<\264\274+j\376<\t\254\036\275\232\260\034>0a\362<\33225\2753h\025>3\343\311<\030\374h=\330L\307\272\263j\367\274\374\244\255<\340\275\n<x\351\256=Mm\336<T\265S\275\311\310\\<fW\277\274\241\351&=\036\' \275I\256\311\2745\231$\275s\217\343\273\033O\253\2741\232f=H\267\251\274\017\002:\275\013\312\363=\232\241\024=\202\243t<\342%\212\275\305\237\303<\226\227\270=\230W;<4\230\025\275\320^\264\275\353\325~=\0052\230\275i\370\211\275U\274s=\213\305\341<\3416B<\263\232u=\030\017a\275X\262\325<\'5r=\353\220\313\275\200\235&<\276U\201\2740\314\005=\275\033\325\275W\312\266\275\371\354\326\275u\261\255<\375yb\273\355\341\362<\257\024\230;K\n\010=\344;\014\274V\237\242\275\227\031\233\275\367H\037\274\314\374\352=S\002[=\001|o\275F-\240=\245\000m=\263\327\303\275\356}t\275\243\314\254\275\361\215>=U,\017\275\037)\243\273\314\306\003\274q\265\355=\"\205\263\274\322\314A\275\222\027@=\037\353\335\271D!\000=s\204\223\275\027\217\351\274\242,!\274\023\251;=\221\265\376=\356(M\273\022C\220=E\261\230\275^PM\2753\224\231={\312\001=\037;\333\275\375\370z=\243s\205;\016\022\224;\335\341\313\272X~#>\330\220\025=\377\366\244<\277\332\251\274\225\353\020\275\265\254\221\275\253\306#\275\344\273\257=\341L\002\275{s\255=i\274\363\274=A&\275NsM\275\023*\242=\325\233\020=v\222\265\274\357\036\202=6;\221\274Z\202\261\275\205Xr==\367\205\275Lo\334=h\346\202\274Z|\363\274\214\252\375\274\250\305I\273\326!+=Y\006\200=\232\271\004=w^?=eri;\\\232\321=\003v\274\275\022\254i=%E\207\274aZ\234\275\010j\260\274\346\020;\275\336\362#<\245\340g<\305\266`<z,\363<2n.\275;\354Q\275\"\"\254\275/\301\264=+s\246;\335\214\355;\003\243\361<N\370\220\275Z\310\253;\004~\224=U\014-\274\022d\231\275ja\224\275\037g4\275\317\371\222<k\230\357=\221\201\310<\231\274\274\274l\246n\274\357\325S;d\342\270=\003\230\235<\205CX=W\207\316=\223\310`=\177\310\025=\r\3678=\376[\'\2755u\210=\257N\262=&\222\207\275\270b/=\246\254\267\275va\241=8\262\205\273U\327\337;\216|\034<\327\241M\275\310\300\354\272\243\204H=\276\222\372:t4\035\273\255\272*\275\235\027\306\275\277\266\242<?\350\223\275//\243=X.v=1\314:=\362\370j\275\210Tt=\354\213\366<sh\021\276\2032j=\331\346!=?\314\272\274_\003\301<\234/\000>\357\220d=`\357\360\275\304\267\320\274_\305[=\310\351\300;;e\274\274\251\312\033=\207\030a=\250\363\316\2758wY<?\177\375=-LB<E`\276\275\366\327,\275\241u,=\363BW<\232\023\002=B\362k<\262\010}\274\'\027\302\274\2731l\275\037E(=\312\224\360:PQ\314\274\225@v\27506\021<\243\232\200\275\001LK=R\260);\324\231/\275\350\240\264<\241u\326\274\3666\366<}\300\337<\301\265\256\274z\037z\2757\212b=\326 \r>\330\251T<Nl\251=G>\260\274\240\010M\274?A^=\276z\274=Z\261B\276\275\301\357=\021\325m\274\337\355\021>:\324$>\016\366\220=\343\205\266\274\217W@\275\263\022%=1\3133=\303FT=\007>(=\326\305\311=baZ\275\367}\266;$\235\267;\260i\212\274Ot\202\275!\207\246=>{\021\275lj\";\376_\272\273\225y4=\251_W\274\234\245;\275<}w\274\374\277\211;\257\206\270=\325f\273\275f\324\277=\364\254h\273\033\266\367;\242\360\005\276eb\232<\266\311\243\275\360\010%<\037\321\001\276\312W\203=\377\273\331=M&\264<\013\250\021\274\'\005\014>\3442\005=\207\275\256\275\353\032\227\275\364Q[\275\027\206\233\275\003\275+=\247k\225=\016\257\311\274\252\334\246<$\302\265\275\037\004,=\202\213I\274\355\t\257<\350?:\275>\273\330\274.\344\262=\267\036\317=1<\274\275\246\020\013>:!.=V\301\367\275o\230#\275\243bT;\023\033A=\331\320\255\275\r\311\n\275\350\243H<\207Z\203<Lh\372\275\260\320\253\275\252\336\212=\032x\365\275\264\260\224<\371\177\373<\261e\243<+\350\016=Kbi\273\326\0335\275\246\245!\272@\331\205\275\24034\275q\320\"\276\357\007\205=\374\244\223\274\263\247\243=\214\312k=\217\010\034\275fm\313;N\377d=\020.\217\275E]F\274w\334%\275\323\277\260\275\'\215\316\274\210\341\324<(\031\001;]\345s=\345<\245=\351k\264=\223\275t=\302\375\324\274z\206\033\275\3364\353\275\214\022 :\262\205w\275\332n\265\275\334R\034=O\366\357\274D\253\262<\214\032\260\275\226\364y\275I\325\311=\231\375\324=\250\227!\275\357\353>\275&\304\274\275&\301\223\272E\352\374\274\366\360\217=\246\022\312<Q\366\302=\020z\002<U\214\304=\177\341y\274]\005\274\274\006N\306;$^\377\275U|\206<!R\236<\234\256\032=\035\260\244\275vf\t>*\336\001\275i\202\346\275\262c\n\275&gN=\265\302L\272\3734\227=\304\352\263\275\334\221;\275M\347z;WL\027\276\341\313v\275\307c\255=\306\333\242\274L\304\373=\262wh=\315\3561\276\335\203\376\275\\\210\306\274C\002M\275XX\237;\273\005\202=@\360T\275\013T\037\275^T\247;\341r =\347\307\264<\355|5=t\313\016\273kOM<mr\001\275\261\337\267=\235\240\330=\305W\221\274\320`\203<\374\323\277\274YU(\274\306\031\004;/|\270;\316\241b\275\007Wp=+\303\001=\351\272\361\274\354W#\275;>\371\274:`\271\274>+\251\275\274p\313=hc\322<t\255S\272:\373\217=\257\271k\2759\261\212<\021\337_\275\260\250\267\274?d =\367\325\037\275>\360\255=n\242\021<]K\353\274\362\217\204=\244En=B\271J;\356\323\210<\245S\032=N\215\001\273\224\330\314<\261p\367\274*\n1\274x\363\230\2753\265U\275\226wt=v\261\033>T\357\371\274\037\317\034<\002m\214\275\237]G9\243\240\271\275\221\022\221\275\033\004\324\274\033\326d;\376\0357=a\377\266=\331\202O\275Enx=I\255D\275\327\331\232=\265x\215=\302h\277;\275\370\016>\035\216 =\326\n\307<\"\324T\275\234\222\023\275l@\241=\223o<\275\260\272\004\276\356\222\026\275\221dA\275\354\253<\274v]d=-\343E=RA\343\274m\221\372\275\021\276\272\274\256\034\332\274[>p<a]!=\226\213\001\275A\341B\275\025\231\240\273n\3764>\373!\364\274\304[5=\320\247\374\274\026Y#\275\234*\244\274Yn`=\026\024\201\275\341sK=\322\025\027:\022\221\303\274\306\2630\274\346\022Q\275\023\271#\276\371(7\275\224\177\260<N\262\214\274\372Pe\274o\336,\2755\355\241=\200\233\211<\327\272\025\275I\320\007=\2441\355<j\241\215\275\031\223\207= \324c\274\231\310!\276\027Q =\205\267\311\272)A\204\275B\341\247\274BEP=\243l\242\274\331\306q;LG\253\273\003q/\275\327\030\031>=\303V\275\331)Y=1Y\017=\331)\303\275\367\212\345\2757o\241;\241\024\245\274\342B\243\275Mk\353<\362\213\375<5S =\023w\223\275F\332@\275\027\353\002=F\202\357<\270\025\000=\247\330\223=\025\273\312\272X\177\376<R\316s\275aKv\275\376\334\246=\343)[<\023p\001<QK4>\321\244s\275\371\234\266\2751B\251=h}\304\275ejm=\245\rn\274\306f\312=\231\210\025\274H\to\272(\213w=\325)w\275\374\035\022>\002\265\255<\310st\275\246\212\254<g\307~\274gx\265=?\\Z=\375\002\305<\010\247\275<{-\346=\376\007\231\274\316?\202\275+=\254=\026n\306<X\007\031=u\027x<\273\371\026\275\316\323E\273\227/\362\275Q\205\264\275\013#Y=\356\243l\275\200f\207<\006\356\375<\014\202Y\275\357\301#=U\002\235=s\221m=\t)t=\000U\232=\017EC=\017\004\354=c6y\275\207\370\315=\363\357\245<.I?\274/\334\007=36\367=\262\321f\2741\320\305\275\342\246\301;\331\362;\274\244\321\006\275\"\177y\275\216\206`<\020W\314<\370`\256<\364P\371=@E\t=A:\364<\247\034\206\275\317\345\323\274\376\233h=\2563\226\274\301\216Y<\270R\251\275)~\301\275\002\344\003=]\374\205<!/{;\001\311\212=\342\021x\275~\245\177<x\214\344=H\217\233\275\374v<\275,\366\310\274\n\247C\273\000\271\304=o\372\207=\313\316\035\273\365\272\204\275}<b<\256\\\336\275Q<\264=\343\225%;\222a<\275m`};\005T\004\275<\253\207=/\350\241\2757\214 \275\"\224\002\274\325\233\251<\177\201-\274G\276K\274\010\260G=r\023\004\276\255\323\013\275H\340\220\275&I\251<\205\225\313=KT\002<]>\204\274\2127#\274Ai\017>N\202\272\275\003<L=\357-\246=L\240\261\275\270\364w=\327\357Q\273\212G\031\273\331\023;=\244\r\177\274]/\271\274V\243i<\037.\343\275\272\336\334=\023F\312\275\226\003\301\273\367\313\327\275\271\001-=\271X\303\272de@<\206xW\275\000zL\274\354s\317<\256\336,\273\027\"b\275\265\216\265=+\257\007\275\007\222}=\322\374&\276m@M;\031\0148=p\271\300<\244B\336=\2249\206=\205U6=\224\344$=A\266\236=\035\333\004\274\023\004\327<0\000\232;\003\230\331=\n\222\302=\021y`=\224\271\332=\020\321\372\274\016\003\367<\310\210\217\275\377\3559\275\223\270M<!\345\212\275\263\324\207=\363\345\">I\222\002\275\316\301<;\244,\233\275\252\000_=a@\017\276\021\357)\276\221\001\201\275\341WE\275\272\345\235=_\021&=\374\246\213<\337k\241\271s<\225=\251\234\221;M\362\202\275\304]\203\275\366\210\234<2PO\275\311\343/\275\271r\021=\344\240\t=r\021 \274*\024i=~\226v\275\321\276q<\371\203\333\274\301\247\022<\2048^\275v\224*<\215\255`<\326b\240\274o\323\254\275\302O\224<\255x\217=\002\334\245=\255|\276=b7\204\275d\227\034;\225\357\266\275\256U\024>f\023[\273Xb#\272\220/k\273p\212\001=<\014\027\275\265\023R\275X\003f\275\n\236\001=\314\213\231\275\276\253\324=j\340\205\275\342\255\326\273\201=\331\275\362l\365\274\035{\315\274\371\362\225\275\216\246\334\274j\242\032=\035\305\220=N\225\355<aFc=o>\367\274%\203\036=\032\362\257\275\207\232\033>fm\217=\032\232\323\2747Z\214=A]\034=\276\244T=`\033\266\275\233\tf\275\251\360\003\276\351B\325<\333)v<|\352P\274\237b\372;\\fn=\202\016L<N\031?=^\316$>\243\0214\274\224\271\266\274\327Bt\274\327\350\032\276V\267\276=\265\276\257\275R\330\255\273\223\377\246;\010EW\275\030E\017\275\360/b=;\337e;\347\307g=&Q\351\274\234\265\272\272+\031\320;1\222\014\276\254\305\360\274\021F\231\274\272\243\200=$\036\224\2732\223\236=\262\322\253\274zo\343\273\326-\321\271\301\243\024\274[\343\n;\317\236\211=yd<=\177\214v=Z\234.=\007W\243<\334\333\332=\\\314\006=V\314\321=\231\031\270\275\276\375\300<\300\372\311=\274)\205=W\202\346<tn\330\274\252\241!\275 Lt\273\021N\225\275\305m\013>\377\001\330\274\310V{\275\032\002&=\242\351\261\274\342=R\274\354\306\026\275a\363\217\2758,w=\250\277\261=\27459=\232\266\216\275\245\256\207<\253\273T\275\305\246\207\274\312\241.\275\221\313\251=OX9\275\331\325g\275$\347\305\275\2679\237\273\222\022\030=\032\007\244\275\334\301\267\275\251\257\366<\333k\365\272N\306\306\275`\246]=\023\312?\275\3278Z<9\365)\275d\346\023\276\234p\325\273\312\267G<\323\347\277<\003\354\364\274M\250*\274x\364P<\351\313\207\275#\270(=I[\203<\3679\327\274Y\253\005<\020\336\334\274\221\021\204\275+\300#\275}M\222\274~r\233\274@\225,\276\005\220g<\243\332#\275\307\224<=\022\251\242\275\215\031\216\274\243\234\327\275k\217\225\273\034^\000>\362x\203=W\321\260\273\016\246\220=\243\271\241\275\311GN\275\313\200\211<\312] <kJF\275\204\223i\273z2I=\314\226\205=\364\021\306\275\314v\033\275\317\353\325;H\322.= \311:=\225(A\275\3365\t\275G\rT=\342\375\324\274\243;\216<O\303\230=+\247\024\273\271\212\300=\213\3444\275\004q\260:\366\341o\275\000BT<\353>\"\275\273\266\007>V\332\000\275\353Lt\275\224?\273=\004\025\200\275@\265\276\275\217\225k\274\225>\026<\033\027\275;\023;\322<\336\r\000\275\306\262\r:l=\346\275tDC;\030\276\341\274\261\266B\275\277X.<\332G\262<\331\340\004\275\'Q\322\274\314t\334\273\3415\200=\027\024\346<)\231\244=\212Q\215\275\324\360-\275\3356\256\275o\330\246\274\247\325w\2756\314o=\207\255\215\274\320\n\203=m\232\233=(\275\341<V\014\274\274\303f\331=\013\"\262\274\003\307V\274\345\331Q=c\325z\275\362\330m\275q\210\032=\277 D\275\275\232\302\274\331\245W\275\317\020\272=#]\250=\361\230o=\360\007h\274e\273\207\275\017s/\273v\233><\303fc\275\264m\244\273w\362\225<\264\245\267\274\231\234\022\275\215\350\361<5\002\376\272^`\274<U%\230\275ik>\274\006\272C=p\2730\275\213\236\303;w\326\327<.0\244=\034i\214=\336]\265\274\222\021\352;\t\342\244:f \375=\033\005\270\275gs\264<\203\225M< \224\220<9\365I\276\300\036\204\275\016\204 >[\236\205=R\207\210<\032\323\377<e;~\273\003\003l\275|~\360<x0\361<N\257&=\242\267\375=\246\251\276<\232L\013\275,\307A\275i\206\375=\347/\247\274\210\363k=\235m\026\275\270\261\000\275\037\307\">\352/\311<k1\2259\324\276=\275\236:\253<\325\216G<\352\304T=\230\2747\275\307\315&\275\302d\354\275\342o/=\302.4\275\376y5<\2518A\275\240\372~=\257\212\237<\373b\225=\333\273\026=r%3\275\364\272\032\276;\334t\275\366<\331=|\203\031\276\361\334\017>\337\2332=g\212\030>l.\331<\220\276)\275s\361\360=\3155\004\275\336..>Q\351\310=\n\231\200=7\263\327=\006\031\024=\001\003\303<k\036\213=j\334\310<\034\240\324=e#\"=\314\2118>A\212\242<\216\370H=\256\300\335=\243\214\004\276\304\315\035=M\322,=\233\226\005\275\267\357L=\177^\340\2756\272\231\275\345\341\274\274Z\260\234\275^\345F\275\243A\035<\203\n\273=\246\262\021\274\351\030 \274\261k\200=6\237\323<\305\256\017\273y\272\271<\223\214\305<D\n\356=\272\273\002=]\303D<u\230\225<\020\033$=\t:\224\275gO\r<\203\177\265\274\272|m=\246\003\373<7\250\352\274\026-\316\274\017>\234\275Kt\200=\313\211\266=\'\354\354\274\275v\324\274\370\201\260;\301\202\311\274\212\010\013\275\014\035\304\273\232\254\362\274\230\213\312\274!\277&\275r\320\002=Ys\277\274\017\227\223\275\331D\002\275\375\3259=\326\022^<U9\355\275ZG\225\275\212\231\270\275\241\256\316\275O\331Q\275\246\345\232=\r\322y\275\254\016\036\272\220\032!\275\302\270\243\275\321\006\301<\313!\305=4mm=\027\3015\274\303Z\323\273\270.\274\275{^\031\275\002\354\317\275\024F\036=\375h^\274\257A>\275\321\232\335\274\313\274\003<0\223\007\275r.N=\227\346\255\275~\207\304\275\205\327)\272(\343\222=\206\001\273\275.\267W\274\321\246\356;`\245\206\274r\313!=\240# ;\303y\203=kc\325\275\020l<<P\2121\275p\260\236\272\223\\\315=\332a\225\275\250\306\004=\335$\025=z\310\353;\355N\251<\274\303R=\2378\n>\361\251\340\275\020\204+=\313\306\031=w^\227\275\n(\323<+UQ;<\307`=u5\273\275V\352\352\272BU\n<\256%!>\022\224\337=\257\341\223\273X\356\224\275\324n\242<\362T\355<\204lQ<\232\371\252;\306*\014\271\322\031\262<\252(\301<\343O\337\274\004(\004\2767\242\265\275\'\263\312;Y\004,\275\"n4\275N}<\274\303\372\006=V\230\233=\006\002l<FD\260\274\262W\223\274\001\367\240\275\021\242\234\275\351\030\200=\3732\360\275?6\312\275O\003\235=e\224\\=+\234:\274\256G\026<\346\017O=\245O\200\274\233%\330\274DK\224<Tv\305\275\344m\302\274\207\237\000<\002,\326=,\010Y=?\255\331\275\245G\236=F\202\246\275K\n\354<\241\333\256<\300\255J<\230oH\274\2611u\275\203\322\221<\370\260H:Z\253(\275\035\014\224\275\374%)\275~\357\304\2752\237\004\276\365\231p\275\356\243J\274\364\346I\274W\312\266<\315j.=Cg,\275\335\221\357<{\236\251= \245\373\275\344\030n\275\232\362\267\275\342L\231=O\203\221=\360\000\220=\241\"\264=Tw\352=.\207\344\275\345@\307\275\210\377\233\275R\'^<\373![\275+\256\037=\007\311:=\2177\252=\337\346\266\275\305\355 \274u\310#=\245F\327\274\201\276\3168\372\323\205\271\024\347.\274\030\242T;h\233\025\275d|\232\275YnT\274\377\305\007=Hx`\275\030{0=\326\374\207=\370G\275\273\314\355\207\275\321\313\227\275\331\315\346\275\300\241\316=\210a1\275\254\230\344=\020\230\337;L\206\205;\366\337S;\232\325\332\274bMt=;\345;<\337e\323<{+%\275\"Qk=\006\0361\275\034\315~;_\260\202\275\315\234\267;\030\006\223\274\355\300\266\2749v3=\020\343\220\275\213\202\326=s\t\016\274\320r\214\274\343G\032=^\3447<\312\236\212=\205\261\360<\224\272\247<uE\242\275x\326c<\344[\\=\004ic=\301\334;\276\010\261\275=\323\023o=\303\365\270;Y\027\300\274u\301h=?d\260<\322\261\304\275\221\340\227\272\324\\!\274\016\342\226\275\221\225.<\330\346\300<\352\365\010\276P&\333=\025o\200=\233p\314=\267\347\026<\302J\223\274\221\022\022\275K\350\332=F\010.=?d\206=@\353\243<\036P\214\275\377>\023<^d\002<\370\n\220\275\223\000u\275\267\220\273=\310\341$\275rEm\274\201d\231\275\342\262\342\275\002h\356<)\270\245=\245\nj<\200\264%\2750\374\025=\177\007\001>\016\0051\275\033S+\276\363id;\033\270\237=\3525\025=\370\026\202=\354\217j\274\376\247\327\273x2B=\022\210H</Zy\272_\360\304\275s\225\236\274\356\244\237\275\237\200\017<\360\206c\2759\324_\275yd4>:\351E\275 5\206<\002f\262=\244\272\200:\013\344\364\274\021\260\013\275\3112\032=\277W\333\2747\213\004\2767\3447\273r\314\226=\024h\334=6\251%=\325IK=NM\247=$qm\274v\266\215\274\t\375\275=\356\326\221\275\225\210\235\275XR\240\275Am\022=\361#\305<\002\004\261\274\356G5\275\251<\212\275\215\033\007>\362\363\245<k\225\010=\347I\330\2754\222\205\274Nj\203=\340\340\030\274}\226\272;\200=\200<JF\200\275\241\316\032=U\341\215;\371f\230=\244m\300<\341r\'<\245\r\325=\273\316\273=\310\n\023>\275\305\265=.)\263\275\206\372$\275\213Q\316\274?\340h\275#8=\275\014\"\266;\323\277 =\320\3072=)\034\271=\265sT\275i\213\006\275\013f\206<k\014\036\275\245|\200=.\376\243<=j\204\2749\256\020\274\345\337\246\275\353-\321;\335R\032\276\007 +=x\327\235\274\340\3109\274\027.;=u\024\353\275\255\324}<\203\2103=qC\237\275\312k\376; \232\\=&\273t\275\203\354(\275I\317^=\nd\310=>&\200=\245\224\347\275\374\370_\274\"u\237\272\326\235\307=\"^\006\276\216\027\204\275\362h\277\275\006\3464=\200\256\354\274\331\215\037\275p\010\222\275\263w\032>\215u~\2759\316S\2752\275\023\275\244\301\302\274\320$\207=>\255\375=\215S\322\273\'\263\206=DC\001\274\007\345\371\274\211N\350<+\235d=\245\354.=\233h5\275\177\262<\274,\214\013\275\224t\233=\312\332\005\274\245\322\306;\365#\245\273\3017\032<\307=\206\274\320\006\224\274k\214\365;\014\247P\275\315\321\205=K\253F=Sb\317<\254\3765:\330\324\272\272!\276W\275\264Y\205\275\025\036a<\203Z\263<\320\330\237<\326\261-\276)\362N\275\302\316\006=\342\210o=\024\225\301=m\270\254\275\243\022\202\275\325\004\206=\352$\240=\002\\\336\275\315\234\007\275\376\030\300<?J\361=\207A+\275\346\021\351;\004S\236\275\235\013K=\376f\342\274:1#\274\323x\313\274\352\323\021\275\265n\267=>w\343\275\3734\212\275\344\271\262=\377\3736\275\361\242\306=Z\244\310\275\252\315\247=h\036@=\313\355\213\273\370I\374\275\253\203\224=\1777X\274\020\352I=}3\320\275K\327\204=\230_6=\356\213\312\274_\213\217\2728\277j<\273\375\315\275\2428i<\251\323\024\274\037\034\304\274\272\207Q<l|\247=w4F\275\211\026<=\360Y\223=\346_S>k\302\232\275\272\370\241\274No\207=\007n\027\275\370\241\214\275\271<O\275\013\034\202=\264\231w=\016\370P\275\341\r\326\274\227\362/=t\271\032\276\002\252\366\275\t\313\317\274\251D>=\026\306#<\235\013\343\274o\360\345;\362\312u\275\223\270N<\346\305\206=\357mH\275)%\274=s%4=\223\357\203=o\r\002=\021R\262=\345\366\311\274v\366\036>\364\027\207==\270\221<\017\261\346<\002\036c\275\313Sv\275\202\034\374\274\263,-\275\024\016\322=]\354\276<m\333\220\274\257 \240\274\360\300i=PW\201\274\217\315\250<\302j\313<\2146\316\275#\006\324\274\266\256\244=\236\037\024\276\027\251\305\274\325\220c<y\317g\275\330\367\224=`\326\330\275k7X\275\350\335w\275\022\265\356\274\241\212F\2749\327X=3\367O\275\022\253J=\264\345\210\275\236O\037\273j\243\216\275J/\334\274\033\177C=j\225{\275\312s\223=&{\227\275g^\013\275\t\304 \275\256\355\336<\303\365\251<z~\367\274&\r\257\274\272\313\352;I\230s\275\032\350L=\004\254c\275\360\275}\275\342\024\215=c\345\306\274\373\225\200\274\362\030~\275^\234\346:\242\314X<e\215\312=\323\321a<\222\010\277=~\342(\275U\177\317;\310\202\332\271\366\261m\274\321\256)\275\326\230\246<\n\247\017\276\230\363j=>\361\353\273uS\345;\267\365.=\202lZ\273\277\236\223=K\270\341=2\271\270=\322\033Y=\362$5=\331\216\r=[\215l\275\220O\336<\261\376b\275*\375\201\274\245\312\362\275+\335\257<\225c\202\275\327\234\332\274\315\"@\274\271\313\360<x\326\321\274\314\000\244:\270k\211=1\303}\275\330\220i\273\235}\311\274\372\331\036\276\030\261\017=\202\006\224\275;zV\275\362[8\275\230\235\031<\347>\272<\234\317\352\275nW\263\274\233os;\355]\266\275\321\027$\274\314)\237<\311\'U\275iX\200\275\245)(=\243\0045\274\304[\324\274\322\222\242;N\237\274\273_\302\000\274\321\326\206\275Q\345\235\275up8\274zs\255\274}\334\023\275\002 ^\275\024L\203<~j\214\275 \3109<\224P\231\275V\261\324\275\367H\017\276\177F\006=\301\036\321=@\313\247\275\'\250\255<1\2513=\373s\021\275L\222\017<\227]\224\274G/\273=\222n\223\275C\202\361\275\245\263\245=\245\374\337;\2335@=\370KK<\376Q\306=\230c\272\2747\215\225= \271o<\340==;\244g)\275\231,\242=\241\'\212=\351\275\007=v\327S=\357\336\024\2767\013#=Z\336\245=1\002{=\255J\004\274G4\323\274\000\010<\274\220eh=\n\034f\275e\024\255<\227\265\262=\203\252j\275\206A\201\273<\203\364=\255\010\264=\203hI\2738\025\005>\327\370\362<\273\034\216;\240\353\227<\271Iv\275\347\321\211<?\345\007\276r\002\303\274\360\342\213\275\203\245\002=t/\262\274c\201\017=\335a\246\273\376U0<yX\300\275\361 D>\232\222\230\274Au\212=\302]\321\275\017W\251=\337D\227\273\216\306K;-\210\037\276=L\n\274z4\016\275\222\202\263=\234\301j<:{\265<)\037?\275\370u\262=\r\235h=E|k\275\032l\354\275\022\210$\276\213\311\221\275\304)\220\275 \271G\275E\'\320\274k3\232\275v\265h<\005&\374<Q\340\320<\235\261\257<7\000\363\274\201\032\016\275F\250r\275\254\357E\275P\217\320=\252\010\345\274\3227\304<\374\227\223:\201$\360\274\361\226\213\275\352l\301;\201\032m=P2\265<\264f7:\376nF;\253\233\235=\353\030\367\274\365\033l\274\377\261;=\023\2751\273B1V=\345^\341\275\367\267\022\273\331\013\373;\244\254\032=a\3012\275\rj.=\370\'\354<\3420K\275f\002\201\274V\333\343\274\375\211\000=\036H\351\273\307m\316;\346\300\275\274\253SJ\275)+-\274`\355\036\274\3171\270\275c.\033\275\330\021\034>0Fs=K\027\t>\255\200&=\207\200\006\275\3636~\274\307#\021<\207\354\304\275[\235\017\275ht\231\274\352\213\320=\210F\251<\333l\222;`\334+=Q\034>=g\306\220\275\3642\221\275\033\003\246=\301\260c=\354+_=G\337\302=x>\211<D?\001\275\001f\306;%\353\260\2747s\244\274\220\356M\275\037\215\037\276\345 \310\273\273\356:=E\343\007=I\375U\275\277\370\007>\311\226\234\274KL\310=\340\306\200=\226\241T=\243\021\213\274\307Y\271<\022\301\014>\355\267Y\274<}r<\351k\364\274\307\211\353\275\305\245E>/\025,\276c\256\263\2736Q\031=\323z\001\272\332\303\210=Ss5\275;:\214\275?2e<8%I=\300`\221=\321\310\270;$\030\267\275\264h\025=\370`\221<\302\272\303\275\356>*\275\351\364:\275\217C\244\274\363\251z=I\r9\2758g\313<\351\300\266=\320\202\331;\0164\277<\305\247\205<#\343&\274\017\322\000=?\206\215\275\177\310*\275J\2303=i\205\374\275\365\237\211\275p\200\222=1}N\2738\340\200<2\237\367\272\004\233g\275~\256\030=r\'\332<2\026\311;]\320\261\275,\177\235<\261\203\214;X\3571=\243\340)>\216d\231\275\336/\340\275\300r\177\275\330\221\201\275\303-\264<\220B\375=\n\005A\275\234K\207=\037\307\253<\346h\346<\320m\207\274\3214\202;\312E\371\274\371\322\240=0o\315<\022\325\240<\215B\003\275\312\016g=\371E\014<D\263\230\274\276{\335<\371\354\372:\"\311\007=\257V\321=F4\006>yc^\274\351\007\220=\374\211\243=\034\023\345\274\210\247\204=\364\335\316\274]\343\007>\237\333Y\275\006\333\273=\261\257\252\275\3244\212\275\217\357\271\274?]7=h\0242;\004\"y=\324\000\030=s\342\317=\263|\270=IT\020<\272r4\274~.?\275Q\034\255;o\\\212=\023\306\334\275\205\335K\272<\030h<>G\214;l\034\242\275\003\014@\274-1\312=s\265f:\226\271\274\275\324X\000<\317\353\217\273t\327\264\275.\303\217\274\251\311\220\275\246\351\362=\336\350\201=W\224\355\274\\w)\275\271\313Q\275\250\200\223=\377\253\266=\351\270\251=\331Kh=R\365*=N\000\233\275\206\335J\275\266\236\225\275\220h&=\361\334;\275\375hA\275y\375\312;\206\377\326\274\376\277y<?vH=/2\004\275S\3100\275\206~\246=U=b\273Q\020\266:M\007\201<\006\350\031\275@)\242=/#\215<\036Q\207\273T\343\215\275\323\256\304<\351\300\305\274\203D\356<\024\005I=\357\t\007\2740//<\014\370\227=H\324\031<\253\000*<\366T\n>4\356\264\272>\377\016>\212Uo=\031K\323=\324\'\267\274\004KP\275Vi\360=\023u\223=\355(\250\275\tF\272;\241\371\r>\2241\233=\3701\000\276\373\2019\275\237\026J\274=\273\334=\327o\314<\276\206\276<8\344\n\273%Go\275n3\305=\254R\023=$$\207<\302t\243\275\257\201.\275\316\341(\274\021\263;\273\322\205_\274\201\301}=\276\202\207\274\332tn\275\021\240\262\275\237B\263\274}8\270=\212\360l\275\0264`;B\022\226\274j\363\316\275(\371R\275\322\336\354\274\035h[\275=4\370=:x\317=S J\271\021\006r=\"hy=\227\275\231\275\366]\375\275\307\016\003\274\031\232\213;?e!\275\216=\247\275a\'\330\274{\332\010\276\260c!=%\327\367\274A\227\316\274\005\264\020>\332\022\272\274m\246\254<q\247\376;\374\333\354\275\016<\036\275\312\013M<7\247\200=*oP\275q\320\202\274\222\006I<z\300\200\275\371i8\275!\374\307=M4\034\275\377\313\031>p\311\337\274\220\210\020>\225tb\2752m\362;Z\267\025>@\301\264\274\374I\361=kJG=\3117\342=^X\323\274\223\346-<\205\006\n>58*=\353\\\302\270t\303\\\274\226\273\032=\271\323;=an\253;\325\377\242\275\214\205|\274\017;e=\313\254\201<\024sj\275\204\210\355<M\355\003\274\331\014\237\273\216\257\'=\270\242\254\2751\342\242<\315\230_\275>\223\220<\262\336\275:\326>\230\275\317K$\274w\016\005=\236\376\261\274\246\270\247\273\204s\206\275)\\\017<\377\203\213=\001\254\001=\312\236F=\016\204\254\275O\265\306\275\350\274\233=\361T`=\372~\251\274v\016d<-\352o\275\271\254\344\275\376\231,\272\352\004\327\274\3253\005\276\331\240\314<\257\235\357\274\225L\215=\263\272\025=\313/\272<&\223\376<W\302\351\274\326\265\036=.\202\232\275\214\231H\274\214\226\216=EJ\273\275\237!\t\275\024E\034\275\215\177\225=0\247\367\275\311\322\346<\325\276\323==[&=\320G\227\275\023\rc\274\257\366\253=\343\234+;\267_\007=r\307\326<O\232\222;o?\321;j\260\006=\242!?\2741`\340\274\376\337\t\275K&\211\275\377\227[=\310\332\027=\362Y:=*\373\352\275\3354R=4o\'\274\026a\t\274\251*\317<\321\231\260\275\256\365,=T\244\341\275C\003%\274\000\032\032\274O\346\354<\214r\204=\315\362\272\275b\315\357\274O<M\274\n\320\264\275\260\213h=\265)\227=\342\3616=o\305j=\277\227\300\274\275\225\355\274_\213\314\2732\275\376\274\025\3604=\226f\353\274tw\212\275\226u\206\2741\252\363=6\215\232\275!\353\342=h#\233\273\316?\216\274$\316\017=\221p\232\275\346\005\346\275\316qr\275\275 \244\275\305\312\r=s\357\314\274\303\271q=a\346\213\275\242\317\251;~\226=<)\035S<\351\2726\275!\236\222\275\201k\206=\356[\277;=\"x\2752\363\343<\372c\006>y\330&\275\027\016\314=\362\320/\275\316\361d=d\254^<\362t\007\2757%\004>\215a<=\006\226\227\275\334;\230\274\307\341\200<\352\020\300;_]N\275m\311\243<9\004\313\2738\242R\275#X\210=S\036\202=\222zi\275\235v\313=\247\233\320=\246\351\005\2759\324\306\275\214\234\257\273\254\025\330<7\223\241<ni\244<\365\332\007=\335\207\341=\2367\217=\265]\232\274\003N\001=d!0<\276\227\265;\324J:\275\3644\373<@j\002<\250\204\205<\261\351f\274\357\256\000>\226J\014;F\020\313=\030\010\036=\352\346\360\273x\366\313\273O\342\266\273}ro=(Jh\274\001\251\000>\021\226\213\272C\357\303\275\363\260g\275/\207\255<Hm\'\275l\323\265\274F\375\002=\316\365\345\275mb\243=\377\367w:\371\231\016<\n]A\275\314S&>\377\232\357\275\017\240\351\2744\204\357\275\3369H;\203\266\355=2\230[\275\347\303<=\3043\037=\341\010C=\270\265\354=\322)\213\275\304\202g\275\254\237\217;\252^\264\273\371\335\265<2\035\275\275\222(\324=4\355\377\275\222\315\220\275\260jJ\275\256\310\205=\263a\020=\276\275-\276\360C\334\275\355\327r=sJo<u\344\314<\035\312\253\274\366El=\374q)\274\267\376\022\276E\234\366\274\207\307.=D\236\207=\276\t\274<\3359m=W\217\304\275\022\262/=\210\241\267=\035\031\357;\216\265\256\275W\337v;f\224\356;\374\006\001\275n;L=q\211\350\274\'\331\321=\327\376\340<v\247w\275\327\271\271\275\341h\202=\370/\\=>\356w\275\r\320\t>\305{\003\276\326\264\022\275\233\016\275=/\312u=i&M<\014\"\024\275\332\3126\275\2526\352<\252\033\376\274\005\323\004>\317e\265\275I\232\275=;m\256<\024<\274=\270\234\352\274\036\033\270=\317\312\215\274c=~\274 \3552\275\245*\316\274Y\177;>\312\230 \274\277\030\327\2745G&=\355\342\037\275\266g\\\275T\017d=:\0343=\242\217\207<;%\212<\2445\255\274L\002\252=\337\267d\275ak\037\273\006\023c=\337\337\006\274\256\302\177\275e\201\201\274\332\262\003=<Ci\275\220\033\221=\014M\013\275\322\363\316\272\221\310\316\275eu\024\274)\251\\<\224\355F=\202Bw\275L \204;\005a\332\274\262\"\264=\370\333\010\275<|u<\3162\032\274\277\030\000\275\326\302\002<\255\3415<\313^\213=E\366c:6\354\006>\350\306\263\273\333\352\257\275T\350\271\274I\013\275\275\221x\332\275\360\345\237\274\271\350M<k\325\363\275\004\207\333;I\260o:^\307?\275\276z\245\274\000\302\271\275\344\227^\275\236\304\300=Mg5\275.\242\002\275]B\037=\236V\313=\315\317\265<\351!\200:\335Y\342\274b\037\311<\362\n?=7\220e\274%\366\037\274n\353\271=\273#\274\273\326\320`=\273\310\216=)\016\304=\347^;\275\353\204\265=\007\216\013\276?\254\217<C\0134\275\253\235\377<\032V0\276\\$\303\274\366\271]\274\252\310\001> \327\022=\265\206\225\274\327/\001\275/\224\016\274\003u\236<\314+\334<\025\267\225\275\317\022\222\274\202\t\'=k\020j=\032\321\267\275\277\033J=\301\260\004=\230\265\342\275\327\231\221\275\316\202:\275\304\340\342\273\332\365\246=\025O\300\275\222b\220=\274\343Z=sdJ\2754y\275=\\\207\211\275\301\326\030\275\214\177\035=\246\233m=gP\007=\002\020z=\350\342\313\275\356\314\360\274\331(\240=0#\326<\027\224\014\275\273P#\275\206x\201\275\257\223U=\357\330\005=\377\326\227=\237\010\315=\370Q\236\274Q\357*\274\240m\222\275\264R\301<:\243`\275~\0244\275x\247S\275\t\252(\275\005\t\030\273 \306u=W\r\244\275\242\357?=\214\"\215\2753\'\013\275e\263\212\275\024\347R\275\220\004\263\275\336K\300\274\315\203\007=\205\037\373\274\230\263\200\272\316\010$\275o\354\200\275\025\')=4E\372=\3625g;\rO*\275\014y\257\275\022<D=\207\225\255\274\271\216\276\275lp\217=\262\031\235\2749\025\321:_\345b\275\215`b\275\361\230\"<8YG<\376\323\255=zX\276=\374 \210<\367\201\216=e\217\006=I\336\032\274>?\361=0^\220=\'r><\200\374\001:n\234\261\275\350\3315\275\253\205\244\275D\234\017=\375\016?=\033\002h\275o\263\350\2744\003A=\276\250\226<\306\302\344<5\311A=^$\242=\274\030\364\275\211R-\2751~\305\273\200\214\213<\206\265\256\274\035l\240=&]\230\274h\337\323=\356\334F=t\201\306=BIx\274\323\233\377\274\364F\314=g\241\344;\303x\200\270\253H\277<\375\272\250\275\362\204\032\275LD>\275d\224\303\275\362\017\r>s\037\363\274y\026\326\275\212\303\001\275)JK=74\302\274\270\346\021\276q\n\276\274\374\353B=\214W\305\274p\373]\275\355\001\014\273\005\275:=&\203\023>\336#-\275\365\002F=\334\360k\273\270\020\275<\344N\021\274\036\200D\275\244\312\237\2748o\t>y\037\352<\304\351\260;\241\022F=\321\216\250\275\374@\257<\324\222i\274Vw\313=,F\363\273+\201Z\275m\346\353\275\263\273\250=\214\210\322<\221A\004>\257\355\254<\013\271*\276v6\256\274\342~1=\037\221\201\273\314\'\313;\276\347a\275\2178\345<\234\227\204=:\353D\275>\342\325=E\332\332\274\304e\372=\364k\275;_\360\330=\0007\267\274\366\017\004=\001m5\275*\020\305;\327[\217<\256v\363\275ZB\353;k\006\007\275\363\031\000=eA\224=LS1=\036s\010\275\314P\356=oE\030>\344\022R\274 \212\213<\200|#\275\256~\206\275\342\250$\276Mt,\275kI\260\273\316\035\357\2730\226\242\275\350?\233:{rC=\326\362P\275\2404\036=\350T.\274Gv{\275\007\231\207=\264\205\246\275\001:\210\275Qj\034;\233\010\021\275P\351\035\275s\274H;2\256\332\275\304\373\327\274\0310\204\275$\305[=\276\214\234<q\355O\275\265\203\203\275Cc\210\274hV\225<D\252\232=\366\377\340\275\202!\217\275K\035h\273\215\2369==0U<\325\034\234<\373\302\367;\245c\005<\033U(\275\227+-=U\211\003>R,\037\275Hd\246\275PQ\013>\002oX\275\340\363\233\275\263\251\207=3\275\017=\355[S\274\335\022J=\035v\213\274;\275\240\273j\014\003=8\277$\275w\320]\274\301\351j\275P\010\364;\\\352\227\275\252\016\3449\231i\212\272q,\236=\263\350r=\360d\255=\247\375\341=\n\204\021=j&,\275\021\035.=52\220=x\020,<\346\372\373<\004\222\025\275(\004Z\275!G:\275;\212q\275{1\020=(\331?\275<a\373\275\374K\377\274[D*=\035e\210=7\206\350\275Y`\204\274\2425*=}\002\370<6\324\000=:\234\330<\313\316B=\027\204j<:\276\273\274\014s\206=z&\034=\272e\227=\221\374\322\275B\257n\274\3355\261;\005\326\200\275\216\222;\275\321\307\372<,4\274\274\231o\375<\263*\333\275\206\005\347\272\321\202\035\276\351\016\201\275Q\256r\275=\313\233<\303\0173=T\035\350;\020w\007=\220\267\000=\215 \217= \273\342\274\230>\203=)\251$=\026\354 >VC\007\275R\334Y\275\266\315\215=\325;\362=\267\366\323<)0\016=7g\224\274\237.\250=\277\255j<&W\336\273\244e]<\"\343\364:\034d\022=\311\323\211=\356\037?\274\313m\257\275\002\207\221=X\276\203\275E\0076\275-\257\204\275$#/\274\220\334t=A\016\021<\243S\224\275\256\001\332\275CB\353\274\036 7=\362^\250=\247\241;:a\035\223=Fv\t=Of8\275\366\366\017\276\275\023\323<\'\250\344\274\347K!\275uW\211=Q\240\022\276[\301\303\274\272\222\024<=\277\241=\2512\000;\350\352\026\273\216\002\241<\317M\005\275\373l#>-\031\340<\014C\335=\266\364b=\010\255\351:)\352\221\274X\330I\275{\344\202\275V\022\203;?\236\207\275\203\346\213\274\020a\247=\2171\275\274I\'\364;\272\320\037\276:O\002\276\254^\216;\014\231\246\275>hN=\232F_<\262h\302=\376`\027\275\325XU<d\262=\275\322\0044<\322\243\330=\001\255z;\331\371&=s\206k\275\376\022\344=\311w\371=\207=\357;S\n\020\276\311k\313\273\250\365V\274\305\357V\274%\316>=\226-:>\327\361S=#\222\377;\324\2714\275\027\017\036=d\211R=\306w\246\273\351\312\237\275.\351R\274\372\226\232;\020\227\220\275\200\324\003=j\271\016\275d\302(\275\200X\223=\\E9=:\317}=\276\355\266\275\236P\222=\343:R\275\013\245\237\275j\250\227\275\241\327\255;\254\216\346<\206 \301\275\203\212/=\341\233\010\275D\244`=$\200p\275\036\377\233\274xFc=\327\317\202\275.H!=\360\332\023\274\306\261\304<\021\365k>\267[\240=?\034\215\274O;\233<\236\021w\275\221\215\314<\306jK<U\014&\275\346P\223\274t\231|\274\014\262\342<1\013}=E\303a<\343{\010=\266\027\236\274*w\347\274\303|\270=\264lY\275O\257q=\304\343\312\275\023-\250\274\307#\330\275TWi\275\'\021\352\2759BE\274\354:\033=QA\345\275(\357\266\275\213\271k=\236\264\200<\364\305@=\227\213\242\275/Ij\275\021\251\236=\345\024;\2751\2233\275\221\034\300:\212\333\346\274\352\236\372\2735m\200=t\210\224=kg\261\275\361\353\352\274\323\373]\275\202\333\356\275\376q\331\274\241\223\334<\270U}=\217w7\274\024_!=\024TL=\351^\n\276\035\237!\275\350\223\311\274\312:\031=\301\016t\275\336\026E\275\213\260\367\275\346FO\275\267l\336=&\276\037>\370\032\362=Hc\020<2\017\235<O\322\373=\177}t<\341\t\026\275[Q\361;\335\214\016<\246\336\301=\215\362\203\275e\216\010=\\%\000=\305\361\016=\301\325y\275\'\230\204\275rY\237\275\316\371\220\275\036h\311<s\243\035\275\225\337\340<X3\257=\260&\360\274h\353\277\275\222\231\362<\364\312\005=\350\311\037=%O\356<5\002,\275\333d\313=1\202#\275\215\017\363\275\212V\030\276\336d\273<Kx\"\275\235\362\210=Bj\236<\352\232\332\274\"\014\005>C\234\221\274c\224\326=\245\23019%\343\242=\t;\274\275\367\357\217=\314\000\244=&`\031\2746x\306\272\244\340\021=e\305|=\004K\226=G\231\342:\305l\031\275/\353\013=1\255\232\274%\244\200\274\320\2751=#rW=\357\226(>N\347\006\273\240\002\257=\342V =\273\302\271\275\273\247%=\033O\221\274\331\0351=\335\215\273\274c\3541\274Z\367\330\273\374\313\264:\326\237(=\227?\310\275\320\303\030=Z\330\022\274\264V\000>f\306\250=~\303\250\274~\033\032<\216g\031\275\334bu\275\312YT\275.\036\201\275\014\357)\275.\004\353\274\361\315;;b!\t\276\370\330\235\275\231\222\232\275\021;\225\275\356\324\351<\240$2\275\207\276\234\274f\226\257=4\267\003\276g\036\324\274\361mk=e\363\304=D\223S\275\031\251\335\275\306\032\022\276y\013\030>\3355P\275\315,\357=\235\262\037\273\036\2559\275\325\303\020\275^\367\311=f\233l\275\321\2629=\325\366\373<\242\033\017\275\275H<<\372\025\235\275R\233[=!\016\027=\203[\247\274\337\266I\275\203\031>=\203\316\372\273\026\271\315\273j\374I\274\260\371\276\275\270\035\231=\262\360\222\275\375\nf\2740\226s=f\3566<:\n\212=(\342A\274\353\227\222\275Ok\321;O\355s\275\337\312\266\275\212.\252\275\361\014\222=\237\034T=d\345M<\212\327\221=h\246W\274\026Z\347=\034\231\205;R+\t<\364U\375=2\001\035\275\217\200b<2\n\020=G\250\263=\033\324\013=\024`\007=\306Q\275=LO\266=[&\265\275\221%%\275\2235\010=\375[\003\276:,\030\273h;\350<\222\240\036=W\032V\275\177\030\227\275\216\266\222\274\273\231\010\275:\371\345<\267!,=za\306<e\315v=\347\226\212\275\376W\310<w\231\020\275\034\304@=IS\202\275\273_\253=\266D\371<\360\215B=\205\371\225=\236\3776\275%\"\025\275[2`<\316(\310\272\t\364\371<\301A\337:O\032z;QA\006\275\264*\232=\017\261\304\274=\203\345<1\177\227\275\037\355\252=\3214\003=#\312\216=\340\246\220<\212\267\264;<\217\276=\225-\\\275W\211\222=\304Q\267\275`\n\304\273\257DR=\232\227\237\274\204\210\315=T\301-\275\236z\223=\217\341T\274\342\354\006\275\222#\255\273\365\376\200=j\215:;\350\033\t\273\037K\205\274E\236\027\275)lc\274\010\226\023=P:\343;\312\245V\274\251\230:=An\226=\026h\221=k\020f=\367\253\253<\201\377T=7\340\316\275\021m\342\275Y\365\324\274\265\271-=\357\335\235=>Z\237\275\331\013\021<-\366\"=E\026\334\275\022\200~\274\030d0\275;\222\274\275\212\201\251\275\226M\345\274\227\207j\275\346\025\221\274/<\365=\324\255\031\275\337m\031;\261\246\006>2\231\320<\201\316\356\273\334\031\256=\323h\233=\275\002\374\2735\252\223\275U\372\003=k0 \275\236\017?\274\272\274|=\342\345\335<\327S\206\275\311^\273\275\306M*\274\213}\r>\000\017\217<]\226\366\274R9\001<\347Lc\275\234[\003\275\304\310\242\275\271|k\275\372t\027=\316m\330<\200O\264=\306\013_=4\021\200=\224\241\250\274~\000 \275\257\330\276=\260\227\301=\342; =\237\223\337<\331\301\212\275\010\247J=`\t\030=\266$\274<~\347u\275\321dt\275\245w}<a\226\223;\222\207\270\275\230\020Y=\354\034C=\221\261\342\275\260\360\351\273\334,\016>]\361\026=\256\005Q\275%\354\221=K\374\201\275\347<\221\273\327\320#=V\306\326=3V\347\274\222|\032\273\007\306\025>\344|\014>\275\017\370\275ag\023\275vlN\275\036FA=\243\324\017<\023\254\000>\036\312\004\275\342D\325\2758\271\263\274\3540\004<IE\317\275\343\267\210=\313\270\241=\316\210\247=t\362\264\275V\032?\275\260\215\265\275r\213\223\275\353\240\347\274\332\277\314<\344s\333\274\272\244#\274\3573>=\351Y\231=\rw\270<\t\331\234=\312&F=\304\034\006=\331\232s\275\264\303\314<.\342\022<^\352\005\275\026\010\363;\010\230\316\275L\251\236\275\366\005\220\274\351 \203\275\013!}=X\335\241\274\006\362\300\274\023\\\362\273.\332\254=m\250V\275\374\362\231\275^\335\320;\342\352v\275\035\230\016\276\226q\207\275\024\303\333<=\326\347\274\335\034\026>\252`\235\275\272\274;=s\214\007=\315g\276=c\263o\275\026mk\274\273\276\334=\306\367t<`\nK=}b-\275)\231]\275\017\006L\275\215\265\274\275F\307\362\274\316\241\221=\3020\346\274\204\315\273\274\220\2574\273\337\031\177\273\025\373\202=Q\034\017;\326\013\312<D\323\341<\245:\311\275sS\007=\245|B=\246\201\003>=\340\004:g\024\264<[\277(=\235\330l=\300\0366\275\240\274\206\275O\377\276;\301\025\225\275N\341\214\274\3560\013<\217D\005\275\311\356?=\242\356\374\274(\037\001\273^\255\364<\354\247\205<q\235\373;\357\316\221=\t\211\001\275\334 )\274%\260\341\274\372\275d<\022\021\371<\372\347C\275\201\362\246\275\317E\233;\326\302s\275\361\005\372\275\223\\;=\247\317\324<\277\346\034=\205Of=2A\300\275&\2172\275\010\350o\275\223 \355;\323JS\275\324h\337<00\214\275\3461\304<\362y\323\275\233\366\263\275\331Mq<\333a\264\274%\321!\275\244\301t\275\r^\265\2744\377\254\274g:\311\275\326\244\243\275}\025\324\275`\223g=\177#+=F\222\245=\253e\301<Rr=>I\257\261\273\315Zu\275)\274\212\275\354k\016\275\243\0349=<\252\266<W\375E\274\373\256\220\275\355\207\026\276\337\372%\275\300\340\253\275\003q\027<\233\230\247\275\2164\240\273,\312\025=4\321.\275\320\177\253=6\206\005\275\340\177\201\275\254\266\222\275\000\"\317;\2261\\<X\226\024\276\031\277\235\274Q\207\345\273\325\306\260<\203\030\257\275\357K\342\273\256>>\275\221\244\372\275\365\201D=\364\363\377;\005\262\223=\364\225><,\332\013\275N\332?<\3058\347\275\302q\025\275\222\244q\274\262\031\265=\235}\266<\377\232\263;-~\264\275[\254\257\271\355w\363\275\316\340\033\275\252x,\275g~\227;\225m\007=w\360W>Z\261\352<\374+Y;\233X\005\275\346V\002>\216_\n=\0266\300=yZ\257=)\006\314\275\037Y\207\275\334;$\275\273\207\210\274\321\310\021<\233\205\026=\020\260\302\274[\245\312;\307\325\330\274\304\326\331\274\336\203\006=\016#A\273\344<m=<a\323=f^\'\275h\272\376\274\205\366]=\321\037;<\347t^=\305\255\253<J\"\006=i\020\t>\241:\326<\250\356\207<((/>i\304S\274\334\031\360=a\336\271<\344L\371\275\377\306\313<\360\274\336=V7d=\326t\236<\251\013\343<\250\007\033=_\023\314<\272\003\031=\203\231\270\274\276\367\334\273\323\262\272\2747\371\301\2743a]\274TFs\274f\227_\274,Kf=[\253\003\275\022dc=\"\340A=\335\236+\275G\025o=\227\037\300<\261\336\365\274|\340\036=x\330\026=9\232-\275\000\'`=\3061\207\2756qt\2757\253\215\274\346|D=\270\222\215=1\253{\274\316\361\226=#;\331\274)f\217=VI]\275\314\363\242=-e\341\274\331t\362:\261\311\247\275`X\210\275~k\212\275g\372\"\275\352\020\021\275\225\270\205=\267\277\014=\324g^=\0173\201;G\370h\275\034\004\035=Z0\333=>\366\264\275\211?m\274k\270\223\274\323f4\274\321\334\235=\3250\215<\241\266\220=5P\222=\313\372\306<h\242\203\275\267\212\026=\270R\277<*\267\343\275\271\256u\275\354\354\270=+\355\374\273\2636\334:\314\n\251=\211f\334\274\327E\225\275L?6=\020\220\001>\324\305I\275<\3449\271\204\263\205=\226X\336=\2553>\2751f\321\274\323\034T\275?\305\316<w\272\021<>\217\352<\305\336,=\026q%;\244\316\210\275\336\253\'=\222\300\216\274H\335\212=g\355\314=S\277k\274\214\352\021\275\236\204`\275;I5\274\241\254\034=s:\353;\353\230\200<p\\-\274\006\tF=\206\231\276\275{\371\232\275\316\357`=\231^\023;#q\270\275\2427a\273\177v\205\275\361/\230\274y\360\301\275\375\021\207=Z\326_\274C\273\246=c\036\360\275\003Y\355<\312\242;=W\224\237\274\276d\373\274\203\363\250=\335\263\'>?+<=\224\373\321\275D\331\003>FO+\275!\317;\275[\313\036\275V\306\323=\344\363w;\006z\300=\333O\206<\373mD=m\320\303\274\376@\216;\304x\007\275\225&\237\274\272[\373=\1772\006>\227\025G\2759J\017\272d\377L=\243\216\341<\377\342@=\374z\024>\367\310\324=G\021+=\220\322\346;\010\225\234\275\376^S=\324i\222\274\231D\262<\223\335k\275\260\324\331<\201\301\250=\0033\263\274\200\306\016=\230[\276\275\211#\350:\234\206\237\274c\033\236:b\203\355\274#\371G=\333jk=;\r\373;\366D\010\275\265\224&=\027k\177\275|,\205\275I9\216\274\216\343+=\250u\201=\200]9<\215\204\355;\256P\316\275\007\204\375\274\372\346d\275\032b\372<\\\205\240\275\211ix<\313\304\353\275>\240j\274\343\321\245=\205\200N\275K\300\346\274m\217\273\273\307V\327\274\305\021\270\274\221\n\r=\306\245\316</\177\237=\3627#\275\326\273\263<\003{h;d\345\327<\324\221\306=\237\247\307\275\007O\256\274r\310F<\346\265\t>H\"i\275\235\227\375=I\373J>\017\261\204\273lc\004\273\366\"t\275\206\277\264\275\211\272\005>V9\276\275\275\372\202\275\244\226\003\276ksg=0V\303\275\307\226\235\273\337\314\275=\225\034\351<O\233\243=tgD\275\030/\322\275\266EJ= \370\332\274\3056\307\274\206\250\270=\366Z\230\275\351\356f\275\221\266\233=qD\275\275\216\306T<\252\226\240=@\006\031\273\206[\366\274\303\001\273=H?\236=\206\247\243\274\nJ\335\274\255*\255\275\026\033\254=7\230k\275\010\005\216=u\003,\275gP\311=\334U\360\272\\\312\027<F\247\002\274F\377\n\275\207B\360<\035\351\363\275\305\305\355<l\032\303;\322\034\200=\371\347\037\274O\331\351\274EL{\274T[\347<\247\276\262\275c\354\240\275o7F\275\036\244T>\035^\"=\251\230\020\275\254\243\255\275\353\037\031\276\333\230u\275q\321\367\274w\300\313\274\243\021\361\274\375\357\241\275\327\366\312\275\205\013\226=\227\276\204<\242\304\201\275i\350f<\352b\234\275\325\375\027\275\t r=+2!=\216S\\\275(t\036\276\346\235\240=I\335\234\275F\016\254=\262\223r=c\357\211=i\003H=\027q \276,\304\242=\217\241\026\275{\264%=\027\016\212\275\t\303\335\275W\205\246:\210$\374;\005\241\022\275\274%I<\327\345\262\275:R\320\2741\262\257=\314\374O\275 \233*\275Q\321\216=Q\351\027\275\325\351\223\275\271n\252;\244\272\031\275\346(l<\340\206\250\275w\003\010\275\232i\260\273C\335==\221\'u=\302R\325=g\\\035<pT\275\275A\362#=\344b\262<x\000i<\367\261D\275\311*\244;]\001\200</.\373=\352\255y=\360h\325\275t\207\204;-\007\325\275\247\037q=\336:\274;\221\366\353<t3`\275\277\237>\275\3477\363<\356?\365\273\350\332\006;^[\241=D\"\253=\023\336\225\273\330\230\232<\231O}\273\225\035\367\275\263\006\361\275$\305\365=\261Bq=t\264\006\276\354\357\215<B\265\230=u\362\003\275]\236\2708i\024\344<\273\245\203=\312\353\340<\367E\034\275\244\332\027\275wdY\275\362\312 \275\252y\026=\337\002\036=\252\375h\2749\262U<\2168\352\2748\337O=*m\002\275\210Q\340;\205\2249=\323\225\304<^\212\236=W\344_=\3269\032=\257rl=\227\217\362\274\336\277e\275?\261\370=7\206\370\275.\351\372=0x\371;\220w\t=00\010\276\3352\254=\\\025\007<*\367z=%-\212=}\237\244=T\345\371=\351\"\017\275\244\277\001\276O7f=\0277\366\275\371v\356\275\225\225\270=\336\223B=\373\270z<u\336\270\274\\\233\343<\330\341\314=\374\373\252\273\t\316\245\275z5\002=\206\222+\275qH\367\273\354\303&=i\276Z\274\277\024!\275\271\301\212\275\262\007\264\275\227\342\212=\372\314\331<6\367\321:\321.\334<\364k\264\275\310Y\312<\365\302\205\275\004\353\003\275\353\025\036=\352\257L\27427G\275\013\361\326<dp\235=\2319\311;/N\213=\333\0272\275^\025[\274\272\374\001\275 \200\261=8\242f=a\310\321\275q\0130\275K\361\214=S\222F\274M>\265\274(cx;@{\365=\230b\306=\236\334\220;\352\365$;\334\004p\274\032\262\233\275\323\307\317=\356Y\304\274\240I\020=\347\205\355\274Ox\031=:\2711\275\323\346\246\274h\356.<@\241;=\377L:\275\017\311\212=p\267P\275B\323)<Yy\327\275\306f\212<\210\242L=6N\202\275\213E\010\275Z\217Y\275\271Z\310\274\347\301\246=\021i\241\274A\237h<N&\223\273F\'v=Be`=\336\343\233=\'\001\357<+\222\'\275\264.\204=\371\262?\275\203\260G\275\254_\227\275\212\217\356\275$C\323=\244\376\010\275\341m\"\275\271qI=\200\211(>%\242\030\275~\225<=\207hg=Y\310#<j\241\312<\241\332\263=\025\263\375<KC*\275\365-\364<\364\367\265\274E\243\027\2741\355\013=\000M\330\274\024+h\275\230\013\\=\360\0244=\030\247s\275\210w\353\274eA\217=\023#\316<\215Y\277=\334-\267<\236\\\225\275\334BJ\275*j\353<l\030\023<\372\022\375<\324\212\007\275h\320\243\2750\326\213:\311m\270\273\376X%\274\322\334\246=\336\220O\275\030U\210=5La=\333\321\006\2762wc\275&\336\303\274\350Jv;|\270;=\304\204\332=\302N\222=\222h\023=\334Z\r\276Y\t\245=u\000\270;Sv\277<\352\200\226=m}\333\273\035\264\255\274\322\211\304;\tn\352;l\347\031=\271\026\026\275\370`%;g7\373\274\033\n\267\275\202P\231;\273m\002\274\021h\302;\330\t\024=-\335\355=#\273\215=g4\370;\345]@=\365-\341\275\252.\251\275T\236\212=s;r<\037A\340=\\\254a>(\217+\275\240\363\317;\342\253\337=FHC<\007\264\240\275:3\005=C\340\204\273T\271\"\275\204\023\373\274\3462\332;\301\310\013>\t_/\275\253M\221\274\311%\304=1\331\245\275A-\305</E\020\275\371s\323\274-U[\275\377}\024>\025$!\275\363`\022=\241D\252\274\261\000\336\275\222_\311\274T\243\247\274\t\030\002<\332\014\371\274\202G\346\274N\305C\275\372\217\023=\032\244\310<\360z\202=\207\014\261\275\r/\202<\221\232\016\275\330a\343<\364tM\275\231\237\350<\267\361\027=7>\235=D/\023=W\376\200;\235\005\347\271\343\323\273=#V\353<\232\n\367<\037\003\r\274\323SI:\364\253\024=\336\302G\275\377t\223\275\314f\216=.t\214\274s.\021\275\026\2551\275\005w\200\275\337OT;\235\371!>\372\177J=\255O\312\274W\226e<\277\224\'\273\300x\267=\211\010\r\275\300\245e\273\233VP=_,\312=\\\364\210\275\026\370/\276\207\334\274\275\220\334\207=L\001\366=\344<\224\275\246sA\275\346d_=\025\307C\274\352\361\306=YP\375<\241\266\217\275\306\275\301\274\225\242\034=\344\224\035\274_\202\335<\312\235\235</uU\275\231^\256\275Nx\023\276}T\034\275\360\231\327\275\362\366\n\276\"Y\230\274\003pv\275\242>u\275\366\030\346\271pQ\334\275\271\034\326=\313\366\337\275\361\307\014\275nLQ:\252;\002\276\013i\t=#\376\223<\346\343\355<j\242\032\2758\251\347<F\303\272<\330b\222\274\361M\274\275\001\375\200<]\024;=\036\t\245\273eG@=\036\276\322=\221\363\304=\241\r\275\275\200\242\001>^\233\272<\364\220m;\324\204\203\275\302\n<\274\265\236g\275r\024\372\275\373\336\305\2743}\301==Jf\275}\317<\275\tm\217\275\353w\227\275\356f\230\275,\005D=\252\363\022>\262N]\274\241\243\201=3-e\273\313\313n\274\307\360`\274\334\335\323\274\202\215D\275\307G\216\273\223{\274=Ifr\274n\"d9x\355\306=@\235\224<\245\033\223<\313\227\332<\3371\254\275\r-<\274\300\346_<\307\277\325<\264S\002\272\202\013\025\275\3255\235\275\265%\263\274f\2261\275\257\313\213\275\003\336\003\275Z\260\300;:7F=\201\322\n\275\2340&=\206\340R=\325[\305\275j\345V\275\340\020\317\275\255\006\207\274%\343M\2754\230\374<\311w>=\0263\003\274\222\223\216;\377\236\213\275\240 ~< \362W\275\'N\241\275\3303\375\274\201\305q:\342\204\322=\245\374\244=jx\232\274\256\211\r\274\361\0055\275g5\206\275hN\003\273!\345\320\274\033\375:\275z*\364\272\206\256\032<E\237\303=A]o=\276\301\376\274\017\022\377<\222\253\312\273\201\307b=\215\023\031=\027\312\212=c\242\241\274\237#\t=v\245\256<\211\036\236\275>/-;\371\"8\275\r+G;\275 \243\275rT\002\2762\336\230=\276\345\277=\024\000\200=\303\332\316:d\206\374<\242\254e=Z\275&\275\\\t6=\372)\336=d@\325<\277s\322\275.\3263=\254\233-<Z\313\002>\246\271\013\276(\021\230\274\214;\347=\212n\016=\037\260\363\274\201\014\274=\372\260\3059\203\214U\275\002\033\351=\262;\n\275C\3461\275\2504\257<\356\316\265=\022\321\254=\321\347\211=0q\313\274{4\205\275\254\265g=H\224r;\002\310[\275\213?\207=\301\343\025\274\252\357\375<l\364\372=s#O={_8\275^\226\017=\311\312V\275\220\251y\275:x8<\344\333\355\275\260/ \276\025r4\274\rD\001<\255\353\235\274\305~\016\275V8\366=M0\262<8n\232=s\2522\275.\2508=\210Vh\275n\\\014=\377qV=\307\232U\275\355\331\244=\341\004\030<u\013\315<P\326\013\275_\\\226=\020\301M\275\352x\335<\205#\333=\372\371\225\275h\323\221\275J\3253\275s\007\244<8\000\023=t\022y\275\177\227\315\275\025\na\274\345\366\310=O\200\256=\377+\306;\306r\306<\"\017\377\274\272\023~\274\346#3\275\234}b\274\367}<<\t\270\254<Q\275M=\007_\240\275\344\030\351\271:\3422=\241\336\316\275\366\342\266=\275\314!\274\005\305\214=\007\333\034=2\2159=\023\005e\274i\347\337:\342\215\263\274(\030\274\274Gx\310=)[\356\273{\010a\275\240\310\252\275C5}\275:\226\034\275\\\241\212\2755\020\245\275$\005\023=%\356\033\275\363xJ;\n\355\303\274\363\247G\275\303V\000\275\025\025i=\323\241}\274\'\357g\275X\377\213=\212\241$=g+g=\376g\216<\327\'\234=Fp\244;\rh\204\274\366\252{\273\022\017\344<\317\335\373\275\251\342\037=\223,\351\274\027\000n\2752\325k=j\364\241\273w\262\205\274:t\t=\303\222\346\274\236S\237\275\343\350U\274\225K\244<\nO~\274E\204k\275\255\215\227=\256FO\274,\036{\275\017\3730\272\210qG\275\244^\247\275V^\327\275hv\014\275.6\320=\t\345\315\274\375\223\334<\323\336\231\274\340q\304\274\010\311P=r\027X=\033\007\2609\\!}<1\320\235<\211\343\007\275LZ\251=\262\367\007\272%\261#\274\276\265W=\322T\265<I\264\303\275\006k!=_7@<\211\325r\273 \364N\275\0349\211\275\237\377\005=[5\330=wa\014\275D4\016\275\024\211\002=\305\t\241\274\223\361\004>\370\002\317\274\366\334\207\274\311\026|\275\301<o=pA\331<\270\036.=\2579\356\274?\217\225=\200h\003<\332\025q\274\301n\250=\n[\r>\367\032n\275\214\204B>\237\356\262<\2631\353<yfr\271\321\267$\275\002\320>=V\326\242<g`\276\275\004\352g\274\311\373\240=HA&\276\r\177\r\275\r\307&>\026\221\204=\005[\031=\324\313\236<\273\223\313\275\312!G\275\233\333\204=;\324\005\275\246h =\375nW=v&!\275[\2308<\205\\\r=\276)\331=y\313\352\27495;=\026E]\274Z\034\032\2768\341\342=\334\213\341\274\2419\245\2743\226\230\274\014)\212\273\252oQ\274GB`>WW+\2752|?\276>Y\311\275\366\350 =c\313j\272\001\3560=1\225\035=Cv\262\275\220u\234=\223\333\206;J\310r=\223\024\237\273l\227L\275&-Y<\273\375\340;!R\030\275\017\241\330=R\'a=\230\315593Z\260\275\010\223T=\342\016\320\275V/\375<0\245\272\275\226\252\235\274\302\354+=;\025\210\275\233\177\255=8`\035=.O\231<{\202k=\002\351\006:\"\214 ;X\026\251:<`\313=7\316\001\276\304iw\275\246(\345<\246\276\301\274tM\204<0\331.:xt\321:\211\037\\\275\264:\222<\322\201\304\275\376\270\373;\357\\\376< \324\305<-\320\n:s\362\221\273\363@n=>9U=\360\3379\275O\313\007\275\322\353\032\274\260,;<\370B\253\275\020\234\221=\254\032\245=\344g\271<\350`\204\274\302=\236=\014\300\021>\342\350\233\275\237\333\001\275\2216\3249\260\236}\275\265)9=s\007\024=\005\356\265\274\201\032\211;\364JX\275 V\017\275\205\237\271=~.\207\275\225t =\251\265\353\274\rh\006\275\355i\253\275\350\345\273\275\324\323\220<\340#w\274\305\216x<Q\177\270\275\330\252\350\2758\302\363;d\302\331\274\240 \377\275:\205\316\275\311\221\000\276\351\342\230\274\0055\232=\225@\\\275\303\"\225<\306\236\356\275\340eu<O\211\314\274\211\320\242<\r\317\033<B/e<\264\3575<\275j\222<\240y$\275\377\037\021\276\276;\200\275\263\"\316=Q\365M<\354VO\275\331\033V=b\342\266\275\227\213\273=V\3566\274\250\203-\275@\254\266;]\002\276\275\321\275:\275\372\025\235\274/\177p=\305\0052\273q \241<\256\253\326\272i\255\010=\263\233\355<{;:\276\022\316\311\274\340b\021=\'\352\213\275\226\343\207<\316W8=\202\3067=\232\017;\275\236\254\202=\216t\r\274\366\371\"\275\327\316\025=\337\023\251\275\262\2532=g\223\273\275\343\321\251=!U\272=\362\270\220\275\343Q\307<\376\002\277\274\205?\272<\203(\361=\275J\023\273q\220\234=Q.)=\270A\244\275\257\364\003=\037I\357<2\371\021\275\267\345\315=\245\2568:J{\232\273\004\025\257\275\360\362\233\275\242\\\327\275{\320\366= \201/=<,\331\274\326\235\312<.R\004\275\030lB\275\034;\307\274\036\031\016<\361\014\226<\345(\313:\277\341\236\274Ms\203=\002\370f\274\355\203!\275\364M/=\231b\246\274k\200\345=\252n\017=\333 \233\2731\355\300\275~\355j=\021\010\241\275\265p\244\273\263Q\020=@\225\314=E<\243;\034\362\315=\037\241\360=6\204\343\275\363\014\260\273\244\262\204\274\205\363\000=?\277\276=\300\357\033>\022\201v\275\216\325\235\2740\246\361\275\"\341\341\275\246\265\000\275\037\3170\273\271\007\330=\331\262\210=*\366\302\275\257\036\022=\226*\313=W\271\350\275\212\360\026\273\034h\367\275IY\373<}\277M\275\335\3059<\324d\014\274\351\037\"\275\231\337\234\275\326\"\227\275+\017\355\275\321\3141\275Y;O\274\031o\273=8\031\276\275\006\370\210\275T<\220=~\254\333<\232\230\270=<(\236\275\0252\024=\006h\021;\355\277v=\205\311\037\274\255_w=w&\030\274\"TB<S\034~=\024\211\373\274B\034\214\275\217\242\261\274\236\332\257=\364{\200=\302\216\032\275\025\035\305\2740\315_\275+\322%\275\224\r\331=\270\326_\274Z\233\205=x\266\033\274\"\356\202<\226\r>\275\344\253\033\275\3237E\275\276K\261:\360\300\351=\222\260\024\275\n)\260\275\345\345\222=\310\321$>\301\261\306\273\003%\213\275+\237\270\275\325\333p;\337\204\235<\303\356\000<\320\210>=\030\2628\275\353ye;\306\026\203=\020PU=\373\340\307\275\211s\035=\325\212[\275\327\306\226=\r\355\212\273\376\351\r\275\373\252\226=~\201y;\021\023\343\273U\204\211\274g\277\240\274\256\031V\275\035\031\232=\317\361\033=\036!\007\276R\026\347:\262\002\251\274\353$\273=E\237M=\213M\207=\245h\205\274\251\235\363<Z3\356\274\254]g\275\263\005\004>\r<\350<,z\255=o\\)=pTB=\013\314d\275\035\216M\274Y;\225=\014\033\301\273\350\304\375\273\315\006\023=\037v\247=D\022\250=\017\243c<72\331<,(\000\275\353\240\231<\013o\342=\257\355\032=\354\302\345\274\315@\260\273\377as\275\232\352\323=\330\226\371\273\004\340\233:\330\316u\274\007\312_=\357\014\304=\310\264\370\275\262\377#=\"\031\206\275D\353W=3\010\241<Dfd<\313\364\026\2751\0357=\007o\025\275y\223\366\275\365\001:\275A\035\316\273\356\371%\276R!\363=N\333\355\274\023\340\320<\263\373\207=\225\324\244\274\321\033\210\274_e\341<\002j\340\274\300\226h\274\177\024\376<\024p\203\275\001\330\240<\364\226W=\t\357\354;\377<t=>\271\212=\341\204N<d9\244<\246b\000=\347\340\223\274NFw=\016\203\315=\332)\374\274\356\r\340\275\036m\357<\255w\205<\005\240\347\2744i6=\341\227\026\275N\006\257<\344\335I;T\201\321<F\246\307\275\307\021\343\274\231\316\205=Nn%\275~\225\317\275\220\237]\275\362<\205<G\257j\275\310\362\\>Uw&\274\202n\261\274;h\216:K*\270\275\320\237\003<\264pC=\345\263N\273\212\211\243\272\256\302\035\2743\330\246\275\234\226\241<A\335&\275\022L\320<D.<=\025\031\222<\353\255V=c\374\261\274(C\334\2743\241\003\276\245\355I>\023\210\246\275\000\316J\275bU,\276\005V\277\274QJ\215=\016\276\334\275\262\215\256\273\r\027i=S\274\005>\335\373\207=\260\367\'=z\235+\275`\326\241<u\001\223=\247\324X=\243\\\332;t\3309\275e\0022=\271\212\265=\371\273\263\272&A\306=\333\366\315<\357\206\021>\216\3729\276\025\347[=Lf.=\0227w=\225)_=5GO\274>\225\235<o\342\255:\223\245\201\275\331I\034\275\363<U;\022\326\314\275\207\022\002\276sVZ\274\343?\376<\374\226\320<yX\254=\310>z\275T\241\243\275\271\304\022<U\252\311=^{\217\274\037\362]\274yO\365\275QF*\275\367\006.\2747\224:=\231\272%\272\331+\250\274\376Z4\275\315\024\n=\2305\016\275\350\200\214=_\353\240=\267NM\275\254D\006=\241\337\262\275-u\344=\265=d=\234\031\322\273K\002\267\274l\275\220\274\335%\202\275<\336Q\275;B\216<\365\036\205\275\'%+\275\302;Y=p\326\300\275R\215\330\271\344\032\236\275\216\021\315<\354h\223<0\211\020=4\250\234\275I9Q\275^k[=%\314\246\275TQ\312\275\324\356M\275\341q\231=\347a\256\274\274[j\275u\313\034<\343\326\314=M\3744=}\320@\275\350\004\200\275&\035\r>\272x8\272\313\'\235<\200\3342=w0W<\016\361\030=\227T \274zt\375<i\236\'\275\247\263\266\275\357\252\202\275\255\263\200\275\320X!<y\250R=\341A\026\275\025\206(\275\211\273\215\275\216i\360\275\027\234\026=\253\302\317\274U#\360\275fj\270\274B\032\320<\342\375\016=\233\2313\274\224d\204\275\267\241e=\007H\341<\230\003R\275\262#m\275\373\340\025=\355;m\275?\245\323<\0310^=U\002j\275\267\277\001=\002<^=\362NC=;|\017=AI\373\273]\016\320\274k\376\231<\264\014\020=O\274\232=Ps\355\274H\316c=M\000d\274\315\266\031=\273_P\275\203\334\204<\033\236\213\275;\353\200\274C\267\027\275;\321N\276\207\302\321\2724`\235\274Ms\274\274\014\330x=B\016\362=\351\231\035=IO\201\274\251\033\373=\006%\376\274@ci\275@\2455=\267\365\323\275\270*\233\275\317\275x\273\376\317\204=\365{\354<s\337\324<\227b`=\310\323\334\273\262\221\013<dk~<\315\016 =H\367\270<\330\273\361\274\223T>\273\337\352\002\276i\224\271=G>A=\335k\000\275\255\342\371;5f\311\275\226N\211\274\302\253\271=\215\027\251\2753\372\364<\224\246G\275\235X:\276\027\273\233\275+\237]<\014QU\275\224\347y\275\325\206J<\302i\352<-;-\275\257\271\203;\335el\275\r\323\360=\311\223\337=\277+\255=\365\261}\272?\213>\276\312\342\022\276\376\234\200\2756r\336\275Y\232\245\275v\320\241\275\304\235\241\274O\320g=\031\367\367\272\372\325\321=\273\311\372<\323\033\237=\203I\036=\317W\002\274\330K\364\274.\324w\275t\340t\275\0308\247\274\242t\314\274\260L\026=\275\336\370\275\177\317:\275-\035\203=L\317\300\274\227\323 \274L\327n\274\266\010\223\275&D\347\275\245\222r\274.u(\275\020$\017\275\375b\\\274Us\234<O\270\026;\377^\223=A\277.\2755\344\265<\275\355\031=\321\300\211<\2401\035=\240\005\371<j\315\210\274\010\360\t> <\371<WE6=\332\337U\274\213A!<!;\246\270\331\373\326\274\t\377\202\275\203.\365\274\346{\227\275\362/\325<\023\261\231\275\022=\360=\223\303\302\273\324\301u\272\246\342d\275y\024\247\275\336\3659=.1\255=\256xP<\325@\233<\025\367\356:\355\343\310<\305\315\022=\342m6\275h\332\253\274j6\276\273c}:=\005\007\027\272\nW\351\275te1=6\2148\275\241<\215=\027\366\353=s\333\r=\251\320\261=\2141g;\323U\024\275\275\213\212\274\265|\367\275\355\312\333\275\210\322\253=\205\345[\275m\346R\275\224\021\270=\275L\250\274I\312\220=\001\210\023\275\242U\200=\247(1=\330}\004\276\370\371x=[\303\224;\257\302?\276\255\024\">\027\022w\275\237m\200=\250\034\204\274\'.\007\275\007\243\250<zz#\275\0349\030<\016\026\373;\305\337\270=\204o\273<6j\313\272\355\270;=\310\035?\275\247\242\363\274\311R\r=\003\337\312<\326}\341\274\200\237\212<\202\356\245=.Gq\275\343\314\256\275g\370\261\275\353 \206\275\310\336F\275\353\362\005>\206O4\274hC\204\275\272\000\277\275\266G2\275\311\227\020=m\373\333\274\022\035\226=\343\275\321\275^e\332=\352C\303=l\375\236\274\237>\031\273>,M<9SO\275r\203\200\274\251\241S\275\364\233\205\274jB\244\274\361\257\t=\306:\275=\200A\324\275\266\336\217\275\350x=\274\037x\327\275{\020\246\274b;\224\2746P\014\274{\327\206\274\306\256\231=\265\177s\275T\312\362\274\225vD\272\201\'\000>\002\357z;\370fb\2740\030|\274\002\236\205<\327\235\334\275\003\317\247\2758H\347;+\"\234\275^`\304=1\223U\275\033I\026\276\026\032-<B\340\314\273\346z\254=\220\357\214\273-R\277\275A\217\333<I\006\214\275\243\247C=\210O\001\275\324\034\243\275\205|\232\275\316!\260=\316\366\264\273\203\344R<\3029\214;9\307\007\275\276\030J\275z72=4#O\272\032\263>\275:\322\341=q/q=\254k.\275F\324U\274\2556\315\275\"\330\233\275C\355\313\274\037\242\037\275 \224\226=\025\n\233=\211%p\275e\035\316=X\006E=\335\2749\273V\215\205<5\214\006>c\306\263;Zy6\275\317\316c<\364J\256\274\213&H\275\025\277P\275\271\037\234\275\351\353\307<\365]?\275mo\030=\0048\211<\r\343\375;\244\230\031=\244w\304\272\251H\032<\311\365\263<\256h\377\274\216>\007=*\255]=\276\257K=\257\240\037\273\'Fm\275\245\340\357\275\013\2736=L\003\037<7\236\377=\240\247\251;e\376\240\273\324\372\240=\377Z!=\231\200$\276\234\246\356=/\013\356\274\t{a\274e\n\352\274\\\213\275\2751\376^\2741\013\377<\221(\250\274Z\'c;\250\353\261=\2315,=\357\277\217\274\323\001(=\217\315\367=\203\007&\275D\346\325=\"\000g=\305%\352\274\002\272\314\275}\024\310\274\271|O\275!(\371<+\277\362=\260\222\251=w\020\241<O\335\310<\364H\322\275$h\356;:\323~\275\243\362F\275l\212\256=F\204\224=iC\233<\220V\016\275\375v+\275\204\260\023=OZ\271=\225\017\226=\232$\007=\256G\350=\235\255\202\273(;\260<\313\275X\275-rn\275\006\341\r\276\221d$\275\355\323\231\275\350G\211=\343\\\215<\330\327\310<\345\201`\275 <\177\275\212`k=\0000\230\275v\177\246\275qp\202<\244\347,\274l\220\227=&\342\337\275\200\364\245\273\014d\321\275\375V\316=\3534\000=\313\006\305\274@*W=\3069\t;\334h\206=\275/\267:R\302\002\276{\250\005\275K\372\2319\002\235\017=\331\223\213\274\362]\356;\177r\354\275Q\244\350\275m;\244;I0\256\274U\014i\274\227\n\240<\376\263m\275\276\270\252\274\014.J>\024\215\202\275\307\254\301=/\267\223\274s\032\027\275\355\216^=\351\370\"=\005\202\276\275^\255\377\274\333\264\316<\035\226\205<\343a_<F\265\241\275\367#m\275\376\377%\275`~\255\275m\313\032\275\210\013\301<*[\351\274\354\221\302\272Z\322\243\275\204\271\335\274K\237\014\275\351\253b\275E?k=\315\220B\275I\016Z\274r\200\237<S\351\035\274\212\317?8\237:\320\273\230\002\265<}\237\277\274p\234\200\274p\206\003\275l\006\037<\224(\316\275\010$\337\275\3716o\274\243\227o\275\007~\325\274Y@&<9b\264=\307)n\274\014\237M;&%\217\273\n\001\331<\355\275z=\005\340\031\274\024\351\343<C_p=f\255\343\274\261\036\233\275\361\035\037=\027\274)\275H\231\201\2751\340m=e$b\273\246\261\222=:\304F\275\262\255\204=z]\262<\234\217a\274\003\251\002=Q\007\303\275\247\025\223<!6\301\275\235\220\243\275j\363\376<)\r[\274xN =\025\005\005\274&\344\020\274\002\274\270<T#\227\274\216c\034>y\363\216\273\312\t\317\275\204(\375\275\n\025\222\275\350{\357\274Z\363\214\275\'\020v\274\362>\212\275\216j\'\274\275\301R\274\373\354\354\275\366\016\017\275\240\3516=`\211\246\274\277/\354\274\371\370\231<\036\331\212;G#}<7\017W=\317\314\204<\313\"\312\2755\21109gY\207=\273(\021=\365\005\253<\351\375\231\273E\372\336\274\236\t\335<;m+\276#\261\013\2765w\237<\201o\020\275\374x\235<m\362\325=:\261{\275\241\2667=\240\376\365\274Qs\005=\313\333\003=\026\231Z=O7\245=5\027\255<$\351\217\275\022X\017<\301\010\230\274\310\254B=\t\327\226\275\352\034T=\343k\352\275\3541q\275\306\367M\275DW?<d\343j=\236\2048=\327\\g\274W\300\n\275,{[=l\223|\2758\242l\274\005J\n\276\\L1\273\032\355\241=\020\\\207\274\242C\005=h\346\016>P\005\262;\006\252\205=\275~;=\252\307\211\275N\342\025\275\303\364D=\257\212\263=:\265)=\032HF\275D\005\345\275N\023A=\017q\215;\347#\013>\361\373\203<\004}\250\275\261\350\346=>\320\206=\250\006\236\2743\005\256\275\035\242\302=\341e\006\276\355\017a\275T\212\224\274\220\334\021\275\007\241\177=\025\313\256\275\262\024\220\275 \033\353\274w\213\234\275Wv\033=\361\314\202:,\003\002<?\362\204=\275\255\350\273\337\341\241\275\014N\017\275vOi;~\353\214;\246\317\245\274\355\314\216<3\n.\274;5V\275:f\022>\351\220\n\275\270\320\267=?\270\210\275\214s\270;\241\267M\274\rl\351=\370!\303<\266\205\033\275\344\262\250=@nc<\"\366t\275\0078\033\276\251PN\275<\352$\275\024i\352<2\206\350;\372\225\245\275\242\266\353<f\353\273\274\017\312\302\272\234\304\357\272\202\300\301\274\312\271.:F\257\005\275\217\231K\275\362rQ\275\316m[<\325\316\000>\221\007|;\260\264\325=\242\323\334;\223$5\275\210\312\017\276\272O\344\274F6y:|F{<\253/\r\276Xz\020=\220\304\"\276(\241\032=\316Z\243<5\352%=(OR<D(\203;\344\346*\2751\314\217\270\273q3=q\227\220\275+\270J=\304\263\035<\261\037\343=@\t\250:\264\207N\274\253\333><\030\311\366\274uu\214\274$Z\235=o\362k\274\203\374\375=c\032\270<]\277\203=e\3470=n%\262<\023&B\275+u\301\273\202a?=o\265\307<\223\207\270\275l\225H\275\221\031n\275xuB\275*\241\335\273\275@2>\257\273\256=\332\340\315<\355\256\"\275\301\2467=\006[\342<\021@\274=\260U\352<\031\026x\275\311E|\2757\217\001\275#\033\246\275\27667\274\3004\316\274\310gt\275}MJ=\273F\001\273\264\272\t=9J\256<\353\262\217\2757G\032\276d\n\205=V\320\262;\333k\255\272\350\243\033\275\252\217=\275\236s\341\274\355\264G\276\334\275C\275\244\371:=l\331\235\275\277\'\203\275\37646=F \031>8\300\203\274Y\017\302\275\227\242\220;\375\3364=\305\354\006\275 \006>=\221\236\311\275\363\020,\275\215:\013\275\263Y_\275\t=w\275\230v\037>\343V\204\275t0\346\275\213\335<\275\331c\213\274%\027W\274\334$R=a2\250;(\000\266\275p\246<\275\014\3717\273Q\006?\273`\243\214=N\016`=c\343\006;\257\371\275<%\245\n=\272\220J\275:6U<\336\336\323\274\232\252\215\275\016\325\002\275\217\031\327<\315\355\323\275\313\217\203\275\216z\303\274\017\261\233\275\030\252\322;\t\350>\275L\222\201\275\357d\244=o\360\267=\021\312\266;2=X\275\204\0324\275\206\232\212\275A \356\273|\355Z\274\240{\312\275`&\362\274s\332(\276=\255.<\235@\222\274\231\004\003=\311W2<\335\003\t\275\331\255\222\274p\310p\275=!\232\275D\311\037\275\007M\265=\373m-\275\376\025\247\273\\2\352=\335X\306:s\344%\276\256S\252=\0012\206<62\235\274\317\246\214\275\'\222\323<\003\262\327\2757\336\226\275=M\365<Qxq\275\262U\241\273\260u\250=R\034t=\372\203N\275\353cm\275\377\366\314\274NO\031\275\035\310\236<\034N]\275EL\215\274\026uQ=\035J\006=\357\017W=ld\325\274\273h\003>I\006l=\\\263\260<\215\037d\274\360Z\r;\271\331\243=U%\343\274VO\240<\033PZ\275\373j\027\275@R\250\275\332\t\030={\353\240<\037\227\327\275J\244\177\274\373P\n\275\270Z\354\274j\2732;\217\314*=^\257i=\370\264\356\274\365\371b\273o_(=\377\352\030\275\224\366\222\275\265+A\275\213[\275<\200\343H\276\320]s=\225\000\331\275_\242\365\274\355\250\213\274\305\252\321\275\222Im\274%\315\331<\002m\003\2769G\200<\213\256\204<\240\226\266\275\021\307\305=\0306\320\275d\324\266=\323\245U\275\030y\236\274\332\253\203\2751r\267\274W\024\'<\217\024X\274A\336\n=\370\037\315\274\254\373\235\275\032\360\035\275l\242\302\275\340\276\372\275f\010\313\275\331\014\261<\226\270e=\017[\006\274\375\024\366\274\251\357\335=\001\023\306=8\316\250=D*\303\275\302\306\316<\220\0219\275\220\336o\275\355n\022=\371\202[:;L\325=\230\2618=\354\367\271\275\221WB\275\r\035\234=,\213\257<\204uG\275Yv\365\273\301\263e:[-\031\274Qs\231=\256\372h\274\365q\307\275gu\344\275hs\206=\256?\221\275\345\230\240\274f\025\333\273\271\235.<\315\371\222;\315\372\301;w2\210\274@\263\231=\232\240\200\274\320j\014=%`\260\274\2565z=\333U\225=\216M\240=\007\250\031=\020\365\256\274\321\003\010>\365\026\221\275S=C<8\227\036\275\307\334\353=\347Y\321\2751Vc=\027y5\275.;1\275Q@\271\275\334L*\276W\253F\275\324\260\354\274\214\275i\274\302\014K=p\226\214<\037!\244<\307M6\2742\251\035\275\305\272\251\274\276\354\306\274\003\177\327:\356\274\243=\344\331`=)\233\352<\027\"\261=>\322\241\275\256\241\004\275.\033\375\274\345q\247\275h\334\262\274f\000\207<tGG=D\236\360<E[\255\274\220\200\204\275#\000\270;\262@\325<J\375\031\275\371J#\275;\356y\275C\n\272=?\273\346;]v\222=#{F\275\241Z\217=~1\310=\352\361\335\275W\017\037=\326\317\365=\005\3430\275\373<\241=\333\376#\274S\361!<\361\276X\275\236\334\250\274\r\000\247\274*\212\247=kA\206\273\274\024\035>\026!\237<\n\340\306<\265\2003=\214\260\221\275\262v\340<c\307\231=2\035\007\276pA\224=\240\256\364\274\306\264\374=\366\037\302=\325\032\232\275\3206\335\274\035\331\216\275\337\304w=\"\364\227<\374s\002\275\257\356J\274A$\227\275\272\244\003\274?\211\227\275c^\037\275\267[\236\274\237^\243\275\274\216@=\027\264\367\275-\251Z=\"\317.\276\354\344\003=\207\273\340=U\270B\275\352=\210\274\255\305\241\275\177uD\275\346\342\377<\211c\305\274\364\235h\275\r\375==\201U\301\274\223~\006\275\311\340\300<3N5\275\007\270Q=3\005l=\253\301:=\234\321\021\274)3O\275\341*V\274\333\233\262\273#s\014\275K\276\r\275\3102\006=j\333:\276\246\316h=\340<D\275\240\342\270\274\373_\032\274\024\022f=\364\373\241\273\224\367`\275v\245\355\274\020\370\232\275\207\267\221\275\344\001N\274\213\251\246\275D\337\336<\206\335\022>\317\005\226=\325P2\275\005l\240=\026\3731<\224\t\004=\005\000\024=\315\203\337<\370L\r>\233K\244=\204\266\210<\335M\260\275\035;,\275\222\205y\275[\311>\274\277\375\225<O\322\261\274\312nR<\320\006\244\275\362\234\220:\323\275O<\274\344\216\275p\001\336<Gft=\370\311\231=\320D\234=\010U\370\274\336\264\352\275\\\326\343</s\367<\376\336\223\275\n\266t\273\2626\000=\321[J\274\327\272^=&\314)\272\2131j<\352\247\032=\260\303\243\275\006Z\314\274\327\034A<\264\320\256=-\231\224=\233\3039\273vn\273=\014\017\250;d\036\307\274\355w\265=\222\376\313;\"\271\247=\367^\017=\3655\206\275\340\335_=X\336\022=43{;fm\t=\223\262S=9?\022>i\340\254\274\233\261\270\275\313\3273\275\363\354\267=\376f\000\272\214%\021=2\346\205\275h_\033<\231\303\321<\376\230\247<\233\344\361\275\3771(>W\316e\275\010A\r=\327Q<=Ctj\275\307Gs\275\027>@\275\027\374\027\276R\337]\275Fg\217\275\203\357\221;H\343\005=L;\246\274\005!\305\275>dW=&\270\006\276\267\335\340=&Rl=\376o@=\333\325\035\273\303&?>~\3354=B\207\327=\303;\371\274\231\254\246<\'\257X\275\317_\020\275\255\245|\274wr\244\275\373n\207\272\206\303\254=\226\233g=\025\333\213\274\223g\275;\271\245\202\275n\032d\275q\371\252\275c\342E\275\363\226\325\272\345\277}\275\260V\315=T\320a\275jR=\275-\206\032=\332/\223=qE\347<\271\355\361;Fx\027<2:\352\273B\026\002=@\322\211\275(\232\226\275\355\t;\274\355\304F=\3549B\275\274\210\023<\016\303\243<\253`M=Oh%\275\202\177\261=x\t\005=\306\265\003=\013\374\256:\370.\352=P.\317;uJ4\275\272\221\260=\213p\361=m\023\t\276\031\330\204\275\310\300\273=J\361\222\275\210\340\354\274\022\031\034\274*\r\021\274\010\364\302\274\315i\207\274\250\206\203\273\256CW=f\004\224\275\312\234#\275\241)\211\275\250C\231\275\206\203c\275\366(\334\274\t\371 \275\237\340i=7^\275<\013)\275;\213_T=\330p\225\2750E\335=kn\225\274\217\260u\272\230\354\341<\350\323~\275ys\024=\306\341\220\275\233Q\005\274\277\023\333\2744\023\270<z\326\253=\031\300\245=3\320\327=x\244\353\274\004n\331<\032\244k\274M\362Q\275\313+\225\274c\025\030=\013\236\375:\266\260x\273\'^\312<\242\277c<y\247\036=d)\226=\273\375\013<\305Y\216;\265\257\353\273\302w\307<\246+\243=\037\377B\275YX\210\274\321L\240<6\226\000>\342;&>H[C\272\352\002K\275\353\2639=O\2213=B\020<\275\252D\224=\303\246\224=]e\265\2755d,=\034\003i\275\032\213\314\273\263\017|\275!F\277\275\226\250\260<\356\325\346;Bv\203\2754\273z\275Z\315^\273\365\032\277=\222\253\356\275\263\237\214=\373\036\245\275Ne\035=\031A\245\275\017z\025=E\315\247=a\247\225\274\207\274\227<\233h\373<\355\352\354\274\246\214\353<\205\327\r\275\202\360i\274E\255\322\274\313\220\232=\22110\275s|\\\274\212\362\343\274\300L\234=H;\366;\341<\223\275\227;8\275\350T\364=e]\353=\307\332\233\275\353\367_\275\260\241)\275?\026\220=\254\213\017\274\371\037V=Y\223\240\275\362/\260\273\265eR\274\254\355\016>*\354\224\273\337R\361\274\225\355\032=\215\273n\275|\317Q\275\227\036\r=\227\374\211\275\246D\277\2756L?\275\017!\307=TN\212\274\336O\222\275\370(\\=~\261\341<\277\207,=n\2646\275\342\004\034=\n9\031<\245\355\177\275~,\340\275\260\'\225\2750\255\023>\004\2623\275O\177U\275\366\234\365\275d\331\241<&\205\256\275\325\243O\274us\235<\313UM\275\346}$=Lc\211\275=B\035\276(j\276\274\337\364\225=\216%\033=j\321\325=\3424\337\275\022h\307\275\025S|=9\267\226=\256\014v\275n\344-\275\240\206\207<\035^\301<\324h\024<w\314\005\275k\232\356<V[u=\376S\301\275\316,\034\276\362\307\214\275\264\251\241\274\272Ub=5\310Z\274S\343\r=[\250\247\274\021Mo<\300Y>=\237\222(\275\375\226>=\010!\326<p\340\242\274\006\022\273\274\022<E=\235=\202\275\007\234\223\274k\224\275=T{\223\274\332\207\r\276\231c\247=\331O\256\275\306\"\007\276\301E\230\274\225\277\262=\267\356\205<\325\261\205=y\343\340;SJ[\274\3050\001=CV4=\232\r\007\274\232\343X=\251@B=\243\007\256\274A\304\306<\331\370%\275,\327\367\274\246\353\246\275b\020\036=^L-\274d\237~\274\275\377N=+\213\205=,/]=\016\252Q<:\367\251<gM\273\274U\004n\275Qh\333<I&+=\325\365\325\275\235&\010\276\204\313g\275\210\210\203\275\307g\234=q\371\\=Y\271@\275\241\307\220\275\375\035\007=]j\227<\250\360\243\274\227\205\331\274\323\250=\274T\227z\275\232\"\027>\324)\032\275\346\354\3448\232\237\230\274e\024T\275x\031\342;\313Eu\274-\002\202=\255\235.\275\n\262\205=\277\226N<\316*\006\276\010hN\275]+|\275\035N\256=(C\272\274\\).=\364\303\013\273\036\211\004\276\323\027\006\276\351q\265=V\304\253\274\207/\022=\257\337T\274\244[\017\275:Z\344\274\231Y\215\275\3275D\274AK/=\t\356\351<0\345\255\273\001L\257=d~\n\276\307\203\227=\026\006\202=\244\274-\275\355\355i\275\324\003\211\275\326\247\246\275\036\226\231\275\203\205\244:\t\262\204= I\336=\230\000\344:{\257r\275\016l\254=\0227\237=p\001\254\273\231V\032\275\203\266B\273b\265\263\275\017-\253=T\215\017\275C\377\275<\002\273\376<~x\320\275;\221\325=\254\266\275\274\355jF\274\266\254\346<\200\3451\275@\210H:YT\231\2759z\352\275\014\340.<\234z6=\336\034e\274)\001\001\275\016\376\276=,-\363\274r\312T\276\230%\216=\257\262\265<\314:[\274\004$\247<\023\250\207\275J\220\263\275n\265\333\275\347O\343;-\251\010\275\311y\317=\374\246\254\275\"\321e\275\006\310\227=\311\365S\275\346\000k\275\021\230#<\227\241/<\016\247\245\274\210\211>\275\213%-\275\303;i\275\204\253\240=2&\260=\336\022s\274p\224\211=\004\374\325\272\345A\025\276ArG=\\\004\240\2741\335_\275\217\336.\273\306\253\024=\366F\005=Of\215\274\345\t\223\271Ri\206\275\245\n:\275\324[\221=d\270\222\274i\032\265\275\255=\204\273\271\256\363\2752\212V<\276\222\316\274\247M\r>\037U\231=\2769\242\275!\020\231\275K\371g\274\216h\241\273\003,\210\274\206s\031;6\337\260<\"\331f>\232\213\001=I\277\005\276\362-h=\342\364l< \224s\275\227qU=2\310\236\272\035\340\372<\004vu;(vB<`\227h\2755J\251=\371\244b=\322\253\377\274-\300\273<,\2213=\260\211\372\274\336\036l\275\221\244\204\274\255\376\016>n\270\353=v<6\275u\261D\275p\207\025\275wnd\275h\213\204\275\025\264\307<&Xa=\030\261T\275 \003\202\275\001\\\211=\251\353\335\275\\\331\036\275e\213k\275\315\365a\275N\351H\274m\336\360\275\247\3137\275\204\000T=\2545\016\275\014Y\251<#j\200\273\034U\255=\322hD\273U`\261\275G\326\032\275a\330C\273\216\373\216\275\307}\313\274\343\177\212\275\025\333\n>M\233\312=\367\000V=\021\345\010=|\350\312\275\330_\307;v\tr=\362\250\324;L\376\262;\025\312\003\273J\245\373<[9\031\273(\013\323=\355\2617=\312b\276\274\0014\223\275\310\204\203<\256t\226\273\023_\227\274\244\300E<\205\353E=\243\307,\275\005/z=\274V\235\275\365\273\035\275g\224\321=\304,\272\274\330\313\324=7\314d=\332\tE<\270|\002>\343\036\246\275\023l\241=\244<\276;,J\031\275\231\002\242\274s\240\241=y[X\275\205\254\227\270\204\306\334:\270\307\212\274\0046\250\275\336\2235=?\337\037=\217\363,=\273l\207\275\361\313n\275dm\245\275\260\370\363\274\310Fs=%\365\204=B\310R=_\272\216=h%\225\275\247\277\320=\031\006\347\275\022j\003\275\014<\345\275\330`\332\274\306pg<\206\302Q\275V\013\222=\361\204\250=%+E\273i\252\307\274\306^\350\274\366b\306\274\264\242%=\270*\347<:$\247\274+\311\n=\'0\247\275\245f[9E\271\234=\t\256 \275i\263K=d\022\363;\274\351><\362\214\227\275\213EJ\275=\000S\275\322N\261\274\300\344\231\275\333\222\226=E\326\010>\243\262.\276s\372\372\274\251\254(=\230\324\272\274\262\211h<\304\027\344<\255\250\267\273\271\003\256<g\317\314;\276\247l=@\026\241\274-\375\374<\231\333\211=$\332\242\273\200\034\246<7\023D\275,g\316<\214*/\275/\037\316\2746\322\326\274\373\020,\274\023\022A\275<\307\307=\275\321\237=O\r\254<+\231\326;\262 \217\274<\0357\275\357z_\275\242\303\265=\226\311\313\273\313\203\207\275:k)\275,\202*=O\363\330\274Atc\275\263-\t\274\241RL=\323\321\341\275\361.\240=\235*A=\207C)\275\177\261\242\273\234\212!\275\206P\260\275w\212\023\276s\002\256\275F\235\310=\274\307\354\274j\357\004\273\0235\356\275H]\007=\322@\000<p3\221<\325 \223\274\213\271\206=P\241==\246-\346\273\t\251\274=<\201\330<q\375v=L\350\213\275y\177`=\365\374Y\2749J}\275C\200-\274\217\026\"\276\276\245\211\2749u\350\274\3603s=\236v\242=\214\037p=\211\205\236\275\251m\326<Q\376\357=M2\244\274\346L|<\373\223l=\352\024a\275\214)\353=\0278\257\274Nu\335;\214YM=\013\004\320<\236\235\350\274pq\212\275Y\254\220\275\321\266\240=Q\367\'\275\300\274\231=\266\027 >\233\236N\274-\257*=\257\"\002\276\366T\234\275\371\261\231=\035\235#=\026\362\013\276\277$\311\274n\227H<\n\216@=\330\327\210\275N\205\261=4\240c=UnD<c7\262=%\231\214\275\017\036C\275<\202\226=\373\303\000>ZE?<\276\005T\275{m\217\275\031E\241=\016U\371\275\\r*=\032\370\324\275zA\334=\332\037Y=\3427\251=\365\244/\275\250\301\221\275(\340\017>\242\233\233=\341\311\307=\376\257\277\274\357\031\322<\243\322\361<\000\236b\274\005H\206=\327\r\220\275\016~s=\033\266\0268\025\031\000\275\226\367\225\274ME\231<]\337H=q\211\304\274-F\211\273)\207\363\275\240\263\274=\214\313\341\275\327\2647\272u\372\342\275\252\333\241\275\335\320\241\275\367\211\202\274_\200o=a\032\006=\212\305$\275CSg\274vI\206\275\326\240\260\275\370Bh\274i|-=*{\302\275~Ec=\313\252?\2744\304\202=$\372[\275\306n5\275\317$g;\337\301\215\275\247L\362<\314\004\277\275Q\177k\275\335\215\220=sm\262\275\330Q\276=2j\366\273\325\303\202\275^_\326\275Ej\206\275\270\250\030\275\327\341\347\274\366/\032\275)\254\267=\215.\333<Ie\034=ZN7\274/F\r<\351r.\275\274(R\274VV\262=\331k\017\275\336\305\254=\245=@\275\001h\201=\257c\323\273F\337x\272G\016\372<Gq\265=r{\206=\314\220J\275~C&\275\010i\275<\365)A=\345ZN=\216\254A<k\007\234;\201\213\254\275\006o!\276\235\002\243;\252\306p;\3664\301=\"\035\304\273_\226m\275|\351{<\316\215a\2750\3720=F\010E=V\301U\275\221\370\001=\212AZ<\245\345\365<\355\363h\275\020\177v<\033\330\310\275\335a^<T\353=\275\017o\t>\361q\202=E\007\253\275\311\310:=\035\304\226\275z$\024>\200\330->\302\345J\274(\261\364\273T9\212=\216\250\373<nlp\275\373W\027<v\304\014\275\035\270\266<\374\013\024>B+\036=\352\311\221\273\330T\204\275\315t,\275k\014\207=\\&\036<dF\302\275\276q\265\275\242b`<\n\340\261=+\337\243\275\001l\240=\330S\025\275/^`\275\311\261X=1\037\244=\006 _\274y\327y\274\023X\371\272\371\334f<6{\367\275\325\006\204=\267\201\336\275\033\210\252\275W\036\023=\215\355\366=\241&w=\257/\202\274\3718i=\376K\272\2751\324\331\274z\001\245=\024\207\227\274U\276\242\2751:\314=\322\032\263\273\023\006m\274\302\212\230<\024\2548\275\005O\204\274\242\243\333=\025\353?\274\307V\204<\243D0\275\225\367\241\274\005V?<\225\177\013\275\203h\213\275\267\320n\275\014be\275\271\332\257=\370\':\272v\377\242\275\372:\342\274\375\014\371=\375n\305\275,\013\307=\331\347\030=G\014\304<?\234\341\275+\351,\273\210\323\257\274X\270:<\240#\360=^\201\231=\257\245\337;o9\246=e\033o=x\026E=\367\213\274\274\021QY<\350\332a<\261\354\"<\006\234\320\274\304*\275=\036\244\207\274\037\003^\275\251\352\007>4\231)=\333\254\361\275\247\351\024=@\213\200\275\371\356\n<\243&\023=\352\340\'=\034\306\263=\210\322\r\275\231]\301<)[\025\275\302\254\002=\226KN\275\211]|\274%\303g\275\345\367;=\227\254;=\361{\304\275>\017\240;\026\213\204<5\204\307=Se\200\274\027\232\355<\322\"\240:^\262\311<\334=\354\275/u\277\275\324\\ =N\235\"\275\377\307J\275\242d\274<a.\270\275&\316k=\020\342\217\273\324T\337\275@h\264\275\204\251\200\275\220\216\301\273\031\341c=\242\233\334<T\275\256\2756j\216=u2\225\275T\017\214<z\204\221\274\277b\325;\243\276\035\276\212\r\326\275Y{\364\2745\335\306\274\251\r\026\275\312Qv=\270\376\006<>D\337=\370F\323<\'\346e<R9\004\275E\t\314\275\304\270q\275\256\004\204;\331\263/\276\261\0064\275\376\177\253;\327\336*\275P\326\237\275\365\351\253<\244\237(>\2437-=\036\243\316\275D\365\032<\302Eu\275\265\265(\274F\306{=\272,\025\275\366\356\275\275\362 \333=\325pS=l\024\335;\333\034\220<\254\371\006\273\254\236!=\230z\345=\t\023T\275\235\337\207=\354w\026\274\305\t\224\274\034\347G=C\314\331\274\310\3158\275\331\035B<\207C\276<\330#<\275,i\375\274cE\206\275 (\346=\266\260\263\274\335\234\254;\362\363\251\275\243\031\352<\00695=\373E\351\275V\264\352\275\344[\307\275]A\221=\260\356\271\275\212\251\352\274\337D\006\275\240\266\334;\364>o=\"\207>\275\345\016\202\275\373\331\306\274\265\240)\274\035\230\n\274\037\242`=\210y}=\303\267(\275\277H\301\273\016\316\023\275\347\346,\275\345\031X\275q\277:=JWA\274\216\274\357<\3129$\274\376\366B=M9\272<\361\332\352=\240\323|\275\212\276A\275\234\246\300\275{\350\203\275\306\3103\274\026\tz=\034\257w\275`\200\316;\366e\007\275\025O\332=9\215\036\274\231\273)\27547\007\274viy\275j\236\034\275]\267\207\274)\202\227=\350/\000\275\271\225\233\275\242V\247\274\2553\023\275\351v\200\274\264\016r\275\001\035\236\275>\\\034\275\260\222\341\273\325j\312<\227\304)<\330\304\277<\025\272\240<\252\275\357=\313\037_\274\353\222\362=7\374y\272-\344\313=\307\343\265\275\3511\355<_\375x\275\177j\305\275\232\344T;)H\224=|\204x=\221M\265\274(\236\024=\263\203\252=\005\251Q=\030\3320\274\251\206\">\326\350\227\273\356?\227\275\275\300\221\275[\370\311=@\276\276\274pM\r>1\005\030\275\035\347\\\274\'\235\377\275\333\215\302\274e\036\320\274`[\014\276w\305e;\334a\336=jF\020=(HQ<\350\244\246=\257\347O=\024\347\237\2756\001\236\275t\324M=\254#\022\275;\367\226\271\037\247\213=\215\256\374\273k:\334\275\320\230_<r\013\304\275q\350\231\275\304:k\275A\321\257<\276 \271\274\3629\022\276\376\277\236=\021\263\346;\364\004\305=\345\260\016\276#\220\366=,tr\274\257\200+\275\372\233\254\275\352f\310<\327\213\033=\200E\016\276\270\271\206\275b^\n\276\314N\247\274\366\344\246\274\341\316\225\275\030k*\275_d`=\223\234p\275`t)\275$\201\013\276\030;\372\275\026\201\215\273Z\315\352\275\352\356\243=\223\276\026\275\312=\032=I\002\274\274\317l\025\276\363lZ\275\222#\276\273\020k=\275\"5j<aVK<I\277W=\342\206\215<\255\372&=\002\206\026=\235\217\211=\2617\034\275O\035\201;f\331U\274\346\325\352<\320\020\020\275$\247\232\275,\036\037=\271\276>\270\260\207\313<P0K\274\357\226\224<\007\333q\274\004*\257\273\321\371!\276\0148&\275Ozh=\361\014f=.u\321\273\240\256\373=\004{\236;p\376\036=\037&H\275\022\003\365<\325:\324<\206\302\374<7\0168;\316j\261\274&h\003\274F\031\230\274\221\315y=`)_=Ib)<\342\021\351=\333d\030\275\254\030\222\274\"E\205\2753mK\275\200\026\377\273S\035\223\273!\324\312<\274\216.=\020\000\276<\335\0320\275\030(\325<\333\311H=R\014\005=\215\302\032;\247-\033\275\021\300\305\275\220\0043=\t\005V=\323z\355\275-\202\030=\222\324\326\275\375\236\265;\272\323\273\275\300\336\275<\"9D\274\321\2573\274\330\255\002\275\371s<:\000\001L=|^\334<\313P\t=(\2349;\326;\025\275\251r\247\274<\206\203\273\32013=>\363\344\275Q\277\262<\003\026\005=\342\200\343\274\332\200\205\274\342$\035<\3478\331\274\215p\356;\307K\302\275\243\355\016<\'\251I=\212\016N\275\216#\354=G\370\243=\207\022\205\275\246w\037\276\361\211\205=d\250\206\2757L\014\275\215`U=\221\343\300\275\273\000(=\032)\262\275\243\270><\027z\333<y\277\213=\300E\213=|\223\314=\375\256\215=\343:\031\275\247y\242\274^C\242\274l\332\231\274\262\037\260=\332\231\220\275O\307\026\275b\330b\275ZY\024=\350Ct\275\014\034\300\273\322\200\225<\375H.=>\025\306<\n\242\364<\226g\350<G[]=\266\177\330\274i\273\314\274\237/%<\310\200\201\275\361:\027;\235\312L;\331\310\335=\373m\231\274\003\253\253=\311y\206\274\357D\276<-\373H=\231*\262\275\252b\204<B\334\213\275\215\022*=\036#\325\275\027\356\326\274\3361\275\274\367gD<\345\221\026=c\235\001<-,\254<rr\253=\310\025O<\020\326\017\276\275(\\\275\365\221\247;\024\237p=\372\373P\2750\231\311\273\223B\250=L&\336\2730\277\312\273w\326\204\274q4\273;P0\'\275G=\340\274?*`\275\226\275$<\375\307\346\275\t\341\014\276\022\353\017=\0242\033>\325<\306\275\351T\010=6\001\325\274\213\022\321<\267\256\305\275,\340d<\333k\017=\332\350\272\275>\201\207=\2561\006\276\345\035\376=z=\326\274\360\233\340\274X\251\221\275\3255\303<\206|\347=\257;G\274\336\034[\275\006\261\253=):|\275\300\025\010\276T1\034=\235\201\354\274\0077l=\304^_\273\240\243O\275\375\243\352\272\037@\310\2759\324\340\274\240\362\241\275Nr\327=\2568\271\274>.\365\274\031\326\'=\'.\226\275\252n\351<\003\002G=\212\033\350\2749[\257;\212\037.\275\305\321\224=\374\326\274=n\006\025=D\026F\275\205\027d=\317\305r=&\251z=\335VV<\202\215\206\274\'?\205\274\347\337\225\275\220\336$>\246t\003=\350\237\034\274\210\317\256\273\216\367\253=\277\027\202<\370\203.\275\030X\250<\030\026\\\274-\341\204=\270\237Z\274\334\243\260<\366\027\257=H\307L<\234\246\005<\025\220\002=\360\270I\273%pb=\272Zx=\257\376A<\335\366\003\276`\257\013=mx\031=\375\016\251<\253.\275<H\357\r\275\235\367%\274q\305\n=\267\2610\275\225MR=QU\337\274\260\311\032=\200\277P=\277\224\341<\022>\314=\351[\203\275\355/x\275\350\027\374;&\372\314\274:\251&\276-.\216=\377\251\351\274\026\366\307\275\201\217\005<%]\245=\177\n\273\275\014\207\333;\312}\351\274\243\324\003\2767\306\313\275\324\000*=\340\014\253\275\241\3175<\355\004\247\275|\240\237;#i\214=\377 \252=\376\315\215\274X\017\004\275\376\2641\274\374u\270\275BA6\276\0302`<\014\342\273=t\322\236=^<\273=\265R_<\210Q\276\275\373\036\001\273\203#\003\274\210\221\013=\021F\252\275s\031\226\275\213\247\202<\305\374\r\275`\'\236=\036\262\356<4a\370\274=\335\332\275\207\327\007\276\231\023\264\274\206c[=\352\244]\275\364x\235;j\221\273=\354\020^=\177i\221=\3243\335\275`5H=\260,\\\275F\000\250\275\232e\032:\316\202\247=\257/\244\274\3145\207<\336\0225\276\250C\255\275r\241\226<#\"\002<+:\010;\007oe\275\244a{\274\272\227%\274g[\233\275\331\266\034=9\250\277\274\363\327\201\274\332\314\212=\343S\245<3{G\275\345\337\203=\304\360\352\274Pc5<\316$\222=>\362\321\2742\240\254\273\323\241\273\274\353z\277=\010\263\312\275\363!x=Q\214\252\274(.A\274\240!\253=+\362Y\273\266S\276<\003!p\275.\316\t\275\355\314e=SZ\254\275\271\360\247\273\272\213k\274w+\034<\023\240\035\275\007\214\257=\031nH\274u\264i<b\233\030\275.6\003\275.\241A\275N<\220\275\251\202\207=\024\200\237<\203\336;\275\351\260\241=\352m\354=\333P\023\276\306\313\246\275\265\214\320=\344\207\204\274q\315\237\274\210\256\022\275\212\204\251=\371\\h\275l|\251\275\355S1=\355\236T\275\310\242P;\004\034F\275t$y\275}\343(\276\254\010\207=\013\220P<9\253\223=\244\315\030\274\031\313\301\275\232\031h;*\246\302\275\216^\262;\211z\211=\010\373\260<M\234\346\274\201\023\340=}\322\263:p\220\017=\366a\272;\030\266\272=]M^\275\305\313)=\\_\301=\312\211?=\260\200\216<\003sb<\357Jj\275\007\233\013=F> >\261\320\243\274\305\316\303\275^\t+=\221\361G\274\270\357\216\273\203\264T=\230E\224<\220\256\303<\277\316\212<\352\033\212=8\323\204\2742\246\263=\206\325g=r\020{\274\027\324\214=\301\260\222<\214\362{\275\023\\\217;\246i\333;\210N\031\275)\205\316=\352\307C\274\266\226&\274(W\210=/\252\003=\303s\277\275iB~=\032\204\225\275\310\360|\275i\341[\275\037\311A\275\301\200M=$\267\254\274\265\200\017\275>\212\006=\226\330\217\275\351\355\223\273\367+\227\275\3665Q\275\212\266\214\274W\377\030\275u\255J\275\375\324\243<\321\000\004\274\277\270\254=\022\005\007\275\377p\265\274\253v\356\274\316\t<=\202@6=\212\324\342=\235\207\247\275EEK\275\301\220X=\256\314\245<j\240\326=\250\361\216\274\022\022\243\2755\261\005\275\351\340z\275\324\334\233\274\372\354\236=\234\025\274\274\332\275\004<{En=\251GP:G\262W>\345\246\212\275\340\312\031\275\017\0247\275\\\346\357\275lC\321<:&\242; :\022<\020\271\r=L%\030\276b\336\214=\355\347\220<\001d\236<\272\246N\274i\304\030\274N\316\234\274\224\201\343\275FCS=\370zz\275L\373\024>\304Lm\274\307I\345<\313\330\313;)\225\321\275w\026\220\275\201Qw=d!c:\212A\031\274\2226\005\275\375;y\275\222\031\271=P\330\037\275\002S\314\275R\016\t\276\275\242\003\276\315:\217=ba!\275A%\035\275\370=R\275\026\2079\274\210\206\245=d\222\204\275\266\365\204<\320\233\213\275j\267\203\275\027\225\010=ba\202=n\333\304<\214\022\234<\263 \310:\013g)\275\313o\210\275*7D\275alU<m\025\022=\222\305\305<\277T\370\2753\272?=\311\001Q=\302\347\032=\3065\022\275\373\240\024\274\324\216G=X\365\004\274\326Y\230\275\240\247\202\274\264`\224\274\264cQ=#\322\206;\244\204{<u\265\333\275\250\237(\273\027\001+=\315\033\005\276\242X\344;\270F\2649\353\026\215\275\355\357\310;\312\263p\275\213y\300=\366\352\343\274\222\353\211<\025\224/\274n\354\363\271\373R(=\303\332\226\2752\0170\275\352\230\301=\237\324\211\274r\305\251=\244\326\007\275@\017i\275\216\327\214=r\210\026>]\024\324=q1[\275\007\304\016\275?i\235\275\365\334\020\275S`?\274\r\213\231=*\000[\275\354T\273<\316%m\274p\351)\274m\352\316=\373#f\275-r`=\031\016\000\275\005\224}<\323\256P\274#\356\232<\245\377\372\274\312 \303=\2373x\274\321\367\204<\274\2422\275\200\322\245\275K\220\301\274\217zQ\275\261\2704\275)\200>\275\244L\203\275<\335O\273\300\'#=\201\277\313=G\242\020\275\346\230\244\275}\017j\275\317\026\247<\016\354\232=\010u~<\333\021\376\274\366\253\273;\250|\306\272\315\365\216=$\343\204\274\266\201\205\2754o}\275\272\315\367<\253\310{=\200y]\275N\374\024=t\313\341<5\366E\275?vp\273\323\337\236\275\314\027\322=\177[\256\2746\232\212\273F\374R\275\0231\033>D\277\317=\262\376\375<&#\253<g\226\312=;\352\177:u\370\323=\035r\261<\230\346\212=\333{\312\274\205\317\000\274%\3454\274A<\025>\007]f\275T\013\345<\307\005\314<\366\204\353=\241!/;\310\375\231<*\002\017\275\354\246\336\274\t\007\017>\252\204\367\275c\252\220=\223\226}=\363\373\225=\313\213\226={y<\275\016x\257\275\005\014U=\336_\256=6\017O>\3546\210\273\023`\244<O\016:=\026\211\033\275%\020\037=!\330\202=-L\211=D\026\261\275k\036\364\274\201!p<\014q\024<\207\2355\275y\032\207=p\007\014\276) \346\275j\335\323;a\237\'\275\222[\n>\n\213\263=\337\003\201\2749I\211\275\377\242j<J\336z\275z<\220=\037\275\204=\246\260\365\273&\344\023\274a\326\373\273c0q\275\321\034\221\275\241x[\274M`\370<5\221\024=\317O\330<\373\351\356<\246\207C\275A\n\340<\3422q=9\tM=\212\270\206\274[e\233\275\204_\214=\317\206i\274\236\377\340\274\177N\350;x#\306\2758#\203\275\315\026\230==\225\250<I\265\247=\242<O=\273s\022\275\027\032\304\275k\233\">\3577\350\2748\221\247\274\302e&=\302q1=J\245Z=\22091\275e\355\343<\363\3139=\204&\222\274\271\241\316=\002\360?\2756\346\005\276.\277\363\274\271\370\221=)\032\234<a\301]\275\366\351\203\275\030\010\022:\313.\031=E\267\274\274\207\350\214\275\325\374^\275Lr,\276Pq\250\274\216\305\221\274\357\2629=\\\000Y=sY\216\274\376\023%;Tt\261;vX\233<xP\r\275:\220\207=TL\006=M\"\230\275z.\203\275\\;Z<e\027?<\226K\340\275-\373\370\274_.\201\274}a\267\275\210\301y\275^\234\364\274t\260\254\275)\247\033\273\201U\316\275\212rI\274\356D\344=\202U\005\275\210?)>{&C=\356\334\206\274Pf\002\275\360\005*=e\3575\275\007[\261=\326\347Z\273\213M\004\276T\010\n;\031)W\274\343\243A<\244\005\246\275\"(\032\275\301\324\331<]\276\315<\024\214\254=\"R\351\275\333\264F\275\207wk=\206\214-\275\341\304\332\274#{\337:4\013\201=&y\r\276\024\250\316=\236\332\022\275!\007\r\275\321\360\022\275\355\004\007=l\332\320<r\360\312=5\241\212<\246\032\335\273\226\361\024\276\252\340\021\275\2771\207\275\377\332]=\006\025j=\237\346\210=\000\357`=\2264\245<\tp\003\275\360\252\311\275\271\255s=T\262\312=\203\033?\275\204s\205<\016\002<=\277\263\311=xEn\275Al\260=\367\362<;\024\014\013\276\017n\246=\325\014\032\275)\316\233\275\303%\362\274\2567\336\273p\350>\274\323\277\341<\261P\246\274M\365\001=\332\222\267<\007\276/<\'\362\241\275\310\331\007\274\003\021\371<\017\006I\274\326<A\275<r7\273\336[\212=\306:\245\2741?\210=\246\210\013>\255\007\013\276z\227k=?qQ=^\271\225<\020\325\316\275\306`\262\274|w\321\275\315\327\250=\261\224\243\275@\212\224<<\0003\276|\002\n=YC/<R\340\022<\'\372\335<\300wS\275\242\277\207\274\323\307\372<\005\251\324\272\206\002\333\275&\207\255\275\207\346s< \215\201=2\")=]\262\234=\251<\202<\322Y\010=\345H)\274\247\303D\2720\013\233=[\255\025=\023\354\213=q\r\213\275\207;+>\272\026\275\275\270X1\275\231\236\240\275\313\237\033\276hR\211=pH\215\275(\235\340<\215\301\264\274\233\030\361;\312\037T\274O\351H=\245\300\364\274\314B\006=\250\247\342\275ZE\362;\273\026\220=\302c4\275\250\216\227\274\261y\231=\340\260$=~\257\224\274\355]\205<V\213\027>f\275\345\273\350E\253=\030\247\023\274o[\002\276\033k\032\274d\373\271\273tY\313;\013\326\030\274\r\241\241\274\362\2072<-5\375<\343kB\275\263o\256\275P\341K\274o%\247=!\177N\274i\223\327<\343\222n\275\375\303p\275P\224(=\231\013D=\231\321\256=&Y*=\311\'G\275e\352\346\273F\377\003\276\351\365\226\275E\025\227=\333(\022\274\023\263\373;IL9=\272\264\307=\035\324\267\273;>\234<\321]E\275\274\013\222\274\373.\026\2747\343,=\222\033Z=Q\350\033=#\003\247=\266;\013;?\235\311\275x5\032\275\303\216\277\274o\220\027\275\270\371\234<\3004\245=tl\301\275\326\372\017\275+\222\354\272\363\314\216\275\327\332\323<\367j=<&\013\324\275\024\364f=\344\006\222=\312b\202\274z%R\275\332W$\275\"\177a=\237{\005>g\0207<\030\323\361\273,y\235<\035\330\026\275i\"R\275\0160\241\275\366JV=\215\371\251=\302\277\315\275,\211$\275\234\007\t=\245\333\r\275v\"\206\2743r\246\274\007\325m\274\240W\337\274\261r\260;\363\327\364=\211\351\335\274\227_\266\275\311n\220\275\037<<\275\037U\215\275\337\350\000\275\020\rj=\351|\242\275pP\372\275\014\006\205=\243u\201<Z{m\274\332\206\205=\371\264q\275\030DE=\031\351^\274f\307\223=\245\025\243<\323c\334\275\rt\375\274\252}\3038r\310N=\025U\034\275\327\316\335\275B\207\220<p\253\354<@\246\240=s\374\361\275G\313\030=$\207\307=E\224\217=\177\016f<\267\033 \275\244\374\213\275\245\327\305:FG\275\275}\021\220\275\007\371\301;\256\202\004:(^\221<\223S\326\275\271.2\275&VP;\347\361\315<\366\024\020=H\312\004\275\265-\025=$\323K=\001\336\206=\364\364\271\274\301\206\363;\024Q\n=\225\032d\275(*\016\275\252\330\355\272\206s\276\274\316\375)=\310\\\250<+$,\274\210\2122>j6C=\2664X=\343\332 =4\351z\275\013\305\002\275\341r\014=7\261\224=\261\370\314=.\034\3139\257\373\341\273\364iH=\245\346\244\275\216\262r\275F\341\215<\333^/=(\274$\275\203\327d\274K\3409\275\202\207\023=\033\204k\275(\2308=\263\374^=\353e}=\314\256\210;\020\361\016\276k\t\377\274\000\316\256\275\312:\n>\361B0=\325T\224\274\2467\360;d?~=hn\317<\302\014\253\275\314A\251\275\"\345\253;\022_\231<\237>K\275\353p\316=\"M;\275\025\273\013\275nrf<\243\333F<c\032\307=\027;\036\276\034\004\203;{\tN\270\313a\205\275{\"\t\276\337[\313\274\331\006\004\275\034\000\201\274\024\020\222\274\225r\273=U\254\243\275w\336\353=\261)O=\272\247\227=\230f\315;\263]n\275\261|\\\275\205\r\002=i.\033=_\364\013=\177\220\014=|4\337\275(\354\327;\207\250\210<[\311\356;\272\366\211=J\211\337=#n\217\274\256N\256\274\004\216\234\275\210\205\242\273\266\025T\275\001\003A=\266*Z=\217..=y\270\232\275\'2\224\274\310\231\201\274\226\356\244<v\342\253=\031\240\322\275\371O\014=\242\257\000\275Tf\360\275L\037N\274\2474\020<O\264\000\275\267\241\343\274\265\271\021=BJ\204\273\336|\321<W5\250\274\352\031Y<\206\324\336\275\327%\320<\\\275G\276\317J\374<\362\205\025=\032\347H\274E`\007:\303b`\275\363\346\263\275\036u\277\273l{n=\230\351\231\275!EB>.\375w=s\016\220\275\\\2069\275\247\026\017\276\205\276\351\274\227\327\353\275\216\264\007\275\332^\002\275E\017\307<&N\223=SI\032\275\0221\211\275\370U\t\276\344\206&\2753\001:;\363\213\224=\016-\177<\246\017N\275\271\227\236<\277\031\366:[c\347\273U\216\2539%@\016>\323\230\240\275\016\002\372\275p)\244=%\364$\274\t\243\0169\263\247\203=U\362M\275-\\)\273U\332p\275\355$\334<\217\025s\274\261\251N<@\177\220;\365\t\250\274\265\204\033=\017\274\305=sn\316\275\\w\001>\371\244\253\274Rj\271=\252]\350\272a\004\214=\177\t\217\273\263S\306=\310\"\302\274\345\251$\275\213\355$<\2577u\273BZ\235=<m\327\275\234d\244=\250\345\210\2749\360\'<cl\230\275E\371\276\275\277\354\222\273d\005\t\275\016\262\333\273\003\243\265=\347\002\315;@!\340\274\254\341\237<\230~\032\274\014\242\030\275[d>=\333\026F\275\264~\236\274\261\037\227\275\241||=\302y6=&\030\224\274\234~\234\274\003\200\306;\017]l\275d\251\354\275\327xZ=>2\315\274\203\325\035<\207pi\274t\177\252\275\273\323(\275\377U\252\273;\346\230;^\212\033\275X\212\255\274\2109\204<F\\&\272\336\361\226;\343+\001\276si\n><\226\327;;T\364=\211R\356\2742$\006\276\364|\340\274#N\\=O\304\264<$V\251\275\363\244\322\274s+\023\274M\354\277<!\212\245\273T\304~\275\360\257\016\275|\034\344=\216\313\314<\254<%\275\tdG=*\271\226=\340\264\r=2Y<=\311<\201\274\340\212\347\274\364j\350<p\236\237=\224d\370:\252n\222\275\277e\005=\314\0221\275\244vA=\316\307\367<\276\003\005\275G\372x\275[\222\246=\303\365\204\275\275-\032= \003\203=\010\376=\276\357\205\216\273\001:4\274\023\235\237\275vv\333=9?\246\275\327\005\303\275\341\235\236\275\372x\334=\212(\221\275|\346H\275\337?+\276C\021g=\007\223\313=\315n\220\274Bq\371\275K\254\023<yd\274=\236\233B\275;Wo=Z^p\273\223Cf=\220\276D\274\223&;\273Y\212\353</z\240=\353\037B<*M\221<B\0051=\325H\2309\304U\356\274\250\223\377\274XP\215\273\001Ll;\'\021~\275hF\246\275D\307\240=|\370>=T,\334\274G\216\233\274\233P=\275\022\265\355\274\365\276\204\275\236\341\347\274\335\340\220\275\264Y$=ht(\276/\240\320\274\3576\374\275\352\255\005\275Zs~\275\245_K=\213R\274;\247\221T=/\033>=O\345n=\316=@\274P\240z\275\274\235\000\274\304~\372:c\330\032=j3\322=u\3225=]\336o\275\267/:=\373\3348<\rA\322=\372\332\007\275A\")\275\343\221\036=H\010\207=\017\301\\=*V\3449T\003\217<\004\246.=H\033\252\275V\256\311\275\037\350\216\275\265@\232\275\333\363\236\275l\205\313=\303\367\376=\023B\222=\237X\n\276Q\267\257\275B\001.\276\001g\000>\211u%\275#\244q=\251QU\275\205i\252\275 ]\307\275=\202\247\275\241\002==\014(\357;\024\251\236<\234\3418=/.9\274W8\205\275\376]`\275\303\261\256\275\327V\270=\314\241\221=\326\341\030<\343\367\004=N\377\033;tS\017=\356\337=\275\256\371\347<\366{\252\274\206\216F\275\375\321l\275K\333\201=\312\273\212=\'\327\350\273c\305\035\275*\360\310;\'\031\247<\202u:<d\"\033=\255\000\207=d\325\201=\211k\272\275T7\205<\316>\340\274\347\000\001\275\266\307\252\275\365D\025=\317\200\257\274!\321!=\350\225\260\275\016T\256\275\340P\000\275s\210\232\2754L\333\275\207\344\252<\313\256\316\274h\345\255=e\036\314\274\023\032\'=\324\230)\275D\303\252\274P\206\246\275I\262\026>I\241\202=\031\376\206\275\326\204\t=\362\303$\276F\330\372=A\225\345\274+\360\202\274\257\2436=\\\225\023\274\214\221\017\275\"m\242<B\324M\275 Bu\274L\256\001\275\264\304`\2737\234\211\275\002\337F=\272\324B\275\250\225\306\274\206\262\226\274D\216\203\275\226\353\225=jh\345\274\226\224\017=\255\331O<2M\014\275\035A\3336\221\016\177=J\300K\273o\302\233\274\3419<=(A\201\275v\221\207=\356\223\267\275Ly\371<<\202\252=\004\264\363=\277\246\035\274\264\364\254\275\243\"#=28\352=\304\030\215\274\335\227@\275KND\275\252\344A\275\252\374\253=\271\002\264\272\245P\020=i\246\241\274P4L\275j\250!\275bg\005\276\343\261/<\364\356\017\275\001\341\246=\310\300\016=G\202\000=\362\266\004>\213\342\030\275B\303\007=\312N\215\275`\226\r>\022\316&=\006\241\312\274\221cf=D\245\037<\"\364\257\2751\253!= \023?<\211y\315\275\261t\213=\231\275\317\273\365\005\375\274-\006\007>\315\371\314<\233g\023>\257\023\001>\344\212\014>\247\214\327\272D\351\315=\034\250\245\275\364\225\373<\263n\3349\377\004Z<\341\211\266;kX\000>\237\326\360\274H4\351:[\310\315\275\r\"\006\275F,\370\275\274}9\275_\310\027=\362.\014\275\373\226#<Z\327\034\275\320\330\n\274\333%\342\275\016\265\000\275\360(k=)\373\227=\307\003X=]\035\356<\"\201\010\275<\227\373<\270\373\230=\374\372\301\275\333\217\036<\t\226\362<<\017\253=\377T\004\275\315\022\356=@\202\024\275\300\215\300\274\341\034\250=\255\267\034=IB\004=f,\211\274TY\200<\2230%\275\246\026c\275\301M\354\274%fc\275\020\004n\276\366\032\270\273\014\214\'=V\356\252=<\' =\277\341\002\275\026x\213\274\250\313T\2741\010\276<f\315\210<\351\242?\275D\254\323\274\305\331\332\274%\016\031\275\016\377\021>\021\014e=/\210\356\275\276\016V\275/\351\350\274\006\241+\276\365\017(<\220\221\250;B\370(\275\270\004\234=,\004(<\t\250\201\273\177\200\323<t\\\n\276\214\340n\275\320Z\000\276/\344%\276\214^\250= \324|=4\316v\275\270\232\224;\357[\343<R2\247=v\004U<*=@<\366\360\253=q\312\200\275\\J\027>BT>;\344%\240=;o\231\274\021>2\275\326\022\236\275~\'.\275n\022\247=\\\271\334:\211L\342\275\331\245\005\275Y~+\275m\2654\274\010\264\375=\227\206\345<\307p)<\261nl=&\214\245<!\332\243\275\251\233\325\274\251\313Y\275\031X\017\275\177Tq\275$\326t\274\217\332\347<\031\232\331\275\017Z\311<\225LI=\033c\204\275{\030\254\2733G\230<\213\020!=\372\352\217\275\261\005\034\275]\213[\275=\276t=\216\377y\275\347q\317\2747\321\307\274Ib~\274!O\035=\357\336\261=\272\335c<C\304\311;\244\367\250=\317[\323<\\S\020\275B\357\215=i:\272=psn=K\214V\275\355\306\300\275\242\223\267\275\333\rI;\n&9=\256\261\273\273q\222\241;\342\202!\275d\221\016\275\235\271\231=\253K&\275\331\373g;QuB=\272\211\230\275\013\205\365=\235\352\244=E\312\035=\203,M=OB\367<\032\302\216\274\032t%\2741tc\275!s\271=&\226\"\275\021`\231\275\257\r\226\275\363q\370<\024jt=\\\010\r\274a^A=\\\010-\275g\221m<\324\034S=Y\331\021\275z~q=\2750};?`\"=\256\271\327<S\253\276\275\236\021\332<\354[\252\275\002\306\216\274kR$\275S\tT=\253_&<\364\267v\275\0135\213<\335\037\303:Y\204\243=\306@f\275\300\340\246<\022\222\235;\315SD\275\311\252]\275\204E\236=\374P\221\275\225\235\244<\320\254\200=\027\034\245<\254\344\242=\375\256\005\275>\222 =D\247\305\273B\025\215\274i\374\233<p\0300\275\322\231l\275Aw\025\275T\026a=\364{\230\275\325\321\354=W1\000>\027\002u=\356\2046=W\020c=\317:\033=@$(=\254j\203\275k\304\230\275K\2711\275\322\353I\274\337}?<~\337\033;t\216b=R\262:\2754\241u\275\217P\343<\023\313\"==\272|=\215\260-\274\311\215p<\363[\301=\252bK\274\323\340\250\274t\201\'\272\221$\216\275\000\320==\'\177\205\275\316\243\310\274\360\373\265\274\247\351\315\275m\031\236=KB\241\273[\370\020=s\357\250<\004\376F=\nmn\275\003H\267\275\',\345<\177P\023\274\373H\004\276\254\335{\2750?\023\274\365FN\274\237Y\014\275R\026\303\275\243\235Y<Z\210\261\2753\223\352\275\214\025\013\275\212\221j<\020\243\366=\231%\006=\306\375\025\2757\232~=\311K\364\274\266\275{\275\021\003\243=j\303\213\275\350\211\331=\300\203\241\2730\215\201\275\2701\225\274\021B\273<\240L\025<{f\025>.\3212\274\310\202==\000\263)\275\365`\205=\340\254\036>\244\377\210\275\314\010\355;\326\246\357\275a@\310\275Z\006\341<Kf\210=\3120\202=\246*\233\275bh\027>\"\031\217<\032/\024\275#X\014=\t\307\365\273\347\230\027\274\017*\221=\214\035\026\275;K\212<k(\233=c}\007\275\236\217\301=\366\246\301\275\221=\001\276\272s-=MC\203\275\214\330\220\275\336\022\000\274\250[O=7\342e\275\010\247\216<*\223\234<\"\363\240\273\372\014]\275\264\225y\274x0\300\275_K\251\275\327*|\275\033\0305\275\205\323R=0Zg\274\334\022\332\273\255x\360\275#\343\345\274\241@\225\275\276\340\274<\027\254\216\275\346)\231\275\315\374\004\276_\036_;\231\306 =+\033\007\275B\006\r=\n\354\013<\262\334\177\275\017C\364\274\314\205\306=dt\266\275%k0\273e\326\307;\001\367\024\274p\030\t>\2204u=\r\230\001\275\350\233*\275\362\201\312;\004\0279=\273\262\025<D\262\023\275\036\3025=4\351A\275V?\263=\031\221\\\274Zz\302<@\363\262\274#\024\273=^\326\334=\025\377\306;M:\005<7\375\317\273L#\261=f\304\231;\254\355\273\274\356\006\200\275\254\032\231\275\226\260\\=\353\326\240\275]\335|=\030\233e=1n\006<\016PM=\355\353\312;u\375\n>g\027\254\274\037\311\311\275\260\247\346<D\272\304=\304\317F\275-\025\307\274\334\020G=\333.g<#\031Z\275~\022\356\274\177u\205=\336B\224<\027\t\312\275\224\220\327=\341\372v\275\323?,=\206\355\032\2753]\341\274\324.\"=\244\211\210=\222@<<uE\t\276\020f\352<\355\377\302;\271\0021=\314+\252\275|T\224\273\254\256\312<\006\340N\275\377q~=\001g\003\275X\243\230=\221\000:<dT\367=\027\303h\274\373{\357\274\017\214\376=\277\351<=\372\336\025>(\376\276=\030o\331\274v\374\026=\026\270\205\274py\363=n5\244=\013~W\273\276\001\205\275O*y\275\017\221:\273\361\242\216<\023f$\2755\000\007=\244a\343<u\014\224\275R[\300\275\025\256\236<Y\207\233\274\023;\337\273\246\260\231\275e\374D=\202\354\002\275\374\240\300\275\302\210\200\274{8\010\275\0253\214\275\322bH\275s\t\266\275\024\351\304<z\231\217\275\005>y=\251\033\263\275\336o\255<\300]\263=IhE\272\253\371\251\273B\316t=\353\253\335\275\250J\256\275\251\224\016=qK\330<\333B\035\275\362\027*\272\3470\030\274Sh\'=\261\177\\=\3226\334<\247]\331;%\024^=\032\310\225\272\267\004\215=\363\374\000\276\326SB\275\346y\231;G\253\364=QZ\236\275V\235\301\275.\017\213=\367\013\265:\235T\020;\266\347*\275\306z\325\273\272\017\004<\330\247\247\275\033\340+\276\241\367\r=\326m\264\275m\356~=\221~\216\275\237\266\033\275\250\350\010\276\373u\212\275\300\337\331=\342\267\277<\261rJ=(\032O<\255X\000>\r\3216=\230f\254=|\275$=R\005\030=\350\341\\\275\365SG=R\023O=\016\233\3459\036\300\000=\234\225N=\330\305u\274>\023\240<\0378G\275\233\001k<\250a\177\275\305\000\377\273-\016\254=b\260\246\275\227\310\334\274\207\366\275\275D\223\037<q\310\317\275\311y\337=\276R\272=\201{\334\273\270\363\304\275PN2\275\007\244\377=\r\t{\273-5\026\276O3\266\275jS\021;w\217\354\275B\230\257\274\320o\362<x\027\231;\013xG<\320\025\322\275h\242T=\014\246\'\275t\357\265\274zS\032==i\202\275\003\274%<\"\207\250=Hf~<:\371\250=\r]\220<*Eg=\247\341\333<\346J\242;\311\215\354<\243\265\204\274\226!\307\273n+\237\275p9\305=\315d\006\272\206e\205\274\245\323\240=\3176\301=\330\235\252<\0275\233\27505\2069:\305\023>Sr\001=.\254\224\274\021\006\007\273tg \275/x\306=*\0306;\206\313$=#\214\320=\t\343\321<Pv\332=\321e\360=\350G\275=-\375N=\010\322\372\274\262\007\230\273\235\271\254\274\262P\277<\257\377\334;\214E|\275\361-\003=\206\372\205\271\222g\007\275\007!\302\274S\354\010=\357I\334=D\341\265=)\206=\275wL\342\2751\205 \274\277\006\313=\035\212\022=#\367\233=\355\256\264\275LuQ\274\206o\240\274\353,\022\275H\307B\275\303\001\006>\306\335~\2753\220\237\275\317\2520=-^I<\227\003\302\274\323\301\005=T\306\"\275\025?)\275y \263\275\332\"\016\274,;\017\275\274!\r\2734\360\276=}ue\275\354\274\277\274\265\000\264\275e5\375<\355_\236<\376x#=\257\243=>A\0067\275\037\rn<\355\2234=A\'\276=`\020:=\265\332(\275b\376A=\257\204\006\2742_B=\206\240(\275\340\263\205\274\030\276$>\350\014\374=\254Z\335;[\354:<*X\244:f\nB=2\006,=\023\333\030\275\375\014\355\274eA%=\364I\031\275~\237\222\275\2307\014\276c\032\356\274;F\300\2736R+\275h\235\021<LB\277=\306\366\267\2758\265\003>\354^\233=\341\327\275\274\236\204\253<E|T<\342O\324\275\033\314m\275\305\221!\273\211\331\343\275\253\340\216\274|\242\207=\226(f<\271a\002=e\214:=\213\034\262\274x/\265=\212#j;\034\332\356\274\361\305L\275\220,$<f\235\313\275\311\265.<\265\315\217=V;\013=\357E\020>\321\253c<\000\212\247=\371H\254<\222\342\r=H\342}\274.\251\360=\355\021\275=\"\270\246\275@\204\324=.S\265=R\013\005=\377\372p={\347\335\272\2353!=b\276\311=\225\300M\275\253r\350;\215\t\255=\r\225\004\274\023\013\216\275\363\233&\274\353\"\302\274P8\372<C\310.\275<F\343<U\202\274=\362\237\275\2755\261\033\275:8\331\274\223\230\237<\352^\336=\332\363\261<\315\216\023\274\365\273E;{f$\275\312?K<*|\221\275\263\367\337=\2359\232=1\205 \275[w&\275C\256\345<\301\220\262:\322\240\027:\\\014\207\275h4\346\275\3711\324\274leB\275\326\020\351\273\321\023\217=v\213\352\275\277RD=\230Af\275\253=\263\275\027h\212\275n\205i;\304\032\202\275\007\360\363;\023A\350\275\202\036\034\275\265\340\233<\3436k\273\352\r\311<\347\000\032\275\303\257\004\275\355\362\230<\324\250\000<\006\201\005\274N\365\036=\006\355\n=\270r\313\272z%.<d\007N:f\332n=q\265D\275\3728\235:^\220\354\275\310\206&>\353\345\203\275\365}\003\276\177b\321;;\372\224;\251\004_\275\031\004/=&\034a=\366\265\360<\026\340\341\273\300s}=B\223\252=\346}\035\275\212\361y<\033\304\365<j\037Y:Y\"\206<\003\272\371;\373\023\344=94j\275\216\215\310<\364\242@<}F\342\274\253Vw<\020\267\241\274\326:d=\256\006\347<\314:K\275\355D\267\275V\370+=\236\004\204=\327\027\010\2768\360\202<\177\234%\276\275\2525=\251\3254\274\325\354<=\233\254\244=SZ\211\275\005\221\257<=,@=K\275P\275\245\252\022\275\226Q\326=Z?\327\274\364E\252\275\351\'j\275\327,O\274@L\353:k\252\252\274\310C\030<K\371\361=$\370\334=\246M,=Q\341\026=\0308\367<\2415\306=\366g\215=^\'\016\276\215\205T=\020\327\264<sH)\275\030\024x\275\344f\005\275V\306\320\275F\333u\274\010!5\274\013\241\355=\255F\240=\224\'|\275.\375}\2711\0357<\336\200\005>d/t\274\030w\'\274\017\347\331\275\177\013\006\275G\000\276\274\001Z\265<\016l\340\275G\177\001<\201e\247=[z\315\274\247\305\215;\346+\207=\337C\370;D\356*\275]\'\031=S\247s\274\347k8=\035}o\274\013\371><\t\242x\274\342Qp\275\324[[<\3378\247=\036&%=\002K\303=!\217\375\274\236\211C\274\347bu=\224\374\377<!\205\310=e\020p=\2356#=\310\204\377\273Z\360C\276\375%\243=\317\351E<\244\231\314\275K\311\353\274\320!O\275$\276u\275\271\277\223\275F\206\327<\n\002\035\275\370\257\231\2742Yt\274\306\331;\273\303\"\235<\302\202\253\275\367\251\332\275\000\033n\275\013*\212=\225\014\252=\006\244\037\275\316#\366\275e>\271=-\356\260\274\323j\0038\330\037\010\2766\306\234\275z,j\275\316\205\020\275IF\231<\014\304:\276\324\267F\275\365\333\036>9\263\230\273\302\"l=\033.B=\254I]\275\313\377\">\031\233E\275I!\006>\265u\022\275\267k\341<\334n\025<\022\342\327\274\203\364\314;\251\026\225\275V\201\030\276\003c\306\275U\021;\275\177\301\241\274j[\266<D\222\036=\324m5<u?e\275K\025q\275\334\250\034\275\204C\337\274\000n\256<L\3509<x}\016\275\004\260\251\274/\270C\275\234\220\212\274\372\363\210\274\360|\320:\373\037\014=\316\200\244\274oy\005\274\251Y-\275\377\005\331\275O6\006\275X4T=\265\304\306<P\372\203=z|\263=/s&\275\243\324t=\236\t\013\275IL\200=u\261\\=\310\277\302\271\025\231\301\275\010\271\256\274\021O\373<\231^\212=a\316\313=4\0219=\313\3461\274\010\227\007=\325g\213\273\310,\014\275G\230\207=\273dl\275\247\252\000=\034\333*\274Y\n.=\317l?\274\237\177\225<Y\'\240\275Q\030\204\275\331\216]=d\016\"\272+\324\253<\000>\334\275\230\254\322\274\345\251\331\273\277=\351<4\036\035;\215\222\320=\343\2468< \257><\234\266\326<\206\325\200=}~\203<\304\324\277<W\335\177<:\037\367\274\220\341\n\276\376\211\227\275\270\211\211\275t[(\275R|\232=H\212c=\307e\275=\200\330\034=1\234\213\274\201Z\000;BtY=\257u\'>\000a\310;^C\211=\315\"\223\274\254\"*=R\033J\275\204\026\220\275\276\260X<\312\032\330=a\225z=\331n\222=,\261\263\273\256\016+=\306\270d\275\303\3723=+\026C\275\204O\250\275\360*,\273G/\233\275\314z\243<\266\333L=\026\301\000>\337D >\313/-\273x\001\304\275e\214\365\2750\370u=l\240a\274\261\252\216\275\260 \022\275\211g\002\276\357o\225\275A[4<\362\354\262\274\264\023\037\275\311\305S\275\377#\327\274z\026\341<\335U\212\274\313\252\217\274\246\374\024\275;\223\200\274q\242w\275\311\303\264\275)\002\302;\3224\335\2758\002\026\276\333=\007>\013\201\324\274\366\035\224=je\307;\260TJ\274+:\006=m`\010\276\337F.=\035\027^\275\247(\017\275\037\314\235=\226&\214\275d6<\273x\230\r=\251\214)=%\377\320;\003\216\254\275\303\357n\275(J\301=\375\210\t=!\014\310\275\363\001\244\275\324\016\347=Q\205T\275Oy\307<&ht=P\217\200=\332{\375\274*a5=\2102\257=5a\273=\371\003\215=\\6\324\275\000)\227=\370\006\n=\311!/\274\301Wt\275=\305\324\274\025*\036\275\224\030\216<\210\270\321\274\321\354\303\275\324Y.=\2133\333\275s=\246=?,\363\272\221\250\022=V\222\021\275X^-=Pt\374;{\361x<\333.N\275\200\203\306<\322\272\312\274\250]\225=h\021\252\275U\336\202<%\375\344\272\243\"y\275X\323\247\274\021 *\275EX\317\274\212\333\310\274\277\216\265\275HV\324=\231\332K\275|\000\320=?\346\017\273\223z\201=\0166\253\274F^\342=5\300\243=(\315\334\275E\310B<<\271\201=\310\322<=\t-\245\275\006a\221\275\264\354\213\275\345\345a\2756\376Z=\367\247\364\273ku\307=\026\'\301\275\336\tL<\037\257\225\275\252\r\314\274I\004\025=\375\2639=\351\373j\275\251\375\362\274\241B\200<{\311\314\272T\0324\275\325\016\331\274l\006/=Lh`=\260\230*\274qs\242<\246\013\177\275\336\326\215\275\036\205\t\274\241*p\274\356D\213=\035\0066\274\330\353\317=L\324y\275\003%\225\274\030\n\267;-\014\376;\206\032\327\275~\247\352=.\245\264\273\233\232,\275\232c\271=\264e+\275\022=\016\276\305\203u\275\272\260\254=\267\030\003\275>\372\220\275\305PN\275\261\026\032;\352He\275\335\364\016<\215\250\n\275\002\366\311\275\321gF\275ah\377;\337\214\322\274 \212\261\275\262+\263=\222\025\033=$e\035=\235\226\302\275z|\036=\277\365\375\274\365\264\335=\306\210\314=\"\013>\275\022\342\000\276w\345\202\275@\240d=\355g\247\272\236\204\353\2756\230\377\274DF\002=\356\251\026=\340\324n=-V\210<\000\\\242<\251U\264\275g\306\201\275\256\006\025<b\306J\275\275\257L\275\216&\207=K\3226<\343\204\035\274\243H\220=\273\026\220\275\017\373\327\274\266\220\303\274\022m\311\275\024\216@=c\376\004\274\2534z;\315H\332;\327iD==\270\375\274r\260\"=\324\341\233\274\254@4<J^\275\275\227\201\177=\236(\306<\366\327v\274\377/6<Z{_\275Ag\220=6\354\233\274zt\276={AW\271(\203C\275\256X5\275\227\t\320<FA4\2740\271\257=@\345\230\275\032B\247\275\242\331|\275\257\367\235\275\021d\346<\213\344$=\314\016\n>\320l\002=\330\310\014>\227\255\313<\3577\342\275\007\372\"\275`\345\207\272n\206\014=\302\037\223;\360\t%=/\276\355\275\323=\324\274t<\031=\350\245\207=E+p=r3\304<TP\344\275\277\360\352<\3772\002={\004`<h\330\225\275\330\255\312\275\204\'\342=\241\'Z\275\277\333\215\275~\3710=i\347\201=/\323\224=\3703\024<\320\264\027=EA\274\273\377\306\372<\033\213\245\274\231.\364<hHJ=\346\311n\275q\324\304=\274\034\006=3q\207=\221\002\336\274yl\021=3\323\233<\341\t$\275\364`1\275\331]\312\2759_\236=\246\315\025\2757Y\255\274\r\331\351\274\316\306c\274u<\245\274\270\346\\\275,\260~\274:W\253\275\001\355\021=\2230\253\274{\370\325\274A1\371;\342\235\010\275O\036r=\372\233\300<C\371\342=\010\2773\275A\271$\275\352\247\212=r\256\003\275\266\335\207\275\341\366z\275S\262\005<\323\3244\275\276\364\037\274G[\306<\037\025\034=\345d\304=FZ\335\275\317Q\006=\233O\323<\230\016\221;\210\343\213\275\235D\001\275/\n\231\274\303\016\314\275\nj\233=\323\266\221\273{\341h\275Ig\226=\'\273\340\275\241\2172\275\362\332\342\273\260\3527\275- \326\274\237\366\235=XC\r>R\247\024\275\340\003\n=0\002\357\273\273a\276=\024C\203\275G\267k==\260*\273\301\344\010\275)\024\213\274\343\223\020>\001mB=y@\361;L^\275=*\335\033\276\316\311\013\275e[\275\274\315\243w\275 ~\223\275U\325\270\274\355\235\227\274\231\250\212;\342\377\333\274\353\225\216=hf\262=@\303|\274\371\343u=\200\367\240\275\003\375\204\274\336s\341\275\216J\246=\371\346\237=\351d\220\275\377\341\356<=\276\013>\031\206+=\315K\263=\225\233:\275\344\372\031\274\3506\255\275k\226\233=\341.\255\272\375$\211\275Yq\210\275\257\317\302=\335\333\255\275\021\334\200=>\314\036\275L\307?\275\315\205\311\274/\327\331<\315zj\2748\2207\275\255\244\220\275\353\214\305\274Y\316b;F\313\235=\300\356\351:9N\221\275\223D\303\275\265YU=\333\331\254;s\327\002=\3721\377\274\217\375n=Z\305\227=\343\247\014\275\0030\371\273\250\017\261\275\003y\343\273O\t$;m\276\202=\2008\003=\211ro<J\250\331\275\026q\250=]w\330<\260\205\017\275w\023\263\275\354\306^\275\372\242Y\275e\323\013=vu\017>\215\353\333\274Ft`\274.\355\236\275e\340\305\275\3332]<\274\237\317<b\330A=\236\367\244\275\224\275t\275M\3105=\377\370\207\2748\014\242\274\374r\307<*X:=\'\341f\275\021\216r=\035\273\336<\225S\233=WS\367<\205\213\237\273\376\211\177\275\003w\252<\243UD=\035:\226\274k\266\227=\351.~<\253=\000<\267\271*=\2626e<\363YA=w\241\244\274\344-\030=\n0$\272\223\267}\275J\3266\274#NW\275\351D\215\275\361 \235\274\367\276*<7\202,\274\225\212\\\2759\374\267<\261\335K\275\301;h\274\306l\327\275\242\315\213<\n\372\354\274[\205\350<Wa>=\305\210c\275\304,\203\275\020\206\031>\220\r\273=\375\371\243=o\215\021>l\207\240;\315A\314=dZ\375=\035\310\211\275$\251\261\275\214FX\275\n\230\003\276Y\366\000\275\031.S\274\304\031{\275\n\270M=e?\325<\325\367\216\275\364\364\377\274MN\021\275\026g\350=\250\360d=D\250\335<\035\316\005=\357\236\212=\260\276\261\275\0234\345=\000\330\007\276%\254\036\274A{4;bm?\275\rJ\373\275\376\017\350\274\274:\365\2748\227V\274\250QS=\342\016\326\275\313\350\331\275W\347\236\275/)\033\275\002\265\315\274\000\324q\275!\256\205\273\334\005 =m\311\363\274x\230\027\276\376-\231\274\212\200\320=p\337&<$e\345=Wk\351=0G\235\275\021p\342\275y\260\215\275\354\272&>\327\022\305=\376\363\350<\341\362\013<\'\252*=\350\354\302\273\014\017e=\361\367\'=14\266=\200\3439\275,c\315=\033w\272=|$\340=I\3444=\353\244,>M\342\314<\330\363\266\275\344f\262\275Pb\323<\306z\337\275\227z\267\275\262!\370:\014\365\331\272Ws\257={a\235\273\207S\217;\317\037&\274\325\256\'=\374\201\343;\302`\353;\354\313\204=cl\224\275\372\020\376<\327\322}=\025\"`\273\205~\266<ti\002\276\177\344\233<\177\352\261<\341x\215\275zo\273=\372\372\243\275\301\365(;\206|\030\2755\007\267=\250\006\231=@L:>E*\312\273\336\324\236\275T\353\253\274U=\254;\203\251\030\275\376\031\242=e\372\321\273<\177\255=\312\t[\274\367\333\004<~\221d\274Dvu\274\304\251T\275\320~?\275\317\313\357\274\354\277&=\335{\263\275,\024\374\273\014\330p=[\201a=>\002\246;\314\302\202=V\013\203\2744\226\275\275f\241\371<g\344\004\276\251\t\332:c \322\275\215]\001\275\026tK<\234\021\205\275\242\243\000<\372X\252=\003\327\021<\317\230\221\2754\244\331\275\312\372\231\275\314t\371=k\214*<\361X1\275S\020\234<ev\251\275Z\340J\275T \264<\n\304N\272\016\327\267<\303$s=[j\231=J\206\320\273(\277\273<uR\344<5\250R=p\331W\275?e~<\216\311\001=\'\'\313\275\346\274\232:M\226\200=\203\335\211\275\237\204@=\215{\243\275eN\021\276\240Q\014=\t\251s=w\325\311<\361Rj=\360\245\002\276\t9N=\206\353t=\334\265\242=n\020\r=\336T8\2758\303!\275\373~=<o\316\014\276\001c(\275\373\237\255\274\351\351A\274\207\222\034\276ws\330=\273+\026=\335\325\020\275}d;\275\020|X\274\2241}\275\244\336|\275\204\210\305;\305\307U\275Q\030\262\274\000\223l=\332\350\005=&u/\275\355z\200\275\034\036\254=\340\260\230;X\231.\275\215\240,:\316\352C\275}\021\002<\327S\205\275\342\362\025\273\336qk=\252\3623=\334\373p\274\377\310\307\272#\242\220\275\302\204\017:?\203\005>;h\352\273\210\217q\275\220\370\273=\ru;\275\227\271S\275\340\235j\275B\340w\275\325\316u;\\|\261<\233\371\203=P\t\026\275\370\305\014=\354U\342=\336Sk<\264\244\024=/M\202=e\201\003>`\220y\274\315\237I=\350\021b=\177V\330=\216w\271\275L\002\267\275\005l\237\275\207\210\203;\023\352Q\275\306Z\307<\204\\\365;U\034$=\357\020\247=\003\220\356\274\324?\002;\253k\t=\344<\006=\007\205\261<\007\377r< *\020>\026Cb=\032\364\317\274o\341\247=\\\233\315\275xQd=\334E\201\274+Zy\275+\374><\210O\326\275\020\023\224\275\361!&\275e\310{<\212\356\344\275\254i)<\255\014\213\275\337]4\275\031\376J\273\007(\306<\377{\226\275\230\246\035=\026\n\236\275|l\211\275\240\007\217=n4\266\275\263\200\031\275\263\241\014>u\336\221\274\217\004>\275i\335\361\275\006\221\225;\322\245>=Ol\303\274\254bo=\272\326w=!\316\206=\022[\347\272\365\034$\275<\233z\275m\021\371\274\345\233k=\263I\247\275<n@=\213}\363<,\377w=MD\247\275\324k\340\274\252M\265\272\244\252\334=\370Z\'=\022\345\355\274q?\211\275v%\240<\'\364\315\2759\322\220\275\323\214\367<\236\337\330\274\271~\032\275c\210\272==\014=;\"\'.<%\257?=\3445\314\274\342p\261<|\276\312=\t%T\275l\306h<U\315\271=:\177\204=D\022\227\274\322\365\324<=\322\242\275\374c\275=W\270\323\274\251\001\034\275kE\264\275\017e>=P\030\010<+e\221\275=\312}\274P\374\306<\2322\323<h\000_==\302\371\275\227H\223\274\3574\023\276[\245)<\300\365\317\275\361h9=4\000\020=N5\250\272\316\226\320;;\032d;\370\246r\275m5\004>\215\017\017\275\345B\376=o\3247=\'O\220\275b \301=\337S\256\275\365\025\211=H\006J\275\372k\222=\307\376\237<\014r\215\275\355\277\362\275I\310Q=\313\266\031=\2102\243=\213\376\244\274\206\325&=\272D>\275(\353E>\261<\322\274H\326\232\275\225\225\333=\315\351\222=\206\r\026=C\tG\275SU\013>\221\010\031\276\341%\373\275\312~\276\275\037K\244\272\356\024}\274A{\335:\252\245h\275\035Z\254;\350\346B\274Cl\013\274\206\367\242=\260\313\270;-\251\316\275\2621\326<\266\361S=po}=W\373\224<\336\375m<\356\306\003\274\355\357_\271\022\276\020=\243\367\253\274\367\003\003\276\302\357\t=\230\333/=\330,v\275\336P\363\275\271\262\323=\013\303Z=\355\266\215=\222\267\376\274\327y\226\274J\214\245\275\234\247\302;n\221\204\274\274\273\270\275P\253\217\274\036VI\2752\307\245\275+\034\317=\026\032\326=Wi\314=\001\311\315\273\340\024-\275\271\255!\275\341\2068=\276\026\001<\273\004\337\274\302\177v\275\363\317\243;\213\217\310<\244_\301\274\211.1\274\013\373\332=\216\342\251=\251\327\n\275D\325\267\273\371\244b=\302\264\026=\262A\005=\2019%\276\255<\253<\260\356\245=\214x\004\276\214\2671<}\007\211\274\025\254\022=\016y\267=9\362\311\275H\247\270\274\027\326\327\275\341\252J\275\023\253v=\204k\003\276\362\247J\274\013\273t=\241~\313\274\303\202\325<\320P\261\27448\334<\366\232\340<\030\000\221<J9\241\272\3008\345=\323Z\224=\251\2540=\275\216\'\2757\345\030=\303\264\005=e\375\030\274?\357\214\274\360t\234\275\247G3\275\267{\r\275M\324\003>\267\242\234\275OX\030<r\265\300\275\244\025\227\274\234\356\243=i\021\272\274%\3321>\301\345\240\273\361\254\317<Q\364B=\273p\375<%I\260<\330)\302<\351\017\276<`<\365=\306\276\'\276\315\320\022<vxl\275\023\306t=E\337,\275X\236\310=\200\305$<\346W\315\274Y.d\275\275\036\315\274?\201\225\274\177L{\275\277\312\224<\002\376e\275\250T\352<\272\202\261;\334\260\177\274f\224J\275\351\310\375;\006\300e\275\340\356\365=\033-\201<A\347\033\275>\2503=\252!\241\274a\3636=QB#=\331%\373\275\322\214\245=\251\r\352\274D\271\245<fHM\274E~V\274\251\325\021\275\325\323\342=\004\211\317=\247\374g<\"\210d=\255\033\254\273\326\357\235\275\221\314\306\273\010wW\275\357J\234=^\256\261=tg`\275C\010M\2753\201\244=;\025\3059m\2414\275YX\234\274\240+\202=Z\'\351=i\214\323=e,P\275\272\035\005\275\3411\260=c\3610=\251E\265=\203\310\033\275\264\310\336\273\305XC<\002\310\177<Q\023Z\272O\325\244<\202\013\332\275\210\363\025<\217^g\274\311V\260\274\275\366\315\273%\335\007\275\366A\211<\025\034t\274\001\2623\275%Yo;h\365W=q\355z\275+\221\211<\262\260\254\274\334\177\365;1\262\236<\246\214Q<T\336\223=l\263\215\275F\351M<\210@~<\021\370\204\274\364\230y<\240!\240\275\365\014\020=\243\232]\275\241\367*=\353/\210=\247v];)\016\037=\256\267:\2753Up=\275\311^=6\207\232\271\242\316\356=2`@\275\n\371@\274\037 J\275\325`6\274\013\343\365\274\013\366\350\274\032\004e<}\217\253=%\300b\274\027\301D\275\007\224%\275\016\346\215;(\207\265:J\310\251\274\223%\277\275\203\022-\275n\310\t\275\214\204\256<\305\205\235\274\241\213\"\274\033\3404\275\260lR=\"\343\313=\024\013\225\274\221J \275hN3\273?7\007\274\231\223\200\273;+v=S\322T\275\324\014%\275 \330\331\274\252@V\276\377\347\357=\242\356M=\233\215\t=\243(@\275r|:\275N\355\223\273\267L\360\275\202\213\237=\247\222\270\2757c\366\274\302\373\217=\226\376\013=-y\330:&\263\202=\272\313\341=k[x\274\347g\315\275De^\275Z!\244\275Y\313\375=Xi\005=\003\332\211\275\210\362\226=\270\335\014\274\347f\302=6w8=lB\254;\220Q\216=\212\201\201=\357\033\335\275AU\\=\t\236N\275\351\257w\275e\221\333=+\305\304\275Y7\223=;qB=g\341\334<\023\376\263=\223\261\272;\221F^<L@\001\2761\215\263=?S\365=\315\311\002\275\014O\266<\215\332\363\274j\016%\275.1V=\336\345\235\274\333(R=\330\2201\274\345\222%\275\331t\255\274\204\201\r\275\363\311\024\275Zn\262\275\230\016\010<}\032\210<\022v/=\216.*\274\316\206;=\334\200\234\274\031\370\267\274\343\375\216<\3076\263=\351i\021=\014l\212=\0378\007\275\345\273D\275C\257\203<CAE\274\362\326\250\274\321i\342=1\035\244=\200\035\350\274\271o <\316\247\227=\025@\001;:\305\333;\n\340a<t\013\372<\324\027\206=\\\211\200=\335-\002=D\324!=\3767\000=!\202\313\275\273\321a<`|7\275\\\312z=\312C\210<\213ZE\275!\340\322\274\013g\305=\301\336\301\274I&\256=\353k\276<\337\377\363<\245e\246\275!\263\026=\\\010\221\275\300\343\004\274\216\336\206\275\241\345\237\275\220\364\246\2755\253\221=6\010\326<a+\334\274\277\331\271=V\303k<\005 #;\374%\250<\206\366\256\275\200\211\267\275\351<\364\275\247 R<\\(\360;\231\324\316=8\2749=zh\317=:\265\344\275,\030x<\264\'\n\276\316\213]\275*tg\2750\227\226\275\250\"\025\275\241c\270\275\000#\353\273Vr;=\026\251\214<5e\302<\032\036\345\274\350\026X\275\350,?\274\376\221T\275\361_\244=`\2723=A-\006\275v\363\355=\206L\n<\343\2029=\223U.<\251&\013\275&\330\'><Ej=\363\212E\275`\227e=^\324\301\274$rr\275\232\036\236=\037\034y<\013N>\274\321\326\256\275,H\217=\nf\213\273=\020q=\307]\014<3\3546=\'\360\251\275%WM\275\026+\233=\362\355\024\275#\321D\275\014D\226\275i\341\345<\367c\370=+\254\222\275>!\206=b!\006<\205g\014<\3301\004=\304=]=\370\346\257=\312\354\317=\315\000Y=\031>\023>\365\351\201\275\014\007\313<\036\206\236<\235=\273\275$\333\347\274\020\311\024>9_\022=\261\370\270<\007\311\026\276\r\372\235;\250S\226\275\254b\321\275J\177\307=a$]\274\317W\270\275J\027\370\274\341|.<}N5\2759g\254=4\010\237;o\363\"=cR\232\275\204\026\337=7*\223\275\355\304\225<\223\257Y=#$&\275l\373\366<5\320l=\234\323K\275n\'\203={\243\244\273\222\334\266=\364\r\336\273\332\032.=\362.\031\275D\242\025=Sa\322\275v(\273\273-r]\275\222[R\275\254\354/\275\230\234\261=\244\274\257=\025\334\227<\345m\204\275m\226U<\207,K\273\355\031\004=\217v\375\275\310\266\"=\361\232z=\320f\241<\266ZG=\021\'\200=Pc\362;w\353\t\276\376\337\367\274\246\r\002</\034\230\275\205\320H<bK\010>\354\337\233\275\255\374\276\274$;\007>\tRB=\255\262\263\2751\226I\274\2170\272<\204m\205=\001#g=:\030\026=hv\234=\276\355E\275\000\252\327\274\365-\031>\341}\217<\024k(>\204\365\014\275\271M\211=C\234\221=i4\207=\312\303\305\274\313\274I\275\254\252\252=E?*\274Jd\224\275\335P\003<0\013\204<G\263\017=2k\243<\334]\210\275\326\204q=Z\222V:\313Y\004<\034\177\376\275j\237\336\274\324\311i\275K\003D\275\301\361`\275v\224\356;]\227<\275\253\246\325<GJ\247\275\310nJ\275\313.\237=\204h\222\275]5x=i3.=>\334\200=\313f\207<\373\377\236\275\325\252\244\275\225\252G=\034\272D\275y\2066\275a\356r\274\'\031h\275K\234\034\275l\006\201=\225\267\017\276a\223\037\274\"3\226\275\357\213\313\274>\002\006=/\376\371\274\321\353g=}\310(\275\365Z\034\276\316\027\232=u\205\257\275x\352\361\274\234\003\211=\241\370+=\245\341-\276\2758\203<.\310\246\275\330d\t\274,\265\206=D\250\253\274\205\241\205\274\302\234O<\013\270\364<\272\275\027\276\3279\352;\366\217\215<\377\221\237\275\004\007 =\267\227\236\274_)\303=c\006\203\275P\253\253=\311\364\350=\301\364\020\276\233d\342\274\231R\006=+\\s=\361 \353\2751\177\235<\277?_\275Z\310\246=\r\271\230=\177\363g=\375\311\344\274p\372==\343j \274\000\034\026= \232\244\275\006\341\020\275Q\335\314=c\022F=\025\214,\275\214\273?\274M\nM\275JG\260\274\220\3171\275J\246\\=[N_\275x\231\r>F\264\211=\004\370\215\274\2232K=\217[%=\0305V=!\363\234\274\335I\004=\364\037\226\275\331%\230;]8\031\275\000\245\306\275\243\211\241=\232\307V=]8\227:\034$\372\272\027{s\275\305\021\266\275?\340h\2744YI=\031\373m\274\350\366\\\275\332\223\227<\333\333\014\276\251\034e=\251\222\341\273\231\255\200\275aq\347<\315t6\275\331\332[\273\355\213\250\275\006\356\201\274\246\353^\272 \317\243\274\224N\273\274\354S\370\274\314\272\241=zx\234=\263\322+\274\363(s=\257\301;=*~\337\275\357[\204\274\261\nC=\315\311-\274\302\326\010=\216\220\202\275\262\001h=_\037h<10\266<\3369\214<\274\371\320<2u\026\276\1776(=\242I\371\272 e$\274,SJ=[\2464\276\nQ]\273\220[\r\275\025\255\032\274\023\0251\275\300\r\316\273Re\000\272\222YJ\275~4\\\275f*\201\272\003hU\275n\022.\275\250\356s=\361\261\363<\201p\322=\342~\366<=\311\006=D\355\221=\220\004\263<\237~\202\274\247a:=X \243\274\365\274\214=6u$>=\334\330<\371\263\304=\260\220}=\034\217\350<\373\252\247\274\213\356k<\226\367\270\275\224+\205\2757\343\254<\271$\226<9EY=a_\303\272\257T\035\275\004\362\277\274\004W\206;\250\035\266:\3375\244\275\314\016\215\273\336S\231\275\357\033\n\275`\307\205\275\ni\027\275)\226\003\276\356\032&=\334CW\273\355\032U\275\256\375a=V\252\262=\266\247\340\275,\272\366\275{~\253=\001\273\365<=\322\247\275\004\326\257:\033WD\273\366\177+\275\320\033o\271\370e\211\275\020\272\014\275\032\237\204\275\n0{=\315\260y=\300\372\036=7\265E\275\3104z<\261\276\260<\364\267W\275*Q!=\351\334\250\275a\234\367=q\025\006<\330\305\350\2731S,=O\354\264\275\204\365\331=\313H+=\210{\n=5\361U<\352g\231<\340\326y=\365S\274<v\343\324\274w\270\224\274\023E\177\274\334\257\307<\235\356\310\2748d\006;g\023\246\275\221J\370\274\211\004\204\275\354t\317\275\223\211\211;\250Kv\274\030\333\254\275\261o\201=\371\243(=\330\013\247\275\223Z)=\"C\254<\270\327f\272\217R[\275\027\242\320:n\330\263<\007\336:\275\013<\361\275}19\274\016#\303;\2132\003>\376\026\013>\332\003\220\275\357]\036\274\036\210}\275Tf\360\275\340\220\032<\202,\001\276\216\204\023>e\333\364<,A\246=?\260\263=\307aL<\010%A\274]L\247=\250m\335=X\3636=\330Q>=K\323\363<\031\215\223=>\360Z<\035\335\252=`\032\356\274\332\371\267\274\212\005\317\274\360b\230\275q\002k==\034\346\274\250\020\351<\037\322\356<#\031\316\274\204\233\314\274*\270_\275M\377\020\274\251\232\316;1\233O\274\262\205\273\274\021\250O\275\277\253\233=6K\013\276\312\201N=j\362\010\275\276>\021=\0014\350<\220\337v\275pr\327\274\000BL=\246\301\200\273\206\330\340;BP\342=\332\r\224=\264M\236=\024\251P\2758\031=\275\343\032\270=+q\233=\317@\367\274\352R\356<\016\325\036=\264Pw=.\365\264<\272\355\017=u\027\t=\340/\t\274\033\324S\274\001\310\277\27278E\275\241\221`;\244X\215\275Pm\230=\230A\202=\275``\275\235:\206\275F\364\001=!B\310;99I\275A\026\303\275\253\270\237=\002\271\307\275j<\270=\001L\001\275H\325<=\275\343j\275:\337\216\274@\234z=i#(=>\225\207<\216\"\263\274\036\206\016\275\025\267/=\211c_\275\276\026\307\273\202\331\245=\220!\332\274\312\226d=8h\203\275VG\374\275\307\035\265\274#\'\203\275\277J(>q+\021>\264m\310\274p\324\263<\030\217\033\276(fk=\211f\226=\214Z\220\275\344\363\245\274ac\360\275<\327!>\306c%=\022i\335\275\253^\253=\'\342g\275\3373\005=.\317\220<H\007K\275,\340\257=\241\345\237=\306\367d=\224\031\376\274\371\3073\275\251\336+\275\322|\326<O\'~\2757tH\274\tr\024=\235\322I\275\002%\337<\006\017\n=\261\215\206=#k\311\274\314\017\272;z\363\336\274\353\345\215=M\351\320<\037\025\320\275r3\321\274K\364\303<\026\365#\275M\235\256\275\n6\001\274%\017\252\275\231Wt\274\217\2459=3*\020\276HWg\275\276\327\366;\330kM\275\2112\324=\202$W=S~y\275\234\325\007\276\302,\224=\317U!<\246Ut=\350\225#;\322\3608=i\215\016=\277\267h\275g\364\247\275\265\3061=\227\3365=\203\177\222=\267\327\276=\rm\215\275\177\231\000>\336-\207\275_\273\302;\026$5=\203.\200=]\366>\273\330\313v<hx\332=\243\242\t==\316\332=\310\261\222=3\250 \274R\335\315\275\266\206\306<q\366\342=&\257\253\275qbz\275}X\261=\254\363\206\274\202\302\240\274\005\246\227\275\236\304\330=\'y\220=\244\032\006=@+<=2lU\274\363\332\010\276\311\306\302<\207\362\r\275\243d\014\274\237\337\357\273\253\247\n\275k[7\273m\271\236<1\221\261;\347\325M=\\7\231\275\236\351\314<#\203\007\275wn\215=G\002\357=x\036\207<\037\3220=8\304\220<\314\370\013<F\253\251\275c\021\356\273_M6=\016\323y=w\035\321\274\226\315d\275\026\017\221=\322t\301=\t\220&=\357\261\311;\342\234\277\274\277Wt\274\377\366\216\275\364\030j=\235\247\205<\364\312\304=\\A\315=7\373\305\275gU\022\276\203\332\253<_6\016=\347\232/\275\010\327\241\274An\242=\312\007\376\274ywp=%\315Z\273E\367Q\275\245\353]\275\334?\010\274=V\347=\257\235\020\276L\033\233<\312\201\212;\355\313\242\275&\253\226=\357\032\215=\017\244\\\275\022\334\024\276\367\005.<\324\262\243<{\353\352<E\001\252\275(\353-=\313\035\276<5\333\221=Fp\275\275\222SU\275\212$\226=\005A\301=\250\215\326=\235m\333\274\253N\032>\240!a\274\216\310`=X\334\326=sob\275\027\024\214=\210\t\213\274v\213`\275W\305\277\273o\334\321\275\\`&\274\020\3124\273O\275\256=-]\021\275\240s\234\273\265\350_=\256\360\250<2\023\300=V\255\246<\347\244\224<&\264.\275\250\270);\230\2464;M\253.=\365\034C=\273M\322<\271\254y\275\267;\321<\376\027\271\273\364\241=\274\333}\215\273\363\037\244\275Ic\366\2743\253)<\000\200$\276\367\361\220\275\203\362\200\275s\350\306=a6\337=\353\221\003=K,\375\273\250\253~\275\304\205\246=1\r\321=@F\002=\255\200L=\352\221\003=N\277\006\2757\220p<\307\313^\274\315\340\216\272\006\333\243\275<J\033=w$.>a}\332=\224;\014=*>\005\275t<\261\275\331\372*\275\216\316\225=\003&\350<x\251\214==\373\200\275l\337\225\273v\031\'\275m3\005\275\025\310.<\220\375X\2753\274\226=\203\034\354\274\2243^<$\005L=\261)\023\273oh\236<\000\322\034\275\035vC\274\347\214\305<\030i\247\275\206\000\n\275\312C5=1\253g=\302\203\201<\"\231\257=\234\275\223\275\326\367\021\274P\000\200\272\207\343\024\276]\205\004\276\265\303\264\275\377\024\017=\356\353\037<\030\257\242\272\n\030O==\236\231\2759x\001=\375\254\204\275\264\311\\\274\370\\\367<\237\311\026>\206@w=\3508f=V\302\365=MV\030=E8\004\274\374|\376<\362\\7=\027\310\203<\005\216\357=2\375\200<\353r\035<\237\035n<h\024&=?r\014=[\220\211=-\031\367<Xj\220\275v\252\007\275PLt\274=\234\003<T1\303=Q>\r;$\2676=\211p\026\276\210\275!=\364k\320\273\014R\317<B\203>=\201NX=G[,\275\023\337\255\275\217f\177<\002\302\316\275@\327\243\275\301\330.=\356\025\001\275\212o\360\2739~\016\275\t\253\036\276#\365j=&\237\317\2751\037\267=\350\333v\273=>\035<\271\276\273\275\3478S<\016\3014=\267T\016\274E\204\022\275\004\307\223\275\250)9\274\217.\352<\223\216s=\242\352\005=\256m+\275\345\324\244;\264\036\307<\336\265\241\275\004\246\202\275N\355B=_\263\213<\221\032Z\274\230\231\224\275\2760\375\274\254R\016\274\273\266\002=\305\242\276=|\267\261=\3220\327=\333k\256=Q^\227\274\221\242\260=\314\341\202=\2650\323\2745\304\272\273\264\367\020\275\221\270\t=\2638\312=\353\2750\275E\331K\275\362\241L=\034ys\275\273\t\004\274\257\262\372=\2308\224=\2238\244\274\032\270\227\274\271\265\223;\260\002K=M\004\353\275o\320\021>\351\017\024\274\225\300\265<\342\332\005\275\213M%\273\240\237\214=\326Qp=\302D\232=d \t=\260\356\207=\245\366\006<\376~f\275\262\366\323<\201\032\347=#\242\"\273ZL\321\274\307\223s\273\377\356\313;%\216\306<S\030P\274\322\361\346<\332\2437<\234cA<+F5\275Fg\365<\360\331\260=@4\312=F\305\340=\\\004g9=NQ\275\244\325\321<?\017\255\275\367P\314<}\214\310\273\370\026\031<\013\3434>zR\326=\003\225\260\274\024\346\271\274+\356\336\275\351$\n\275\220\235\332\273\256vF<^\365@\275-\2136=\364\3737<}8\346\274\r+D\275<,n\275\245\213\226\275-\223s\274\004\r\t>\263\n\352=U\376\360=j\033\271=\325_\346=\317N\302=\315\316\202\275ol\206\274\310\274\r\273\210\021\212\2710\201\r=P\2742=\267Ck;s\330\311=\225Q\272=\227\275\335\275\256\t\033<q\203!=\307\262.>\226\'\217\275q5\315\274ct\010\275Dg\212<3\307U\275\310j\002>,\306\035\275_`\235=\206\275\314<\247\262\237:\261=\355;\022\r\233<Q^\010\276\307\022%=al\207=\243\014\035\276\240\330\306=\254\326\023\275\341(f\274CC+=\211\366\237=YA\360\274\032\265\"=\345\266\032=\254\247U\275\214\225\274=\261\240\236=p\226\260\275\275\357\226=\024\251~=\253D\244\275\342\246\220\275,\320\202=Z\304\017\275v\210\264<\214!_<\320\325\330\274z\251\251=\364(\225\275\256\237\312;3\301\320\275\273x\035\275\260\022{=\221\351\246\275_\017\004\276\277\367A=2*/\275\271\1779\275u\356$\275\020p\014\275\236\373\325<\354[\224\275\205O\227\2759\217\016=Ag\317=\317+\314\274\261\322D;$\351\344\274k\256J\274\'\375=\274\307\215\225=\006\017l=\274a]<_#\025<\2738\013\275\361k\237\274\023\257\260\275,\230\344=\316\353\236\274Q\326|=\224@\343\274Q^\315=\2047\034\2758\207c\272\220W\376\2733#\215\274\'=D\275\251(\324<(\360\215\274B(\271=\227]\335=\202\356d=\365;\340\274Z\363R\275dBA\275\202\215\214\275wu5\275\031\343);\234\304\216<0es=\364\0001\275H\000`\275\255\213\240\275;\315[\274[p%\274\352\307\200\275\272\351\354\275\212\262V\275\224\355\203=\257\370N\275\313Ai\275\211\363\271<O\010\251=\007\033\246\275\302\313\317<\322/\275\274\324\006F=\026\034w\275\203/&=7r\003\275\337\311-\275\177\204\210=w\006Q<O\2160\275f-\315<n\237\035=5\303\022>\355\211\001=\265E\262\2747\327j=\\\373\275<\224\006\273<-J\235\275\377\251A=\r\r=\275\237\234S\275^p\314\275\311\337y\275\334<\261=i\350\254\275\031\003B=1)j\275\312s\333\274\365\023\210=\3122\251\274\220\014\324\274\247\302\216\274\017\020\254\275\255/=\275\323\303\312\274Ivk=<*\220\274\337\343g\275\021&\003<\257df=\226\251\324\274I\237e\275\265\243\037\275\370\331\035=\3704\005<\330\350\003>\306\025\223=!u\200<H\254\017\275O\234*\275\250,6>\202\234\322\273aw\273=]-\230\272\337\3536\275)~\304=8\177\205=\222hQ=7\301\n\276\306$\251\274\361-b\275\226j\253<\211\3411\2757_R\275O\021\261=\235wE\2754\357\250\274\0036\237\275\275\030\274=\262fb\274\303\206V<\340\302m\274e@@=@f\217<\346\023\247<X5\336\275]\370\274<7\337\355\274\325\017\020\275\016\274\337\274\227\004\031\275\227\020O\275\tU\311<\243\306\221\275\2656\215\274\307\032\031<~\217\365\275`]\272<\005\365\354=q\343\246=\226.d<\323\021\347\275z\377\262\275\337e\006<\376\316\266\275\352\242\000\276\335/l=\355f\246\275\246\277\302<\215\201\211<~@N=\205\376j\275-\013\304<Q\016J\275\312\335\035=q\215\"=\375p\211=S\262\215\275\233\207\036\275\026\221\332\275Cs\267\273\330\220\371\275\302\211^<\302n\317=]x\002\276\211D\251=\307\342@\2757\206\212=\224\345W<-\216\226<\002\263Z<\266\255\361:@\373M=/\347\021=\276\323\230=!\357\367<b\360\342\274\305\322\034=\260\227\212\275!\362\027=+\034\354\275\203X3=\254\337\271;\000|\312\274+\034\355\274\010v\000\275^\007&=\227&\007\275\372\346F\274\024\267\274\274\037\035\t\275\311\032\003\275\247`\354<!Q\252\273\215\331\257=f\275\221=\302\020\264\275\311\362\007\275q\032*\276\324\241B<8U\240\275\217\037@\276A\311\263\275\022\242\263=\313\303\262\275\250T\005>\233\242e\275\355\237\315=\3771W<\266r\231=\205y`=\222\300m\274\325\017\213\275}H\344\275\251\377\230\275\350\221\361<v\311\230=h\314\234\274\310\342\210=A\032\256=<\036\272\274\223&}\275\377\300\263\274\202\324y\274K\\\355\275Fa-\275\367\315!>\224\325\201\274\246\r\'=\220\244\033\275\256\377\243\274\225\217\371<\272\215\277=E\004\313<\311Z\237\275\250b\035\275\006\327\341<\327\240\013\275\306\325\375\275\275n\207\275\267\277\223<\371\355*\2751\301\367\274\033\332i;\301\213M=8&\000<r\243A\2758\304U=\255\225\343<(\300\303<F;#\275Aq\032=X\207v=\260\353\004>\312\376\312\274\317\203\272<\347H\231\275 C\204=\364\221\245\275\300*\212=\332\242-=\305v\371\274\206\203,=\334\236\310\274\277oB\274\364\325i\275\243\266\210;\037\331\020\274\002}\237=\021j\244=\032\304\351=/F\221=l\364\261=\201N\032</N<\275G\337\306=\366\234\307\275MQ$=Qn\n>\365\023\350\273=:\226\275u\317\237<:,\300;2\204\216=\324Y3\2754\255\3007\205\247U=\242\251\024=hv\003\276Na,\275`\373\033=L\326|\275t\367\272\274\017P\311\275XY.\275v&:=\200\225\367=\214a&<\244\307\010<S\020\304\273g\210Q\275$\211\315\275iT\013=\301\033j=P\327\223<\347\364w=\027\014\224\273k\024\001\275\034\213\361\275\n-\313=\304$\265\275\343[\034\275c>\311;h\354\272\275\317P\373\275N\306\362\275\027\247\202\275\215\350\312=\331,\240=\202\016\205\275\257\342>;lX\301<\330\321\271\275\247q\341<UW\246=\301\364\021\2751\302\000=\034\204\271\274#\242\t\275\240\2341\275\017\303\231\275\316\343\220\275bpY=\371F\001=K\212:=9\360\201\274\331n9=\316\213q\2745\373\t\274\005{y\274\027X1\275Nw\240\275\273\026k;\010\304\177\275\242E\222\275)\221M=\020\214\020=\232\302\321;\036\352\"\275\\,\245<\243\214)<\317\340y<u\246\352\273\014\003\331<\003=\037=g\'4\275\333|I<\026\n~\275\313Lb=\333\016\340\275\224\375\321=\367\000\246=;*\227\274\242f6=wf\024\275\214_i\275\373\205\226\275\\\3369=\032\325\023\275\264l\236:\276O\223<\312\264K=\004\325\034=V\207\301=\346\257\025\275\241\2337\273\367\263\307<c\342?\275v\327\367\2756\315+\275\355\371\000=\346\274\005=\311\310\200=z\217\256\275\357\303Y=\315+\375\273\235`\374=\241^\236<B\211\242\275\014:\205\274\301\223\264<B\006\226\275\342>\375\272\212S\370\275(\253\310\274C\207\236\275\342\371\246=\261\222\366<\327\373\311<\r\"\252\272\322\3036<\217\250e\2743F\314\274\002\224\214\275\232\224\266\274\025\357\245=\307$\031\276\357\nf\275\215u:=\250\306k=?\262\220\275{~\336=\250jY\273\343\247\216\275\322\347\355;8\310\216\275.\265\177\275\237\020\212\274\004_\302\275\005D\356=\367_\300\275\033\243\207\275\253\372\264=\177h\323=\241\271c\275\366C\313=x[\254\275\261\255\275<T\225\337=/e\363\274\"\271\244=\233\355M\275\340\217\265<\326g\234\275\316\013\257\275\323\245\021\274%\277\301\2743\035^\275\030KK\275\217\261F<=\323==\264\274\000\276\221\343\275;\217s\236\275\341\006\355<a\230\376\274a\254t\273\3522\214=\261\326\220\275%\213\022>]f\225=h\324\021=\374\344\222=\'\377M\275P\033\024\275\343\017\307\274\267\204\353=e\r\031\275\002|\026\275%\3619\275Q\313_=QL\207\275_\017\372\273\000\276\236\274\216\357\301\275\217\301\266\273d&*>\371\272\025<U\211\316\275\227\237\266=\246\367\237=\010\261\215<i\275\345=B\266\256\273\261\217\325<\364\202\270;\036y\342\275F\312\030\275<!\313=\352\264\222=\026\366\236=\307\212\240\275\014\216h;\340\371\207\275\020:\001\274%A\002>AU\276\275\n\272\334\275\346Gd\275[D\337<\313\202\304<\236wh=\201m{\275\207\377\035==il\275\033x\037=\352C\310=\3203|\272lv\253=\032\365\023=\357\t\005=\276\035\273=mt\363\274{ \201<\247Ne=\300\330\010\273\262\277F=\022\347\000\275\332\202\201=\246!\364\275~\3218\275T\023W\275\204E\241\272\337Z\201=7l\033\275\215\210\202<L\224\232=\330\2374=\305\361\212\275\224\230\023=\321\205\242=FrA\275b\313\255\272\033\254N\274T\277\370\273!\201f\275\200\'z\274F\253\377\272J\354\365\273eN\266\275b\335\200\275\224\0007\275\367{\302\273\240T\001<\014\001\233=\205L0\275w\347\017\275\362a\372;9\034Y=\270\361\253\273\232\333\211=\311\271\212\274C\2710\274\'3\223\275M\203\230\275e\316]\275\246\372\264\275\036x)=\345=\362=\220\377\030=\'\236\352\274\355sW\274\r\322\202=V*\311=\326*\254<\212\323\302;\304\374\302<\220\267\332\275\003\271\313\275+9I\275Pn\005>\360dQ\275\355\361\251=\350\333\374=\253\374\335<\340\325n=M\351\220;\271&O<\270P\260\275\245\257\"=\353\255\223=\261kt=|w\237\275\231we<\356zN\274\266\352x\275\023g\002=RL\231<\264\363J=\377b\254<\215,\355\273C\240\001=\223\267W\275\267;;=\327\370\211\275\323\034\240=*\032\252=\t\t\020\275\')Z\275\215oO=\340q\203=\272\004\376;\242\260\325\275\307h\220\273\254\225\005=5\217#=@\346\214<m\252\203<!\023\001<\211\030\256\275C\237\2259\014\362\250=j\242p\275\336^\320=\273\327.\273\224=\335\272\366V\010\275\363G\277=R\000\220\275\034\003\222\275\335\257\244=\264\214\355\275\273?\233\275\233p\322:\"\301\355<\241\227,\275\323zw=\362\300\032\275\270]\324<\376\321d\275g&\244<N\255\\=\036\273h\275\r\303\352\274H\032\341=z\\\244\275\343\212\223=p\022\206\275v\263d\275\313[1\273\253yI\275\023\341P\274\343\305#\275\341Un\2751}\016\275\270\375\021>\261\274\356\275\021W\362<\352G\236\275\n\016\270<\313aF\275\021m\234\275\261\026\222=\316O\037\275\022\237W\274\024\345l=\031\244\326;OT\033=\323\346W\275\343\005\316=o\302\006=\025Tn=\207\016Q\273@G\031<\030*\017\275\366\320\216<\002\232\331<\241\246\326\274\300-\203=\2716\311\274FQ\017=\322\265j<\230z\245=\'\010a\275\202\260\320=\221m\010\274h\352\022\275\327\304Q\275\316^\343:?\333Y=\000\n\304=y\005\237=f\241\235<\305\227\244=@\031%\275\353\002\360\273r\334\035=\345\327\365<\241\236&<\343\201\345;\232\005\374\274\016\340\'\275\367N\240:\250,\027\275\217g\231\275\210\021\224\275\343\310?;\340\025\366=>_\270<)\003\270\275\342)Y\275\203\274\213;\363\'\020\274\033\353\000>H\035\r<\214U\233\275\037X\304\273\317\227-=C^\203\275A\372\324=\336b\334<.\344\207=$\021\016\274\304-\002\275{\275K\274\233d\375\274\242Q\230=\\\225\226=\303z\217\275Y\255\236\275Wj\226<I\201\317=g\325W=\246\0321\274\374>W\275&\263\217=\200\010u=@\332W\275\372W\323=\344{5<\202(0\275g\002\233\275k\354\375<\315\340\327\275 \254\364;\210\007\377\274\244?\221\275\014d\014\275s^\336\275\302\340\027=\336.)<\207t\261=nS\025\275O\005F\275r\307\247<\227\367\316=&\325%\275\267\351n=\364\n\007>\234W8=\202\246\265\275\223\3426\275\212\"\224<i\200H=\357\366\033><\331~=\314X\225=P\351\205\275\360l\274\274t@\177=\264r]<\227\'\336\274\263a\014=\r\224~=3\270d\275\211\313\353\275K\324\260\275\365jb\274\031\265\023=\316\353\352\2753\230h=[3\037\274\372\221L=\303\311\226\275\203n\177\275\367j.\276\331[)<\211\014)\275\217\242\270<ja\273\274_\215\016=\205\302\017=\356\271\245\274\357\243\027>\242\263%=\255\0224\274\360\376\243=\337\375M=\000\234\214\275I\355g\275\253\'\243<a R=\267\315\272\275\344\373\317\272\206\276\276<^O\206=a\316\360\274\323mp\275\265\365\364\274\351F\241=:I\316=\000\354\356\274+\341\301\274\276\037\271;\342\346\220=\246\266\274\2759\264D=\037+\241=;*\341=lz\355<{\330\206\275\016\377/<\263~d\275\177Z|<\003\'\022\275\372\364\000>\304\232\322=\237l\373<0\320\371\273\215\273\034=\372#7<\350\261[\275\332`O<\231v\203\275\225\214\272\274\322\335\003>u\236\307=\223\310\'=o\265\260\275\304c\206\275\233\006\333=\t~\262\273T\227\204\275\225*2=\352wd\273\007K~\275\302\211\004\274\031\262\325\275^\241\234<\265n\235<\250\035\236\275\311\212\335<\033\277\260\274\246p^=\313EC=|\213\241=\220\316\353\274\366\271\217=\207!\030\275-\301\320<\033E\005\276s\202\312\275En\227=\'g\021\275X>\233\275kFE\275\223\363O=\213M\322=\264(_=N\0311<\354\306\274;\256\234\"\275\335\320\207\275\001\206\027<\213\010\353\274\204M?<R\364\321<\220\250v=r\351T\275\033)\002=\266z\336=\\(}\275\364\316\266=A\265]\275K0\253\275k\207+\274h\327P\275\316lP=\330\007\200\273k\375\024=\n/\'=\335\314\357<\216\010\331<\017\254,=\245V\207\274\271\230\367\275q\271l\273\234x\276=\302\014\243\275\326\357\023=\216\227\266=\357\221\320=\267\310\220<2\314\030=\242\202\315=\361\205\321=Z\345\301<)\203\031:\307}\020<n\016\302<hln\274\005%\324=^a\375<\221Ef\275\353Sv\274\235\032\204=\307\216Q=`1i=s=\033=4s\221=m\262v\275\002N\005>KQ\273<\217H\235\275\005\335F<4aY=@\345B\275k\3625=]\007l\274\327\326\310\275\255D\313=\033\000\363\275C\351\303=\322\0259=i\327\375\274\326\247\301\273\037\025\342\275*\001\030\275\034\277\005\275\323L\266\274R\333d=\270E\211\275\367\025\344=\365S\276\274\275\352n\275\022\3143=\361q\341\275#_\360\275\272\t\022=\204\273\027=\021\2703\274\326\342\303=\tS\000\275\370\346_\271\336\350*<T\262f=\262\2555\274z\201\270\275\033\332\306\275\247\333\224\274\201\n{\275_\367\350\275\375\340\021=\372:\311=\030\350)=\242AT<\177U\323=\312\313\234\275_\322\203=\235\363\225;r\220\n\276\276\267\006\274]]\256\274v\322E<n\034H=\001\214\263\275}C\010\275\317\251\211<\010\325\323;\273E\306=^\036\311\274\nl\202=a&\277\274Lj\222=\300\025\273=\rb\r\276P\200\t\275V#\347=/8\344<y\225\271:\243\324r=\002o\363<%\266\032=\344\035\235;K?\203=\0101,\275K\000\013=\263&\302<\365h*=\321cA\275\272\307\013<\343\364\031\276+\010+=\253\222I\275\321L(=\235\266\001>\"\334\357\274/S\017>\257\361o=\245\376(\274\325{w\275.\300\256<\301\252\221=\332\317\213=\365\035\351\275bl\223=\270\274\321\274\346p\220\275\342$\020\275\234\327\222=-E\227<\273\251\257<%\025\177\275\274%\360<V.\032\274\324L\271\275xPi\275\224\377v<\344\212\245\273\013{\034<\333\232]\273\n\321\201\272\026\355$=iE\374\275\367\326\326=\360\001\034\275c\243Y\275~\200\356<\346OW<\247)/\275h\212\022>\325!z<\225\272\200=\3316\016\275\305\226E=R\242\021\276b,\246\275O\017\257\274\026\000\300==K\241\274Z\216W=5\240c;\025o\327\274#\306\231\275\177\331~\275\250O\375;\227\031\026=Y.\211=V`\n=\320V2\276#R1=\361\347/=\223]\206<\023\313\254\272\350\202\340<M\217\216=\004\311\023\275\357B\321\274\210\310\215<jB\t==\266\013;\211\331\327=q\301?=J\225\206=\300\224w:\316\205\264<\224\354\324\275\006\217\233\275O<\212\275\361c\315\275\247)\376\274c\243\021\275\320\003r\274`\265\336;\206\341\037\275\376\000\206=b\002\330:\252\224K\275]X\003\275D\033D=\371_\025>x>\302<\024}\377<\315D6<\030\232\216= t\312\274\244~\211\274\035\252\037\273\340\205\365\273v\243\326<*\232\r\274\255 \014>\024\'\326;\242\222\372<\215\n\\=g\033\262<\227\006\377<utb=\234\017\303\275\337\026J\274\306\023\215<\274\245\245\275\333\246\224;\210\262\252\275\210\366w=p\3350\275\255\200\257\275\337U`<\261v\260=\253\314\342=\223\tw\275\035}|=\rx\235\275\373/v=\376\010\222=\317w\007\276U\330\276=\333\315a=\264J\177=\345\035\365\273N\212\324=\310\016\006=L\346-\275\203\022:\275\3456\225\275:]\017>\325n\315=S\234\244\275\301\235\334\273\356\230\322\274\014+0\274&%]=;S\345\272~\263\217=\\\245\237\275\332\202F<7\224\363\273\245\305\350\275;\031@=\333\326\321;\200[E<\275\347\342<\2531\271<\352\261\370<\271\336\254<\343\t\367\274~\307\324;\202/\311\275\361\310\000>\316\022\242\274\270\002%\275\277\370\014\274\001\036\024\276\236\240\333=^\237\236;$\333\266=\025\331v=\250\336\002\276a\207P<\225\315\341<\035Z\202\273t\227\215\275#H$\2742A8\275\032\245Q\275\003\376\010\275\357\324z\275\363\330\344\274y4\220<\363\275(=\231\032\316<\244\022\222=a\205\205\274\344c,\275\326\212\t\275\235\334\267:\007ip=\2759[\275\364o\007\274\356\333,\275\351\353A\274$\265^\274\250t\373<x\021\362<\246\237-\275\306\212\331<\rZz\2714R\270\275\361c|<\244\376\261;\035\005:\275pkR\275\020\036@=\033\016\227=W\365\255<uz\312\273\224\261\263=\235B8\275\335\360\'\275,\2136\275}\263G\276H\302\223\273\273\253\322=d\227l=\2105\251\275x\262\204=!\222V=(\323\204\275\324\354_\275\374\3576\275\300\357\203<R\346,\274\177\234\335\274\232\244f\275\372F6\273\363\266\312\275\022D\243\275Y5\231;\330wf\275\224t\334\275\221Af==\342\220\275\205\337\2759\302\036\202=\352\223\000\275s\006\335<\262\366\210\274ct\351\273U\351|\274\'\313\206<(\274\325\274\3650\005=\030I\004\276\366\017S\275\316B\267=t\\p\275\205\222\354\272\025\246\005=e\320:=\251\342\335\275\003\220|=\006\312\021\276Q\301\034=).s\274H~m\275<\221I=\013`\247\273\2559\205\275\227S}\274\031\200\025\275-\246\312=\235\342c\275p\335\244=\336b\027=\223B\214;H\345`=\n\350h\274\rW\\=\001h\221=\246\273k\274\266j6\274R\276\241\274\027\030\007=H\000\342<\366\351R=\022\t\212\275D\316\272\274\251\213><O\234\010=2\261\223\2754\224\315\274\032\227\325\275L-R\274\247\t\373=\021\262\245=\353G]=\306\223\341\274@_\243\273\272P,=\024b\002=q\330c\274\320\347\036\275\367\0312\275\347\234\243=O\303\017\275\226f\357<\237\356\233\275r\333\303\275\034X\266\274J\266\216\275\342\201t:\245\336$\275Q^A=c\234&\274\226\222(<;Z\237\271Z\013%\276@\247\363\273i\273\001\275.\265\366\275i[\333;\372\367\362<\203\221\334=s\025@=M\212\016=\251\035\275<\257\026\351;\017\344O\274\263\353\242=W\351\233=\272]f=\232vq=\036\020\256=\247\224\275<\002B\237\2744\235:\274\344\316Y<L\264\315<\242\217\r\275_\304\3248\334\356\224\273\344q\200=\270\213#=\365Y\341\274\252\241\026<\016\360\335\274\236U\373\274j\205(\275\322<\210=\257E\r\275\221\010\335;z\211\033=\346\224\252\275\223\007k\275}`\262<1\003=<9\211R<?\332<>\"\025i:\321\357\220\275\362\026\003=\220V\037\275\301\246\035=\325\242\t\275H0\377=!(\004\276\374\244&=\"!\233\274\021\272\220<@\336\371<\276\303V<\t\207h\2745\244=;]P\343\273\262\236\210\274\2355\007=,qv\275\\G\232<W\266\"\2748X\333<\003Z\314\274\235\321\n<\316\017`\275\275\331`\275>\203\263=\332\365\275<\313\254\253\275\305|.\275@i\027\276\200\256\203=L\2359=yu~=\232\336\252=/\247\317\275\014~\226<\337\326\253<\332IE\274?\266\016\276d%\247\275\256\204\210\275\370\277\306\274z\344&\275D\206Q<\265\0244=\265 \005>\203\273\035\276\037\247n=\344\310\341\275j\272\216<\262B\303;<\340\261=Vl\r\275[\317\005>\320\007\245\274L\361Z\275\022\372\240\275\245F<<\355~\206\275c\244Z\276\265\341\344<\254\251+\274h\376\313=\353dC\275\302b\021>\013\325\310\275\210\203\211\275.=\035\275\2726\005\275!\364\310==w\217=C\351\005>d\317a\275\004@\217<M\'\237\275\366\n\t\276\026}\366\274\226\001\272\274\211+\305\2747\300\250\275{\212\007=\214\363\253;\322\315H=Rk\202\275\337\210\027\276=\346\203\274_H\222\275s\240\025<0\251\021\275\327ei=D.\334=]\217\"=Y\310\352<C\215\317\273!\336\026=%\371\214<"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "lstm_2/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/concat"
  op: "ConcatV2"
  input: "lstm_2/Const"
  input: "lstm_2/Const_1"
  input: "lstm_2/Const_2"
  input: "lstm_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/bias/Assign"
  op: "Assign"
  input: "lstm_2/bias"
  input: "lstm_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/bias/read"
  op: "Identity"
  input: "lstm_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/zeros_like"
  op: "ZerosLike"
  input: "lstm_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Sum"
  op: "Sum"
  input: "lstm_2/zeros_like"
  input: "lstm_2/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_2/ExpandDims"
  op: "ExpandDims"
  input: "lstm_2/Sum"
  input: "lstm_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile_1"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose"
  op: "Transpose"
  input: "lstm_1/transpose_1"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_2/Shape"
  input: "lstm_2/strided_slice_12/stack"
  input: "lstm_2/strided_slice_12/stack_1"
  input: "lstm_2/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_2/transpose"
  input: "lstm_2/strided_slice_13/stack"
  input: "lstm_2/strided_slice_13/stack_1"
  input: "lstm_2/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/MatMul"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_1"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_2"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_3"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/MatMul"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/MatMul_1"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/MatMul_2"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/MatMul_3"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/MatMul_4"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add"
  op: "Add"
  input: "lstm_2/BiasAdd"
  input: "lstm_2/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul"
  op: "Mul"
  input: "lstm_2/mul/x"
  input: "lstm_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_1"
  op: "Add"
  input: "lstm_2/mul"
  input: "lstm_2/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/add_1"
  input: "lstm_2/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value"
  op: "Maximum"
  input: "lstm_2/clip_by_value/Minimum"
  input: "lstm_2/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_5"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_2"
  op: "Add"
  input: "lstm_2/BiasAdd_1"
  input: "lstm_2/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_1"
  op: "Mul"
  input: "lstm_2/mul_1/x"
  input: "lstm_2/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_3"
  op: "Add"
  input: "lstm_2/mul_1"
  input: "lstm_2/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/add_3"
  input: "lstm_2/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/clip_by_value_1/Minimum"
  input: "lstm_2/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_2"
  op: "Mul"
  input: "lstm_2/clip_by_value_1"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_6"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_4"
  op: "Add"
  input: "lstm_2/BiasAdd_2"
  input: "lstm_2/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh"
  op: "Tanh"
  input: "lstm_2/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_3"
  op: "Mul"
  input: "lstm_2/clip_by_value"
  input: "lstm_2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_5"
  op: "Add"
  input: "lstm_2/mul_2"
  input: "lstm_2/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_7"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_6"
  op: "Add"
  input: "lstm_2/BiasAdd_3"
  input: "lstm_2/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_4"
  op: "Mul"
  input: "lstm_2/mul_4/x"
  input: "lstm_2/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_7"
  op: "Add"
  input: "lstm_2/mul_4"
  input: "lstm_2/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/add_7"
  input: "lstm_2/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/clip_by_value_2/Minimum"
  input: "lstm_2/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh_1"
  op: "Tanh"
  input: "lstm_2/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_5"
  op: "Mul"
  input: "lstm_2/clip_by_value_2"
  input: "lstm_2/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/TensorArrayUnstack/Shape"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_2/TensorArrayUnstack/range/start"
  input: "lstm_2/TensorArrayUnstack/strided_slice"
  input: "lstm_2/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_2/TensorArray_1"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "lstm_2/transpose"
  input: "lstm_2/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "lstm_2/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/while/Enter"
  op: "Enter"
  input: "lstm_2/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_2"
  op: "Enter"
  input: "lstm_2/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_3"
  op: "Enter"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Merge"
  op: "Merge"
  input: "lstm_2/while/Enter"
  input: "lstm_2/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Merge_1"
  op: "Merge"
  input: "lstm_2/while/Enter_1"
  input: "lstm_2/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_2"
  op: "Merge"
  input: "lstm_2/while/Enter_2"
  input: "lstm_2/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_3"
  op: "Merge"
  input: "lstm_2/while/Enter_3"
  input: "lstm_2/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Less"
  op: "Less"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Less/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/LoopCond"
  op: "LoopCond"
  input: "lstm_2/while/Less"
}
node {
  name: "lstm_2/while/Switch"
  op: "Switch"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_1"
  op: "Switch"
  input: "lstm_2/while/Merge_1"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_2"
  op: "Switch"
  input: "lstm_2/while/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_3"
  op: "Switch"
  input: "lstm_2/while/Merge_3"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_2/while/Identity"
  op: "Identity"
  input: "lstm_2/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Identity_1"
  op: "Identity"
  input: "lstm_2/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_2"
  op: "Identity"
  input: "lstm_2/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_3"
  op: "Identity"
  input: "lstm_2/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/while/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul"
  input: "lstm_2/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_1"
  input: "lstm_2/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_2"
  input: "lstm_2/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_3"
  input: "lstm_2/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add"
  op: "Add"
  input: "lstm_2/while/BiasAdd"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul"
  op: "Mul"
  input: "lstm_2/while/mul/x"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_1"
  op: "Add"
  input: "lstm_2/while/mul"
  input: "lstm_2/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_1"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_1"
  input: "lstm_2/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "lstm_2/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_2"
  op: "Add"
  input: "lstm_2/while/BiasAdd_1"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_1/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_1"
  op: "Mul"
  input: "lstm_2/while/mul_1/x"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_3/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_3"
  op: "Add"
  input: "lstm_2/while/mul_1"
  input: "lstm_2/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_2"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_3"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_3"
  input: "lstm_2/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "lstm_2/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_2"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_1"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_4"
  op: "Add"
  input: "lstm_2/while/BiasAdd_2"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh"
  op: "Tanh"
  input: "lstm_2/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_3"
  op: "Mul"
  input: "lstm_2/while/clip_by_value"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_5"
  op: "Add"
  input: "lstm_2/while/mul_2"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_6"
  op: "Add"
  input: "lstm_2/while/BiasAdd_3"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_4/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_4"
  op: "Mul"
  input: "lstm_2/while/mul_4/x"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_7/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_7"
  op: "Add"
  input: "lstm_2/while/mul_4"
  input: "lstm_2/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_4"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_5"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_7"
  input: "lstm_2/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "lstm_2/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh_1"
  op: "Tanh"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_5"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_2"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/mul_5"
  input: "lstm_2/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_8/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/while/add_8"
  op: "Add"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration"
  op: "NextIteration"
  input: "lstm_2/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_2/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit"
  op: "Exit"
  input: "lstm_2/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Exit_1"
  op: "Exit"
  input: "lstm_2/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_2"
  op: "Exit"
  input: "lstm_2/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_3"
  op: "Exit"
  input: "lstm_2/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range"
  op: "Range"
  input: "lstm_2/TensorArrayStack/range/start"
  input: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_2/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/TensorArrayStack/range"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "lstm_2/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/sub"
  op: "Sub"
  input: "lstm_2/while/Exit"
  input: "lstm_2/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/sub"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose_1"
  op: "Transpose"
  input: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9910003
    }
  }
}
node {
  name: "lstm_3/random_uniform/sub"
  op: "Sub"
  input: "lstm_3/random_uniform/max"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform/mul"
  op: "Mul"
  input: "lstm_3/random_uniform/RandomUniform"
  input: "lstm_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform"
  op: "Add"
  input: "lstm_3/random_uniform/mul"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/kernel/Assign"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "lstm_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/kernel/read"
  op: "Identity"
  input: "lstm_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "os\300=\264\366\177=\231\025U\275\302b\327\275aT\270=1D\331\275\231=y=\312\277\002\276w\223\277\274\241J.>\370&\020\276\225\006\'\275v\235\235=\255\346\225\275\2574\353=\270\335\362=\036[b=\000\234\t\274]5\276\275\334\230\035\276\'\201T\274\r\n\346\275\016@\220\2756\013\270\274\270\306\332=\235\005(=3b\017>\300\270\312\275|\315 >mre\276\020\2319=\000\331\014<\357\270?=f\3149\275\305G\216=\217\035\273=\343c\351;\334-\204=+\332\007\276\310\033B\275[G\217\266\377R\024<\300\237\227=Q\341\351;\227u\251<e7\r\273\246\312S<\013\206\017\276^\325\202<N\326\213<j\347\277=\220\372\306\275\\.\310\275\241;\001=\037dq\274\014\236K\275\'\000\366<\307\377\232\275\0263\022\275g\230Z\276\311\271\027\275\355\006R<}I\315=\317P\200\272\256]\336\275\017\000\037\275B$C\275.P\225=^h\260=\273\2211=\252>\301\275HZ\214\274 \345\322\274\027~f\275&\016\237=\365!\227\275\375;\303\274\374\031\335=\357\234\326\275\204U<=\031\207\271=|\355\360=\305\000\321\274\244\201\003>\330\340\227\275Cs\243=g\374\312\275#Sl=!h\276\274\226\346\303\275\254PR\275\017\007?\275\254W\201=D<O<\037\267\243=d\r*>\2165\225\275\211\037\321<\302\276\301=#:\342=\260C\341=\260\324\303\275\226^\020\275\326\226\010=\245L\241=\356\317\206=\207~\232=\215\231?\276`\3633\275z\326\204\274f\014\313=4\031\r=J\234;\276U!\247\2753\017\221<_\251\022=\245\271m<\305\022K\275\024Mg;}\2143\276\007\360K=\035\263\r=\031\335\035\276]\312\323<\177\246S\276l^\225\275\222\227\235\274\366\376T>\033\370g=5\264\322:\325\313\004;9\007\261\274\"\027\370\274/.\213=\353y\206\267\203\333\312\275\317\351\211\275\367i2\276\372\005[<V \243=]b\323=/\344Y\2750\205m=\027\200\230\275&\206\371\275\267Bf\275!\346$<\234m\322<\343\327\256\275\342\024(\274+?\342;\202cI=\232\220\316=\233\234s\276\022\247h\274\374\327Z=`\325\342\274\rr\367\275BQi\2757x\240=\226\315\213\2753\301\312;kH\221=\241\234\021=\244BI=>\377V=J\273`=\240O\027\273\242\254\372=\013\374k\274\3533\335\275\370\245\351=y-\231=\021\330\332\275\362n>>\305\323\206=\236\310Y=\301\222\006=R \023<\301\334\257=\276\\\213=5dw=\273\336\037\276@T\024=\000\024\341\275\232\250\364\275\322\n\237=\226\3028\275V(\334\275o~\320\275\240\341\265<\241\211I\275\262\007\264\275R\216}=g\265T>.Pa\275=`V\274\014\274W\275\341\336\276<\216x]>Xr?\276\271:\311=j=\341=\001\206u=\351\313\207=N\257\336\275\214t\010\276\250Vp=I\252!\276V\032F\275s\275\202=\2264\016=\r\023\r\276p~\034\2748\361/=\217\026~=\307h\000\276z\177\251=\003,\200\275#-\213=\315(\253<\252>x\275\253S\317=\302\260\270=\224\243e\275/\341\237<K\222z\273\247o4\275Q\242\253\274\333{w\274F\344\013=V\000\302\274\034\210\372<!\033\214\274c\027?\275\221:\226\275\016\215,\275\275}\320\275>F\305=\213\241 =w\215\n\275\204\346\271<B~\327;\2619\223>:\324\357=\236\326\212<\360b\347\274\274\3534\275\352\021\023>G\305?\275\261\366H>\201\243\332\275m\002\020\275\351\3201\275\032\'7\276\374W\304\275U\035\364<\333\344\224\275\204po=O\223\303=\364\345\244\275\202C[\275u\202\343\274\033k\303\275\266\257\263;\232<\221\275p\347\322;N\251p\275\027\257\031=\237\271p=\243\333\307<\372.\014\274v\263\331\274^\260\240=A\201N>M\n\222=\177\212\t:\251\007e\276\357\261\235=y\371\375=P\223s=\271\020v\275O\200]<O\264\253\274n\373\313=\251\344\270=\241\331y\275\357\361\331\275z\312X=OR\362<\237D\255=\255\213\004>\263N\027\275\263)\\=\265\344\235=G\340\364\275\316A\307<\232\236\222\275\360W\017=\350\366 =6\344\210\276H|\201=S\230t\276\273\323\332=~,\262=3Lc=\273\023\215=\275\222{\275\352\214\222=L\354\303=\003\211\010>\271\357t=\361Z\325\275\235\032]>\367\242\202=w\214\263\275\361\2156>\352\235\0278\t\251\271\275\\\265\223=\242\203y<CV\221\275G\265*=z\261\365<\023~\030=\034\342_\275R\223\234=?\226\350;\324\241\237\275\250\203\203\275\\b\226\274.\310v\275k\t\317\275\266X0=i\2511>\032\344,>\026P\301=\204\037\215\275\364D\010<\304c\006\275\204)\322<\261\327\207=\375r\365\275cM\177>\225\212m\276E\020\016=4\203-\275LE,\276\353\265\277={\220\310<\325[(=UK\230=\277\370\326\274w\212I\275\256\205\344\275C\264@\275\314d\'=N\201\037\274\236Q\235=\220\331\256=w\233\026=\024_\340\275\367\365\307\274\344[\3228\207[\277\275~\340\321\274\244uy\275\310y\202=\177`\212=\323z\'=\000(\243<\313Ku<\2458\300;\305-j\275\272\026\341\274q\032W\275\375\333\251\274[e\024\275Q\275\217<x\000\t\275C?\276;$\332*=\252\244\025\276\010X\211=\344Xv\2753\212\003>\3244\312<\274^6\276?\027\320\275\006\233\251\275\352\331\231=\266\352\035=}\3548=\356\317H>\255\326\236\275\276\253\354=\027&X<\225\317\310\274\301a\335=\364Z\020\276\202\303\303=\266\304\337=\2560\225=\033na=\374\240\307\275\212\227->\244\371\327=<|\344<Z\274\023=[\341\241:\324\356\225\275Le@=\n_\322=XL\322\273\232\'\020<\212\345\'=b`W<\273\022\341=4\024^\275\307\347\356\275\n{O>\213\224\345;yb\327\275\333\372\374\272\343\375\376<V\000\246=\266&h\275\244\243\031=w\031\\\275\016\2563\276+\377\034\276\312v\033>:L\352\275\305\036:\2758\355\372\275qx\374<\3521\001>\321\306\333\2757s\221\274E\2260>\353\373\014\2767u\307=\026\355\271\274\360\242\235=\246\004\263\274?\304\'\275\027\347\374\275\341\216U=\014K\255=\357\227\025\273\'\273\014\276\250\3446>t\305\320=\320\307\336<U-\020<\247M\274\275t\214\364;5\221\204<L@*>\003\215\320\274lz\237\273\257\243\233\274-k==\0217\017=\025\227\337\272\337W?>\201XV=\270\252\210=\000\306c\276\246J\356:\307\325\216<HX\202=\311T\266\273\313BU=\365\300\331\274\331\334/>\"\231\232=\227\357J\272\361\344H\275l\206\n\275\224\275\370\275\361\034\255=ZG\235=\217V\024=\003\223\375=\254\316\225=\350n\271;T:\247=,\216\234<\210\001$<\325Z\004=\313\351_<\014\r\232\275\375\340\005\276\243\204b\275\204\3528\274\212\267X=\014qn=\215\'\217=\326B\261=\370e\315=\0140\277\275M\374\313\275\023\035\367;\242u\212\274\265\362\216<\273[w\275\t$\217= \311A\275\237\351\213=d(\313=\211\021\266\275(!\207\275\246\317\241=\253\226\020>+&\212=\002r\320<\312\306\326\275\326\333s\275\306W\222\275U\254\'>\\\2122=\252O\326\274e\257\231\275\314\235\337<J\304\316=1!\205\275\350\244\302=\316\223g<\002\000Z=\327\370/\275+.\320\275\333\204\345=\331_0\276\216\250\361\274\354\251\325\275m\241\351<\374\346.<\370\035_\275\260\314\235=q\022\275<\207\035\340<\277\222\272=\273\261\346=\366\215Q=\353\235\365=\372~\343\275U\215\037\274\363\220\001>\'.i\272\2068\345=,fl\275\342\252\242\274\352\006\033\275=\211\227=\307^==\272K\021>.\025\213\274\234\353\020\275,\306R>\211\354\027\276=&\023\275\000\016[=\257?W\275\376uN>\023\372\200\275\351y\215=\206uV=\232\347\246\274G&4=G\365E\275\271\236\326=\306\334\342\275\216\027\207\276^E4>\343k\275<\201W\022\276\020\023\371<\262\243C=\355\322)\276\305\030\343=|\232\216=F\234s=\017c\341=H\373\022=\322\371\227\274\330\031O\275\253\275\234<\216\210\311\274\273B\322\275\342\247\347;\303T*\275a)\223;\240:\211=1\264\034=\254\261n\275\271\237!>\366\325$\275\"\313\362\275\240\310\321<>\271\331=\304\034\366\275\213$\255=\n\246\005\276\235\341[=\350\254\237=\237-\010<Z\366\010\275vZ\330\275\007`\250\274\252L\333<\206\341\267=#\351\354\275\322\373a\2747\001X<\362s\n=\031\023\250:\314 \235\274\341%J\275t\227\'\275\377\014\017<(\214\245=\311h\006\275\233\255\023\275Q\202\266\2742\363\035>D\344\371\275\224:\366<\211\371->\260\250#\2751\232J\274!N\252\275\365\247(>\244[\350\275\376\006\030\276\203A\017=~\265\211\274\300|\t\2760\310\225\274w\240\014\276)EE=\000\303\300<Y\371c=\021{\340\275\315\344e\274\352Ax\2753ab\275\326\252\214=\004\3069\274\361\273\025=\270\010[=\241\364\373=L{\301=M\254\361=\222\342\223\275\"\231\254\275\336\351\310\275\271\225\"\275\330L\363<\r\322\375\274>\262\303=\005\373\247=\326\377\214\275\030\206~>3\301\"\273L#\372=w\221\353\272\261)\375=\234\370\232=K\346\346\275\377\223C=\016\223\213=\000\356\335\274\005\302\310\273\232\036#\276\324\030\323<\013\031\336<\275C\020;\372\330\360=\tx\021=kW\311<\360\364B<D\201\034>\t\217\020=\264\013\246\275C\033\016>\360\251Z=\001\265\276\274\233\3038\276\035T_;\001`\237\274w.\270=\225\020\322\275\017\023\226\275yO\201=\377hA=\200\244}\275\334\264\273<\213\223v=\262\226\264\275|\327\351\275\251!\242\275\234\272\362=M\250\n\276G\206\325:1\037\357<\014\257\245=5\033o>\324\036\203=\270\353J\276x\264\235\274\3553\342;\337\007\014;9c\025=\254\356\267=]\234\224=W(\353=J.A\275l\304\370\274K\002\352\274Uq\217;\327\356\\\274\254:\327:\265\010b\276\205\361\314\274X\350\331;nX\233\274\266\334\333=\272\225\267\275\tX\266\275\213L\013\276%\347\007\276\335&q\275\355\007\025>\230O\264\274\204\020\020;C\332\332=HUS=S\216\t\276>\244\247<\272\346\356=\316C~=J:\177\275_\325\013>\0201\"=\351a\023\274\317W\376=f\241\337=\316HK<\360n<>\362\274\306\2744\326+\273\240\302\255\275\247\355,\276\032za\275Jg\334\274;\275\023\276$\017\270\275\370~\324=;\372)=-\227d<y\304\316=\347\354\261=w\311k\274rT>\275\374\313\314\275e\336\341<\233\205\346\275\257_\272\275nU\322=\024)\372\274o\277)\275\'\326q=\212T\252\275\360<e\272\216\004X<\361\345\002<\305Ep=\215\213\231=\nv\305\275(\377\333=\321\336\367=\310G\002>\227&\017\276O\226\357\275\016\322\321\274\",\302\275[\241$\275|\375\021\275\312\014{\274\375\270\376\275I\213O>\240z\317=\224\210\203\276\271\357\000\275t\332\367\275\231e1>M\275\202=\325\357\272\275\030\200\366<\366\363\026=\356\325\303\274\352\3645;\002\302\223\275\".r\275#;\035=\351\016T=*\221\347<\016\225\366\275\300u\022>\221\252\004>\320\250O\275\207\312}=\007T\206<\013E\216\274\213\255\257\274r\236\336=5)\226\275\361l\361\275\331\322f\275<r==[`\234\275\204\254\372;\212\324\002>\016\322\214\273_5A\275Fk\026=\335\256\233\275\225>\375\274\'\266\003<8\237\243=J\001\231\274w\337\331<\233;_\275)|\033\276\355 \327\275\032\363\310=W\000\'>\010%\200\275\303c\216\274z\366\263<\270ki:\270\210c\275\232\243\312\274~\241<<\335*\212\275\2137\005\275*P\025>^\233\022=$\007\343\2755\357\227\274\355\272-\276J\210\235\275\227\320\r\276\225h\264=\034\037U=\275\244\216=[N/=\363\010<\275\331R\016=l\226E\275\021T\353<\361&\256\274\345\023\342=\001\2207>KFG\276\304\n\260=~\241\n\2763t\235\274\366\337M\276\375\364\355\275\025M\204\275\312_\035\274T\2026\275\244\002%\276\332C@<\224\031;\274m\2246=0\344K=W7\372\275\3623.>\260?7<\210\372\364\275\261r\235=\026a\264<f\261\006\276IWa=B\315\334<\206%\307\275\236,\201\275\332O\253\271\250*+=69\306<\026\337\274<\323*\307=\020\336\252=\232\370Y<\"\r<\276U]\366\274\3319\030\276`4b\275\317\317\277\275\234\226\000\276\325\277\002\276rm\324\273\241P^=i\024\\\274\371\255\211<C\026\234\275h\031\320\275\253]1>D\235\204\275(M\004\275\263\034t=\230\230n=Gw\t=z\227\016\275\260\205\375<Q\224|=\306-\315=\257\275\341\275\007\325\233\275\241\2027<\t\305\000\275\250\r\365=\210\303)\275d\226\253=\361\216\326=\343BD\274}\336\257\274\306\375\256\274\260j\337<\342\241\265;\356\375q\2759\257\311\273I|\337\273%\250\030\276!c\274=\272\334\335\273y\212\261\275]\275\351\273vh=<\254U\200\274<\211}=C\363\272\275\224m\035>\302n\003\276\367W\215\275]\317\312\275\203\2534>KHF\275\014v\354\275\300a\215>\034`9=\253\332\005\276)\221\014\276L\353 \276\\\362\202=\351\261\267\274\334\370\247=\325\322!<\300\267=\274\351\334\201=5S\204\275\261I\036<\237M?=\014\341m=\266\342\254=C&\252\275\274O\030>\232\223\316\274+m\245=\305\364R\276\325\212\241\272\272\204\026<\376\275\340\275q\276\372\2738T%\275\374\315\261=\257sb\275\377\225\257<\241 =<\317\347\357\275\273~\263\275\226k\016\275\350\344\317\274m\305\207=\007B\304\2753&\004\276\275\247\344<\375;\342=\234\325\026\274\200\224\r\276L+\245\275\301\233\337\275\313>\017\276\307\362\373=\306-\254;\324\021\247\275\276\212w=Q\253X\276\362\374\254=\226\223\367\274\257i\305<\316\251\240\275\267\232\033\275\377\204$=Kf\231\275\034Sg<f3\370=Nr\262\274]\324\023\274U]L=\375p\303<K\247\347\275l\206\017>\344\236|\275\200\274\024>\237\353\222\275#K\240=:*\317\273\007Qp\275\253\313!\275\"\217!\276F\215\333<O|\242<^B<=\202*\000<\250V\216<\020~\033\276\r|\351<G\232\037=M\236D\275\277k \27618M>\366\2401\276\367\037\241=\304&\010\276;\321\334=v\007\273=\321\273\345< \021\010\276\031BX\275;\266~\275\227\302\226\275\207\"\003\276\351\301A=^2\021=\260\352\202\274\277\361\337\275\263\253\267\275D\304J>\204\233\215\274\021\366\216\275\242\006\\\274\334\033N=X\331 \275\001J\r=K\006\354\273.\202:=\030\343\326\274\325\316X\276\302aB\275\341\t]>\333[_<\032o\022>\nq#\275C\320 >\211\220\376\273\244a\031\273\361\344\237\275\030\244\032=\261\257r=M7x\275D\350c<\374\343+\276\244\216+\276\302&\023\274\372\275\240<\262\221L>\364\254\376\274\036\353%\276\032\005\334<]\325\024>\211\370|=p\310\335=9\025\274<\032c\300\275\255\305:=\000\326\r>\234t\243=\355\240v\275\'\000S\275\316\023\213=V\271\005>\213M\206\274m\272?=\200\371\200\273q\031\322\275p\326M<\272U\t>8r\342<@\336\227<v\"\255==\3623<\254\221P=\207P\006\275b\016\033>+\022\317\271\2400%\275\306\364\010\276\271NJ=[\237Q=!\3003\275\236\017\007\276\252v\364\274u\254\325\275\365<\302=Re\247\275\024\233\216=*7>\276\377\221\236=\212\226\017=\025\341y\274\307A\313=\"9\215=/\022P\275\320\n\304=\343h&\274\236\2661=\002I\027>Y\227x<\341\362\322\275\367|@\274\207\310\220\27545\312\275\rX\031:\335\203\262=\331\010b\275\342\030\004\276\346\302\223\275\351\302\n\273\243\213\033=\350\301n<\370,B\275\240\021\315\274\344\364+=lh\007>\311\323W:w-\227=\352`U\275\320\\\267\274\321\333\202<\343iI\275\323C\034\276\251\321\204\275\303\336b<\335\266\034\276\221,\213\275m\204\033\276\007\032\214<}M<\275\242\330\265\275\201\252\331;oEb>\003\350<\275\350\332\250\275\014\313F=\362]\320\275%\353\206<\212k\302<\235\0255>\302L\326< \216\021\2751\335*<`a+=\360\377\352\274\3512\343\274\010\"\002=\357\241\261\274\207\314\362=lV\250=\2672\216=\334\325\r\275\267\314$\276\272\000\371=zD\020\276\372-\032=(\276\365<\217\362\207=e\216\253\275\257\320\245<\343]\024\275\244\206\023>\"W\201=\236\225\373\275\027\370\275=^\246\376\275\364u\363=(WG\274\311\326#>v\254\357<rM\345\274\016&\255=\017\220\265\275\322a\304<\255\200\352=\260\036\344<N\372\344<0~\n>\205\024\014=\227\007R>\374\332\3749\004\240\014\275\230\035\260=\331W|\276k\022\344=\031u*\274s\007\264;\200\005]\275*\205\016>)\346\232=\321\237\320\275u\271\034=O6\245\275|\217\027\274\367\365\252\274\315\344O\275\315\366\205\275\"m\347=\214DW\275#\340\233\274\235\302\316\275\316\345\027\276\316\026\t\276s\345\222=n\322\322;\'\010v<Q?d\275\005\tJ\275\'\343\031>;E\354=\305\214\307<Fe \276\270&\376=\230\247\347\275\311\n]<A\202]\275s\240\216;\027D\300<\346B\222=\340\260\266=42\241=\000\263\252=2\014\'>\321\3572=\237y\266=\225\322\313\273Z\352\325=\320\314\035<[\300r=\264\265\023=q\253\207\275\304\222I=\374a\321=\3553\022\275\260C\027>{\277\333\274\277\245 =e\\M<#\354\240<w\036%\276\204\010\025\276\252\232\240=\273x\331<v\"\231\275\026d!=O5\310:\350\221\201;\233?\321\275!,2\275\374=\027=\260\032\365\275\232\260i\275\224N<\275y\261(=\034\363J\274`\t\274=VE>=\325\352\022>\315\334m\275\264o\204=_\217\231\275\347\006\241\273\033\013i\276\311\325\272\275\347+\200\275\311\315\222\275vI1>g[\272=\244$\021=\367\342,=U\211}=\336\306\r<\037\352\020\276\216F\177=\304M\013\274\312\200Z\276e\207G\275v&Z;\203\326\264\274\177\022Y>\024\240\3019\263\0026\275\327\271\023=\2248\313=\373\325\036=\327`\331<$%^;\026(\205;eM\365</\253 >\020m\231=\311\322X=\205\330v\275\257\033\340\274\237\332\n<\341\225\362=\024zA\272\031d\213<b\345\345\275M(\247\275\321=&=\t\r\274=y\244\n>\250\372\320\274P\227\334=z\352q\2763\221\256\275\350\267\324=r]\252;\306!\317\273\255\344\\>tdC\271\303;\211\274\364+\016\274)\334\232<\316qA=4\232A=\037\330Y\274+\177\317:5^-\276\300\213L=+u\034=\004\332h\275\326[F=Z\353\260=\222\322\006={\252\320<\330\003\222<\243\225\364\275\271\270e\275\326\330\003=\354\366\355=\244\210\006\275\312\003\255=w\206\374\275\272<X>\000\032\022\276\322\202U\274B\236\"\275\201O\024\274\333\337E\275Q\216\n<\255\276A\275\234\177\005<J\010\233<\202\246X=t\330\351=\233\013X\275$\327\255\275c\177l\275!\004\016>bH\202<\032\271\262\273\325\212c\2752\263\261\275O\'\315\275\311\n\266=\004\236h=1L\377=\256e\356\275\247\276\313\275W\314k\275:\032\337\274\037\202k=#rA=\224m3>\276H\264;\261\340\357\273\352A\325\275\253(3\276\'\3632<\335v5>hr\212=\277\251\254=\3733\033\276\324G_=\333\"\036\274pX\306=\007}Z\275\314\331F\276gTG\273\3113\245\275~s\266<\025\017\374<\357R\234\274\360\340\\\273N\362\336\273\260\367t\276V\340\312\275\352w\223=s\224\251\2751\034\016=\314\025\274=\260\210\255=n_o=\310\251g=\226\030Q=ni\340\275\025\276\347=;Tw<\262\331\036=U^\003\275\256\223\215\274\033\201G\276x\227-\275\200\227Q=9!\001\275m\2262=\25507\275c\2628>Gv\021\275t\245\377\274\375\004\226\274\205q\225\275\366a\033>\276\266?\275\033n\371=&-\031<\025*m=\241\365\032\275\336\031\243\275\223\306\315\275~\306\016\276\272YQ\276S\320\036\275\376\300\030\274o:\177\275\377\023G=(M7\275\000\361\255;\353\177-\276\305S\345\274\021\030>=\207\255\030\275\306@s=\353\n\332\275\311y\021\276#{\267=\334\372-=\000\222/=Ci\014>\305\"\026\275\035,\311=Ap\303=\266\177}<W\251/==\026\213=V:\227\274\217\026\237=\r&\203:7\330=<\342\244\231=\227\275\376\273\271\203\341\275\036\363\315\275\334\354\016>\217L\010\276\0366\036=A\021\226=\341N\231<\212\336K>\312PA\275\006\301\313=\343a\272;\332\331\223=\247\340\205\275\343~9\275\n-\315\275|\273\267\272\311\253\303\275\342\355:\275\034\026\335\274\201\372\246\275\006\305\253\275\246\326\225<\373_P>\330\343\263<\035\306\200=\332\227\332=r\306\340\275okb>\354\034B=Qw\222\2753B0\275\207 \014\273\342t\206=\223\212\022\275\264p\356\275N\213\202\274\025\'\002>\220\316\213<\205>6=#\364\364\275-G\204\274\327\t\322\275\010\021\024>d\035\273=\263\367\375=~\365\000>q\256\363\275\372O\267\275\273\222\306=/\310&\275\300\376\366<\036b\037<b\310C\275\226\362U=\017l\021\275\264\211\370<<\276Z=\215n\267=\027j\256\275\364\343\\=b\251f=)\027\212\275\313Eu\2750\354\320\275\224\321\005>\177\332\025=\030\333\331\274\326m\234<\274h1\275\332p\233\274\023~\357<\025\305\033\276\233RK\275\243\300\264\275\3766\337=\036c\246<\206\254\263=\247\300v=8.\203=\375\333\010\275\007\220\216=\"-F>\346@\364=\247KY\275\224}@\276s\0233\276Z\262\254\275AT8\276>\254\013\275%\217\263<0\370\013\274\350\216\035\271\314\354\010=\3659\312\275\212\372\331=\250\351l\275\345\244w\273k\261\216=\360\315\\=\227\305\275=@d\275\274-\025\330=\320\271g\275\223\307\334<\370\260\234\272\261}q=\205\242,\273\202\275J\275L\205\005<\353\365\367<\234b\250=\305\207i\276\203\354G;_\366\033\276\003Y\341\274\242\0346\275\231tr=\227\337\003=\000Z\374<\001X\027\275K\312\204\273\214\310\362\275%(k=\325|v\275n\0141\275\006y\326=\274\271\327<\355\371?\275\273\021\037=\342\276.\275b\220a\275o6P\275\331\365\205\275yYW=m\242\017>\373r\220\275j3\256;\304\233\225\275?6\301\273\264\205\031\276\232P\234<\304\276\256\275\304\342\224\275\344\313\004>)\3427\274\342\236\356=|$\203=w>i<>\314R=\023\013\264=+\000\223=\331t\010\274\213X\341\275\323\004)>\211A\263\275%\220\257\274\213\3539\276#\322\001=\214H!>i\303\366<\330\306\215=\317\330\262<s\236h\276\332D\376=\273\325\221=\002b\010\276\255\3567\276\232\207\227=*g\003=\353H\264\274h\326\003>\032-#>EB\312=\004F\236\275\274*3\275\364\031\322\273\360\336:>#\023\026>\356\017\n>\344$\244=\222\220\276\274M\371\267=\203\\\031>x\255\025\276\2062\351<O\267\273\2744\275\244\2758L\026\276\307\241@=+\235\312=e\027C>>\246\262=\351\355\241:\000\374\302=i\346;>\365\306\236\275\321`\\\275\237\251\242\274BM\345\273\023\324!=\315\266\r=cz?>\246\026\214\275+\310\302<{\203\330\275\352\271\242\274\261\361\314\275\017\240X\275\3050\314\272\316B\277=\'\253\007>\007\270\304<\025\2277\276@\206\032<\324\370P=9\375t=\320\307N\275\363\347^=\316S\242\274\245,\337<\005\322\010>\274\2670<#\013\306\275\345u\003\276_R<\275?.E=?mN=\347t\317\274O]\246\276\006\033s\275\326&)>\341 X<\327\242\361< \2708\275\247\003\032>L\273<=q:\\<\274\232\204\275\304\210d\276\326n\037\275\r-\313\273+Gg\275d\247\214=\201\370\250\274w\216\306;\3333\222=\217^9<Y\'\255<\032G,\276\377\346\017\273\037H\242\275Sc\332\275\207\340(=\242\242#\276\337\257l=\246\355Y<\2056\313\275\311h\236\274\n\024\312\275\362J7\274\347iX\275\261U\204\274t\326\032=\234\377H\275\241\t\t\275|\353\334\274\327\267\026\275w\323\203=+\364\032\274\323\344X<\312\211\257\275\201\360\032<\000B\221\274\002\2522\276K\215\214\275\312~\254\274\256s\332\2736\253g=o\370O=\207b\014\275\246\261\344\2753\007;>\214\307\236\275\214\304\007;\024\332K=\307-\265\274Y\001-\276\213\013\311\274\220\225\332:\320\224W\276\242,\304\274\310\247\276=\nB\221\275HS\230;\372+\352\275\306\350\223\275\373y\037\276\210Y\375\274\325\267\300\275\031r\340</\312\232;\304\"\322\275\036\016\226<\274T\357<\320\347;<(\024\223=NO\216=\020\004\335=\271\333\242\274\267\245e>*Ve\275\200\r5\276=\246\301<*@\351;t\307M=,\034\003\276o\366\210=\022\037\230\274\035\326B\275a\314g=\031\205\352\275\310\215\021\276g\302`\276\324\225\017>\020*\222<\'\332\233\271\303M=>\355\366\026\276\367\325\334\274\223\212l<\0232\331\271tC#=}\212\270\274L]+=\276O\266\274\3410\306\275/0\306<E\2107;\027\233[=LC\000>\207\336\250=.g>\276\371\372\337\275\226\226\205\275\301\342t\275T-4\274j\nL=\211Y\020\275\t_%;\220\215\212\274\221\364\217=+\333\224=\224\301Z\275\027Y|=;p\003\276\333\304\373=d%\340=.f\023>\364\022l=Y\014\327<\021m\004\276\237Mg\2753#C;M\2319;\016b\006=\355\2600=\240\021u\276AF\025>\244\360\360\273h\205\307=\0334\027\276\226\036#\275n\257\360<M\345\027=[\355@=B2\241=\013(\342\274(\262*\275E*\204\275[\036\372\274\007\263\377<V\031\316=\352\213\013\275*\316s\274\324\320r\275\332\336\223=\372\350U\275\374\303<\275<\013\242<\223\036\006\276\303i\377<\305\312\324<\362I\275\275\312\332\242\275\334\256\216<\006\256o<\343\277\266;E\251\227>\356)l\275\351*|<&\361\265=\236\266\266=+\326\340\273\206\022\262\275\274\323\220=\377s\204<\203\345\007\276\256;\223\275h\232\232\275p\210\010\276\204\004!=d1\025=!+\006\275\264\332f\275J\206\272\275\200\'\341\274\374\002\'=\017N\327\274\201?9\275p\320%=\327\357\214=\347P\002\276\221a\006\275\302\250D\276t:\235=\006\025\031\276zU\035\276`~\222\274\216\n\262\274\370I\245\274t\240\204=\372\217\354=@\221y\274\2456=\272\375M\233<\203p\245>\210\355\377\275\252\223\343\275N\371\371\273!\354\016=\276b\356\271/\367\266=\310XQ<+0\353<\362G \276\032\016?\275\322t\002>?6#=\213\311\026>\347z\037\275\r\243Q=?\217\213=\366t=\274\333\336\234\274\211\0320\275\036J\217=\246\250\334=.N\203\275\025Oy<\211Z0=1\277\367;\231\3053\274\312\334\260\275\241h\223\274\3308G=\213\266\037>\246M\226<_NQ=@K\037>\342T\276=\212\256\226=)3e=\240&o\275\351\233C=\2675\233;=:\023\275b\023\212=\362\277\325\274f\213t=\343\n\016\275\t\321,\275a\332_=\233\341\226\275\034\t\354<\334\375,\274\014\302\006\275X\300\272\275\210\'w>\307^\234=I\373\233=\276\207\206=\026^~=J\215\253=\336U\365\275\230\375\n>\336\306K\275\005\207\306\272\2351\320;\177\n3<.A\212=\316\213\232=\311\325L\276\242\266\000\274lK\t\2759/\010=\361\217 <\221\252\300<\372\367\002\276\2126\217=j@\256=\343\273\244\275\004+\242=2y\322\274/\343%\275\322\363\223=\351\007\317=\350\314\244<\177\347Y=\243k\325<C\275\330=\263\032\240<\t\236\336=\263\010l=\225\353\204=\203\305\254<\312>\020>$co<)\272:\275\313\245\026>b\233\315\274\"\263\021>z\320>\276\317\303\346=\020$:=\246\260\010==\312\346=\350(?\276j\232\200\274\261%\216=\302\351\'\276\275\365\343=\253\323\350\275Xj\203=\355D\212\275\200t\037>\272J\211<\345L\230;\347\313D\275\362\223\304\275\250\230f\274\377s,\275P>\016\276\272\345!\275\372m\274\275\246\t#=\225\016\315<\341\222\002\275\257.\t>\326\362L\276\341g\305=\177\005,=Z\335\371\274l\227u=\005R\237\275}M\303\274\361\306\244\274\305\t\362\274\301>B\275avI\275\271\017\366\274\217n\251=Q%\007\275\007Fk\275\006\355\201>,#\376\275\216}M\275\n{\r>\022\322\270\274.\227\026\276\224\014\356<5\017\273\275\311`\006\272\275&[\276iu&=\037\221\241\275)\321\203=_\022d=\250\355p\275b\204\347=X\257i>B\242\242\274\340\032\333\275\223`g\275\020\004\315=\241\353|<_\222\200=u\225\243=\267Y9>\262\367n\275\326H\336\274)\311\271\275G\235i\275\006T\r\275\321\\c\273=\370!>\251\272U\275\274\311\330\275\253\262j=\r\306%=\206\242E=\034\212[=\300\274\376\275\272\363\007\274\312\314G<4\266 =\271@\007=\255\345&=|\200\020\276Lb:\275sFQ\275\201(%\275~\365\000=+\255\233\275\\<W=C\314:\275F\241\235\275\031H\033\275\320\231\223=Bd\r>\245\240\025\275\334)\320=\304\342o=c!\257\274eH9\275\255\010(>\325i\313\275\267\007\035<\325\016\236\274U)J\276\222\006\247\275\tcw=t\313\304<d\242B\274^Y\">!T\275\275\205x\232\274ls\227=\303\212>\275\2632\277\273W\233\207\275\0069\341<M)\355<\236\236\235=\251\234!<\0215\214\275XA\216=\306u\017>\371\361\003=\262\0206\275it\326=Ih7\2757\366\024=\343y\267=\205\334\215\275\321b{\274)L\016>4d\377=}@!>\316\224}>g\003a\275n\230\311=\323\354\237\274\035S\023\275\354\220\267=\031\260@\275,k\032>a\234\206\275\\\237\001>/\255\361=\022\016\032;\303~\">\276p\232\275A(\033\272\373;\265<\271\232\352\275:Lm\275\004\033\224=K\352\004<\374T\023<\375\371\224=\324Z\321\275V\267\346=\314h8=\206o \275*\226\314=\274!\271=\250;\371\272\214\231\204=\374\240\274=H\367\213\275\215O\032>T\362\255<.\261>\274\020%8\276\320\373\244\274\357\231\233\273b\340\231=\361\266\344=?\241\317\275\354B\010\274\311C\017=,\317]=\313R\342\274h\336\r\276\256\"m=#,\014=RU\030\276\216\214\352<\32100\276\373\213\314=\210\343b<\002\026t\275\343`\223<\252\031\224=\317\374!>l\033F=\325\310+>\363\316c\274\335\034\247=#u\342\274\251a\366=\005^\355\274\241\236g\275\322!A<>E\334=;}\022<Xv\250=\262{o<p\306\232=\274\231\360\275\205\366\244=Z\230\334<\2147z>\331\234#\276\346\005\233\275~\305\331\274\3541\217=\301\262^\272S\215\014\275\376\026\346\275]\014\303=\"\266\213\275\250\004\317=\353l)\2763=\353\275\367\205P\274\321\221\264=\356\177\312\275?V\340<\260\003T\275\343\333\260<\272\317,>\325\2308\276\031\261\025\276\022)v=\333\202\365=\331\227b\275\302\331\267\274\333\375n\275Y\304\036\276A\301v<\301\337\213<\331\357\231\275\340\275H\275D\035\t\275\377\361\225:RM\264\273\217\213\235\275R\230\343\275C@\200\274\201\310\257=\022\335\207\275t\214\255\274\353\207\302:\221{\022\275\021=*=\326C\260<nQ\010>J\223\356\2745\365\200\275\"-R\273\225\367\037\275\'\026y=}]\014>j\232\220=\361f\243=\206&\274\275`\301\025\276\250\221\021=\211n\373\275;\350\"=]PL\274\337\221\261=\234\240\227\275\333\254\014>A\223\377\274y\336\035\276\224\224\311=h\371\327\274;\216\302\275\277\367\342\275\322\025\374=\010\246\365:P\332d\275\275\365\302=\273k >\354\021\333\275|U\314\274@\375\242\275\312\302\221<9\030\242\273R\342\002\276\337\227?=\0229\340\275+\235!=\207a4\274\256AC\276\2414\276\274J>\316=D\330\327\275c\321\205\275\001\266\243\273\013\232O=\251\033F>5\272\220\275\000\205\023\276j\246{\275\017B\252\273x\3131=/\370\276<C3o=OO\n=D\227\231=\215K\267=\265\303\206=8-I={L^<I\201\004\276\373(\032>T?%\2768\326\r>\327z\273=\t\270{>\022\240P=\000\016\030=V\341!\276p\353\020\276\220\253\243\275\330\252\206=\235?\r\273\316`&\275\002Jd\274\326X\266\274\216\356M=\320J{\275\330A!=\250\215=>H\005\364\275%\366\333\275J/7=u\225\325=xB\316\274\001\200\315\274znr=\236i4\276\214\300\264=\034\021\230\275y\025?=\315\276S\2747\022B=^\243\251\275\251\331R\275\220L\364\274\'Q\216\274\006#\245<]U\256<\006\246\264\275\304de\275<n\036\275\3266\321=D\323\213\275\206\363E\275+b\231<6\265K\275\001\214\000\273\204\254@=mN\247=\274hf=5R\372\275\2351\265<\361\356\321=\260\202\020\276q\006B\276@\224\371\274@\316\273\275\007\275\202\274?\356E>j\361\352<8\\\343\274\037a\227\275\271\201\271\273\002\243g;\302\036E\275\245\355o<\347Wa=\356J\335\275\007\244\345<\336\320\272<\274\221k>\363\275\304=\225X\246\275\036\3553\276;\344I\276\211\t\277=|\377:<:J\260=\316f9>\014&J=\322\'\227\274\255\344\313\274\022\251&=\213\373\033\275\010*\000;\211\321\204\274q\365\232<e\272\032=q\331\200=\340q\267\275\254_\226\272:\305\251\275c\2472<:K\365<\326^-\275a\033\210=`U\033\275\214\311.\274\300\250\035>\245\342t\275\035\031\'>n\220g\275\320\337\241\274sPX\274\227j\261\273\362\200j\274h\031\007>y\001\250\275\225U\234\274y\350\204\273\023W \276\200\210\350=S\010b\275\177\320\251\275\337b\310\274*\264M\275\274\335?>B0\331<\303\375\240\275{Z:=D\272:\274\202=\375\275F\3164\275\253Z9=\316g\356\275\030=\272=\332\253I;\000\216\325=~\240\307\273\254\223\246=\316\022\027\275\321\245\366\275\314+\003\275\347\344L=!\022\335=\223.+\275d\236\002=\270\365\001\276hj\024>3\036\257=\365\226t\275+\370\r=\033 ?=\221zC=r\257\304\273\220\375\033=\033f\005>X>\001=f?3<>\374%>\243l\224=5\346\351=\307\244\232=\0230\230\275\252F\022>\2271\300=\002\264\237<\226\305\305<\235\323\304<\237@W\275\177\325\372\275\200\313\023\275\314\203\025><k\r=\005C\266\275\216\245\307\274\030sG=\033+\301\275\034\226\336\275#F\243\275s\t\221\275\226\'v\275v$\331\275.\2625>C\032\332\275#\'\006=/\026U\275\337\367\002>b\246s\276w\311\023\276\023O[\274\207\217\n>\305\354\n\276\242F>>?\337\250\275\3217\001\275w\325O\274}h\303\275A\331^<\215-\306\274\377\224a\275dS\313\275\257P\307\275G\246\322\275\033\033\300=\021\210^\2759\203\206\275z\274\211<\226\260\014=4\033*>X\n\275<\277uW=:3\241\275C\270\246\275~y\007>\263\261\03296\323\212\275\023p\203\275\331=\246\275\323\310O=\247n@=7,\326=\355\361\232\275PZ\026\276|c\302\275\230\035\274\275\032\370X>\236\372\342;\366m\370\274>\260\343\275\3472\373\274\306\030\210\274l\322G=>\324C\275.\266\260=?Z\220=\223r\032\275\312n\225\275\3331\351\275\3407 \273\217f\347\274\375b\236\2747\3540>O\241F>\331\323\013>\211{\225=\3263W\275\330\237 \275\251\322\211=`\027m\275\301\254\020\2764\265\260<Q\360\214\275gE\272\275c\376\000\276\353\315D\275f\033E\275R\217\344<\024\225\007\276\271\3259=\227\272\216=\216\360^=\261\312\356=\333,1\275\n\"\020\275\313\254\\>\"]\000>\312*\311=\3433b=jk\372=\201\200\250<$\221\335< \006\336\275A\2774\275\024\372\350<)4\007\274&\263\314=C^\367=ar\037>f\266\r\273?\224Z\276\240(}\275\022Cv=\303\246m\275w\254\006<\365\006\262\275\'\tp\275c\"\003>\027G\'\273\374\3105=T\2312\275\205\013\275=\014\257\226<bY(\276\000\356\316=\334\323\201=\314\365\301\274\004\304\362:\270>8>+pJ=W\306\234\274\376\224\244\275\021\236\255=O\355 \274b\022\351\275\231D\217\274-\251\025\275]\352\314\274\254\201\324=\314\225\013\274\300\016\365=\233D\302\273\270\321\231=\037\006\350\275+Ez<\375\221\027>\227\302\253\274\246\2145\276\222\362@\275\305\251p=(\000\005\273\016\274K>\2719\337\275m\252\205<D\260_\275\340\276\030=\017jg=E\311\263\275\013w@>\262o\270\275?\244-\276m\370\266<\366\377\366=\336\352\002\274k\030\300\274M\'\227<\221\322\257\273\346h\205=m8t\274\303\244\376:\027UU=H\231}=\354\242\314;4\304\376=\336\226\217\275\243\246M=I_\272=\363\312\250=\313\357\325\274\r\376\023\276#\350\206\275\214a\207<\0317\340\274\024\324\'\274n,\240\275^of\276.\263\322\275\315-\340;I\367\254\275\235\255/\275\241~\332;\010\023M\275\363l\252\274\243\260\001\275F0\241\275c\344\234\275\267\310\203=\303iv\275r\244p\2742=\016\275\304\250\037>s\373\027<\376\326S\276P\227\003\276w\353\375=\300J\363<\331\340F={\027P\275\352\311\031<\351\363\014<&[\220=*]\272\275\265G\345<g\337\n\274[x\301=\036\356\256\274d\252\004\276\2370\255\275 \374\026\276<\215\227\275z\025\202=\\\330\265\275\002\r\217<\367\013=\274wo4\275s\035\360\275\200\032\\\275\354\2613\275\r\316\244=\016i\024>\2359\342\275C\3601=\374\221i=\270\rS<\034p\356=\002[\024=\241\355\037\272o\t\220\273\355\177\371<\272\000\377\275\007\250\343<K\006\264<\232\212\r\276\254b\233<\024P\240\275\341\220e\275\214\025\310=]\223+=\220=\242<F\022\007=\365D\333\275\"i7\276=\023g=\016\010\265=\213\343\351\274\254\013L\2747\356\207\275\006\036\210=R$I>\315F*=\237\270\332=\177\216\366<\374j\307<\323\363\212\274\217\202\224=\3576Q\275\362\211\372;\332P\031\276\010\220\315=\240(\027>:\302\347<7<\013>\237\227f=\000f:\275\311\257\277=\251\370\266\275Uj\366\274\341\021m\274\233\311\341\274\217\304\324\274\007C\001\274\264\330\025=\035\242\373\275w\377\004>b.\242=2YI\275\361\232\206\276N\355%\275\322\300E>\327\247\211\275\336L\274<\321A\202<\230\351\232\275\240&e\2751\236\210=Xi\034\273\252\256\000=\230\233\023\276Z\214\032>b/`\276\247\350\234\275\267<\226=\"Rb\274N\'\243\275\037) >\372\030\325<I\242\333\275Em\257\273\222t\313=\357&\237=\'\214\037\273>\334}=\363\354\">\252\207\206\275\305\323\344\274\374<\255\275\010#\330\275 6\320\275\225r\240=\365\037\305\274a?\032>d\236\215=w\344\353<8*\230\275\n\375\262=\245x\346::\377\217;W0\341=v\r\014\273\354\210\321\275\340\244(\276\'\"\006\276\304\344m=\334\246Q=\017\356\363\273\324i\274=\207\343=\275\363+\336\275\203BE>\363 6=\025\267\365\275\263\233\205=1n\231\274\333\305\000>~\272\334=\326\007o\276v\362\206<\254G\"<U\007w=WH\210<\315\312\">3\3440\274\246gC>g\351\"\276\302\256`<\274W\304=\222\003\207\275\343q\205<4\327\000\276\321\314\351\275\0148\016\276w\312\246\275X\001\214\272\217\016\005\275\002\272\024\273O\326\300\273\373.\271<\237|!\2765h\327\275d\322+\275\031X\271\274\207\201\242\275\027\023\027>\2633~\275\007\233\210\275o\330L>r\270\334\275X\252\377\275rJ\251\275\035\212\344=`\332a<\254\352\r\274\177u`\275_\317\225\275\252\247\216\274#\250,\275lk\257\275\250Z\367=\314\003D\275\024m\226<\003\356\330=\353o1\275/\027v=\224\003H=\270\027<=u\242\275=7\024\350=\253\001\246=G\264\267=\213\203\335\274\317\377\203\273Ly\023>\017=\203\274_\256\346=\025\323#\276\315m/=O{\230=>\224\366<\001\251J\273\210o\352\274;\000d=u|S:\236\024\004>\004H\352:\317\341\232<GG\373\275K\262\327\275A\351\315\275\240\002y=\314\324\230=\312e\336=&\361(=\353\333\207\274\005\205\266\2755\231\205\275\354\371\274=P\370\275=!CG<\216\177\243=\220\336\343=*@\022\276\314\270\327\275\365\\\036\275\r@\301\274\001\316\367\275t\305\261\274+a{\274\274\251\327\275\360\240\237<\324\177\032>\212\003N\275\326\360\224\274I\220\036\276\234\312O\274m\036\240=\206\364\262=L\036\262\275=\231\364\273pn\262\275\361p\237\274\325\337\315:\321Z\341\273}[\014>\303o\n\276:\3001\275\24206=i\271f>\257\003\026\276\324\251\014\274\241\024R\275j\316B=:!7\2757\014\321;\002|\375\275\350\242\003\2752Y\356\274\253M>=\"\t\360=\rh\201\275\265\006\014=\230\366\371\273\242\323o=\242\230\035\275\016\267\373<\343\300\305\275\341\356)\274\354}K=c\224n<\207\252\214<\376\013\276:\240N3\276\271I\277\275\026dN\276h\334\274\273O\226\374=b]\367\275\332\3624\274\353\315\r=%61=\303\227\026\275\017\317\264<\370\370\301\275\210\017\214\274\027\264\301=t\013h=\221\242\273\275\332:\376\274\247\215\303<b\362\336=&/\366=\235\362}\275\361\364\233\275\370\000\373\275D\325L\275i \224;s\376\013>D\330\312=\232\307\223\274\032\374\340\2759#\335<N\t\351\275\271\263\302<\304\202\376\275g\232\302\275\370\013\234\275\361I\354;\002\254\276<4\310\243=\t\217e\276\273\'\204=\240\201\263\275\231\020\007\276p_\336\274\233\r\250\274\\hp=)\223\342\274\237\262\023\276\300\210\350\274 \025 >\032-\036=T\3648\275\013\272\017=9\233\r\276\374|z\275u9\027\273BR\334\272\272\263\200\275\373I\023>\010O\235=\311\306\211\275\211\024\236\274\207\016\307\274\266\321\004>\256\2705\276\263mp<`l\250\272S\315\216<u\205\316\275\327.\013;Zbt\2753\3449=\335\246+<,\362*\276\313\242\262=\330@\222\272\234`\241=\347xW\275\230\361\250\275\354%\"=\301\306W\275\243\031\211\274\027^.\275\330\217\004\276\35587\275\362\377\326<\236e\230\274v\272\200=\006W,\276\25123\275\374\366\007\275\225\270\037=\243l\262=9G\017>\t\310\035\276\355I\327\275\234\234\034\275J%X=\0233\036=\210l\231\276\304,M=\021\004\346\275@b\372\274\255\374\210=8\003\243\275\352\021\331<\354p\363;\005\361?<\031\3629\275\236\236\005>\363\r3\275\202\316\305\273M\026\211=6\032\'\276\251\372\240\275{\345\021=\267}>=\326\222=\275\372\336W>\367\002\275=V\\\272\275\203\304\367\275\033?i=\236\267\211\275P\3106=VO\035\274<\217^\275 Pb;\tZ\307\275\017\373\266\274\"\202&\275-6\226;;4U\275p\366\374<\323\303\271;\337\361$\276\342\250\243=\236\226\3668CO\023\276>\343F\275LD\346\2742\365A:\341\373\222\274\223\217\263<\262\024\004>@\301x\275\341)\273;\305\233X\272\302\027\035\276\373m\242=p\267\203\274$\312-\275\247\341\260\275M\235\233= \3529\274\032\236t\274\261\353O\274\324\211\006=l\316!<W\204\242=t\372\325\275,nF=\262N\033\275\352\262\363<\3241K=\244\315\t\275\020(\255\274\216\375\277=c\343\013>\252\337\301\275\275\372\322<\371\342^>\321\253\240=D\263\207\275+\325\276\275~\275\017>W\360+=\255\006\034\274\262P\025\276\206\032\014>\321Q1>\276\356\332\274=\022\236<\303@\027\276\334n\267<]\321\\;\247\370\035\275\334h\036=\373r\225=\360\310\336\275\017\246\023\276\367<\261=\\\261I>\356\024s\275\246Zr\275\233\346*> ,\243=\275h\322\275\217\261\017\276\230\3529\275\245\025\203=\003J^\276\021\020\265;\237\001\267\275\2155\345\273^j9=wA\231<\036\211\206\275qz\265\275\332\002\016\275\224\227\225=\021\277\352<\027\004\301\274\023\262Z\275\304M\t\276@\212.\276V0\260\275\347X\320=\341\202(=\300\034V\275iUQ;=o:\276\243N\031\275\t\372\003\276[d\362=r%\370=bk\006>\232\202\036\276\302\320\301\275\035\237%>\360d\245\275\265\324\325\274\026*\337\275\300\353\005\274\030b\305<\266\037\006\276;\243\222=\016\215\217\274=\344\255<\260\016\230=\n\211\003\275\252\365!\275\025\025d\275u\246\223\275\264\337\266=\326\"\306=j\240\242\275\2165\312<\260K\215\274p\220\331\2750(H>\236U\037=\034\231\006>\367x>=\365v\270\275A\245\271=\373\321\241=\252=P\275\346w\356\274\272W\310\275\013\255\235\275\243\201\306\275U\3003=c-\213=\225X(=\360F\231<\302\005\312\274F\356V=\366\312\215=S\251\241\275\\\244\232\275\277\345\271=\005\300B=y\373\277=\323\305_=\253.\224=\376\311\026\276R\315\220\275\241\027q\272:\335\010\275s\262\314\275\222\362%=\276\037\215\276\\\343\374\274\350\245]=\307\252T\275\022\204\332\274\030\3131\275u?\212=\262\027\300=\370M\244\275\350_S\276\363@\010>\177\317t<?^\362\273\252[\231\275\222\006{=V\230\213=\\\357\001\276\317\354\344\275\n\344\347=\246\241\324<\345\230x=W\232\205\275\355\003y=\030xa\275\256\003|\273u\301\202\275o\270\367<M\374\010=\267c\016>Cm\346\274C\2111>s\352\220=$\r?=\362\276\027>\003\013\020=\236\333\252<,\\S\275)k\013\276\331\325\022=&\363\305<~v\263\274\246M\271<i\271\367\275a\002\033<&CH<\321KP\276sK\007\276Zu\333\275\247_\226<\360\263\3539\336\270\224\275\303/\200\275\223]\202<\207\2310=\332\203\305=4\312&>\377\232\323=T\3250\275;L\243=n= \276\035\363\t>%\327\322\275\271\3535>\201\202\256\275\215\304\025\276\317\276\214\274\375d\274\274\222\2310\274\243\356\332\274%\262\033\276?l\007>\200Z\254\275\215\367\021<\370\333D=\210\214\203=\264\250\371\2732\324\227\275\233\001V=H\200U\275 d\216=\303# =S\026\220\2754s\004\276\250!\311=~\271\">k\364`=\225\231\360=\314\351\335\274\237\232\237\273UV\241=\264\362\221=6:%=s\314\000=\257\235\374\275\017\\\032\276\375l\377=wZ\201\274\253\327[<&\310\256=\037\037b=Rf\262\274Y\036\340<\33015=O4\247\275\323sX\273\362n;=\326\320[\276\030I\241=\203\246\022=5&\217\275A\372\014=\345H\376\274\304l\242<\254\212\215=\324\022\006\275\305\200\265\273qz\314\272\204\'\351\275J\355\326=]\004a>\276k\236\274\235\367\010=Ce\030=\271\226\t=\027\236`>\276\242\\\274\326\023\225\275\021\262\357\275p\345Z\275]\256\354\274\3159+\276\2158\347=\310\202\367\275Sl\035=\367Gw\276\303\264\363<^O\025>\357\n\024>\3037\254=]\237\235\275y\222!\274\364\237\202\275-\366\202=J\036(\273IUC>eG\334\275@\366z=\036 \224=p\037\233\275\245\275\227\275\344g\010\274\276V\331\275X\3078>0X=\275p,u\274W\213\267\274\345$U\275\017\024#>Ee\234\273[+\237\275\304|\201\274\302\256\324=B\023L<\354,\214\274\246(\272=\335\264\200\274\257/s<\001\366\030=\3671&9\n\221\333=\364\200U=6n\373<\222\335A\276\331j\007=\214\r\024\275;]\226\2754\031\236=\365y\356<j\215\207=\'W\005\275\022\245\007\276\326sM=*.X>\250\371\245\275|\302\213=\355\361\313\274\000\213T\275;\0356=X\3235=\275\201\301=k\206%=\245\311\004\274\254\365u=~V\305<k}\322\275\034b/>\334X\321\274.uO\275j\323l=\021m\032>\257]\332\275\342\005\274<\346H3\275\3703\022>\373\211\227\274B\361\366\274\203P\t\276\235\016\022\274Ge\372\274D\014\374=\311\261\037\275\367|d\276I\rh=\256G\333=\213\276\230\273I\276\330\274\246\226\225\275M\001\272\275\343_6=\026| \275A\275\'\275\236\211\004>q6\272<\210\332A\275\324?\317\275M)_\275\353\215\352\275\216n\357\2754\303f=b\265\260\275\240\027M\276\376z \276\361\236\261=1\'\233=O1\010:\234\302\324<\216K*\275\271\305\213<\355W\345\275\206\246\024\276\322^\251\275\305K!\276}\024\314=d;\256\275\243u\266<BB5\275\344\207\245=\0052/>\031fh\275F\016\003=\330\005\203=7\3555\275w\223\203\275\223\277\016\276\337\236\310<\222Y\237\275\2403M<\340\272=\275\025/M\276\375\245\235=M\252%<\210\365\307\274\323\014\240\275\254\325T=\033#\306\275\3608\035\274\267\025.<\232\273P\275\026\311\250\275\375\227\227=\310\215\037>\033\222\206<@9\216\275\025\226\222\275<\323\350\275r\271G>\222\221\221\275\217\271\220=\244z\014>\367\335B>\274_E\275\035\255\302\2752\237\262=\371\324\216\275\253(!>\206\253\305\275\277\302W=\305\316\203=\322;t\275\206\337\324;\032\212+=\270\013\206=\354\255\211\275(\326\347\273\177,c=\351\243\007\276U\r(=\373\235,\275\225\207n\275\266\235\242\275\362\\\226=+\201\004>\3737b=Za\365<a\005\230\275\017a@=\320\371\223\275e7\344<\3228\256\275M\016\372;\247o+=\3051w\275\204\002\207\274\237\014\375\272Q\256\306\275\342\202\034>!\021\t\276\376d\200\275Uc\350=\246C\004\276\335\274\022=\231\261\202\275\013\034$\276\230\255^=\347I}\275F\243\202\275uZC\275k{\234\275\247R\277\2753 s=\217\000\302=\314Y\333\275\010\355.\275S\214\010\276\335\336\233\275c\024D>\230\356\211=\323^\202=`\263\210\275F&|\275\242\251\365=\324\026\330\274\034D-=\231\353\342=\"\276\322=\021m|=I\215\227=\211\013\035=>\325N\275\232.\004>EW\366\275 \244\231\274B\022\300\274\275\262\314;\252=\245=\221\320\255=\0212\222\275\2217\341\275\030\246\371\275\321\214\300=7g\242;\023\223\264\275\302\375\005\276-\240\264\272\217\262c=\212\223\020>:\247\250<(\220M\275\315\371\244\275\326\232\026\275\363):=\260_\006>\375;*>x[9>\263\316\315\274\017\227\004=&\276\025<O\3041=!\344\321\275\305\357\022>M\013$<w\002\367:;\244\220<X\300\202\275\351\246\253=\224\332F\275\252\371\326\273p\237C\275~@\357\273?\020\267<Z\026\237\275O\235\213\275\022\265\254=\023\313\002\276%\314\024\276\3040\257\275\267\007\216=\275n\254=\234\352\006\276\224e\264=\240\321}\275\251\270\220\274\027\347\246<\225\340\023\273t&1\276B@\312\274\361\301p\275\024\264\241\275Ng\035=\217P\026\275\247W\016\275\205\024\267;v\314\216;\366\206\305<\224N\031=\367\370\033>!\0371<m\014(\275\n\t#\275\356\006\320\275E\263\301;\027\250\250;\005\372\025=,\217\232\275rJf\276\245\223\225=\3754\206=b?\353\275\217\026\347=\316YJ=*r\271\275K;\376= Z\001\276\361\242{=\266]w\275\341\245\301\2747\213\327=\020\373M=D\2353\276x\300\214\275\3469\025>8l]=\315\337F>eu\262\274*\350t\274,\3676>\0031\017\275\020\202\034\276`\030\332\275\356\267q\275\246\260\006<\306x\237=,\244P\276\311|O\275\005\023~=5\350\274\2734\010C=(\214\n\275cI\372:\254\307\021\276\347qQ=$v\301\275\235\351)\273%j\005>\201z\021;\321(\241=\364\016\"=\204\272\245<\310&j\274\241\367\007\275\331nH\275\311\327 \276\323\306/\275\204\007<=\024\024;=z\023C=\'\206\261=\303\236\316<\212\353\204=\216~\016=\211\304\\<\365\247\220\2756\226{\275\001Z\233=\205\277\016<3\177\335\275\245\320,>u\215\001\275\245d\010\275\306\314=\275c}\314=\223b\024\276a\365E=-\322\230=O\034\222=\266p\375;I\275\004\276\337\210\230=\221\177\006>\222\"\021>\226\037H=9\256J<\370FU=QR\376:0\372\002\276-\255D\276wW\034\276\013\036\013<\005=\262\274\353\033@\275B\226\267=\"\203\000\276#I\220\275v:\323\2747\374\273\275\007\326\021=HyV\275+\235\223<\374\366e\274c\373\002\276q\233\316\275\324`\266\275\223\241\322=fY\357\273G\215\353=\"\323=\276\242\335\342=C\005\220\273\227\364\201=\266*\r\275Y&|\276\013-\240\275\327\233&\276\363O\334<\304N@\275\307\206\234=\312:9\275\325\'6\275T\341\332\275\320\344\032=+\027V=!\210\035=^.K\275\330\206\002\275\277\300\301=-\215\215=x\013n\275\030\320\023>\"\010;\274\340|\022\276\333\n\233<\205\244\002>C\0301\275\242&\003>\370\204V\275 L\266=elx<\220\034\006\275\304Sm\275\236\010\205\275%\215\364\275-\t\276\275\030\004\371=3z\257=\204\2775<\264b\352=\330K&=\310QO=v\0055\275\333\374\365=\261H\346=\302\r\254=\035.7\276l\333\033\274wN\311=*\002I=\261\247\200>\265yC=\346\262\343<\205b\250=\032\340\010>\233]\025=?\265\032<+?\241\275\315\033\306=\325.V=B9\353\275\362i\223\275\204\324\245=$\013I=\257\314\256=\265\014j\274\'\312\n>\215\316\005>\355\263\215\275Z3\275\2739\313o\274D\r\014\276fbO\275\330\232\377\275g\325\034<Jo@\275\351t\340\275\023\323~\274\352\337\276\272\273Q\240\273\320\363A=\250q\230=Y\272\010\276\203\nq\275\300\336\257;\'S\277\275\024\211\307=\005R\205\274\032Dx\275\003\206d\275\350\211\200\276\355\312:>5S\320\275\264IM=\345/\335\275\025\330\265<\035=a\275\020\\c=6r4>\035k\037=\256\231(\275\214!\371<+Y\302=$\323\227=Kt]\273\221g\252=*\301\226=*\370F<Y\025\363;\177T\267=2*\t>\233Z\215<\227]\242\274\035l\276=\376M\271=\02468\274\344\241\320:{\025\256=\315\003\206\275}\002\244<\210rt=\266\371\335\271\301 (\275\242c\245<Is5>\214\327\266\2756\207u>8\324_\274\004\343\033;\305q\210\275\334\203\204<\246\016\030\275\331\244}<\"\230\313=\267FS=\306\021\274=\233\035\033\276\031\271P=\353\020r\275\263^\n=hg\003>\232LA>\007\316\321=\236S:>\235?g<\354\261\257=\256\'\326=[\252\010>\310a\017>\353\252\013>\337s\226\274<\277\276<\007\254T=\002Ev=\231\255\203\2757\373\000\276Cj\223\274 zO\275\316\002\370=1\375\004=\264\245\266=\234\027\030\2760f\364\274\333\310r=9\367\341\275[V\003=\372\277\277\274\030J\241<\227\371\311=\226k\251=x5\225\275\365\"\007>\'e\350=\374\241>\276S\301\020\274\344Z\255<s(j=\254\321\236\275\312\224\334\275\343\341\021\273zh\236=\201\273\340\274\305o\007\276\215\247\243\274\023\252\261\275\021\231V=\035\r\372<\r6\217\275\272\363\324\275\265\247\200=sF\231\275\333\t)>\361\265\323=L\004\227\274@4\315\275\304W\332<ev\334\274\333K\220\275\271R\356\275F\241U=\266\274G;\233d\370\274\252\335\371\275p\270i\275\205\311\257=\013\331u\275S!\310;\307\250g\2755J\256\275\263\215\273<4\036\310\274%\374\321<N\271\323=\2216\205\275>/\264\275V\333o\274\001\013T\2746\360\366=I\225\376=q\300D\275\275\200\014\276\314T\343\273\212\227\370\274>M==\035t\374=\343P\353=\\\241\324\274\275\213\037>\234rB\276h\274\321=;\306\213\274\377C\261=\343\255\207=\234LW>N\306 \275\t\215\330\275\223=\267\275\230W_\275\3274\021\276{\346l=.I\034>\253Mc=A~\344=\\\224\226<\233Y\307=\204\341\001;\324aA>\314\370z\276m\337\253\275\330\253\241\273\226q\327\275%g\230\275\364/\223\274\366Q\037>\025/\024>\266+N=\252&\312<\374\334\235\273\033\n\030\273\036i\205=\001\2075<\376j\231=\2167\206\275\003\321\261<\243\376\223\274I\321\362\275#\321\353=\220\310_=f\260\245=M\312!>[\347 <l\351\251=\241H\232=\030\307\321=2\277\324=\226\354\306=!\326C\275\253>_<RU\\<\203\377\207=E4\306</L8=\321\214\013>N\022\013\275-\317z=5\223A\2758\353\252=@\037\230=\232\351\240=\331\017~=\032\3572=\235k\020\276\275\004\r\275/\303\300=\244\321\254=U-\263=\345\251[\273)\3516<\314\220\002=Z\364;=\227\315\326\275)\341r>x\244\202=\217\331\205\274\376\030\334;\275\226\203=\2433P=zJ#\2762Q\337\275Z\3407=\375\230\270\274\242\201R=\331\340\234=\240}\240==\215L<2\355\266="
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "lstm_3/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/concat"
  op: "ConcatV2"
  input: "lstm_3/Const"
  input: "lstm_3/Const_1"
  input: "lstm_3/Const_2"
  input: "lstm_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/bias/Assign"
  op: "Assign"
  input: "lstm_3/bias"
  input: "lstm_3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/bias/read"
  op: "Identity"
  input: "lstm_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/zeros_like"
  op: "ZerosLike"
  input: "lstm_2/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Sum"
  op: "Sum"
  input: "lstm_3/zeros_like"
  input: "lstm_3/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_3/ExpandDims"
  op: "ExpandDims"
  input: "lstm_3/Sum"
  input: "lstm_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile_1"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose"
  op: "Transpose"
  input: "lstm_2/transpose_1"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_3/Shape"
  input: "lstm_3/strided_slice_12/stack"
  input: "lstm_3/strided_slice_12/stack_1"
  input: "lstm_3/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_3/transpose"
  input: "lstm_3/strided_slice_13/stack"
  input: "lstm_3/strided_slice_13/stack_1"
  input: "lstm_3/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/MatMul"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_1"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_2"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_3"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/MatMul"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/MatMul_1"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/MatMul_2"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/MatMul_3"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/MatMul_4"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add"
  op: "Add"
  input: "lstm_3/BiasAdd"
  input: "lstm_3/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul"
  op: "Mul"
  input: "lstm_3/mul/x"
  input: "lstm_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_1"
  op: "Add"
  input: "lstm_3/mul"
  input: "lstm_3/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/add_1"
  input: "lstm_3/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value"
  op: "Maximum"
  input: "lstm_3/clip_by_value/Minimum"
  input: "lstm_3/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_5"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_2"
  op: "Add"
  input: "lstm_3/BiasAdd_1"
  input: "lstm_3/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_1"
  op: "Mul"
  input: "lstm_3/mul_1/x"
  input: "lstm_3/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_3"
  op: "Add"
  input: "lstm_3/mul_1"
  input: "lstm_3/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/add_3"
  input: "lstm_3/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/clip_by_value_1/Minimum"
  input: "lstm_3/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_2"
  op: "Mul"
  input: "lstm_3/clip_by_value_1"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_6"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_4"
  op: "Add"
  input: "lstm_3/BiasAdd_2"
  input: "lstm_3/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh"
  op: "Tanh"
  input: "lstm_3/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_3"
  op: "Mul"
  input: "lstm_3/clip_by_value"
  input: "lstm_3/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_5"
  op: "Add"
  input: "lstm_3/mul_2"
  input: "lstm_3/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_7"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_6"
  op: "Add"
  input: "lstm_3/BiasAdd_3"
  input: "lstm_3/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_4"
  op: "Mul"
  input: "lstm_3/mul_4/x"
  input: "lstm_3/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_7"
  op: "Add"
  input: "lstm_3/mul_4"
  input: "lstm_3/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/add_7"
  input: "lstm_3/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/clip_by_value_2/Minimum"
  input: "lstm_3/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh_1"
  op: "Tanh"
  input: "lstm_3/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_5"
  op: "Mul"
  input: "lstm_3/clip_by_value_2"
  input: "lstm_3/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/TensorArrayUnstack/Shape"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_3/TensorArrayUnstack/range/start"
  input: "lstm_3/TensorArrayUnstack/strided_slice"
  input: "lstm_3/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_3/TensorArray_1"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "lstm_3/transpose"
  input: "lstm_3/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "lstm_3/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/while/Enter"
  op: "Enter"
  input: "lstm_3/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_2"
  op: "Enter"
  input: "lstm_3/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_3"
  op: "Enter"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Merge"
  op: "Merge"
  input: "lstm_3/while/Enter"
  input: "lstm_3/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Merge_1"
  op: "Merge"
  input: "lstm_3/while/Enter_1"
  input: "lstm_3/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_2"
  op: "Merge"
  input: "lstm_3/while/Enter_2"
  input: "lstm_3/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_3"
  op: "Merge"
  input: "lstm_3/while/Enter_3"
  input: "lstm_3/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Less"
  op: "Less"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Less/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/LoopCond"
  op: "LoopCond"
  input: "lstm_3/while/Less"
}
node {
  name: "lstm_3/while/Switch"
  op: "Switch"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_1"
  op: "Switch"
  input: "lstm_3/while/Merge_1"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_2"
  op: "Switch"
  input: "lstm_3/while/Merge_2"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_3"
  op: "Switch"
  input: "lstm_3/while/Merge_3"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_3/while/Identity"
  op: "Identity"
  input: "lstm_3/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Identity_1"
  op: "Identity"
  input: "lstm_3/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_2"
  op: "Identity"
  input: "lstm_3/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_3"
  op: "Identity"
  input: "lstm_3/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/while/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul"
  input: "lstm_3/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_1"
  input: "lstm_3/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_2"
  input: "lstm_3/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_3"
  input: "lstm_3/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add"
  op: "Add"
  input: "lstm_3/while/BiasAdd"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul"
  op: "Mul"
  input: "lstm_3/while/mul/x"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_1/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_1"
  op: "Add"
  input: "lstm_3/while/mul"
  input: "lstm_3/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_1"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_1"
  input: "lstm_3/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "lstm_3/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_2"
  op: "Add"
  input: "lstm_3/while/BiasAdd_1"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_1/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_1"
  op: "Mul"
  input: "lstm_3/while/mul_1/x"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_3/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_3"
  op: "Add"
  input: "lstm_3/while/mul_1"
  input: "lstm_3/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_2"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_3"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_3"
  input: "lstm_3/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "lstm_3/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_2"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_1"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_4"
  op: "Add"
  input: "lstm_3/while/BiasAdd_2"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh"
  op: "Tanh"
  input: "lstm_3/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_3"
  op: "Mul"
  input: "lstm_3/while/clip_by_value"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_5"
  op: "Add"
  input: "lstm_3/while/mul_2"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_6"
  op: "Add"
  input: "lstm_3/while/BiasAdd_3"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_4/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_4"
  op: "Mul"
  input: "lstm_3/while/mul_4/x"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_7/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_7"
  op: "Add"
  input: "lstm_3/while/mul_4"
  input: "lstm_3/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_4"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_5"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_7"
  input: "lstm_3/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "lstm_3/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh_1"
  op: "Tanh"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_5"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_2"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/mul_5"
  input: "lstm_3/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_8/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/while/add_8"
  op: "Add"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration"
  op: "NextIteration"
  input: "lstm_3/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_3/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit"
  op: "Exit"
  input: "lstm_3/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Exit_1"
  op: "Exit"
  input: "lstm_3/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_2"
  op: "Exit"
  input: "lstm_3/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_3"
  op: "Exit"
  input: "lstm_3/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range"
  op: "Range"
  input: "lstm_3/TensorArrayStack/range/start"
  input: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_3/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/TensorArrayStack/range"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "lstm_3/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/sub"
  op: "Sub"
  input: "lstm_3/while/Exit"
  input: "lstm_3/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/sub"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose_1"
  op: "Transpose"
  input: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_3/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8340133
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Tanh"
  op: "Tanh"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3258307
    }
  }
}
node {
  name: "dense_2/random_uniform/sub"
  op: "Sub"
  input: "dense_2/random_uniform/max"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/mul"
  op: "Mul"
  input: "dense_2/random_uniform/RandomUniform"
  input: "dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform"
  op: "Add"
  input: "dense_2/random_uniform/mul"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/kernel/Assign"
  op: "Assign"
  input: "dense_2/kernel"
  input: "dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/kernel/read"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/bias/Assign"
  op: "Assign"
  input: "dense_2/bias"
  input: "dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/bias/read"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Softmax"
  op: "Softmax"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum"
  op: "Sum"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv"
  op: "RealDiv"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub"
  op: "Sub"
  input: "loss/dense_2_loss/sub/x"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value"
  op: "Maximum"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Log"
  op: "Log"
  input: "loss/dense_2_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/mul"
  op: "Mul"
  input: "dense_2_target"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/dense_2_loss/mul"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean"
  op: "Mean"
  input: "loss/dense_2_loss/Neg"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual"
  op: "NotEqual"
  input: "dense_2_sample_weights"
  input: "loss/dense_2_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Cast"
  op: "Cast"
  input: "loss/dense_2_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_1"
  op: "Mean"
  input: "loss/dense_2_loss/Cast"
  input: "loss/dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv_1"
  op: "RealDiv"
  input: "loss/dense_2_loss/mul_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_2"
  op: "Mean"
  input: "loss/dense_2_loss/truediv_1"
  input: "loss/dense_2_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "dense_2_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "dense_2/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_4"
  op: "Enter"
  input: "training/Adam/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_2"
  op: "Merge"
  input: "training/Adam/gradients/f_count_4"
  input: "training/Adam/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_2"
  op: "Switch"
  input: "training/Adam/gradients/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1"
  op: "Add"
  input: "training/Adam/gradients/Switch_2:1"
  input: "training/Adam/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_5"
  op: "Exit"
  input: "training/Adam/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_5"
  op: "Enter"
  input: "training/Adam/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_3"
  op: "Merge"
  input: "training/Adam/gradients/b_count_5"
  input: "training/Adam/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_6"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_3"
  op: "Switch"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_1"
  op: "Sub"
  input: "training/Adam/gradients/Switch_3:1"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_3"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_7"
  op: "Exit"
  input: "training/Adam/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_7"
  op: "Enter"
  input: "training/Adam/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_4"
  op: "Merge"
  input: "training/Adam/gradients/f_count_7"
  input: "training/Adam/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_4"
  op: "Switch"
  input: "training/Adam/gradients/Merge_4"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2"
  op: "Add"
  input: "training/Adam/gradients/Switch_4:1"
  input: "training/Adam/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_4"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_8"
  op: "Exit"
  input: "training/Adam/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_9"
  op: "Enter"
  input: "training/Adam/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_5"
  op: "Merge"
  input: "training/Adam/gradients/b_count_9"
  input: "training/Adam/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_10"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_5"
  op: "Switch"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_2"
  op: "Sub"
  input: "training/Adam/gradients/Switch_5:1"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_5"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_11"
  op: "Exit"
  input: "training/Adam/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  op: "Shape"
  input: "dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  op: "Mul"
  input: "dense_2_target"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_2_loss/clip_by_value"
  input: "^training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  op: "Neg"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_3/while/Exit_1"
  input: "^training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/sub"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  input: "lstm_3/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_3/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_2"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_3/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/add"
  op: "Add"
  input: "lstm_3/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/add"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  input: "lstm_3/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  input: "lstm_3/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  input: "lstm_3/while/add_6"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_3/while/Identity_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  input: "lstm_3/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  input: "lstm_3/while/add"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_2/while/Exit_1"
  input: "^training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  input: "lstm_2/while/Tanh_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_10"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/add"
  op: "Add"
  input: "lstm_2/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/add"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_7"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_11"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  input: "lstm_2/while/Identity_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  input: "lstm_2/while/Tanh"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  input: "lstm_2/while/add_6"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_2/while/Identity_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  input: "lstm_2/while/add_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  input: "lstm_2/while/add"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_12"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_13"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_13"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_14"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_15"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_16"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_1/while/Exit_1"
  input: "^training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_17"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_17"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  input: "lstm_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_7"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_18"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_18"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_18"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  input: "lstm_1/while/Identity_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  input: "lstm_1/while/Tanh"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  input: "lstm_1/while/add_6"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_1/while/Identity_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  input: "lstm_1/while/add_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  input: "lstm_1/while/add"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_19"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_20"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_21"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_22"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Fill"
  input: "training/Adam/zeros/shape_as_tensor"
  input: "training/Adam/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Fill"
  input: "training/Adam/zeros_1/shape_as_tensor"
  input: "training/Adam/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Fill"
  input: "training/Adam/zeros_2/shape_as_tensor"
  input: "training/Adam/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Fill"
  input: "training/Adam/zeros_3/shape_as_tensor"
  input: "training/Adam/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Fill"
  input: "training/Adam/zeros_4/shape_as_tensor"
  input: "training/Adam/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Fill"
  input: "training/Adam/zeros_5/shape_as_tensor"
  input: "training/Adam/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Fill"
  input: "training/Adam/zeros_6/shape_as_tensor"
  input: "training/Adam/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Fill"
  input: "training/Adam/zeros_7/shape_as_tensor"
  input: "training/Adam/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Fill"
  input: "training/Adam/zeros_8/shape_as_tensor"
  input: "training/Adam/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Fill"
  input: "training/Adam/zeros_9/shape_as_tensor"
  input: "training/Adam/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Fill"
  input: "training/Adam/zeros_10/shape_as_tensor"
  input: "training/Adam/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Fill"
  input: "training/Adam/zeros_11/shape_as_tensor"
  input: "training/Adam/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Fill"
  input: "training/Adam/zeros_12/shape_as_tensor"
  input: "training/Adam/zeros_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Fill"
  input: "training/Adam/zeros_13/shape_as_tensor"
  input: "training/Adam/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Fill"
  input: "training/Adam/zeros_14/shape_as_tensor"
  input: "training/Adam/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Fill"
  input: "training/Adam/zeros_15/shape_as_tensor"
  input: "training/Adam/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Fill"
  input: "training/Adam/zeros_16/shape_as_tensor"
  input: "training/Adam/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Fill"
  input: "training/Adam/zeros_17/shape_as_tensor"
  input: "training/Adam/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Fill"
  input: "training/Adam/zeros_18/shape_as_tensor"
  input: "training/Adam/zeros_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Fill"
  input: "training/Adam/zeros_19/shape_as_tensor"
  input: "training/Adam/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor"
  input: "training/Adam/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Fill"
  input: "training/Adam/zeros_21/shape_as_tensor"
  input: "training/Adam/zeros_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_21/Assign"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21/read"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22"
  op: "Fill"
  input: "training/Adam/zeros_22/shape_as_tensor"
  input: "training/Adam/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_22"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_22/Assign"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/zeros_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_22/read"
  op: "Identity"
  input: "training/Adam/Variable_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23"
  op: "Fill"
  input: "training/Adam/zeros_23/shape_as_tensor"
  input: "training/Adam/zeros_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_23"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_23/Assign"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/zeros_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_23/read"
  op: "Identity"
  input: "training/Adam/Variable_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24"
  op: "Fill"
  input: "training/Adam/zeros_24/shape_as_tensor"
  input: "training/Adam/zeros_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_24"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_24/Assign"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/zeros_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_24/read"
  op: "Identity"
  input: "training/Adam/Variable_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25"
  op: "Fill"
  input: "training/Adam/zeros_25/shape_as_tensor"
  input: "training/Adam/zeros_25/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_25"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_25/Assign"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/zeros_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_25/read"
  op: "Identity"
  input: "training/Adam/Variable_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26"
  op: "Fill"
  input: "training/Adam/zeros_26/shape_as_tensor"
  input: "training/Adam/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_26"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_26/Assign"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/zeros_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_26/read"
  op: "Identity"
  input: "training/Adam/Variable_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27"
  op: "Fill"
  input: "training/Adam/zeros_27/shape_as_tensor"
  input: "training/Adam/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_27"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_27/Assign"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/zeros_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_27/read"
  op: "Identity"
  input: "training/Adam/Variable_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28"
  op: "Fill"
  input: "training/Adam/zeros_28/shape_as_tensor"
  input: "training/Adam/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_28"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_28/Assign"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/zeros_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_28/read"
  op: "Identity"
  input: "training/Adam/Variable_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29"
  op: "Fill"
  input: "training/Adam/zeros_29/shape_as_tensor"
  input: "training/Adam/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_29"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_29/Assign"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/zeros_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_29/read"
  op: "Identity"
  input: "training/Adam/Variable_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30"
  op: "Fill"
  input: "training/Adam/zeros_30/shape_as_tensor"
  input: "training/Adam/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_30"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_30/Assign"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/zeros_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_30/read"
  op: "Identity"
  input: "training/Adam/Variable_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31"
  op: "Fill"
  input: "training/Adam/zeros_31/shape_as_tensor"
  input: "training/Adam/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_31"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_31/Assign"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/zeros_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_31/read"
  op: "Identity"
  input: "training/Adam/Variable_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32"
  op: "Fill"
  input: "training/Adam/zeros_32/shape_as_tensor"
  input: "training/Adam/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_32"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_32/Assign"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/zeros_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_32/read"
  op: "Identity"
  input: "training/Adam/Variable_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33"
  op: "Fill"
  input: "training/Adam/zeros_33/shape_as_tensor"
  input: "training/Adam/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_33"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_33/Assign"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/zeros_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_33/read"
  op: "Identity"
  input: "training/Adam/Variable_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34"
  op: "Fill"
  input: "training/Adam/zeros_34/shape_as_tensor"
  input: "training/Adam/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_34"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_34/Assign"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/zeros_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_34/read"
  op: "Identity"
  input: "training/Adam/Variable_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35"
  op: "Fill"
  input: "training/Adam/zeros_35/shape_as_tensor"
  input: "training/Adam/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_35"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_35/Assign"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/zeros_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_35/read"
  op: "Identity"
  input: "training/Adam/Variable_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36"
  op: "Fill"
  input: "training/Adam/zeros_36/shape_as_tensor"
  input: "training/Adam/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_36"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_36/Assign"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/zeros_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_36/read"
  op: "Identity"
  input: "training/Adam/Variable_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37"
  op: "Fill"
  input: "training/Adam/zeros_37/shape_as_tensor"
  input: "training/Adam/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_37"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_37/Assign"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/zeros_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_37/read"
  op: "Identity"
  input: "training/Adam/Variable_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38"
  op: "Fill"
  input: "training/Adam/zeros_38/shape_as_tensor"
  input: "training/Adam/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_38"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_38/Assign"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/zeros_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_38/read"
  op: "Identity"
  input: "training/Adam/Variable_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "lstm_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_14/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_15/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "lstm_1/bias/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "lstm_1/bias"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_16/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "lstm_2/kernel/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_17/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "lstm_2/recurrent_kernel/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_18/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "lstm_2/bias/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "lstm_2/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_19/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "lstm_3/kernel/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_20/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "Add"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "Add"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "lstm_3/recurrent_kernel/read"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_23"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "training/Adam/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "Add"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_21/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "Add"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "Add"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "lstm_3/bias/read"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_26"
  op: "Assign"
  input: "lstm_3/bias"
  input: "training/Adam/sub_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "Add"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_22/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "Add"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "Add"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "dense_1/kernel/read"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/add_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_29"
  op: "Assign"
  input: "dense_1/kernel"
  input: "training/Adam/sub_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "Add"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_23/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "Add"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "Add"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "dense_1/bias/read"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/add_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_32"
  op: "Assign"
  input: "dense_1/bias"
  input: "training/Adam/sub_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "Add"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_24/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "Add"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "Add"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "dense_2/kernel/read"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/add_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_35"
  op: "Assign"
  input: "dense_2/kernel"
  input: "training/Adam/sub_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "Add"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_25/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "Add"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "Add"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "dense_2/bias/read"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/add_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_38"
  op: "Assign"
  input: "dense_2/bias"
  input: "training/Adam/sub_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_9"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_22"
  input: "^training/Adam/Assign_23"
  input: "^training/Adam/Assign_24"
  input: "^training/Adam/Assign_25"
  input: "^training/Adam/Assign_26"
  input: "^training/Adam/Assign_27"
  input: "^training/Adam/Assign_28"
  input: "^training/Adam/Assign_29"
  input: "^training/Adam/Assign_30"
  input: "^training/Adam/Assign_31"
  input: "^training/Adam/Assign_32"
  input: "^training/Adam/Assign_33"
  input: "^training/Adam/Assign_34"
  input: "^training/Adam/Assign_35"
  input: "^training/Adam/Assign_36"
  input: "^training/Adam/Assign_37"
  input: "^training/Adam/Assign_38"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "lstm_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "lstm_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_22"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_23"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_24"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_25"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_26"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_27"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_28"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_29"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_30"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_31"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_32"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_33"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_34"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_35"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_36"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_37"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_38"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^lstm_1/kernel/Assign"
  input: "^lstm_1/recurrent_kernel/Assign"
  input: "^lstm_1/bias/Assign"
  input: "^lstm_2/kernel/Assign"
  input: "^lstm_2/recurrent_kernel/Assign"
  input: "^lstm_2/bias/Assign"
  input: "^lstm_3/kernel/Assign"
  input: "^lstm_3/recurrent_kernel/Assign"
  input: "^lstm_3/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^dense_2/bias/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_9/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_21/Assign"
  input: "^training/Adam/Variable_22/Assign"
  input: "^training/Adam/Variable_23/Assign"
  input: "^training/Adam/Variable_24/Assign"
  input: "^training/Adam/Variable_25/Assign"
  input: "^training/Adam/Variable_26/Assign"
  input: "^training/Adam/Variable_27/Assign"
  input: "^training/Adam/Variable_28/Assign"
  input: "^training/Adam/Variable_29/Assign"
  input: "^training/Adam/Variable_30/Assign"
  input: "^training/Adam/Variable_31/Assign"
  input: "^training/Adam/Variable_32/Assign"
  input: "^training/Adam/Variable_33/Assign"
  input: "^training/Adam/Variable_34/Assign"
  input: "^training/Adam/Variable_35/Assign"
  input: "^training/Adam/Variable_36/Assign"
  input: "^training/Adam/Variable_37/Assign"
  input: "^training/Adam/Variable_38/Assign"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^dense_2/Softmax"
}
versions {
  producer: 26
}
