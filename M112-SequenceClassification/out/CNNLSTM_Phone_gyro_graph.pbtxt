node {
  name: "conv1d_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 200
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09975093603134155
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09975093603134155
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9983911
    }
  }
}
node {
  name: "conv1d_1/random_uniform/sub"
  op: "Sub"
  input: "conv1d_1/random_uniform/max"
  input: "conv1d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/random_uniform/mul"
  op: "Mul"
  input: "conv1d_1/random_uniform/RandomUniform"
  input: "conv1d_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/random_uniform"
  op: "Add"
  input: "conv1d_1/random_uniform/mul"
  input: "conv1d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/kernel/Assign"
  op: "Assign"
  input: "conv1d_1/kernel"
  input: "conv1d_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/kernel/read"
  op: "Identity"
  input: "conv1d_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
}
node {
  name: "conv1d_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/bias/Assign"
  op: "Assign"
  input: "conv1d_1/bias"
  input: "conv1d_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/bias/read"
  op: "Identity"
  input: "conv1d_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
}
node {
  name: "conv1d_1/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/Pad"
  op: "Pad"
  input: "conv1d_1_input"
  input: "conv1d_1/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_1/Pad"
  input: "conv1d_1/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_1/kernel/read"
  input: "conv1d_1/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_1/convolution/ExpandDims"
  input: "conv1d_1/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_1/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/Reshape"
  op: "Reshape"
  input: "conv1d_1/bias/read"
  input: "conv1d_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/add"
  op: "Add"
  input: "conv1d_1/convolution/Squeeze"
  input: "conv1d_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/Relu"
  op: "Relu"
  input: "conv1d_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_1/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_1/Relu"
  input: "max_pooling1d_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_1/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_1/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_1/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6459048
    }
  }
}
node {
  name: "conv1d_2/random_uniform/sub"
  op: "Sub"
  input: "conv1d_2/random_uniform/max"
  input: "conv1d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/random_uniform/mul"
  op: "Mul"
  input: "conv1d_2/random_uniform/RandomUniform"
  input: "conv1d_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/random_uniform"
  op: "Add"
  input: "conv1d_2/random_uniform/mul"
  input: "conv1d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/kernel/Assign"
  op: "Assign"
  input: "conv1d_2/kernel"
  input: "conv1d_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/kernel/read"
  op: "Identity"
  input: "conv1d_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
}
node {
  name: "conv1d_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/bias/Assign"
  op: "Assign"
  input: "conv1d_2/bias"
  input: "conv1d_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/bias/read"
  op: "Identity"
  input: "conv1d_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
}
node {
  name: "conv1d_2/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/Pad"
  op: "Pad"
  input: "max_pooling1d_1/Squeeze"
  input: "conv1d_2/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 108
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/base_paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "conv1d_2/Pad"
  input: "conv1d_2/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_2/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_2/convolution/SpaceToBatchND"
  input: "conv1d_2/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_2/kernel/read"
  input: "conv1d_2/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_2/convolution/ExpandDims"
  input: "conv1d_2/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_2/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "conv1d_2/convolution/Squeeze"
  input: "conv1d_2/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_2/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/Reshape"
  op: "Reshape"
  input: "conv1d_2/bias/read"
  input: "conv1d_2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/add"
  op: "Add"
  input: "conv1d_2/convolution/BatchToSpaceND"
  input: "conv1d_2/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/Relu"
  op: "Relu"
  input: "conv1d_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_2/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_2/Relu"
  input: "max_pooling1d_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_2/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_2/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4182255
    }
  }
}
node {
  name: "conv1d_3/random_uniform/sub"
  op: "Sub"
  input: "conv1d_3/random_uniform/max"
  input: "conv1d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/random_uniform/mul"
  op: "Mul"
  input: "conv1d_3/random_uniform/RandomUniform"
  input: "conv1d_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/random_uniform"
  op: "Add"
  input: "conv1d_3/random_uniform/mul"
  input: "conv1d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/kernel/Assign"
  op: "Assign"
  input: "conv1d_3/kernel"
  input: "conv1d_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/kernel/read"
  op: "Identity"
  input: "conv1d_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
}
node {
  name: "conv1d_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/bias/Assign"
  op: "Assign"
  input: "conv1d_3/bias"
  input: "conv1d_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/bias/read"
  op: "Identity"
  input: "conv1d_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
}
node {
  name: "conv1d_3/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/Pad"
  op: "Pad"
  input: "max_pooling1d_2/Squeeze"
  input: "conv1d_3/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 58
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/base_paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "conv1d_3/Pad"
  input: "conv1d_3/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_3/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_3/convolution/SpaceToBatchND"
  input: "conv1d_3/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_3/kernel/read"
  input: "conv1d_3/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_3/convolution/ExpandDims"
  input: "conv1d_3/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_3/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "conv1d_3/convolution/Squeeze"
  input: "conv1d_3/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_3/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/Reshape"
  op: "Reshape"
  input: "conv1d_3/bias/read"
  input: "conv1d_3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/add"
  op: "Add"
  input: "conv1d_3/convolution/BatchToSpaceND"
  input: "conv1d_3/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/Relu"
  op: "Relu"
  input: "conv1d_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_3/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_3/Relu"
  input: "max_pooling1d_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_3/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_3/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_4/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3417231
    }
  }
}
node {
  name: "conv1d_4/random_uniform/sub"
  op: "Sub"
  input: "conv1d_4/random_uniform/max"
  input: "conv1d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/random_uniform/mul"
  op: "Mul"
  input: "conv1d_4/random_uniform/RandomUniform"
  input: "conv1d_4/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/random_uniform"
  op: "Add"
  input: "conv1d_4/random_uniform/mul"
  input: "conv1d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_4/kernel/Assign"
  op: "Assign"
  input: "conv1d_4/kernel"
  input: "conv1d_4/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/kernel/read"
  op: "Identity"
  input: "conv1d_4/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
}
node {
  name: "conv1d_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_4/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_4/bias/Assign"
  op: "Assign"
  input: "conv1d_4/bias"
  input: "conv1d_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/bias/read"
  op: "Identity"
  input: "conv1d_4/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
}
node {
  name: "conv1d_4/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_4/Pad"
  op: "Pad"
  input: "max_pooling1d_3/Squeeze"
  input: "conv1d_4/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_4/Pad"
  input: "conv1d_4/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_4/kernel/read"
  input: "conv1d_4/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_4/convolution/ExpandDims"
  input: "conv1d_4/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_4/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_4/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_4/Reshape"
  op: "Reshape"
  input: "conv1d_4/bias/read"
  input: "conv1d_4/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/add"
  op: "Add"
  input: "conv1d_4/convolution/Squeeze"
  input: "conv1d_4/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/Relu"
  op: "Relu"
  input: "conv1d_4/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 851509
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1/random_uniform/max"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform"
  input: "lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform"
  op: "Add"
  input: "lstm_1/random_uniform/mul"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/read"
  op: "Identity"
  input: "lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
        tensor_content: "k\351h\274\346\035L=V\214Q\275\370s\274\274\202\254Z\273B\365\333=\n]\210=\310L0=\362CD\275\217e\376\274\230\222\206\275?\274\334<\034O\245;z\227\t\275c\024\004\274\370\364k\274e\317~<\266\025\241=\365^\323=\355\213\264:\344\264V=(\3544=*\215J<\375\010\246\273<7\224\275\373]\204=\322\305\317=}FF<e\302.=\r)g=\334\237\306\274nkz=\316\257^=EL\022=g\277\344\274\344M\354<h\220\263\274i\340 \274r9\243\275\263\353\213=\257\325\303\274\367(\021\273$Po\275M\0264=\024\340\013\275\005,\032<\002\247\r=?\371C=\243Q\316;\022\246\022;\333\020O=F\377\001\274\342Rl<.l\274\273\033M\224=\00361=\203\340\271\273\232b\244\274O\320k\274\333\035\346\273\355K\276\274\314\nF\274\306\365\310<J\223\311<j\237s\274\026*\000=(\231Z\274\247\252\245<\3456I=E(O\275\206\226a\274%\200F\275H\341\322<\016\235\345\275\305M\215<Z\317\365\274 \271\371\273`X\n<\250[\350\275\345\321\320\274\3533\"\275\247\212r=\340\226F;\221\275*\274\305\226\"=\036\226K=\036$\371\274:\311\240\274\343\nU\274\337\"!\275\346\221\032\273x\334\215\274\343t\322\273\372\270\322\2738*/=H\307\246\274\002&)<r,\200\275\357\345\253\274N\237\020\275q1\005=<\265\355<\247\310\260:\2615\313\273\200=8\275\033\345\253=]f&=.nI\275q\305i\273\026 p=n\376\306=\003>\025<\362\234\240=\246\025 \273j\024}<\377|\206=\272YK;=\310U=\374\333#\275C\254\306<-%\345:\356\204\233=\261W\023=\352\031\234\275Wr\370\272\376L\337\273\004~q<\237G^\275\025r\016\275\265\003\215\274\222\365\337<\023\004\013<\223\007\033\271\351\001\333<\'J\026=\013\237I=\324UB<\267U\030\275\244+\001=\224c\357<\311:\214\274\3713$=h\220w=q=@=\237\250\350\274\001\273\300=\224h\376<+\271\252<9\240E<\006\203\244=\376\330\261=\210?\013\274b\371\274\274\231]\273<\237h\262=-u\221\275\275oM<w5\316<\267\265\211\271?\370\037=\023\241\000=\300\277G\275\327\221\304\274A\3643\275>\036\2239:am<\350\262i=\210\312\301<\252*\010=\0006\013\275C^?=\033\n\214<Mb\365\273\020\351&=\316\340a\275\357t\310\275v\035\t\275\342\t\'=a\237a\274\351q/\272\304v.=\365\005\";\177G\262\275t\346\250\274$\214\231=\031\204\025\274/\373\020=q\032`\275\275\357C;\360t+\275\020\257\243\274l g=\340f\323<\211\210Y=J\366\244;$\030\343\274\232\000\340\274\226Fm\275\315H\231\275e\233\016\275{\266e\275\341\312x9\314\235\221\275;\372\253;\241N\257=\272#\021\275\020h\377<\350K\372<\314\2624=\227\204M\273\232YZ;\377\2774=\331\177\300\274sY\033<\201\035\263\274CK3\275\3177W;\205<;=\376G\302=\203]9\274y\301Z=\344\310l=\370\356\020\275\356\274\302\274O\252J=+o\r=\354\233b;\035\310\363\274\326c\302=ZX\003=\204@2=:]\240:\376\231\r;a\272\016<\026\3628=d-!=tU\247\275\351Z$=\276\316\270\2747\341\264=j\336\221\275)\n\214=G\256\200;\007V\241\275]\324\243\273\214\266\332\2749\314/=5&\343<\271\221\013\275\274\003\222\273\216\016I<\037\017\330:\326\\B\274\250\304\237;}\3143=\327(\013=\375\002\245=y\363V\273I\000\256\274\243\236\223=\330!\036\275|\376\221\275\377q#=\334\230X= \021\204\274\355\261z\275KZ\334=#\306[\275g\341o=\307\211X\275\036X\307;\3605\252<\211\3039=\253\350\000;V*a\275\263v\254=\207:\211\275\357\206\002=\274\276\253;\001uJ\275p\301\361\272\006\246\204\274\274l\241\275@\274\217\2745\342O\274\016P\370;5\002\035<\007\211j=s\376\027\274\232y\033\274\222\363\216\274\t\024\315:\030h&< \247#=\343\241\251\274\336\301l;\376\354\034\275Nv\230\2742\323\000<V\313\214=\257\'|=\0251Y\275\337x\326\274\271\357\t>\234\014\335;\323\345\240\275\360T\355\273\177\210(:\254\313\351\274\024\246Z\275QV\371\274\245\375\024\275\033\257\321\275\235\006\351\272\201\312\221=\035v\200<\013q\242\274\312\200\340;\007Y\205=\251\213\325<\2051\270\275\\U\2309 Q\211\275\2404\306\274Tk\021=\226\212\004\274\r\365\007\274\2139\315\273\373\275<\2748P\"\2745c\226\275F\3535\275s\017\031=\271\025\362\274F\234Y=\000\230\301\275\336\032\031<\255\247\323\274w\202\217=\202\343\355<O~+<\001\'\000\275.M\223\273x2_\274&\374\260;\3748\036\275\340\016z\275\203\240L=-b==\350?\177<\241\356\322\273x\372K=\332J\275\275\200F\343\274nX\022\274\255\025\305\273\266\314.=~\243\024\276\306\322\265\274\332\"1\275\372\241\200:\207w\356\272\374\031\276\274=L\004\274U\350\266\275\356d\334\274\007A\250\274\217k\363<\332\330\000<m(\026\273\363*\n=\277I\001\275\030\300\204=\333\263\271<\224:\026\275\"\302\235\275\331_\351\274\251\244\201<=(\202\273\232\230\005\275\215\204;\274\205\272\024>\326X\203\274\027\350B=\330\247a\275E\376\263=\200Y\317\272y\032G<\0314\344<\343\216R:},1=.\322e=Y\375\002\273/+\312<u\027\273;\207G\317<\000\r\203\273\0306\210<\223\213C\275\001\312\"=\2522\\\274\226{\253\274Q\213\212\275\232\232\363<\277\361\367\274H\214\323\273\203iw\275\223\2152=\177\315\246\273i\013\221=\001Tm=\361r\203;zi,\274Kf\374=J\020I\275^LG=\204\034,=\327(t\274\230\035\024<\255\234\332<3\363\242\274\355\361]\274\306\271\264\273\321\335\221\274`\327@\275\276cD\275\341\023K\2755l\n\275\316[\277\273|t\027\275\365\216>\275\206i\266<\205\314\300=5\277\346<j\340\243\274\356\034\220<\365\367\375<J\033G=\006T\205;\352\034\005=\331\027x\275\254\263\302<j\322Z=\335yp\275v<\222\275\316_\006\274?\371\004\275f;\224\273Z8\310<q\033\317<H\334\230=\205\257\254\275\021\302\224=\030\256\325\274P \273<\n\262\226\272\\V\271\274\224iL=~\024R<>b&\274\220oc=?}\311\275P]\231;q\351z\275^\327V=\321\354E\275\302\223\r=\341g\334<\274\246\217<[\321\036=\257\177r<)J\220\275x:\255\273}\234\376;\323X\275\274ye\\<\371\203\314\273\250\002\211<o\251&=ra\242\274\303w-<_{\260;H\351}=\264\005;\275gz\232=\035\006\271\275\311\317a<\2001\021\275\"\307\361\274wK\215\274\224\364\242;\212\n\332\2744&\202=\006\020\210\272\000\026\232<\372\345\031\275=\251\226\274\021\215\214=\031\227\006=B`n;\216\350\237\275\031Z\317\275~\327@=\335o\316\274\364[`\275\267l\006\274Y\367\360;\234\260(\275\372\265?\275[\313\331;F\357&=\231c\300\272\337\355\3049\330>\331\273\255n\215\275\230t\243<\2165\246\274s\345\237\274\252\205T=\035\211A<\000\n\035\275o&?=\304\253!=\327\037\232<\350Jv<\0073\322;90\271\2741\304\003\275\211A\273<,S-\275=\344\312\274\031\236\234\275\224\204\320<|\007\030= =\010=?\235\260\274&\362\002\275\375\246\250=Q\010\251\272S*\327\2745\222\347<i\202\337\275\250\255b\275\357\204\034\275\254\237L\275\023G\270<\246B\261;\020o\207\275%\\\232\274S\212\263\275Ev\363=\234\026\321:\344\005g\274\374(\214=F\215\340<42c\274\'\216J=\353\353\336<A\370\200\274u\200U\275\213\214T\275Eq\356<\314n\364\274\'>\022>\367-j=\330b\310\274,\367\020\275*\\\240;\000:x\274:\242W<#z\261<\020\006\t\274\265j\335\271J\302\312\274f\364\023\274\272C\257\274\231\301\343<JW\270\274\205\216\347\274(\250\224<\251*\267\271j\365&\275\214z\010\276\250{\251=\312\355\326\274\025\rE<,$\266<\367e\366=Y\310\374<\030\202\267\274\337\302\346<\255|\245=\326\357\331<\365uo\272\352NO=.\337\310=%\340\346\274-B\234\275N\024\342\273\340?\305\27479\277\273Rm\372<U{\010=\260\3234:3>\237=\356/6\275\256\336\211\275\265\257\014<!\014\024<\276\375\t<\343\334\220<\204.\002<U\311\375\273\227I[=\341\242\226\274\000\r\367<k\267\324=2\\\013<\rQ\030\274\360V\213\273\352\202\204\275\260h\320<=~\223;\273\"\213:\346\003\005=\273\366\263\274\317x\246\274\004\337B\275\341\334\271\274:P\213\274i&\371<\2422\251\275\022\027\223:\005@\241<\267\374\245=)Y\n=F\240\025=:\250\327\274\250\251\204;^\234\351\274\325\257N\275O\374\363\274\247\367\233=H\320\246\274SFR=e\215\"=]\374\263\275\314\301\273\274}\312\243\275}A2\274\304J\037=z\036;=\363\215~\275]\265\032=\211\320\342<\224\232I\275\364\034\036\274\260L\204\275+\'\212\274\034\251\\\274\n\004\004\274\264\240\350<\357\230%\273\221\310r<\002K\355\275b\336\374\274>\340\033=\253\211\221\272\310C\';)\234\002=UD1\274`-\340\275\364I\365\273s`=\275\003b==\3509\344\274\002\035\250\274\r\252\000\275d\341\350<]B\300=\201\016\014=\355\331\227\275\250\031\016\275U\177\002=\264\317*\273\217@b=\375\003{=uZ+;\201Q\014\275\227\222\004=\237\236\234;\030\241\004=C\322/=\232\301\230=l\267~<j@X\274\335\034\"\275\2729\266\275\320u\016\275t\315n=\205[\341<\033\307\305;\331e5=\324IC<%\221\035=\340\001\265<\342D\271\273\2669\273=wl\333=\267.\266=\035,w\2759E\'\273\372\250k\275\323\207\217=\022f#\275\245\022\360\274\020\241+<K\322\221<\226&5;\372\210+\274>\3202\275\314\311\256\275\267\030=<\001hy\274\222\357\323\2750\373\031\275\321um<\333\233\376\274\014\215\244\275\274?\344\273\362\216t\274z\r\036\275\310J\'\275(\235\350\274p4\300==X\003=\273k\031=t\355\000=\371\344\205\274W\3460=y\234-\275\340\337T\275,g!\276#9\016=\3476\362\274\022\013\256\274\272\255\355\274\212e\365\274\033\177L\275V\275\200=\003k\243:\020\032\000<\247$\366\274O\306H=x\347\361\274\350\217\213\274]6K\274x.\277\274t\321\020=\225\006\320<\227\231\225\274\036\201\220=b\2433=Nt\340<4\2709;\232\327Y\275\036\277O\275 \217b\274\267[;\275\336\235\276\275\364U#<\356B\023<\342\016\220\275\237\311\336;\266J:=\345\362\330=\332\3729=(\375\020=89\236;\360\014\334\274y\200\014\274m\037J=6\207`\274Q\246\213\274\027?\243;\217!\263\2758s+\275$\364\223<\277\266\002\276\224%\004<\334\037\007\275\n\274\335\271\231\265F\275J\016\273\273\317\265\276<k\017\336\274\020\203{=x#\214=}v\023=\274=9\275\002\356\t\274l6)\274\235\365=;\225F\030\275P\267\247=n\253\347=\034U\367\274`\250\363\273{1\033=\'\346s=jC\205;\312=\202\272/\346\244<\'$j8\240)p=/>5=\230@\312\274\302\356\220\275\205\306\251\274t\364!\275\263\272\014=k\035\305=`\331a<\204\206u\275\275\261g=\\\017\024=f\301\250\273<\344\220<\033k\002=\333\014h=[`\010\274\337)\250\274\343\235\325\274\335\274\037<^\314(\274\370e\347;\371oh=\3207\203:G~S=\300%d<7\320\220\274~RX=n1.\275\232\224\243<\232q\3759\273k\275<5\346e=!g\005\275\365}\225\274\211\307\206=\207F\253;\323\240\230\274sJU\274\"\023\322=\363\334\022=C\260\226=\327bx\275\343\325\023=\007X6=\205\202S\275\352\354\377\275*J0\275\024\353\265\274\223\356<\274\231\226\035\275\244\023\233\274\346\036\354<\333\234u<\3172\203\275\330\376\2019\311\277\220\274\220\243\332;U\211\010\275\027y\036=\004Z\260\275\304\352\003<\225\367q<_\347\023\274\277!\034;\253/)<(\260\233\275\210\323\\=I\026\2258c\014-\275\217\031==\352\377\004\275\305}\023=\014\362\266\274\355f\346;\275\004\013\275\316e\220\274\246\230K\275\037\n+=\310c\261;\300\013\'=\215+\210\274\r\2761\274\200g\376;\266M\220\275g\257J\275[\027@\274\341]\307\274\"\006\231;\353G\365<\004\356\315:H\237\302=\333\201\311\273\353w\345<;y\303<\301s\347\274\352\266\265\274\333K\266\275\205\355g=\335X\017=7lY\275\003\366\377<\314\033\271\2745_\017;U\250\314<\362#\266\272\n$S<<\203\035<\002\253\230\275\212\355\365\274)\255\213\275\275\324\244=\340\211f\274~\213\014=\027\013\303<B;?<\027\312\227\275\341:\230<D\210a\275\002mS=\336\243\233:\252\'C\274\346\032\037\274\227\314\257<\366\005\315<\310\273X\275\246\r\205\274\252\003y;\236w\277\274\"\204\205\275\210\314\206=el0=\\\263\205\275\367\032\n\275\2504`;\377o:;\'\347=\275\354\027\366=XY\200\275\261N;\275\267\345\\\274\370\242\334<\177<\253\274\355\036\006:v\207[:\360(\301<K\250\317\273ORC=\343Z\227\273S\024\013\275.<\316\274.\373i<\322\034\003=1\363\353\273\346f\270=T\326\201=<Zu\274\245\211\330\274\206\301*\274\205\3247\275\211\004\035<\204\000\005=\314\317\225\275fF\343<\023C\213;\2567\010<@J@\275&q\006=\205t9\275(h\255<Y/i<\330\254u\274\010\377\303\274m\276+<r\\\303\273\231\006>=VD\366<\234\221:\275\tN\300\275\022|\353;\310fh\275K\223u<p\364\005<6\321\335\274ZiM=\363\017\035\275Fw\244\274\177.\201\275\221\303L=~\002\033\275\360X\225\274\211\331\022=\336U\033=\225\013\r<xk\020=\357\024\031=\332\220\017<\365\252\n\275\344\375\314\274\362v9\274\241\344&\273[\026\004\275z\277\234=\373\0055\275G@\002:\365i\326\274H~\237;J\373\200\273i\277\357<\017\002\004\275\345\334\004\275\256\251\343<\333[\211<v\352\217=B\031\263<\270\253\360<\262\340\362\274\t\273\222\274W\222G\271\r\361\223=\272\367i\274\305p\217=S\326C\273\021\301\002\275weP\271\326\242!\275\266Q\311\274\363\270\361\274\355\n\215\275p\030\356<\334\3578\275ba:\2750\324g=\330\332\'\275T,\330<\236\261\315\274\025}\304\274\240\262@\275\221\314B\274J\327\341\274\357\366q=\215\200\314\275d_Y=\245\212\264=\363\366\203=\207\r\"=\351\271w<\355\357\220\275\010(M<\200\021\231<\354ao=\030\233?;G\r\242\274\r\0138=K.\327<\013\256{=D\371\036=b\371\261=\354\3734=b\014D=\370\373\213\275o\177\303=\207\2711<\01779\275\322\231q=y\257?\274\330j\311;\2227#=7\377\253<b\346\201=\305\274p\275Hn\270\275\343[\240\270\275\\\274\274\230\313\242=\321nf=Qc\n\275V\316\214\274p-\026\275)O\306=\307\007(<\033\026N\275\276b\250<0\343\035=Yv\017\275T\336\232\275%&:\2744H\213=%[\001;Q!\346;\325\332\020\276\310\000\241=\032[\303\274v}\231\274\370\362:<\025\322\000=7u\177\274\214\034\220=\200`s<\373\357\354\274@\234\271\274, \317\274\036\241F\275\223\276\\\275tU^=\nR9\275\243R\016\275\345i.<N;I=\235\373\267=b\244C=\206\213?\275FQ\357\274\213i_<\213\245v\274X\014\272\274\241\0238=L\0034\275\262)o<\227a\224\273\340\023\371=\025\313q\275\230\031U=\025\301d\275k2O<\226\215\264:\352\377\237=#\013w=Xm\217<\264\356;\275\026\233\005<\003\323\302\273\360\223\316\273\036?\213\274j\242N=\362.\207\273\313\034_=\010\315\201\275s\t\310<\3231p<{\0319\274\0275\274<\332x5\275\375\237\362;\373\037q=\330\262\307=\271S\234\275\217$Z=\234\017\203=&\223A=\320\334\n:\024\227\305\272\224\035N=\210\270\243\275\030{L= \267T:H\3247\275\373\026\306<9\2137\275R8\246=\321\203L=\337\023\267\274\367\212\204=\325\023\314\274[<\205\275\217y\303\274\"\021\032\274K)\217\273u\212\360\275\022?\003\275\330B\254=z\376]=\360\223\224=X;\240<}\201\232\274\304\236N\274\306\255\352\271\375\233\200\275\213\306\311\275\"\276\342;\324wc\275\213rs\271\036\330\347\273\200\3645\275\"\'q\275$\023O\275KP\207\275{VH\275\367\202\223=\325\332\t=\022\310k<\272v\n\275\036\301,\275\205\"\227\274\217\362\221\273\352\344\216\275dD\035\275 U\333<Qz\020>\022v\250:\303\305\334\274T\230\242\275\257\250|\274:\272\255\272:\200k=>X\'=\324M\242\275\362\363\376\274\231\'\275:9\251\221=2\\D=B\021B=\017z\337=`\204\262\274\265\262.=V\205\247<x\227\032=\213iP<v*\203=\025\272L<\376\203\021=\274\223\220\274*\\\361:\317\023u\274\354!\230\275\235\210$\275\353\246\217:\327!\252\274i-\345:1e\203<%\200\271\273|\305\302=\016\3220\275\323\344\036=\300\3146=H\364\220<\340\320\n=<.L\275b\352W\274lNb=1\234\220\275\216\240\224\274\376/i<3\360a<\346=\010=\265-\263\273*\272K\273>G\312<\030\307\'<\033\007\210\275A\356\222<\205F\204;<\273\n\275\366\260\235<_\032\t\274[.,<\017\013\256<\020dF\275\3501\233\275\236s\227\273N\243\010=\224\214\230\274\271M\212<\033&);H\035\033<a\373\331<\014\225`=L\254}\275\007RW\275\356\253\361<=SC<\266\232\000=\002\235\303\275MT\262\274K^\'=Kl\324\274\243\324\001\275\204\177\203=\201v\326\274pY\r\276W\3036=x\262\014=\217\300\207\274G\004\n\275\026\246\200;\t?&=\250\327+=\002L\027=\024\205\221\274rEy\273e\273\311<\236mU\275k\277C=\251\317h\275\323Z\235\274[F\230<\372\030\272<l\205\202=\301\262;<\342\335\256\275 \261@<k\261\300\273\031O\347\2733\203h=\275\237\355;\335DC=\263\007\035=\024\326$\275\032A_\274\212K\254=\363\256A\274\361\337/=\234F\214:\240\231k=\252\242\305;\251\357&\274Q\242\276\274|\302R\275\341!\263\275H7\240=\346T\344\274\350\360\201\275\275\346\352<\215\310\336\274z\nW=F\346w=a\347\207\274\236\350\032\275 \276\206=\016\314\356\274)5\346\272X\205\274\274\334\360\331\274\262O/=\023aX\273\203\262\220\274\005\250p\275\024Fc\275Z)\266<\326E\350<H\205\364\274\222\267s=\006>\203=a\r\016=\336\313\035=(\250A<|\342\227;\241\032\005\274Bn\210:\374\004\017\275\272hc=\023\264d;V\220\237\275u\333Y=\341\332\265\272\241\016\303<\032\232(<\216\361\t\274\246\225\323\274\375\201\277\274\225\222\304\273V\225W\2754hb<Q\014Z=\210\236\211\274\342\336\350;2\007\203=\305\274E\274\267\246\035<$\305+=\201md\274l\364\236\273\2140\300\273\2667p\274\214,;=\303:\365;\320\'\270=\021\243)=P\017\004=\315\253\021\275\377\337\207\274\370<\211\274\003\225\202\275\215-\320<K\006\243<d\362\271<ZEO=\027\030}\275\267\211i\274 \030P\275\244w\243<}\320\375\275?\222s:\256\t-=\335\372\027=A\234S\275H\370)\275\312\205\013==\224\\\2746\277\207\275{\2165<\322\025?=\357\033R<}\020f\274\"\001\216=\010\020\025\271nI\323\273_\325\023\275h\213\322<H\016\370\274I\242M\274\010\362\325<\000\244\267<\215*\237<\260\342!\274G\351&\275lov=Qp\216\275\037mZ\275\203o\t=\344%\003\275\271\331\334\274\356\266^<\327\263\272;Cs\261<-\010\346\272\365\334l=\275Xw\275\263\367\260\272\330\200\317\274\221\'\305\274\344\010,\273\275\342\323<\224\237\213<\267h\033=\201p(\275h\rl=\n\272\236\275\266M\006\275\341\0207=\202\240\r\275\265\233&=#\336_\275\374\037\334\274\036:\010=j\3229=\300\232\326;r\250J=\0323^\275\2456\202\273c\210\022=\212\242\000\275\034\237S\275\216/b\274\220\300\265=\305I\014=\371(\273\275\210\366\026=dl\341\273c\237\033<\001\246h\273\"*\001=I\t$=\377x\000<sL\033=p\"\201\274?\371}=\343B\305<\307\246G=\352w\265;\307\352d\273\337\270\363\274\020t\336<n\017\276\273\217A\270\275\204\007\305\275%p\261=\006\035\304\273\352\331h;\272uu\274\257\313\007\275\332\361\375\274u\033\254<{`\202=\355}:<\220\336>=\326\016\360\274\364\370\246<%\211l\275\025\370S\2746\361\022<\313\\n;NN\n\274\207\260{\275y4\030\2736V\001=90K\274\253\004-=\274\343\037=\302=\204\273\004\355\030\275\034\307a\275\013p\026\275\373U\307<\305W\220<\304\242$\275\220HI=y\210|<8.\273<\330i\306<*\241\033\274s\3171\274%$n<\362\221}\275\253\354\344;\016\307\3029K\222\252=\343\001\026\275\345D\207=\004\320\235=\264\2761\274<\250\211<C\266\335:\202\235I=\365!\306;\365W\206\273Y\000b:6\246_<I\236#=x6\363\274\301YO\273\375C\267\275\300~o<\003\253J8\260\"$\275\251\371\220\274\333\355\335\274\325X\304\274\022\020\350\275[y9\273\230\250\360<\253\320\251<\360N_\275\371\223\220<03\240<\370\031(<x{\017<\264\203\334\274jk\325<\035\340{=\354$c<O\326p\275\351x\010=m\304\005<\006\347N\2745\016\310<4\236B=\000\366\207<\257\375+<\366\341`=\305p\325<\036\366u\275s\210S=\241\005/\272\255l\223\274\324\202\324<\271\3612=4\253+\275\224\363\326\274\337\3650=\334k\216\275\010\265\320\274\275\364,\275\317\234l=j\232\341\275\336\265d\274y\347\026\275\n\254j<\222\271\217<p\340\270<Z\2738=\203c\376\275\205\270Y=\307.E=\004\2779;4\003!=\256U\352\273\'\265\373\274\264c*\274\000[\317<\240J>=\004K\246\274\304(\270<\377\233\221=\3311b\274\250\272\302=o\033\225<\342m4<B\300\243\275\217\312\247\274>n`\275m\217\203\275\037\220;\275\000\277s\275\037`\005\276$\355\245\275\241\252p\275E\271\t\275\212$\312\274\366p\231;\247\261\312\274\256\016\347=\355\242\\\273\346\202H\274\224Z\203\2740I4=\262&\337<S8V\274\343\302l=\333\022`\274$\212\367\273-\306\304;#\020\225\275\207\034S:k\021\267\275\014\250\237\274\344z\244\275:\213\277\275q\355\017=}\231;=X{\346\274\220j\202\275\2019{\274\324\267\230<\315\250\310<\367S\020<\030B\354;\n\026\302<\234\3450=\264\'\215=T\254E\274\201\227\330\274w\317\332\275\300\307\341<t\024\360\271\263ck=\n!\211=w]s\275r\314\021=\001\207\030=y\307\226=\317\034O\274\302)\n=\315\265Z\274\244\025;\273\251\277\037=\313Wb\275\200\212\200\274\312\330(\275\302\245\010=\237\3448=\026\347|\275\0059\375\274b\264\200\274\376\304E\274l\355.\275\347\0042\274\322\022\315\274\277L\236\274\300\257J=)\340g=\304Gy<\267Y;\275hp\336<\216\366\235:E\2058\275\343\361\332<\345\330\226\272 \226Q\2747Z\307;\336\3434=$&E\275RBX;\007\213s=\302\246\t\275\224\375\235<SqQ\275\035%\243\274\272`\357<8lA\275]c\301\274u\265\203\275\211\373\032<qD\302=\\\007\207<\r?8\274{\311\226\274.\206\203\275\'j5=\234\263\364;m\243\025=\377x\035\275\243l]\274\262\222z=\014\274\276:\016\312\014<9\337\263<\337O\357\274\"2\306<6\014\014=\272]\252<\221>\250\275\320\301\234=&$\250;$\252\017<\"\351\340=\234\347\035;\261\205R\274E \024=\304\232\342\272\260\355\023\275CE\310;.\232\264=\313\363\003\275D7\302\273\310\250-\275\231\243\224<\234\267\343\274\277g\177=T\013\016<z\263\235\275\235\233#=\342\316\240=e\343\335:\323C}=3\230\306\274\300\031\252;\220\201J=\037\335_=_\310,\275*\340\343<\341\3265\275\250\341\254<\2228g=8\231R<\263\020:\275O\016~<\225=\010\275-L\275\2749\210\312\274\201)\222<\370\357\212<\236\314\253=q\247\371\273e\336\372\274\330\304\n=CN\223<y\227\256=\257;\345=\223N\r\274\373\356D=\221\366==s\264\006=\016\332\273\274|f\276<\250wP\275\343~\364<\0068Q<L\373{=b\370\277<\034E|\275\002\032P\274\272[\360<5\013\033=\202\347-\275\360\235\361\2741\024\253\274n\343\006\274~\222\300\273\331\2411=\004\210\230;P@[=U\2328\274\207\312\323\273\004\2306=.\"\216<\rv\334\273\rz\212\275\206\nD=o\223\372\274\325\3577\275\313Q(\275\355\262c<l\200,<\215=J\275\027TK=\277b\237\275;(\335<<\034\331=m\326?=g\244[\274\027\030l\275\220*U=\035,\031\275\255\001\327\273#(\264\274qE-\275\351\357\211=N\327*\274hV\010=\337\037\360\274\323\324?<4\2543<b\235\005\275\365\030\316<&\036\026=$\375\217<@c6<Kt \274Z\013\233=%\r\351<\361G\024\2758|;\274\204\202\3129a\022\203=\335\316Z\274w\333\253\274Y\247\251<z\323\223\275\311\233\307;V\241\226<\214;G;`\356\010\275b\224\265\275Z\317\355<\3334f\274\320t\347=@\254\314\274\302Oi\274\237\2361;\005m\022\275\333A\245\275>\315\001\275\013\227\024=\200t\204\275\025zK\2756\017\217<%fE=\223l\354\274\347\302\026<\216\014\210\275\332q\030\275\"\305\310<\360*W<\322\306\335:O\204V=\243\340\325\275\322v\221\274\367\2348\2752\255~\274o\\\004=\315\321(\272\226\030#\273\336\257\333\274+\200\223\274\006f\301<\0050q\275\245\330\371\272\263\347\273=a\341Y\273g\353\353:1\220\017\275\373\330\317\273\340\025-<y\251\371<\217\233l\275X]\245=x?\222\274a\226\260\275\035\226$=\\\014\003\274q\301 ;\365k\363<\324\301\235\275}Pj\275\202\2138\275\352\177\217\275j\305\020\275\321\251\035\275\205;\343\274\205\035\317\273V\031\343\274:7\032\274\273\245\330\274m\351\356\275F\017\002=\0200f;\177\242U=\377\020\200<\032qK\275-\034\200=\344\321\373;f\325\375\274\315\014o<$\306!<\222\341\335\274(,\202\274\234\260\236\275\350GG\274\331\032\361\274q\354\305;$\320\031\275q\307\201:,\243\346<\316|0\275\r=\030\275\347H\355\274\216\310k\275\360\2646\275@\006\016<\265\325\362<\343\300\355\275s\242/\275\023\353\244\274\031\267L\275\001\345m\275\243\023V\274Ux\246<6\';\275\3500\302<<%\020=\347\343l\275K\303\025\274b&R;\353\216\r\274\005=\352=\344\301\245<l\377\253\275\200{\177=e\350\241<\235@^<\223`\351\273\327\032\004=\301iI=\033\034P:3\336\331;\312\023R\275\323`\"\275K\333@\273~\036\207=aS\241\275f\266\227=\330\024\246\275?0*<\366\254\352<LO]=\244[)\274\253\363&\275\325\371*\275\316\304\240<\231\003\342=?\361\327\275\276y\315\274\212\027\205<\334O6=\023P6=qg]<\3073\220=8fd\275$+\374\274\177D\347<\267\267\376<t\307J\273\251\360\202\275\245g\033\275\327\240\206\273\032p\000\274\202\332\266\274\315\207\004\273\204]\316<\255\332\002\275w\007\214\275Q\370\373: #\034<,\272c=&\223\262\275*\352\274\273\'\366\311=\020\373\024\275!\245\215\274\004Q\260\274\244;\210\273\001\005\332\275\"\320\212=y\342\031=\023\274\207=\351\372\214\273z\331\032\275\030&3\275\266\252,\273\212\345!\275\251d\236\274\225[Q\274\334\270\253\274S)\216\275v\347\210\274\270\'\230<T\023\273\275a[\304\274\350\027\263\274\306\300\236\274w\237L\274\2379\204<\312Nf=\006\335r\274j\203$\274\247\252\362\274VY\245<\214\223\364;\330\232\211<\316\375\242;\250#\024<\252\234\207=\232\372\207\273x\360\270=\344\245\376<\272\260\331\274\200^5==\343\363;N\202\000\276\210#\311\274\0043e=*\'0\275\252\260\002\275&\035Y\274\244$\000\275\345s\002=\003@\302\272e\217A\275\364\230\240\274\022\000\031\276u\233\261\274.\376\005=\235\266\341<\216G\223\274\362\312\273=\005\313.=\341R==/J\302\273\343A\362<\233\251\233<\243,\226\274UW\217<r\017Y\275\365J\326;\206\263\366\274)\235H\275\307R-\274\005\240\370<\310V+\275GD\r;\205\313d\275RC!\275\333\026`\274\024\244 <\245\232Z=\r\024\207=+}\350\274\212\206R<\017\024\253=\216~\223=\311\214z<\330\235\203\275\232\207\253\274\200=%=\350#\221\274Q\030\033=\202K\n\276\242\230T=\333V\004<\033\357+=h\014\323\274\032\332\000\274x\237T=N+K=\235\022\303\274\013|\370\273\001\326\373\274\262vP\273\345\354\325\273\333\247r\275L\007I=mP\374<\314\366\033\274\327\365\343<:\310\002\274\304}V\275\2165\204\275\270E\264;\3327\352=Y\2174=\370\215\210<\312\301\036;\024\352\334< \017\302;\273m\240\275\347\261\256\274\355<z=|\023z=\205O4\275}t\312\274\355\242\212\275\211GK=\317~\034\272\005L\300<\262\364:\274\267\217U=(T\032\274\r\023B\274\014\014\200\275\207\317\013=\3307\367<\240H1=\0050i\275I\275\366\274x\t\351<G\032\263\275\337\017\314<j\370,;\024:\232\275\304<\013=\257\016\262\274\365W\361\274\002\323\343\274\005\371\001\275\n\257\261\275\222\245\201\274\324jd\274\241\222t;G\306\023\275\313\375H\274\360\335C\275\263\347r<\016L\305=M0[\275:Ia=\372\017u\275\277\360\361;\351\316\r=R\213!\275\363\353\352<j\336\003\274\017k2\275\250\031\210<\351\333\365<\224\254\027\274\313\216N\275\372\311j\27217\373<\252>^\2758\202\302<\241\033N\275\327\210a\274D\2437\275\370\361(\275\347q\363\274;Py<\374\321\303\273\266\301\022\275\211\365b\275\233\331\244\275`>l<\003\243\017\274\241\270E\275\026\243\325\275\303\204\340\274\266\343\352<\212\023\000\275pd\276\274K\254N=\231\221\250\274\227\304\322<\371=\254\274N%\013<\305\270\210<\307\240\212=\246\222y<u9\227\275\235\217q=Wg\212=m\361y\275\\\234\344\274\234\225\333<k\310!=\341;\347\274=\315u\275S\215\014\276*\340\253<\342X\253<\257\330\202;<\320\206<\023\036\005<\244\023\025\274AW^\274\276!\356<Q\311\345<\217\032\032<\025\262\037=\242\330\200=\232\317\245=\336\364\267;\236\252\365<\016\200B\275\307\332$<XX\271=7\262\202\272\272\310\257\275\25729\275\344U\300<4!\253\274s1\314\274\262\2602\275\371=4<h\272\202=\030d\253\274\246\246\333\273\221\265\242<\274\003\255=\274\270\272\275\324\201F=Z9K\275\301k\206=\232\034\213\274\360\366\350;\326\222\245\274B\256S=\3234\t\275\211\252\262\271\237l\253\275\004\345\005=\346\243a=.\366\017\274:\200\031>\003\360\033<\231.V=5\032n<\215\310\010\274^\307\211\275iS\275\274\001C\234\274\216\373\256=[+\'\275J\004p\274\240\210\014=&B\2059\334\000v=05=<\005P\340\274;8\306<\013i\232<\264\257\300;\023$,=\316y\250<E\341\022=\223\370\307<z\333\315<\243\304U=\273\353\247\274\254\341\207=\334\304\305\274z\273_\274k\211\211;\263\r=\274\306\231 <%\323l\275\342X%=\313\214\310<\377w-\275\334\t<<\236\372\003;\310\252\006\275\273\200\236=\234\362\331<\033B(=\243J\n\275\275\013p=h\340g=8\301\202<5\347\035=\004+\246\275\277\354\327\274:\r\353<\344?-=\333>\227<\244B\330\274\274\357\021\274\033\217\347<\327ap=\032\242z=\205\031\t\275\254n \275\254\2177<\265\355\312\275\276w\002\274$\376\347:pk)\275\356\371[\275\304\3212\275\231\352m\275\365\214\243<L\247$=&U4=\261]\r<\316;\260=\365SZ=\265\014\221\274\366+E<5\313\024\274\310\027\006\275\267\320\013=\276\365\034\274\000\307\372=\367\343\022\274M\233\t\274\302\225\022\275\277\262Y;L!\327;\310\365/\275\221,(\275i\332m=h$\r\2744\330\305;$\213%<Z\332\301<\377\340\214\274P\372\004\275\366\036o;\237\262\234=(\300|\274\221{\307<\022\236\254\275~\021\321<\\\267\336=\365O\t\275s\340\312\274\274\023\306\275T\331$<\006\205\272=k\030\t\274U``<u\276C<R?J<\360m\331\274n\270\021\274P\007\000=\037\020Y\274\3124==\204<i=_\352\243<\320\030\024=\010\010s=R\277\014\275\022F\235\273\310\251\215<=\256\255<h\005\301<X^a;\234\367\275\274\242\316b=4\210j\274\222X9\273\357\355\327<\031\373\022\273\001nU\275\2033\254\274\014p\344<i\257^:\365B\345\273\357\257\r\272\242\350C=CQ9<\335S\n\275p\342\331;\336\244\013\274\020\267!=!I\336</\244\352<~*Z\275=V\001\275\003\214\215\273\200 \312;\272\260N\275\373\354\250\274\255\313\017=j\362\001\275\362\227I\275\342\271 =9\312\365\274\234yw=\010\254\354\273+7\237\271s\344\035=\021\313\237\275j\343\220=\252\267O\274\250T\240\275&?*\274\r?F\273L\247_<\3178\321;]\204\241<\202\363\300<\201\304y\275\311Zw=\203\307C\274z\031\371\274\217\023\355\274\207\032R\275%4\224<-\323\224<\014[\377;\217Qq=\366\327y=\343\327\227=\t\273v<\220\217\267<\025\035 \275\347\030\321\274\322\226J\273\346\030\332;\325\'\021=\267%\223<\313\211\310\274\273RE\274\231\331\261:\255FJ=RD\232<y\213\201<\330T\303\275NLv=\311\326z\274\000\001\246\273\207jw\275\014-\334\274O5\203=7\0339\274;X\205=uK\377\274\034\311\r=n,\034=\230H\343<^!B=kZ\n=\364\242\330=s\305\201;g\347\023=\352\207\262\272\2655M=\344R\313<\355H\211<\254\025j=\036\345\221=\347\322\250<\350\264\301=\230H\023=\252\005\032<\022\372.\273e/!=+\221\306\274\r#\206\275\2367\211\274&y\234<\205\177\271\275\313`\211\275\254\232\365<:8\240=\371\307q:\351q*=u6K;\326\214{\27473\355\273\035\243i=-\373\375\275o\0179\273v\004\263\274y\360\217\275\373|\301=\306\324D8v\037b=\222\253\335\275w\262\251=s\223\'=\211\301\000=\t\247\035\275\225=\313\274P%\361\273\253\365\262\274\"Rb<\212\031\024=\322\236\247=1\316\224\274i\356\024\275!\340y\274W\225-\275%\230\226=\006\332\205\275[4J<\036\227b=^\357\222\275\203\241\202;\025v\243<\177\362\214<W\357-8;\274\247<\304\375\257:\203\205\217;\021\232(=\213\232\323\274%\220\005\275\033,6\275(%.\273uz\001<\337\250u\275\232\320f<\002\377r<\227\341\256\274%1\242<u\232S\275K\320\270\274\000\275o\2753R\r\275\307f\224\274\222Ct<gT\216=\224\254\210\274j;\272\275\327\323&\275\366\272\023=U=\305=}\322\345\274\r\361\267\2750q\270\275~\013&<T[c\274\007\371\2169\267\204\267=\225V\005\275\341\233\017\275n}\323;\300\325_=\240:\213=\276\301\361\273\207\325~\275\r*\014<O\272\333;F>\320\275\240]\020\275\021x\006\274$\305\t=\n\206\302\274oa+\275\177\224-\273\374+h\275\3559\315\273\322&<;\237h\000<l\230\r<c\253\335\274q\242j=\260qd\274\225\301?<D\255\207<\353\236\322=\t\257B=\352\365\003\274\270\316d\274\240\326\226\275\3100\2428q\307H=t\364\034=\372\n\261=\243\321\377\274\350\212\272\275\273\037u\274\004\227\351\273\2451\344\274\021$\314<\000~s:w\235\254=\221\213\010:2&\237<J\356j<\205\316\271\273}\025\306\275\212\330F\274\007Sy\275s\221\314:X\244\t=\323\334o=\366\224\210=\254\341f=*\254z\272#W#\275\022\0270=l\374)\274\256\020\021\275\230\027\027\275\001\"\006\275\356\333\355<\364\373\230\274\330;\373\274/\'X:\010&\272=)\211<\274\001\317O\274ec-\275p\310\320\275\310\315x\275\216Q\335\274c\t\301\270\363i\307\275\210c\272<z\353\373\273\023\360\006\275\230\352\355\274Yv\031\275m)\273=\344\033\353\273\226\274\257\275\\C\202=\231\346\014=&\371\330;R\240\240\273\202\2341<\253k\360\275\007\245\335;j\311\377\274TR\264<y\0130\275\216$\026<q\255\301\274\014\211\352\274I\032\354\275H\210E<\237\332\267\274\332\021\235=:\205\374<!\206w<\010f&=dK\312<\202\371q<:h-\275\351o\232\273\207\264^:[\2024\273PL\005<S6\307=\343\206\315;.K\201<\312py\274E\333<\275\2026j<[E\352<\007u\211\274\237\264\360\2731\354\000=$\034S;\016X\370\275hcm<4\021\332<gK\354\2739=\222=[\016\210\274ST~;\035\221\021\275\363!9\275\"H\354;*X\363\272\303\020\250=d;\313<\345\366\035\275\312C(\275\251Of\274\343\317\240\274`M\014\275\251#y\275?\272\026\275\234\033\340=\017=\247\274]\211*\275@\376\301\274\231>\252\274\211[\211<\354x\357<\321\302\202<\346\225V=\036\262\200=k\204e\274l*\347<\360\332\014\275\336#\251=t<\001=\262\246\204\275\362<%=\341\204K\273\235\364\327<\247\377\362<\214\007\222<\234\372\230<\334= \275\010\324s\275\216\363\224\275\267\226\320\274\354r\346\274\337\375\261=$X\310<rB\217\274\262\234B\275`\341\226\275r\020\r\275gj\002=r\364\013=D\375|\275\202Qt\274\317d\365;\343\215I\274\240&W\274\357\252#\274Yu\033\274\222\375\206\2754G\245;\255\236[\274\276t:=P~G\274\373\202\351\274\361l{=|\303V=n\000\314\275\300\204&\275\321p\r\275>\325\202:-O\036\275C\334\020=\204\353\361\271\212\313>=\310\234\337;\177\337\t<\320\n#\275\377RE<\031&\241<\014Z.<%Y\324\274f\"\202\275\321\371d\274\332;\2139-\261\203=\224\266n\275\314?\242\274%\t\224\275Y]y<P\231\260=3\3726\275:IF<p\253c<\304\277\230<nBb\273\313\300Z<!71<\211\311n;\272c\020\275i\366\267\275\313\366{\274!\024\000=\312\302\'\275\006\315\333<\260R\231\274\313\311\352<\243\375\232;\247*\017\27427:\275\336?\213<\323\024\206\275\361\276Q\274\r\025\001=M\217\211=\013\177\247\275\331Tn<\270E$=r`\350<\024\330\373\272k\221P\274\276\301\324\273\336\223\227<t\036\313<\333\036\223\274\220\220\017\274\351!\004\275^\016.=\273\217\376;\315\312\005=\221\010\212;\000\030C\274\326N\317\275\226\267:=\340\021\203\275\262C\244\274\331\346a=HBS\275`}J=\304\333\030;\326;\021\275\364\202\252=\004\207g=E\251\252\275xL\273\272\257H\204\274\034\177\361\274\030\t}=\361\303P=\314\277^\275\203\207\263\274\322\306\275\274\253\233X=07Z\274\270k\032\275N\237\337\275\320`\035<\211\235e\274\265\262\212\275\020\346\217<\352\246U\275\305\204V<A\010^\275]S\203=\306\270 \275\231\343\324\274\312\322y\275s_p<\266<\343\273\027\250\370:\264\345\006>\034\344\244\274:\366\236<j\346 \275Q[\355;\031(\350=\n\361\002\275\256\322<\275\333\035\263\273\310\265\t=\217vo\274\020\007\310<\374-\246=bp\237\275\033\377\220\274\033&z=\005|>\272\326\035\211\275\376G\337<h\007\223\275\024\252\020=/\205\023\274{\356&\275\016+\230\275\355\033\311\273R\232v\275\323\237\252\275\211\001a\275\311Zb=O\312\205<\356=\227\275\302\247\"\274P=\227\275=3\024=\3771\254\275\300\2547=\346\323\224=\254\027\221\274@\371\200\275-^\006\275l\323\303<\023\021\305<\200U\007=\234 b<d\000b\275\273l\204\275B\367\032<\373n\263\274H\203\342\274\273\232\273\274\315\326\324<\305h\'\275~;p=\251s9=\272\013\266;&o\242:\273\036\225\275\024\023\035\2750\373\236<{}\275\275 \2251\275\276\200\230=k\365=\273\274\254%=IR/<\304Z\233\272\241q\227\275,m\002\275K^\t=]\353E\274\253,\272\2748\004u\275R\210\226\275k<?\274c\2146\275KwI=#{\201\273\230\214w<\375)T\274\314\\\256<\263\374\220\274\325\334b\275\257k\244=+EQ\275U\360\266\274\200CB=\004\311:\275\307n\323;\206\317\345\274u\236\202;\271\246R=\213\346\361\274\202.\261\274\315\363\022\275\001D\267;\362\275^=\272\3645<\014D\203\275\033\356x=\376_\241\274\305S[=\005\334G\274\271A\342<\323\245q\274\013kK\275\022!8=\355r\253\275\233\365\222\275\3036\016=2\352\276=\212\3350=g\006\226\275\014\200\264<\206|c\272 ul=\206\020p\275\035\323\207;m\000\373<\227W\020\274m\236\233\274\311\325{\274K\243\302<\3575(=nq\036=y\274\311\275\354\317\327\274Us\353<\007\262T=Ga\200\275>\346\353=\010\353\036=\"\350\214\275\275\255[=\373\376%=\020&\034=\025\204\023\274F\013`\2747\367\006\275\320\256\223<k\360\345<T$?=\355\277|;\346d\315<(\230j=\376\376\227\274\004\024\303<\037\201\371\274~\2156\274\326\264\222\274V\330\031=\230 \213<\021\311\213;Z\222\367:\n.+=\355\254}=O\344\204\275\361\275I\274\270|\344\275\240q\371;V\243\224=\265y\237=\236\372\262\275\207\337\255\273\375\211O<\016\001\325\274\265+\275\274\272q\232<\316EJ\274X\347\241=\356\352\';/\373\014=\222\313y\274\244\366\314\274Ba{<\343\3176=\352e\264=\251w7\274\305\023\037\275\224\274\006=\310n\336\274\200\245K=[r\304<@\340\276=SmO\275\035{\226\275]\211\213\274\272m\223\274-s.\275\311\0175=\306\024.;\026%\317\274\000\270.\274\314\214\224;\327\261\244=-\226\225\275#_/=\222i\225;m\034\205<\310\245\353<\024Yv=\261\202,<<k)\273\003\2549\271Id3\273=\345\203\274k\201\003\274S\236\027=@\026(=\301e\270\273B\306\024:~\335\n=\352\201j:\260\230\346\274\323\266\014<\362m\303<F\001\376;\033\260\361\273h>\000\275\340)Y\275\313\242\037<\214hU\275\262l\307<\260i\202\275\375s\346\275\347\203\213\272\213o\374\273\2341\036\274\263\324\312<A8\304\272\345\210\301<\020\267P=k\257\357\273\241)\"\274\272\3760=\\\241\257==\264\226=\341\020\2649i\223\202\275Y\313\205<\261?\205;\253DL=\"~>\275\210\240=<=\370\000=L\025\231\273\2243\234\274\236P\326\274z\236Q\275\375\211v\275\252\321\032\274W#+\274i\021\207=\245-\\=\020\262\337<\336\215\221\275\017\314\303<\013\206e=`\037\357<\275\252(\275Q7\203\275\215\314$\275gvr\275Y\020\260\275\006\364\025=\225\027\221<\202\231\001=\230\316\215\274\216u \275$\307P<\001?\354:u\251\334<\031?\267\275w\315\211\274\270\024\305=[\202\247:\266n\241\274\320\204x=O\205d=A*\323<ea\026\274\232\342\r<\353F\320\273e@\256=\361\353\237\2745\251\322<w\313\227\275\231\031\303\274\241\266\033=\346\r\231\273B\352{=?\020\006<\037\203\260\273\223\306\234\275\007JC=\250\262\267\272\305\217M<\355\356T\275\334oa\275B\334\343<<z\346<1\031\007\275V\020\256<21\177\274+>g<\300\031A\2752\253)\275\374\310\342;\3470a=\242\277\341<\343\316\213<f\370\303<\024\"\222\275\351\222r=G8\234;Q\030\204\274=l\260\275|\304\\=\263\353\330;\234\363\224\275g\353;\274_\367[=\302\222\004\273X\353\226<8\334\313;E\370\276\275\262F\321\273Vz\264\274\256\\\307\274\376\222\177;VM\005=tBg\275\337\200\200=\233km\274Y\005\266=\357\262}=\236\212\332=\006\301\334<\266\236\207\273\236\032s\274\022\375\025\275\225B\244<\000y\314\274\034\267\330<\033\021<<4\014\325<\\a\257<\254\034\n=\273\203\243\274X\331\230\274\202?\004\274|\211\227\274\361i\010<\333D\007\275\237\267R\275.\005\330<\266\340\320=\363 .\275\344Nm\275\2016\240\274\252\305\251<:\302\235\275\277@\233=\'\016\327\274\225\223\346\274Q\255\221\273\326\347l=Ei\002\272\257\242\t=k\202\255=\264\234\216<4\274\270\271\"\310,\275\243\2571<$<\004=\253\374\304<\253zr\275\'\002q<\3242g=\312\363t=$\023\331<\246:\t\275\345\271\204< \021\362:\024_\300<[\250\203<\r\213/\275j\035i\275\347*\255=BUV\275\211\262\341\273P\200\205\274\240\277\316=\017\0174\275\006\307\346<.\033\214<\226m\201<\367\036V=\224J\373\274B\277W\273\357)\230\274ol\336<trL\275\027\340\022\275\205\303\203\275#&\t\275d\252\221<\325`\207=)\277\025=Z.V=F=j=\354\375H\275+\342#\274\360\230\032\275\000\322z\275\003\032@\275v;\304=\367\201\266<\264`\"\275\350%7:Z ;\275\335\231\t=\355\276-=\024p\266<\277|\330\274.\353\025\275\200\304@<\352\007\214;E\014\260\275\255y\336\272(\340\362\274\2240\004\275eVd83i\300\274\272gE<\"m\360\274\r<G\275\327yH\275\025\024<=8\234s\273\227\255a=\225o\r\275\215\343L\274\223\335}=\335\364-=L\\\376\273\003\367P=\365\257\020\275\202\264\203\273\263\204Q\274\230\n==g\342\312:E\277\302\275\036\034\363<\330\235\223\274P~\363\274sP\222=\025\365\356\274\372aK\275\313\014\265\274) \230\275\201\224>\275`\211S=\367\263w\275)e\216<\346}\303\274\234\361\t=\234\352.=\304h\3639\255\323\263=,0]=\305\301\350<n\005+\274\\\356\023\275\264\324\370=OR\242;L\322\375\274\277\016\210<\366\210m<\264u*\274\276\010\211=\301\372\272\274\034\375\236<K\302\341\274\351\252?\275\327\326\302\272\210Dj\274V,\014<\227\315\'=\3507\027=7\300\'\275\326\374\033=\210IS<\246\310\006=\2000q\275\266Z*\273\305\300\365\275\300\202\217<I\271\250\274\222\033b=F\0306\275F.\204\275\245\234\016=W}4\275U\"\206\275t\267\t<\361\303\337\274\215\364K\275\327\006\240\275\206\277\313\275o\215(\274\241z\346<l\210x<\257\355-<\330 -\274&\022\010\275A\225\0209\245\r\304<\347\001h\274\236\\\325\275\005\020+\275\340\350}\275\311\006\213\273e\366\372<\001\227\247<X_\234\275i\314\252<\363\236\303\275\332\252\305\274\212\270\024\275\262j\247\274\205\224 =M\345\367\274B(\322\273\314\352\t\275x\341c\274\0064k=:!\314<\375\262.=\337\334K=Q;\276=\204{\001=\224\325A\275\017\373\247\275\233\356\247<.\000\004\274XE\216\273\025\177\247<\243\007\236\275i\177\200\275K\237\330\274\300\220{\275\323\302i=\200T\253;\247\310)<\236&\025\275\023\356\243\275\230c\244<x):=G!q\274\272\330\254<\241\306y==\365(\275\017z\356\274Vf\002\275\232d\300;{}\024=\314U-\274\222\250K\275)h\r\275s\024\376<\005$9\274\356(\346\274O\341o\275\324k\014\275\022\242\374\274\273ss\275e8\212\274\241\307\321\274\354\334\342<y\306\214<\3456\310\275\251&(=S}\217;3G\350<D\260\220\274\244\331g\274\234\323g\274\215\224\247\275\036\3203\274\304\263\250=i\233\316\275\302C\025=\377V\233=f\022\022=\036|_\275p\3535\273\277\205\337\274\346\265\247<uL\337=\273\302\356\274-XG\275\200\254.<\024W\335=\366\267\021\275\321bo={\302M\275\373\\\213=t\331\276<\000\201\311;\327\327\376<\211d\'\275\377\312\263<rJ#:\223t,\275\034\350\021\274\212\255\261\274\312\214B<\'%\214<\021\213\363<\241\255o\273\014\254&\275\0229\346<\373lG=@\217\221<\220^@\274f\024\361=Qll\274\356\005\n<\273&\223<\216_\275\274\235?\206<W\273U<\\M\255=\035z\201\273b\227\"\275\320\323\252\275>\022\230=\273\325\r\275\204\t\314<\023\022\227\273f\377\244=|\361\303\274)\367\241\275Pf\255<\311\030\204<c\203\312=o!\372<\202%G\274\323\001\024\274\215\2418=S+a=\326\001\241<\321\344v=\007\2659\275\263\260\251<\016\023\353<z\353\"\275\276\375w=\365\372\025\274\030\356\033<.\375D=\203\037\212=\220U\t\275\r\\\215\275\006(\002\275\371,\244=s5\226\275=a!\275\243\264\322<\310\323\310\275\273\204\216\274\3006\211<\350\254\322\272\301)\002\275_?\"\275eu\300\274C\003p\274\000\343\234\274\337\257\032\274\266\235\301<\314>\233<\255\345\277\2749\302\212=\350O\231<\204\220U=;\254_<I\342\352<7\370\224=\207\311\212=\203lT=\375\202(=}P\024=n\0175<*\032:\275\316\251\000\275\002;\260<(\tS=\250S\265<B|.\275\370\2116\275\034\325\032<\332\227i=.\205\301;\326\300\257<\257\373\004\275\270\324\325<\001\260#\274\371\314#=V\202\177=h\025\324\274\230\330\027\272\006o\226<\305\243X\275?z\016\275\034\221\364;A\345\001\275\331\346\262\273%,\202=\372C8\2755\325\025\275\r\337h\275\265\000I\275U\303\004\275\'\273J=g\016\203=\343\037\032\275G\377\364<;\025\007=\277\033\250=\306J\003\275\341\014\256<$d\354\273&<\"=\237\344V\275\001p\343<\220\335\013= M\355\274\277\240\t\273\t\212\242<\022\254\200\275;\0051=h\030m\274\325\267\237\275M\032j\275\202\3442=\323\360{=\250\273\236<B\260\027=\346JJ\275g\274\270\275\257u\256<a\250\223;\2237\221\274\313\025\236<\261Bv=\211\003v\274Pk>\275\313\244\000\275\275\271?=:$Q\274%\241\026=V\252L=\265\226e\275\004\226(=!\010\031\274\307\024\302\273Er\216\275)\353]\274\205\221B9+\030S\275\264\014\r=\356\231g\275M\017\242=\346\271\261\274/N\361\274\024\276\300\274s)N\275\363e\255\274\367,\300<\267C\234\275\344\ru;\237\254\275\272\311L\240=\277\252\300\273(Ld=6H2\271\275^6\275\024\257r\274\002Q\000=\336L_<\342\256\344\273>[b:\204\310\004\273B\256\202\275\213[\210\273~\212\252=ml\256\274\344\337[<\225\177\247<wy)\275\253\217Y\275W0\263=\361\355\267<\333!\245\274\252R\002=\242\006\217\274\356&*\275\366Q\212=\246\310\232<O\341\251<5\230$\275\314*q\275\361V\036=\274\177\327;k\001\324=\017b\214\274+\343\230\275\341b\005\275\270\177\350=\271\215~\274\264p\271\273\240\341\334\2755\267\272<\252.\315\274\005\215\005\274Xk\373\274\300\212X<\277\027\246=\002\025\320\275\265z[\275\323!L\275\233\004\t<2/\344<\020u\340\273\270gT\275\177\306\025\273I\206\220:m\214\357\274\300]W\274E\377%=\222\303\t\275\364\374?\275\224\037!<v\371\334=\317\t\377<\236\005\207\273;\276\266=\254\210\235=\367\266\220<\367\211\300<\222\2063=\"\210\322<\344\341\227\274\366\024\272<\236\315\027=\337k\347: Di<\334H\317\274\260\037#<\302\017d\275\232\023g=I\256\247\274\334\255v\275\210\247\352\274\304!\223\275\304\337\300\273\331~\013\276pY\034=\373+\201\272\300\252\311\275\312\224\200<B\344\373\273!d9<\220\371c;\031\203G\275\232\247\203\274\323\001\014=\032\362\020\275\207\247\253\274O\215\233<\244(\200\275d3\034=\032\266\353=\276\016n=1!\030\273\334\201`\274tA\335\274\352\244\001\275\224p\n=\211c\2748\363\000s\274\371\032i\275\177]\216=\305A\322\273\310\300\034\275\357\240}=T\330q=s\324\243<\373\311\n<\3721\341<b\302\341;j\337j<\314\327\370<\200\302\235=\273}&=\224\003\202<\244m\304\274\\E\235<M\311\241=\002j:\274z\230\031\275+(\037=\335\313n=\013\320\356\274\300-\255=l>\363;\3172\027=\254\215k\273\242ez<\214v\234=\317)x<\321\262\336\274g\221\256<|J\210=\007\177\360=\357\230\205\275\035\t\325\275\257X]:R\3365=}\331#\274\264s\031=B\006\255<7\007#<\351p\351\274\372^7=S\201\242<\272\036\262\275\253\030v:\327\004\341\274\354\n\014<\322\331\322\271\301\265\306\274\202\315\205<a\342\276=\322J\034\275Fw\370<\245\252\020<\335\035\227\274\201\032\010\275vzi\273\255\302\327\274\235h\214\275L]\310\274\306<\204=P\271\207=\340\\\204<\310\006a\275\325\036\222=\233\207H\275/O\202<\205s,\274\366\200\221\275:qI;Y\326i<\375\341\216\275K}E\275\332\305\372<TN\026=\234=\023=\0207\235\274&\362v=\314t\022=}\027\210\275o\3507=.\344?=H:\010\275Ad\337<=\260\023\275\207\226\374\274x$\351\275Ptb\274\026d\307=qi\247=\327\300\350<\345\000N\274H\002\324<\267P\001\275{n0=<\277\322=\007\005j\274Jr\010\275\253\237\206=\353<\214<\273\245[\275\233t\300<\303yr<R\303,=3e\313\274U\206Y\274\024\226\037\274\255\200\026=\005\2579=%yY=\364\241F=\275s\r\275\245A\346\273\230\365\000\275z\272\201\275\264\223\243\2748\242A=0\017K=\315\330\271\274\277(\247=&\270\271=\262W!=\377\213.=\217\335\347<rn,\275\343\326\314<*\272\224\272Wl\207=H\240+=T\237\017=\335\025\203\275*1\240\274\316a\262\274_4\302=J\007s;\255\327=\274\023}`=\0246B\274\016{\244\275\212\320\306<[\366\002\275k\2526<\014\232\344\275\206#O\274\242\021\'=\342\366\243\275j\346\300\274\337\337\362\275>\016\320\274\007\332&\274UN\017=\233\025\362<IW\205<\370\034\030=\224\002@\275b\0313=F)?\274\272iR\275v\356\226<N\251\224<\326i\032=\322\032\017\275\244\375&=\002\216\366;UK\261;>\343\321\274Rg\034\275\033\035}=32\225=\025y\354<\213\006\021\274?U\017=\251\224\364\274\003@\203=Z\224#\273\261\373 <\371\240\212\275\\\n\214<jjp\275P\276\327=\331\034\361<c\216\344\274\033\336\357<\377\000D\273\373_p\2730&\244=\025\376\302\274Y\221\247<7\346\204=\363\324\230\2746\2049\274\365\270V<W\222>=CD9<\023Iq\274\007\374Q\275\025)\317\274\r\177\262<\2042\\<\204$\257=Z\350R<\215 \224<?\207\255<\363\'*\275\032\364\227=\314\322\243\274\357\321\254<(.\340=\0170b\275\021$\352=w\216\231\273t\244\376<\363j\234=\232e\202\275\261\253\227;\231\360{;\007\310\312<6;\335;\234\311\001<\025\251\314=\t\216\237;\365\341\023=\341J\273\273?\367\305\274\020\314i=e\245<;uM\250:\352f\347\274\"\371\005;YD\312<N\001\253\273+\374\016\273\252\321\000=\362\354\032\275\020$\305\274O\001\033=\351C\022=S;\300\273q\300\002\275|\005\013=\353q#:\364\330\000<\250\254\035\274IU\254<[\001/;\214{\344<#M\203\274\310\r4=\277A\237;ts\032\275\300\202\367<JpV\275\275C+\275\340\np\274\324\016\037<\376\244X\275yKH\275\224O0=\013\305\204<\364\267\310\273\216n]=}cn\273%\231v\275p\334\362\274f\300\022\274?\341,<0\312*<\267\330\225\272\345\221\241=\203\206W\274\240\017\373\274m$\250\275dJ\335\275\347\3174\271\177\324\230=\276/\256:H+:\273Y\036\003<\205\263,<\352\354\201\274\331\354\240\2757\247\023\273a\322\254<yo?=\273\360\017\275\036!\222<{\226D<#\242\246=\301\327\222<\3270\026\273\207\004\002\275\352\\T=\307\232\253\273z\331\237;\302).=\023\303V=Y\270\326<k\030\202\274\365*\250\274\237\310\240=\264P\337<\215\236\272<_\254}9\236\035\326<\3744A<\026\005\213;f\341\260<\364X\354<\354N\200;E\253\331<J\350\017=\331Y\232=\316&\224\274\355\210\006:\3454\225<\276\237\353\274\220\363\222\274U\200I=\235\370{=n\225:\275+\321\002\274\030F\"\275\003\227\272<\344N^\2742_\202;\320\035\310\274\004\n6;\002\224\261=\"\340:=\254uQ=\013\n0\274f\363\351\274TPL=\324]5=\311&\360<\227\341\024\275\220B8\275\227\251\356\273\003\237v\274\322\247\267=\243\212\321\275x\214L=\366\314\n9\216\207\014\275\260\355\027=\353\276\301\274_\021\217=\205\347\342<nQ\346;\375\004X<o\222\276\274\211\341!=~\270S\275\206D\037\275\246r\254;\332\333O=\265\262\'\274mJ\013=r\245\243;\025q\265\274\377\232\352;\335\265\'\275\232\373\240<\023\344\226\275\372\317#<E\214\246\2751\230\013=@D>\275\365\342\350\274\205U\r=\025e\201=\016\246\267\2758\263\257\275\246\017\232;\302\321\244<\322s\312= \351\260\273R5\310=\334\325\300\274P\207\314\274\263\312\230=f\2351=8j\200\275\260\234\021<b\302d\2746\333?<\214\231{\274\032\364h<|v\022=\335\314\000=y\307\006=\310\233j=\207\034\261\274\014 A=N\372\010=%e\235=\364,H=~=\n<\274\324\262<6\363\320=\373\226\212<x2\214<\247X\244=\000\200+=\325M\017\275\310}`=\200\245\262=3\241W\272\357wY\275\207\001O\275V\010\307=\226*\364<\234jW\275z\014\013=\325&\217\274\201V!\275ud\003\275\233\037\313;\340~\224\274K\254A=Q\251\025\274a\237F\273\326|\221=\t1\207=\3358\212\275\372\321\021\275\016mQ;K\233\265\275~\250\237<\037\205v;p\367\242\274\036\264\273<\301q\361<\366\327[\275\371w\025=I`\376\275{\222\022\275\\\216\315;\233\313\223\275=lZ\273\237Zg=G\272\376<\033\2400\273\352\215\334\274\224$O\274-\214\217\274\336n(\275\201#5\275\r\215\236=\000\005\343\275,=\304<\354\200\373\274\371\204\211\274\302\031\235\274\371\034]=\271\267N\274\021\227\334\274xIF\275\302\371*\275M\3725\273B%\311\274\214\277.\275\301\326\363:\036\337t<\243e\205<{\244\313<\373\311\264:j\231_\275\230\227\037\275\217\023\226\272M8\010\275\233\275l\274\303I\327\274\027`S\274\2241p=\370\233\204\275B\377\320<\004\030y:\371\2126<\225\330n<\037\000\372=sF8\275\316\'\244\275\252M\\=\242v)=\267\3439\274#\2145\274\3503\376<\336e\346\274<\031\210\275m\316\365\273\266\206#\275\377C\334\274\226\234\036<\366a\254;\346\236\360\274\342z\264<C\250\225<Hm\231\275\313\341@=\016j\013=\203](=Q6\227;\325\222\026<\t\267\372\274\207b\235\274\3033\203\275\025).<\031|p\274VP\237\273~\330\212=\314\226\300\275\212n\252<I\224\315\274|4\021\274\021\005\021\275\370\013_\275\252T\245\274A\212\257=w|,\275\006\272Y\273\243\230R=\005\302\211=\316\035\334<U\316\021:\345\215$\274\330K\r=\315DJ\275\002\305\001=\'\010a<J\225\234<\205\203T=\006IJ\274\306\326\264=\344\302\323;\377E\261\2759\306\305\273\374g\031\273\363\301\034\274\352\036v\275\374m\232\275\237\264\214<A!\200<\200\250\203\272\273\253\010\275\347\2030\275\226R\370<\375\'\214;\002k\341\273N^\274<\356 \272;\234Cc\2742M\021=0}\275=\220g\033\274Y_\333\274h\342\326;o=\353\274\262)\237\274\344_\310\275\n$/\2740\225\232\272<\005\035\275\371(\317<I/\217<q\206\017\275\315\006\325\275\370\347O\275S\030\030=\277\215\312\274\353\310\177\2741\354P=\235U.=\342\213\003\275M[\264<=\254\201<^#s=\312\035\361\274T\022m\273c\037\330\274\236\307\255\270(\364\220<\t\257\024\275gu;<O\363\372;\351B?=\254\267A\275\310\\r<t?\376<x\350}\275\317\215\276\2742S\271\274P\357\035\274\3206\350\275\233x\014>/\352T=\272\347\207=i\231\024\275\033\253\231\274\214\262\304\272\2727O=\325q\022\274~\177Y=\262\000R=\372\033\230<6\360\206\274G\205C\275\315\371%=\033\024\014\275\321\235Z\275\315\357M\275w\225X<i\035\362<\361\021C\275Sl\003=\027\263r=R\236(\275\276\302!=l\332\032= `\035=tz\326\273\344\037\342\274\264\336\2719\223\315\257<\013\2479\275\275}\031\275\230\326&\274N\2014=k\301\013\275\367I\336<\346 \300\275\344$\254\2748\233z\275J,i\275\244\261\371;^\255\317;\264l\205<\252_o\274\n\231\202\273\037\034\200=\215\365\030\274\323t\230<\247#&=/\336\237\273\353\370\256<*i\234=\214\\H<\327\320]\275\251\236\221=\243\357\n\275b?\271<1$\211\274~\253\033\272\243\273\312\273\371\305J\275\005\331-=\256{B\274\016\331\212\274\340\267k;\211\274\274\274\276\327\344<\2149\245\274\364ZX\274\323?\366=\227\365i\274G\350\006=J\177\017\275\275r3\274q\235j\274\364z*<\334eE\275+\310\032\275j\237\374\273\003M\313<\340\2724\275\036\264\371\274\271\225 <\325\001x<\365w3=\376\204\303:\323N\004=\274\272\202<T\373\225\275\377L\020\275\314\027\267=\252\261$\275\3765\311\274\337P\027=3/M\275dM\004=\207]\231\275JL\005=\n\3018\272\031\235\344\274\0360\232\275\313\r\274\273\324\263E\274\211~\'\275\264\242$\273U\271\222=Q\342\235\274\366\240\035<!K\212\274\241\216r=\277\230\2779Z\357\330;\302\031\306<\312\263\344\274- 1\275\010V\370<\222\020m\275{\226\002\275%\233\205\274\316au\274Q\007\212=\256\033\034=\246\t\372\274~\020\201\273\217\352\327;QZ\233\274\020 \260<\270\032%\275:\356\026\274O%_;xe\335\275\232\272}=FEd=\001,%9=\\\325<\311\375H=\033\210}\275<\013\023=Rp\222\274d#\242\274\000\227\232\274/\371+\275z\"\356<7\006\325\274\004v\214\274L\366s=i\251\016;\257\347\0009\025\274m=\224\2621\274:\222\265=\212\226_<\273\262\377\274tB\365\274\214\250\343=^\324\337<\340*\210=\213\270\324:(*N\275{\330\223\275\0079\336<2\010\234<\017\330\007>\031\031\336<\305\305\264<\022\266\377\274\000\260$=\346~\"=\n\270\200<\343\346A\275^\221\301=\374\276p\275\236\345\023\275#.\317\274\267\034X:\234|\370\2746\003\226\274I\035\006=;f\277\274\207-(=Rj\202=T\'\240\274X \010\275\367\256Y\274\222F\215=\261\3418<\r\202\240\274h\215\\\275}\224\207\273\022\312\364\275\365\325\271=\324\n\267\272\375\352\r=\335)\220<?\277q<j\020\303<?I\313\274 \354\251\274\247\031)=\301o\026\274\n\331\356\274\036\360\203<\225;V\274f\331\234\274\224\271\377\275\246\316\277\274\331F\254\274S\245\247<\0058\243\274d%\037\275\356\n\032=\317B\357<\013\345l\275\240\316\204\275T\005B=\371\206F\275\231K\212=\272\361\204<>\377\252\274\317\357b\274\371 {=\231\262\016\275g/l\275\361e\003\275\300\227\241\275\202\271\203=\241\004\200\275\354Rr\275\242\333H=\3436\013\275=\300\225<\210\017\256;4\177\010\275F\036\013<6\3360<o\ng<\005]\200\274\226[\203\273\031\271\016=\262&\'=\262$\000=W!\250=\234\301\327\274\267\371\263<\317\251\312\273\272v\312:\267h\002=#lk\2752\007\273=y\275\321=|\214l:\010\332\351</\036R=\347\376\273=\347~\245\273yF\336=eR\247=e\273*\274C}\005\275B\"a<\215\227\"=!\232\213<\222Y\265;\302\304\307\275\343\004\236=/:\023\274\226\375\343\274\234\374\334<:\215\241\274\233~\256<]\177,=_\306\210=K\0072=\232\004c=\"e\r\274\002\354\346\273{\001\027\2753\225B<\314\337u=\332\034\323;\0356[=/\001g<\300\205\031=G\355\004=\211\2665;\217\234\345\274\226\304\207<(\221\355\275\031O\375<\271\3039\275\353\270\206=\264\361m<\203\233\332=\337\261\202\275\317\3232\275L\214\323<\324(\267\274#\325\324\275\301f\212<\345|\203<\307f\025\273\323\321e\275\"\376\007=.)\037\274\355%o=\200\342\264\274;\312\002\274(\034I\275@\345\254\275N\210\226<\242\223o=\337\267J\274h\212\310<\327\277\374\273\362g\225\275\201\365\036\275\324\275x\274\230\352V\275*\014\304\273\356g\223\274~m\215<\017\375\352<D\225y=?:\317\275nQ\212\274\034\322\001\274b\353\203=\333\300\231\274\355\351\201=\374\331.\275e\335\224=|\364\246<\204y\006\273fCY\273\340\242Y=\336\253\037\275\003\2230\275\016\214\370:\354\225\235<h\277\'\275Tz\303=\356\217==\000\304\353\273\307kz\275\213\035{=5/\"\274\345=\243=hC\005=R\017\3049I\314\302=2\234;\275\276[\314\274\240\264\267\272$np\273\037\364\227=\311\213\027=\343\301\306\275!=L<\336\032\367\274\216\355#\274S\200l=d\363H\2744\000I<P\335\331\275\343eC=\245{\245\274=\265O\274l\361\321=\233\327\004\276\226}\025\275\022\331t\275C}H\275\n\344\016\275&\202\350\274\275W\351<`\336\325;\341u\232=\311s\245\274mx\330\274\001V\\\2737\234\226\274 (-=\006\245\322;D\035\021<_Z\236<\323\013\030<e\2336=\246<\267\273\027\0039<\216j\3438V\244\304<NZ\007\275^`N\275\305\323\353;pS\241;o\246\363\274Mk\232<]\341W\274H>\326<\335\365{\273\303>\003=d)x\274l\2557\274u\341\241\275\353\014\265\274\020\321i\274\023@9;d\3171=Y\n\255<R\200[\274\363:\322\271\231h=\274\203s\223\275\306\303\217=#\326\330\274\216F\212\273\204LA\274\226d\020<\207\377\256<|\277\003\274M\020\252\275P\372\316:\371\346\006=y\010\326\273\"\260\010\275i8\177=\304<\231=x\326\204\274\306_\264\273#O\004=X\000\020\275@\265\031\275\237\021[=e\016\036\275\307%2\275Tv!=\354\376J\275\376\305G\275#\366\375\274\375\334t\274\325\024<=7j\312\270-Cn:#\203\221\274\'#\211\275i>\262<\323\231t<_\'\212<\001\224\217<.\207\356;\233\260\024=\277\205+=\217\352\214\272\234*\276<S\212\356==\330u=r\225\225\274\'\213\035\275\350\371\002<\226:\201<w\026)\274\014z\010<\375o\263=p8\230<\226\261\204\274\021\020\216\275\255g\223=CB\343\273\023K\n<9F`\275E\244n\275\370\177[\275$\321I\274\220v\203\275\305\214_\275\\\217\024\275\373\213E<\307\201\020=%Js=\225nj\275\001\334\334\272\305\357l=\365j\351\274\363\350R=3\023e\274\272\325\376\274\271\335\026\275e\0230=\353\373\316<\t\005\236\273\037\251}=\301\024b\275v\276\227\274\n\202\341<\035R4=B$\344\275,%\220<\364\326\247<\2628\006<\312\354\207=\251!\001\275)\305_=\033\003z\275<\007\2178Kg%\274A\324\210\274\210H\323\274\256l\272<\355\326s\275D\230\353\274\372\227\321\274\206\231\023;|\251K=WX3=0\372\364;\247\016\251\273\003\r\271\272Y\225\233=\034\027t\274\027\226\271\274\303!\\\275s\367\026\275\315\353\353\273\270g\030\275\021\367\024\275\3477\203=k\023\274=\375\301w<\377\364\205:\261\210\361\274m\250j=\223\232H<\"\220\203\274\210\227Q<Sv\270<\"\034`\275\002\375P=\325z\310<\t\325\221\274~\221\207<\272i\311;lV\323\272c\204\027\275\235\215\324\2741\202\353<\261\317\230<\335\305\204\274Kp_<\267\021\201\275q\356\322=\250\365\271\274\341$\277;\334n\230=\217\362_=\365\360\n=\260\334\346\274\262<\363<P?\030\275\376ft\274\326X\321\274\177\005@=i\324b\274\324\352\211=\306\334\222\274\\n\361<\000\237/\273\305\271\371<g?\363\274gq\001=\327\345=\274g)\267<5\021\335\274g\203\266\275\236\206\242<\357\323\206\275\351\014O\274S4\314\274\243\372<<\344\025\247=\334\244\334<\022\032\302<a\310\016\275G@\233\272\317\344\274\275\010\224v\274\206bj\274\341_\014=\3229\340<\025\372\342=\275\241\235\274hl\264\273ez&\275\177\223\333<\245\376\227\275\325\177\205;Iu\231=\254\330\275={f@;\204\265\030\275.\275\203\275}\201\232<\316\3100\275\233\315\262<\260|\t=_\324\331:\312Y\337:3\235\211\274Y\036\262<\211\335\215\275\023\232\007=\r\315\330\275\2038\224\274`\341i\274\016i\"\275\344)\247\275\035\316#=\343\030\t\274\244*\240\273\234\246:\275\271\001\037=\352\233d<\247ZW;\010e6=\201\336.<}\320l=uM\224\275k*\000\276\nB\230=\202\332J\275e\252\216=\243\202j=c\325\345\273\311\374s;\370\322\355\274\017\273\024<4\340\203<\375wd\275b\217\351\275\347\3632=3\235_\274\370E\202\274\034\345\275\275\204J\232\275\230\020\250=M\234\231\274\314\364I\274\033\312\344\275\016^\346\274xf\025=\332g\214\273`7\334<\257c\302\274\336>\230=v[\024={|e\274\236\337\353;\006\267-\274\330\036l=\345\034-\274\025N\376\273o/\327<\240=\232=\177\244\225<\353f\010\275\242\r\303\274\236\035\343\274}\261\364<\342\376\257<\215\373\034<Nem\275A.\222\273\230\356\211\275\355\177\361\274\3754\340<t5\350\273\247%\';\323D\314<\206\214g\274\317\330c\275-O\211=\3200\216;\340D\224;4Q\026\274K\330\375\274n`\003\274\222xb=\262\257L=\356H\303\274\000\212(\275\006\215F\275\n\016\314<y\001\020\275\032\305\346\274\016\205q<\240zd<\275\341.<\350\353\t\275\300\001J\275y;{<\255\020\244\274\230\235`=\\\244\001\275\273\231\252<\200\021\351\274D=;=\273\016\215<\026\370l\275\032\004\316\275\357_A\275\304e\245=\273Z-=\330\333\333\273\370\014\360\272\237\356\212\275:\031\237\274+\202>;\270E)=E6\2749i\005\220\273\'\037n\274\275\256\214<F-\331\273\226}\000\2763\254\371\275\333\0226\275\220\023\026=k\315\265=p\222\265;?\202\265\274N\344M\275\234\267\266\27415V; &\331\274[\231\302<[P7=|E_\274\376\220\352=\2238\321<\310@\227=\274y\366<AD\272<Zr_\275\330\024\327\275\301\344C\275\361X\241\275\233\036\020\275ar\244\275\017\362\252\274\307\273\363:jp\277;<\244\214\274\213nG\274\205\367\351\274\260\376U\275\313:\021=\316\225\242<\253=\004\275\366(\274\275\320\222Z<\352\332L=\"\005\223<\371\220b\274S:\244:\204\232\240=^-\346;\2667%=\360\301\033=e\214\341<\203\034\347\274/\356\037\275\340~\234<\353^\236\274\363UD<\265\331\201\272\242\022\255=\037g\033\2759\"(<\271\005\262<\014/G<|\372%=8J4<\335\202\r=\232H\032<8\2204=\341\003\"<\270\312k\275\257?i=\250\265L<\226\322\205<\217\221\354<\020\227\300\275\177r\304\275\345\301Q:\362S\001\274FZ8<\"5\202<\260\377\';\020,\334\274e\335^=\374\341\304=p\017\310<nU\313:7m\276\274\027\270g\275\311\313\177\273\031\372\004\275:\006\355;\t\376\001<u\352\304\273\2626\353\275\203\273S=\314z\210\275b\263\325\274\232\335G\275\243\202\253\2748e\200\274I\244!=\267\277s\275\034\032U\275\332\377\001<<\350\272<\315\026\335\2759\223`;\022\200\\<\261~4\273J\267\270\274k\274\267<,\272(<\227\313\027=C\371_<\343\213\245=\252\333\361\272R\337\010=\364\\\302\273\317\250\253;\247\377\263<\367\362<=[\006\252<9\340T\271\253\036#=\316\356_\274\2717\272\275\361k\320\273\245\n\213\274n\021$:\366Z\324<\223\271\025<`\217\205\274\262\017\323\273\362\240\221<\177\205_=\246\326\'9M\227\346;p\356$\273\302P\r<\325\004\221=\030\307\211=\354(\007=\333*\220\274\255R\276<\362\345`;\357\205\265:\334@\225\275\375\"\254\275K^1;\336\366\237\274\373:V\273B\344\212<\253\335S\2734F\272\272j\2044;\305w\367<2fq<p\017\273\273\310\0211=^6l<\001\235\252\275\250\372\342;Q\330)\274j\215\253<I\331\337<\323\305E;\326)n:|\332\221\273\227Y\202\274\213\336p=\362\300*\274O\037S<\277\237\256\275\210\355\262<zM)=\\n \274PHj\274)b\225\275\007\332\363\274a\022\262\275\034\023\364<\306\365.\275\2665\346\274\247\r\374\273\327\005k\275\205&\320\272JM\336\275\365\231\016\275N\257\317\274xX\252\274&WC=\027\t\266<\275\377[\275\035M\002\275\312\n\204=|\327w;\375\263;\275\223\330g\275\310\016J=g\252\'=Oe\217\275z<\234<\247,\177\274\031d\242;=q3=&C\366<\347\211\021=\274\330Y\275\nd\242=\260\257\201=\374\324\344\2743\303\233\275R\266H\275\264E\340<\311\341\216\275\230,\347<\301!\255\274)\030\034\274\337\372\232=f\275\222\274\025\252e\274\366\360\001=\346\356=;\207\204I\275aU\236\274\253Z\227<\374=\225<\364Z\010\275\300\022+\274\344\010o;\270\2746\27524!\273)\022\346=v \033\275!\3205\2755\263\375;\244\247\363<\202\331\034\275\265pY\275\030\303\020\273J\350\241\274\214\374\274<\023/~\275\237\023\350<\237~\033<\262O\027=X\266x\274\026\330\265\275\214\362\266\275\372\n\221\273\271A\251\274#\367\357\274\3515\251\274k\010\266\274\245\303N\275\364z\016\275\221v\204<\364\365g=s\217\245\275\361h\213\275\260\315>=\300T\r\275\250Y\221=@\207\203\275\002kk\275}5\350<\016\352{=}\347U\275*\333\314\275G}\205\274#\304C=\003\256\201\275\326\216\201<d\205\235=j\323i=\241/\020\274jp\225<\0207l;vg\326\274\"H;\275\242\230\032\275\255:\337:\206e\021=gk\037=0\332V<\376\246\306\274\347\237\317\274\332\226\270<\361\311a\275[\2417=\027\027#=la\234=n\007\314;\264\0171<8J?\275\342g\007\275\241\206\030<G\327\332\274\t\233\227<gn\246=\003\305\315<\356~D\274\300\'\"\274\331e^<\3469\211\275\372&t\275\301r\307</\0047\275\277V/\275\337=\377=7\233!\275|3Y\274n\000|=8\235!=T\017\232\274R\267k\274a\270\217\275\265O\017\275xG\263<S\272\007\274\377-L\274\2100?\274D\002\273\273\\(L\275\364\365^\275Tw\241\275\005j\017\275\266\317\327\274 \372T\275D\335R\275\300\272b\274f\337B<\311- \275p\026\003\275U\210\251=\235\006\200\274\210\307p\275\274\265\004\276\345I\244:E\224\224\275\355|G=Y\331\276<\374\330i\275\310\255d<]7 \275\255\261\211=;\2545\2746Wk\275\220I\274\275\371\335o=\327~\262=u\023o=\2334\260\274\217N\246\274\376\014$\275\307\214\232\274\220\\\277\275\230\337\010=\337\222\177\274;\372w<\031\035\353:\371]\010\274\253X\321=\352\252\342;\300cZ=\266\034\241<\202U\316\274\212\022)=Zh\252\275\013\226\310\274\225\222\304\273F\213E<\315\201\n=\255\351!=-\231N\274Ff\375<\007\242C=\243]\220\273\242\024\230<XZ\265\275\031\375\207<\221\243\207\273/\003R; \327\001>b\033\244\274\276\261\365\274\023\375\201=i\206\226<\243\333\357=\321\0237\275N\316x\274\356\214/=n/\347<3\365w\275)B\203<\256\352\370\274\020\237\310<~R\'\275\0247\250<S\031t\274%\301r\274\262\224\013\274\027\246\241<p\t\022=\344\374e\275\367q0<8Y\312\2737\355\035\275z$*=(\344\256<g\273\304<\266\003\007\274\350\"\177\274\035\255\002=Z\367\033<\321\323\257=\263>F;\024\224\272\274\233\344;\275\324\335l=\253{\263\2758\324\267<\"\332\306\271~\274\260\274\274\313Z=\220@\333\273w\335\264;\206\027\341;\260_\326\275\304\270\256<-\254\225\273\335\261\027\274\244dW=\300<?\275\263\363c\275\030\364\274=\372\222\352\2749hc\275\215\203\027=\351\305$\275\033\t\203=\265\207\000\275\2216\031=\256\222\002\276\274\017\367\274)\235\005\275\346-K\273\237l\231=E\264y\274\350\3770\273\246\272k\274\030p|=\370\251\337<#\204\211\273\374\221\310;\252\275@=\372\242)=\260\266\227\275\304\370\020=\001\203\272<0}E\275\362\005J\275\377\357\243\275\337\273\034=\t\302\271\274\177\263\227=\310\021\002\275\305\313c<\347\ns\275\024\207\327\2720\241\374\274~\320\206<?v|\272\237\364h\275\2356C=\274\3449;\266\025\013=\002\323\271\274\225\210\202=\243\340\277\275\363\215\226<\342\004?\275\241\312)\275\351A\326<\256+f\275\035\232R\275X\036\250\274\000\014\227<\251\314\365\274\023\344\255=\270&\035;\260\222\233\275)\343\214<\370\300\315<\307\270T\275\026\267S;\037\217\351<(\353\300;(\203\341\275\323\3660\275X\\\260=\025\034\r\275!\343\306<\201J\245\275\347\306\036\274kW\244=w\370\024;\206\353\330\273]\267\"=\265\257\264<SL\333<\006v\306\273\206B\371<9\241\246\274\340iZ=\013y\233<\325\213\330<y\2761;\335\340g\275\263\0259=\342*\225<\341\036\261\274\205(\266\274v@\016<|\266 =([\214\275-\025X\275\234H\355\274\344\220\255\273\366\215M\275\261z/=b{\251\273%x\220\275\004\253r\275O__\2749=\031\275\351R\337;\022\234u=L\352\334\274`r0=^f`=\213\261}=8\200\374\274\005\342O=;\032\236<X\021;<@F\276=S\265s\275\233\224\212\274Z\220\036=\243\013(=3\304d<Z\311\306\271\340\232~=\013\364\243=\3135\227<\353.\347\2743+U\274\355)\221\274s\324]\275\321v\301<\013\270\037<\255 \301;1\267\233\273\365\246\305\275\277\226X\2751[\224;\212z\341<\323\222\217<`\214\031\275F/B<{_\035=\002U\017=g\337I=M\264\376<\266\304\277=\1771\250\274\306\217\027<\226\n\312\275o!1<\201W\\\274\201,8\275\330\017\361\274\370IY\27364G\275\321(z=-j\000\274\250\010\030<\225\326\303\2757\220y\275H\257\207:K\036\244\274h$\t\275l\225\202\273R\351\205<\214\331-\275\313\335O=\343\020\027<@\356:<\356\236\025\275\376\227(=\221\013\310<\3375\224=;8\322<\272\220\255\274\265\212\3209\264!\350<\313\r_\275\213\202\245\275\t\254@=|(a\274,\241r\275r&\354=S-8=\034\352\362;-\025\251\2754\224\376;\272\000\231\275\346]\345\273\275\331H\274\206\242\005\275\002\367\007\275#\027\311\274YI\027<\270\2118=\324<\201\273\336qw\274$\037\001<+\205\303\275f\256h:\207\025\326\273\303\312\30798S\322<5W\275\274\177\\\200\275\t\203\014=UT6<\235\3231\275\276\212\235<@#\312;\377*<=\2011\323\274\351\375\336<i\225i\273\306Z\344<\315\363\023=,\362Z<\377\r\026\275\351C0\275\032G\211\274.\3504\275\rJ1\274\222CO=}4\031\275\274\223\316\274\367u\245;\226\\\370<\225W\033<\036\035\027\275\200\355r=3\362h\274\363\'f\274\246\271\201\275!\365<<Z48=\004\342\350<\336\204\366\273@\270\001=\3214\230<\365[\200=\316\325\014=\267?\335\273\311WT=3](:V\300\305\275Go\355\275\374\310\024<x\2511\274\005\212\001\275\224$#\275/\r\336;\221\356\204\274\215{\033=\021\213\211\274\247e\366\273\"\335\277<y\244\271\274\275Z\262<*\316%<C\253\326\273\202\372\020;N/\311\274\225\325\253\274\3625\207=\373\030\014<<>\210=\326:\324\275\361\013\224\275>\022Y<\0232@\273\320\242@<\371\013n<\014v{<$k%\274\3428A=/\325\033\275\322Kv\275\350F\357\274_\260\010\275\311;\364\274e\344-=\342\023\007\275QG==\242\321\253=\264\236\232\275\306h\024=\203\032\311<1\337i\275+\333R\275\233U\036=j9\222\272\010t\217<\234\254\031<~b\310\275]\256\377<b\356R\275\352u}\2743\322\324<*f\271\274\347\n\277\274\021RA=m\3720\274\220\036\204\275xL\370<\334\272\315<j\034\350<\300\n\022\274\243]\253<c\005==+\341\214<\025\035_\275\"\025\013\275\004\342\353<R\375\302:al\244;\256\274\371\274\017\244\325\274A\360\257\273\032\237g=\233\272\222\275\245Z\351<\017\225\032\275\3622\200=\233\017\330\273\337FL=q\205\250<\236}\344=W\204+\2758\246\024\275;\341\317\274`\270\310<e\340\014\275X\335\302=\254Sk=I%\030=\276\034\027\275>Q\r\275D\361<<\217E$\273.D\244<\277Qk\274\231 D=nt\376\273m\276\343\274[\360\317<\027?\361<\'\252[\275g\250\017=8\217\316<\365\252;=\276<*\275\267\021\032<N\252\237\273\263\312g=\361A\371;-B\317=\212\267\005=\340\301i\274\2231\303=\225=\034\275CO\n=\375\301-=Ww7:\253,\323<\320\335\001\275\234\245\267=\250\032\276<lN\265=\302\240\021\273\234U\032\275\277E*9\nd\217=\351\362\270<\224X\304\274\377\004\317\273\031\315\323\274\0043\237=\364\261\352\274\202\031\277=BDl=\031zb\275.}\206=\020\r\277;\335f\266\274[\255\013\274\2574\264<\327\252\306\274ii}\275G\375\273\273\035H$<y\177\215=\274~\356\274\242\251\255<\342T\270\275\251b/\275\257#\260<\3142%\273gM\345\274\212\330\226=\241\003\216<j\353C=\350\022y=\207L\201;\237\025\260\275\276\224\201=O\3358=\r\010U\275\312\265\315\273\316\366\232<\245\245P\2748\343\300=-~\036<Z\r\345<\201\272\230\275\220\315\307\275m\200G<\235\360\365\274!\206X\275#\202\247<|\004\217=\'\2702\273B\2068\275~V\234=\267\350\227\272.\337\2209\006G\241\275\320\274\265\274fC\204<\307\266\226\274\306\026\322:\t\226\256=1\277\200;y=K=\"\377\006<\031XP<\222\247\332<A$\312;\006\264\265;\232j\227\274\367R\306<\364\326\210\275U\363\362;\001\023\327\274A\221\213\274\361O\252=Alu=\261b\273\274\354\3422\275\313\023\013\276HN\033<\020A\347<\377\301\n=G\002\003>\212\253\200=\201\250\031\2743\303\272\2712\232\301:{\003\266;\224,\013\275E=\032=.\004\257;B\251\356<\350\260!;n%\r=G\320\234<\254\313p=W\223 \275\354@\373\2749\235@<.\0207<\'\210p\274\220,Y=\005\021\260;\364g\221<\326\362\300\274\237\316y=\366\227\307<B\356\2009yw+;\201\377\252=\014~];9y\213\274{}Z=\223\3744\275\002\216\364<A\377\r\276\276D\020<\301w]\274\010\241\262\272\2459\t= \311\301\273\303Bz\275\302\320\265\273\260E2<\241\304A\275\027\250P<.o#=\367\010\230\274\261W\200\274D\337\374\274\241\243\312\274\361+\222:\207\245B=\310\370\353<\260\026\244=\347\200\246;\222s\255=\331vR\275\352\223\230\275I\355\232<@\266C\275\253\2527=\217\377\262\274\025\346\266\275\360\375\243=v.!=\377\245\335\274\220\227\221<vM\211;hZ2\274Ii5\273\004K7<\263\017\371\2742\037\262=&\211\000\274CG\262<1\026\005\275x\000\271\275\261\376[<\200\311>\274\273b-=>k\310\274\004\034\031\275M\356\005=\275\033>=#\370\315<\363A5;\210mb\275i\352n=,Z\203\274\276\357\204=\335\035\337<Oq\234<Cw\207\275~L\260<_\271\000=\231\025D=\021\264N=\0061\003=r\tY= m9<\224\377^=\\\306\201\274W\2347=Y\250g=\370\213\331=g\305\210\275><\245\273\r\213|\275\224\263\201\273zk8<\332|+=\210mv;\005/ \275\227\220\030=\241{~=\373\257:=\037]\222\273V)\\\274\307:\210\274es/=\252\3328=\266\305\036\275\317\334D=\311\253\334\274\226\316\037=N5\n;\331\331}\274\271g\230<\r\314\264<\247{Q=u\227]\275\340\306\211=r\267\261\275\233\256,<O\220\265;\021}\2169\007%\237\274_\316\247\274\242\014\212\274mb}\275L\031;\275?Lt\275\3676\004<\313\341\264=\315^\2059\\\240\300\275T\227\240\274c\2235<\350\276(<\342\361\202=}\345\'\274\371I\344<\220>\221\275 d\252=\027\271^=\034\274\210\274\022\307\023\274\355\265_\274\270X\261\274\364\244\311\273P}\223\274\027h\305\273\314#,=\261.\204=8\303m=\312q\363=@\'\241=1\013\243\274\367\r\314\274s\235\265<\241\200S\275\314Z\000=\233\030\362=\341;:\275\320*\354\274A\370$\275\023\002;=x\001\377\274ke\363=\037&$\274\322\237\341;\022\373\367<1;\206\275\365\006\336\274\241k\014\275\310\255(=7\001\202=@\274\240\273~\320\310<qf\236\275\312z8<#\361\270<\207\323I<W\372]<\253\315\240<\210\313\215=\013\014\246<h\320w=\243w\007<\273\223J=\0372\211=\202\222\240;O\311_\272\343\034g\275{\346q:P\004\263<a\014\330\273\246\027p\275q\235I=\270\254a\275\201\223\366<\263\350~\274\002=\n=\241\t\317\273\245\013\337=\355\211%=\337b\336\274r\026\340<\373\007\032\274\2404(<\025Y\006\274\336H\216=;\224\003=\2405>\275\352\315\001<\232\201\324\274\226\325\002\271A\264\330<\344\177\360\274\204N$\275\340\217=\275\0326\311<\352\312J\275\3377\210<\266\356\336<\004\355I\272\331\265\300\275\367\022\243\275\360\026p;)\215x=\"\332\320<t\262$\275\276\347\214\274_\257\375\274\t\344\322;O\251u;\347\211\227\275\001\374\220;Ot\265\274R\310\250=\005B\323<\"\221D\275/\223[\275\n\217;<S\211\033=\345\231;\275\300n\"=r\217X=\234>\215\275\022s\256\274.\"b\275\242\327\250<\300\332\214\274 \322\r=c/\021\275\346\036/\274\322\013\216\274\301\315\347\274\373\217o<^o:\274\013\333\204\274\257a\255=\226G\340\274\241]|;\025\0248=\342\223\002\275\004\026b<9CX\275\307\357\332;8\343*=\352\312\314\274\367\367\000<\\\032\230\274o\277\271\273\272TV==\275\t=\354\334!<\021\374\225\274X\337\303<\364T\223=\273?\004>.]\211;[\237!=\252\270g\274\372\205\246=\352t\241\275\022%\326=\361?w\275\207\321\035\273\031F\013\274r~\032\275=Bs\274iJK=\363\372\212\274\202$\335\274<z9\273\177j\351\274&\317\333<\203\262\354\275\340]|<\006\032\244=l\262\316\275\264)\010<\316\367y\274\314F\364<p\212\300=\235\366\025\275i\317K\275z2A\275\371\276\226\271\266\213j<\\[W;\371|A\272\254\360\354</\024\022=f\036-\274\243\275O\275\022\263u=\257\'\363\272g\362\244;\300I\020\275\001\232\021\275\241\356\344<^\374\232\274k\265\006\275\"\205\037;\027\235\242\274\010\236(=\343|\000<ycm:\'\\+<\225\017\324<\005m\357=\225\034{<\326\353y=\2647\213\275\247\210\337<l(>=\360\267+=72%\274\001\224\324;\327\007\306<\371\351\331\274\032_\352\273\345\332\250=\004\237\270\274\342\346\266\273\007\344\276<\270\356M<\327\016\254\274\335\223\024\275T\213p\275]\214\013=9\005\262<\253\322\266<\363\253e=\034\007P<z\343`<,[E<E\213\267<\273\252\217<g&`\274[j9\275\356>\345\274:\354e\274\'6\003\276\221\325\220\2737\212\244\275w.\027<\250\031\343\274\363\204\236\275\362f\272\271K\370\016\275<\375\035<\276\374\235\275Y\212\253<\r\302 \275b\037.\275\273L=\275\311i\210<O\377\374;5\342A<\r \036\274c\356\357\274c\222}\275\016\307\243\274k\010,<\332\025\376<\013\027B\2751\236\242\275&\234\331\274\001]\t\272\342\333_<\260\335\021\275\205\202\005;x\253\373\273\323\r\002\275\r\013l<\302\003<=5\177\215;\035\220*\275Q~\241\274l\266\002\275S\277\216\270\376\240\020\275\332Rx\274\363\307\252\275\342\274\032<V\377\214\275\313!\224<\320\365\034=T\207\223=\036\343c=\315/\262=\311|,=\330\253\t\274O\307\276\273\276\342r<\237\001h\274rG*\274#\237u<\2426d\275\242\001\005=\373.\232\272^\227J=8t \274\300\344\214\275\320F\000=2\035+=\316Yc\275[\037\373\274.\255\350\274e&\333<\344\272\022\274qJ}=\370\234\257<\"\032D=\0353&\274\336\2205\275\032\273\200=\010\026\321<$-\007\275\321\205\271\274?\3134\275\274\300\236\274\332\374\013=1\004\035=H\025\327<;U\340\274S\317d\275E\247+\275\207|\203=6\265\204=\337M\307\274\304}\253<h\212\376<\253of\2734\2257=\226\357\000=5\237L\275\020\262\010\276j%\230\275\347\271>=a&`<i\213\017\275^\364d<\337\311v<~\300\327\273\'\300\024\275P\233\363\274\276\206\237\273\3618-=a\227$=\303[\r=>\240\303\274\337\314-=\310\355\346\275.M\214\275\355\\\005<\301\021\037=\251\340/\274\356<\216\273\320-2=\333rU=\365G\\<\321\225k\275\246\207!\274A\004\240\274\034\324U=TV\023\274\201\236m<}\230/=\231\216\014\273\327\230\226;\322\263==\334( \274@\213\354<\227\263\032\274\2331\003\275\246\274I\275~F\277;\247c\260\273\200\3648\275\327\300M\275\367\205\225\275\374!\347\275!\2459=\253}\243\274Mw\320=Sm\271;\345\323==\304\305\310<G0\340<-\256,\275\320<\301<\212\2679=2M@<\220\252\354\275\325\022\n=f_\206=O\206]\274\233\321\213\275\317\017\001\275%\365\250\275\230\337\330\275\205ai\275w\006\372<\253\254Z\2747\205\362\274\321\206\351\272\023_\035\275\3524\177=\302\267\355\274\232\257\317=\227`\227<\321\244\037=\201\247:\275\274\264N\274\324\377\306\274F;$\275\273\\&\275$\337E=\334\004q;f(U<\323\221\307:\351\374\"\275\213\031&\274\334c]=\013\300C=\371\201\014=5w\321=/u\025=\267\314\254=K\360.<\021\234\202\275\377\244\206\275U\242D\275%\266\333\274\301\250\214\272\224\263\316<\352\270\302<\351\322\023=\360\260\377<0\214\357\274\267%\311\274\001j\237<c\253\247\274g\263\321\275\357\204\243\275@C\301<fo\324<M(\370\274!\331\271;cd\200<\312\350f\275\023\306;=\031i\316<+\033\326\274\275(\221\274K\272\263=\036\246\240=Y\\\t<\360\367\306<\r\007\352\274\243\331\246=\035\036\250\275\310wM\274\031J\206\275\261+4=\014\2341=\362\034\002=\311\032\223=\241s\212\2749\036\214\274\366\377\272\274\177&\271<\336w\250=\003\002\276;\316\205\352;\337\030\004\274X\240\206=\356\0213=\322\023f\275\242\030M\274\024\226\250\274h\237\3648#\266@=\304\266\221\274v\235)\275\206\245p\273D\303\271<\217A\245\274Xy\036\274hl\021=\021\240/=\275\320\250\272\222\356\235<\267\001u=A5\020\275J~.7Yn}\275\267e\253\274\324\207\321\274\344=\324=\326\347\356\2747O\007\274\032\214>=\322\354];j\317\275<-\023}=\025\306\201\275\020~\032<\205\327\261\275?\2604\274)\375\377\272j\340\n<0@\031=\354\0377<u\374\366<=:\351\273\272\372\"\275\024f\351<\250\302\365<\320.\242\274\365\277\275\274\036Ql=$\364\220\274K^y\275\256\262\220=\370\030\314\274Q\363\217:F{\004\275\242\265\010;Ya\227\274A4\010:\n\014\001\275\037;\206=\353x\265\274\221j\003=\316\211Q=\266\'_\274\376\352G<\224)\241\274\316Z[\275j\356\361<\233&\030=u\'\211\275b\211F\276\325\313\210\275\374\260\301<e(l\274K\223\000=%0n=\253\373\004\275\020\003\304<8\215)\275\265\240\200<\007:L\275\206 \203\275\260\263\352=\244\251Y=\013!g=\305\321\264<e)\266\274W\277\216\274\311B8=n\001_<\273<\262<4\037\225\275 \263\215;\254\273\222\274\224\302\032=\nP9;\020\327-\274\030\2412=\0039\005=W\000r\275Q\341\226=0\224\006>\004\007\236<\201\253\322\273\353a\005=\334\263\364<g\341\016\275\203\347\274\274\372\203\312\273Q8:;\240\236\351<\260u\010=\244o6\2753lJ\274\306\001\363<\313\021H<\377\307\275;\225\001r;\337k9\275t\247\010\275\332v\250<\245m\t;\330&.\275\271qO\275\266\201\224\275b\227\334\274k\217\254\275RX`=EY\014\275\330X)<J .=\244\200\372\275\013\267\306\273\375^\016<?W\376<\210\361}=sv\357\273\216\001\202=\307*\"=\031\340 <\"\220\321;\376\007\022\275\357\256\227\272\312\006-<\024\364\036:\310\263\t9\204\375/<i\367\300<\310\254\177=\263u\242\275zg\013=f\374L\274\342<W\275KP\261\275\245\216<\275\001(\"<!e0<D\004\027\274\244\262\022\275\244a\252<\265q\261\275!\357\254<\230\024\022\275P\341\230=+\023\032=\325\005C=\253\336^\275-\204\344<o<\006=\025\211N\275p\347\223=\024W\355<5[\245\275\205\314\255=W\365\301<\331>\351\273\371w\026\274f2\326=9\317Q\273\220\334\343=\353b>=E\"v\275\321~\256:\370\300\256=\311\332$<\252di=|\256\032\275n\353\216\274\347\2265\273\026\237L<\315f&\272:\212B<[\"\343\274\255\013\266<\034\246C\274\322\371!\274\253-\214\274\302=\032=|\005\250\272\001\330i=\316\276\354\274\316\tV<\261\364e\275\316_\240<l\206\254<\336t_\275+\021\236<\027\305\337; \307\207\272\263\253\203\275p\310\304\275\264QO=#:\004\275C3\273\275\366\302\000=\351\346\216\275\274m\026=\362`0<\027\374<=\002\225`<[\\\230<g\354\037=\326D\021=f\351\310<\315{\246\274\336D\255\275\207\271!<z}\231=]Y\017=L%\177=\204\3636\273u?\017\275t\313N\275\'\002L\274\372\327\022\275\375\274\251;ymU:\232\010:<\341\324\303\275\370\026\242\274\316A3\274\2744\016=s\276\265;NX\347\274\236\034U\275\300$\275\274\3768\357\274\323k\252\274>\212\344\273\313,X=1\217\340\274\034\236\224\275\345\331\260=\255\0100=p3x\275<\370\231\272\204\242=\275\247h\266<\246\235\037=r\274\242=\016\242\267\274\002\"\035\275\264\366\334;\364\246X=LXk\275\210q(=@8m=\313\224T9\023\316\350\272\325Z\214\275\200\013\334=X\233;=H\320\332\274\033kd\275\313\2524=\330h;\275\375\344T\275\316l\317=\235\345\017=\034\314\023\275>\207i=\033\3214\275\360E`<\333-j\275|\333\211<\255l\'\274\353{\320=\234\2416=\247H\312\274t\255\341\274\345h\264:\270me\275\204a\311\27482\320<1>\024=@\024\274\273]\004\027=\301Y|\274\256\252\227<Z)\020<S\230\016\275\033-\310<R\210\225=\252G\332=\265`u\275\2351\216\275\036\2729=\322\332G<\023<B=\r\'L\275\370\326R=\336\212\001=R\274\302\273\227(K<\203\374\222\274]\243\365<T\372\001=}Q\333:\341\\P=jz\006<\311{\247=\266\2136=W\2451\275\257\241\256=`\355\333<=\376\n=\367\245\306<\004\215\315=\317\017h=i9d\275\355\037<\27502\r\273\014\002\243\274\370\232V\275<2\336<S\273\363\273\2542\230\273\353d\276<\377/\201=\210d\"=+P3\274\236\331\020<\211%\037\275\324\342@\273\335M\024\275\203\376\227=;{\351<Uq\312\271\237\212\005\274\230\'\370;\254\004X=*\021\237\275\352\022\034\275\315d\021\275\260\210\000\275\3170\271<FP\220\273{\214\214\274\r\3240\275\026\352\333\274\201d%=\025\312\013\274K\r\033<\252\276\031\275\350\355\025\274\372\0164=\364}\202=\341\310D\275\317pt\275@\367\213:5\316\217<\213\021\n=\t\277 \275\034\003z\275\377y\210<\027c\376\274\273!\202\272\227\252\177=0\036\321\273\253\264\032\275,\261\222<\354\233\337\274\374f\340=\270\273;<X\220\016\275\307\252\222;\3059(\275h\302\207<?\343\217\275t\257P;\276/\r=\305\232\'\275\325 \250=\272\006\t\275\221\254\241\274\206\364\270=\007c\214\274\320*G\275\267\033\276\274\355\265\213=I\355d\2758\247w\274\300\017\t\275\367\227M\275\263Zp;\014\243\363\274\321\322\215<\376\360\001<\336*\r=\303U\014=\034\335\312\275\"\001r\274|J\037<\005\246Z\274\216b\306\274\020b7;t\244\022<\241CK\2758\030\t\276\275N\312<\346N\017\275\340#7=\350\027\312=\334\371\217<=U\271=\322%\315\2746\310\017\275\302\317\217=\326Z\025<\024\302:\274\334\372\214\274\372\375\031=\372,\\\275\024\220\016\274\210\315\256\275\335y\024=\246\304\212\274\014T\207\274\221\206\242\275\342\313\272<rI\037\274\013\232\222\275\210\275U=JY\346\274\370}\204;=\244\227\274>\315\365;!ev\275\201\312\326;U\254\t\275>Z\331;\240z\363<\246\331\275;7\270t<L\364\351\273\024C\307\274i#\247\275\303M\026=\004=\335\274w\"\025\274\346O\032<f\270}\275\275\353\256\274\374\000\373<\'\323\325\274\264X\033\2759A\217=\317\3653<n\034\201\275\206\372R\275\35527=W\347\273\275\312\305s\274\r\305\212<\307b\260\274\026\002M<5\257\341\274\016\277\205\274\006>\271\275\220\244\313\275A\261\250\273\373\026`=\2758\266\273q\013\360<\037\023\326\274\350\274\367\274v\001-\275\026\360/\273\232!F\275\347\033)\275K\353\323=\317Y\237<\351\014\037\275\230\365\033<\316H\230<D0\330\274\202\275s\275\230\352\237\275;8\007<9\373Y=\030\305\210\274?\271\267\274\211b\214\2751\304\232=\0353\014=\'\376\237\275\027Y\023\274\351\3115\274\r\224z\273\250\222C\274\001\376\017=\006\310\212\274\006\301\244=|g\305\273=\224-<\274x#<\3460\013<\263\306[=0}\332<\006\257p=\304\351\250=\020W\334\274B\230\222<\362\205<\275p]V=|]D=d\264\334\274u\301\237<vi\004\275W\031\203=\316\024,<\254\366\302<R\243E\275\306\354y<\353\254\211\274J\200\241<SM\263\273\377\037\215<s\302\223\273\352\330\000\276\342\261S=\267\355\203\275\313\026-=\263\251\252\274\'\036\351\274\247sx<G\250\001=\362\204\240<vf\242\2747\341x\275o\021#=\n\373j<ZI&\272\336\344x\274\017\234\251\274A\330\253\275T\036\023\275\226\005\205\274\233\356\223<\035\322\227\275\353wE\274\357\001`\272\213\036\034;\267\214\251;\265\224\021\275\265\314\023\275\221\222\236=E$\242\274\240W\010=\370D\301\273\364\2333\275\351r\233\275p\221\323=\016\364>\274\340\273\241<\006\224\214\275E>D\275\024\231\341;\007,\207=\217\005\331\274\321CL=\330\361\027\275\226\262\\<\357r\016<\203\301\234<\223=\234=Pd1=\236\221\257\274\207P\327\272\346\031\342<\253\205k=\n\362N\275\202\202\013=\333\311\010=u\250\226\275\031\370\014\275\210P\262\274\3022\306<\377\016\305\273\266MB;\347b\333\274\216\251%\274\276\344\000<\315[x=k\'o<\322\275m\274Pp]=\345 T\273\343\237\355=\360\207l\275|l\250\275\323%\305<}\245\232\274)x\275<\244\372C\274\031fM;[\000\r=\335L\212<\222<\257<\220\017\302\274\212\375\007=m\252\262\274\270\340T\275\275\004.=\375#\245\275\210>\265\275\177T\340< \013\310\273\004\226\214\274\367!\266<\243\364\216\275mP.\2758N,\275\225\314R\275\333N8\275\307\362\007\275u\207\251\274\303\032Y\275)E\243=\330>\225\274\236\346\203\274e_\017=\025\265\300\275\217\300\014;\261\242\213\2758\367\241<\t\2666\275\340\357c\275dR\334<\254\302C\275`\251\020\275\346\241[=\013M1=\272\353\006\275\004\301k\275t+X=\321\322@=\267\335@\274\230v\035<M{\037=\233\010X\274\212\321\307\274\235\274\367\272\343\211\227=kK\253<\3768\226\274\377\226s;0m\035:\246\246\226\274\'p\213;J\2720<A\265\251\274\256\317\n\275\331\003\007=\253J\246\274(\251Q\2752=\000=\261\315\3229\022\235\267=\347\026v=\244v\323\274\204\031\342=,\035\330\273Z@U\275.\225!\275\345)I=o+`<\002R5=\262\365d\275\353n\267=\243\277\243<\276{\247\275y15\2740R\371=Q\312i=\325n\003=bX\316=\306\377\307\274\007\331\n\275\277C\010\274\324,U\275\001\222=\272\364=\227\273\203\335#=\310\013J<\016?\265\275\003@b\275\373\332\251\271?\206\021=v\251\374;\304,\314\273t\tZ\273U\201T;|\217\233\275\234\260y\274&\323\036\274S$x<\346\355:<c\010(\275\0354\244;\374Im<\0218\t\274\243n_\275\364\003\320\274\0013\370\274\016*\266:\353\n]\274\263BN\273x\350I;\000\3479\275\031\246\234=\tK\331<\302\355\t<\025\371\037<\335(\005=\234!\203\274Ws`=\370\001\020\274\255\274\026\2745\234P\274\n2/<\352Q\230\272\363f\313\274\355\\o=\362\253\276<G\322\204\275FR3\275\231\200\313\273u<\244<nCG=\254\000c=\016\244-\274v\260\327<:r\016=O\245\243\274\257\030\037<\323\023x=|\306\331<\000t\263\275\324x\026\274Rv\354\275\205\334\273\274\324\302\274\272\332c\220\275\335{\313\275\305\004]=\320\033\025<\216)\302\274\226\354\360;\003\336\240;\306Z\314<\033\343\223\274\370\252\032\274h\232\300;b~\301<\242\334~<\004\nm\275\002\267\233\274\010>\272\273\214\252|\274F\256F=\230\177\222\275\2621t\274^\247\227<Qy\207<\010T\213=\304q\276:q\223\266\275\177\220\262<\210\334\242\273\324\013\001=#tz=\007\300\302\274\347\206\255\275=\347\213\275\226\276s=\276\332\357\274zy\213=\230\330\214\274\356>\245<\302\035\r=r\036\324\274-\033==K\311r<&*;=\301j~=m1\212=\276\270\224\273\230j\271\2747:.\275n!\305\274a\271\025=\304\352\022=\3064\220=@X\344<\363\252S\275\312\372(<tmp\274\213\241\360\273F\204\002\275S\000\207<\231\266W\275\271\004\032\274\n\035\314\274\255R\253<Nd\363\273MW\357\274^\354\203\273\031s\236;\3726\242=\241<\020=e<\025\273r\257\315<\312S\323<Kr\203;7\306\277\275y\235\224\274\220\t\327\274f\242)=\004{\327;\254D%=\034\3666==\217\205\274\256\014\254\275\216\263\202=LC\177=S\027A\274\212\031\006\275\206\334(=\217\375\341\274\245\005\270<\322\261Y=\365Cx\275\315\263?=U2\014\275j\020Y\273\002\261\037\274\026F\213\274c\335K=\337\206\n=\320U\236=\271\202\206\275y\214\352\273\350\214\377\274-\177\204\275\032!\252;\350\035\025\275\002z\277=\341\036\017=\337-6\273\363\333\033=\307\223\240<\005J\203\275\367\253\007\275Nv)<@w\251=\2505\267\274\007~1=u\310\320\275\251v\305\273^-[;\200\235\213=mBO\275m\277R\275\244\270.\274\t$B;h]\334\275\240\310\016\275\r\0277\274a\244;=\236\350p=^\217\301<\354\231\240<\277\320\322\274\016\2133=\266 \252\274\001\361\243\274G\213>\273\365\354g=\333}\013\275n\236Q=\323\031\252\274\347\010\027=\240\020\217\275\017v\'\275\213\250\343\274 \303&\275\003\340\261<\025\315\274\274\314yy<T6;:\373sO\273;\031/\274z\367[<J\370\276<\'\006\232\274_\260\214\274I\350\030\274T\331t\273\332\212;\275 \341Y=\027\317\221=\224\365\021=\327\001\200;\232S1=n\204\251\2721\213U=u\030\215=\n\"C<P`\221<m\333\222=\224m\311\273\20027\275\274\032h\275\0252\235=s&{=\255S4\274\373\265\263=\274C5<\003\242\017=\201\327\342;\375S7\275\212\232(=\222fg\275#QY<\350\201\263\274>\332*=k\007&\274\016\331.=\306\n\312\275\"Re=W\363\324\2752\260\243<\266\341\242:\354W\017\275\266B\307<\346\344\312\274\245\007\330\274\357}P=\336y\037\275\027Y\302=\'\305c\2750v\243<\315s\323\274\033\320`\273\307\354\316=\251\305\373\274N\274+\274m\320\330\2746W\356\275\360\'X<EmI\275\266\211W=\317\231\004\275ST\327\272\\92=\0065D=\016\330\225\274,\217J\274c\211\205=V\366\025<.\314\016=\346\023\315<\010\315\366;\364K\312=\372\374%\273\234Dt=\335\332\222\274\202)\342:\307N\260\273Yq\345\274\323u\026=\334\300\332\273j\344\204<\247\320\204\273o\252z=p\365\324<&\373\022=\030\361\214=K\273\026=WLT\274v\273F\275\344Oe\274\037>E\274\342\346b=\301\250\033=h\305\235=td\264=Pmk=z\225\'\274\231\005\024\273.\331\t\275\200\361\364\272SF\177;\303\002\346\273Eq1\275\\\226\376<\251,\252<inY<Z;\267\274\352\005\270=\243\216\021=cR\351\274B\213/=\275\235=\275q\200\213:\244k\341<\204\317\331\274\225\032\245=\017\212j=>\201\"\275\321\027\200\272\027\3750=\3668{=\275\021u<-\243\233\274Q\2203=j\274\264\275z\273\177\275\226i\201\274\010r!\275Y\210\030<\267\023\017;SK\347<\353\tO=FU\203\274g\353\201\274\0314W<\267\tC<\205\026\250<\023\336b=f\306\265\274\276\226\005\275\005\317\037\274\026\241O\274F\244<\275\335X\001\274\360\303\352=\023\301\227=\203d\337\273K\001\353;\002\0252\2755\204\004=\022G\030<\263\021\005\276\010\237\r\275\214\237\316\275w1Z;td\235;su\031\275\323$\026\274\276\240^\275\263TS\275\321\343U\274\204%\267\275\335\201\306<S\200\031=\341\277\344\274\004\362\017=LIC=/\242\201<\311-7=k\226\234=\263\351\367\275s\033\006=H\224\333<\372!\242<MR\030\275]\030\330\273\335\357!=\020\006v<\2707\333<\216\210\203\275W\345M\274\270K\305<\251\247\343=\262=0\273oNK<\336m\027\274\016ei;\022\247\205\274<\001\313\272\332\206q:\221<=\275]\202R=\353\235k\275Y\363\203\275\030\313\246<U&\025<{\277\223=\254\374\366<\0003u\275\377K`=\016([\275\346O\205=\214bo\274\316\377\226=\363e\010<\336\222\344<\017\251\245\274O\213\001=}\261Z=\032\201\215< \2317\275\214?\352\274\370\301\306\275\273\305\222=\347\027^=?\314}=\342L\026\273^\263\177=\313\023\023=\341\361\001=7\311\036;.=\367\274M\261\r\275\204\013\225\275\212\324)\274.#Q<\377\010v\274\320\307\241<[\033\325\274\204a\273\275D\275\031\274\266\300-=\033s\001\275\315m\324;@\007D=s\243\302\274w\tC\275\235,\223\2734\356\371\272b\272\366:\246]\221=\340\346\004\2752\226R\275\261[D\275s{\212\275\246\247\271=+*\324;\207\205*\276\264\316C\275\323\265\307\274mQ\025\275B\013\200=\234\346\263<\023\346\242=\336\\\376<\354\022]\275y|W=\221~\000\274\\\312\266\275/\347+<\373\270c<*\366F=\364\370e=\t\274\265\274O-\307\274\013\220\217\274\373a\021<\027\307\332\274\020#\371;\211h\360\274\366h3=\236\234\017<Rqh;\010\303\027\274\203\317\311\275\357![\275\255\262M\275O\377h\274|3L=\234\036\321==\030\\\275a\335\310<\376+\322<\t\270\224<\267v\224;\202\007\337;\'\340\241\274\340\243\'\275\241\017t<\2632\253\274uT\256=\003F\266\275\210\376{=\210ew\274\331RH\275g\226\361\274=\033Y<8\311\214\274\034\263\032=\277\2735\275\"\362\n=\234Qc=\341\220/=\207\036\214;\210\265\270<T\247\020=\304_`=6N\257=\014+\301<)\026\262\274\007(\031=\217e\237<\266\020\010\274\340\304\032\275\226\n+<[\226\002=\224\016]=\355\203\211=\302;\025=L\032\010=2NJ=\255l\023\275\304\272\000<\314\025\224=e\350K=\026\312\234\274;\221\010=\020\263&\275\332\241\'=\325\r}:\004\3150=\315\275J<E\335f<\370\224g<\367\014+\275\363&:<\336n7\274[\235`=v\224:=\367s\023=?\333\213\273g\007\323<\237\274\327;\013\200\017={\347\342\2744\357 \275\244\317\237\274B\257\323\274\177W\261;\322\224\017=\335lT\275\'\347e\275\030\013\010\2741$P\275\t\245\001=\302\305\207=\332\"n;\344\006\272=\204\207\023\275\216q\261;\0225\031=\277K\345<\306n\271\274F\335\276<Ch_\275\210`H=\360\303J<Rt\312=\020w\251\275\3413\200\274b\302\246<[\222\215:\255V\246\274~\242\311=\240\241C\274\027\362\242\274\210\227+=o\317 \275\037\314\327<%\350\272\272\035\370\310<s\232\264=\236e)<2\206\203\275\257wp\273\021o\213<\320\177O=\301tD\275w.\367;\247.z\274\031\304\222\275\336\353<\274i\360W<\023\313\211=\215\210\352\274\305\000\021=\001\016y=h\021\301<\374\010E\275\231=t;\035\300\024\275\005\301\241\274\300\225l=5\202\202\275\320\322u=Z\333$\275vx\0209\032-\003\275`kI;\233\365\252=q|v\275\033\343H=W\274@<\343\320x\274\353\027\336<\225 n;\353\271\201=\314<\362\2723R\013\275\302~l<\207\365\241\275#\310z:\262\242\274\274V\363\270<\335\274L=\245)\021\275\'2I9\023\230\376\274\314\r\244\274\345\332\253<\300:4\273\031\rQ\273\270\330\300\274I<\352\274\317Q\213<\304\227\371\274\260S\205\274\227\247\266\274\233\205\250\275\004\317\316\274\223\3279\275\347\265\220\275\307\366\250<\233\246\232=\207\2454\274\001N&=\232\305\335\275\376\374\231\274\002L\214\275\321\247y\274\201\333\t=\014\321\205\275\240Y(\2756wj<\277H\035\275\240\205\327=\207\204\377\274.E*\275\367\024\023\275\342Wm\273\305x\252:\271v\336<\255,\213=f\207\222\272\305\312P<\022\307;=\310\023\327\274a!\333\272GC+<\355mh\275d\310\030=\272\237\217\273\331\305\367;\010J\207\274\322E\216\274\035\003\253\275\247\320\031\275\256\201\223<\2354\224=\026\024\270\274\357\376\373<\275\"\032\275h\023\233=i\027J\274\0138(\275O\017\322\274v\353\220\275\364\243\024>5`t\275\032\177r\274\034\210D\275\274\'\313;\245\205\333\274K\243A\275\222\017\031\275\023\352k=\204\310E\274\230Tx\275p\263{<\035\3165\2753n\354\274\236\r\220=\021\242\344<\004\324\265\274\361\346\217\275\001!\230<\376\317\263\275\341`\307\274~Y\324=cW\346\274q\001\234\275\321\325\341<\270\340\246\275cZ\3308\306\242i\275\320\\\000\274m+A=\276}G=\275\220\013\274\0367M=ac%\274\317{\020\275\2445*=\004\315\274\273$\272\210=\t-\r=I\366\267<HM0\274\350\212\027\275aCV=\215\312\213<\2058\312=\337\2275<n\317\201<\310\367a\274>9#\275\"\337#=y\253\025\275h\327|\275\324\312Y\275\005\354\352\273\205U\020<N1\265\274{\243\n=t\365\232\275\310v\367<\301\356\207=\\\274\261\275\2557\212\273\203\340g=r\037\006\275)\036\253=\276j;=\355i\037\275VN:=\010\313\211\275\212\245\222\274\302\321\355\274\361\353T=\317L\017\274])\366\274<\347\225\274\250}\234\273\237\357:\275\225$\206=\212g\302<\370T\205\275J\336\224\272\300\315,\275|\030\020;\014\335n\275p\342\341\274\301\221e\274\270\004\337<\\\024\036\274\347\361\277\274|L\304\274\027\202q\274\0355[=\221\237\001\275qcB\275\037\217\340<5\033\213\274\330\r\347;\324\222x<\321\0218=\337)\201<H\216Y=\363\336\314\272u\312\210<=7)\272\205\343\334<\233\200)=\037\324\300\273~\304\205\275\274{I<1\306\243=\265\365\241\274\301\024\262=\032\316X\275\003\251|=\247\312\315<\240\242\274\275\242y\331\273\255n\201<F\'j=\350\307\257<\177\313\253\275\257,\347\275X\326q\273s\301\243=QY\270\275\362*}\274\302o\023\275R\312A<v\355q=\255\264P;\310\230\255\275<p9=s\221\206=(\370\"\275\244\371p\275\033H\204=Z\1775\275h\313\236\275,x\002\274\264\302e\275\205\020\243<j.\031\274c~\212\275\034\353\373;+\344\026;)\364\324\274\356n/=\367\322p=p\323\034=O\245\r=\357\255\r=\234\314\330<\300%F=\2712\267<\261=N\275\374\336(\275\212\202\037<\357\244\375<x\201`=ae_\274\31646=o\316\215<\336\363\257\275z\334Z<8\351.\272-\235\332\273\3518A=\220\020D=2N\316;\211i\201\275+\362W\275\226&\r=\372\005\312<\276#\022=\314\310\210<iG\200;\232N\252<\377h\003=\252\020\201=8\327\014=\304\365\004=H\272\273\275s\266\364\274\363\244I\2735\010\324<\317\337\204\275\360\277Z=\014N\312\273\243h\306\273\307\206\337\274\235\302-\275\001\355a\275G\237F=k\267u\272\346\351\246=\210n\303\274\301\375S=z\350\304\274\304s\243;p\233D=C\320\234\275A\271\224<\307\247`\274\003\246\227\274XZ-\275.\231\013<\026\301\003;\377\235{<f\375\301\274\327\256\275=L\313\346;{\367\016=x\356\233\274\361\326\200=\335\243\227\273\013\264.\275i\352g<X\216\332<n-&\275\224\\\000<\2047\\\274l\225\301:\023\253\202=\355\263\002;\347\013\225<\200\0147=\205ck\274Bv9=\203\013\354<\203\3210=%\331A\2730F6<\315\342V=\305\246\024\273\341\331c=W\277\232\274\354\300\202\274\033\257\347\274P\0354\275\">P\275\302\355_=\t\t9\275(A\357<\007\271^\275{\245\033=\332\345\330<\231\300\317\2757\246\352\274\213j\354;\374\253\327\273R\241G\274U\213\330\274,{\026\2756\037\321;\337\001\240<`\004\"=\310\302<=\234[\326:N\242\322\274\014\334\010\274\2504\225\273\374\303\365\2743\3160=N\352\317\274\215Q\235=\227\373R\274M\330j\274}9\267\275\254\0172=\207\035U\275\322W\202=+\3128=\221P\215\274\211\303\233\274eg\226\275\263\026}\275\237\006\321<\2546\031=\301\ru\274g1\202=s\247\025=\300\336\214<`\361\214;I\241c\275\277*\254\275j\250\215=1\322\027\274\003\000\"<\337o\037=\377qC;l\n\206\275\003\215\202\275b\032\272\274\256\036\215=4F{<\222\245\003\275{\316\207=\344\201\003=#$\304\274\353\024\362<y\315w:\n\273\366<v.\367=\n\353K=x\014\223\275L\351\233\273\tu\210\275\216\344c=\324\344v=$r\244=+ik\275\273\'\';\235\030\323<\024 5;\364\333\013\275\277r\222=\004r\025\275U \230\274\310A[\275\311\313\000\275:xs\275\255>U<c\366\241\274=2\274\274+aJ\274\251\302\002=\221\240\203\275\373b\343<\235c\231=\376#\256\2758\\\302\274z\241\326\275\333\313\021=\230\267b\273|\276\016\275 \252\352<\2551\334\274\020q\362<W(\000\276\315T\223=\260[S=\242\203Z\275\342\362\r<PP\313=\354D\356<:y\211\274t\024\233\273g\304\224\275bs\002\275\2453\336<\314=\007<\021+A\2744b\022=];;\274$3\320<\321\342\206;\222\261\365\274\242(R=\'\257N=\214\020\023\275x\252W\275\3434\346\274\275\250\251<Ij\375\274\365\324M<qZj=\"\315\233\274\006\013\216<\316\223\346<c\305h<\313\256h\274\270!\302=A\023\362<\372{\037\275>\177\363<\327\356\277\274\256I\257=\232W\364;\210`l\275\221KL\274<\321\204\274\210\252\003\275\240\021A\274\210o\232<\317\316\332\274\274\222\242\275\3277\214\274P;\230\274E\252\375\273[l\223\274\344\315\344;\250\205\303=\202\333n=\342\037\324<\235\271\017=p\313\212<c\334X=\336\216f=\207,\232\275\345%\242\275\032\3254=n\3578\275\320\251)=\022T\324<P\033/=\177/\024\275B\367\222;\017\237\200=M\310\273<(\3202\275\331\212(\275\010\277\3638\326\004k\275\240\276X=\305\231\205\275\'U\265\274\260\232@\274&b\021=\202\254v\274\375\346\367;\213\262\266\274 \351\223\273v&\213\273\260\201Q\275\007\014o\274\022\235\234\275\242Jl=d\2336=\302\307&<jB\347;pK*\274\312\022\210<\374\366\271\273\013\004\360\274\351\361\024=A\210U\275-B\255\274\013\220\362\274G\243H=\300\213\202=\265\3265\274\343\246\237=Q?\n;\\\006\t=V\203G\275\263\036g:!\316\256=\377\371\n\274E\331e\274O\\\025\275d\302(=\364<w\274:\316\333<d\026\321\274\310<\007\273\360\347\240<\213\212\233\274r\221k=\227\214\376=\301\370\264\273\305v\236<Z\373\332\274\215([\275\302\334Z=\024\313\365<\333!W<uD\223<\347\275\022=@\t5\275\004\214\023\275ZM\203<\310\343\256\272\356{{\275i\362\266\273\234eD\274B\331\\\275X\247\016\2749\017k=s\276\272\275\301<\300\274\213\355\213<\334\370\223\275?2\325\275\331\374\222;\223\274\236<\341N\207=M\317\357\274\207\021}<\223\246h=\332\202\n=Z\356\211<\004\023\010>b\232\244<\272d\335<\362<\204;\211\342\267<\013\002\377\274\3004D=\004\302\017=\023P\354<-IV\274d3\374<5\022V\272q\363\204<(L\327;\rP\003\275\226a\362<\\\'\273\273P.\276=Vr{<\263\240\033\273S(G\275\274\010\330;?\317g=\310\2253<?\'J<R\\\217\275;\022\223=\377H\316;\322\214\334;\313@\000\276\017\301D\274\276`\342\274\310\334\000\275\210\201$\275\230\325Y\274\'\016g\273\276\263\277\274\303\254\240\275\372\357\252<\371\0012<p7\364\273Z~:\275A\367\r;[\344\027\274\216\3463\274\237V\350<\006*Y\275>\373\031\275\221\024\363=\374\005\342<\304_\237<\365\033 \275\3449\217\274\237; \275\224\253\030=\224\001\277\275n>A\275w\350\311<mq\205\275Y\244H\275s\326\250=\030iR\275\336\302j\275\222\265\227\274\233%\257=\314h;\275\233\230\343\274\306@,\275\324\321\265\273\247\277\331=\345\232\3719i9\027\275(\326\003\275\260[}\275SW)\275\301g\222\275\016\256K<\347\352\032<\334\212w:,\267\234\274n}j\274p\330z<\232\313\220<y\274^\275\206\350l;\275W>=7M\270\274\3676,\274\354H6;g\375\000\275\242\225\031\275\327\034\200\275\035\032x\273jH\335<\004s\020<\333\010\206\274\226\003E<\331\227I\273\'\037R\274\2123L\275W\030\206\274\310\315`=\223\310&=lT=\275\214\374\215\275\324\235\025=\356\260\250<\t\270\260\275\364\242\225\273\357\355\346<\367\177Z\275\271\010Y\275Z\244\251\274\034.\224=5\030\322<\226v\217<a\306\263\274X\302\2109\265\333\311<\177I\376<33r<\346y\260\275\027\032\336;\347\273\207=Ah\200=\211\351\267<&\377C\274J{\036\275\305\016\005=\010\007x\274J\257\233\274J\"\364;\364\252p\275\014\345\237\274Y\n\324=\014Y\035=,W(=\017\303\010\275o\000\360<\\\027!=S\302\222<d\0339=\313\230\260\274\210\342\270\275\334t\364\275(\375\335<,\324\205<Mt5=C#\005<q.\342\274\321\263}<3\211\360;{J\022\275\361\323\213=\000\363\357;\232\364\251\273\232\2032=!\317U=R\002\251<\265\277:\275E\210\024\274\361f\340\274?\214\033=\303(?=b\263b\275&\025>\2754\336V\275-\327\201\2750\035\220=\343\315+\275o\030\337\274\"\301\242=\315\277\302\273\344\\\177\275Q\363\230;\010\263\357<\340\211\r=\221\232@\275\024T\236\274\343\017C=\341\371\326\275\321X\222=\361=\252=\006UZ\274\226\353\355\274G\355\305<G\317/\275\303\337\302;l&\003\275I\032\344\274\271\346\342:\006\250.<sW\340\274Y\262\r=\235I\210=h\225\266<\005\322u\275\034\241W\275\223`!<\356Q\271\274\371\031\007\275\305\216%=\273\247\024\275\340\322\'=\374\2134=6\313\220\274\003\235 <T\213\240<\213)!=a\025`=\'u\245\273_\226\214\275\344\227X\275\260\237\025<\214\274L\275\300\372U=OD,\275;\344\312<\200\025\304<\363m\271=Uub<IJ\035\2746\\T=\000\217\027=\016\0324=\037\223\033<\014,\004\275\017\366\276\275\352H\301<+\010\333<\330\262O\274k\242\301=t{\n\275\344\264o\274~\002\376;N\357\315<\033\375\264;\211y\337\274\361\244\320<P\364\337\273l\355\350\274V\365r=\216\226\202<\235\nk\273!\353\307\275\250\264f=\241\236\224<\257^\217\274\371\177\210\272\346\363\337\274\350\026\307\274\031H\225<\322\022\017\275\374\344\231=\250_\344\274\r\323\234\274k\202\257=\004\205\224=j\376\037=\302\262M=>\304\025\2750\311>\275\376\243\234\275o\326\032:\256\315\\\275\366@\241<\336$;=I\225\020=\365\215\253\275\001\241\316\275E\024\354:\215\230\r\2746\264\263\273\311\317\217\275\325\342\205<gt\217\274v\205@\275\323_\305<n\274\003\274\227H\242<n\033\251;\270\323R\275\303\217\016\274\250\247\206\275^F\372\273\325\310\261=r:\320<\341wH\274\0265\204\275\277$\002\274f+\301\274\212L\335\274\000\240(\275\211\006m\274\320\343?\275\243\t\035\275uW\275\274\3246 =\342\247e\275\341\275\247\275^\214\233<7\330\216<S\024\247\275\246<\023=\203\275@\275y\211L<\2010\240;\200P8\275`\207\213\273\264:\010=u\323n=\217e\231\274d\257\306\271\304=i\275\373-\256\273\314H\250\275\035u\264\274\355\313\337\274V\366\306\274\017$0\275\362\3012;;\251\207:\226\034\031\275\n\204S\275\342E\361\274\324H\026=\014\013#=q\303+\274d\342\231<\376^\246<E\306@\275\264\375\237=\240\3442<\003\261\265<\236\321\t<\307y\243\273\247\244\001\273\365+\223\275\362[\237;?z\372\274\354\347\t=T\331\351<n*z=p\314\230\274\352\325\023=\313\326\347\274\013\333\271=@\367<<-\221;\275M\302L=\2469\317\275\351\377T=\266\036\317\274\201\017V\2748\273V=h\306|\274h\324\225=s\265\027\275\306\216\223\274\004\n\016=W\205)=\307Du<\232\245^=\375N\r<w\333A<\233M\300<\245\034\367\273\237\256\206\275\230\221\027=q3\347=\251Wu=\004bX\273\211\252\230<eju=\306\361$\275t\305.\275\255\311[=\213\351\214\273\263\311\354\274\361m\267\274m/!=#y^<\247\301\330\274\027\251\224\274%\362\300\275\316\177\355\275\317S\246<\026\035\264<\037Z`\275\242s\253\275\232\345\303=\361\246\361\274\253\236\272\273\306\246\227<ak\264<\240\367\266;\360^\330\274t+\211<\212,\203;\245T\317=v`\256;+(\207=\304\\\244= \327\310<tK]\275\361\362\315\274\021x\357\274\016\360\007\275\242\002\314\274\212]\270\275\361m0\274\025\233Q\275_<\177<\010n\004\275<A\267<\0339\301=:Q\370\275)\367\215;G\313\242\275\004l}\274\033\365\341\274\266\355\233\275\235|!\273\016\261\214=o\313\306\274jQ\243\274DB\377=\331zZ=\227\200X=\220\"\221:L\312\327;\",\316\273\251U\201\275A\332\257<*a\242=|C\203\275mH\227\273ut\\=\374\341h<\0174\n=\273P\307<KG\201<kL\257<\240q\246<\241IY\275;\312E==\177L\273\324\2615\275\253\213\007\2745\346\353\273p\243\202\274\307\355\221=\344\377?=\n\344\240\274\204ga=\245\354\024=\3436\035\274\030Zp=\211\227\363<\322\3335;RqH=\355\245\023;\330c\363\273T\327=\275\346\300\333\274^D\222;;h\315\274\334\"\023=\002\370*<\035\245\013\274k\260\023<\244<A=\025\024*\274\t,N<W\270\t=k\344\243\274X\231b\274\023u\022\275-S\231\275D\304A=\243\017\347< \025\266=\316Ku;V\\\346;fI0\275\210\214\t=\261\220\275<\357\334\217=\276\235\"=iX \274\201\262\000=7:]<\300s\333=\367w4\275\236\205\376\274Y\312c<x\344\n\275\303S\211\275\327\320\\\275F\367\262\274^v\202\274b\366\362\274\014f\360<\351E\234<j(\217\275\202\275\005\272\307\036\244\275\204@m;ci\345\274\"\223\362<\'%(\274\241\274\251\274\0062\t\274\'\326\246:2m\224\275\333\372f=\314d\322\274\330\336\345:\303\217X=\235\302,\275\2340\t<(R\022\275\325\276\225\2755\024l\275\223\326\243=\315\004E=\316=\242<\351\252\007\275\202Wt<\177\2250\275\251v\256<!p\212;1p\344\274\361\336\342\274jw\352;\003*5\275\205\372L\275N\037t\275\034\217\251\274\303\267\036\275\271R\206<\324\030\213\273$\036\217=\207\367\306;\217\200\030\273\276\317\330\273\253RI\275{\331\203\275\260:\221\275\n\373\264\274T\254\324\274&\323\361;\307a\017=1H@\275\357\004t=*s\310=}\272\322;0\235\203\274\003\306\020;\202\244\000=\201m\013\275,[,<\2316\260;\236\315v\274\270\301\275\274\267\353\221\274\007)r\273\305\370\274=\033-\254=\300R\370<j!`=\320\035!\275~F-\275D \202;\315T8<\352]\367;5\026\033<D\277\322\275\031\"\300<\370\277\032<@\355\250\275R\016\003\275\375\345\250\274f4 <b7\332=\246\007\014\274\322\226\032=;k\266\275\243\2117\275IN\231<\324$M=\3114\304\275l\023\303=\376H9=\347\361t\275n\254\361\274\352?\324\274\320\033\236\275Y\215\240\272m\264J;\275\206/\274\013r\"\275\272|$\275\373\254G=bD\342<\214d{\275]\273\230\274B\3437\275\235B\010=6\216\252<U\316\034\275E\325R\275]\215\023\275\006|\013=J\201F\275\213\324M=I\022\325\274&~\024=F\200\333<\334Wd<\262Q\255=7\317M\275\204\273\224=9K\277\275k-\006\275\303\036\226\2754\304S<,\313\020\275`E8\274\225\317[\275~\326\007<\355\210\007\274\336\355s<\330\241X=bi\374<\334\250\250\274\034\346\312<\344#\274\274\356$\027\275\215\326\340<\021\317\227\273\253\313\261\272\356\242\266\274\272\256\356\274\013q+\274\211\030R\275_Io=\240O\334\274\207\014\t=[\264\320\274\340`\021\273\034~\"\274\356\002\'\275\006\321\273<j\256k\274\275\217\013>\271)\322;\036h\r<g\275\020=\002\n\336=\030lB\272\351\010\260<\310\305\356<&\312\001\275\204\247u\274\277X\2319\275\027\313\274q\322.<\216\214\311\273^si<\305\264\306=\2770,=9\277\207= \317\\\275}\262\225<d\3700=\271\257,\275\'.\201\275F\031d\275\322\240\027<x\351\234\275\035\202\\\275\256Z\217\274m\302\221\275\366ve\274\370\307\256;\373w\307<\371\374\222\273\247\027\237<\231\"[\275?hU=g\230\255=\3200\242\272b\256B=\006\366\'=`\367|=\037\020.<2/\207=w\370d\2754d\353\274`\301\335<\330\0272\275\266e\t= \017\212\274\310\203\312\274\020$G=(\211\350\274\'|\207\275\252)\016<SH\021\275\334\020\371\274s\343\225=\250\272<\272\356;\031=\240\350\032\275^e\362\274:\260u=\017\264\267=S\\&=\303v\265<\373`/<SI\307;b\232><\003\271\242\2748W\014:i\031\316<\221\035\202=\267_c\275%mu\274\310J\230<2\216\203<\332Y\006=\312\211\325\275\021\314>=\207f\261<%\255\223=\350\215\206\275\347\005u=G1\361<@\021\002=U$U\275\364\200S\274\334&O=\002\000\241:\373\200\031=\262\337\220\274\010\243\212\274\020BC=\243\332\020\273\026p\212<\246oC\275\366\225`\275H\\\336<\226o\n=\273\213\013=\203\327\215<!\370j=Tw\001=\242@\027=)\\\355<\320\007\'\275\025\001\235=X\014q=\261\200\207<\010K\022<B\025&<\272\231\024=F\356\210\271\001b2\275\210\354\306;J\036\000=\372\347L\275!\001K\275I\312\215\274\251h0\2739\212\315\275l *\275\322<\231\274\000[\206=S\265g\274B\274\324<\222\324T=\230\177\272=\230\370g\275e|\312\274\320Z\330:>s\276\274\267Sg\274/\321\245\275\rU\331<6q\375\274j\257==\323\r\177=c\307\"<\n\003~<\343\253\016\273_\250\030\275y_\216\275\337\371$=\256]\312\2741p\247\273LV\263\274\270]C=\005\025\217=\373\373\310<\272\004d<R\351\243\274\341\027\020\2755\343\233;\023\250U\275N\377)\275yd\253\274\363\220\010\275\212\002\271;\274\340i\275!\362F<e\361\326\274\242:\\=99\335;\266X\'=\273\357`=\277n\232\2740\332\215\275J\n\212=#y\215\274\233\371\315<!\262\223\273%\273\024\273\335\272O\275hH!=\265G\205\275\220\241\315<\241\261\220\274\300\2679<:!\370<\341@\207\273r*6\275\252\362\237;\356\2667\275\304d#<\364G\212=(\337B\275\037\210c\275\242\026\256\274\023\272X\271\271T\247\274(\241\211\2755\n\263=\251\325 =\377X\200=\236:\005\275\307 \n\275\200\000\310\274\035\373c\275H^=\275\302\263x<*0\014<\321vP=P\207\241\275b\201\017\275vH\331\272\204\370\341<\257k\323\274\320\356\267\273\001\332\001=\254]M=3\037\250\274g![\274\317\035$\274\n\375\237\273M@\227\272\376*\343\274\003>\223<\324\256D\275g9\226\273 \032\226\275$\355\036\271\254u\350\273\357\267\346<\'\330\232<\225?R=\350\360\311=C(\363\273\257q\254\275A\264\002>i.a=M\322\352\274m\330\236=\317\022\007\272\302\3647=\265HM=S\225x=\016\016\366\274w\023\007<\241\017\010=^\"\267<\222\230\213=\265\034\354;1\241V<\\\236\020=:\333\"=F\213!<\224\337\002\274\2578\254=\214\227\325=\245/*=rS\240\275\257\025\373<\017\264S\275|En<b-\327\274\003\021+\274s[N\275\2433R\273QmN\275\260ap\274\357-89B\017A\275;\006\177=\311\353\324<>}\033\274I=\353\274f\224\264\274\345r\231\275\315|\255\275q\374\032=\003\233\227=~\250\022:\251\314C<5\367P\275M\240\212\274\350\306<\275\026\020}\275\341\260\341\273,B\006\275\365=T=zjJ=\002\346\303\274\324\251\r\275GpT=B\037\023=a\320\201\274\326\225g\274\220o\243<\231\313y\275\2343{\275!K\025\275\3165*<\027;\020\275\032\215\225=\352$\235\275\324n\225<y\002\377\274K\035)<;\020Q\275\262q\307\272/e\264\272\312\337\350\274\016\375\245;1\225\320\275H\\B\274\014\340G<\030\270O=\243\341\336<\343a\332<!(\025\274\240\355b\274\014\213\340\274\220k\360\274\002T\"<\273\230\342=\013\013o\273\217l\205\2742\017\312\274H\355\317\273\2325W\273\013\265\226=\362\024\013=Ao\347\274\307\356Z\275\375\321!\275\347\375\203\274\316xA\275\221\032\225<\225\260\237\274l\235\025\274\226o\301=\213\361\261<+\014\r\274p}\345\274y\334\234\275\177Y\275;!|\212<$\337\241\274}@\342\274q\360\242=\357F\200\275e\345\2729\373\007\017=\272T\254\274\244\206\356\2745N$\272\226\327\274<\264\335\341\273\255\235;=\261\261\371\274:? \273Y1\n=\177 !\275\256k\215=\302\354o<\352\002\213=\227H\326\274\215\024\005\273\306\264+\275\326>|\275uJo=v\245\251\274\203~y<?\344\266=\320\351\3719\356\275\365:\242Z\326<s\377\036=o\025\205:\303\0256=\367N\355\274\237[\351<|\020\340\274b1`\272-\376b\275E\327\220=8\210\365\275\367\247\247\274wg>\274\r\223\020\275\242\004@<2\363\033=\334\246I\274\271\304\216<\330d>\275*][\275^\336\336<\017s\367\274)[4\275\274r\036<\354\201\251<\037y\330<5;\210<\225l\227\274v#U=\255\256`\275\341`\335\275\3117\330<rV;=\261kO\275\014\267\325;\033d\312=\370\375\005\275;\214\265\274\003\007\343<\257\212\034=p\374\202\275\202\203\3019\316\303\037\275\007\007H\275h\360\234<\277h\201\275@M\260=\036\335\373\274B\253\'<\004lz=gf\311\274\240\301]\275\017g\246\275\201H\022;\265\3316\275\332\247,<M=\240\274\356\226\360<\234\375\010\275\"%\243\275\000dr=\357\351;=\315\300\007=\230\2107=\363\330\003=ea\024<\031\212\265<\213|\230\274\330\233\276\275\270]o:\017:\372=\\\312)\275\3314\272=C\201k\273u\266\032=6\030\022\275\313|\261=e\272\240\275q\246\337;;\213\315<mK\233=\016\317P=c^\325<\254\204\n=\025O\345<\236<T\275!\372\352=\266rg=\353{\022\275G\331:=\017\367G\275\027\2616\275\321^\213\275\234[\353\274\214mB<c\177\267\274A\242k\275\241\366\244<\250\224M\275a\272x\275\325,h=\355\257\242\274\240\245\000\275r\304\235=S +\275M\243\311\275\264K\304;Ba\361\274\357)\247\275\200\276 =\'\034@\274\205t\004<h\025j=Z\254\246=\007\373\343\270\210\2250<\372\275\305<\240k)\274Y\343\244=\315\206~<\313s5=\304\2725=\375\003\215<\2374\231=\244L\327\274\3122I\274p|~\273\325L%\275T\311\251:\204\021B\275a\316?\274\035d\023=*_x\2754b\207\275V+:;WZ\254;\201%\251\274j\017\271<\225\352\342\274\370\351\331\274C\177\217=\263\366\006\274\301eM\275n\207\300=\207T>=\036im;\204\375\222\274\355\271n=(\004V\275M)=\274\213\314[=\030s\023\275*\007\375<\347s\227\274\335\324\252<\331\361\213\274\3319W<\030\354\r<\\\221\212\272H\223\006=}b9=\267\027\353;\n\276x<\276\375\000\275\005\347\213;9!\240<\325j\327\2715@[\274i\222\r\275\226m`\275\017 \261:<\347\234=\342\233O=\224L\003;u\241C\275\030\3219\275?f\361<\244\202\007=\201\266\255<.Q\222\275\266\371>\275\277\313o\274f\237W\275\207\031c=R|\341;Xhn<\320~\244\275\371\342\317\270\263\3472=\276c\006;f\241N\275\262\240\237\275\t\231a<,\234b\275\006\255\301\274\222\375L\275\'~5\274\017\251\272;iy\274<\356\215w\275&m\234\275\377\002\211=?\026L=\327\216\350=m$\206\275\365\344{<0L\327\272\332\020\317\274C\200 =\257,\370<\214\005(\275Gv\344<\372r\273=\356\007\267<k\035\242\274\225\316\267\274\224\205\t\2740\266>\273I\371\"\275\'\273\232\273`\366\210=\212\022+\274Mb\341<\251\250\244\275\367\276\277\275\306\375\227;]_#=Vx\020\273L:7<c\205\304\2756\204D;\251.\345\272=I`\275\333\357\2679\357\3324=V&\203:\222\254\021\273\243\305\273=\257k\367<\232\301\217;,`\013=\302X\177\275\215\014\t<\355\360\202\275\363\244\033<\2366F<P\367^\273\367\030\324<\214\002\255;(\001C\274\217\330\254=\253\005\277\274\007\227\t=;\203\376\274\230\303V\274\211x\363\274Z\264\204<W\206\331<\267Qn\275|T\306\273\002\231\373:\255\343z\274-\360\206=E>\005\2766l\001\275\215y\231;+\3669<\346?@=\367\367<\274\']|\275\350g\017\275{\002\201\275\214\270)\275\304\330z\273\333\036F=Js\023\275\264\235\333\274\273\252\262\274*\313J=j\225\006>xE==\314Q\266\275\204\233\313\274\"\374\024=\243XU\274N\035\227<)\216\220=N\017\003\275\353p\240<v\367\333\272K\207\247\274o\265\361<\003|\342<T\215\231=\037\312\202<\317/\033=\327\021\273=\346\022,\275s\362\003;\306a\204<\330m+=t\351\300<v\004\321\275$\253;=h\323\010=\235x\'=n\326\221:\241d\035\274\376\337\247<g\373!\274\310\374\354\274\"\373\217\275\325\236\375;\237C+\274\031l\006<\205\271\374\273\344\0368=+\r\267=\202\257\227<P\206\231=\376\033\362<*\375\234\275<\021\242\275M\232\330\273\373\227\357=\346G\002\275\000\323A\274\025C\270<v\242b\274:\030\014\274\237\032\270=\177{E=\241i\337<\"\350\t\274\006\021y=\233y\254<\333\235j<\021\323\014\275\374\322\302<\342\265@\2755\003\212\274\026T\016=\331-\262\275[\321g<\345\021\'\274\333\213\376<\250.\300<\022+\365;\337\033\037<\372\314\214\275/\267r;*\0104\274\346\031\205=\371\013\232\275\013\034\200\275\003\n\251=\251\224\227\275\262\260b=Ay\033<\255\306\255\275\267\372!;\232@\r\275\332\370\225\2748f\210\274\240\213\025\275O\327\312\274\372\272\227<Ve\272\275*\345\';y\006\037=\374aw=\225\2216<\\YG=\271\325c\275\024\370+<\\.n\272\207\203\346\274\022ES\274\231\321p\274\t\2440\273C%\201\274(mB\274W\374N=i4t\274$+\010\2744\355\222<\366\335\256\2757pj=V3\214\275\246\377\363\275!\205c<L.\337<\275\363\325<]~\365=\225\376\242<\2325[<\030\276\006\274j\365\317\273\251\363^\274\324\251\354\275\356\013\213\275\343[I\273o!\204\274\036u`=\033\224\203\275Ht\205\274Z\246Y\272e\'\215=H\360l<C\231\006>N\333\206\275\354\233\234<\007\367\306<\274\001\227=x+\276\274Q\210o:_1e\273z\327\366\273;f\007\275\227\221\013\275\371\375\037\275x:\265<-[c=>\346\377\274^\351=<_\030\n:\n\235\377\275\355\255\271\273R*\211\275Y\312U\275\210ei\275\227\2756=\263\357x=\303>\272\274y\277\203=\024\200G;]D\372<]g\005\275\035\006\272\275\3258\372\273rc\027=\267\260\276\275RmG\275:&$=\345\256\001=\002\267+\275\3076\365<\023\315\211\274\213\371\215\274S\253\356<\225m\213\275\3262\223\275\265\006\017\275\n\363\307<0S\325\274\223\201\3319\336$\331<Nf\273<\260\351\220\275Q\204\020=\022]\314\273\014\223n\274\025\177\346<\346\033\032=\313\352\005=\302!\241\273<2\232\274\037\271\327<\265\307\242=\302[\262\273\212\225\001\275\257\375b\275\177z \275\316\261\320\2749\351&\274\342\317\231;=\367Z<\0252\010\274\014\037&=\353\263\220;\333\001\230\275\3662\026=\314\211\207==T\r>\005R\226:aG\217<(\312`</qO\275\302\350\326\274\030T\021\274\262\\><E7\"\275*4^=\221\177W\274\205~\030;\300\362\271<\314ov<76\324\274\261\274Z\274\223\366\301<\265o\034=\202\200;\274\243\003\204;6\251\261\272:Y-=\001\357\222\274,\323\343<F\344\245<;\355q=\341\225\301\274r?\335<zo\230\275}6\224;\003\323%=\010U\327=\031\354\335<]\342\203\275]A2=\230\271\020\275>\215\212\274j#\246\275k_\217;\253\006\016\275Tw\004\275N\333\236\275\000^\232\274\356q\241\2741\355\241;B\025\314:9\314\205\273{\330\337\275\353Q\002\275\205\025\203=\307\271\023=\257\325\t<J\363\273;L\361\224=\033NF\275\327=d\274}7~\275\202L(<3c4=\243\242|\275|\025\343<\220\200\001<\377\301%\275\205\3524<_[#<\215\030\361\274\304O\000=\236\322#\272\243\r\314<\312\324m=l\000\363\273\004\370\030\274xtg\275\304\326\n=t#0\2751\262\217;\332\213\206;#\274\020=a\244{\275\214e\376\274K\177\302\273p[\235=K\022\205;b\033\213\2756\354(\274V&\200=BH\036=\323!>;\226\221\214\275\334\353B<\367\231\263\272\304L\214\274\272\272\035\2755Cc<\nH\337\274\360\3774\275\216R\213\275\366\001\311;\361\356\026\274\005\263}<LWa\275\323\236%=`\335\023<\341oo=\001w(\275\264\343\251::\337\325<\215\026\315\274\311\361\261\275\021G\247<i(\277\274\245\353I=L\235l\275G\004\330\274\017\355\026<\023.\002=o\310\253<~(\266=$O^\275M\341~\274\325\210\231<\016U\221;\252\326\032\275\214\"\225\274\340E\215=\256\207\361<\344\334%<\207\350\360\273\354Vf=2\252R<pL\013=P\326a<\265\t\010\275\306\2173\275\251m\020=\263\212\206\275F6P\275\245\363\305<\246IH<S:\260\275\211\367W=@\020\315<\271\\\211\275\254u\223\275zD\200\275\025\300\213<\017\352\200<\330D\211;\021b\014\274\341=S<\331\251\t\275\023\371\261=\244x\352;\"\034S\275\367A0\275\232\311\266\273\021 >=\312um\275\307\301\252=\273\353\217=\203\226\332\274s!\364\274\256q\n\274\033\014c=-(\347\274A@I=(\302\022\273\204mY\275\327\016)\275+c\023\274,\330\215\275\034$@\274\022\347\264<\374fG\275mI\235<VA\335;\020<\327<\023*\277</\256!=k\253q=x\220e<j\330Z\274\374YR=wM\220\273\345\026\204<\313S1=\217\'\216\275\000\371{<\210\346\320\274a\023T\274\310k\231;S\006\2049\240P \274V\265\360\274\266\315\222\273(`\206\274\241\033|=\177U\016;\267\360u<lrM=\345nx=\023\213w\275\234\227G\275*qN\275\210\304\304\274<<Q=WH\201=g\330\005\275\306>\343;E\376-=4M.=aP3=\344\235\233\275D\260{\275\204\3008\271\377{y=\026\255\250=\030.4\274[\365\240=\010|\234<{\206b=\034\237\"=\303D\351<\024\217\250<\263\363I=\232Lf\275/\251\247;\344\034\235\274\324\204Z\275\333\204 <AXM=Y\200I\273\037g\016\274\030\220#\275\2717$\275\324\271$=\024\334\272\275[\3173\275\350\320\314<{\2000\275\024P\325<\262\341\253\275b1\353\272\317^:=\322\227(\273\274\222\304<F\223\372\274\212\365\206:\207\034\'\273u \275;\033o\257=\237gZ\275\177\235\355<\027^,\274f\003o\274\0278\227<Bn\226=\272@\327\274\247\331\373\274\230$\025;3\3311\274\213s\330\275\324E\007\275\250\215\273\274^\2714\271\0040\215<M\r\204<\270\031\211\275K\270c\275\372\333h<\264A\210<!\2066\274\232\201\214<\312\377\366\274\340\370\005=kl.\273\330&\030=\315mC\275\022M\024=\364.\037=\205N\022\273\212Sm\274\366Dg=\237_\r\274\242(%<\027\337\222\275\304\221\342\273bx\365\275\307<z\273\214\321\276<\201\355+=\334L;\275\302\362\215=_=^=\0372\005\275\307S\237=vN/\275-\327\332\274\347\275x\275\227\3233\274\202\357\242=\234\264l<W0m\275;\306\225\274\363v\314<\240+,;\021\010\217\274w\034\003<\022\234\026=_\023\177=\367\356\226\274\263\276\216\275Y\213#=\310\347\177=\333\013\006=\374\215\224=\257\020\346<\274\375\'<D\363\334\274Zg\t=\235\213b\275\241T\274<\274\370\241=\241C+\275\205[K=\327\014\216<\276(\024\275\250\301)=\317\323\230\274O\000y\275b\3565=s\312\235\275?\231\221<\345\006\006<\272*\353\2740\361\276=c )=\360\336s=M\022t=\272\325\033\274\304\2206=\373m\245=\000\301\372\272\335A\221=n`\244<r\3354=\345n\207\2733w\276=\002N\264<\376\347\242\274YLk\274\243\373\274=h\203 \275\271\340t=\360\201\217\274\177|\020>\365\327\217<R\310;\275\013\345\251\274\273\322C=\254\265\257;]K^<\300C\021=\333?x\274|\221\206\275\343\312\274<2\264D<F\242Y\275\035\265\250\2744n\000=n\331\272\274\354\023\n;\235\022\307\274\353L\330\272>\207#\275\177\\\002=\007\014e=\313\"\n\275\004\250\225\2724\207\315<\372}A\275\356\242\033<\025qS\275\270[+=\333\006\322\274t\344\230=\2555\213\274\236BQ\274\020\306\274\274{\204\224\273\007\021\371;^\233q\273\255\377\232\274,y}\275\211\021`=5r\221<\023S\277\272 E\302\2744\322\213\275\340S%\275\362i\013=w\017\222\275\237\265\233;\013\265\350<\222\033{\274\256*\302<t\1776=\002\220(\273\022\367%;g\357\210<R8\267<Y\212\215\275\302\332\325\272\3751\276\273\'yT\275\027\256\200\274\250\261\233\273\3600\240<\014n\337;h\3403\275\277\321z\274\341M8<O\370\022\274P5\013\275\317\215`\275\256E\357<\327x\027=\346\343\214\275\323]c\274N\215\243=\226\312C\275\323k\210\275\242\301\254\2735\355I=`]\263<(\336C=K\241\200=\374\310:\275\266\013@:\267D\237\274\353\202\"=\227\325\253<\341\322\345\274\033\335\243<\356\025\004\275\265\t|\274\322\316\340\275\242C\225\275\353\n\007\274\341\357l\274x\311R\274\327\320\267<\262\364\030\275&\234\201=H \222<\006=\206=\240At\274\205Y\245\274?\244\016=\037\262\035=\377\202\342\274FAp\275\362\353\233=kJ5<\300\022=\273\337\342\235=\023X\233<TY-;\036o%=\334\032U=\177\267q\275\005\251\271\273\335\301c<\243\n\024\275\230V/\274\245\353=\275m\204P<\340V\320\273\261\257\221=yX\271\274\262\274X\275\035\037v<{\313+=\247\022\001=\361\317\206=\207[\317<\t!U<\322\177\365<\204W`\274\223\320\354<4?\344\274\364g\204\275\213&\243\274BTd\275g\221\223\274[As<\000w*=\316/\200\275\212\037q=BO\213<\343\016\272<\272\234\331;\367\214W<\350\300P\275aA\313\274\373\2656\274\000%\177=\235\2144\275\276\365\033=71\242;\n\241\375\274\330B\335\274\201\312\372\273\017\032^=\346\344a\275\270\216\227\2742\245\007\276\254/\031\273\244\255\010=\212\201\213\274\207\375\003<\322\252M\275$\375\323\274]\346\003\275DZ\316<\271\004D=\236w-=\240\341I<\323\266*<E\200\264\275Ks\217\273?\004\305<\\A5\274\206LB<Q\021\312<\006\327\303\274\307p\215=\373p\301<\202n\253\273\346N\025\275:\220\257<\326\327d<\020\276\221\274\367V\244<zu\0178\242\017\337\274\201 \215\272\033m\005;]\347\256<KM&\2758\017 =\017\274X\275\007\364A=\267\312\240\275\'\211\217\275j8\215\275Sv\376\274\014zF\275\242\007\242\274)\357\014=:\212i<k\200J<\245\256\266\275K\023H=(W\243=*\nR\274\204\310\267=\314\300O=\230\201!\275\224j\233\275%+\214\274\341\360\017<c\247\246={=\200\275\300\322R;\352\021\244;\217\325?\275\257\222.<\224V;\275\251\210\261\274Ujv\275:\365\346<{9\261\2751A\307\274\031\257\221\273\016.\016<5\315`\273\303\312\366\275\254\037\217<\371\231H=c\225/=\377\207P=\3656\231\274\330\330&\275\361k\264=\304\230&\275\215\207\341;z\347\313\274F)\260\274n?\244<\202\325\213=\\\335\210=\234\031z<\310@P\275nF9\275i\031(=\177\204\006=?i\'\2754\025l\275\"\260s\274\325\204\353<I\332|\275Z\036\260\274\0143\200=\244\000Q=\350W\356<,\177\355\275u\035\r=Go[\274\315\304\301<\312\366\202=\213\342c=\267\220S\275O\341e<\300\372\332<\322\327\r\273cT\224<Ut\217\275\032i-=\006\n>\273!\344[\275\240\314e<\217\252\200=t\265D\275{\027a\275\021\241\027\2751\364\207\275\006P\346<\267\375\030=\334\304\'\275\035\"\021\274`\025J<\240\237\210:n\261\250=\342\010V=\\\270X=\375\343\213\274\256\362\003<\017!`\275\313\370\277<\251\036\236\275\032xZ<Q\306A\272\206\022\224\274\276o\363\274*\257u=\262Cs\275#U\001\275V\336\314\274\256\235c\274\230\250\265<\352l\271<\224\317\251;\244kT<\014\211%\275\3635M\274\277y\360\273\222U;<\370p\220\275\220\034\323;\035h\010\275)\352%\275\232\'O<\355F;\275H\207\226=I8\000\274e1,\274N\326b\275\032$w=\236Q_<\001c(=\033^\266<\032pD\274X\214\007\275Roe\274\221\205b\275\010\n\232\275@\376\007\275\301\224\357=\330,\326=\355]\355<m\353*\275e\0103\274\032q\207=(,\343<\260\010\017=\t\030\232<\317U\203<<\025_\275RQ\250=>{\305<a\240\226\275\364\375f\272\204*6=[\247Q\275\230\247\275<;\273\344<\265\275\335;_v\331;P!\341\274\315\345\342\273F\227\216\274^rz\275y\020\242\274,e~=\340\217z<\227\326*\275\257kG\274\223aS:\373\013\206<\271?&\275\212;\264\274\211\002U<\200+\201\274\346y\032\275b\237\017=\036\230I=\021vL=\305\265\240\273\200\352V\274\252O\007=\"U\003=\253$\321\273\\\371(<\335\000\366<\251,\000=\363q\357\274a\220a=\332\271j=\301\001%=6\266h=x\203e<K\000\323<t+h=\326hZ\273\3151\313\275\001ik\275_\3028\274\333\351\255<\253\260\213=\333fD\275\223\320\006\275\006bk\273\027\0226=\310\252\341\274\347\343\344=\370\272?\273\345\356\006<\034Hz=/\344y=\213\364\255=\302G\"=G{F=\271\232\314\274\t{\212=\003\\\250\2752\034k=2\3326<\n\262\313\273j;\252<~\232\256\275hNc=\245\260m<\'T\235=Z\250}=\025ME\275<\231?\274\233\366\214\275Y\345\004\275\'E\247=\240n\204\275\263.\\\275\324\233\017\276*\251\331<CV\204\275\331\352_\275\360\033\225\274\010\366\324<\006\343\266=\316gU\275\000B\306\274\001\266\241\274\275-f\275\2457O\275s\002_=\334O\275<*\306\333\275&\375x\275Czl<\024{(\275{\216`:\235\032\006=T3T\275\302\311\216<-/\365<\252\325<\271i\353\037\275B\217Z\275\017\002\003\275g\342\324\273\003\201\252\274n\367\353\274U5\323=w\374\"=2Dl\275\"\317x=\234\301\246\274o=\217\275\005K\306=\205E\204\274W!n\275\324\247\377<\326\326Q\275\203(\343\274[\365\257=.\257<=\334\220-<\216i\323<\250r\025\275d$\013=\366\234d\275ZN\205\275\034\306G\275\371E\321<\242\203\017>\314\307G\275`\317\235=\"~\033\275R\343q=h\372\300;z\216m<T\253\214\274!l~\275\350\243\302\273\216\230\333\274\033\030\255\274.p\373\274\273\262\276=>\\\366\274$#J\274\000\347\306<T\337\342\274\260\202\263=\361C4\275\034\207\210\274\t\247\260<`[\032\272\263\226\375<oA\320=F\220E=\3508\024\275\222+\340<\254\355\356<\323\264u\275;\330\263<)\t\311\273n\222\n<|O\302=z\304\320\272\350\r\341\274\377\367\303\274}\023\023\275\023\017\202=\237\237\362\273\227E\315;\350\307\004=lp;=\377\277\373<@?\201<#\217j=;a\'\275\277}\214=\001?\250\273\301\332\262\274D\014\250=_\363\352\274\t\330\223=\0349\017<!\230x\275\367\227\262=\242|\254\274)\"L\275\365\356\202=\376\361w=\231\031\306<\374^\352<d\345\277\275\301V\344\274f\271\201\274Md\021=\273\n\331<\037\021j<\310\3723\274L\310\367\274U)}\273\337$C<\363\272\374\274\\v\254\272\250k\010\276)\221\351\275\201\362(=Z\022g\275\341P\017=5\021\356\274\245Qj=f\\\014\274\266\220_\274i\322\216\275\313>\310<\016\215\370<\347v\256\2740;\355\274,\257\264<V\202/\275\257J\300\275\377\014\017\274\364\315\350<wv\231\274\354\224\'=\244P\346<\361\313\255<o\r\230\275\300:r<uQ\251;]#\360\274W\230\023=\357\347f\274&\327\361<\255k\206\2754H\023=\204S\301=\004*K=v\244\372<l\001(<\326\345\200<\304\033\333\2740\201\027<\377\202\274=\220\213\264\274Ra\317\273\371^H\275\315\007L=:f\317\2745\235\031\276\266G`\2738\320\237;\331\362\021\275\342\247\207<\367\305W=\177\274>\275\2353\230=\304\010\301;m\310\t=3\227\313;Y\214\201\275\376H\220\275\313\314\226\275\275\356\342<\003:$\273\001~\376\273\247\234\212<\322|1:R\265n\272\031\211\222\274!\362\340\273[\312\236\275\361tX<\317R3<\271<\366\274DZ$\275\257\260\023;\254\272\t<\350\241\347\274\3025@\2758\326,=\250nL\274\260\240\307=&(\037<\343_\224\275|\004O=\323_\324\273\314\034\023=\262\374\222\274\3716\271;;s-=\023fE\275\225L\226\275\230\260h\272\366\365\237<\215k\030\2753\240\323\273\272\242d;\036\025\270<R\340\222<Y\206z=s\325\364=\266\373\017\274Y\026r\274\340\210\304<\3174\253<\247\235\255<v\223\035=\363~\t\275X~\223=N\204\270\274\335a\251=p)\271\274 \216};\221QH<\273\303\252<\310 S\275\240\273\260<E\023$\274;F\250\275j\275\204\274\236\321\203\275+\233\244\2754u\341\272\t\232Y=\235\366\276\274\014\036\262=\257\020F\275C\022\225\274\022\341\225=\003\030\254\275m\302\372<(\317f\275\017d\252\271_0\205\275\315\211\275\274\220o(<\257C\013=YJc<I/\376\273\004\355\210<\375,\334<\037z0\273\013r$\275\350\263\344;\216\355n<\246j\"\275WI \275\303\354d<\204\260A\274\270\357i;>I\272\274#\014\355\274\266#@=\'t\335=m\343\r=@uD;\255m\340\273\345\031\204\275\325\315\225\274\n\037\336=S\022\261=%\2377=\255$\006<P\035d=K\001j=.\242?\274\313Y_=\275JK<T\352\252<\363f\314\274u\000y\274 \206\033=\317z\307\275mmK\275#\337\266<\374\017\353\2746p\234\274\227\017\262<[\001\003=Q\232\243\274\033\356\351\274\276\345W\274RA!\274\035j\270<\354\274f\274\247\310\036=\206\346\t=\236\025t\2745}_<l\361!=k\364^=\263p\033<\316jt\274\252\306\213\275\207\307A=Rc\271<\t\317\003\275\2729s=\337hn\275\220Y\237\274\241\326(<\\>\024=\226S=\275\247\3112=\344\200\230\275\235\365C=\007\242J\275\022\254\217\275H\373\213;\037u2<?\',\274t {\275\014a\373;\275\372\334;,K\310=\303\212\243<\225\322l=\031\273\201\275\347\030\007<\'\3232=3\3048\274\\n\325<U\272\230\274\303\200E\275\365ss\275W\332\327;\030>g\275\252\370=\274!\"\371<\341L\001\274V2\205:GNm=b\353\243\274\306\2508=\262\326\211\272\343\271\206\274\217.d=\373n\235\275\321\206\334\275=o\377;U\026\"=0\201\311\274\274\303Q\275\357=N<=\"o\275S\353\357\274\340D\374<\370\271d\275\353\230\014=\'D\377\274\243\346\177\273 cP=R\261\206=\003I>\274&\257e\274U\321h\274\030\223\247\275C\232\304:x\310/\2753\274\304\274\031\205q=\221\010\216\274\350\243\246\274;\013\267\274\340#\212\275\361\277\365\272\332\026\276\274\261\344\t\275\026\001\200<{5\270<~\210\320<\357\273\264=\237\361\014<\361\234!=^\333\220<\311\367\376\274F@\"=\274\215\377<\237\035\272;S\204&\275n\037\334<\326\262\200;h|-=\234!\247\275oU\276\275;\277\\\273J\373\r\274qH\210<Wl\r<\037B\022\2758d\345\273wM^=9e\031\274\247{\027=p;\216\274Q\'@=\265\016\033\275-\301\355<\3207\200=QW\354\274\316\250\212=\2433\270<S\200\016=Y\237v;\370\3665\272\353)><\337\206\224\274\373\006\204=\0031\223;\265>\031<\320\365\352\274<t\223\273\231\352\254\274\312\352\202<\321\314\r=/\375f=\375\261\370<\332\346Z=f\372\r=\372\324K<\320\222A=]8\345<\335\327\001\275\002^\005=\024*\376<^\017\001=\251\340\246\275lT\200=c\213\013\274\r\372\223\275\023\306\337\273\351\201\235\274<\214s\274w\347\344\2746\367\265<\305\201\201=,4Q\275\031A\024\274\316\234\374<\177SC=\014\245V\275h\210\034=*\033y\273!\230q\274\202\251\032<k\213\276\274KX1=\315\204\244\275\270\034\377\275\346\314`\275~\220\033\274}:S\275\256\017\375\274{\353\225\270\341\252\002=\023P\007\275\357\317\202<\017\022\366<\261\320\177\275 \3558\275\231q\211\273&@\267=%\037)=\201iC<\260\327\237<>\247;=\n@\262<\323>S=y\305\203\275BI7\274\375jT\274\177\001\212\275JL^\275x\'b:E\032\352<\021k\215=p\273\204\275\2353\212=\243\025\037\275G,\007\275\351\275g=\372\302(=\2703\302<f\0221\274\032\263\032=\370ie\275%\264\004=\364\247[=\256v\201=a\253!\275K\370v=\230\007I\273\234\266-<f\353\204=-\231\337\274+Qf=\023\265\013\274@\n\353<i^\250<#\003\370\274\272\344\255\274\370P\265<\311\375\001<\225\252 =`C\226=n\374[=\334\203\221\274\251A\025\275A\037\322<b\377\377\274b\351$\275%n)\275D\210\016<\365L\002<\361\242\260\274\330+u\272\311\377\240\273\340\316\271<o\243\"=en:\275\266g\231<!r\232=\027\345\033<\020c\324<\307\323;<*\372R= k\r=\251\343\000;b\244f=\330\2671<HGx=\345@S\275\373\017n=\273\242/<]\2212<4\371\233=\227\017\244\275\250\014\264<\254F`\274rU\'\274\300\024?\275e\201\206=\265\224A\275h\205\365<S\0107<J\030\322<\2308\177=k\243\267=\013\270*=\242.\010=\341\346\202\272[\340j=\007\252\237=\\0\205\275\372\035\230=\370c\326\274\256a\236\274\013|3==\327\221=\310d\370\274\250\351B=ssW\274\0069\367\274\330\310\312<\344\233{\274\273\222\203\275r\'\033\275\022\341u<\354nS\275b\0078\275/\362\255\273vP\310\274\266\033w=\236\037\201\275o7-=t\240\305<\371\234y\274\355\354`\274D\264\024\275\342\231\024\274\215\257\214=\317m\255;\t\275\272\274\350Fy=0\342-\275$6\217<\243\304\212<\005\005$\275\302|m\274\244\320\362\274\253\022\210\275\t\004\305<\014\255^<\320\2339\275\301\303\356;F\243u;_\311\014\274\231\346\245=\006o\253=9(B\275\007L\245\275\215P\231\275\003\213\312\274N\276<<T\252\301;l\304%\275\354!\260=\210\337>\275\344\230\207<\317\037\215<\004\267\337\274\217\271\207<\237\034\271\275\004\"\032=\241\215\371<\254+/=V&\t\275\021\247\357\274\241o\334<\205\317\020=\336{\311:OE\216\275\025r)=>v\024\275\261\211\346\274\267t\202<1\014\353;\3359\223\275%\245j=\373\004\326\274b\375\264\274\273\263\'\273j\0070\275\322\020&=.o\330:\020\352~\275\355\232\016<K3f\275\243\275\300\275\2239\010\274\207G\307=T\357q;^\236\212=\016\256\270<\343\204x\274\345*O<\202*\233\275\300\331\227\274\254\335\205<%7G<=\301\213\275\277\364J\275\202\246t\2756\330(=n\035]=x5\217\273\265H3\275<{\235=\234G\016\276~\\\023\275\310\277\314\275\330\006\200\275\\\377P\274\323#\n\275S\275\001>\212j\266=\231lB=\333\025\212=\226\303p=\253\342\333<\220J\222=\177`>=\325i~=,\247\026=Y\017\365<K\246\250\2758%}=\300\210n<\006\340[\275\2728o\275D\241\220\275F\274\207\275_\305\301\274R\3648\275\016\004/\275\275\004J\275\275\'\010=\235o\001\275\303\034\354\274\267f\377<\277\321\371<4\247\310<\305\326I\275\201\334\000=\274l\200=s>z\274\216&\356\274\301\316\332<T\334o={\214\224\2749\373\301\274@\316\007<\204\317\225<\031\361S<\016e\313<b\343\315\274\304\337p=\370N\323<\357\233H=\244\025\002\275h)\206<\r\271\273\273Q\031\247\275\235\237^\273\304Z\220<|\260\322\274|\300\'=c\310\021<?\2472=;\005@=\354\2558=\363\001G\275\331\321\326<r\201#8\352\342\311<\273\236\347:\223hn\274\225\202\353<\234\243\210<_;L\275~\371`\275\203\t\256\275U2\206\275*\366\031\275\310\023N\275%\234\r<\272Lw=\254\0038\275xZ}=\227\255\017<\367 \220=f\010\3649\340fw\275d\002\216\274\036\304\207\275`\266c\275\243%\030\274On\"=)\244\022\275\235\013\254;\265\336\372<*\007a<\027\241u\275\263\351N=b\224\252\274\313i\254\275\243\302[=\253\355r=`\274\"\275\n\177\236\275xm\241<\334o\253=\277\177|<\314\\\327\274\307\365\223=;\341\017\274\336\224\250\275\211\227\251\274\010\006 =\375){=?2\002>\301\232\222:.\330\341\274J\317\005\274\271v\340<l\320\200=\264U\025\274\256\005\202\274\215G\210\274\223\274\017\274\224\275Y\275\230*\010\274\365\3568\274\267\217\326;\251\3513\275\026MA=\020<\000\275\207\177c\275\203A\201<\\\305\034;\303M9=\314a\357<d\232#\274\370\367\r\274\374;\016=\274\260\342;\263N\3659\300`\036\2752\376\345\274G\370\375<\221\324\223\273\264\300M=\235\365\373<\375\206v=\324z\027=G\350\215\275\321\262\206<L\300=\274;T\004\275\340\252f<INJ<\357r\010=\t4\346<\211\301\212\275\375\334&=\233\200!=lYP\273\364\310C=]\007\340=\231\031\246<\341\227i\271c\225`<\3159\350\274\321N\245;\316,\353\273\010\'\214=\004\030\227\274\213\177\203\275}{\317\274\r\017\250\275\335\006D\275\332b\374<\210\260Q\275\035\365+\273C\2233<\353\304\n\274U\357\002=\"v\021=\201\'\244=\207\344\247<m[\013\275\031Q\261<`\266\353<\267\213\315\274\341 ,\274c\253\332\274\353\356\221\274\267\177[\274\342\205,\274.5q=h\006b\275\203J\260=\334;\207;\344\210>\275-\036\335\274\340h2=i\2366=\033\346\026\275\0140\017=x\271\302=\276\004\003=4\013\014\275iH\276<\376[H:\302k\201\274\237\212x\274\276\014\017\266\rf\321\272\032`\"\275\274}\013\275\003\300\217\273\242*\350<\030\200`\274\244\254\005\275\346kQ=j8\275\275G\003\271<\204\373%=\302\314\376<\300_\355\273\"$\305\275\262\367f\273\332~\017\275\332\241\207=\230\345\037\274\275\207R=\006\t3=\213\027g=\331;F;\242\317\211=\302\357\330\274\342\032\"\275\367\371\214<\344\271U\274\304Q\224<\037.\343<\006\313w;b\306\347\274\237iM=J9\242<e\362\262\274v\302\256;\006\365\346\274\240\320\265\274\300\207 =\254`=;\223\226\025=\212;\221=!M\307\275\314\216\352\274\234f7<\237\274\327<\342\202\214=\177\334<\273\323\3659\275(\024/\274S\234\037\275\264\203\002\275\230-\n\275\370\017\220<&\002@<\227\377\216\274\276\"\035=\360^\210\274\257\320\260\275q\367\211\275Glq=\303j\242;\320\0077=\246/\016\276:@d<\':(<\212Vv=\376\025\n;\341z\227\275p\257X\275\275\207\236<\301*%\274\372\343\341=p\322)\2754cq\274\257\026\033\275A\233\001:\247\007U\275\rn\236\275\233\370/8\275\263N=XW\025\275\201r\334<V\033\003\275\000_t;T\316\270\273\316\311Q=\301\3115\275\345\006\"=\201\202\333;\252j\211\274\025\256\376<\246\241\340<{\245`\275z\301\311\274`\301O<\201\272\021=VXU=\027g|=\3470Y=\273F,\275\031<m\275\007\362r\275\270\004g=(1u\274\'\201W\275Zm\356\274 OY\275\321\235X=\247O\025\275%\247\242\274O\347\022<\316\017e=rbD<\3268\336\274\351\373\343\274\215~\351<\010\236\230\2744_\331<\003\343\235\273\347\320J\273\003\"\365\274\270\271~\274&\305\005\275#\017\304<\004nr<\260;\005=\311Q\226;\250Kl<\376\016\037\275h\377\271<\272\0176\273\260a\305\275\350\021\027=\330\247\267\274\342\277_=8\035\345<iu\006\275T\274N=\367\031\'=\362T\016=\315\257#;\034\344\364\275\024u\215=B\023\277<\231\237o\274M12\275\010\202\211=\277\352>\275\205R\270\2739\003\370<\3212\217\275\244\225R<Y\213\227\273\026f`\275\350\376\244<7\226\014<\253YR\274\222N\375<YcD\274]\246\207\274\021\0260=Ec3=\270\010\036=\215\225t\273\351\264\312\274l\255z\275\313\210c=\256\202\017=Wh\240=\330\030\207<:\210\246\274\241\273\201\2747\363\331\274\274\245E\275\221\373\006\274La\r;a\250\006<\377AC<\262\235\221\275C\376 \273\037\311\346\275!j\346\274L\362q<\225aa<\325\330U\274\251\243\342\274]\016\177\275%\202m\275\303\023\323\274\276\231\034\275z\314\252<\2626\236\275\024\344\000=\261\324\236=\005 n<v\022\360\274\314\371\";\326\202\337\274f\252\327<\362Y-<\204e\265=\004\264\347\274\232k6\275\033\357\305<\273\3330=\332\245J\275{\367\005=U}\031=\253\331x\275\342%+\275\005\212\033:\361\326x\274\317\357\202\275\\o\331<\201\335\253\275\271$\215=VKC\275\214$\313<\005p\272<\245\274\300\274\323E7\274\202\275\371\274\007\353\266<\210\021s\275\315\320*\275fE\275\274\205\247B=\344\337\003\275m\232\245=aJ^<P\n_=\377\340P\275\267\250&\275h\247:<\315d\200\274^%P=\345\252\r\275\324|\033\2750d!\275\033a_\275\232\251A=\273\025\245=hZ\032\275,\"5\275g\356\224=\215\322K\273\037\303\322;\2218\232\273\300h\214\275\200\316\311<\006l\254<\002\320\010=\324\016\177\275q\034\325<\017MI:\376v\261<\014\021\306\273\213(\226=\374{\330\274\363\"\300<\361\254#;\313\310\345\273\253s\271=}<\274;m\2471\274\217\247\205\274\032\311\351<F\277Y\275 \304Y=P\006C=B\302\300<67\004\275;\\\217;~\235\202=\354\277\235\274i}\332\275\\*\360\274^\024V<\200\310\360<\217@Y\275 \300\002=\230\177\375\274\265\t\217\275\024\032\237=\357\375\233\275\201_/=\226%\n<\302\317\343\273=\224,=\007\253\271\275\0174\034\275\023\013\2779\342\241\215\274d\204I=\243\327\202\274\305\271\027\275;P\363\2757\003\375\274\272\\(=\311\362*\275T$h=Im0<%]\225\275\2222\277\274\336\234\200\274,|)\275\303\374\317<\264\2121=\270_;\275i\306\200\2753\223\354<\272\305\032\275\352\370\225;\272\313\013\275\017DA\275\301\237\255\274\255I\025\275 q2=\037|\365<+\322\314\274\353\332C=\025\244\212\273\373\036c\275\364=\321\274#\013V\275\274\276\215<\372T\003\275\271\311\213=\213\357\261\271\234d\315\274\227ns=V%\304\273\300k\016=\363\232\177\274\036e\210;:N\254=\305\361h\275\n\3453\275I\035\212=+\232g=\024\027\222<~\234+=\"\303W\275\t\246\241;\253/\223\267\237\304+\274\343\2504<\252\231}=\013:q\275\367\260\033\275i\201\305\275\327\205y=V\277M\274\241zE7\367)\017;M\365C=\271\270\320<\035s\201\275M\216\032\274g\364Y<\243\324\035=)\340\331;&\212t=/mj=\230\230\306=b\241\254=\325\366\003\275X\313\204;\t\007\241\273\242<\254;\032\3706=\r\363\247\275p\223\220\275\250.T\275\031L\232=^\373\t\275\323[\357\274\360\346L<\215i}\275\225\232,\275\205\357S\275)\2725<\256v@\275\374f`\274\323 \231\274\361\2112=]\340m\274\210V\236\274\317*\027\274\257\373\246\275\r\226\236\274\347\374\212<q!\013\272o\370\325<\232\021\227\275\035\331K\274\365:\376\275\274\313\004;\213\030\250\275\373\376\241<\326\275\365<\300R\221\273(\206T=\030~7<oh\313<\237\001\374<j\315~<m\262\013\275\276J\376\274R\354\301\274\334K\000=\213]\216:\303\233\254=\256\n\203\273q\"\234=\306j\002<hjZ\275\323a\014\275\221Jb=q\322\211\274\347\347\213\274e5/<-t\324<\303\350\212\274\336\232A\274\025:\360\273z\3479=$\313\274\274_\327H\274\\\370\310=\346\252\302;\250\031U<V1\331=sRN\275b\020\211=\340\312\330\275wV4\2755\230\271<\016\272\332\274\201\221F\274\235\021\013\274\367\0304\275\311\237\002=\312\210(\275\303\353<<!H\221<\247\262g\274\334\346\032\275*?K\275J{E=#\0072\275\245\207\001\275%\316_<\207.%=]VG<\365+3\275\321 \301=Y\326d=\326z\220\274\265\330C\275=?R\275\022\221K\274J\255\277\274\007k\n\275\227\205\254\273G\233_\275\225\rw\275<\367\023=vh\312\273\033Q\324\275\337#\r=q\345e=\316\215\266\274p\246t\275\267\231\311\273\023\310)\275\254sV\275\337\n,\275o\222\031=x\226\026\275\367\353\306;&\246\024\275\255(\255<\t\340\215\274{\2569;\365Q\255=l\244\257\2741\374\022<\342 \300\274\307\031\311\272\274gt=\301\313j=\025\335w<\362V\216=\327\372c=\030\375\374<\222\271&=\202\230W<\010\346\232\275\030\375\250\275C]\305<\251Gk;\016\250\270\274\201&\034=\265\340\007\275J\227\274=TL\232\275o\014-\273\204\345\324\274\253K^\273s\323D\273\335j\014\275\300\241==cM\260<o\177\'=\364\276\221<\275\007\001\275\372\005\004=\235\372\000\274\3324S=&\222^=\270\021\200\274X\243\n=\016Pm=\225|\037=x\333h<\022\241\264=\330\273c\275s\263\003>l\240\010\275_\343\363\274BU\325=\211\2667\275\005\227\021=\323\3725\275A@\344<\364rH<\236\220\331<5\353\211\275\276\213\220\274j%\005<?\370\253=\312\237h\274})R\275\206x2<9\253\014\274\325\367\227\274\374\221\245;\204 \2539\263}\255;\'\265\376<\376n\247<\243\206{=\221=\016=\215\320$=\032\024\034\273\362\212\236\275aP\340<\353u\355:A\026\376<j\315\373;C\321}\275>c\324\274\314\214\r=\271\342\343\273\270[\364\275\355\223\233<\32504=\351_\240\275\362Ts<m\001\366\274@\243\312<\225\262U=\374\016\016=\025\273)=\377\357\253<\273\330\227\273\364\022\274\272&\322\025\275i\224\264<*\377\r=\t\230\023\275\234\237\333\274)\246\200=\004\345\205<\303\000\277\274\240\271q\275\3464\250\274\004\017\202\273\212P\213\274\350\004\223\2739\216S\275\202\210c=\270\306>\275\035\321\316\2750\030~\275*\244\003\2753_\017=\271&\353<\252ZR<[\005\006=\342\353\022=\346\264\317\274\350\255\"=\031\362\006\271jG\267=\324w\021=s\340:\274\241\375\'\274\323]Q\275\311\312\330<\221c\303\274.~$=\240u&\275Y]O=\317\316.=\371\342\213\2729\275\244\274\"\353\210\274f-P=\020\313S;\315\"\272\274qp\330\274c6\342=c\0225<\234\221\240=0z\222=\305\202\033=\177\244V=\217\347\032\275\003\325G\275\016\355\227=\215_\272\274\260;\225\275Ge\341:\013$^\274\217\001s<O\362\315:\305\257\261<\002$\235:\364\'$=\2422\'\275:I\313\275\251\242T;\264<\033\2759\t\207=kH\006:\'\306\223=\035 \215=\036\314\t\275>\205\323;X\276B\274\324f\231<\337\347\013<\255sp\275eb\255=\374\221\334<J\333\343\274\032\374\377<\205Ne<\316\204`\274\032\355\025\275\261fr=,\204a<\037H\254\274\200\263\026\275\'\321\213\273\352\207\310<\207\310-=\245\353\014=\353\231\366\272\261H\000\275\240\t\213\275\203\2311\275\014\205:\275zg\312\273\031z\002=B\301\025\275h2\004=?\232\000\275=\020\276<\311\364\025\274\253\257\241\275R\t&=\270\226;\275C5=\275\245\036\021\276U\222(=\321N\231\275\230\306\271=?q.\274\3325\020=M,\256<o\374;=KyR:\242\003\245\274\212\034\201\275\034\340\307\274\316\217\366<\375\321\035\274\204\225\010\275;\315~;\200\210\233\275bo\t\274\031\2025=#OJ=aaK<\236:S<\215\027W\274Z\027\370\274\257\310\203<\317\032\251<k\r\376;+a\303<\375\037\265\274S,\210<\323E\315<\325\"|\275j\014\023=O\376;\275\317\247}\275,\037\036=\025[\306;9r\322;\342\330\202\274\235pb\275K\213\274=&-C=_\337\177\274&\324\256=\230Q2\275\004\374\224<\341\r\211\275\001\306\t\275\027\206\333\274\375\377D\275\0007F=zv>\275\240&#\275\254\367-=\227\260\026\274a\376\206\275\316\222\216\274J\301C;\177\257\036=\305\345\250\275U!\207:\'\305\251=\264\225y=\343\312h\275\026\024\252\275\213\032\205=\322\210~\274\316\301N=\224*\262<\327\227g\275\252\3521\275E\205\013<P\201\024=>r\224\275\354\r\036;#\330\'<Bo\361\274\264O\022=4\315\317::\217\262\272*\214|<\377~\210=>\002W:\335\004\214\272\3026\234\274~\0133<\273\232\016\275\002\236\215\275\r\375j\275H\255\305\275g\263\313\274\277\344z=x\214\235\274n\005\027\275\266}\231\274v\223\207=\256m\253<\030\316,=O}\205\2757\303\024\275X\343\377;dP\n>`\3466=\205$`\274\221\322\224=\370a\352;\357\255!=\372\213\202=\334\366E\273\260\271\213\273=<\271\274Z{\007:r\233\255<\220\332\202\275\243\237\265<\022\251\317<\316~\317<\244v\213<\222\3537=S\232\216\275\037l>\274J\276\020=\341$\225\274\346\306\"\275E8\367\274q;o<\242\373\217\274\334\202\316<S\371!\2758\240\226=\233\rB\273\205\246\356\274\215\317\206<\366\311q\275[-R\275\205\014\2447\273\252\270\275pyd=Q\275\003:q(J=\216h\353;\337\262\236\274\264\204u<\365\3207<\240\037M\275\022\001\360\274M\254\225=\366\t\222;W\016C\274\326\263\005>\321\216\211:\326r\013\274\026\326O<\235@2=e\240\020=3\355Y<\250\372R\275\226\254\252;;\3760\275\032\232\337\275\206\364\213\273\"\035$=\225H\271\275\247+\330\274\340)\227\274\345\354L\275\020\214f=\212\247\372\274\312?\376;A\031\021\275\264\362\362\274\206\215\227=Ak\355<\222\020W=:3\021>\251\364\210=\217\346.:\rm*\273\371\013+\274P\371\277<\250,\200\275$\353\263\274V\301\214<\371\3269=\254l\301=T6\204==)\375:\303\333\224<\270wk=\327\341\030\275M\363\003\274x\037\023\2755\347\254=\364\304\227\275,\032H=F\000\310\274Y\272\033\274Mf$<\2354\251\274\023\241\232\275Lh\351\273\207+\200=\2612\023\275\257\006g\274\200\242\206=\263}\312\275\253\347\027\275\236\t\352\274\026\031\357< \331\244\274\306\315\261\274V\013\302;r\010h\273(J\203=J\316\201\275\316\224\367\274\365\317\227=0\321+=\206\213\217<\234\272#\274\255E\024=\305\346}<o\250M\273w\303m=\347\034\215<\237\236\020<\036>%=))\013=#]D\275k\257C\275\367\224\027\275g\357\241\2757\024\337;.\370\351\275\222\005\235<\266\226\245<\366?p=_\255r\275\316i0=\253\032\322\275}\305w\275#*\242=\026\211V\273\020\215\037=\242\244\001\2758\223\244\274\303\265\n=\332>+<\025\354U=\377\301\033\2748\234\312\274\311\302\031\275\251\270;=\315\337\231;\233\277\215<t\260@\275\223(\016\275\233\211F\275\010iu=R\300\255\274\2623\330\272)q\n=S\341W\275t\363\306\2744c\222=\247\332\221<\321\372\300;%-\013\275[6\337<\277y\366<2\341\215\274\223(\n=\201\230\350;\205\305\030=\334pF=s\262\217\273\231\022\355\274\356\317\001=\376O\341\273c)\230=\332d\263<Nw>=\210\023*\275\207\210O\275L\023\241=\312S\027\273R=p\273\271\026\006=\205U\246\274gP%=y\267\373;\234\256\024<\314\252\270\275j\245\335<\210Jv\275\324_\242<t\327m=q\352B\274\243\270\361\274\255\334\202<\250[\277\274#:\331\275\0245N\274\261\316\355\273)\013\212<\275\t\307\275\214\220a\275\314\347\301\274\320\317a\275\217\034\344\27399\326\274\022\360!\274\344\2100=\321\004W<K|\230<\323kM<\216\3061=?R\027\274\337\347\274<1x$\275rb_<1\243\205\274<\"4\275\222\262\242=r\312I\275\254\300\262<T\266Z=\311\253\376<$,9\274?\276\206<\033\326\254<\250\301@\274C\261)\275\245(\215\275\364$\023=o8\226\275\273 \017=\001y\035\275\2568\210\273r\255\215=\212\250\221\274L\375\007<\225C\345\2733\023&=\325]\r>[\341I\274KD\303<V\356\215\274d\245\313\274\253|\026\275v\006l=\310Wo\275\240\255\210<\333\370\237\274\020\273\310\273\035\206\262\274\357v\031\274!\327r;\224\216K\275\245\231e<\337\361\206<@.s<\341\273\356\274=\3121=\320H\317\275}\215\036=\2234B\275\367<\365:?\261\177=E\225^<wU\205=Z\207\344\275G/\227\274\360B\266<\203\223N;\250\256\027<\363A,\274\267\362\266=\364\215\223=\241`#\274\2449K\273\335\3612=\023Y\315\27312o\274D\326b\274\256\273\313=#C\001>4g\311<7\237\245\274\340\264\300\273?\215X=s,\323<\375J\022\275u+\205\271]\267\202<\035\211\261<\206\366\223\274\016\354O\275\330\216d\2755\321\003=\220.\215\275\250\031O<\302\211\220=\337\374\217=-\235\241\274\177_\022\275J\331\316<Il\365\273\212\343\005={\007;\272\3144:\275\322l\200=\227\265\320<l\214+\275\203o\211\275\352\271D\273&NL\274732\274\025\024\236;I_\207\275r\330\322\273Cl\n=s\347\217\275(\006\230<\327V#\275JK\006<\211I\236;H\030\206\273\222\022I=\351]\214<\233\347\304<\007\034\227=\242-\310=3\365C=\241\254H=\237w\333\274N\rr\273\010\370L\2751\376\244\275\325\036 \275\331L\376\274\203\033I\274>\227H=\334\364\213\275\253\010\230\274|[\337<\314.\027<g\262\212=\3556\310\274\336$\013\274~I]=\200\0074=\270f\201\275\2137\377\273E\t*\275[t\353<8$\347\274\272\257\214;\201b\224=\236\217-\274\261%\317\274gO\373<!\1774\274\246\0260\275\213\243\034;\000\340,=\306\340\203;\035\023\323\274~\344\254\272c\313\217<\306\327\275\272\256\r\250<\336y\315;\200{\260<;\275\351\274\314\210\305\274\334i\246<!)\262\274\241*\226\273?\374\330\274\347oF\275\307\352\025\275\206\233|\274#\205]=\363\315\3238x\242\312\274\260\037\037\275\211\200\001=\216\230\016=$k&=$5f<\004-\014<\321\303\305=\0051\241\274\027\014E<ZT\235=\272p\024=O\241\003=y\340\'\273\272xK=wNo=t(\007\275\335h\004<o\241\337\274_W(=\257\361\247<M\241\314;\276\004\316\2756{R<\005\333\332; \376M\275y\240\236\274E\236\316\274\330\376/\275J\255\207<\201t\353<\022\353\030\275\306q\235\275x@\271;;f\003\274{\212*<\315\360\307<\030\266\327;\335\252\300<4\367(<[\325%=\364\234c\274\036A\324\2746\"\236\274\033\204\243\275\352\372\374\275\303\036t\275\004(\034=\2359\230<\355NZ=Q4\223\275\372\250\204\275~%\202<\364\037\236<\007\"\227\274+\325f\275q=\253\2744qF=\311x$= \314!\275<S\276<\236I\025<\205\207\024;7C\236\275\271\251*<\330?\316<kQ\030\274\231*r\274\'X\003=\3546u\275\331on=\346\2660<\255\t\326<@9\226\274\200\014\256\275Z\3352=\254\262z\274\247\372\020\275\323g\263<\226\245\221\275\023a\360\275\366\235r=\025\313/\275n\037\205\274\205[\266\274\006\244\000\274qxf\274\346RP\275#8\267=\244M\325\274\007M\220<\307\2409\275\337\232\261\275\335 ?\274\353\244\212<\246\257O=\371\032Q=\033\013\251\274V\024\336\274\017;\310\273\336z\310\275\270\315l=.\3105\275\366\344(<\207\333s\275sd\003\275\006-\364<#\031O=\311\232\034\273\256Q\251\275\345\376 \275\354d\347\274X\232\007\275\301\331\201\274\373lp=L\224\223\2744\256\327\274<=\231<\214a;\275\307k\t<1\324N=$\200\245=Oz\255=\023\354\337<\014O\027<~\303)=M,y=?\255\326\275\230**=,)\017=\007rT=bs\206\274t3:\274?\0048=C:K<Y\375\034;f\263\260\274\334~i=\232,4\274\3458\007\275\013\372\370<\212$?\275A\254R\2735\361\034\275\370\346u\274\260[\263\274\255,\202\275\323\363\300\273@=1\275\257\225\244\274g\362\274<\0341>=\n\005.\275m\nB<tA\316\274F$\227;\330\3675\275\234:\244<\366\313y\275si\027=~\325T\275\222\036\343\274\271{!;k[:\275yP\302\274\326\302\223<\350+j\275\341\330\321<\231\311]\274\342\2643=K#\272\275\254\335S\275\005*\255<\301\304+=q\007E\275K\275j=\240\337X\275x\n\205=\030\210\237<7\\\032\275]MS\274W\236r;a\317\321=\304\342\376<\320\262?<p\246\223=\222~\236\274\021\316\230<\016*x=\031\330\351\272C\245+=\256\242\274\275\227U:=\rZ\210<o\362~<7<\361;\252\224\200=X\374\346\274\006\370i\274\374\226[=\300I\224\274e\006\223\274\321\300R=:t\001=\r\373\212\275\314\273\227<\246\370\335;\221\332\200<\270d{=e\230\362\274}D\'<<\r6\275>\271O=\3502\257=V\336#;pi\000\273\032\356\214=\005\201\360\274\237\022~=N\211\264\274\226{\025\274\024g8\275V\264w\275\236Ur=\334\230\017\274\034\031\211=*\267\262<\r\204\345\273\353\244\344<B\230=\274\367\025\204\274\236Xx=\220\341\313\274\270.\005=Y\207w\273/}\010\275\246\016O=\212\356Y=(z\024=\2071\010=\352J\027\274\017\353\257\274\203\220\250=\272\356\023=\016\\\334\274\357E\022\275*\266\316\273\303P\021=h\335R=Dm\222;\373\315\020=\277{\263\275\204\361\354\274u\271];W\353\236=\t\303\367<<Y\037\275J\265\317\274\006$\035=\215[\216<\000\304\340\274\234\207=\274\341\223\203\274N\366\260=\220{\214\274\177|J\275\233\036\244=%O\252\275\000$)=u\3551\275\007\016\216\273\216m-\275\313\206\332=,\276\034\275t\251\022\275Qp~<\222\300\360;\256\316/=\021\023\227\275fj\206\274\006\014\276\274\337\340\200\274q\252\270\274;A\354\274\017\271{<\315\342\350<\014)*\275[D!\275\255j\227\275\231h\214=\353\006\231\274\2622Z=\323\314$\275`\345\022\275:h\205\274\320\345g;~;#\274\324\321\177\275\324%l=fm\271\275}\326\t\274:\373\037=\371[\204\274\307\226\222\275\364eH=\346\266\216=\004I\022\274L}\226\273C\0312\275\033a\202\274\242\236V=}\360+\274%Jg:\2100\225=\254r\216\275\220\350\016=F\217\216\274\2667A=\207\262\266<\301\265<\275\220Q2=\024\344\234=\353\0363=7X\234\275p_-=\370\226\250\274&\310\316\274.|\320\2757\030T\274\373\356\300\274\257\256\020<\214\256Z\273\221E$<\246_(\274\204F\323\275\'C\277;\243\273\307\275\324\355&\274\236\177V\275 \321\273=\327\326\327:\240\355\230\273\377\256-\274\215\003\231\275\260\002\317\275+\031\031\275\341\315\241\275\014\242\217\275\251x\214=Xk\001=hX\027\274~\277\007=\276\355\010\275\222k8;\027\001\313<U\2773=!\276\217\274\006.\342</%\021=\223Jv=\210\377\250\2739\321\000\274\014\036\222=O`H:\001c\005=CW`\275\363\0061\274\024\2476=\317\346\223<\033c\245\274\247\216\265\274T\331\013=O\232,;\006\210\200\274\004\033\025\275\324\325e\275\311g\220<\"8\210\275}\245\032\274A\001:\275 1`\274\302E\'=/l!\275zW\235;\203G\211\274\331\230\025\275\200fJ=\344\303\204:\211\255z\274ux\335=M\035U=\300|R\275\355\362\017\275\253\272\227\275`c\025=\020\342}=Rk5=\013\277\211=-?\205=\254\3132\274\311\213\366\274\361\016\202=B\003\312\273\r\271G\274\355\232\037\2749\t\"\275\346\370b=K\025\025=|\314\330\273\364\221\n\275\334\020#\275+\251\373:\345\rx\275C,\375\274\337-\036=\2722\350;z\210\345<\323\n\313<\250\257\314\274]\334\024;0\374\246\2722\257\023=\007\351\234\2748{7<\260\315\245\274\327\326y=(\036\375\274\363w\026<u\370\244=\022\214\225\274\263\237}=e\271\034\275\265S\304\275\344\3155\274\242V\227\274G\352\002\275\nm\200=\210\322\211\275\345\216\021\274)\351\342=q\006p<]\337\360<\307\022\n\275\377\303$=\372\312\247<\244I\275\274R9\212;\000\253\340\273\367\352\222;{xY=\034\177\234=\037\"w<\347o\002\276^\204\366\274\236\277\240\275{\\\206<N\326\263\274\031\237\230<\374\0034\275(~\322\274\3241\010\275\370\203t\275iux=\334\374A\275\275-Z=[ :\275t\363\025\275J\006S=\342\273\306<r\365\226=\220n\214\274#\215\033\2757\320\217\275&\021\220=\326y\205=D\027\341\274\300\374\020\274\243`\367<\343\242\217\274\361\n\346\274\307\330\312<\311\026\224=OK\263\274!\253\001\275\230\016C<\027\204\024\274\n\325\275\274\304\2465=\310\236\205=X\014\243\275Vj\343\274\271\033\251=G\263\205:\036.\362<\343nH\274\2715\213\272\246}\236\274`G\237<\347H@=y\310\026<\213R.=\3768\223=\314|\014=C\355\272\274\350\036K\274\377\233G=\270g\201\274`\007e=\r\273\366<\325\200\305\275j\330\201<!\352\273\274 \215C=9Z\337\274`\276f=\241A@<l\t\334\274\231\010\372\274\351\361\262\275\266;H<\225\036K<\3646\200\274\253\266\233;\326k\366<\225FZ=@w\236\274\365R\263\274k\311\306<\234\222==c\324D;\257k\377\274\2306\035=&\263\325=\023\257\016<\343~\206\274\262\360\323;\276\202E\274\014|\300;\327\231Z\274\324F`=\031\005\020<\014\255\r=\222\233]\275r\007\005<;c\362\272j\302\241<\000\360:\273\226\360\342\274\353\333 =+\223t\274I\3041=#\273p\2751]M=\\\301<=\315L\305;\r\244\223={_\251\273Y]\t=V\334h;\304 \352;\257\324\315\274yJ\\\275\232g\243=\265?c\274\266\337\376\274\265\220\272\274\243\275\324\274P-6\275w&C;\013\030\240;|^\231=\277\035\207=\007\376L<\232\233v<*5\351=\377\007i<\364>j\274\344\3131=h\266\324\274^>\333\275\352\303\236\274G\330\327\275\004\343\252;jx\227\275\013}8\275\311\337\324<\273\032\340<+K\243\274\264\016\254\275\t\215U=\2360\323\273<\336\\<\024e\351\275\244\023\371\274\275\212p<(8\330<\260\336\n\275d$\003=e\250)=p\335/=\031.S<\256cc\275\334\013\314<U\332\001\273\356\tW;\021\367\001\275E\200 \274I\3735<!~\233<\277\033\317\275\025*g\275\371Y\242\274\234\326\177\275C\264M=\326\276\357:\267\002\273\275+C^;\246\347\005\275}\027\345=\341%\017<\266\347{\274}\031\020=\361<\304<P\'\003\275\357\306`\275\347V\223\275\321\2632\275#\002\016\274\243\331\033\275\254{\253\275M\326\341\273L\311\214\275\302N{\274aPU<\245\235\332<\036\310\204=\253\204\312<Y\231@\275dt\010=ww\204=\356\023\002\275bK\241\274\255:}=\313\376\213\274H\262\252<AI\372<\372&\010<8\317\206\274YU\367<\323\036\362\274\024\323\266\274=\350\251=S\367\273;\220c\360;\250w\245=G\201@\274\363\nv;\017\216>=\244\247\212<\311\020\030=0\'r=\207\335]=\303\265R=\r\324\373<\3235\355\274\023\212!\275\322Tt\274A\277`\274\235S\001\275Ya\374<\201n\203=\202\346\336<\225\3362\275GY\322=\001\223K=\003z\210\275R\247\343\273\313w\022:\217\256.\275\036a\215=\256D\230\274\'\225*\275H\033\264<\332\026v\275\243\230\265\274\305\234\375<\303\033D\272\321\274\264\275\276=Z\275{\207\355<\373\032H\274P\202\345<\024{\222=0\n\\\274\370\235==\271N\231\275\350\\\001\274\r\373\254<IAA;2\270\022\275\243\310\006<\026%z=\224|\n\273t\320\347;;\342\030=\377\256j\275\365|\226=c)\231\2757W\372\273N\237B\275r\001\273\274\251j\231\275\215\327Z\2736\346\233\275\303\330R=\031A\335\274\036\333\003;\303<\000=\025\025\372<X\006\311<QA\377<\252hj=l \003\275\352\r\325<V\264\221\273\371\014\314\274\261Q\252\275\367\3238=U\300\t\275\350\267\r\275\362?\231<G\253}=\025&\177\274\210\034\205<(\357\214\275\360Hi<$\321\200\275\201\317w=jkk\275\376\226\033\2759Q\3539\225c\006\275\251\037\220\274<8\231\275\032@3\275e\031\036\274$\270@\274ITi<f\027\233\275\272\256\004=\340\024\267\274\315B\207=\r\255L\275\211\266\270;\000\257p\274\207\271\024\274/\270\264\274&W\267<\230\220\260\275\007\237\237=\244\037\241\275q&#<\201\025\277\273,t\212<\267o\267\274b\036!=\320\357(=\345\337w=\271\256{=\255a\364<\361\276[\275\006\336a\275\245A\303<F ]\275lX%\275U\245\023\276%\326|\275\357{A\274X\225\217=\335P\233\274\007\2326<M\352\222=6\342\227=\177#\261=\263\222\014=\227\007\t\275\025\241\264\274]\320\014=\346/\010=\035\302\005=\273|\210<\304\315\202:E\260P\275\326\246\347<\031\252\r\275\234\377\000\275\'<\017=\3356\341<W\345\026\275\311\345[=\325\275\r\275~\030\236\274\221\271\307<l\331\355;\370\336\017\275\002,\261\273\030`\234\275i\032\311\275\246\224T=~;\306\273B\372\244\274\035_)\274C6\025=#\262r=\023\363\261\274cjO\274\214\300\373<\206R\t\276\326/\033\274%\001\320<c&\006<\n\031\222\275\035^\373;\r\263y<\361#\217\275yTs;\004\314\0207\241\305\307\274\226\r\346\272?\227U\275 X\003=m\2032\272\227\231\r\275\255n9\275\364\233\014\274=\000\327<Ca\260\2735\217\311\275\002f\237<\276\251o=\374\326\371<WF\307<\353`\252\275Y\231\376\273\3643\202<\2636\214=\357\247y\275?\205\301<\273H\241\274\322\345\240=C.\304<byi<(\352t=\372\023\307;C\033\301=-;\006\275\023\260\032=_\234\213<\252c$\275\177z&<\244N$\275`\352\253\275\031\351\261;\022\241\317=\342\340H\273\230<\263=\017\255\223<x\202\022\274@\236\016=H\366\244<\240\343+=\236\035\222\275\301\0368\275a\027\210<\006tW=\324\243W<\374=\230<v\212b=\277\0175=r\n\301</\334\014<a\022M=\023\325\006\275\003\371/\275pd\272<\355E\221=\033\251\204\274Ym\306<\t\355\252<\001&\345<:\322R\274j\211\027<Y\256K=\022/\261\275.\327\021=\2426\300\272\010>\221\273\300F\377\274\307\306\032=\021\277\037=\270\331\233;\303E\305=\210@\t>\037\346\212=I\364\346\271W\020\367\274\260a:=\020\261\200=&\330;<\340\021?=x4\026=1\2009\275\2712\214\274\244h\312<\232\303\343;}\026\235=M\r\035<f\177j=\007?M:s\272]:\276\210\203<\313eB\275\342\320v\274\34792<%A\274\274\262\310\263\274\026j\203\275\342\002?=\332\2450=\256\376;\274QX\n<\366\375\002=\374\212`=\200\022\352;\340\306\007=\215e\027;\375\323\244\275)\361\200\275\323\260\323\273Z\305\207\274\363\375\224=H\232\\;x\253\025=\370*{\275\347\265`=\312\374\026\274r\331\250\273Pv\005=|U\017\275v\224Y<\227\235\355\274\303\370q\274\255\310\020=\307E\350<d\225\016\2748\227\257\275{$\036;\316\305\220=\315j\344\274A\t\233\274o:+<<0+=\367\245\315\274\t\350\325\272u\323n\275\341\\\226;L\300\024\273\033\212h<\335\325\303;6D?\275\271\277w\275z|_=<R\264<\276\003\350=*\313A=\331\202\350\273\206=\252<-.N\274\327XH<\211j\321\272\201<\001=\312\326e=k\237\216<\360\025\'<\"\226S<\337\345\225\275Ex\013=\255\311*=I\323\252<\365o\014=\265U\273\273\257\020b\273\316x\210\275\276M\205\274z\177\036=\007\230\363=\025\213\220=\323}E<\006eI\272\357\316\017\275\207\002a9\225\340\001<o\032\350\2744vV\275r\251\314\274J\022\247;\261\326\357<G\250\221<\nHr=\237i\022\273\244\036\366<-\212\302;b\320z<\002vA\275\335W\\=\235P\007\275YL3\273U\037\306\273\332\027\207\275\227\005\201\275\223h\255\274.\300m<IR\243\275\262\0249=\203\341\021\275\223\307\256\274M_\030=+\177w\275\246:X\274\204\3003<h\250\n=\2540N=\360\346\036=\341\330\355\2736\307\032=4\337f\275[J\220\275\002\316\021\275\327w\017;\303\360W\275\306=\266\274\240\205\211=\254\325\"=s\242\231\275\314\3343=\221WE\272\r\375\374\273\264o\203\274\026=(=\236\t\326=\004\202\307\274O-#\275\004\366\221\273Y\004*\275\231\244\225\274\375u\341\274M\025E<\360\315\227<\363\203,=\306\016i=\202\333\227=s\252b\275x\265\232\275WhT\274\206\312\364\273.\332\353<\t1*;\217\001{\273\244\236x<\"\201\217\274:\304\343=5\343n=a\242E\275,\334\021\275\231>7\274\3031W\275\345o\347;\247\245y;c\354\230<\362l\214\275\247\323\235=\254\312\214\275^Mc\2749\315Z\275\332\276\331<\232\272z\273\367\361g<\227J\247<\333\2427=\006?\333<\005\303\236\274\305O3=\017\010}=\'u\'=\301ZI\275\216\372\363\274@3T=\262\373\264<\274\342\215=\000R}\275\017\236\331\274\243r\026=,\210 =\360\351\006\275\013E\243\274\323\303*\275\206\252Q=E_s\275r\317G\275\357<\026=\324\322\375\273s\255\236\275\237\363\000\275u\213\257=\223IY\273]p\232=[\274\026=\356\007\320\272\02222\274\353n\007;\222\"X\274\233\336?=ce\340<\205_\314=\374\304S\275\327-\224\274\324\363\200=\324\277\201\272\377r\346<\236v\203<\307\004[=\232\273F\275O$(\2758$H\275\022\274\317\273j\352\305\274\206=\000\274\244\242\227\2732\231\216\275>\276\210\275\207M\244<\216_\235=\363\325\243=(\200\t\275\371\241\355<\266g\373<^\372\036\274W\355\240\274V\301\205=4\254;;\027\004\316\274\317\345\344\274Q\321\245\274\351\266\212=\361N\330\274\336\026\246\271\221]\014=0t6=\274\310\257\2747l?\275\203\312\272=8wT=\177\307\373<\027U\035\275\366`\202=\002\334x=\314#\306\274\332\353\203\274\331\255\343<\331G\n\275\211\005\345<\351Q\177<\211\352\016\274dn\014=\025\241\267\274j\276\025=\022\017\354<\361\367\022\274[\250\344<\252:%\275\363%L\274\314\263\002\274\023\201\335<k\352[=Sq\023<\262g\223=\004\353\206=\347\375\211\275A\310\376<\201\334\013\275b\307\'=\205\367\271\274!\367&=\340/\321\275F@\030\275\231\352\314\271h?u\275\302\026B=}e^=\027\366\217=\325\234\315<Q\246\337</\020b\274\014#\002=\025\260C\275\032)R<\260\017\n\274s\247N\274.-=<\333\247\213\274\270E\372\273\354\275\200<\3606\330<\376s\225\275F\250\021\275Z\323\227\275}\332\020>l\353\203\272&U&=\005\260\201=\203\303\213=\372Z\352<\022*\256=6\036W\275\305C\315\274\206U\324\274\027-\246\273\207\030]=#] \275\\}\340\272e\024\215=\\_t\272\310\377\r<\205\372\017\274\364\263\367\272\270\270\315=x\\\016=\215\267\273\275\230I_<>Q\346<\215n6=\005\037C=\271\227\220\275\334\352\031\275\"g\350<\372\327\223\275s\360\036\275\205\n{\275\253H\031=\'$\034=\337Y\207<\261\231\023\275\211o\274=\215\277\220\274<|\004\272d \246;\001\250\"=\010N\201=\226\273*\274t|R\274\371A\'\275\013qt\274\374\235b=\371\372X=.\010\314<L9\331\273%\021\016\275\267\262\331\274%\336\255\275\275\372\366<,\262\317;\210\267R:[~\273\272\245\013h=0R\234;\200Tz\274\016E\225\274`+\243<x&\331\273f\3469<\027uJ\274\004\030^\275\207\222\200<\277m\\=\\\254S\2755\375I\274u\026\007=\303\372\006\275,\335\262=\213\370\366\273\214\342\356<D\243K;\253\tC\275\200\2606<\265\274\320\274\367P\275\274\261\315\271<^\2542\273)\033\343\275\\\243\005<v\360\024\275\307~\211\274\005\303\277<\273\253\277\274q\027n=\254\231\262<o\264&=\363\336\020;\254\362@<\334\273L=0\003S\275\'\324\026=\243\211\215\274H\312\r<1\373`=\302Y\343\274P=\'\275\212\277\035<K}\312;@\373\304\270r8\330\275\273\234\313<\375\241\305\275\023\324M=\003\223\336<b\271\200=\373\261t;hc\337=\032\252\222\275\305F\210\275\331\'5\275\304\306[=k\366\3369+\010\000\274\276\n\206\275\000\'\207\275!\246\274:\3040u\275nM#<f\363W=oO\253\275\360\305\321=\257y\246<_\215e<i\207E\273\"\274\211\275\020\341\222:\250\215\235\275\340j\021\275\r-.=\027\267\220\275~\335\235=3\272\004=\214[0=\233\374\275\274?\245J=\002\351\314\274\366Ob<\266\336+\275u\264^=[\333 =\207c\225=\264\311\240<x\343\307;n\327\031\274t\346@=\321\265\342\273&\204\002\275s\n\254<=A\007\275\336\023\034\275\016\220\037\275\341\031\360\274>By=Bs\376\274\275s\\=\3355\261\275\021\"\005=\202T\266;\3303\361\274{S\030\274Pd\223\274\'yg\275M\3567\275\2625U<\303\345 \273\241\301\221<$\2675=e\261\274<3>\205\274\223\256,<\257}\034\275\246\006h\273\315\225T<\245_S\274\374\265\235\274\222\2035\2742\001 ;\233\375\013\275u\265H\274t\370\270<BS\024=7G\005<\273K\366\273\253Ga=\212\350%=%\326\350\274\177\010\001\273\213\342\016\272\024\001\024=\250\375\177\274\3612\361;q\021\203\275h\n\363\272#Z\236=8Xc\275\225\215\326\274\272\177\017\275s%\031=P\204_;\313%\354:L\025\211\273\016W\311<f\327\207<\'T^<~\211r=\022\266\032\275\343\310\222;ns\013\275\201\257\200\273J\206\270:{\033)=\366E$\275\344\210\277\2742u\272;\357cE;\251\312\334;h\202&=)\375\324;\231\016\215\275\2252@<op\216\274\221-\350\274l\254\220=\231kl\275\230\225\033\275\220g\227\275WF\023\276<u\210=9\374|<\320\305\311=\320\3665=\027\242\001\275\252g\216\275\274\351\336;\263,\027=l\213\034=N\324\313<\217h\243\274\314p\315< \026\245<\356\220\232\275\002\363\352<t\210E=w<9<\267\271\303\275\025\025y\275\237G\264\273\177g\350\274\003\007\255<=\313\375<\001\301\257\274\201\237\320\274\n}g\2756\210\022=mu\364\274v\256\233\275\373\214T\274G\312C\275\244m\225\2757l\323\274B5\362<I\273\001\275\235\254\341\273S\271\'\274\020\240\365\274\021\264\353\273\231\201\205\274\244\336\211\273-l\271<\362\020\023=\254\353?=\251\006\204=\265\'+=\334s\005=\215\361\223=\205\366\267=\262\362\271\274\315\361M\275\376>\221\273\245o\274\274\r\263\313\2727\006w=\325\\\356\275\037Z\340=\223\245\341=\234\230\366\274q\251\235\274\277\014h\275S}\347=c\235\336\274\'-\254\274^\305\320<\270\326M\275\362mA\275Z\362\006\275\253\276\336\273\224t\305\274\226\337\237\274\336\017\"=\274\026\234\274!\355\250\275,\3351<\'\023\253\274\0360\263=\027\351Q=\0105\212\274_\327\362<\317\r\264\274T\007\251<q\210\315:\277T\226\275\364u\205<`\351\352\273/\300\337\274\361\277\227;\336U\266<\210)\275=J\023\243<$\036\266\274zm\214\274\303\246\036<\275\372\236<\264\\%\275\034\027\226\275\313&\032;\221\206y\274\261\255\354<\345\340m\275\021A8=\3216\354<c\362\312\274\357]9=x6e<\355\362\365\273)r\231=0\016\245<\004\345\317\274\325\025\r=zKW\274\241\202\255<@K\375;\275{\206\274+\341\334<\216\2040\275I!\177=\305\3605=)\213P=F\234c<\226\357\214<>d8=]\346O\275\013\006#=h\231\345<$s\212=t\030\226=\001\342\273;rR\345\274?b\232\274S\3365;7ov<\034\024\252<`O\250<\274`\237=\367\320\244<OgV<\001\224!=\333s6\273\272\002\210\2742\335l=)\3254;\016\254J\275\310\315\221=\351\330\301\274\rKD=!\274q\275\305\350\261<\\\216u<\023X\020<&\333\360\274\'5\323=\261gS\275Q\222\253=\004\227\270<\236\344L\275BQ\022\275s?\272<[\336\306\274\244\355\203\2740\346\204\275Sq\032\275\214\307\021\276\273\375+\274\320\365\016\275\245\251\302\275\354e.;\377\3028\275\275\326\020<\005cB\273\t\222-=\257\262}=<\247\212\273\\_\216=\034x3<n8\205;50\315<\330\213\031\275\272~\300;\312\017\214\274\321\236\215=\353x\313\275E\3630\274\340\233\314<\271\253\222<R\025\002=\355\005\343<\335\207\034\275\305m+\274;1k=@N\007\274\036K@\273=r\303\274\353\245\031:I\206\267\274I\031D\275\330\223\226=W2\310\275<\253p<\0023:\275(\336?\275_\305\024\275X\321!<#l\217<\366\355\000=k\000\006=*K\350\274oL\323<A\266\213\275\032\274K\275\370\325u=\253\266\246<+\333\364<\270\255&\274\032\252R\275Qx\n=\t\213\020;j\"\r;\256\334!=\273\226\005\275\376\021\010\276:\177o=\212QH\274^s\305\274. D\274\0131\375\274\234\013\240<\207<w\2743E\323<\'/\232<\215\273X<\271d\215\275\3675\035<\313i\251\274g\265\001>\342}\261<\307U.\274\024=G\275\3163@\275\000\rF\275+T\257\274\231%\260\273\343]}\274\303\227d<F{J\275=(\263<\343\273\200;\337\202(\274\023xf\275PpG;Ds\325=\202p\211\274fW\005;c\312h;eh\363\274\255\371\372\273\361\315;\275\277@\254\275\333O?=Ig\351=\365\210F=\r\211\212\275v\367Q=\333\366\367\274V\230D=\317\302\003</6-<\203\276\261<\216\243e\274\256/\"=\346\260\325\274\200\027\217\274jg\235\275G\rZ\275`\031\206<@4\005\275}> \275\373\210\307\2723\302n\274\337\327K=Ko3=wa\345=L\326B\275\013\353\365\273\211g\275=gz\332<$#\374\274\260\262:=\301\242d<\324v\203\275\303\355\336\274\240A\367;\352E!\274\354\037|\275\256\000\253<\000\221W=\215o8=\276\021y=\307\217\363\274\203\0370=\2305\271\274-=\241\274\264\374\371\274\\B\001\274D\216 \273|\337\036\275\200\226\003\274S\373\\;\236\365\220\275\035\331\232\273.\241\200=\234\306\212=\215\261\212\2755lV\275kPz=UX\323\272\3628\314<\264\200|\275\305\273)\274\225\255f=f\325\261<D4\372\273wV\323<\330\014\006=\021(_=\212m\277\274\205e\033\275\357c\006=+\017\333\274\325Hq\273\032\354\311<q\353\347\273\256\177\212\275\02685=\355M\255;\274^\220\274\267\250\305\275\215\265\016\275\263M\316<\324\326/<\226|\344<\2265\027\274u1\234\27200\236\274\007\322\227\273/D\002\274\324\323\037={c\n\274\352\262\255=\221\320U\274\2178\226\275e\227#=\347\037\367<\375\313\205=/\200\315<\000\252S<\357x\202=\342\265\330\272\272g\337\274\225\241z\275\243\316n\274b\'\207\275\271b\342\274\2466\373:\\\336z\274`Oy\275\313\3437\274}\325\317\274\277\227\034<\373Q\316<\323\267\023\274\023C#\275\276\246\353\274B\"\263\275\237\030\201<>wI=\"\233\306\275\343Z\307\274R\'\207:\273\024\023\273\261\213\032\276\230\0107=G\363|\274\264\266\200\275O\225\204<\263r\210=\247s\231\275\003G\357\274\271\372\377\273\237\237\245\273\031@5\274\233E\017\274 \0130\275\020\312/=\202lQ=\334\253\205\274\021\224\006\275a/\326\274\013\021;\2752\306}\274\301O\244\274\317\356I\274\271}\365\274\277\247x\274E\240\234\274\356\032\004=A\344\000=\002\205\326\274\212\352\265=X\326\314;\3275\030=\336a\275\275\302\020\334<\230!\200=*&\332\274\362\216\305\273\332\024F\275\032\006q\274\003\034\254=X\n\347<\251\257/<\275I\214<Inf\275\2700\315=v)J\274w\224\301\275\n\033`<\316{\230=\355\227\370<\251\037\211<7\373\030=\002IU=\360\334\'=\235\363\035<\214\377\334;\241\200\230\274\321\222\235\275\253\021\373;\373\024\276\274\t\371\274\272\0332\027\275.\3638=\365\327\343<\361\236\031=\2505\000=\335\332\351\274\306\006\305\274\345-\371<+\031P\274M\360\\<\303n\024=c\036\372<|\036\204=\234C\263\274a\256\264;\302\366w\274\347P\205<)B&\2756WX<\021%\350:~\372w=\371y\025\275\244\344\321\274\317\224\251\274\213\373\202<TF\035<\367\331\030=\274\330#=\216\205\\=\213\020c<\2156\245=\347~d\2759~\361\275-\3025\275t\370*<\365\371q\275q\351\\\271}\350\234=\n\035\335<\245\214\303<9K#\275x7Y=\256\363\t=8\343\"=x\274\216\275s\371\240<~\215W<\251\365\215\273\221lF\275K\323i<\264W\353\274h\\\027\275\317\n\262\274\317\372S\274G\025d<\034m\332=\3034\302=7\237\333\274\344\341\264<\007[\255\274\024\366\177;\3110.=\374\330\010={\035\261=\243c\356\274#\363\217\275BX\000<uo\367\274\001Rd<\245\262\264<JaK\274\025M[={,\353=\375\270\014\275\271\360\356\274\245\201\265\273\361\034T<F\221A\275x9\006\275\177w[=Rv\240=\272\230$\275\207\267;\274t\371\233=#=(\273R\301\316:\350\017\347<`\370.=-3t=/\326X\275\310\005h\275\250SQ=\223\336\037;\376\257\236<<\257!=\'\316B<\253\025\007\274\244x\017=\305W\234\274\0219\312=Ra7\273\344\307O=\240_\350\275\004q\034\275\t3\300<);\365<\013\376\276\274&.\243=>\204\236\274\314\032\347;3>9\275\333\351!\275y\241\027\275@y\212=\365\022g<6\374\242\274_\260\345=\254,\377<\210\321\336;\317E\003\275\007\354\243=@w\236<x\257\005\275\270\372\264\272U$\022\275\222\264\202=\352\212[=\324\024\351<0a\013<5\334\227\272\2475\344\274q\343/\275\237\370\264;\016M\360\274\261\312\000\275\264\261}\274\020\361\016=\020A#\275(O<=\032\303\253<\257\364\335\273e\272\210=\300\363\244\275?\277Q\275\006\262/=\035MW=Xsa=\367Ro=\013\342P\275\300$\340<X\210^\274$\210M=\257\370\000\275\225a\231<\233\231\001\274\321d4\275\267\367\217\275\361\361n=\300d\010\273\273\303\252\2757K\377\273\317:\006\273\351\315\247\274\363\202\217\275/\032\332\275\016\022\022=\2358\032=\336\337Y=y\031\200\274\017\345#9\017\270\035:t\341\345\274\357\354\266\274l\347\225\274\264\354p=<S1=\354\252\350\271\030D\261;]G*\274\221\\\352<L\"\037\272\311\315:<bG4=\\2F=\345M\351<E\314\315<\017\256r<\030\271m\275o\242N=\344\245a\2746\023p\275\036\246J=\2226\215=\002\025V\275\273t\276;\301G\372<\274\3574=\303\013(;SLo\275\322J\327=\267N\031:\317M\004<\212\262\301<\036C\013<\036\223\217\274\022\230$\274T\337\271=3\361\377\274n\210A=\376\211m=x\324\372<\241#R\2748\024\005\275buq\275\354\275\327<ZM(=-a\267<\274\213\026=\354\235\311\272\236/\203<!#\357\273\321\305\274\275\235\315\260;\224\263\363\274\364\022d=\210N\212\275k\236\222=B\354\215=\'H\231=\262m\241\275\016I5<\375\217\001\2753\325\232\274\010\031a<\353\304.<\375\344==}\326\243<b#\350\274DK\327<\'\220W=.\244(\2742L\007=!B\3569\014z#=\364\205\226=\231\317T\275\314\361\352\273)\212N<\032\355\211=\367h\254\273Q\373T=\241\243\346\273a\262\217\275p\272\324<\273\021\030\275\2408\007\274\331\030X<2y\227<\373\300\024\275\337\331;\273\\Q\016>\334\302S;\237\251\322\274Lz\272;\375\000\346\273\252\343g\275`\023f\275(`\272\274\360\310\232\274\002\347\010\275\255 4\275\376\252{=\334|\303\274!\202\013\274\333\364\262<}\250\315\274\202@\223= b/<\tV\312;Y\023\250;\267o\271;\027[\256=.N@\275\340~\255;h\201\260<\033\275\202<\013\003\227\2741p\205\275\177z\027\275i\351)<\010\373|\274\377\370r\272E@\341\275X\2272\275\245\330\303=8\327W\274Z =\275\\a\'\275\306\263\202\271jc8\274gEd=R\344\302<f$\026\274\r\344\314\274\324\226S=\"\0265=\3268(\274\274v\007\275\317o\275\273\272{\3649xg\347\272\321\366\263<\362I\216<\\X\206<\tf\037<\352\207\357\273\270R\213=\233\333~<2\341\203<\255M\227=\324\025.\275w\346\365=@KT=\225\373\342\273\365S\367<GI\352\274\374\222\216\274G\254\274\274XP\021\275\r\024\232<X6\232\272\204^2=\t2\277\273\\b\223\274-\013\266\273\300\353x;\332\354\355\274\215\2474\275=\367\317\2747\261\245\272J\231\031=O\340&\275\333\373w=?|:<\345+\230<<\344t\274\271\332\204=\202\323\025\274v\224/=?\367\243=\314%\034\275H\245\226\275q\357\271\2746\241\302\271/j\226\2739\275,\275<\2138\275\247\010\346\274\331N\025\272\217)K;\014xs\275\007\334\251\275\004B\021\275\216\277\006\275\266\213\006\274\273\321W=4\023\321\2745\021\222\273\034\325\023=\242\275\367<a\351\027<d\024\230<\273\336R=\367i\262\274\232\351g=\260\256+=\345\247v=\034\275\\=\316\257k:\225?1<\017\221\260=&\324S\275\243^\214\273T\204\277<\204\211\234\273\r\013\343\274R\000^\273\217\006:\274\240\243\342;\202\373\024=fL\227\275\223\017.\275#\3372=\346\317K=\363\252\377;\313\226\364\274\222\224\227=\252\356d\273&\212\004<Y\025]=\010\300\360\275\013\006\205=:\216\304<\264\262\351\274\177\256\347;\023\374\321=\330 \\<\372\265:=\343\365M\274/\003\245\274\356c\r\275J\220\270<\262~\323\273\217W\230\275\003d\202=f\377\232<\374r\225\274\277\301\014\275\265\2374<z\330w;An\031\275#x\014=\206\372\003\275u\013\324<\275\250\215\274\t\315y<R\3361\275l\024\"\275$I\320<9\326\354;s\224\261\275\316~\302;-N\212\274\005\235\240\275wQ\260;^fD\275\031_\354<\377\306n=\362-\336\275\250v\235\274\272\256l\274c\253\312<\026\304\033<\341G\301\275\244\221\\\275\372\037Y\275\341/\323\274\207Z\305\275\240\037\026=\222?\033\275\376\200\335<\201)\214\275\211X)\273\023Mi\275\335\204\004\275\262\254\225=\333\357\304<\202\335C;\273D\373\274\177\346\004<\016\233j=\317\033\226;Y\252\230\275\362I\362\274.\213w=\021\207\215<\017\206\250\275\305\2425\274M\350V=\307\217z=\270\350h\272\356\323\326\274\027\310:\275\264jF==\272s\273_\253\022=\347\267\217\274\010m3=\031\341\234\274\002(\306\270\240Q\363<\253\317>\275\327A\007\274\262-\344\275r\223@\275\3626\210\274\252\377:<&\325\240<\007nO\275\273\324\244\275\\,\214\275\020\244\010\274&\000\357<@\034\237\274)\346\303\275\373(u=\017i\321\272\036\364\321\273b\357\3079\312H\027=\\\002&;\353\215\372:\2228\242\274:\242_;S\373\017>\376q%;\375p\316<\234\332\234<\255\211\210\275K\242N;\n\311\365<$\275\371\274e/\213<\021\027c<\260\340J=\351\367\006\275\254\235\264\273\254\255\r=\271\243\373\272>-\261\275\374\016\203\275\316\262^\275##\257\274\240\nY<\354[\315<\245M\256;\211l\361<\302\225\256\275\335\376a\274\232\315w=\263\330G\274%8:=X\341\253\274!\366\272\275\314\226#\274\365<\270=\304\314\242<\371\216\267\274x:\r\275ob3\275\201\311\300:\232e\200=\270\305\263<D6\213\275\272\251F\275\261\367\n<r\r\214=z\221\022\274\370o\037\2744\272\236<\003\233\333<\021>\351\274\201\276\275=\264\253\357:\026\372\310\273\227av<\314\246\205<N\352$\275\360\017\332<\244\232\010>\313z\020\274\250P9\275\255\013(\273\373\\\211\274@\235\206=h\347\007=y0\226= \253\332<\003f8\273\216\226\340\274\275?\242\275\333\271\236=\333\016}=A\361|\2744\366\036=2d\341\274dE\276=\354\021\343<\234\007\353\274\276+0<1e3=]\355:\274\326\270\324\274tY)=\035}\331<>\303;=\2612\350\274\274x\033\274Y\226k\275\002H\257\274\177\373\230\275\264\352\r=HV\277=\372\361]<#\234\271\274\210\322\340\275\020\241v:\200*\204=w\330M=({\241\275\003\326\366\274\255~\036=\340S\323<\225\374\237=H.\310\275\2007)\274\370\335\t=\333\372-\275vV \273\r\\\313<\326R\341<D0\026=A\243\203\275a%\222\274\342s\326\274\020|y\273HkA\275\005\325\t=\026\253p\275\234*\024\274W\276\310\274\240\361\365<J\322\331:\324\007\203\274\234\210\342\273\267>\314\275z\342\302\272oC\235:\302\324\372\273\253\213F\275\250}\261<\361`\325<\021\007Y\274P\3053\275\326Z\022\274$\325\245=\212\236\241=\177f\332\274\345<b\275\007|d=)\001\213\275\351\005\232<\263\323\214\275\301\275I\275\034\026\223=G\312\023\275\364`\374< _\251:\272\232\233:\307\023\212\2743\271P\275\2245\236<\nQj\273_\253\262\275\302\306\367<\231\350\003>\245\217\202=^\0019=\255\326:\275B\257a\274anR\273\365S\020=\273[\\\275\375)\372\2750\271\030=Z\245\221\274\3659\317<\027o\255\274\341\350\366\274U\277\210<\\\227.=\003{N=\330\004\302<\361\016\326\274\004\t?\273\240\215\002\2750\206\367<\265\307\325\273\325gD\275t\026\\<\312@\214=\023\245\227<\3631F\275\306\361\315\272v 7\2751y\335<\300I\220<\367e\334<\370\303D<\246=\344:\315\206\0209\333\352\261;~\200\307;3)\366\273Z\352\027<>\356j<{\346\241=\035\027\026\275U~\005\275\232\035I\275\223\312\356\274\250\353!=W^&\275\345*\306\275\200|\274<YI\307=\307\360\017\275#\340\235\273\006\037\036\275\345\356Y=\234?`\275KG\321\274\271<\177\275\233\021V;R\023V\274\233\346\220\274E2\225\275 \245\265=\177\361\001=\034\244\007=\376\031R\274\002\352\320\275\030.\217\274\335P\010\275\360]H;\361\225c\275\306\3360\275\250&\341\273\353!i;\276\300\367<\334\367Z<+\341\330;U\016\204<\023yu<\020^t\272\255w\"<6\3163\275\035\224\r=x\263a\273\003\344\024=Qi\334<o4\023\275\270\337S=&\2331\274\202^\001\275\333I\n<n\302\224<\36271=\257\032\342\275\206h\'\275\255t\320\2747q\212\275nq\203\275\'\333\233\275\354\202m\274j\024N\275\351\301:=\356\002^=6M-\2759\313J\2751\226\353\273>\276\232\274\267\334\330<\247\257m<\273\003\t=\203\257+\275<\313\374\274>H\264<\213h!=hN\325\274\n<\247\274)\200\343<\007V\246\274\250\245\211\274\206\241\343\274\007\370\374<\374$\307\275{\333:\274\350:\316\274\016\361n=kP\364<\202\377l\274\0138\202\274\307\250\304<\214\374\215\275q}\212\275\303\n\\=4H\t\275 \235\305<5L[=\227!`\275\323>\333\273\205f\270\273\271RP<P\013\204\275\337\310\211\275}\332\023<>md=\244\013Q=0\212P<\034\205\330\274\007\237\260\273\311\323\031;\243\245&\274\274-_\274ll\035\275\303kB\275\225\245s\275\'\232V\274A\350\262<\273\rr\274\020\305[=\230\030r<\227|<=\266\004{\275\234\250\210<#\227O\275\2272\"=\321\341]9\021T\213\274I\351[; \'@=\235\351\243\275\220\241/\275\342\214i=\'\004\004:|^y<\263\233g<\211z\205\274\232\362\310<gj\'\275\270Z\212\275mQ\t<\376Gv=\240\017\005=\r\201=\274?\353\257\275\2242E=\235\213\275\274\0176\272\273|$4=+h2\275\022\014\300\271\211]\204\274_\324\004=QS\334=%\362\343\2736\303\372<\364\214}\275\032\007_\275\354\270`<\002\2415=<\234\214\275\214\213\312\274)\241p\274\352Aq\275\013+W\275\246\257\002\276\256\353\315=E\352\306=\333\213\271\273\231\257\276\274\225\336?=\010\034\362;5\215\263\275\300}a\275P\373\032;r\366J=u\251#\275\317\271r=\340\017\342\273Z\365\340<q=\032\275\3204X=\2312\245=a\310p=\031\275\r<E&\331:\320\200\333\274 ={<o\265\260\275`\222\266\275\244\274\342<\2314P=W\341F=l\367\253<\0232\212\275\032\022g\2744\343\374\274{i\306\274\200\033\273\272\245\370\203\274\335\005 \272\207\006\231=\211F\226=Ao\236<E\360\306=\020.\200\275\375\217q\2755\366\321\275\230\001\007=\363\325\340;_\310\022<\257\236\356\274\275\031\226=\201\2032\2755\213\223\273\220\303\207=\243\202\251<\327\356\031\275n\241m\275|\255\003=\210(\250=\n\254\212\275E\304\261\2749PV\272\264%k\275\355b\024=a\316\254\275\376\332\212\275_\223>\274\300\233\212\274\261\246\006\275\313\3573\273J`\357\274\201\210;\275\223M\037\275L\324\354<\014\344\t<M\247\004\275\375\246\250\275\003\335\326\273e\237^\275r\244\327<\315G\327\274@rV\274\340<\377<\255\027X;\217\230.\275Bq\027\272\335\375\233=\3215\264\274n\344\r=k\373L\275\331W_=\376nj\275\334\336Y<q\220\206<\237\232\303;i\324B\274\013\3712=s\336\";\013\217B=\\e\204=\260]Y=\304$\251\275~>\243\275\310\2122\273\245\224\321\274B\002C<\340\373%=2\213\261\272\3407s\275\342\243\213=T\322\247\275\030\026\241=\024\010~\275\007=\241<\204WZ\2756\352\325<\245\200S\2744\216=\274\265\007-=\023\357q\272\n\255\301<\373X\211\275\034\201\257=\361\334\245=\353O\026\275\237\355\032=\031\0162\275\032a\024=\206\321\265<s\036\027=\21122=\305\273\252=0\252\354;\265\026\232;n\276J=;8\027<c\037\277\275\036\016c;\2110!=\252\205\222=tCa<\303X-=*\204\333<:E\036\275\227F\027\275\207\240\323\274\330\037\r=i\352\221\274\20403\275\216PI;e\240\200\275] \236<\215^\277=\360Z=\275Z\262d<Rj\320\274\372\202\250=I\3479\275\257\367s;\377<\355\274\325\300\307\274\005\370[=\030e.=\234\177\274\2748+\235\275\334\320\273\275m\201\370\274\355m\226\275\330\304]\274\350!`\275\214\250N=\274\202\023<\241\330D=R4\r<\204\217\327<\211(}<)\246\246\273\'T\204\274\262\'n\273\005\"r<0\254\370<?\3772\275\375\333\334;q\272)=\021\'\341<\353\207\360\274^\367\326<\004?\030=>8!=\035\305\022\275\353\316\250\274\375\240\336<M\001\347;\212\202\001=\177?/\272\307\345\351=\244\316d\275#\261\203=M\277\222\274\"#\322=\300\373\314\275\211\3346<N\210C\2752\202\\=}\333t=V\177\320<\370Gj=UZa<\301\006k=\206[\242\273X\014\244=\227\014 \275dQ\013=\332_0=\001\376\221<&\321\213\2751z\262<\360J\"\275 G\210<\344\006\207\274\313\177\212=\316+7\275\254\030n;l\343\340<\022\363\006\275\026\242\016<\202\267\010\275\264\357\007\267\345\215\325<\311\262\216=RW/\275<\255\264<=H\342\273\3160y<7\004\216=\355\376\305\274\373\267O<\325N\234\274\004\205\342<\301\001\037\274;\372\303\274\246\207\243\274o\3732\275\264\360 \274\244\273/=\222\362\r\275\201\253\262\274\215iP\275\024\217\314<\351\206\021\275\216\345\025= b1\273\342p|\275\035r\211\2744r\257=V\3707\275\2444J\274W\343\243\275\203\255U<\241\'w\274H\255(=!s\274\274\304W\350\274\311\3078\275\002\034\005=\377}\201=\315#~=\252\206Y\275<\000X\275\301d\350\274+e\241\274\335\223R\274l\277\002\274d!\034<]\222\266\274W\260\253\274\001j\006=\340P~<0OJ\274\000\027\203\275X)-=\"Q\023;\312\246\235\274*\016\237\275\033\377\224;\334\"F\275j\033\227\275\251)\n=\256\241\322<?\003\252<\236\2227\275\013\325\016=\362\005\314<\330\370\032\275\3670\254\275\247^\227;\030Z#=\014\t0\275\204\177\312:\356W\270=\230\275\304<3 \205\274\371/\332\274\303\001\355\274\300\267\"=ei\334\273\351\301n\275\240\272\254\274\344\220\253<\230\246\251\274\315X;\274\032d\310<F\362\276\275\255\033\347\274\013\0109<\376l\222=\247\'\235<\302\307\261\274\333\302\340<\010\213\253<\256-\233<z\217\217\274\343\205\223\275\000<\025\275C\310\375\272\327,\236\272\365Z\201\2740\244\330\275J\235H<\002\361|=\335\0054=\030\304!<u\270!=\363l\257\2751\017r\274\325|\213=\307\300\323\274\"\365\222\274dpC=\231\017\020\274\343\361\242=\221\347\026\275v\007\177\274\021e\034=KA\314<\343\301\245=)\0173=9\035\236\274~ai<y\226\375;>J\243;\372\3532=\010T\312;\021\253Z=\030Vq\274\373\207\364;\240\350\237<\272\321\004\275\241\245\201=\374\240\267\274\260\001\273\2746\237\370;\236\203G=X\n\351<\\\236Y\274\247\270\230<\007\233\234<\315\244\013=\260\351\240\274\357K\346\275\\(\205\274X{\307<\325H3<\211\221;\275\036\305`=|\220b=\300|\356\275\324\234\352\266\304\306\211\275w\037\035=\030pj\274+\373B=\030\330A<\177\t\372<\026\n\260\275\372|\330<\2632o\275Upz\275\n?\203=\2414\236\274\202E\213\274p\313\317;V\010\001=\227p\227=Qm*= \023\323\275$\3362\273\025@\025\275J5\340\273\256\177\330<\237\372\037\274\004^\210<)\324\004=\r\034C\274W7\333<\214\0315=~\300\237\2748\274\270\2743\021\014\275\324E\231<\222S\332\274\021[\360\274\370G\200\275\375-\204\274P]\3069\022\t+\274N\236\355<&\277\313\274O\037\337\2757\246Q\275\316B\367\275\375\023;<\234\264\227\275&@\361;\001\312G\274D?\241\274Mc\337<\336\004{=?\303\375<T\360\005=vw\251<\2147k=PuY\274D(\242=\020\030\376\273u\204\256\273\301\r\323\274\202\330C\275\r$\205=Z\010\004\275\271:\253\273\264\224\202\274\321`\311\274\222= \274Yw\023<\030AM\2758I\333;\321g\320;\033\326\316\273\266\275\321\274\261>\307;\317\204\311:\342\211\260\275\354\232\203\275cqs=\216\n\010=}\265!\275\332\032\303;\016\355 \275\342\220&\274N\351k\272\270|-= ^&\275\211\2274;sP\225<4\227\361\273`\034\236\274\331g\312<\212\006\215\275t\204\230<\013Rs\273\322>\233\275\271.\004\275\321\210\010\275\316\305\033<\202\270\004=3\227\267;\022\300\237<\301_R<M\267\344\274\262{\276\274t\230\241=W\021\347<\365+\371\274B\364\325\274!7X=u\206R=Qv\"\275\321\217==\177\221\374\274\261\247\"\274M\310O\2759\204[=g\364\342\274\272\351\304<\273\264\242=\236\032\324=\203\223\262\274tg\217=\322\241-<\373,\"=UR/<Z\375\006\275v4\232<\341M\020;5\371f<\334\357\212=\200\243\002\275R\306\000=\256\222\006=\036\215\007;\000#\014\275\271~\334\274\266\024\224<K\315\340<\315~n<\210\\\246\275n\262\376;\206G\256<\2146\323\274K\232\371\274yK#\275\214y!\274K-\000\275\335\326\237<H\247\210\274\211\235\013\275}\234x\274x\nu=\306B!=;v\325<\263\304\301;<\366\014= \363\331;j$\232;M\345.=\376\261F>\266H6\274\025\342\004\274\375\345\033\274?\241\376<_\002\276\274<U\202=\r\304\260<\217\354h<(\220\233=w?A\275\241P\224;\363\327b\275\n\344\354<\353\245\356<\347\231\361\274\3623\031>\236\265\270\274x[)\275\241(\233<\305q\346<\232Kj\274X|\364=\032v\254\275\226\243/=\343T\265<3,\035\275\276\025\3709]<\225<z]\211\275L[\033>\323\265\226=\340s =\030\366\356\274q\231\310\275|\177\235\275=\274\257=`O\032\275E\362\206=\325\221Y<\361%\002\274s\347\352<\374FK\275\233\207\021\275.\323\006=0y\315:#\334\262<\302\035\213\275Xp\353<\276\250\266\275\2704\231=n\204t<@.\006\275\032\3562=-\312\275\2711a\234<\036-q\275-g\255\274\242\271\007\274\254f\356;\027A\006=(\214\352:*Y\266\274\220\321d\275\253y\203\275\035\345\237;)\177\213<gki\275O-\032\275\251\253\312<\222\364\327\273\256\246\366\274\225V\030<&\220|=\356\273\016<4\341\305\274\240\374\252:\006-\233=.q\307<\206\n\351<\377ML=\276W\227\274N\244\030\2739\021\026=\230\276\346\274\276Z\236\275\0315L\2750\300\226<\260\212D<\254\275u\274\230\223\027\275pT\343<\213\341\016=\221V\245\274\316Z\303\274Q\026\243\274\246\261@<\271\253\375;l\177V=\'C==\364\004j\275\334&P=\372X\344\274\362\340)=\242s\000\276\335\2614=G\204\366\274g\333)\275\340\315\225=\271 \355\274\365\000j\275\020\275!=\331LV\274\307\225G\275#\204\241\273\177\247%\275\230\374\347\275\207R\237=\270\327\220\275\236\363\205\275#]@=\362\033\205\273Z\t\233\273ie\223=\017\302W=\302E.=~\037\311\273(\215*\275f\205\"=\246L\370\274\264I\215=U\207\345\273m\340\256=\002\020~\275\371c\356\274<\321.<|H\262<5\277b;!\374\202\274BMc\275J\265\n=5#\277\272\024K|<(x\266\274\340R\016=>r\245\274O\235\354<D\252d;\307\353I\275[;\253\273\375YS=\021E\363\274\356\037\221\272\264\035\321\273g\236\254\274\301:}<\215\007\227\275\211NH\274\362\245\241<\207\307\234;\002\025\"\274\256\r\255\275gz\357\273\246\004\311\274p\"\177\274\204-\201\275eO\371<R\346\222=\276\261\224\275\272t\221=\212s\366<\223\'\376\273\2120\376\274\352,f<M \362<\333\333\212\275_\203n;\250\032`<m\256\022<{x\t\275Y\312\371<n\300\313<\233\3035=<N\007=\326m\206\274<\364\007=\027\207\020\275\370\246\\\275\3158\372\272`=\250\275\354\nr=\263L\350\274(eB\274\030\233\357;\200\013\227\275\t\211&=n\251{;*\373Q=t\316/\274\341\307V\275\033\322\237\275\225\261\243<q6\005=H\305\376\272\243S\256\274\252%\031= 7f<\010Y>\274\357\373\030<\345\312\033=\251\3307=c\331\217;\364>\246\273\261oY\275\317\350?<ar@\275\333H\236<\331\207,:\200\213\275\275\253\237U\275\207~\252<VA#\273\272r(=\203\303\276<\317u\240\274`8p<*\307:<\367`\333\274\231\220\232<z\303\356\274\264\362e;d\366#\275\323\307\227<\365\376\371=\024e\243=\024W\314=k\352\'=Z\356\342\274\177pp<\216\334|<\353\244\022\275m\026Q\273+B\252\275\355q\313\274\367+[\274\260\201f\274\205T\260\275\230\245[\275j\345\230\275\370\236\352\274\003\310\300=\321\362\036\2744\035\307\274ae\251=!\264v\274\253\267\205<\336H\207\275Z\352 =\276]&=1m\321\274\035\334\217\274op\227<.\010\325<\027a\006=\344\245\010\275Cp\355;;Hs\273^\230J<\316\2417=\264\034\000=\351Wg=\'\270p=\3614\347\274n\270\037\275W\351D\275\357\337(<\350\311\027\275\264\234W<\023.\240=\234\302\027\275\237\354\372<&%\341;\035;\r\275\351\236\000<\327\260\340<\227\034G=#\377\327<8\255\331\274\377\263\017<\3724\341\273\375\364\374;\007\377\326\275z\256\260<z\274\227\275\272\212\030\275\353\370\326\274*\301\206<c\220B\275\377\271\354\275j\221\316\275\"\235O=B\037\274\274\017\316T=\274\222\363<\331\027\322\274\007*\316;\361)T=\301\321\205\275g\355\274\272\000\031\302\274\320,\023\2751{\'\275\342\326\220<U\241\356\274\317\031\034=\233\302}\275\303\343A\275nF\021\275\r\326X\273\257`\023;\371\347x:\272\266v<+%\212\275u\326\022<\306.T\275\003\303\237\274\267\"|=u\227{\274y\242\030==\247\231=d ;\275\233\251\254\274;d\002=\273@\366\272\335 \367\274]j\372;\014d\355\274\017\"\260\274\317\036\350=a\246\216\273\252d\307\274x\000;\274L\021\245;S\236^=\203\233O<\251\343\223<Etk==\232\\\275r\276N=\222C\'=\326@\331<\305\200Y\274\260\370V\275g\342/=H\273\016\275\373\305B=QO\250=\233\324W<z\253\234\274P\370\233<\177\303W=~B\300\273\277?$\275\005_@=|K+=\2537#=Q\312\211\275\363M\326=\350\346)\275,ES\275\004&\256=\256\272\306\274\234W\336\275J\010v\274\274\270.\275.\215\214\273!\221\253\274?\0222\274\220(i\275LX\025\2753C\273\274P\247\332<~D\000>i\345\243\275\275\370\002\275 \\\004=\310\"R\275-\365\004\2737~~=\225@C<+i\252\275`mn\275\331\333\037\273\224#\020>\0316\213\273\310\034:=^%\232=J\253C=\364\365\216\274N}\341;\227\377.\274znP=G\031\355=e\242,\275\360\262 \275o\221\032=\242\240\256<\361\177%\273\354\275x=l\033\345=\320d\033\273\235Tm\2753dc\271\277\240\231\274]\271\364\274\373V\343\274i\272\250\275\313\261\215\274~[\023<T\373\375\273N\313>=4A\n<\231\356\360<S\026\213<\262EB\274T\300G\275\341\3426;?\035\255\274%_\355\274\346N\343<\343\200\264<X\002\022<\006\260q\274dy\236\274\024\376\354\274\244\301\001\274\273V\354\2733\2218\274,\306\200<Z\322@\274\034\263\251<_\010\362\274\236\022\007\274.\035_\2750\242\310<\351\306\304;z\024\206\274\312>\243\275\350 y\275\010\361H\275\324\244<:k4B\275^\257\275<\232\274\035\275v\303\362\274\300\324;=\344\327\031\274{\202\210<\007K)<\210\253\202<|\245Q\274\036\217$\274\275\204U\275\213C\252\274p\241^;\313A\230<0\250\220<d\007Q\275v9\202\2734u\366<\025\334\331;\371\315\324\275\260\0365\274%\347\021=v\2078\275*\331\246\274\236\221\360<\310.\235=\035\033\227=\243\245\213\275{\201\307\274\371_k\274\242\255\240<\232:\n=\016\272~\275\260;\366\274T\376\372\274\253\3053\272)\330\034=vN\362;\213\326\350\273c\363i<t\242\274\275.\334\354<\2169\243\275\010\0144=\362>\247=\300\n@\274GB\373\273};\034=\301\366\323\274{\024\230=rN`\2755\034]=\r\271\260\274\2572y=\255&\233\274\347z\030\274\263\004\205\274\336\207\025\274\256$t\275\306*\271\275\177\213!\2741l\030\271\260\261\360\274\036\375\307<d\020Q\2756\021\212=|\343\031=\'\345W<V2\"=S\345\271=U\217\017;\266\207\244\275\357\312\255<\231\334%\275\376\240\257\275\300\373\027=\325\264\227\275\357Z\030;\3353\234=\271l\215;\177\307N\275,>\310<\273B\314\274\210\2770=\365C\353\274j\355\252\274\310^\010=\332\240\336<.\347\002\275\203\001x\275\262Yh\275<\241<\274\013tg\275\305c\252<*\021\037=\325}\255;\266\365\220\273\335\232\271\273\212i\n=\261\222\276<\354\0237=\331\205#=\365\337y\274n\n\304\274z\351J\274P\231Y=\030\364\305\274=\013\270\274\353)\246\275\332\203\\\275\2441`;I,\224=bz\207<\305\370\034\275\316\006\315\274\274E\010\275\343\014\365;R\005\024\275\'\222\245<\255m\243<\203\234\217\275\261\351\330\273}\244\252\275bX\252\274\217$F=\360\276\361\274x\312\243\275n\202j\274p>\374\274\247\'K=\220\026{\275\252\250\335<\2033\326\273\210:0=lc\360\273[\207\t\274\002BY\273#/=\275\30004\273\247\273\356<\004J\211\275y\356\321\274\373\253\246\274\003\353\230\274\344B\210={\253\363\273\257Zd;\256\006\'\275A\365\207<\221\025C=W\277\251=NY\210=\221[w<\277\367\027<\2572\334<\345\243\263\273\372\307 =\250b\321=\344\273S= \\\350;8\257z\274\305\304p=\025\360\021\275\035\235>\2753$\273\274\240F\364<v\321W\275\347ws\272\365Z\2319[\327\251\274H\336,=\034\036*\275.)\226\274S9\264\273o\233\231<\345\373\360<\303\023\377<\353\236]\273&2\022\275,\027\266\273\375\005\020\275\345Me=n\014\004\275\315\003\006=X\2370<\355\373\022\275\317\273\211\275P(\r\275\370|\315=\206/\201=\014I?=<\001\302\273M\373\243\274\357\004\217\275\254z\217\274F\202\371\2740?b\275<\277\217\275\213\347\025\275\364\207\222\275\317\337\002=\371\032\326\275\254h\241\273\0277\275<f\243\020=G\216A\274\270:\331\275l\220\210<\240\346\263<\330\027h=\310\030\225<Q\2366\274e1\214<I\337\340\275H\201$\275-\027\347<\377\244\000\275\241\207Y=[\177D=\307\276w\275x\310L=\351\332\251\275\313[#\275\360\235Y\275\177\324E;\205x\020\275\335\231\273\275\001\3570=\314n7=\310{\327\274!\272\237<\240\275~;\254{>\274\003X\20691\350B<|\254\024\275\032YL<\235\334\036\274{2\202\275)`&=\232_\303\274\272\037\266;\323\212\031\272~\306\250=\376\375^=\002n$\275\2171\246\274@\303f=\220\352\202\274r\006v\275C\'7;\335\212\232\274\242\202\007\275Q\001\260=\324xG\274jF\271<V(.=\000\264\002=BJ\233\273P\036\215=\366Mb<U\357\223\273C\200\223<\246\247\336\273\020\241\264\274>\n\267=\004o\374\272\335o\350=z}L\272YFI=&7\001\275\221{\304;\272=<=\332\351\301\275FK\366<\006\217\335\274|\2449\274\006,X<\005\343I\275X*\354\274\360bd<\177\t\377\274\311\260\235=j\314\306;\264\211\275=\252\357\251=\227\223\313\274\261\230\203<\362\361^\275O\366x=G\tj=\014\027\272\274M\005I=\274\340\226<\257\n\t;S&\207;\037\352A<\025\r\t\275\"\263\341<\332\334\330;\376\366\001=e\033\214\274\347z*=`\322\312<=\037L\275\0379(\274&\304\231\274i\030\371<\245\334\312=IV\336<0\342t\274.x\205<\301\253\000=&\227\250\274\007B\277;`\207Y;\032D\247<W\034\222<]\276 =\211\371\304\274\013S4\2743\314a\275\251\352\300\274bJ\303<\200\032\024\275\000\323l=q<c\274\010\352g\275\243P\n>@ru=\236t\025<\354\005U=3p\222\274\226G]\275zG\243\274\\|\026\275\230\304\377\274\247\3423\275\265,\206\274\265\261\361<\022z\202\275*\246\302\273\315\205\030\275S\221\026\274`\372\343\2750\276\263\275Z\354\317=R\352f=~\3160\2754nd\275\357\037\206\275\364!\224\273\365q\024\275\233E7<\035&\013\274\207\240\355<\315\2350;\242\0024=gi\310<\325\022\203\274\337\t\202;)\021\207\274\223\245 =\316RD=\314p\341:\305\307\017\275(<\260=1\202\304\274\2222\217\275\235\n\353\274\3702)=\370\373q\274\2357W\273\027uW\274}\250\327<\026\221\207=\223\342\222=\275\016[\275\020\314d<\274T4<%XG<{\023\241\274\204\371\341;S\3115\274*\201\002=\247\314L;\276\211F\274\203\332*\273\350\206X=\213-N\273jtq\275D\215:\274H\037\271<\376\t\271;\226\343\207=f%W\274\237\212\223\274\221\367\215\274\353R\'\275\230\022\223\274\276\320\363\273M\306\014\274?\274Q\274\377V\366<M\346\007=\356\337\036=\327 \000\2761\354\275\274\347\257\247\273\340\214\365\274\325\226\022=\036\354\241<1\261\321\275w\036\020=\230,\347\274\224\001\212;\210hK=\014(\033\2756N\336\273RkH=\360\030l=a\2524;M\366\350\274=\335\274\274\211\033\375\274\307\370s\275X8z\275\243\205\217<\347\t\036<\333\377\'=]\301\321\274\220\031*\275\346\310\006=\316\344\206\273\217j\025\275\013U\272\274\241/\241\275\330\302?\275\347\033{\275\225\010\262\274\253\371W<\014$\004\275\3175\036\275\r+\330;ff\242<F6\270=\214\346\267\274`,\321=\376;\305\274-\212`<\3700\330<\225\254\256\274T\365(=\235\305H\275,,\364=\357\354\010=1b4=\227\257\210\274l\353\276\274\006\340\214;{`6<\250\315*\275\177\207\373\272\005D\302\2746\321\221\273\232\004\272\272 \025\225=\252\371\226\275\276\316\231<\022\306\232<>\277\001\275V\367\272\274\035S\230=7\2331=\226\300:\275,\341\314<\267^\014=p\315\346\274\260\"#=\307\344\247\275\313V\234=\310\200!\274T\033\260<\311\247\020=\311f\247\275\214Y\230\275\320\n]\275\322\247x<5\352\301<i\000\341\273\r;\232<\266B\276\27362A\274\247\\\326\274\307\023\275\272\215\265c=lg\242\275\262e\266\273P\273\307<a\035\215=\360*\336\274\377H\303\273\340\033\205<\231\254K=\233\343W=\205M%=jl\376;\2726B<\266V(=\2725\002\275\216\r>\274UQ\006\272\361\266\267=\014}\201=6\303k\275\020\322\006<\344\'\202\274\302\312`=\321\201\346;[\202\206\274\362|\025\274{\224$=f\270\265=\326\221\201\275\243\313\317<%lL<@\023\003\274:a\221<\3437\257\275\205\0373=H\013\240\273\225t,\275\362n\314<d\344\204\275\370\246\203<\027\370[\274\312r\240<A\004?\275e`k\275\310v\r\275\275\245\251=&e\261<4yH<?^\002\274Nv\363\275}\016\350<\273\306\343\274P\270\002=\372Z]\273\301w\232=\276%\220=\036\272\310<\256\0308\275\366\312\222\274,\341Y<KZc<\t\017\325\274\332\341\315\272\253O\007=\314\204?<\247\242\201=\307\214n\275\024\004\030;\326\256\"=\325x\035=\224\255?;\357R\210=\261\027\n=\002\025\200\273\352\354\231\275\375\250\211\273;\266\332\274\000\332\304<7\252\002=d\000\010<\324;E<KY\252:\326\217\325;I\313R<\024\346\212\274\023\273\272:7\255\007\275\030\356w\274!\351w=\376\336\005\2743\316R\275\335j\367\274{\007\213=\242\213Y=\006\275\247\275\264G\200\274\365N\327\274Y0\030\275\013\215\003<\364\235\032\275)\307x\275\315\316\224<*gl<\367\"9\274\014\243\026\275\274jd\275o\351\014\274p3\237=j\223\272<:\006&=JK\273<\000|\016\274D\030\257\273Pf\237\274\324By<L\377\364\274\001m\242<\356K\362<W\n+;\247\223\2349\200V\021\275c\303\337\274\204\360\212=\302\220\"=o\003M=\210\234>\275\354\032\021=\231/\225\275\023\305a=O\252\213<\314ll<\332\001\257\275Bh\305=\311>\220\274B\316\005<\3464\007\275\004\265\n<\224\334\240<\330i\017;\377\342#=)x\276\274M7\010=,qt==\216u<\237&\205<t\231\267<\010\370`\275\320)M<\366\325\276\274\375g!\275=t\276:\342j\360<\361\243\254\274\335\357\367\274R\334\220\275\326/\310<\024`\306\2738\364\345<\203B\243=\030\203\204\273\221\312\240=\215%\303;&b&<\320\261\007=\264W\n=\3437 =\341VT==,Z\274\026_F\275\231\306\212\275V-\030=\221d\203\275\203W\265\275\026\007\353;\025\004\202\274\253\2673\275S\241\224\274tCN\274\002G\017\273p*\377<-!\334\274\245n\026\274\250\211 \275\201\357\305\275^u\323\274\000\253/\275N\316[=\tU\007=\236J\205\273\376\346\346;\270\261\027\275\326[\242<\007\277\233<\313\214t\275w\326R\274\236\"\256=\375b&\275\361\220\274\275\325#\226\275\361\357\321<h\212\013=\337\020\020\275A\026\271\274pp\363\274\016V2=\357\360\212<!\007\227\274\021\345U=\017\217B;\227m\017\275t>\"=\260V4=\352\210>\274Ev\213\275\203\243{=l>\0029\244\010?\275\243\"\257\274:\004\270\275\331aL\275\030I\301\274d\016D\275\333\323\005\275\343\330\027\275\013=B=z\311\337;m1\212\275\377-\336;\266\023s\273\202\355\204\275\t\200\234\275\250\207\350<1\352\210\275\207\250\200\274W\311G<\315\362\007\275F\325\301\274\304C\302\274^\240g=;\013\203\2753c\272\272\242\214\247<\016\302\201=\324h\000\275`Y]=\364\272^=r\265/\275_?\202=\254c\204\275\3162\003\276f@\302;\212N/=rL\312\272\217N\253\275\027\"\010>\254\245\367\274b\257\302<\275<\354\275\200@\252<_+\037=\322\340\363<\376\270\302\273\002%\241\275\016i\322=\211\t$\275TM\230<\265J\200\275!a\345<ai\222\274\337\230+:\263\225\270\274S\026\314\273\033rU\275\211U\337\273\344`c\275\013*J=\021\310T\275\344g\023=#\0219<8I\270;\361-\205\274n\035\306;U:\232\275t\336\232<\375h\210\274v\211\230=\315\226\001>\332\224O;\332\016\355\274\246l\223=\002\230\271\274C\353\364<\371\002\201\275\361\213\241<\0103\221<\360\022\036=\013\210W\274k\007\332<\270\030\275\275o\251\325\274\330,\224\275\323r1=\006 2\274\343\255\237<\337\212\301\274\304\325\224=z\237v;\204\255~=vf\201;r\033\010=\324\343\340:\224\276\005\275\234\344\201<C\376\234\275\235\307a;\236+\347\274f\301\227<\225\235\031=\250\265o\275?\361.\275\240\275\333\274\021:\021=\377f\002\274W\014z<[.\376\275\314\222\311\275;\376\311\274jV\236:\376r\003\274|BH<\355\267\306;/\000\256\274\366.\017\275.9\177\274\223z\007=\214\247\320\274L\231\302\274-\214\270\275i\300\202=F0\033\275\275\361\236\273;\031z\274.~\320<xW\202=\r\323\016\275\006\364\220;#%\225;\370Q\203\275\247D\361\275-_\301=9Y\271<\033Vv=\325!}\275\342\242I=\227^*=C\004\243\275\241P\214=\323\200\366<\010\316\253<p\201\357\274\230\013y\275\002\025f\275D.\251:\213\2429\274c\306\327\274\203\267\016\276\021(\205\274O\322\370<NB\347\274\013H\270\273h&\034</\221#\275\013\301\267<\222\202\252\274\014O\005=I\345\233\274\224N\317\274\316\010y\274\317\003X:\372\374\343\274*S\315\274(\032\320<-o\271=\257+\330\273\372\022\276\274OM\304\275\365Hs\274\207\346\035=\224\023\363;hE\342\272\023-\207<V\300\360\274\230\254\203\274\300#\353\275}\354\016\275-\016\000\274\312!\223<2\203\321<T\247\0137Q\314\300\274\372G\325\274Bv2\275Q\026\252\274\023y\225=\220\301\372\274^\023\314;\213\373\"=m\316y<\227\360\211\275v\373\264=\3001\001=\333\204q=\221}\306\274\033\037\224=\263wR\273\304\254\206=\261\305\344\273\302\r.\275\317\3507\272\230\007\322\273\342\311\263\274\t\266\'=\201>\207<\362\344\356\2741\2230\275\236\251\307\275\216\261\304=\275i\253\273\341\337\343\274\023`\215\274 \307\255\274\265U \274\363RW<F\270I\274>\006\306\275M|\007=\3711\227<\3648*\274\376?\205\274\243F\273<\255\272\247\274\261\214\323<\213EO<ZE\354\272\277\273u=\334 \225<\2268\002\275\3137\314\274\270\332\274\273\372\026\031\274zb~\274\265\0274\272\322RI;w\266e\275\226+j=s\335U<\370\024\276\274m\355t=\273LA<\214\207\235\275vY\033=0^\177=\260\247\211;f\251\n=\355uN\275\016`\217\273\345(\355\273\270\211\325;kW\010<\223F\347\274\007[I=\362\034\037\275+\273><|5K=\2563\230\273\243\244\304<\356)t<Y\245e\274\004\233\255=I\277\206\274P\2749\275@\357\210\275Q\252\211\275/w>=\315\317;=\"\233\275<m\323\032=\311\001\026\272a\272[<\035m\027=X\025a<\017\256\272<8\254L=\250,\362<6F\234<\227\331,\275\230\372A\275\233\305\224<\266\302\243\275\357\356\\\274\371\326\330<\333R\005=t\230J\275\021\302\022\275\217^\236\274\336\033m\275I\336&<\354\022\240=\350\n\302\274]\321+\274\343\256\372\274\246z\301\270\002}2\275DZ%<\372\004t\275\340;\205\274\366^+>)\245\340\275\251\270X<\375\314\305;\366C<\273\330\377\035=\230\215\304<&\332\010=9\\7=\333\025\005\272\305\254\204=\0361i=q\311\t=\362\037a\274\020\027\224=A\031\214<\312\262\212\275r\245[\275\310\0071\275\235\254\031=\203,\322\275\311\247\341=,\"=:\274\313\032\275\023\351\302\274\177\n<\273\336\204I=a|\210<\321\013\346=\342&-=\240\307\302\275\035\370Z\274\177\251\342<\020o\r=\032\254\253<2Ml\267\254\2510=\353\301;:\376\227\367=:\307\364\274#J\223=\2710\322\274\021 (=\232\034-=\355E\346<\221|\302\274\216\205\334<B=\315<\"\256i=>\337\232=[;\330<\036\253\207<h\036\020\275\274*\030\275\226\232E=\240v\247\275\326\217\242\272\340\235\016<\302b\274<b\265\341=B\032X<\307\352\344:N2\327\275\236\306u<\274T#<\345\t\204<\330\014U<\340\016M\275\241P\272\274?\000\206\275\315\260\207\273A\202\375\274\332\202\250\274\334\230W\275.x\005=x\266\264\275\030\365\244<\371\275\340<\005N\257<.\335\013\275t\t\377;\200j\361;@_c<[\3565\273I\347\230<sg\003\274\304\246\007=>\036\002\276\322s\222<\240\3356\2751\352!\275Xk\240\273\277\0238=sVd<vc3=\031l\\\275\'~\022<Gi\037=%\002\323\274\317e>\274\244%\235=e0c=\222\236\001\275ysP<\217p*=+\273\347\274\275y\242\274D\006\342\274dGZ\274P\310\321=0,\326<\r\013T\275\307\330\326;o\212*\275\205\245H\274\2322\353\274c-\237<\312lB\275)\201\006\275\243OJ\275:C9=&\021;=ar\240\274{\233\374<F\302\321\272:w;<\363\262\201\275\357\237H\274\235lY\275\264\320\207\274\017-<=v\006\025\274\260\226\200<\030\335L=|=K\273hI\203\275\361\006{=d\311\t=\252Ks=@\337\373<)\327u;w\235\335\274\361(J\274\320.G\274\232\264\014\274\326\377\220;\235\347M=\226?\3739\343\202\340<\311\361\016=2\2267\274\3037\234\274x\036\214\273\245\030\004\274Y\205T\275\261\266\201\273\274\3246\274\367h\322\274J[w\274\222%\243=3\225\305;\332\007\026<\351\220\276<SF*=\013oJ==\204\252<\264=\t\274z\332d;\254\010\371:Z\037\317\274^\"\013<\374\2522=\023\332N=\005\367d\274\205\221\027=\030\236\365<\330d\352=\351-\202=\016PC\273\354\000\335;$\220E<\030\330/=\177\323N\275w\r)\275`\205\221=B@s=\362_\250\274\356-D\273\372v\354=\217\211\260\274\326\355\204\275\367\345,=\253\345\244=4(\200=l\307Z\275\334j}<\330\270\211=\322Q_\275\376\254/<o\031t;\n\331D\275$1t=\326\274\245< ,\023;\037\346\214\273K\372F=\356c\'=%FN=\271VJ=\251\307\026\273\320\375\317<!\222\010\275C\220\277<\325\324\236<\203\037\275\274\250VD=.\203\204\275\007V\201\275\363A\252\272~\230\363;\225\331\213\274\022\352\266<\253/\024=\232\333\021<6\212\n\275\013\324\314=w]|\275|\355\317\274+\032p=;\231\222=\332\275\r\275\306\246\014\276\336S\342<\251\341\244\275\023\217\006;\216\021\304\273i\357\223\275\255u\'<\254\301\017\272\257\353\215=U6`\275\344\264\n=8v\222\274\273\"o;#X\205=\324\\\313<\001\005\202\275\366,\213<\205a\335<\325\002\001\276\217|\347\275W\315\217=\017\262\306\274Mt\216:\343\314~\274\275\220\205\275\320\300\215\274>\377\367\274\364\230\350<>\316\307\274\2777\003\275\357i\005=\373:\241;[H\304=3\3219\274\002\361\303=\034m/=*\264\253:\321x\376;\t{\342=\360\262\365\274\374\361\256\274\210\256\222\274\345k\006\274\377\247\025\274<\213\001\275\021/Y\274\301\314\330<\365\3061\274\372\016\252<\322\361\377<\035\250I\275\230<\223\275\361\274\001=n\034x\275\024\022\363;\352\"]\275B\214\206=\r\034\230<lhh\274\270\023\024\275\302\236\'=\3306j=\263N\241=\325\266\277\273c\236\"<\315\350C=\340\275\265\275V\3211=\237\322\037\274`~Z<\036\014\276;$\024l\275h\237Z\274fA\227;b\270\027\271\244U\007=\266+A=\246\360\303</t\034\274\313\222\004=\332\313\016=\370\203\222=\271\270$=\247\363\263\275v\307\216\275\177\033\225<\215T_\274\302\207\006=\003o\205<\275\'\356\274c\241;\275A\372Y\275\2344\265=.\271]<\312\231\253\274L\233\214\2743\343_\274\220\247\336;\354o\026>5\236\214=\005\352\345\274\031\341\251=\217\212\255\274\362g\373\274\\Xx<v\r\014=\235\361\021\275\367\234\023<\235\010\225\274\343\031&\275URO\274P\"\300<\255O\366\274\272\236\321\274w\262\325\274\312\212?\274\347\352\256\275\364@\224:;\207\210<\205N\313=_\272\245\273C\263\025:\212k+\275\017`8\275xJ\222\275\365\241\211<\306u\354\274\002jX\275\0275\355\273\336k\273<\210\342\023=\277\313e=4\021\317;M\201\313\2738\225\271<\010\345\327<\226cu<\273\350M\275\001\3467=\320mo<>\220,<\001#\323\274\234o\226<J\263==\020^\300<\323c\367\274u\210.<\304\201j=q\363P\275#\003 <\221\2122\275\256\270.=\201\237\344\273\032\nI=\017{\250\273\030\270\250<\341m*\274\311\315\237;\0205\207\275\347\336D\275\223\265\257<D<-=!\300\003=ArT<\\g\217<m\303\000=\032\325#\274\344\246\303=h\026\247=\200\203\t\275R)\371\273>\007.\274\201k\363\274\216\370\243=,\231&\275\301eR=\r\017T<\274\230\262\274u\314:\275\035\'^\275\305p\\\274i$\334\274-\263\220\274\242\342g\275\360z\201\275l\2157=\220\200<=Sn+=\034dh=\334\300\320\274\252\3318\275\014\336-<\324+\233=\335R\312\273iN4=\007\376H\275\000\031s\274GoV\275\302\274F\275\025\246c\275~\214\332\274P\316\215\275\325\223\300\273\216<\013=\346\231Q<\202\033v:W\327\331<\377FF;\211\272\261<\272\024\264=\'5\263<\203\202\230=;\330\252=-\002.\275\312C&<\016\216G\274\317\026A=b\267g<\240\r\322;\346\036\361<\202j\215\272%8Q\275\007\356`=\215\327\206\273|EC\275>\375\214=\007\260\247\273\254\030\260;\371\351\245\273\036\320\026=1 )=f\275\363\270\005B4\275{\331\017\274\236\001\007\275\320\000V\274\256>\310=\202k\'=BB\256<s\202h=}\365^\273\\Ym\275\333-\225\275`B1\275\226\275(;\000g\365\274\256\231\217<\336\374\276\274f^\376\273\322;^=\016}\220=\225\256-=\016~\277\274aY\217<\377\001\006=\312w\322<\r-\356\274\234\261t=\035/\031\275{\325\216\275\265\032\020\275\r\312\373<\253\032^=7nB\275\211\345\251<j\226O\275\004\220\221\275\212\347:=\242^\t\275vl\204\275JB\266=Z\374\031=\362-C\275<T\030=\014\n\253\274\310\221\032\275nI\260<\223\340\030\274\301\331\304\2742\367\243\273\223\334\245\274n\276\204=*+\324<iB\202\274\222\272\227=\257Dl\2754\337\207\274\223V\312;Y\317\316=\350\222\271\274\277\2344\275\332\350\235\273?\230\212\275\373A\232\275\034%\355<\024\372\254\273\361<b\274\263\206\035\275R\327\037=\275L\376\274\035g>=\256-\232=\310\375\021=P\351\216<x\242[;\2365\363<a\330F=F\300\340\275\337\371\035\2734\3021<\324 \367;\304\301.=\002!\212\274%\341p\275\232F\310\274\376\262\030\275|$\223=\204\"\350<\305!\364;\334\237p=\360\322h=\177\244\334\274\342\307\207=h\303.\275\376\333\357\273M\006#\275\322\3266\275v\362d<\321[\260=A\027\366\274m~T\275\361\351\250=\254\374\331\275\331<\r>\274eD=U\320\215=\236d\017=\230v_<\315\006\027=\375|y=u\364\211=\275lj\272sD\021=\316q\201\275\275\035\025=\354\340I<\202L\032=\r\232\255\275\275\212\224\273@\004a\274\211\366\247<\336e\213\274\026v\206\275N4\247\274\313\230\016=3\tw\274\022W\234:\266\177\211\275O\002\025\275G\316\355;)>\311<\227\257>\272\260\203\222;D\270\007<;\366w\273H\344\236=\372Mq\27534\270=\277!\252<~\024H=C\316\211\275\340\376\014\275{\300E=\225ai=\350y\013=\306\371\272\274a\256$=\215\375\202;J\2752\275\225\324\023;\255H\234\275\010m/\275Bs\377=\230\3705\275\313\362+\275w\360E=\365\245\007<~\267\237<\330\214\234;B\212\303<d\274\225<\373\267\023=\2605\000\275QXX\275\210\262\265\275\376\262#=hU\007\275i\rV=\224\342\315<\330v\264<%\343V=\227\343k\275\353$\325\273D\214\215\275\361#\256=\234.~<\177\r\207=k\235c\275\205\252l\275\024\264\210\274\313\305\304\274&U\312:\274\276\255;\273\203\"=\030F\004>\275\214\354\275d\2712<A\\4\273Dpw\275\204Z\024\274\003v\026<\r\351\311\274L\221\234=\330\343\217<\243\013s\274\354\206\220<\251\225u9bJ\305;\264A\310<8\3037;\323\346\206\275\205\034\022\275\241\332\021\275\037K\253:\200\255\013\2750\317\276<9\244\024=n\276\335;}<\001>N\353\217\274\246\177\\;\021C\202=B\211\022\275\022K9=\270\264\211\275p\007U\273W3\261\275\365\247\375\273\3014\217<>eU=\353\311\002=\037J&=\214(c\273\352\356/\275\202?\007:P\331F=I\005\223<\t1\306<\224z\327\274_#\311\274\n@\026=\233\320/=\346\322@<\376\034z\274\177\t\260\274\374\353\316\2746:\247\273\023P;\275ka\272=\233\333\014=\017u,=B\243\217\274\031a\031\2754\373Z<6q\022=\312\342\240\275\357\377\351;\257\276\335<5\330\225<\177\001O\274\363\203\206\273v8W<\220A\257\274\014\210\306<\326\034\247=\204\344@=\304\364\332\273a\247\231\275\037?\233\275\241\273j\275\024\274}=<  \275\370\247E\275,z\251\274\344\277U\274Q\237P=0\277\335\273<!\316\274\244\t&\275i\304\343<\212d\004\273L=\222\274\"\302\345\274\335}_\274\314\253;\275\236\270\251<i\031\245=\177\3118\275\251\006.\275@\212:\274\226\010 <\016\031>=\204\334\003\274\000\213\r=\353\367\263\275\327\222\010\274\277\374\025\275$\272\231<\266\234Y\273\004\365\300\274\276\203\331<d\024\214<\204\315k=\277|;\275bI\036=\204\207\221=\327vh=;\rs=\204\243\014\275\345=9<\r\n$\275\360\312>\275\036\333|=\241\345&=)\030\252\274\337<\022=\037\030\005\274QI\217=\246>G\2745\256\304\275:o\024=\300B\233<\313\276(<v\211\220=\240\351\242\275S%3=V\372\220\274{\263\275=\032\352\266;\213\232\177\274\177o\034\275\342\200\300<=\355\231\274s\240\017\275\357\321Y<\325pG\274\327\216\020=\034>\032\274~*\203\275\213#4=-r\200<\240\322\026;\317\342\217\273\374#\234<~(\021=\266&\250<a*y\274\356m\235<\275\351q<[Z\336\274\307B(<\211\"\310\274\247\177\212;\300?\263;\332\210\212\275\007\276\200=n^\273<\324c5\272\221\n\305<\250\204]\274\205EP=\214\306\337\274M\327\217\2742\367\263=\271lC\275\325\262\366<\272\231\315\274O\267\224\274R]\027\275\203|.=\214n5<\025a\221;h\005\255<\266\323\213\275\262\313\257\2758;\202=\231\271\t=^\312\350\275\334\314\224\272+@\222<s)s\274NR\307\275\360\353\321\274\351\304\026=(\307\034\275\020`\252<_\273\342\2742\251\234<\244X\200<q\250\352<\244_\353<\236\024I:\\\225<<\"\265\336\2744)\241=\314\\\345<s\252\262\273\351\021\250<\270e\215=\364\n\343\275U\224\232\275\024\312\241\273\035D\312\273i\354\335\274\251\322\201\274\304\t\341<\236\321\213=\257\352\236<\321a\031\275\307\206\252=\030\374\233=\204o\t<\243\002><\243u\274;\307/#<\365\373p<\331\333 =m\350\365\274N B\275\260\003\263=\202bb<\350C4\275\244e8<qJ\274\274\237\213b=\027\254\263\274\2058*=f\034!=\332\024h\274\345\234!\274\315\372\023=\037\257\265\273\231\314\031\275\267C\224<D\373\005\275;\265\314\274\235~\217=M\247\251\274H\231\241\274\363\263V<\352\003\314\274\205\372^\275V\232\253=B\212\247\274\211}\370<Qi\020\275\377T\303=\325\363N\275z\261\200\274\312g\371\274\311p7;>\235R;\326\351\000\275S\264\307\274\\\362\203\273\221H\306<$\221\256\275\324\347N\274\302v\204\275\235\260h=m\267@\275%Ka=\360\341\227=f\261\274<l)\375<\r\371\275\275|\274\351<@60=l\361\367<\261zS=5\\\230\275\3579\321\274i\341\366\274\')\330\272\033\345~<1:\276\274x\003\377\275\350#\255=\221kX\275^\336H<p%\010<\213\003\265<\324V,=\221\207\220=r\270\334<\272a\211<\304\005\222=0\220\222<\205\357\257:\257\201%=C\327\275;\275\214\027<@f\003\273\224,\016=F\313\307\273\245\261\205<\024\347\027\273\017bm\275z\324\260<}M\231;~\212\035<Y\220*=\n\250\226=P\375~=\305\207T=\030\276\224=|\026\025\275U>\001<9>]<\"\312\240\275\003\021\332;\261\327\202\274\374t\001<\304\326:<\273\026\324<<\367$\275_\362\n\274PP\212=\034k\320=\240\025\243\275\277\375\221=1\314#\275\375\277\256\274\302H:=\203\360q\274\320\262\226=h\215\n<\032\3556\275>/\034=\246j\344<\264\266\275:\330\032\226\273\260\231K\274\262(\243\274\004@V;\255\375\256<=\251\005>\025\245.\275\230V\246\274\306.0=?\362\224\275<\314\014\275B\257\221=\"\014N\275\264.b\275\377\275\340\275\233\356\034\274\264\253\006\275Oz\204\275\026w\200\275\035\0210=\232\377\241\272g\367\253\274\002\333\360<\206\026\376\2731\357\305;\213\363\276\274\305\313\315\274VL =\230\241\250\275\311\007\004\275\303\252\374<\342\275Q<\3466J={\2310\275d\006\227\272\2763n\275\275Ne=\262fY=\007\247\\<\344\2348\275\302\273\212=\223\2033\275\202\243\024\2758uC=\317\274\237=\3158I\275\316\"\203\274\177\332f=\235\215\037<\355\350\'\275\266!\214\275<\tv\275\265\235\320\273\363\263\240=\340\245\231;\201\377\240\275\265\240\351<g\230-\275\tL]\273N\025\r\275`\324\013\275S\314\222<L\301\243\274t0\264\274`\205/\275@~\203\275\377Ub=\021y^\275\367/t\275^d\267;\376\\\247\272\027\021\016\275\353O8\276:\357\352;pvB;p5Z=\031\367%\275(\343#\275R\252\215=s\307\031\275\336\323\222=\351\235\226\274|\251\256\274\234\352\301<u\350U\275Hf\257;k/\367\274\266\323\036=\361\261\273<\031\007\370\272\237#&:\177\333\335\275\005\\)\275\324\320^\275\021\002*\275\361T\200\274#0K\274^\351\220\275\320\331\004=J\270\027\275).\217\275\324ZX\274\210gx=k>\030=\210\332\271\274xY\022\274\3255\236;^\321\274\275\026\201\037;\225\370\275<\230FS=\236M\244<+\360\332\274\317p\215\275\032\337$\275h\'S\273\332\261+=\366\272\213=\352\240\360\274\317\350\232<\207B\337=\311\214h=?^3;z< \275\024Ji\274j\312D<\205\313\247\275\234\254\276\273\301\030B=\006\327\317;2\310\225=\3137\035\275\357+T\274@}\034;\277U-\274K\273\355<\252bj\275Mu\220<A\226\"9\202\003\342=tN<\274[a\027\272\213\365\016=\374\021\242\274\331\323\216\275O3\033\272\201\302\347\274e\361\335;\360\366\340\274\266M\006;\035u\"\274\231\n\365<\334_G<\205\203\216<\024\210\303\275i\027\177\274.<]<Ypb=\326j\270<\245#1\275\035\274Q<_\033\226<\235\275(\274\202\271P\273>\035\220;,\r\260\273\216qx\275\301\'f=\242+\002\274\224\330k\275EI\213\274\210\2069\274$\353\204;\ta\243\275\205|\203<\352%\\\274k\344\303=\r\\\'\275\251\343\316\274\030l\216\275\247\3747=\267%\214\274\274l\365\273\267\204\200\275\237\357\226\274\036H\241=8\232\275\275\344Y\253\274\322\030\340\274\251@$\275Hh\231;\334p\014\275\350\363\002=\035\365\331<\224\3405\275\024\314\366<\037|l\274\366o\020\275\227\250\215\2734\257\024\275N{\n\275\24101=\306\322\340\275\337|\337<B\331<=\367=\236\275o\n\220\2749^\330=\237\317\247<v\225~\273\332\215!\274\224I\374\274\355\024c\275\372\366\245;C\030\025<\035\305\034=y*\204==\235\016\274\331\250\203=\316\363\234<\355c&=\273O\271<o\251U\2751\335\357\274\000\004\206\274\225X\223\273:G\271<\030\253\373\274\216&#<U\263\246<\345F\265\274^V\275<\0042\250\274\274\337?\274\031\004\247<)\"\251=\025?\317\274A\262@=\242N\221<\275\036\232\275L?\307:\033\007=\275\276\243\202\274\246{\304;p\024k==\203\366\274A\t)<1u\n=\017`j<\356$\361\274_\211|\2756\324\323\274\330\236>;\367pv\274\277H\261\274a\266\243\275\262\237\226\274\256F$=p\250\r\275\177:A\275\026\207\r\275\232\332\004\275r\0013\275j\032\017\275P5O\275\367\266S\274\317\023r<5Xb\275\326\034\354:\'\005\\:\0036\\;\275e\250\275,\375\256\274\247\023k\275\215\000o\274\t?\312;J%i=\377{T\275\272\177c;\305T\215\274|d\246\275V\352 \275\270\256\";o\276\346\2735\254g\275\232\302=\275\345 T=\002\277\271\273`\252\354\274\035|\313\275O\372(\275\014FY;\201u\235=e\030\321=J1\001\275\243\202\211=\251\257q\275\003\234\317<I\324\277\274/5\317<F\343i\274b\353\030\274\311\n\246=\230\251R<^\334*=D\324\005:\226.\327\2742\354\273\273=\266c<B\006\035\275\243\303\031=\307+\024\275d]\216<\225\217\223=\037\354\234<\207\275\203\274S;\030<\005\316E\274\266\347\251;\212\030\234\275\315\006\032\274*\214\013\275\316\302\033<(\340\226=|X\245<\207\267\226\274\214\364\205=T\\\016\274\235h\365<\3755\2559\310\220\233\275\301\234\317<\023\3610\274\354\2170=\3177\033\274+\'\221\275\242h\204\275\304\266\377\272\363[\266<\005Y\213=\305\257m\275X\366\301< M7\275s\300\211\273\343s\377\274\014\257+\273ba2=\007D\237\274q^C<T\'\362<G\\\245\273\000!\n\274<-\351\274\316\304#=\304\037\260\275\202\007]<P]\201\275G\336\273\275A\247Z\275\203E\261;\032\331\025=\327\205m\274K-\266\274\356_7=\365\231\214;\205B\345\2749\355n=\341\267&=\361[\220<\326\215`\275C\236\270\274n\350A\275G,x;\324\334\022\275\357\314\221={]\237<%\004\006=\321\222\356\273\273V\032\275\"9\223=\241\303\276\274\357K|=\376\245\027\272\347\253=\275\025\247b=\266f\213\275\250s#<\346\003`\275P\277\320<\335\316\226\274\240U\235\275\201\317\266<\343p.=4\216\004=\303\010@\275\277\177\361<\310\366\272\275\366\334\310;\202\277n\275\304f\302\274\267\252\376; \334I\275\306\277Y:\320\3755\275\324\340\302<\275(\344\272:$=\274\233\356\351:\020\336\267:L\364,\275\316\311\213=\003^+\274\254\332\360\274\343\221{\275\271\236p=\335\017\202\274A\017<;LS\216\275\205\272\026\274)\035\314<\246b\217\274\3010\320;\2525\311\274\336*\032\275\327\205\202\275:B\270\274\347\016~\275\'\221\203\275l\273P=\251!\'=\303\213\315\274\234#&=\260C\247=>\224\224<\273J%=U\264\024<\n!\247\275\02296\275(\204\r\275/\3540=\342`\333= \336Q\275\033%!<\r\221+=\273?\025\275=\357A=\355\237\246\274\212[>;\027\367P=\342\331S=\325\271J\274\361\003\346=(\340\326<\272\312\003\275Z\217<\274b\256\216\274\373\317\272\274\r\313\025<0\232Z\274\031\'\333\274\346\200\013=\213\316\212<hq\023\275.\357\231\274X\310\001\274\001\035v\275\254\020M=\352JB<\362\035.\274\252\326\002<\2767\001<+\211\206<\250\263\037\275\022\354A\273A^u=\007k\220<\213\356\267;\232Ff<D\2451<\300\307v=o\266\251\275\272n\247\273\260DJ=\351Y\252\274\247\202\022;\224\2616=\354k/<<I{\274\022T\324;\252\274B\275Jk\251=P\371\020=+\264\013\275\360g,=\261W`\275\377#\335<\202Y\212<\271\360\'=\201\224\255<[\213X\275\307\365\342\274\346\227C;[[\270\275V\374@\275\217\3007\275d\205 \274\260\241\275=T`\204\274\255\310\000<\303\276\001=\273\223\231\275i\376\371<\004\242\037=4\331P\274\302\3060\275\224\246\227\273\352k7\275\r\215\247\274\027\3630<%B\274\275\222\302!\275i\260\354\272Dt\016\275\257\312\323\274\236\312\247\273\371)\221=>\211F\275\341sG=r\246\232<\333\227\034\275\262}\021=\312UK=\023\366;<\267\226\177\275\030\200\022\275\214\252r\275g\207S\275\357\026\006=\240\031\263\275\350\202\333<\206\337\364<-\003\233;jc\236<\241{\271<\257B3\275e\315i\274\364\204\372\274\301\335\001\275\002V4=J\317\035\274\311\024\337;\242\013\365<\240\361\205\274A\r\264\274$$\r=\006\311\374=\022Z\327\274ClR\275\230\350\272\274\267\264+=\256r\204=\030&\"\275w\037\247=\356w\262<\312r/\273!,\323<\205\251L;\231\3635<5p\026\275\361\235\\\274w`a<\362\\4=_\275\302<\367\202\265<\342\331g=\233=\236<\343$\024\275\354\375P<!)S=\214\264 =\343lz\274:\361\205=}\'\225<_F\243=3D\265;\256\025j<\252\225\376<\310\374\"=\023\301S<a\262\021\274N\221#\274\023\031\274=\254\363K<\276gy\2750\001\206\275a\250\302=\370\243~<qw\355\275]\275w<\007\300n\275e8\034\273\222g>\275\'Y\363<\224\323\017=\220\344\272<\350\323\215\27484$\275\323\377\204\274zR\351;4\242\203<\2515r=\232F\343=\240\261\204=Z\214N\275c\213{\275\341\273\241; \371\341\271\225$b\274y\000\272=?\275\376\275\036\217\262=\360\307\325=#\242\202\274\257\325j=\r\342\245\274}\237\024\275\221\204\371<\375\272V\272be,\275\3331&=Z\263\t\275<c\252\275\333%\207<\031\250L<\021I\200=Gj.=\020\341%\275\021~\t\275\030f\303<y\303\240;\260\336\253\2747\227\344\273\004i\205=ZR\361<!Z\347\273\242\300\247\274\330G\240<>\374\234\275*w\265<W\\I\273\265\216\256;Y\324\323\273\364Rh\275z\235\037\275\221\377\013=\023\264\261\275BW\330<\331\223\217==9\021=\262\r$<%\276M=[(\313;\265\2475=\201\265R\275\347\261\224;\tN>=\035}?\274C{\205=g\032\304=\036\225+<\325\370\236=J\210Z=1\243\t=\341LB\275\210O5\275]\241\336\275\235\2444\275\322\233\253=x\325\215=a\366\205\275\261i@<o\314\315<\270\206\335\274\310\253\255\2744p\242<i\206W\275@^\201<\301&\203<\006\261\033\2752|5;\356\263F=e<,=\333\031\211\275\210&\221\274\277\274\264\275\306\212\345<\322\251\033=P\0360; \235\256=\235k\247\275\251\221\371\274\273\025\263\274\322:\031=\036\367/=UH\013\275\030\021\355<\303\351L<\354\034\033=\362\306\005=\002\2166\275?\373\340\274\234\357\202\275N\361[\275\233\3711=W\370\245<\037\355s\273\241:\233:\277\201\231<x\204i=\317s);\276\240\276<Ic=\271F\376\023\275[\222,=W\276\363\274\367pC\271\177\r\207=\322\246>=ca\205\275&\016\355<\0163w\275\000\247\210\274Jm\306\274\256\230s<\352\036\202\275\314\371B=rQ\200\274\251h \274\nM\324\274\217\327\275\274\2243}\274T\262\032\274\233\240\206<P\031R\275\207\006\214\275Of\022\275\252\347\225\274I\020\303\274\330\353 \275\364\001\244=K6\356:\016\233}\275*\344U=\267\337x=v\307\347\275\207\275j\275\276\2506=\001\027s\27253\377<\214\302\212=\327^*:_\320m=\"\014\364\272>\353?=Z\'\216\274P\363\221\274\360\302\353<\246\326;=\300\027\224<\334\243\021=\215h\232<B\210\225:*B\027=\344n{\272:\221\326\273\004t)\275*\364\377\271\025x\257=\347!d\275_#\225=\270r\267\274\022f\202<\320 \025\275\177*\335<\224M\016<\263\207\205=\276~\036<\027B\016<zUj\274Y\032\250\273\0037\275<9\217{\274\223\230\247<\244\271\213=\020\262\317\274Hp\356;E,\350\274\357\215\"\273;\222V=r\to\273\036rX\275544\273\023s\013\275S\013$\2758oM=]\362W<th\223\2754\255z<r\010`=\252\257\225<.\352~\274\207,\252\275\315\316Y\273\260\373P\275\022\374\243\274\263\212\347<\005?j\273R\'\227\274\303\223\005\275\035\000r=+\366\272\273\204TY\273!\230\374<^!\013=\316q\243<G\225\006\272\332\204\343;\222\340\"=+\232!\274+\242\211\275t\220]\275\265\237`\275\013zd\275}\2378=\200\002\314\274\014|\010\275\322\2743<\272\350\323\275\373\215\225\275\271V\333:#2h=8y\274\274\021\265\277<\213\347\357\273\214R\231;&mL\274$\262\240<\364?G=d\376\331<q\213\214;\'#5<2\243\273=F\353\315\275\\\346\254=\3216\003\274\250\334`<y\204\220\275\236\334\027=p\303\003\275\r\243\214\275\r\272D\275\252\023R=\276:\326;|\341\320<\032(k<\304\211r\274\300 \201\274\261\231:\275C\277\375\274\341E\247\274\376\240\341\274\022\205==\271n\355\274\007U\276<\252)\025=\266\323\345<\032\177$<\366\215\274;\211\2026;\373\201\221\275\324\216\222<;\212\334=\003\365Q\274\207=\007=shq<(\322\242=\"\007\364<\217y\311=\016\024\347<\242\331$\275H\217\320\274L\250J\275n\233\216=\237\252\231=\263\326\346<t\276\222\274#~,\275em5<Q.\250<k\355\313;\034mB=\315-\260<E0\323<\031V\302\273\337\271\211\274z\371p=\200HT\275\217\tR\275\314\336_<\244_\313\274\236\255/=\177\346\244\275\371\320\225=<\351\235<<$\002=\264}\n<\206:\312\275\033\364A=\265\001A<\237\2650=T\311\253<ID\307<\200\244\232<\001\251\276\275\362\253\210=K\324\017\274\300\\\272;\241\321\001\275l\204o\275\312\300\262\274\330\212 =\220c\346:x\266\370=\361L\020=,\350h\275\333(\335\274\330\035\205<\020d\300\274\262f\026=\001\362\226\275\031\232\260\274\021\266\230=_*\"\275\001\346\232=h8Y<\261\304$\275\027\342#\275\2002\222\274\360\334\013\275\253\'f\275\335\335&\274\355\022B\274\031E\245\275\007\243\036=\305\342N\274\223\030)\275\272\374\021\275\t\236\007<\305f\203=\034\027u=\224\203J<.\213C\274\262\031w\275\303\270y=\371\215\303<\\\213\322<\002\255B\274\322\202\352<\375t\237<Pi\026\275y\215i\275[Q\376<\223\261\n=\224\233\t\275\204\371H\274d\306\027\273\0318o<\213\310\337<E\0331;\317\355\237\274S\330Y\275\200\334J\275\005$\032\275S\301M\275\375fQ\275\342\250k\275\035pi\275\006\021\330\275\237\025r=|\265\254=U\372L=X<\223\273n\"K;0TG=\354K,\274\r\310\220\274ZQ\244\274\324\307!=\1771\202<h>\204<*z\317\274\250\222\253\2758\215\264<\014\327N\275\355~\253<v\330\211<*\004A=o\016\214<\333$\035=\337_\222\274\346\007\376<\260\n\t;Ii \275}q\244=\2658\304\275V\224\205=\022\336\202<\271\335t= \014\035<\326\024\007\274\344A\233\274\240P?=\213\016Y\275w\312\267\272\233\363\331\275\203\353\244\273b\245\256\273\262\025\n=~l\263\275\024\306c=\251\217\245<\340\273\001\275\003I\013=\037\227P\275\343T`=\317\216\213\275D7`=\352(M=\030\355\333\275\244T\227<\212\311o=)\341\026<\365\'V<TU\215\275\302\204\0139m\264\250\274/\351g=[\264i<\273S\332=n\260\337\274\266K\032\275m\324.<\253@?;\342\242\036\275\'4\035=\316-\345\274Az\001\275\004\243\226<\362\371J=K\005@<{@\273<\n\376N=\214R<\274n\300\r<\352\363\n>\030R\263;\001p\327\272UI\324<9\354\032\275#\334(=\235\212\342<\247\276\340<\330>\326\273!\375m<;\230,\275BWi=\241\350\202\275Y\277!<\215\277@\275\024$\211=_V\315;?\351\225\274\320\207\007;\325\331\246\275\346\345\254\274\206\227\204;L\310\277<\036\357d=\257\347g\275\330\306\031=cA\313;:We<\267\t-\275fk\340\274\r\016X=\323\225=\274\324j\225\274-r\263\275<\377\255\273S\2312\274\tF\013\2756\274G=\344\246\003=\302|\371\274|\317\001\275\342\221`\275\350\257\202\275Vm2;\210`\252\274]\303\217;\3542\020\275\225\210\314<1B\211<\255\200E=\323c\253:\261\253&=<\241\263<\331\276\256=$\232\247\2747E^\275\020\263\201\275\322\251\022=\270\333\254\274\242\301\261<`\036\370\274/\373\324<\001L\322\2748\314\017=\324\375\306\2750\344\234\273J\310\032<_\t\006\275\323\034\314\275\253\'\307\274\253\316\177=\275\346\234=\036u\034\275\337|\224\271\025\265\262\273\373\227T<\230\005\210=\026\325<\275N\333\207<\306v}\275{=\216<%e\271;\324\211\263\275h\202\255=T\343\272\274\323>\260<\"8\234<W7\250=\314+\217=x\245\320\274\262\367\320\274z\267Y=q\027\037\275?\333j\275n\350\256\274\213\266\351\274$\227\377\2747\n<\275*\021\215\274\204\323\024\273N\0162\275\032\343\025=\014\225\351\274\373\215U=\3257\234\275lu\n\2753\276\022=\240t\200=.A\231=p-R=\357AR<\317y6=\366\251\225=\032\354\217\275-\267\211=Jdi=\305fD\273\243-\035>1u\251\275f\321\346<\017S\252\274\236\272Q\273q}\316=q\335\035\275\337\346\335<9=M;\256\274\200\274\263c\241<\366o\254<\236r\204<e\314\025\275T\031\222\275-\346\217=\335\227C=\0062\253<&\030\365<\371\030\220\275\377\257\022=\221\367\374<\326\252\210:\261\357\302\275*\0274=F\034\003\274\006\371\245\275_\222\245=K\342\016<\037\371\016=\020\224\203\275n!\347<\272\020\374\275\"\336@;\351\224\245\275k\'\t=\020\231\325\274\210\256\037<\274\243a\275\300\343\214\274\233D\267<:\263\332\274\356\004$\275\ne\235=\020\177f\274\306\013\213<\242;\027\2753\345\201\275\230\204\017=\000\336\022;n2O\275P\207\263<NmB\273=\034$\275\301 \311<\375\004\017=|\rg\274i\270\302\274E\030\375=!\262\334\274q\246\312=f\020D=V\255\360<\350\274\276<\013\202K\272\315\342P\275\037\021V<\323\326\026\274\001\243\255<\000\"a;\205:\024\275\236#$\2751$5\275f\004\022\274x\236\357\274\230*w\273\307\273@\275RF\202;p\272\035\274%`$\275\255)W<\016\216q\272=p\220<(\200q=ZA[\275\001\236\030\275\350\337{=L\005\322\274\247\343\276\275\346 4=\255\023\033<\247\350\030\275Daw\275\316|\373;\322w\316\274G\257\265;Ls\022\275\313I\264;\"\333\004\274}\205\022\274\017\275\036\275}\343\275<\203\177e\275\3558\370\274&!\223\274\3400\t\275\246Ac=\032 N=J\324\342<g\317\310<\270\340\311\274J\302\240\275p-C<=?\212\275(\265m\274\317\325:<\270z\312<\004\n\322</\216\355;\000N\231<\016\356\210<?\216T\275\003Z\233\274\314r\224\275\243\032C\275\035R\217=\020K\267;,I\r=\251\323,<Q,\246\274N\211\205:\201u<=JvL\273k\021&\275+}\201<\244\376\263=c?\220\275O9\316;\000m\007\275p7!\274\020:\327\274\322\373R\274s0G\275\326\251P<\263\247\376\274\334\307\355<\265\242\242\275\376\222?\273\311\300\267\274\362A\037\275\232\350\014=\203\001\232<\023)L:;a\033<\223~\006\275B\322x\274\310G\221=\202\244\202=\301\0346\275\305\204I\275\344\235\220=\362\312\211\273\260\356)<\3318\236=\337K1<\336,\010<\265\271\216<{p\240\275\000D\027<\330f\024\275\211\340\376\274\374\252\233\275\003\270\207=c\253\373\274\343\271\262\273\262\222!=\244\021b\275\026\220\251=\326\014(\275\276IA=\221Y\245<\022:\274\274\265\354\033=r\0006=E~\213;\345BN\274\027\270\246\275?\310\037\275\031\251y\274.~\221:\362\"\325;\320v\354;\277&!\275z@\354<{*;\275\236}\232\274\205A\251;\365\251$\275\177\335\263\275\305\206R\275\360\2332;\327\375\222=\314\3006=\246\267\260\275<P7\275)\317:=\362\274\245\275u~\177\275d\346\353<\025\225\016=\266\270\260\274+\345\213\275\260#3\275\264\217&\274SH\267\274l\2310\275k\337\317<\247e\353\274\203\234w\274\t\332\223\274\227\351\321<D O\275\266wf\275\3018H=\375l0\274\t=\271<5Y\262<P\230\332;\305\322)\274\036\202\243<\337\370\225;\230\365\210<\371d\377\273U\210\274\274\321\005\267=nFl\274?\342R<\344\200\374\274O\225_=\025?\364\273x#\254\271\256\233\351\274\304\201\277<\350\364\257\275u\344\271\274\222\231\371\274\307\276\222\274\341Ep\275\334>\232\273`\301\264<\004Jx=\017s)=-\241r<m\330\237\272\230\333\237<\tL?\275\373\325D\273o\257\014\273\340\231\013=\362\347;\275\373\331\242\274\255\260k\275\264&\007\275o\223\347\275\316\\K;\3474\032<\3175\221=j(\351<\324\007O\275\351\010\304= IA\275\341\3247=5o&=\373y\025\274\217x\311<=\374\316;\207\013\265\274\271j]=\177\304k:\026\033L;\343i\221=+\342\304\274\233\r\037=\272\220\304\274\033\341[=w\351\255\274\277\321\362\274\321\374\031\275\\E\351\273\010b\352;\3552\316;\306\363\021=\311]\203=\233\003H=\364C\232;\275e\242=\345\257u=Yl\001\275\304b\241<\372\255\026\275\272\333D\274\212\324\335;6U\234=\000\001\";5m\343\274\237e\270<p\233v=\002\340\311=Y\273\272=\271(\334;\032\304O<\342!\n\273\325\\1\275\326\211M\273w4\364<\237A\234\274\200\373\360\2747\372\210\275\205A\345<k\033\037=f\002=<\020\320\222\275\227\304\357\274D\2015\274\376\263\274\274q\335\201\275\267\353z\275\225\335 \275{\366\014\275\271$A<t\350?\274\341\030\324\274\364\317\215\275iI\021\275\"\201}\275\374\227v<Dn\021\274/\211r\274~ \000=`\016\247\274Z\260\367<@\354\257=V\037\220\275DC\177\275\ttP\274b\234\312<#\331\340<\315\016\003=\365\023\315\275\337Q\025\272\202\177q\275\022\263@9Pqu\274\031Zs\2751\376\301<\315\242\321<\301\376V=L\217W<QTk<*}\236\2758\260R\275L\302\370\273\205\001\231\275\033\201\206\274lH\013=pu\373=y\311E\274\247`\037\275\240SK\274\346\232/;D\\<\275\272\036C\271)\353\000\275*\r\201\274J@%\275\007#\222\275P~\005<\220DV<\367\362\350;\262\2368\275\303\251[\275\'\023\252\275\"6\031\272\344\177\324<:%?:\326S\"\275]\234u<\272\274\221=\377\264z=\036\037J\275I\031\352\2727\371#=\003R\203\274]<\'\275\343/\376\273\270\033\317\274\277dG<\277V\327:\201\250\007\275\254{\213\275)\365\323\274\0140\242<ui\373<8\023\370\274b\237\037\275{`\217\273;\221\211=\327\213\273\274Q\211\022\274\263z\265\274\340\267+\275\263\265\275:\306\032\231\274E\372\200=#\tb\275\013d\251\275\336\212\023\273\315g\201\275F8\005\275\372\314\003\275\343\036\211\273\313\177\206\274,\321\3159K\240\310:l\214\200\275\227j\241=I\242X\272\376\r7\275{\325\034\274*h\343\274\277\031$\275#\324\362;\272\t\234\274N\213\333\275\373u\364\274\360Mb=em\036=\356x\231=\022O\213\275\334M\r\275\246.\222\275\212\3339=9%g\275\327\377,\275\235\026\317\275.Fw\275\353\311\023<3\373\034:\226\254\217=\257Z\253<\307\336\307<\326/s<\303}\242=\326T\324<\022\364\002\276\271\301\350\273\233W\034\275\253{\204\275\310\235\241\274A9\013<\226\3170\274\250L\004\275Q\235\020\275J\226\213;\306\016\014\272@{-\275\345Sc<\000: =\2749\223<a8\202=\032\322\277<\0278\371\275\223\025\215\275\001\r4=\'\023P\275Z\017\321\274d\377Z=\013\215\201=Wi\341;C\345a<\227\324\360\273\251%#\275\004\260\347<z#\024\273n;\235\274R\007$=\027\222\262\275-47\274\276\010z=\340\241\254<\004\237\273\275d\257\362\274%\354\004=\307&\003\275\264\203p\2759S\032\274\312\300\265<\312\251\017\273\303\314\014\275\270\363\233\275:\026i<\267_\273<\367\277\274<\221v\006=\202\017C\275\321NH\275\037x\240\275\334\326\030\275\000\215/\275Lz\021<\030\014,\274\332\233\223<\273\2260\275o\003\271=\004\300\021\275\267xX=\35774=\220\245\232\273\236h\235=x\024\262\274\204 o=\354\266\206\275\005\223\276\274\363~\355\274\232\204\033\272\232\303\317<\334:\220<\245\250T\275\331\006@\275\240l\316\273$w\264<\032\225\232:]V\361;\203<]\274\335<\257=X\004\000=4t\245\274{\206H=\331\261\333<p\346}\275\360\336\321\273\260\303[\275\251\372\202\2736>\246<f\265\221\274y\243\223\274\205\254\211\2742\251>\275q\326\021\275\355\2302==!\010=Uu\245\274&Lz\275\355.\273=hEw\273H^\201;N\007S\274h\254V<\216<C<\217]7\275`\202\304\274\357\346%<e\003d<\204\326B\273^\360&\275\277\214\325\275v\034\027=\021h\233\273\2602\203\275\212\375\222\273\213\034J=t\336\324\273J\304\200<5\246\365\274\225`\311<7rb\274z\362p=p3+=\302\n?=\264Y\272\273\330a\327=Eb\331=,F\322\274\323\211\216\275#\354-\275\276\343\277\274u}\021\274\276\253\234;\373\\5=p\222\020\275\377t\010\275T\237\227:n\232\224;f\n\002;\236n(=\353_1=\027\324\271<0\242:\275[\2615\275\373{Y=\242\'\242;\314\314\240=+,\267\275x\024\232<\034\204H\275q1\253<\341\377?<V\215\214=\3139\344\272\032rJ\273\'18<\344\230\236=y\003\266<\n\227\232\274HU\317\274\332\277U=\336\247\016=y\241\310\274m\200z;%\335\007\275\276\317\211<\256\002\016\275+\360\246=5B\023=\257\025\214\275\360\265\331\274\376\372==)\310!\275\r\232g\274]\374\023=\351iD\274}\324\223\275\342|\240;\t\265%<\211\227\r\275\244\021\207\274*\342w<j=\231=:\004\242\275\264\267\017=\037/Q=\325@\317<\343\250\030=81_=[Y\022=d\305\270\275\366i\230\274\222H+\275W\324 \275\335\346\223=a)B\275\374\364W\272\305\000\t<\234\342\330\274*\202\224\274\202\267\002=\000:\033\273\271\235\232=\350\206\220=\276G\n<\231\024\251<\325\001\242\274\003-\t\275\226a\243\275\026~\240\275\343\350\215\274\352\202s\274\000I\240<wc\341\274\334=V=\310\020\037\275\025\304*\274+S\330;\343\253N\275,\370\257\275\033-$=5\233\017\275\300\026\246<1\256D=o\023\332<\030\021\204\275T_\321:\024\020\216;.\266\016\275\245<g;\363\001s:#\261\304\274(\177\210\275\335\324\234=\371\234\000<\003\215\206=9\265}\274\351k\322<\027\241\023\275\316`b=\304tP\275L\331\247=\205\010\005\275D\314\316<\010wO\275\306S_<P\325);\235\220)\274\353`U<\252Xs=`\316\204=3\306$=\346\023\251\274\310M\216\272\000\025\270\275\315\031\235<\207\315\211;n\366Z\2758.-<\035\252\270\274\307\016\'\275\3337,\275\320\000\225;J\206\033=M\332F<\260\245\031\275I\305\351<\364^\234\274\t\275:\274\323\003\311\274\035M\325\274\226\215\306;\233\213\230\274`\212\021\275\215#\223\275\207\224/\275V\353\007=\334\310[;\273\304(<\342u\314<b\272\254\274+\231\006\274\265@\335<8\262b=s\234\205;8\376\001\276D\365\246\274\265\003\346\274\320F\247=}1\305:\016\311.\275\017ol\275\362m\004=\240\212\000<.<#\274\025\356\373:\345\266\237\275\262m\335=\245\221j\275\247Qe=\202\374\254<\353\023\002\275-\242F=_\324C\275;\350}=\367\004\214\275\256\334\246\274h\004\223<\312\327\303\275\027U\342<\303=\035\275\260YI<wf\234\275\334E\313=\027\3125\274\376q\205<\226t\017\276\370\022\210\274i\034\231\275/\013\026\275s4D\275]\344\204<~\260?=\342\207t\275\007\262P:\364U\024=\260 m\275\373\243\005\275\004G<\275j\256|\274\315\006\002=(\334<<w\223\324\274\314X\021=\267|P<{H)=_yA=\324\341\227\275@\2168<\257\213\325<\t\253\312;\342z\351<\241\243&\2754\273\001:\373\235\177\274\306(\025=Z\214X\275\302\034>=\276\n\364\271n\321x\275\340\345\006\2740PW\275\242\2516=r\220R=hn>=4v!\275~o\243=\235.\337<\215\313\323<=\037\302=\261\363\332\274\0103\204<E\274\031\275a\312a\275\310\207\300<\232E+<\217\004t<{\r\\\275\202\'\006=\342\006\333<hk\352=\375\222\001\275\332c8<\200\032D\275\305\036\007=\333\265\025\275\237?Q\275\250\033\362:\242\212\231\275\333_\247\275\243\365\246=Wb\360\274V\n5<\375\353x=\025\t\001=\307bF=?\256\304\274y\305\003<<\234\255\275r\214\330<dh[\274\353\376\301\275\235\332\315\274\267\343\237\274\204p\332<\034P5<o8\221\274\351\335\267\274\333\3142<\000x\217\275\304\325\265<y\224a=\325\307\323\274\037K\222;\364\210[=\242\267\t=\234\210\204<\377\300\266=Xx{\274Y\256\210<l\213E<\213\014\260\275\212\363\263\274\016Y!=\352\324\260=}t\320\275q\362\202=\370\326\007\275\023\242\264\274P\221\010\274\251\261R=\'l\321;\372\200\260<\240Wc\275.Tl\2757\377\300\275\030\270h=\360\234\210=\r\300|=\n\001\273;\361\256\001\276dq\005\275#f\216\272f\370@\275\363M\003\275\340f\337\274n\307\177\274\033=\026<\213\254\022=\310\323F=\3711\310\275\035p\036=\325h\352;]\313\366<-b\"<dkO\275\026\030\243\274\212\307\340\274iz\274<\251\257i\272>\332\231<,f\026=\326I3<=_\326\274\235\305\233<\251% <\233\"\305\273\366p\235\274F=\221<\016\345\251=?r\342\274\320\005\243\273&n\022\274\037KC;\242\353%\274X\001 \275~\223\030=7\365R\2744\321s\275\314\311\201\2750\275,<\375\357_\273\301\235x\274n\276w<\201\314\255<+e\246\274\353BS\274\256_\213\273\277\244\305\274\347\221\027<\3327\261\274`\0246\275j\245B\274\205N\r\274z~\233\275\203N~\274Z\246\301\274\350\230\010=\354\244g\275\254\353\214<\332\207\355\275\343!S\275 \036\260\274\340m\212\275\313\347+<\211:O\273\200#{\274\243\263\331<\212\255J=hz\301\270\204\005\264\275&\201\3609`\334X=%\001S\275(\177\002\275\263\2742<p\355\211=)\027\373\274\245\340\035\275\353*\013\274\337]S<`\346\014=\343\t\200=\256\226\310;Q\025==R\263\371\274(\330_=\271\253\312=\255\245\335\274\323m\313\274\243\311\016\275\264\234\203=7Lk=\346j2<\013\024\243<\"<\306<T\330\004<`\333\014\275\335\224=\275%\360\207;\231\016\236;u\323\216\275\255A\375\2747\212\216\271x\236\200\275\013\010\235<\000X\317\274%\313\020=\331(\216=n#\215\273\310E3\274\204\"\345<\001\351\364<W\244\266<F\031\210=*\020+\275\373[\214=;\336!\275\314Yx;\272\202\347\275^\215.=\327\307\207\275\244w\342\275\317\036\247=\232P)=\2437\256<h\225\300=\013\246\005\275\343\215\274\273\302#\206<A\344\200\274B\335\311<F[c\275\264\260\004\273\233\337\246\274\2733\376;}\317\007=\251\352\367;\3337E<x\272\357\274Z\020\225\274\360z\363<\274\206\373=\212\225R\274\245\337\n\274\\\221A\275n\2508\275\242\261{\274\251\264\\\274\323\232\033\275\002\303\024\274\246\3201<Z*\025\274\215\027j<+ \203\273\r\270%\275\236\200\335;\250\362\236\273\313n\235:g\210\031\275\326\344-;\301@Q\275\243[:\275\311\320=\273Z\201\302;\257\311L\275\310\373&\273\225.\267<|\022\024=\246\215\027<<\374P<\330\274\241<\357\263*=\255\'\\=o\357j;\"\376\316=\216\300\247<\255\377\253\274q\225h\275(\271\230=\310\247k=+\214\031<\017&\324\2737\350N=\267\265r=\362J\023=NR\020=\223\2657\2749\2403\274I\332R\275\307\231\n<\367\320\001\275\347\304a:Z\2030<\032\306<\275\222\2568\275\367\035\332\274\346\234]\275\221\006\247\274n(e=9T\210<\330~\272<\270\266\255\274\227\375\357\274<\254\200=\363\037E\275I\337\037<\316eX\275!%E\275d9\2409\330D4<\335\365=\273\307a\021:Zn,\275WV\314;f\364I<\3240U\275;\013\233<\204]\031:\001\326$=\373\303\246\274\224\033\270=\006\263\374\273>A\033>m~\210<\234\313>\274\314kb;\317\037\374\274\230\310q:\010\255r\275\343\313\304\275\262\213\354\274)\307\275\275]\310?=G\230-\273J\037\007=|\257i\275\271\357!\275|?\037=\256\'S\275s\022Y<4X\346\274\352*_=\271=\020=v\350\313;\263S\302<\361\2747\275\225b\021=\264K\333;\260N\220\273[\'\210\273\267e$\275`\364U\275\025W\244\274\366Q3\274,L\306\275Y\367\006\274\277\215\315=\246\343\177\274!,\343\274h\204\264\270\211\201\217\273\327%-\275|h\006\274\004\t\357\274\352\017g\274\252\240\235\274\326 \316\275C|\205\272\304\304N=\341\216\322\274\375G\017\275\223D\303=\302\211\002\276\026\003\274\275\262\204{\275\361\010D\274}m\203\272\267\024\347\274\364n\307\275o\253 <\363\272\240\274]\023x\275\273\000\014=\336W\222\274\355\264\026=Z\025\003\275\r70=\266\272\036=\"\314\251<6\325P=\241\275\243<]\261g\273\277\003\006=\003\332\340\274\204\262\347\274\350\264\377<\033\360\203\275\017\322N=:y\354\274\323+R=V\362\351<\274\230\"=8\314\341<\007\r\376\274\301>\252\273>j\234\275\315\306F\274\211\321\013=\374\311Z\274\320\244[=\322%\005\275\367T\327\275>n\372\274-U\200\272\322\301\364\274X\226%<\306\226%=\312Aj<\241\332p\275\\\330/\275Jc\343=\243\316\354<\272{\275<F\301\002\275\237\323N:\227\253\247<od_\275\3717\373\274\2010\237\274\007nO\271\227\357\231=\330N\213\274\347\303\326;\347E\025=\r\266\314\275p\245\177\274\365\021\305\274\316\210\250<q\321\200<E\211\330;\374\364.=\326\237\227\274Z7\"=@NF\275\023M\240\274\364Nj\274\367{\001=\177\321Q\275\204\212|=\211.\231<\310\027\204=\236w\301\275\314c\016\275\323cO=\330\346\222\274\273N\'\275\2064Q=\257\214\312:\324\t\246=\245\002\022;s\262\013<\205b\201\275\003/\n<\007\0003=:>\013<\331\270\270<\002\030\377\274T\325\'=\017T2\274\255\023\031=[%\202\273\310B\237<MTE=UO\010=/c\013=l\3551\275\263]\000\275O\246\223\274\r\307\213\274\301+\266=w\255:\274\'\334S\275\266\002\232=Q\356\233\275WYM<\002\251T:5\246\321\275\371\367\313\275\243\367\204\273\243\345\302\274\351\033\200\275T\266:=\362\265\t\271\234\025\000\274\23629\275\\\323n\274\275G\224\275\177.\254\274\201x\203\275v\221\265\274_\304\026=\372p\370\274\321d\233=O\362\031\274$\356\343<\375\244&=2\214\207\275{=\000=\266\377\351\274\221\2303\274;\353,\275\266\341(;\211\235a=\225\030\267\275\223\352\313<\307\337\345\274i\336b=h&\333\274_\266\004=\323\243\315\2743=\326<\022S\271\274z\227\025<\362\016\221\275x\326\027\275\271<]\275y\023\202\275X\253\305\275MB\217\275\231\212`\275D\003}\275\366\221w<hg\273=c=\301\274\365\344\036\274`\351w=\372|+\275\t\352\203\273\n\266F=T\3270\275\253._\275\334\331\340=\353\244\243<\313\374\001\275\0135L\273h\362\315\274 Q\010=\021\2464=Ub\020=/)&<\\\217}=Y\252x<I\336);\354[\215=\277P3;\355\022S=uK\025\275\237\253\213\275\2017\022\2753\221<\275\212\241\200\273\303\003\264<0w\031\275\322\306\235\2754\351\346<\231}A\275n9r=\205\253\230\275\252Q\376<\365\274\323\275W\230\376<\325\271\203\274\2557\230;\246\034\360\273\264\260/\275G\225\010=\364\003\355<\300\261=\274?\307S=\360`\201<p\360\005\275\221\253\272\274$\242\347\272R\272c\275\273:U=\342\220\322;\236\242Z\275\353\306\223\274\003\3156\275v\332\002\275\024\335\037<\221\311\300=\013\261\014\275f\305\231\275T\254\030<\3105v=\311%l\275X\2069\273\350Z\365\272\375p;;\2354\211;\033\"\274\274B\315\377\274\302Y9\273\210\266\220\274\227\301\261<\261.\304\2743\221A\275\007A\377;0\275\'\275\n\313\352;\231\005\340=\362\3709=KOC\274r\324\227<\303T7\275\206k5\275B\216;\274\205dl\275\334\335\240\275D\n\316<\306,\031\275\010B|\275}\002\342<\216\220\212\275\245Tz\275x\224\233<\244\361\201=Ydm=&76\275\307\240\255<\005W\265<;\314\033\275\267\315\016=\353\301i\275\370|\233\2740T\203\275\010\017\254\273\031\020\242<A\2677\274\241\236\014\274Y\024\325=\262\304C=\267\210\237\275`\324\215\274\205\331t\274j<G<\261\3401\2751\325/\275r\345\236\275\311o\'\274\350i\334=0@\217=2\277\017\273\254j0\274\325-\232<s\3142=\022J\271<\205p|<\364[\250\275g\334\036=r\266\276\275\317\0350\275j\034\350\274\000;\232=\023\367(\275\346\372\227\275\005\202\225=}u\301<Z\211\267\2746\002\374\274,\377\225=\033p\031\275\263n\234<\224\346\032=\301i\222\275,\n\262=\257\326\240=\306^\032=\340)\230<JY\210<\337\221\226<\363\014z\275~\"\332\274\323\236\026\275$\020H=\376\347\035;\302\312M<_\275\220\2752\000\366\274^\3361\272\341N\236\273\355\036@<^\326\211;\027\243\242\275]EJ=\220z\351<9\364\362\274V\317\213=\216K\014=\2236P\274\275\231\020\275x!c\275\202\\7<\266=M=\276Ar\274\200\326{=G@\345<q\372\274<\301\273\370;j#\214=\207wV\275\270\261C=\201n\007\273\337\177\206\275L_\257\274\306#\370<\210c\352<n,\006<E\364\005\275\351\366\315\273\021\337\253;Nr\333\273,\233\335\274\346\322\306<\304\035\213\275I]=<b\330u\275-/\326<\341\331&\275\270\345s<\235\320\005<\264e\021\275\351\2140\275\252\020\205=\016}\305=*\310H<\003\367\340\275\231\027\026\275\001\370P\274,N\233\275\3066\231<\251\257\030\272+\nL\273\212\"\264=;8\032<\207\211\013=}\r\202\275l\355\025\275\337\265\177\274\362\367b<\261\005\214\274\333\263\013<\\\020a\275\362bW\275=}\370<oMg\275\375_i\275M\350+\275\306\320\314\274\370\351\024\2747\304\205=\310\240t;]\311\200;\013\226\277<\003\037\254\274\224L$=\334I\010=f/\246<\226\354\230;\227\277\342<K\235\342\274\032*\222\272\360\371\216=\247J\375<|\244+<$\364\217=.\372\202<\306\377S\275\314\205\357<x.&<\325o9<\2617\035=\037U\031\275\327\243\253\271p\305\367<QN\013<\244\332\010\275 L\356<;\377\006\275%/\362<\t\374\240=\302Y\207=\330\r#\271l2s\274_lb=\270\375D\275\275uE\275M\370\326;\022\231\236;\013\022W\274\202J\210\275\225s\353\272|\227\306\274\270\242g<\030\346\225=\tl\326\274\354=s=\262y\262=\367\346+9\363j\000<S\303\226\274#\345\031=\007\225u=RQ5\275\240\202x=8|]\275\032$\03389\177(\275a\025B= \377\037\275\2744\246=\207\340l\275\010\351\353\274z-\243<_mr\275\343E\222=\312\362\347\273\361\264\221\2736\243\033=V\265\315\274\270\001{\274\2616t\275\366+\t=\240\005\025=\005\005?=\201\025\217\274\364H\333<[\347\226<\260b\344\274M\272\003\275\227\202\212\274\212\200\200\274\r\'\207\274(\266>\274\354\003\230\275\276\345\215\275\200+p<\277H\347\274\214\'\326<y)\\\274\302\032+=\220.k\275\264%\226<h\312B\275\261{-=\215\000\224=\350\245\273<\313:%=\2461y\274H\260\002=U\326\330=\360,\377\274\325\324M<z]F\274Fr>\274+\277\310\274\r[e=1\350\343<\305Do\275U`g\274\3714\264\271p\202\010=N\270\317=RA\272\274{\344N=d\\w\274\2615\203\275\363/5\274\302\302\324=sI\235\274\'\304n=\215\330\210=\312\323\316<\035\031\027\275\333\202\230\275\01379\273\311\355\031;\231\031l=\367{\264\275\256G\036\275\256\334\217=^t\010=\270\024\253<\014Vz\274\374\205\344<\030\355\204\274\354v\261\274,.\301\274\002[\205=\265\301\205<\221H\210=\320l8=Hi\245\275\226\261\022<-.V\273\275p\242=\225\0038\275i\331O\274\342\312\232\274,\025\235<\275\240T\275\200L\177\275\352}\337<8\2307<\263\006k\275\031\025\372\274\017\023\266<\321Vo\275\274\355\220=\0217\326\274\036\340\274\274Y\221\210\275>s>=&\224\220\272\267b\t=\335<\240\273\321\210d\275\245\3077=-\325f\275=\250\370<G\211\217<\010]\014=\232Q\357\275\004Z\240=\347\016\332\274\341\204)<\231]\222\275\\\3211;\3249\201\275t\244\361<y\031:\274\377\211\210=b\267\307<S\320\302\274e\003-\274\342\327#<\004d\245\274\311\r\'<\263g\307<$\000\254\274>Ja=\261\0223=\275\'\263=\301\273\315\274u\231\235<\344\0274=\363\365\212\275\'\240\204\275ml\240=\305s\234\274x\r\217<\210\204\244<]{*=aR\261<\325\035\366\274\237\007\354<\331\367\004;\3229\r\275\346|\221\275QVo\273\254\207%\273\\\374\221;T\252\274:\217|G\275\216{\342:\305\003\227\274\'RQ<\'\247U<\355\355\253\275i\275]=j}\336;\362q\356=\327\352\226\274n\247\250\274\324S\262\274\216$L=VM\237=\303\342\017\275\274B\357;\355\230z\274\034\264Q\272\257\265\036\274\312\026\314\274T\231\241\275\003sL\274\211\362\253<s|\232<\376Ys<\204\211t=\363\230\320=\326\016\351\274\257@%\274\201\236\037\275\261\200\000\275C\317\005=}\234\005\275\210\"\220\274\224\276\316;\270kX=\203\261;\275\2224D\275\223\'[\275\374\211D=n\007\033<1\272&=\003<\312\275,\n\r<\026\320\022\274@\270&\275\027\351\234\274\345\"\005;I\314\242\2740\220e\274:1{\275\334\tR9oH&\275>\236#\275&\332<=k\016\237\275\302\022\375;/\023\007\276]\345\240\274\207.\324<\2450\250</\260\017=,\204\346<92m\274\260\034%<\234\256\244\2757\036\232=x\264\205<f*5\274m\3543\275IIs\274I_]\275\356\333\030<\222>\313;\313\361S=\255\377\032\275\022\206\277<J\006\241\274\n.I<r$\016\275\240\357\013=\366y$=l\353&\275\265\264\374\274\302WF<\345\234\205=+\366\302\274\213\021(=9\205V\275>\201\216=D\347\204\274w\3541\275c\240\202=\374\221r\275\254}\241;\237\276[\272\233\036\255=>\323_=\303B\203<\217\300\232<f\216\250:\'.\227=J\206\365;\333E\225<k\234\037\273\034{\017=N\002\201\274@\240\263<\225\272v\275M\222.\275\234\n\211\275Z8(\275\324\274I=|\234\347\274\316\267\244<\236\210\353<6\000H\274+Q\022\275m+\270;\344B\305<\232R\2408\377Y\214<\003\0307\275d\227\205=b\235\002\275M>\307\2735\360+=\267+\341\275@v\337\2741\362\023\275U\030\230\274\212\273\005\275t\354Y\275o\324G<\013\254\006=\276\275\352\274\257\3143=\371\213\216\275[\226\275\275L3/\275x\276\226\275\260\201\231\2753\206Q=\342[\213<\371 \000\275\221\362?\275i\226\024\275\373h\262=\025\215\235<$\t\225\275\371\010d\275g\344\333\272?\201\231\273\000h\234;\230K\271\275\360 \210\274\363\037\206<1k\271:\243\004\266<\344\304R=\226\342G=\260;Q<\354\216\261\274\220\004Z=\357?9\275m\3566<\336\222\264=i\005L\274$eE=\243\276\022\275=sH\275:\027\230\275)rC=\007[\270<\210\243\001<8\341\214\274\265\032\033=\355\275\310<\226{k=$\244\337\274\255[\244=Y\360\027=\030W\243\275\013>\202<\320\315}\275\260\364\223\272\r\274Z\275\346K\010\275\231\321\271\272\256$3\275F));\037\035\325=J2\333<Sb\004<\317\311U=X?~\274\355\344\264\275_i}\275Q\\\336\274\357\212\013\275\002#\007\274&\314\025=\016^p<\177\354\001\275\206\262;\274\275\316\203<\2676\215<(\326\r<8z\036=\316\253m\275\272\275\031=DD\024\275C\344p;K\265\221\275\032\211\024\274\245p\215<\275)H\275\n\200\020=J^R\275\272\255\356=\t\247G\273lx\325<\\J\252;\244e`<\214\023\272\274Jq\252\274g\032\213\274\333\300w\275@P~=Di\027\274\374\350\n=\257\350J\275\002\304\337=mo\204\273Mhl\274\302\334\022\275\325T\247=\276\354\366\274\346X\302<\325\362`\275\335\367\266\275\306\353\227\275y\331n\274\017\237\206<1\323\335\274\342,E\275vO\240<\324\264\022=]\177\026=\360\024\210\275\204\024\230=\313L\222\274\333X\377<\026\3163=\0036\003<\341\200\307;\301\242\304<ns/\275\231\351\300<\334{\213\274\275\025\267=\237\232e\274\267\275:\274m\010T\274Ux\225=\262b\367\274\2519\274<)\315\275<\t\202\013=\356za\275&\237\261<\265\301\223\275e^\254<,j5\274\370\314a\274P\014\373<\265\267\260<|\332\224\275\'PP;\002\277\032=\026\216\315\275\213\373\243=\210\375\005=\336\230\\\274\375\312\227=\014\206\365\272\224U`9\025\376\253\275\235\263i\274V\006o\275\226L\273<4\220\374<\354\\\303=-\260\\\274\262\335\003\274\036\367\023=\313f\274<\255<Y=JVE\274\310\300\263\274\024\240\352<\007i\204\274\260\224a\275g\033\310\275\357\227\256\274\235\270u;\214\177\021=\204\352V\274\304\343\237\274\232\207Y<`M\342\273\374\346\201\274\212\250B<\370^@;\334\340\335\272f\240\302<k\374\256\274\030\210\353\275D\347H\27509\234\274\002\t\234\273;ol\2734O\302;\362\356\030\275\337\364F=\333\037=\275\027\203\206\274*\024\307<\022\036\300\271/\256X\275\234\317\312\272\273\224\r=\273h\226\274\307\243\321<\231\274\016\274l\344\242\275\302\337+=0\021\004\275P\334\304<>\240\025\275\203\345\000\275,}\017\275\271ca<\366\252\000=\264\340\217=8\222.\274!\304\375=K\252\023=\2520\324\274\272\014w\273\220\300L=\3560\352;q\300\305;\211\254\200=\177&L<\314\016\331\274\236\023d<f\373\364<\371;m=G\222\374;\250\215\274<\341\337N\272\311\357\230\275\302\242\264\274\334\211\016>\240Z\220\274(\201!=C\001\231=Z\"\325\271\232\356l\274Z\314W=\362\316Q\275\014$L=\340\267\272<\231\036F=\002<\204=\005\026K<\205\032 \274\\\231\253\273!\254\271\275\335\206\235=\356\344f=\t\3002\275?\201+\275\377\037\036\275\n:x;ez\004\274Wy\005\275\342C\022\275uuf<h?\216<\332~\210=\210\037\346<>\331\207;\277\024\213\275\"\322+\275qVH=-\330\001\274\334\3241\273\232\3315\275\345\201I\275\257G9\275\336\235\365\273\224R\215=\343\200y=\326\245\276:\211Y\211\274\323\376\001\275\246\355P=\027-\001\273M\211\357=)\300\025=\302\257\325\274g6p\275\275m\213\275TC\352\274+\340H\275|\365\254<9W\204<K\251\273\275U\335\212=GV\017=4:\255=\024b\322;=d\"=\315\251)=J%\232\275l\200!<\370\200&=\216\263E\275r\001\013\275\302<\217\274\024\032l\275\324\236h\274\355w\250\274qH\3068\234:\014\275\313\220M=\324G-\275>Q\022\275^\306\356\2749}\261\275\024\253,\275\237\221\0168\023\273\025=\240\272s=iPa=\022\225\031\275\264\333\010=C]\330\274\233\344Q=>d@\274u\276{\274\231Gs\274\026\207\275\274Z\353\214\275\336\033\242\275\367\245\235=\177\271o<\224\343\031\275\027\017\023\275\026v\234\273:\010==$(\314<i\346\336\2741\342\240<:H\203\275\203p\037=\227\322\233\2756po\275*\027\327\274\376\205\374;\251g.=\2122\273<\370\3526\275Z\273}\275\327o\322\273\014(\310\275\312\306\215\2759\223\241\274\204\300\215\272\223\246H\275\214\301I=Wi\223\275\325Y\034\274#\232p\274\242\037\201\274|\200!=\'\343m;(&\242\275(\254F\274W\027\223\274\305\'\303\274\314\032\331:0,\224\274\254\336D=\036\262\000<\263\352\035\2743\347\327;\205{\377;\323\007\377\274\035x4\274\036w\215\272\355\324\007\275[\332X\275=\002\006\272\214\365\021\275{\025v\275\276\256\250=\270I\373\274\376\023I=V[\205\274\2650\031=\260\305\240\274\371\325\364<\256(\231;\005a\020=\223\207\360\274N\000\002\275*\264\036<\207\336\035=\220WJ<\0026\027\275eY}=N56;\244\370\006=7\3753=\311E\034\274\276\205\351\274\030O\023=\323\336\005\275\003\313\216\273\330\030\t;C-O\274De\207\274\221+\212=\214\n\215\275\242,c\275\340q\272:\331D\030=^OW=\323\024.\275QM\266<\335\t\376<\215\2277=\024\253_\275\007\222b=E\314\225\275\252\311\231\274\231\315\220;W\267\305=\210\326\260=n\206_\275[\331\016=\3778P=\236\t\202\275\232N\374\273T%W\275/l\020<\216\327\242\275\321\004\205=\211.i\2743\031\365\274u4R\275:<\267<\317\3661\273\352\256\356<\223S:=\340\213\324<\331\216\312<P{\232=t\210o\275\364\023k\275po\312\274\017]\275<\022G\000=,0\256<?&\271;\033&\347=\242l\207\275\316\022U<\322\204S=C<f\274Ry\313<\321\nq<\220\212\3458\207k\205\274\020\345\206=K\014O\2754\231#\273.\332\215\274?Z\220=TN8=\260=\r=\n^Q=\361\270C\275\264\202\016\275\rf\016\275\367\206\026\275\345Qr\274y\241U\275\207\256\361:\213\260\217\275\3003/\275\212U\337\274\232\r\205: \212:=\325\363\366:PU\367<{2/\275_b9=\214\303\335;&BG\275J.\017=\02713=V|\355<\344]\350\274\253\377\271=\345+:\275p\366o=\242\232\001\275m\246\034\275D\272\256\274\024\340\002\275\377SR=\367\321\213=\014\006@:\023\024\024\275+z`<4\2701\275\364\227 \275%\247[=\013X\315\274\326r\233<\244\254p<\320\002q\274.\234&<\336\2512;\240zv\274~\262\333=j\310\013\275\325\225\327=\344\270\375\274i\021G\275\025\3530\272\206\007)\273Kn\237<\233\300]\273H\214\307\274b\251\333\274\366\274T;9?\274=\202y\220<\331\036|<\272\337\271<\275\312\333;\247-~\274\345$\230<\242\005\364\274>(\303<p\013\252\275`i\204\274\265t\271\274Fg\032=\250z\206\275\346\2221\273pT\335=i\214j=2R\257<nY~<~\205>\275E\225\332=_zG<\226\227\345<\230]%;\212i\365\274\233V\256<a\367\333\275\274\343\016;x\273M<\223\316\253<\014\314\207\275-D\246={\332\303<$\2738<_\373y\274\301\271\001\275T\314d\274\372\326\243\2749\034\367\275l\227?\275\364U\277<\220\002\002=\233O\370\275\376.\'\275V\256v=\277\253~=\021\177O\275\014*\246\275\241\350\244;*\240+\275O\274P\275+J\341=\370w\275\271\200\221#=rz\341<0\264\277\274\377\320_\275\233;\365<4\331\236\273\330\242\201\274z\277)=\177K\036\275\237\252\216=x)\350;\221\001\306\2730W\3679\267.\255<\006n,\275\010\2224\275\323P\356\274>MJ=\261\025\300=\301\377\234\275\321\026\312<\347\275\274<\261\346\263<@\337@\275\234*\r<\365w\010\2758\321\020\275\013z\223=\272cr<\234\353\223<\374\273\345<Z]\225<V*\003=z\305\366\274X\323@\275^\207\346\273\212g\033=\336\232+\275\252\365\203=^\273*<\312\013\232\2728\247\303=\250Ul=\022\311\267\273%y\021\275\247Q\010=\261L\204\274\350\251\264\275:\322&=\261+\236\274[\003J=\316P\010=\251d\300<#\3765\275H*\003=?\235\260\275\262<\231=\024e\221=\366\000\301\2756\270\307=\345&\331;\256{\013\275\277\004\267\273e)]\275\304\002\206\273\246\231\016\272\261g\257\275\311\233k=\223\037\257;E\326d=$\322\030=\036\0216\274W\256\306<6\341b<J~/=\024\036\021\274\273H-=48L<\256\177m=\3110=\275\265\231E=\351\224\376<\235X\305;{R\243<\235/\370\274S\350H<T0%\274\242\013-=\252\236Z=P\342\336\275sw\'<3\367l\275\373b\004\275A\345I\275\216\356\365<jP\227\274\255,\353\273Hk?=\341\353\320<\355\317}\273n\336\r=j\223@=3U\326\274\306#\'\274m\314u=\021\201\206<\\\010O<\262\301\t9~\350\220=P\376\243<\024fb\275\0349t\273\206\016\033=\230\354\266<\2307J;\353+4\275\335,\031\275\375.\340<8.\211\274UH.6\004\014]=\n\210\311;u\325\200\274n\030;\274A\346\213=l\327\t<M\016J\273\3062\216\272n\200\213<\317\331\002\275z\277p=\t\201\r\275\006!:\275E\313J\274\014\213a<\017\242\251=\002\324g\275r\305\224<Q\375\216=\3161~=\324*\311=(io=\006\330\347<\005\025/=\351\266\264\274\325\224\360<\352\235\367\273\206`q\275\345U*<\035a5;Q\243\223\274\274\252\237\274\35527\274\036\022\232<\221\340\320\273\233\000<=7\013D\274\360\251\321;\335\264\220\275A\270w\273\325\007\223=\207\014\375=\220\270\254<\233_I<cFa\273m\\\224<\315D\030=n\346U<I\246><\227\375\224\274\034\255\215\275nn\270=l\016\261\274)\360\225\275\030E\254;O\224\212\275\316\217\225\274\370#I\275{\223\227\274-\240\202<\314\030\226\275\243wI=\200\342\222\274$%\330\274_/i<\371\347D\275\274M\204\275\276(\000\273\242AC\274\007~\227\274\247\270\020=\257!7\274\225\341g<G|\304=\334l\267\275\314]\303\274\370\267m\275\240\343 <\211\340\2319N\204\247\274\016\360\017=\356^\315<\261x\347\274\213PS=,\332$<\022\036\014<\307\360\224=:\321y\275\237\010\n\273\320\332\020\274\305\021`\275\313L\335<\3037\202\274\n\341\001=I\207\004=\362d\002=J\365\216=\3366X\275+p\213\273x\t\273=\367\211\010=iuH\275L\263\312\274\301\365E\273\350\264\010\275.\256\262<\014\022G\2747[*\275\261\tt<>;\250\275\335\321\302\275\263\340\214\273+\\\264<\203\250-\273\236k\033<\371 [\273\236\203\345<l\376l\273\312\0226=\334w{=6Kc=eBg\275\243\2034\274Y\334\310\274x\n{=\035\354\262\275\270\033\241\274V\340(\275\323C\207<\037J\342\274\261\203\215;t\217\230<\314\207-=\233\273\236;\213i\004<o\204\237\275\325iW\274nn\001\275\311\252\214= \200E\275\224b\n>\003\316\300\274\340\'f<\253 \021=\363i\321\274X6\343<\030Zf=\027\274<\275V\356\316\274\272\204\253<\374q\247<\201\373\343;\354\033v\275vB\002\275j6\211\274\265\026\216<X%\236\274\2736\322=\221\014\036<H\237\271<\300\314\262=a\212\231=\230b\312\274\001oQ=\2259\363\274\243\217\265;\275%\247<F\216\200=q!\205\274\376?\253\274\240G\231\275f\373\273<ICR\275/_\017\275\211\263\001=5*\315\274\316\374x<A{\236=\323$\232\275\033\303\265\273qm\314<\277\277\242=\365\001\202;Ss\351\273ESj\275\326:|<\250\021N\275\243\364-\275\232|\345<\022\263\021\275\223\364\323\273m\t\001\275q\270\225<-I\334<\314WR=\242Y6;luo=\342i\320<\313/\016=,_\205\275\004\233\022;\275\177:\275\325:c\275G\2077\275\031]\326\274Ka\232\275\354\376\021\275#D\356<\007w\r\273,\035\262\274c\034\277\273trn\274\177)\303<\344\220\245\275U\343\302<\357\266d\274\246\314\247:\372\241\226\274\027+\321=\224\341\304\274\234\236\204\275:a]\274Y\3033=\267\207x\273Z\274\321\272|\214\200\275\0034\007\275\271\275\002\275\373\302\331<6\324Z\275T\316A\275\273\3439=\0342\376<8\346n\273\245\364\215\274\024\346\251\275.\304d=I)\211=j\331\373<cE\271\274\362\351~\275ZX\216=\317\205\306\275\0100]\273\033\376)\274\260\3439\274\025\205\372;}1&\275\332J\222=<@\303<Jd\001\271\010\001\277\273\277\026\246\273\267~\252\274\0130\351<z\237\313;\033\013;=b\3119=Z7\037==8\"\275\263\276\n\275\220N\234\273N\235P\275?\033\030=F\343\220\273\231\371)\275\026t\236\275\231\367i<$qo<\003=I\274P\351\324\275\212\212~\274\372\003@\273\345\274Z\275{\320\225=\326\344\341;Qh\243\275\263\315\013\275\034\263\023=\205t\215\273\274\270\232\274\312\317\352\274\357\202<\275\021),\275\225\371\233\275\031i\351\273\246\247^=Q\022\337\275\017\310\230=\274\256<\274V\357\231\275\357\033\016\274dM\036\275?\233|<\225\266\263;#\355n\275\236x\312\275L]\353=i\310\364;]\335\275<%\342\302=\023s\326=\231C\347<\032W\014=\231\322@\275\n\255\272\274\027Sd\275\001\017\245\275\360]>\274\314\207\265:\254\222\217\275\304\023\227\275B\227\364<n\257Z=\350\326\363\272R\211\370<\221\367o\274\254\244\271=s\021U<\210\306\231\275\275p7\274\330^\326=\271\257\251=\022W[\275\230\204\204\275]\372\272<\337\242\225<\302\350\214\275\207\335\'=t\206\265\273\327[\377<\027#P\273\034qC\275xd\021=\224i\332\275\274\t\017=\310\260m=b\354\320\274SM\223<s\372\237={\242\017=\223J\265\274\332\225\231\274\215\334\026=~<\203\273k\007u8\240\037\321\273\271\271\013=\225\017\014=n\276u=O\322\235=Ty\305\275\322\323\037\274\330\306?\275\303\332:<\207\337q=\215\035\025=M\243.\274\313\2672=n\3107=Q\360\274<\346\250\244\273\356\354\206\274Za\240\275\226\"\220\275(\375\255<\026\251\355\274\004\351\334;\032p\262=\010\026\241<\'\030\024=-\207\225\273\360\330(\275,Io<\313=\333;\324\302\375\274\320\217H\2754\013!=m\247:\275\354K\207\274\257\325\302=\375\017\207\275\274D\235<\263\025\016=\336\225\317<D\262\254<n\001\211\275\344S{\275\327E/\275\231\367u=\375Y\321\275\3740c=\033rY\273f|\303=\207\254\325\274\361\206\363<\373\251\256\273\206\331\204=\014\025\203\274\351J\000=(U\241\275\365\006\237\275\207\007o=MV\273= u\303\272\330\264q=#\020\250\275\004\366s<\207\001\317\274\301\372T\274P*\000\275\332\345y;|\316Y\273\307\363\272< \222\010\274k\201\207\275a\253#\275\352\230\277<\370\227\243<\303\226\255\273\243\334_\274\023.:\271\0227\r<\373\217\242<\244\332\270=\333\211]\272\360Fx:\226S\263<\r\220\256<[\351\233\274,m\302\275n\033\202\275\315r8<\302\354\326<4\265\014=d\322\277<\022\030\'=$v\032\273z\316k\274\260\003\231\271\250\037x=\365\300\256<Z\260\355:[\213\244\274\227Q\276\274(\010\337\272\273\251\346<\315D@<\034\203\312<l\264\372<\247\241\271<\313\037_\275\351\245v\274\343\016\006\275\t\375\025\275\235\322\240=\243\267\017\275\207\223N=\2336\006\275\316\205@=`\2020\273%\021\024\274\223R\350\274\277\264\335\273\375!\200\274\304_\201\274\261BO\275\203j\004=\367\223\026=\207\371\254\274\233\353(<\002\243\354\272\t\260Z\274\307\343\220<$\014\232<qz5=4\217a=\2244\236\275\033\013\005;\027V\006=\271Uh\274\327\304\365<\275\324\352\274\013<a=\217gM=<\220\006\275\327\271&\274\350\255\253=\357i\017=\347\212\236\275\'\241\032\276;\274b=\366\017\305;#t\331;\273\252l\274\215E\203\274g\036\023=\275\033\240=\204\340\307<\355\"Z<\233D\013=\337Y\335\275<z\250\272Rb\235\275~\367\216\274\302le\270$qA<A\230F=$\243\035=M>\001=\315\312-\275\365\3431=\333\222\260\275!\346\240=\245\371\000\275sB\320\272\255\025\3238!2\214=%\207\267=\363\266\334\274\247\305/\275\245\210\215\275\370\022\037=\033\324[=\002\327&\275\216\371\021\274\222\n\014\274\227\202%<\036\233Q;{\273n\274\355\375w<\317\201\202;G&>=\365a\007\275\244\315.=\354\351\201\275\306\002\344\273,\321\236\274\320m\340<\035\343S\274Y,*\274,e?\275\340Q\220\275\263\325\026\2741V#\274\016O\005\275\001\244\321<\252\262S\275P\311\201\275\2036\\\275`R7=\243\253><\336\354\303<\203L\326<\320\243\226\275=\377\205\275\265\204M\273\205\310G\274\2420\037=\021\363\320\274\362\315y\275\351K~=\243\276\244\274\253\320d=06\213\275\274\313\332:\2713!;M\313\r\275\273\233\273\274Lx7\275\365\373C=] \262;\200\273\270<\327M)</@F\274\004\\\275=j\336\273\2747Pc\275\"/\036\275~\217\033=-\034\006>\330\203\245<N\\J=\023\251\254:-\336]<\270aF\274\321\3408\275\305\n\266<\037\275\026\275\212Hz\275kLl\275\033EW\275G\000\321<\276\234>=q<\004<`]\251<\3246\334=\253\205\225<\260%\221<\227\312\277\275\254E\367<<\257\224\273\362\'\224=\224\315)=-\331\207\274\374\256\257\274\211\237\016=\323j(<\206\244*\275\223\222\312:K_\323\273V\256\224\274\226\317\'=\262\344\237\2747\354\005<\233\347J\274)\347\302<\207\3245\275K\235\360<\014j\316<\264)\335\274\362\335\251=\316\rX\274$\325\341\273l\363\222<X\326\317\272\370\340\355\274\363\006\222;m\n\232\274\351\320\024<\026\351)=~\3515\275\366\230\t\275\034\306\256;\352\223{\274\316\241)\274oq\\=eO\200\275\213\204\223<c\204\242\274\253\217%\273\037\tZ\275w\201\334<\206\276;=K=)\275\261\231\030=\205\341P\275r(W<y]2\274f%\377\274oY\302<\023\360K\274b\307\245<\322\016l:T\307;\275m\276U\275\314\353\316<g9\206<\247\221\021\275J\365L\274RJ$=\334\317\222=\345X9=\007\332u<\210\320\366<\263L~<\321J\005\274\t\251\324\273\245R\350<G\254V\274\"\326W=\374\231\n\275>\302>\274\230\251\273<c\025\203=\036\244\245\275>\017\003\274\021\214Y\275\343]\373\274\205\030?=\355\032\006=\336\372\212<\333\247\022=}\3425\274\021>F\274_\0228\275AM$\275\324\257\246\274\277$\263<\374.\221\274\252\271\365\275k\316\014<|\341G\275\246\320$=\276\277\377\2747)9\275\271\355j\274\333s\000\273\226\310\343\274\217\215\027=R\325)\274\310k\355;\226\355\303=\220M\004\275\274X\010=Y\001\020\275\031\211\014=%\216\222=\3022\335\273\324\247\213=\3642f\275UG\222\274\255b\207;)\"B=\242\213\373;\266P\024=\375\370\343;\335\246\003=\354O\355\273\036\034\276<\241y\303\274\007\224x:&NU\275)=1=\205\302A<\376\357\271;\342\325>\275E\204\221<\002\237\001\275\357\352\233\275\331}K\275ka\377\273\243\213\013\275\376;(\273x\310\310\275\215<K\274$\320^\274\020\357\243=\234\302\305\275@v\361<\020\202]<\027\336\367\273 \r\207=\340\3330<\374i{\275X\222\357\274\372\303l=_\240Z\275\205\276\334<\327\220-=\202\240S\2754\3634=\204\247G<W\243\201<\207(\242\274\2775Q<\004~c=\017NO\274\353c\340;\361\301\270=\242\035`=y2\266<\000e\217\274i\350\032<u\377\265\273\316\371\251=\363\257\316\274\231\316\256=m\220\202=\262\024F\275\r~\t=\350\256\026=\314\374\'=G\207\206=\276\000\322\275\247-P=\261\347\230;#\244h\274\224\326\026=\354pj=>\002_<\021|\371<\007\264\301\274\340\032\355\273\t#\217<\270\327\213\274\341\365u=\035\243b\274#u\267<c!k\275\334\222\325\274%F\360<\337\207\033\274\263\214T<\240s\017\273\000\366\357<\243\234U<{\312\207;\200d\331<\320\025v\274\303G4<\306\373?\275\370i\250;\332\212\245\275\332\024\277=YZ\333=0 \177=+Ey<O\275\217\275}\207\347\274\016\337\034\275\252\260\204=\262.\032<\207 z=\033\350\363\274Qx\013\275\314Q\232\275\017\025!=\370\006\350\274\316&k\274\343v<=J(V\274\007\351\027\275\327\247\014<\325\002\016\274\017\t\375\274\224\331\226=\3571\271\275\236\264\351\271\305[1=\336\t\222\274p\nU\274y\204b\275\256i\260<{N\000\275T\350\277<n\342\227=\251\354\261\275\331\247\301=\225\367\356\274-\372\371\273o\203\345\273\231\005\354;\242\227\367\273\307?\357\274\305\005\007=\374W\231\274\007\026e\274}T =\247Y\013=\253l\325\275\"\207\n=\216\317F\275;A&:W\263\014<G\342\242\274G\334\315\275\300k\327;!\366\"<\004@\t=\302\231X=N\313\337<#\373^\273\256\301\377\274\374\335\032\2746\216(\275\324Y\267;\237\031\254;\356\301~<\244\360\333\275\322\3005=~\320e<\367\005\273<$\002\220<\001\347\347<\300\261&=9\216\251<\3243\342<_0o<\341\255\315\275\260\007o=(\210\306\275C\377\210\274#|q\275P)\322<J\226\301<)]\250\274\306\225-<c\267\240\274\032H\372\274\373K\271\274\270B\037\274b[\030\2756\230\360=\013\245<<\260\342\316\274\367\021\215\275Qz\261\275!\371c=h5s=Iw\037\275\n\330\177=Z\tt=\034\333\273\272j\320\370;\225\375\306<\n\017\373\274\2703U\275\353\273\271\273\305i\023\275\222\032\206;\316\275\230=.\253\027=f\360\207\275\253U\311\274/\177n<\374\001\026=\267\327!\275J\315\345<\253\266\005\275\"*U<\355\035\302;\3235\"\275\002\t\001=x~\230<\310\300\303<0\2126\274/\335\r\275n\275y=\200\327\244\273\200\2470\275\374Sc=\230<\345\274\335zQ:U\205\270\274\271@\017=(\247F;y6\212\275\214t\027\275\245+h;rf\n=\223\270d\274i\255\032=\3478\203=j\356J<\000\211\256\274*\372\321\2748\373\031\274W\356\343\274\371\354\204\274\304\227\233\275\221\343v<(!\304\275\365\266\346<,\243>=@\340{\274\005\243\360<\nWV=\017\202\025>\340+r\2756\022\224\274\207\305\275<z@\264=~\365(\275\366\376\332<\177\002\352\274\313\004\r\274+\014\217\275\243,\246<L\332\253\275Ik)=\223\255\326\2740\240\004\275*GC=\267\246\027\274t\253\036=5\363\005\275\377\232\252:\224\360\264\275\324=\234<\243u`=\231\311\337;\236|0=\226\356K\275\363\267\270<C\220\211\275\331\217\305=S&\034=\251L4\274>\020+;\014\373\335\273\235\320\027\275\353\276\252\275\243up\274\r;\"\274p\263W:\230\311,\2758i\000\274\215$\251\274:B\211\27405\350=3\021-\275\177\001\333<?\026d<\205=\331\274\233D3\275J_\007=o\343\224\275\201&1=`\037Q\273mp\024\275\026\2226=\257\344\322\274\177r\024\275\326\031q\273\312A\207\274\313\222\022\275\341\233\326\274\216\314i=\317\027I=\230c}\274\211I\223\2750qG\275;\035;\2759[\000\275q\244l\275\027h\217<Ni\246\27536`<\004\352\261\274\0025^\275\204\206\000<\235>K\274CJ\236\274\325C2\275/\364\265=0\002\247\275\014\364\013=D\022\216\275\356\354\354\273\344\024\r\275\221Z\274\274\340\325x=\354#\254=\332\204\234\275I<\255\273\307\373\252\275k\353!=\021\377\242\273\370\207u\273\013\245S<\376VG=[<\301<\356\031\330<P\r\001\274:\007&\274\212v\n<~N\222\275\360\023\213\275\322C\233=\177\277\202<\224\302\200\275B}\277\274\310S\036=\265yn<]\372\345\274[\000\024\273\300\365\273\2743U\253\2744\255\210\275\234x\236\274$\035\373<\311S*\275Q\333\027=`\265\252<e\030\213<\035\212\320<\301\"\263\273_O^\275\320\371\232<\211\252%;\254\323\245=\010\334\014=8\371f<;\037|\274\211\341\301\273\032>\216\274\2449r\275\275\351\217\275@LB\275\342\341\214<\010E\016\274vP\014\274\374\214\001\275\320d\302=\202\016\324\273\257\226\250<\220\370\345<\r1J\275Z\000E\274(\267\013>]\353\272<\341\230I\274\226Q\376<\204\035M\274*<\035\275\023M\020=\275\235\n\275H\036\212:mcR=F\363E\275\373\035\353\274\026^\261=h\351@=&\251,=;\216\231<`r\334\272\353\n$\275a2f<\232.\262<k8H=\301\016\352<\210B\240\274\224\276\351<N\030\252\275\003.\002<\342\244\202<I\007\223=\270z\317\274\204\332\277=\200o<\275\357\035\215\274\224K\375<}\016j<%\241\024\275\206\260,=\024\023\261\272Q\203\204\2753w\266<\010\\\306\274\253,s92\3102=\251\345\203\275f d\275\202?\312;\330@\037=\"k\213\273\030\036\016\275\217.\342;\020|`;\3773\321\274\010I\234=\365\253\325<P\0137=\271\017E=\022\341\034<\202+\216:\314\344\205\271\203\276i=\310U\n>P\035g\274\'\315\005<.\312S=\034<=\274\361\034\351\2738\247\323\273\036z\010=\352fM\275-Sp\274y\357z<m5o;a\275\325\274\227\336\016\275?@\361=\266\304.;\235\267C<\025\324\177\275\364\247\335=&\3232\275 \334\\\274\304B\266<E\337\t<M`\204\2740`<\274\224~\005<\316\360\337<\330\244\240=o\260\217=_\377N\274~s?\2756\310\336;\206Q\205<\315\225\363;\r\217\222=V\013\277\275\363\321\"=vx\200\275]D\251\274a\222U<\347\321\026\275@\3768<\'\373\321<\260\301\231=IU\030=cA7\275o\236?<\001\234\025\275\357\250b;\006\263\237\274g\221\236<B\344\325<Z\265\250=\250F\325\274\335\312\202=\352j\211=\220\374~\273\306a\373<\224\225>\275\367S\016=\271\307$\275\262j\326\274\235[\177=$%\341<\356\326\353<\001\030N=\334I*\274\217<\005\275R\t\324\275\306\245D<Om5\274\215\210\006\275\26055=R0\203<\033\032;\275\354\007\017\275\203\235Q\274F\001\r</\027\221\275\376\036\203=\273\337\023\275%;;=O\020O=7\311\227\274\016l\316\275\254\265\014\275\352\345\n\275\356\354\236<\337\320\315<]\372U\274\326\267\200;\203\236\317;\271\"\316<<\003\375\273\372\344/<\267\300c\275&\312\004\274 \224\216=$\240,=\343\007=\274\241\314\374\274\331\351\311\274\203\350\241=d\246\200\275N\337\307<v!?\274\361@\267\274;,\336\274\326\312\313\272\204\001\217<Hd\316<NR\034\2754\017\270<\353\366\204\274l\224\217<\204\373j</\341\220;\361\'\326\275[\307\\\273q\303\257=\016\344\261\275\324\332L\275QB\226\273g\223&=YA\213<n]\226<\313\205l<&b\031\274\010\310\363\274\004\355^\275Z\217\377\274$\341\031=F\215\215\274B \216\275\301[b\275\017N\245<\022\222\024<\362,\272\273\005\323\346\275\345Ot\275\302\342u\274\255\303\221\275{\230\265=o\303\212=\200\231\247:|\252j<^\223\017\275g\316 \2751@\370;\333jP\274\207\251\343\274vM\220=\361\253\004<\212\035N\274)Z\301;\373C\221\275\311\276F\275\202B\022<\372\026\224<\325\204\002\275\266\217\231\274\310\344\204\275\275F\336<\227\320L\275\021\3115\274\316\216(=\341\t\235\275\337\340\"\274d\370\370<n\372\363\274.\025\353\274G\362\261<\261\312\213=\343\351~<\007AC\274\322Y\352<\244\270:\275\371\217\356;\322\236==\340\215\373\274\227\326\r<\341\354z=\300Tc\275^\242X\274F\035\254=\223w\255;\000\014\231\274\303\203\206<\335\324\211=\023g\222=\363\0237<\345\357*\2756^\364<\332\261!\275\220\253z\275\3363J=\236\311\225=Q\007\335\273\246I!=\341\237B<\247\367\244;\227\313\000=\322\241U=]\235L\275\346\242f<\034\202\212\275HO\343\274\004\211\226;R)\225=6\010\032\275\343l_\275\0254P=8\240\205\274\355\236\022=\211t\347\274x\3477=\006\254\022=\202\3619=\315\321H\275\343\202\035=\205{\t\275C\036\000\274\031\350\230\275n\277\204\274\'P{\275\205p =i7\214\275o\351\r\275\221$\220=wX\207=\327\343\225\274}9\227\274\233\334\217<\303_\216\275\364i+<\rE\032\273\206\362\321<=>\317<:\006>\2751\346\363\274\003\302\370<N\226E\275%t\003=%\343\322<)tx\275\024\240{\274\364\276 =g\247\250;3\373\t<\370\217\231;!\274\232<\221!\314\275{\rl\273\225\227E\275|-\020=\243\262y=3\013\233=\003f\205\274\204u0<6;\220\275\004\350-=\310\340\371<\016lc\274\323\214\316=8o?\275\327\322D\274O\311\021=\013\320\203=\376\200\221<\204\247\211<\255\007U=\254{\262\274\360\027\004\275\026%%\274\377\236r=5oG=,\345\006\275~\204I\275\r\255#\274f\214\371\274u\364\216\2750=j=u\200=\275#\375n;\250i\302;\2207\371:\215*S\275\350>\007;>\327\322<\327\321\245\274&\035K\275\350\326\001\275m\3638:\005\233Z;\324\337\236\275S\3021\275G\036|\274\\a\031=\031\307\n=\356x\247=\024ZO<!QP\275l8U<q)\000<\224\237l\274\356\367h\2752\355\362\274\000P\325\274\307\001k<\273\343\357<?=l=wdi<\324\364\\;\335\002T=^\202\222=vC:=\210s\006\275K\340P\275\232\244\2429P\2565<LV\327<\314$\363<a\347\372\274\367\271&=\352\331\347\274L\001\335<\253d\020=\246e\262\274\352\367\310\274\353o\374=\375\252\304\274\004p/\275l\354\031\275\341\036g\275\345?\246<\265\026;=\023Y\'<R_\230<\004|\334\274\001x\030=\203\213\001=#\254>\275\247\351\1779\255\364\000=\313\336%=\277\235/=\3007!\275k\3003<=\r\235<*R|\274\274\025]=>\367\270\2734Yy\275\001T\032\276\224\364\333\275\240\007\261;y\201\254\275\355%z=Ij\355\274ft\233;~\020\242<\233n\217<\264\r\036=g\236\017\2748\244\022\275\256Q7=\301lO\275\262\323\\\275\002\267<=\017c1=k\233\202\274\312\004\263\275w<\247\275\001\326p\273\276\223~\275H\205\031<\256\377\013\274\246\\\010<\216\n\221\274\017G\337<o\261\275\2740\300\250\275\254\357/\275\002\006c<\267\221\254\2722\313\214\275\342&\210<\377\347(\274$\302\273\274\3403\256\274\\d\234\2749\254%=\036\372\304\275\256\330\r=wC\245\274\370\232\214=9<\002\274C\371\333<\357EN\274m)7<>j\370<\223\251\361\273\177>\362\274\013.\274\275\313\253\333<\350\255Q\274\317-\343<m\331\311\274\030\373y\274\243t\235<\361\331\337;$\366\217\275PEN\275\2346\277\274\00016\275\264 \214<\355W\036=\'d\253\274\311\024\340\275\0276\220\274\377&5\275\247Y\257\275\274\367b\274\324AH::\300\013\274\227\277\r<\210*g=\247\004\204=r\367\300\274\377\264\213<\253V\024\274\024\206I\275\327T,=\345HY9F\250\001<i\224!=\'\264\341\274\264\310\037=M\322\273\274\035\223Q\275j\205\307<\343\374\005=\367\004,\275M\307\034\274\242&!\275\247*\323:\255Q\233=\363N\027\275%`u\275\227\261)\275~\366\211\274\nI8;\236#\226=0l\006=\354\317\231\275\253\356\366\270\275J\200\274\256L,=\307\373\332\274v\236\030<_\357\317\274;\312\320<\340\226x\275\003=\222<@\226\276\273]\205\300<\274\370&\273\336\316\333<\337P\370\274-j\302\274ksU=\254P\355\273\337\305\307=]\240b\275\235\223\n\274)8\204\275@\2320=L\2259\275\325,\307;#h\264<\031\037?<g\351:=e\032\304\2720\031*\275\033\2041<\376\346\231\275\006\310X\275\370\366\235;\234\030\354\274F\210C=\270\311\245==\225\226\274-5\306\275h\226.\275\363\205\257\275)\352P\275~6h\274\004hM\275\216\363l=\3300\217=\363\236.\275\rZ\013=R\003\205=\342,\333\274\017;Q\275Rl\247<7^1<v\031\352<\354\253[=?\327\236=K\232n<\027W2<\303wu\274\213\205@=\003\345e=\215\t\270\274\333\227\033\275\320w\271\275\251\367\207\272\240\275I\274\321\265\006<\312\266d<\364\rT= w_=\211}B\274\362\302g=\231\332\223\275\335\341U<\313\344u;_&\032\275\312\007\213=7z\340<hA\271<\220\345\325<\025\270\225=Z\367\"=\214M\322\274)\334\016=x\"(\274\330\344\261=\rp\216<\343\016z<0o\251\273\203\315\372\274\\\000\342<\261j\230=\262\344\345\275\362\223\232\274\362\270\004=@\276>\274\336?\224\275\276\220\214=\362\272\003<\355\262\261\274\r\016\312:},\225;\025nw=\313\272\270\274F\014\206=5\325\n=\036\304\310\274Om\302\274\036\023\010\274\\d\200\274z\270\310=\243\264\020=\324\307\037\275Y\214\341\273\222\005\241=\014Y\035\274\020\232k\274py\245;:\215^=\315\275s<2\257\347\274\275\354\021\274\260\2138\274\t\263#\275(\202?<\220\273\324<\317~\246\275\017\343\337\273\"\036`\273\000R\367=\002\237Y=D\270\275\275T\314/= \232\234=\232\022\305\2731\2620\275\030\236\365\274v\212E=#(\233<\013\335\315\275d\253\376\275~\271\304=I[Z\274\245\262\301\274dd\033\274\356\333\220<\277-\375\274\356\226\201=\\\021\363\274\022\3064<21^<M\236\246=\332\376 =\377\313\323\274\367\314\020=\213E0\274\037\324#\274\372\237\214=\221\343\333\275\355\'\371\274Z\204\001\273\357k\267<n\264z\274\t\313\005=\360q=\275\340\337\023=Hgc=\373\357B<\235Q\317<\030\262\013\275\023\237L\275_\314b=\263CE\272\327\214;=\'\266w\274l~\307\272\014H\370\274\326\305\241\275+\325\206;\342\224\247\274\374\232@\274\244\344\024<\274\323\376:\205\330\037=g\027\242<\322\037\004\275_\363\264\275\316$\275\274\237\002\277;\000\335^\275?\033h\275\222\355\275=\0317)\274\265)\030\275aO\232\275\371yY\273\377=\301=\266\003&\275\275\337\256\275\253~j\274\373\010\233=T\001\250=I\352\034;IM\256\275+\007\372\273\215\205l<\347\263,<J\344\225=V\210m\274\210\304f=P\r\035\275\r\237\322=\252\304i:\243\344\035=\335\251Q<\246\022,\274e\311A=\374,\211\274\"\360h\274\247-\214<\324\375}=\004\274\t;\346\252\300\275\234\353\007=Y\013\320<\315\242\'\275\217\256\022\273\"\354\310\274\226\345\244<\260\317^;\366\325!=\037\234\245=\363pd\275i^\246=\010\326:\273\364\300\014=\273\360\241;B)!=;\247m\274\311\273\366;$\205\027\275}\030t\274\026\236\002<\215B\256=^\221\035\2744\300@\275\036P\006\275\224\205\024\275\325)\332<X\231\274\274H\341\347<\373\340\241\275\351\215\263\275ouN\275\r.\222\275\2336\030\274}\215l=\327\304\216\274\n\373\013\275\032i\026\275\007\026\230<\354`\037\275\227\311\270\274~B\337\274\3345\325<\375n|;zql\275p\247x\274\2317\327<BZ!=\245d\031<\337\r\027=\221\t\267;-\366N\274\006\023c\275lO\001\275>\021e\275\207M\220\275\340\374\233\275L6S=r\342\256\272R\rB\275 \226:=U\376\367< \232w\275L\002o=\001\'-\274$\233;\274\030\3727=\006\312%\272\261\314\215<M|m=a\207\216=>6P\275T\217p=\3049+<\005C\325<\030`\207\274\234I)\275f\004b=C\347X\275\354]\246;W\r-=\362R\342:\250\347\304\275\215\240.=\023\310\324\274\240\005\025\275\253/\177\274\352\000\021;C\177\005\275\022@9<\370\340l<\333^\017=}\376\037=\244\307\376\272(u\331<a\323\035=R&\246=\026\036\272=\226\032\246<\367\305\036=\263\374\234\274;KW<_\271x=@k@<\207(\203\275,X\243;\336\320\001\273\355\235O<\311!\000\275\242\351\246<\356\203\231\273\353)[\275v!\\\274N\224Y:(\361\356\2743\032\017\275\202\276g\275j\321\221<\351.\024=\204<\233<\321p\211\275\n\267\214\275\273\353\350\274\220\036C=\022=\252\274\024\nr\274\375\345\264<9\332\204<\312@3\274u\243c=\034\215\023<\227\244/=?\262u\275x6\232<\314\013\241:J\035\272\274\361l\000\274\355\0045<\010\257\223\273\331=\021<\320\231};\360\016\356\275\030\025\207<\370k\375\274uO\242=\325\257!\2754\366\020=\214k\221\274\204N`\275\321\343\275\274Mb\236\273\357\3710\274$\234\336\271\024\200K\275\177\203\321\274_Qv=\2016.\275\336k\317\2740g\014\275G\023\333\273 \372V=\205\030\326<\276E\303< E\303<\333\255H=Y\206\316;<t\024=\370I|=\241\006\264=\272\341\206\275\025p\234=\207\\\230<\257$\255<\002\243\220\274\021\331\006\276\020\343=\274\272\300\031\274\t\363\336<[\030\203=\245lV\275\300\3104=#;\367\274O\334\337=\260\206[\273_\214\342\274\242`C<OY)<\310N\027=\256P\304\272\234\202\013\275\364YD<\341\356\311\275\0273\351<\343\2431;\0348\006=\302\326\201<j\305\272<\027dB<\272sb\274\333\334\223<\305\364!\275\361$N<\"\325\260\272\310\327\024\275\021A\202=\346\256b=\346E\235=\253E\205\273t\363\037>\017\014C\275\177\337M\275\201\371_\275\'\247\225\275~v\\<\237DG\275\234\014\207=\302\245\243\273\2513\224\274\261\344i<y\276\313=\237\023\022\275*F\266\275\330%J=\211o\230=G\205@:\304\336\037=\262\200\';s\334\r\274\347Z\246=\202\344\024\2747\033\243=\215t\275\275\034\336\370\273\234;\314=\262^(\274k\304F=<5f=&D\000=\204\225\250\275\214\376]<\313\350\357\274\337\365\\=\237\344\302<\213P]\275\315QP\2743\026\177\274\311#\224=\223\225\026=\242!\000;\037qY\274*\354\316<_\271\224\2730C\265=\037F\320\273\356\216+=\n\372\224\272\033\n0=m\017\213\273\234\224\207=ITn=^W\023\275\224\3234;\313\017\304;\346\224\001<\031a_<o\3064\275_t\016\275\351\221\250\274\365\337\371\273\257\232\007=\266}\007\2746\303\225<\030}\220\275\243\270q\275\353v8;\277\006#\273\311\021[<\007K\210\274\227\376\374\274N\206i\274B\n\252=\326\037\217<\347\\B\274\000=\267\275\305N\036\275p\260\207\275\320D`\274uY\377\273\355\\\333<\305\341\342<\243\007C=\020\036\312<\362\304Z\275\254\016\341\274Va}\275\3110\374<\366X\210\274H\252\024;\241\200\020\275FK3\275\004Y\203=\\\2221\275\017\270\334\274\025\343\263;X\331\211\274w\337\237=\2017\216=\177\305\333<\010\2044;kx><\032t\031\271\320)\275:&\271\351\2742\354\270\274\035\365y\275\030$x=6\373\336\273i\376N\273o\014\003<&w\260=\354w\334=\364H\371<\230\255\373;\347\2003\274\0164\224=\236\030\245=Y\237\254\274\034+\345\2749\301\241<\270\244\226\274\237\372\344=\263\242\275<,9\352<\353\202\243=OZ\225\274\234\260%<\"yU=\335\277\313=q\305\221\275g\216_\275t\307\372\273+\243\034\275\376P\311\2738\\\220\274\013\240K=\016\262\367\274(0\013>\037\211\365;\201\213\256<\277W%\274\016\245k;\221\303\261=\253\346\215\273\310\267\375;hx\014\274\272e\306;6O\257\274\216\203\375:bX\000\275+\201\337<\326\240\357\273/HC<\336\377Z\274Y\244\022\274B\345%<\252\364Z\274\r8\225=(\270\214\274J\204\r\275\014 p\274M\010\332<\226\312\231=\021-\352\274\337\201$=\302\344\261\273\005\345L=^\316\000=\n\262\255=%\344\200\274|\256\237;\307\177\371<\374\357`\275\376\004M=k\325U\275\302\230\004;\314\230\030\274d\264\241<\332\3744\273\032\030j\275O\361\354;%\325\222=\317\335\000<_\323w=eM\340\275\034JO=PI\210\275\004d\027=fz\347;\336\317\307\274\275\274f:\034b\261<\310\236.;\210\330\206\273c$\036\275E\271\003=\260q\211<\232((\275M\251\343\274W\366\247\274\001@8=\002\216p\273\251\254\r<F\207v\2756\037\245\274\365\201\231\275\3504\025\275\323\246\024\275\257vP=Z\"\033\2759\223\313\272\316\344\315\275m\336\025\275>W;:I\275\017<\204>m\275\355\377/\274\007i\240\274?@\'\275\241\020\027\275\203\263\251<\314\212\326=Ae\331\275\214\231\270\275\331,\352<\322\370\351<>\273\322<\304\002\177<\216\000$\273\361&\323\274\364\356\375<\245\030\210\274\357\256\031=\276|O\274U\303\271;\350\312\206=\274\273Z<v1.=\002<\223<\320]-\275AR$\273\0020\226<G\252\264<U\030\244<\024\223\251<F4\205\275\254\337\261\2742\205\035\273\315f\005=\270K\'\274\320\325\324\274\326J\215\275(\264=\275\242n\254\274R\260\360\274\341\305.=\" \204={\342\027=\364\346%\273\376\372b=\212\245\r<?iX\275\004\241y\274s\004\314\274j\322\354<GF\010\272\252v^\275\211\332g=\341\233y\273\223\263\201\275\211\341\266\274\232\344\r\275\210\356\201\275_\342d=<Ks<\014\360\001<\255\330\326<\260\031.\273\301\212\305<\275\3578;,\345$;)\321\347<\240\325B\275\337\251:<\030U\377;y?\207\275\341|t<\271\005\222<R\226\346<\217]\222=\005]\304\275\004\2057\274~\3019\274\234\010\230=\252\3407=3\214a<\035\247\254\275h\366\246<\256\224\260=t\244\230< \374\\\274L2\203=\3653a=3\362\t<$F\361\274>\331\207<\355\204Y\275\270W\352\274o\313\244\274a|\005\273\247a\263=hd\245<K\031P\273\201\241B\274\332\311,=k\003\223<T\251\366<\366\031\265<\227\241\361<\027\275\033\275\316T\340<0\273\271\274\202\013\254<h\007\030=\263r\373\274\006\006\256=\350\202\004<\266\026\271\274\364\2075\274\026\007\257<A\022\253\274\362\351,\275\037@5<z\225\\\275w\266\364\275\340U~\275\362\207\245\275>}7<\237P\230<\246X^<A\021\347<v\363\226<\22265=\2031\216;\247}\014\274\203\2201\275l\334\315\274_\317\306;\363\2303<o\327Z=\250\216\274\275\260\240`=\312^[<\372\326d=\025\272\214\275\0328H=Dl\005\275sF\200=J\227\263<=X\000\274\035s\315\274\ro\310\274\2744\344<\001\021\343\274\025\215;\275\365\242\300\2753\216\307=l3\230=\351N\355<\375\211B;-\360\360<\327\301\270<\306\244\016=\267/\235<\356-\n\275\241B\n\275\316\265\027<P\0001=^\353\357\274\035Y\301=\261I\370\275\016E\266\275_\231\272<\366{!=Z\r\035\275\274?\323<\374\340\304\275@\371\344:\216\320\344<\213\315\347<ubg:<\314\370=\327\313^<\016\205\245\275%\316\236\274Q\222\203<\373St<A\230\r=\007\006\254<\302^\251<F\375&=ui2\274\257I;<\225\254%\275>/\033<\350U =\312\367\002>\333|i<\354b\235<\034\010?=\010\007d=\333\303\337<\204y7\275\317d=\273\005\332\224\275\275\307\013\275\376\004\325<\'K\243=\201\2779\275\336\251\001\2758\313d\275D\215\006=\257\221\\<z?#\273\256\323\212\274\375\326\206<\265kJ\275-F\024\275\277\225\016\274\365\203\316=}\310\204<P\346\020=\253\267\202=\270G\214\275U\326\246\275\205mW\273\377\247\223\275\341\241\210\275\373\200\306<\022|\001\274\314\254/\2750\205a=\017\302\225<\312\373\335\274\03671=Y\355\'=\037]\332\274\336#C\275\243}\336\274\360U;\275|\343\313\274\276\302s=\374\225\314\274I\220\201\274A\'\352\274\351\021N\274\202\017\226<.d\303\275\302\013k<w\273\017\274\236\343\237<\"\337\230=\202\254\203=\255vm\274\325 \237\274\r\344A\275;\340+\275[\233\017\275\231\364\022<\226\032S\274^:Z=\332=\204;,\337\031:\034A\337<\317=\207=E\210+=\231\255\317\274\235\2775\275\ntm<\017\225\214\2730\355E\275\026v\202=\366s\233\274T\346L=\240\363\221=R\032[\275G\3747<\026~:<\010\037Q\274\326\206K\274t\022\233\274\261\375u=2\236\305=\025X\200\274\253\307\010<\005R\202=\303\3002=\2353\352:\231\272\017\275<+2=\305h\036\274\257\010\333=\377\351\237<\325\326u\275.\313i=\344\3447<\r\27518\231\236I\274Hw\273=wf\322<\360\242~8\304\311D\2754\305\324:\273C\316\274\022^\351\274\242\374\273<\014\216`\275bK\r<\243\343\216=uC\016=\242a\220\274\354b\353;T\325\211:\302\345\272=\002C \275\2304\t\275zK3=\255~\334\274\255\377\276\2754|[\275H\370\037;\271\001\263<\320\000\\\275F@\2517\270\224\363\274\r\240\223\272#\257G=dE\262<yz{=\225c\'\275\0046\341<\034\004G=l\252\230<\233!\004=l\005M=\225w\352\272\331p\265<\217\252\260;\017\262\n\275\316\275\r=\232:\\\275J\226\020\274IbL\274\360\305r=\264\3242\274\036KZ\275\372\3213=\256\017\237\275b\001\035<\212z\230=\302\244%=MP\031<S~\027\275\"\325\231\271\364)\313<[\217f=\007\022\260\275\031\275u\274/0k=tm;\275o\253\227\274O\225\024=frE=\221@T=\345t\020;\225(\254=\3574E=VgB=\233O\315\274X\263\326<\215\243\031=c\242\315<\221\027\363;_\304{\273\306\366\210=\353\250`=!\223#\2747\332\014\271\365\307O\274\247\371\326<\233y\t=[\231K8\357\305%\273D\215\034\275\002\303\007\275#\345\227;n\306\317\275t)M\274\205)\373\274N\362\247;\213\346\035=Qq\244\273\341h\201\2759G\267<\271_\337\273!(\241\275\345J\237<3Z[\275\377\226Z\275~\345\201\274\035{/\274\345@\177<\350\371\000=s{\000\275\246\034\251<\304Pg<GUI\275\242\214\016\275\247\206\217\275\001\023\261=X+J\2757|\243\273\265\234+=\007\331D<!sw;<\256\033\274q\255F\275\023\355\255\273c\355\021\275J1\247<\337p\353=\343\332\271<\254z2<\206@J:\263\205\236\272\337s\324\274J\224\200\274[\216\023<\034_\343\274\352AB=\r\267S=W\222\231=\362\352\221=\305\373\263\273\206T\034=q\260\023\275\312\332v=\314\035O=\260\323>=M*L\272\r\354\204=\256\241\262\2725gV;\010U}=(x\014\274\311U\r=\321\237\237\274\n\331\332<x\335\021=\300H1\275\346\2501\275)\213\265;\217;U\275\301\205<;\222\263\316\274R\347\214\273h\375h\273\334\331\"=\376\270\235\272Z\200\031\275\221\360\021=\036\321t=\245\277[\275\346\260l\275\036A\n=\260\3219\275\276\260\217\275V\305 \2758\310\233\275\032\352\336=.\344#=\2101\340\273{\326]\274oqZ=rh\336<\333\211\t=e\021L\274\035O\367\274\355M\375;\300\333\232\270\270\300\352;o\300h=\217&\260=\236\274\311<\244\'%\274\304\270\004=\212\370\023\276\211\177:<\237\343/=\311q\035\274\303\350\367<\020E\221<~\247\004=\366H1\275\240U\273<\340\360\034=\205:B\274\217\322\024\274C\177\303\275R\323\305\2732\246\345<ZK\027=\333\357s;\364\202\216<\014\013U=%W\021\275\240U\260=\331\267%\275\236\337\241\275\2449\275\273\312\265\037\275-\212\202<\270\3730<8\030\260=\260\327\265\274\345tB\274\376C,\275\215\005\256\274\204i\036\2754jD=\263\220v\275!\315\241\272\231\332\320;\222\356\260\270\370\300\213\274\243I\243\274\3231,<$\336\363<\322\222\232:\233\304S=\347\316\272;-\017\301=C\346r;J\n\200\274\312O\200\275_l1=\270\306\202\274V\212[\275\357\232\351\274\244&\267\274\264\252\201=\254\366\257\274\214f\256\275\346?P={-\367;L\351u\273\016\010\216\275\031\373\234\275B\014Y\274\024\315\200={\000:\275V\364\345\273j( \275\265\273[\275J\266y;\337\250L\275\320\216\363<\252^\t\275M\234\005\276\201\256s\2753K\252\275\373C\230<\033\246\335\273\256\265a\275\257\203\n\275E\244\304\273\315\276\024;`\226\t=7\253\231\274\354\246\020\275\026\nN=sx\374<\303B\230<P\306*\274+\255\363\274\231\347r=\230\025\242<\261/\220<\000H+\275\372(i\275\310\255\010=\311u\243<\370\221\277\274\033e\204\275\351\347\034\2751\nf\274\276\nV=\246\317\214<\245\014\267\273]\005b=F\305\224;=\037.\275\253\017\357<\237\272L<\276\320N\275\366\340\025>\340\246\016\276\300t%:\036\"\277;\327\261\006=\344\305\201\275\316Rk\275_\211[\272\255\002.;\255y\276;r\020\024<\3512\027\275\234\213I=\211\342\317\274H=\267<\356.-\275\362t\257\275\323\023J=\017lD=}c\254\274\317\343\'\275L\305\006<\375V6\274p\244\301<x\371\213<Ak\202\275\252\017\252\274?\231\261\275\357\020?\2754:\200\275>\356\000<cr\021=P\346\317=\21610\275\372\256\361<\331\365I=Dn\264:\2366\364:\215HC<\371\356\270\2748\261\301;\3153y\274\233 I=\261\313a=\376\272\207<F]\317\2743\317K=\305\313\233<\231+|<\252C\310<3\375\205=\261\202\270<R\267\226\275(\306\266<\315xo\274\214\325\206<Ic\356;+\200\005\275\360\253\345=p\2054\275~=\n=\365h\266\273\007\212\2407-\320\311;\326\300\006\275\332\201+<M\220#=\"\225*\275\005\336\036=ok\240\275/R =\244\027:\272\301\243\252\275f&S=U\306W\275\345\204?<\010\n\016\273\263y6<96\262=5\311\261\273\353\"\246=\261\266`\273\336*\177<=$\365=m\221\017;\211\022\347<\376V\376\275\203\r\231=\037\275\230\275Y\334\344<Z\373\031\274=\340\223\2756\224\006=\007\311\034>\245\350\367<\277.`=\014\365\313<\037X\210<\032\321\017\274\265\320\032;aBX\274\356\364\350\273r\222\232\274\231Z7=\330\351?\275\036\350d=\245\365?\275(\205^\274:\221Q=%\226\274\274\300\255\306<gX3\275\216m_\275\253U4\275\374\2746<\236C\242:\322S\n=\212t\241<E\222\303\274\261\367\226\273\326\325(\274i\252X=\232\004\245\274\257BH\273\321F\363<\024\201O\274-\326\211=C=\265\274\211\360\233<5\004\023\275w\027\264<\211\205\254\275-\3404=\034\t&=\265SR;+\210\311\274W38=\205.)=\366\331\254=\227\326!\275l\025\204\274&6\253\273L\264I\275\300o\243\275\340\032o<\370\272-\274\005\240\033=\262\226\256<\257\033\315\273$G\331\274\266\3524<\020e\254\275H(\002=K\221\335<\307\364&<UU \275\214\220\250\275hX\226=\023D\336=-\202\211=\004MU\274\337\025\222<\240\177<=\367\n\362<\242F\342<\255\357\"=\356Y&\275\353%\344\274\025#\270<\366\"v\274a\316\213<\327\007\260\274\0241\002\275\272D\013<\366\206\253=\374\254\332<\225\344U=]\001\037=\355\313)=\275\334\224=\205a\256\275\214\021\032<N\2652=q\247\r=\342fu=A\026\306=\233\251\236\271\036y\242\275qgl\275\214\307\246=\205\376\213\275c\337\342\274\336D\244\273\211\210\356\273O\213\347<\212\363\001\274\247n\206\274*|J=\371P\014\275mr;<\330\364H=\342\211\372;\315\264\323<?\204\004<\243\311\212\274H\235H=\017t\301\275fW\236\274[Ib<tx\224=\324r\214\275n\303\361\275\"\310\021\275\034\035#\275z\360\274<\322s\244=;\264\316\274\021\204\206=)\354\r=\276]6\275X\277\270=r2\247\275S\316N<\373\303\205\273_\025\231=\377(\000\272\235\357D<g;i<\242\320\222=\024\022]\273l\231><\026j\213<z\375\275=m+d\274,I\030<\234\362\037\275\343\250\306=\330\363\223=T\230\224\275\320\250\032=kT%\273@\"\203\274\214.\222\274\231/\253\273\321\205Y=\274\367\241\275=\006\211\275F:O=\372\362\215\275\316\236\271<\007\3130=1\275P\275y\266\367<\362\340\022=4\323\254;LV\030\273\306\352\005=\313\317,\275\233\323\200\274\023w\251\274\355\336A\275Jp\031\274b\234\034\274\373\306\271\275\251T]\275!\035O<\000sj=>\023\241<\301M\326<\337\230\241<\360\351W<3\206<=\030\206f\274\017\242\316<\330X-:\025H\333<\325e\006=A\010\031\274\237{Q=(\306\315:\215o\034=\364FL;\232q\010\275\312\007\244\275i\353\302\273\353R]\275\203\323,=\203_\215=\036\356/<Jp =@f\210=\272q\r=\250C}\275{\275\001<\016\242s\275\334}x\274\315\354\373;\377\365\256\273\003\232,=6\227\327<\036 \021\275\223\205\334\274C\337\261=\031e}\275\262+\323=\264\206\262<Vz\245;?\353\014=\033\332\021\275?v\227:ri\257\274\224X(\272\207C\033\273\236\005M<\246\371>=\300V0=\033\332\204\274H\233I=V\024\032=\347\304V\275\020\353+\274\217\246\237\274I]\240\272\026z\261<\232\234\352<7&\210<\257\030\375<o\030\325\273\2438\230<[\027k=\303n\002\275\213\t\320;\277;\230<\264\365\203\275sB\236<\357\037c\275\026\r\"\275=\350%;\271\356\024\275\332\337\t=$\351\222=\375n[<\300\341\246=>\314z:X\201\027\275b\357<<\347m\315\273\007\\\356<\233\331\230\273\367\3251\274[\232g\275M\020\245:\300i\227<Wx\001\273\345\036\257\273\342\242\271<\355%;=\225\337S<$\006\206<\001h~\273\372\313\345:|\313\270</\243L=.q\271\274\251\244$\275\323\363\215<\377\277\221\275\2073\212=\007\353\231=\202\206\001<u\177=\275\326\247\003\273\330\031i<aSY\275\311+\246;\005\204\334\274\321\035\3009\350G^=\225\233o\274\260\2374=\351\345\311<\20095\273\210\364\030\275pJa=\312\206\003\274Pq\010=\261.\026\274~\367Z<\017\342\032=\275\2764\272\357pe\275S#?=\031\3303=\0361\010;|\374\233=\034c\236=\'\333|\274B\331\276\274\365\201\354\275\342,\320\273+[\257\274g\235\247:\327\226\211\274g\273\351:5\372\013=f\275\314\274y\227\265=\352L\030\2759^\263<6\251\005\275\272+\014\275\206\251\177\274\375\030\363<\t\255\244<\235\342\t;\210>\246\275\305:\032\275\246D\240\274\203\\A\275\342i\273\274\377;\327\275(\302=\274\244\362*\273\227\263\212\275\023\222\037=+\274\255<|\312\247=\323o7<\212\333\373;\245\332\217=\242i\332=\004\255\270<k\233q\275$\016\267<\302\201S:\356\335\222<\265\334\236=\327n5<9\302\267\274\356_w\275\235\034\242=\327p\324<\013\205\234\274\272\351\312\27459\270\274\031\'\212\275\005\r\204\274b\237P=\222\023\251<;6V=\237\225J\275o\254\326<\205]f;\0330E\2751\210\214\274ef\301<\034\240e\275i\317)=^\303\'\275jP\034;\246\2633<\321\367a<\341\377\016<\215jD=\023\261\323\273!\315\026=\322\211\207\275\201l\016\275\211ES\275E\315\212\274\235\005\030\275ZA\036\275\351\217G<6\367\203=y\346\237=.nJ\274\321R8\275\031\357-\275\310\203\220\272\311\350\226;\367\247\306=\307O\000<\223\322j\275@\032\001=\312\372\265<\026`d\275+\\\352\274\377\216\350\274\317\202\337\274\2463\214\274\263\267X<\245\311@=\017\360R\2757\032\362<\235\233\177\275\003\347M\275\320O&<\332\253f\274\004\354\373\274\246\263\242\275Ia\376<\310\214\t=\036\245w\275#\324P<@\311\244:\375\341[=\256\316\216\2752\346\260\2758\331\244:\037\354\341\273\257`\346\273=\254\026=\211?.\274\307G\030\275\211\'\336;>\214};\353w\236\2757f\203\275\336\255\020;\245\311\021\275\003\373\266\274\323\007\365\271^M\333\274\215S\031\275\251\020\310=\275\004\006=\243p\261<\236P#\275\323:\243<\265\344;<\002*\006=a\224\374\274\177\325w\275\\\333a\274\034\343\222=3\033\305<\324u\000\275\333U\234\27562\275\270\353\006*=O\356\330\274\215A\263\275\350\356\023=Qou<\316)\321:\226\211\265:\246\322\211<R\356\257<\326%P\275k>\016;\254\010\2669\316\212\276<9*\024<\307\303Q;\350\305k=`I\037<\204k\002=\350\231\306<\n0\303<_\360`\275\3126\245\274;\033X\275\002\327\006\275\0225\321\274\370\230\016\275e\033\247=Fq&;\302A\016=^\226m<\330oT\275\202?\344\274\326\324\270=:\020\"\275K\342\302=[\277e=W=\300\274\230\277r<\24281\274\230Mw={\360k=\234\233\215=\2175\336\274Hc\340\275&\364S=\262\226\332:\236\003\354<\350J\227\275\304\373R=\206\273\204\275\300\260&=\345r\212\274\020~\336\274\302\225\235\274l\314\264=,7$<\025V\363\273\242x<=\277*f=\311\335V=\243\274\211=\275\352\231\275\253\242\227\275R\276\367<<\371\261<M\221\005=\336V\016\275\222<,\275f\344\211;\346M\027<B\213x<!!C=\001\207\260<p\003\321<\261\206\356\274\343Sr\275L`\252<\366\"&=\276\370\201=\260OC\275\202\313\357\274^n\271\274tL\323\275q1\003=\277\340@=\362\317.\273\'-Y;\212\r\356\274\307h\305=\236CE=\202\334\031\275\311I\221\274\206\241\317\275\005,\325\274Y\245\316\274\247Gf=@Ci\275\022\366\210\275\037\271\353\274\231\344\311;\310\214>\273\364\367\220\274C\374i\275\221\216h\275\265\032\213\273\212\357^\275C\266#=_p\245<\230\004%=`\323\374=NV\232<\030Q\202<\271/\'=\220\310\251\275)C\000\275\000\237\262\274\224t\024=+U\237\275\207\010\323<\235B\325\274@^\037\275R]g\275\025\023\236\273\311[;\275A(\375\274\n\262]=\316eV9\tr\337\272*\314\334\275\224b\217\275\355\221\240\275\342\270;=&\314\032<L\262e\274G\257+<\305Q\220=T@<=a8?=\373\030\325\275t\301L\275\255\207\3109\372\335`\274\036\r\307;_\211\211\275\027E\206=\037\2067<`\025Z=\313\347\237\274\215\320?\275S\373\235\275\253LJ\275\3608.=0\252\256=0\303G=n\251\326\2738\214\335\273\n\2551=\257\326\312\273Y)/=p\037T\275\325\244G\275\010\010\\<\022\252\217\275\034Q|<\322\210Z\275\266\362\257\274\204\210;=\277N\034;\204y\025=\335\254\230\274?(\371<\317\353\244<\274\030w\275\272\217\001=\207,\201\274A3\037\275:\214\006=\364D\356<k\3238<aF\311;\033\324\327;\033\222A\275\376\030$\275\326\366 =\213\016\240\274t\261\214<h\207E\274\257\3651<\2554E7N\200<\274\233qa=\340\365\312\273\370kq<\014`D=\233\365\320<\357\246K=U\3500\274<U7=9\021\247;1\020\217=5\362u\275\276r7=\214\021\305=\003\200\n=\370L\254\275<\370\203:A#\207=2\337G=K?\023=c\254\242\274\352?\016\275:x\252\273\353\2148=q\026\346<W\177):\352.\330<\314\362l\275[\221;\275\277fx\275\030i\251\274\2172{\275iv\214<F\251\271\274P\004v\275\017\032\367<\242\001\265=D\323\204;\355\005\364:/NA\275Z\202^=\014c.\275\010\326\006=$\364\322<(\256\002\275\330\216\270\275~Zm=[F\253<A#7=P\216\352\274~\370<\275\367K\223=\020\323\000\274\307\324(\275\331\271\346\273\371n\300\274J!M\274\240N#<\365\217F\275^\235]=\214\256\013= \'\371;\026\370\207\275\222\t\336\274$\332\217\275A\2719<s\326o<@\364\t=\367\215\210\274\031\360\247\274\034\250~\274A\344Z\274\367A\221\275\350\370\306\275-o\230\274\3406\225;z\201\254\275\016L \275\362>\301=f\231-=\307\265E\273\026B\225\274/\244l;\235\376?\275\340\306X=Q\350!\273R\256B<\242\263~\275\223Yc\275\370B\001<\211\004\335\274\213Z~<\251\210q=\321\270d=3mj=\3173\216\272\272\233\343\274\035\002h\274\223\201\343;\314K&\275\322g\277\273\364TR=\310\300\200=W\377\204<G?\262=\37183\275Q\370\356<x\005==E6!\274\363\265\354\274\264h\254=L\002\355<\256x\"<!\241\025\275e\013\242\274!P\321\274!\354\032\274\365{\237\274\320\3126=\357vG=C)<=\303\217\020=(\241\200\272#\307d=7\345\211=g_\233\275\365\243\322\274\005sc\275\311\322\372\274\305\0074=S\367\213\274p6P\275w<\274<\007\2240<\200\313\007=\205ko\273\346m\\=\200\377\014\275\350|\300=h\377\036=<\204l<\353+\221\274\316K\234\274\365\t\202\274\365a\241<\0039\267\274\221\340\r=*\252\232=\201\316\n\275\200Zr\2743\376n\275\370\306\014\276\261\252_=\n\006\275<\013\350\216\274\260\336\303;\321\252\005\275u\333\351\274\023\213Q=\251a/=:\371\210=\262\215\227\274\233\002\312<\221\245\321<6\356\336\274W\263\236\273\376\266k=q\222\231\275k\366\253\275>\305@\274\'\336\024=N\324\244\274\001$\0369q\254M=\034y\327<\323\237\027=pb\013=.\235\211\272}p\330<\322 \212\275\261\020\305<\354\364W=G\306\004\275\270\235\254<\010W\212;\230\023\224<\225\265\331\275\002A-\275\201\313\036\275\326\3631=\264\225\r\275m\271\275<!P\235\274m\tK<MT\024<*\275\r=\3305B={\360\313<\372\212L;\355\t\245\274\254nT=Fz\365;\016\346\331<\306v\001\275\030\202 \274a\014n\275\317\345\232=s\345\375<\003\022r=>\315J=@\227j<C\010\233=n\354;\273\271w\345=\306\370\207\274\315\357Q\275\330\026\313\272\266\030\322;\351\260:<}94\275\317|\027\275\030\034#=\2334V\274\270\363\010=}\277\226\274\363 \371\275\025\026\016=#\324\234\275e\322\253<(s\002\275\327\311\014\273x\332\302<l\301)\275\037\001\021=LcZ\274=yo=F}\004<\226\227\204=\024\364&\273N\223\275<\222\014 \275\215\257\244;\3403\356\274Y\006\275\275\336(\212\275\335\307\316\273\374k\007=*\031*\274\265\272a<;\275h\275_\306\270:\214\nH\272uh\210\274\333\367\245\275\007<\003\275\006HO<\001\250\210\274B\343\356\273\256S\376\274\334\312\355<\306\273\222\275E\252\006=@\250\254\274\276\014\201\275\213\rL<\367\002E<\256!\026=\315\013\354<X \026=e\357\200=\372\324\205=9\351\264\273\327[F=:\325\351;R\343_\274=}\212=\206<\335\273dwG\274\tO\371;\345\320\t\275\337\253|\274~i\030<\267\001\003\275\271\242\245=\356\301\034=\273Kf\275\3066==\232\'\252\275k2\304=S\274\005\275^0\266\274Ek\200=\311e\225\273\016B\304\273\265a!=\2720f\275\373\2452<\"\007-=6\311E\275\263\3418;7\357\234\2739\321L;\254\275\"\272\335\274\016=\207\256\016=\236\206\035\275\343\2241\275\214\335}<\021\033\231\274^n\021\274\373/\307:P\'\301;\310\213\240\274\337%X=\321\245\206=\3533Z\275\334\303\272<Y\020>\275\236\022\250<\273\3535\275@t\371<\327\364^\275\365\376j<\326\252\331<:6H;\204\350|=\214B>\275\370\326|=J\232u\273N\n\000=\327dk<\203\001S<\376\267\356<m\001\342<.\220\354;\027\3138=\327\2166<I\326\023\275\336\000\221\275\332\362\223\274)\032\362<\365\361\037\275\236\370\225\275\031\220\216\271\322\340\032\275\335f\204\275\342[\217\274:\241\341<1<?\275\217\237\272\274\254\246z=vb\035\2751\315\032=&{\271\274\336\024d\275\237\334\304<\275\236\243<\340\364;=\321\317?=\000\330\244\275\0003\333<,\330R\275Z\301H\274~\024c\275\020\375\205=H\223Z=+\005\323<#\242\027=\254\267\002\273\333\332\211=/Cz<U\325\335:/T\330\2755PP\273\251\317C\274\237Y\034\275\261b\255<\216L\021<\033<&=\374\262\217=Ab\270\274\rh\337\274\322F\341\272\014@\313<|ij\274\r\311\353<\221\373b\274H\\\301<e\245q\274O\275\257=l\314\021\275\274x\350\274\001\351t=\260M3\274\014V\263\275\201\226\231\2748\334\330=tC\241\275\323\350\242<7\337\340\275\357f\035\273Xf]\274\307\235\002=\236c\344\274\345\370\373<\024\177\006\275\"\203\316\274\277PM\275\211\213\005\275QEx;\203&\337\274\257\234\251=\336\300\223\275\242B\246<\325\276\016\275\355\333~\274+3~<\257`\222<\257\3574\275\341&H\275?B\013\275\240\t#<!\253\255\273\362\373\r=d~Q\274\353\036r<OO\337\274\310\276,=-tZ=M\267\212\273+\265\034=\301Q-<\300xG=\351vn<\013\242\223\275\355\024\005\274\340?T\275\210^D=\305\252k=|\361\217\275\360\273\026\274lV\021=^\224\032<\2032\257<\300ad<\324.\244\274\307:\276<\241h\270\274`\241\351<*V\201=R\200\350\274\250r\"<1\341\250<Vk\350:\305\336\222\275\304!\201;,t\342\275g*\013\275[c\225=\361D`\275\234\1772\275\212\322\265\274\2345*\275.\305Z;`\003\220=w\202$:\244\255\024\275Bm\254\274^\367 \275\227\224\356\275iW\366\273\355\245u=$\253Y\275\277\364\327\272^\300\262<\372\211>=\246\010\250\275\343\233\317<\241\207\346<\245\326T\274L\222C\275\353L\272\273\277\300\322<\302\022\324\274\2642\335\274\032\253t\275\267\215\377<\275m\207;w\030m<%\345\344<\246\036\324<\306iC\275\330\224\007\273%\371\265\275\370\372\003=\234\3307\273\205\321\370<\266\233\200<\225\327\254;T\032\312=jg\262\2730\337\323\273\037\ns=A(\313\274\210A4\275\016\r$\275\261\322);\nY\027=\347WU\274\251`\343<\227\326\377\273PW\210=n\340\245=\273z\261<\347\000>\274\210\226\263\272\033\302\226\275\252\362\262\273\201\004\337=w\222\003=\257\262\0009\022\024D\273\tG\340\275Z\302\235\275\301E\007=\337\222\252=\331E\225<\013>\256<\031{\276\274\344\2470\275}\\\314=\224\267\200<\216Bh\273JR\033\275\275\331\344<T\303\353\272X&\244\274\331\300\254\275\266)W=\000\210\327\273\372\277\227\274\266\te=\'\347i=\371W\230=}H>=J\244\000\275\227\266\222=\035nH\275C\367\271;\253\245\035\275:\356=\274\316\204>=\325\211\230\275\306\023\342\274S#\360<\335\347\345\274\317\242\3078\001\344\017\2756\255\366<\227\236\340<\344\3263\275/\342\311=\333\214\324\273(K\256=\326\017\273\274\256\335\256=0\313\245<\200=\215=\207\354\003=\nB(<\342w\025\275}\020\220=\267h\251\273P4O=e%W<\001\221\211\274\335\331\242;\356\025><[\221\034\275\361,\213\273\264\3773<\027\207<\2752\266\223\274N\314\014=\315K\252<\252\\8=jA\211<\235\334]\275\267\331\026\2756c\261\273\371O\026=\2527y=\007Q\031\2753\023\361\274j\263\245:\216\005\007=&\346\t\2751U8\275\225\365\350\274\313\265~=M\354\330\274\024~\207;.\3143=\372W<\275\300\372c\275\337\353T\273\347\2621\273Y\373\315=\3529#9\205\273C\275\003?\272\275\325^\273\274\036\265\353\274Y\r\236=\311T\272\275M\246U;\3320g<k\034\204=g\305\267\274\'Qx<\227\354\324<\232(\327<\237\2434\275\026\237\316<\355sp<Th\007=\320\034n\274\204\017B=\tO3=\217iJ:\351m]\275jf\367<\252L\254=\0033\273<\225&\213\275\350\227*<b\270i\275\263u)=\240\3374\273\3722f\275t\215=\275\316X\323<x\035\002\275\311\2602=\253:L\275\276K5=\276\350==\355\360\001=\2318\010=\206r\324\274l\343\241=\304\037\237\274\215\327\217<\237\032\273\274\255|J\275(\337\006\275\312\"\263\275v\364\033=y\231F;\211\303\302<w\033\377\274\306\250{<\031\300Z<\n\2722=\255\036\030\275w\347\236<r\t\353\275]\270\245\275\200\013a=CZz=\250_\317<\362\362\267\2748hs=\2400+\274s\3232\275v\337w\273\320\213\271=\206CP\2750P<=\020\372,\275b\2334\275\211\'<\275\014%\216<y\332>\275\221\266z\275Io\304<\330,\202\273;\351\n\274|\224\261\273,lw\274e\376\255=\240\320\255<\371\260\371<\321\233\214\275\332\376\277\274j\2320\275C\200\366\274\312=\226:\332\312&=\363z\014\275\206N\322<\353/\312=\032H1=\302\365\013\274{E\317<\335\363-\2767h9\274\025\352\274=\332\0357\275\030\344U<\004\366\207==\344\364<\234\247\246\274\343q\240=\271\010\005\275\336uM;@\206,=\r\202\324<\212\240\302<\3266\315<\221\206\010\275MM\254\274vD(=\006\237\010=\323\324><\262\356\266\275\265.4<\305\237\'=\322\r^=dR\240\274F\036\247<a\241%\273%{\315=2:\316\274\232\360R\271T\265\031<\225O\370;\344\360V:7\366h=\3031#\2751\016p\275L\007r\275\327\345\227\275\300\207\005\275\316\013{<\250}J=\210HW\275\211\261F=\313\335\317=\3057\354<@\263\266\274\307s\r\275\327{b\275ba\226<\"\306\331\275\032X\253\274\343\227R\274i\226\237\275\213e\263\274\336\010Z\273\326\032\007\275\264\360\032<V\236\206\275Ni)\274\235B\031=\347i\356\274v\361\355\272\204\236\215\274\362\332\272<\302\2741<i\352d\2754^\036\275!>\021<\324TD<eo\351\274\261__\275\367\227\016=\257&\006\2759j\350=u\206C\275\353\312\n=\340E\340\273d\353\312\274\304\233\223<\203\233\034=\027d\321\274\032\321J=\315\200\304<\227|\201\275\n\261[\275\246w\315<\300gT\274\265Q\234=\025\250\345<\272\265\221\275\311\233V;,\301\305<\025\010@=\226\307\322\274\222RF=\334\343\204\273\377\003\360\274S\3454=\220i\242\274U\256p\273\340\356\304\273\n\235\201=\203UR=\2421G\271\373\t\t\275\243\212\227\273\013}\202\275\351\364v<(^\023\275\307\217\261=\321\217\335\273\247LH\274\227\251\211\275z\3031\274\362\243\272<D\371%\274\243\337\253\274\205`<\274\267\354\010\274\n\306\231<\362\3218\275x\n\010\273g\352K=6\020\013<]c\360<\240\317#=\305\376/=kK\205;\t\022C=i\036\t>y\363\310\274tX\036<I[Q\275\n\355z\274\372\374\016=\004\265F\275%\024:\2752c\277\274\255\270h=&\035\247\271\313\245\267\275\235qy<\324s@=H\375`\274\360\014z=-J\207;/:\374\275\331W\264:\356Iy\272\361?\241<\316\031\3469~\033\321\273ex\250\274\032\301\223\275\340H/\275\346\256\254\273\232\351\021\275\233o\215\273\370\250\333\2754(\017<\214\244\200=\022%~\275\345a\201\274]\207V\273^\246\007\275\365\177\254<\313\250\237=\341\314V=ee\340;\213\366\251<]\306\010<0\260K\275U)f\274~\233\234=I\221\324=\316\022I\275\350\366\355<\252\310\316<\312\333-=\313\007\343;\263k\252\275\347.j\275V\310\000\275\375k\327:\247\264\271\274\324Z\350<Y_\303< \271\207<mvi\275p6\345\275\204\004Z\275\202\276\302\273\302\372>=rWP\275\305\367<=\021ha<U\226\004\275\363\220@=\232\227\013>\271}P=7\234\327\2742\\@\275\031\376O\275g\321\302:\262\372\n\275\371\265\340\272\367\261\344\274\235`\223\274T|\027\275\306\020\213\275\214gx\274\371\310\340\274B7J\275\"{v<A>\005\2727\252\327\274\201\311V;\263\2764<\254Z\212<t\312U\274\244\232\202\275\313\013\204=\314\210\033=C\255V\274\032\315,<`\360\020\275\275\'\222\272\247\374\341<\255\0337<]\034b<+\2069=\305\251\036=\314q\310<g}\t\275<,\001\275\256\024\310\273\'\355\212\274:\256\223=\356i\202\274\206Y\205<D\252\343=\312\377\257\274\255\277\247<\032\t;;\235~Y=\317\227\014\275\030q\016<=N\233\274\247sj\273S\023\300\274\337\276\340\274\357\244\'\275\215\250\250\275\203\322-=\2223\206<\260\2037>q\343\r\275\361\264)\275>\253\202\274B\240\226\274b})=\343\\\312\273\336\371f=\346\376\370<\344\323\002=\371\324\230;\240]B\275\322\353\033\274\017\222o\275\203IL;3\307q\273\035WP=\372P\214<g\016\237\274|\021\035\274-6%\275\\k\177=\313&\205\2759\317Z\275\216\245L\275\263j\300\273\362\212\023=V\333\004=N\024 \275\250\020E=\2638\356\274\t.\223\275ffe\273\016\254\017\272F\213\037\275!C\266\274\275\216\'=8a\213=\0104\202\274V\342\352;\003\0236\275S\206\232\274v\3331\274\027\230\006=a\024\307\274a\302\226;\275\374:=\264\\H=@\203H<V\245\207=\324\002*\275\355PV\274\325HX\274\253*V\275\324\251\271\274\252K\261;\261\r\371\272\230\305c;\002\227\233\273\300\351\353<\237\027J=\362(m\275\315m\226=\3608\230=\374s\237\274D\257\345\274\256q\201\275QF\242=\030@\231\273\027\250\376\275\323\222i\275\371\017a\275z\001\016=\035S!;\375\205 <\250f\261=Q\023\217=\376W\030=\2577\036\274\036\367\016=\222\324\272\274\206\327\206\274 H\021=\013\246\217=\263\356\345<H/\241\274T\223\236\274^\231\\;\251F\325<\000\223B<\375/\214<\362\365\036\273\021\003\304= \002\264=\227r\205\275\304=*\274\372\337\336\274\340\233\246<\203l\212\275\341\247E\274\361\322Y\275\2167\202=z\264N\274p\317\221<5\317<=\256\321\261\274R\245v\274\017\244\2639l\217@=\252>\337<$#\213\274W\236S=\274S3\274\213\204I\274\303\2424\274\226vR\273\331\232\230=\t\177r\275\313,4\274\3036#\275L\365\243\275\220\032\215=\3745\027\275\236\374\n=\356\335\307\275\312\032\014<\274\233\242<g\211\230\275\'\363\332<z\373\314<H\350\371\275\n\331\255<s\321\236<\3220\007<^l/<\242\010\244<\320r\233\275\026#\241\274\n\231\335<C\310\200<AN\226\275:\017l\274\232;I=\246\275\255\275\302\317\226<,\020\034<\306\3050\275\227{\212\275\272\010\234=\030\356\262<\340\206.\274\345|K9s:\'<\331\026<=\346]\232<%\2149\275]\251\274\2740w\373\2748\274\307\274\301\031\274\272w\333\005=\347,-< \030\276\274\215\253\004\275\346\353\351\271\3767\345:\332#\037<r\275\030=\261\000\211\275\"\313\366;\3459\313=\374\376\003\275e\324\207\274\237\346_<\374\324.=g|j=\222\347\037=\t>\360<\010\326\274\275\227>\022=/\352D<\333\347#<b\370\277\2753@ \275s\316.\275\315\332\354\272\r\266n=A4\017=\\\237\277\274\t\325\"=4\014\363\274d\373\007=\3204\204=\177\361y<\177V\373\274\3571\367\274\332\225\304\272\r\355\336;\005A?<\"k[;\205\245\013<\262\004\250\275\251\020)=\347\377)\275c\341=\275\351~\257=\247\246\007=\236\r\216<\313\313\377:\231\361?=\346\255\273<$\341\214\275h\351\355;\333\250\362<\334\000\347\274\201|\210\275\252\003\200\273\220\320\014=\241=\321\273Hj\037\275\322\311\315<p\211\034\274\303\273<\275m\360\262\274w\333\213;X\376\264<a.\346\274\2553\037= \273\037<\274\314\016<\246&d\275\003\245A=\345\353\231==\036\257\271\t\276\014<\000\206\300<\016\337\362\274^k5\275\023\276{<H\365\373;!C\327<X\252\255\274x\243$=\300`[\271\017\tk\275\321=\374<?\026:\275\274\030\321\274\251\363,\275_!\240\274\207^:\275\200\263\331<\363\227\373\274\235\3376=i\024\242\274B\221p=|\032\271=\027W\377\274\224\205!\275-\343\347\274k\375G=\324\336\234<~2\013<Z\220\211<\244\210\333;i\031\177\275>\025\245\275\223t\201=\332\215\275<A\300y:Uy\353<\254MU=\210\240\305\274,\306}\274\254W\272=J\026\374\275mX\225\272\337\265\033\275p\334\214\275VGK\274M\313\352;j\375%=\213\301\310<Gp\333\275D\3209\275\357\030\023\274z,\215=\002\241u\274\315\375\321\274uk\225\274$Ss\275\330a\321<j\202)=\314\234]=\327~\237=\027\310\233=v|\217<\242\252\207\275\021\370\031\275\006\374\224<\255\002N=%u\237=\215\026\234\274\325\027\300\274\026\240\t\275o*\202\274\365\244\302\273\301\237\270\275\217\367\007\274\013a\n\275\204t_<\tq:\274\234\3165\275\031\232z\275\274\372u\274\246\213\366\273\346\t-<w\332\373=\356s\203\275\025\306\014=J\000\304=\252?\272\272\210c>\275\377M\241\273{\002\361;e\245\301\274\250\013(=\006\244\020\274L\353w\275\361o\302<;\257\216\274\267G\274\272i7$=\353\214\204\274\\\211b\275\033\216;\274\247\352\315<\220L\217\275!\277\256<$}\022=\273)\374;\275l\032\273\000\355\031=\353\275\247=\207e\252\275>\277\n>\t\034\277\272\374D\216\275\352\213^\275\224\021\225=\\\026)\274g\241\n=)\037y\275A\352.\273\3613\247<o\213\260\274\364\205P\273\331c\037<\216\301\264=\243j;\274\367\332\023\2756&\304:\351\216\262\274\020$\254\274\323\353\234\272\323dg\275\302\245\246<\001\301\220;\224\265\274\2738U\203\274\355/\014=l\211\212;P\307\010;\201\177:=\323`\236=\013\263\277=\372\260\206\2744%E<\010\320\024\2740\351\346\274\t\251B=\257\252\305<d\211\021<\215H\243<\316X\n\275:D%\275\306/Y=Y\337\245\275\223EB\274\355\031\245\275\243\275\357<\373\260\023\275\200o\270=\27624=L\276\006=>\023\231\274\255M\230<p\312\266\275PL\353\273\306\277\246\275\375eg\275\034\213`<\254\177\254\274\306kK:lm#=x~o=\376\323\026\27582\351<d Q=1\375\033<\317\277\201<\030\230X\273\022\274\254\274f\342\201\275|\375\343\274D\240\231=\304\301\275<\320\371\020\275&\326\216\275\034\3369\273\213\177\356<A\027\361<\010\376-\275\220w\361\274\215\253\030\274*\337\205=\n\350;\275\344L\013=o\322\260<\322\333\335\274\364\2650\275\216y\304;s_2\275\231$7=FK\'\275w\361\024\275\320R4\275Q\265\301\275\312\322\231\2750\224\235;\303H\257;\365\2664\275\000Q\230:\207\273\217;s\000\306\275\200N\214<\337\026\262\274{]\032=\256\201\207<\235.\025=\002fA\275{yl\275w\005\331;\223{\023\275X%b=^\322\031\274\356+4=\034c!\275*3\343\274\351\307q\274|[\206=\374\372$=\370G\033\272*\314\252=\251_\034=\262\222\004\275*DH\273^\367\261\274\325\344\373\274\320X\206\275\325\375\341\274H\264\t:mY\240=\003l\235;\304\342\364<\326\344l=\010\321p\275\313\245\337<*m\324;d\010\'<\377Cz\274\356\336/=\3241d\274\025|_\275t\306C\275(q\002\275\247c\362\274\300\343\313;\241\223M=E\014\233\274\372Q\361<,\327\350\274)\307\264\273\315\225\034\275\242}<=*\270\356\275>\243\022\275\003\215\277<G\343\016\275\256\335\325<\341\351\222<cp\002=\367X\305\275+\t\023=\321\326\202\275IJ\213\275\2348\360\275_/g\275c\215\216=\353<\251=q\004\346<P\300\350\274\201\273Y=d\276\264\2753-\273\275\221l\023=WZ\214=\316?\241:\327\243\200=\236\335\342<,\272\020\274{\214\375;p/r\275H\363$;\231\344\234\273\277Y5\274\t\021E\275c\273\201<\221:y\274\007\306o\275\221\377o\274\026\006t\274\305\031\025=\t\245\232\2756\255\374<\321\301\022\275\210\342\354;AA)\274\346\251 =m\016\241\274\376o\243=\267\244\030\275\340`5\274\304\001\r=\334\305{<^$\303\274J\2043\275\000K\240=\037\304\237<e\224U\274\203\010\345<\353\222\254\274\252\270K<\324\353Z=J\371z\274DS,\275\330C\211;\007\346\310<\017z\013\275\007s#<b9R\274\260{!\275{\326o=\2474_\275_A\207<>5e=\020\232T<\177\337\270\274c\000\224\275\374\004\243\274m\313\007>\202\364\374;\024j\201;-r\347<B^\024\275D\037\025=\326\257\246<\177]\032\274\242\177i=K\254\360\272\201\354\200=\217\362\352<\311\216><,\317\024=o\350>\275_|9\2756\211\227<K\021g\274\336\r@=\253\333\230=\260\300\\\273\376M\265:\374\254\330\275\215\273\235;\373>C\275\365\363K=\344U\212<&\347\\=o\340\301\274!\212x\275&B\231<\341\3038<\201N\356<\234n\247\274X@\234\274&\350\333\273\023B2=\027\257\207\275\316\352\247\274\201\242\350<\336F\001<)\320\315\274\300\327\354;#\036\353\275\307\303\376\273t\230\244\274\241q\232\274\276\017\261\275\230\304\236<\310\377\260:z\031\023;\353!\233<$\026%\275\245\025\305\275\372{(\275P\353\327=\024%\307\272\273\014l\274Eg/\274\356\020\273=#c\017:a\243\322\274\243d\205\274mXf<\001\036\014\275\003g\232=\213\226\027\2757\2658=\332\205J\274\373\357#<\352\316(<\215\350\362\274\\\305\203=\237\t =,wV\274\247\264S=k\034\264=\370\235\316\275\0250\216<\302\240\357\274\343\354m<\262\356\233;G\370\263\275s\202D<\333\243 \274\375\212\324\274:\030\014\275\340\347^<\025f3<Z\331\224<E\235%\275nqz<\272\322\342\273g\256\271<\2377e=\220\362X=c4\332\272\275&\213\274\372\211!\274#8@<A_e\2745\304\263\270kK/=-\255\034=u\270\203<\372\325\220<\237\313\211=\211\231c=\277\315\n=\004\244\223<\205\365\000\276\024\001m=\305\326m=\004\210\316<\0216\265<\025y\'\2758\351\313\274I\225H\275`4Y=N\365\014\275v\360n\275\336\204\n\274\030\351\205\274`\003)\275\301M^<\010;\306<\344\033K\275e\275\005=1\3610\273\270\347Z=\020F\001<\246\202\221=\273D\002=s\003A\275\036\372N\274\177M\247<or(=\t/\212=B\356\014<\232P\023\273\004\245+\275\304Hv<\010\302r\274\212?\355<W\253r\274\307\253\013<A\277\255<\n|\317<\361\231U\275\271\312n\275\034\032\256\275X?\251<\272\027}=\034sa<\304\272\326<u\233\304<9\316 =0\237\245\274\204J8=\272\233y\275\362T\210\275\305\272\022\274\231?\344\273&\035r\274\230\002\366\274\r\266\212\273^\361\034\274\350m\214\274\346\203\314\275^\215\013\275M\236\025\275k\221\226=\212D*\275\300S+=ES@=\206YD\275\027[\003>\305\305K\275\025\r\252\274\216\217\237<!\266c\275\226\r\003\275f\001\203=z\304>\274i\220\324\274W\327t\275+4\010=v\346\233\274\032\373\240=\313\326u\274\\\347\333\274s\375\221<\345\005\r\273\236\2401\275.O\362;\033\016/<]\037>\275\033\337\'\275\361\3104<\371\330\333=u\230C\275z+\031\275\0058\350\274\366\363\273<\007\000\256\274X\306-=\0079\031>K\302L;\034\3632\275\301\3418\275\342\367)=:;/=\217\277\326<\3205\204\274\240@\r\275\317\016\004\275\026\235\216\274H\305\340<\362\313q=\277%\027\274\233\313t<^\227\254\274\251Wu=\215xJ=\2325\263\275\177\321\033\274\341\274G=\377a\214=NG#=(\306M=#\203\205\275tz4=\3040\353;`\333\321<\354\273\024\275\r\3741\275]=6\2750\220!\275\274D\001</v]= Z\231=\323-\214=4/\000\274>\323[=\365W!;&\024\260:\320l\245\275\233\232\270\274\247}\332\273\334\003a=qm\031=\243\273D<s\310\261\274\024Q\027\274\267v$<\3167\201=p\243\177=\000\033b\275\3679\'=\312>\360;\343\207\203=\207\206\004\275\347K\213\274\346\256\206<J\215(\274\03153\275\320\203\221\275\034J&\275\343\240\037=\272\0013\275e[0\275\232\016;=\354\306\350=0Z\032\274\022c\370\272],\351<\224\233\214\275\3424a\274\343\272\223<\201\344\231<ZEi=\'u\t<5\243%\275\010K6=Z\260u;\326\360\020\274\203S\005\275\366\366\263;\"\252w=\333a\021\273\334\377=;IYZ\275\336\003 \275`\356$\275\253#\345\274\215\342\223=|\027\254\274\313d\221\274%\376u\274\350\336\225<O\327\033=\254\317\205\274|x\350\274c\2169\274\367\354\233=\027\336q\275\236\223\266<\223[\202\273\2238o=\001Fv=\313\242\355\274\274\351\320;\0265\004=X\376\020\275S\230\346<\2659h\274:\213W\275\211\247\355\274J\206W\274\231\201\313;\031ZB\275//V\274\024\021\177=\022\211\232\274x\250\275\275\334H\201\275\276\265><\177,\263:\206\353\201=\3670\251:\255(\233\274\374\032\225<z\271c=L\344\035=\353\216\002=\027iQ\274\263\260z\274_O]\275KIb=\374\255\266=aA\203\274\\\036\375<\2145\002=\225\223\033\2755t\204\275\004R\000=\"\306\330\273\016l\247\273\243(7\275[yi=\2405\020=ym!<\346(j<6\3152\275\355\243^=5`\013<\235i\244=\300\326\363\274\263\311\253\273|\314\363\274{\264\204=\3156\265=?\223|=\221\322R=43\257\274\'\367\261\274\230\342t<\347\352\020\275\n\226\320\275>\312\376:r\333V\275w=H=MQ\223=Q\353\\\275w\307\321\274\t\210\017\275\022GK\273\347\256\305\275\r\267<:Sd\250=\307\352]<l\373\007=\006v)<m\362\230= xY\274\027\304z=\300l\222\2750bk=c\243\344;\373\347\033=\3310\016=D\321(\274\037\243~\274\356\177\332\274\323\245Y=\227\341\247\274q\306\264\275\'\252\035=1i\323\274G@]\274\206I\340\274U)\026=8\344\210=\033\275M=\241\327@\275\234\361\014=\321\207!\275\230ve=\376\250-\274\273\254I\275\2543\r\274U\021\215;\350\365\000=A\257\205\275\371\260\303=Q\355\274<\367r!=(H\002<\333\300\360<\32596\274\367\001\233\274\017I\370<\271\005\352\274\017z\264\274\253\203\222;\224fx\274G\010\n\2758\370\236=\264~H=\263Rn</\177)=H\375\274\274\256\347|<\237\200\335=\313\027\341;q\000\333<@\336\203\272\355\331\324<w\023\3349\205y\212;|\200S\275\210\347\013\275\320\340z\274I\355\241\274\277\267j=\027\337]\275\rBG=\266\026\000=\334\325\020\274\346#6=\323_\025\275\221\236\017\275\253\272F;\355\317Y=\036\255\025=xg\304\275\3618A=[\366\025=\005\017\212=\333\250Q\274\364\363R=q>u\275\'XV=S\006\233=\031\230-\275\252\033o=*e7=\275\006\245<1h|\274X\343\034;\034\\\033<\024az<JA\246\273U\250\031=\010\210\310\273O\377D\275\315O\277=\246\364\203;\371\035\205\275\272\303==$}\014\274\036\376\235<yz\225=\342\240\266=\252\224\202\274\203\337\'\273\244r\000=\202w\322;\032y\273\273hj\276\275\262\037\036=(t{<z\246\247=\312\270\313:\354\213\260<%\374x\274\277N\000\275>>\376<i\215\320=*\014n<\260\177\001=\261\312:\273\247\223\341\274\366a\244\275\tN/<\\9\272<~)\244\274\271\365)\275.\236\270\275\257\230U\275\342\021\226\273\304\376\231\275`L\316\274\300\263F\273\333\014\033=\235\024\322<\237Z\n=?,|\275\317k\314<\300\355\343\272\375(\307;\n\2179\274^H\242\275\346\004\325\274\226\024\017\274J\033\364\275\264RH\275\233\301\300\273\247\005\237=\301\006R=g\201\311\273D\023\222<\374\241!\274\017<R=g\330\r=\221\231j<\360\372\010\273\215\225w\275\0032{=\337a\224\272\325\231\207<\001\026\3159E\263\324\275\374,\005\275\301$\214\275o\314\034=\225;\036<\366#\251\272_\200\016\274\\\224\271<\310\217\'\275E8Z\273\025\201\216<\226\340\272\272\'\177\035\274\244\256\215;[\322\347\274\3763\221\274%\025-=\031\234\243\272L\253!=\352\r\272\274I\205\211\275\347xL=\021\200\364\274\305I\207\274ZD\023;,&\345\274D\367\365<\357\347\217\274Y\302\260=\364\"\344\273k\341)\275\236\323f\272A\021A\275\254 `\274\0011{=Q\035\320<\300\272d={\250M=iO\024\275$v\263\274\342\246\210\275\247\234\203:1z\037<\\\343\007\276\224\256\204<\304+\237=C\016\217\274\001K,;P\222\312\274\033i\314\274i@\t\2745\207\023\275\035\313\332\275\351\336\t\275\t\210\303\274H\203\231=\023i>\274?Y\327\274b\305\321\275\210P\n\275\347\245\033\275}\255?\275\031\314\273<\326Q\210\275\013\3258;n`j\273\265m\372;A\"\352<%{\210=\253\261\027=\224\372\'\275s\'\024\275\3610\371;{`\243\273\260\3129\275\312\321\371\274%\370\\\275,r\266\274\003\014\203=X\3362\275MM\363\274.\300\245\275C[\204=\327\037@=^2\275<Y\203\025;\211\235\326\273\262$\200<\342\220\226\275\244{C\275\030}\024=+#i\274\346\207z=\304\275\212\275p\355\306\275\023\321?=\216(\213=\203\037\236;33\216\274)x\336=\237\000\367\273x2|;\235\254\306<\360\026.\275n\347\236=\372\304\036=\030/E\274;\200\377<\217\256\004=T=c\275\030\222X\275\331\254\345\274\272!\027=/|y\275\231\013!=\250s\366<\006\007\001\275\376\371\003\2759m\210<\375\037*<\305\361\243\275P\204\260<jl\342\273$,\374\274\234\006\210\275J\361\032\275!\274`=r\276l\275?\3044\275-\331\033=\240\222\n=\346\204#\275):S\275\217\243\270<\203\241\224\275iJ[\273\017QX=(\237\213\274\332\2303=]|\362<\3334\342;\243\022u\274\026\317\225<W\3200=\304R\260<\022\t\340\274\0232\t=\350\276\307<\230(K\275uy\216<=[F=k\322^\275:%|\274\246Ra\275\336\030x=\371\031\355<\237,\365=GH\302\274\227\023<=`\017f\275\323p\325\273`rR=\217p&\275OQ0\275\336S\224\274YS\032\274*\334L\2759\022\242=\023y\257\275]%t<\361\030\r<\302\002\350<\325\342\321\274\022E\263<l\213\030<vs\270\274p#\220=h\321Q<\266L\202\273bc\221\274\355\304\227=\270a\024=\377\204\220<\025\270\212\275\245\210.\275%\340\317\275y\361.=}\301\201\273\275\202\033=\361\363\016\274D\346i=\254\236l\274\205\274\221\273\270\214B\275\350\370\030\275\210\243\375\275j\325\032\275 \364\365\274_\243\021\275!\320R=\365c\221\274;Qa<_\242}\275\022{\354;\266f2\275#\340\212=\360\346\203=+f@=\001\247M=\244m\263<~q\363\274\354m\251\272\251\312C\275\322\343|\274>\330d\275B\037X\274\200\225O=K\350\304=\035\305\374\274\013\336\250=\272\335\004\275\251\236\224\274\013!\367<\254\030\005=l\211\254\274oY}<+\032l;\020\300\220=n\247<\2750\203\023<l\227\032\275}K%\274\3517R\271\022Y\223=7Xg\273\231\377\243;\311V\n\274HxZ\274d\330\253;\341z\303\275/\244\302;a\017\036=\343lL=\365X\263\274}\2107\275\024U\026=\340?\n\275\266\031\231;d\276\372\274\017\312\220:\301\0202<}\330\327<e\035\311=lD\377\274\0178J=-\203\014\273\374 \301=]D\242\275\266\031\273\274h\314\245\274Zrw\275^\002\303\274\025\215j\273\365&\330\275z^\254\274\327\331\251\274w\261\307<\205\301\001<\342\r\254\274\203\315\255\275\340\366C\275\312\235e\275\t\274l\273\347:A<\256\225\321;\000{\026\275E\216E\275\314L\232\274\241~\211<\007\237\211\274\231\037\215\2747\207\301=\263g\206=\034\031\356\274\0139\211\275\307\263 \275*\266\350;\314\322\373<\351\352\215<}\312Y\275Te{\273]\341e=\243\255.\275l&\227<\256\"\321=\031ma\275\343\363u;3\346\251<\020~t\274\352K-=\245\315\270\271\204\326j\275M\252\316\274=J\202<G\371\304\273\002\265\347:\032\312\032=!\037x\275qs\301\274+5\337\274\234\270\014<\003\262e=\231\277a\275SYM\275\335\322\323\274us\257=4\241e\275\214g\341\273W\346@\275\337\2727\275\225\371 < \356\031\275\240\316D< Y\303<\313\201\206\275tKb=\274\237 <z\265\277=\353\247}=\271\013e=\026\243\037=\363\220\322\275x\253\250=O\n\014\276\217\274\267<\270j\377;\321a\267\274\'4d\274\331\253.\273\3428@\274y|\314\273<\277\304\274\\\261O=\225\273\200\275\337\356\013\275I\202$:\277\271\020<\257 \215\275j\255y<{\264\006=\\\024\366\2755\002\037\275\206\236\035\275\n\to\275\2135h<\316\354!\275\026E\317<\3645x<\302\207m;\021\271\226\275\001\317\372\273yd\003=M\"\231<\205\013{\275\256\034.\275\305\000\371;\320\3330\275\270\266\027\2750\320\013=\035\200\"=\t\313F=\006\204\033\274\002\251\256\272e\264\244\274y\204v\274\373\212\313\274S\177\177\275\332\371\022\275\364\241@=\004\232\337<9y\311<\357\331\253\275\237q]=\231\361\037:\027\267\334\275\037qW\273RA\216<\007\331\021=\236\026M=\022\r\277\274=5\353\273\253\241\352\274\367\355\323;\033\227Y\275\217s@=\310+\033\275\342\026\211\275v\236\230<\324\212\026=\307n\260<r\201h\273\'\260\372\275>(|<\204c\237;p\324\300\274\310\2519<\256\245\031\275\2402\317\2755\372m<r\000v\275\350\021\364:\314\231\354=\355,s\274\303\276\343<;-\017\2754,V\274\344\336H\274,\307m<5\342\270\271\206\222\221=A\300\230\274\203\241\204\274\35411=h\304\252\274\261{R=;\316>=\010lo=[\020\010\275R\205\352<\374\274\246\273\260\000`\274\233\351\204<\375\177O\275\367\223\007=\355\010\260=\'F6\275\376\003\230\274\342{K\275\236\236\216\275(\356\223\2753\265\203\274\343CC\275*QC\275\203\353\236\275kk3\274\203\031\177=en\017:\211B;\274\003kN\275V\307\331;\0262\247=l}F=\3729\017\274\260&\333\272\301\315\204=\350|\264\274\351)\232\274\000*G\275\r\354\317\270\014\226\237\274[\253d<\200\035@:`\316\361:\247\325\220;\272\262y\275\230TB=c\234\276=\022\024\260\274\256\025\246=\316\013\021\275,\373\367<c\345E\275A\013D\273h\277\204\274Nr\225\275\236\000\"\275\252\000\233\274<%E;\0328\223\275\232\231\237\274[\364\274\275ip\210;q4\"\274I\241\256<\225\257A<5S\002\275\230`\264\274\212\322\236\275\327\211\271\274\013\375\022\274\354\373\266<\274<+<P\204q\275\035]\376<=Lp\2755tj\275\377i\345\274\202\211\230\274\334\241%\275\267\360\014\275\231\0357=N&\240<\334\211\217;C\257\340\274\330R\211<\202\277\346<\262\276\364\2741)\235\274\277:\202;\240 B<\307\207)\274e\307\351;[\3351\275\344\306t=+\033\035\275\235R\201\274\'\272o\275\016\250\236\275tu]<\003#\020\275\354$T<\240\375C=^\332\277\274\341p?\275\037\343\310<5\322\365\275My\216\274\036\374\353\272OEr\275O\307\331<\263c\245\275Q3Z\275\233PQ<\372z\244\274\327)==\224\035\036\275\350W\206\275\275\265\237=\376\351k\275\366Iv=\241]+\271\037\035>=\020\223\025\2756\217\376\274\215\321\276\274H,\032\274\277\020@<\325\257&=\374i\342;\332Af=\306\276\220=lR<=\'\234\205\275\n/\245=G\315\212<\013c\200\275\276\244\225\274\364\245\027\275\212\254\233<\031?\033=\265\335W\273y\017B\275v\371\312\274S\307\346=g\355\210=\342\234\341\274\371\243\270\275\000^D=\332\207m<\3063\'\275\214\002a=g\020\003<$\335\014=\352\322\334\274`tc=\233\247\224=\236\315\3029\001u\273\272O\005N\275\030\031r=\236V(=f6\262<\350\256O\275]\001E\272\341\274\240\275u\345\221=\243\022\220=\032\036\2339N\256\265\274g\347|\2758\215\345;e\202\005\275\'1\354\274d\303\373;a\364E=]\307\026\275z%\027\275T\323\365;2?\262<\035\330\024\275\275\343\354\274Yj\016\275_d\r=\331\032\337\2749T\247:V\324H\275;\227\352<\036xW=r\321\205\273\2065D<\301\257\200\275\271\260J\273\234\210\206\274\3406\317;\241\270\300\275b\226\314=\315P\247<\274,=\274O>\026=\241q\316\274)\\k<\333\330m\275\225\0345\274\013\354\323;\233\233\003=\203\274\267\274q\252i\274\377q \275|\247f<\206M&=\006\265\311\274\376W\232<\3455\214\275\353\310\256<\216\324\210\274\275\223n<\314\367\206\274\007\347T\275\033\030\275\275\004\'n<8\206\030<h\330{\275S\226\261<\265\346\373\274W\345\t<\020VR<\'&\324<\342k/\274\314\007\272\273\230\337M<\035\225\270=\216\334\376\274\002\302\203<\340\0320\275\256=X\2744g!=\n\256\303=\331\316\314\275\317F.\275$\272\221\274\304#\317\274z\316\232=\207\r9=\265\322\260:\366\203 \274\260xB\275i}\201\273[\243\024\275\342\322}\275\366\216\340<\'\376\206\274\3412_\275\017\246\325;\231\2305\274p\200\313<\237\365<\274\017\231\303<A\254/<oF\211\274@\265\261=\337\014\236\275\313\371\025= /\355\274\214\361\025\275\273\220y\274[p\337\273\311\234\234\274\032/\2279\255\337U<\014\367O=\217-\255\273K\374\033\275\210\006\317\274f\"\230<\313\256\352<-\207\255\275\274\264V<\223gl;1\215\023=\203\010\221\275\352\243\261<&w\005<\273?\003\275>\311\361<6\200\020<\375\032\335<\321\017\216=n\277\000<V\302\006<c.\005\274#\255\023=\177O\300\275\250M\251\275-\203\236=\320\235<\275\372\243\021=\274\342?=\217\316\332\272\337\203\250<\303\030K\274\321\221\343\274\337v\031\275\320\310\037\274\224\221\254<\241\324\025>\256\334(=U~\370\2742v\251\275\377\335\311\272\212\3315\275\320\004\030=i;\377\274BQ\'=\313\301\261\274*\260\004\275\335\\\371:\312Z\230=\361\255\014=\353!\234=\177?=;7\213K<\263\335a<gFq\275\314\037\371<{\351+<\310\224\014\275 \277\203<\206i\341<\031o\335\274\354\203\373\273f\021\347<\342\213\225\274U\331\013=\260\275\245\274om\217=4\346\210\2743\034\000\274\373\263\363\275\200\270\211\275\001\361\021\274\251\367\221<\207<\016\2753\362H\2741  \275)9\266=f\231>\274O\003i\275`\200\201\275a\206K\274\356=\r<\247\203\033\275\331\330u=\215\310\216\275qD\310\275d2\037=x\014\221\2732\202\262=~\rH\275\346\361\201\275\236kq\275\341\202\016=\2015\224\275\233\3712=\374}\263\275\006\335\005\274n\231\350= ^\266\274\002\200\025\276\023\345\344\273\006\333\330; P\n\274$(\014\275\370\210\304\2731\372C\275-\003\212<\322\203\235\273;\230\277\275\023\370\026\275\216\036\352\273\235@\252\274\360\330\337\274\317\017\025\275[\363j\275\035\035\204\275\372\014\013\276Q7\212<_\344\233\273\377\322(=<,\374\2733\'\230\274\202\032\316<\374\306\240\275\002\345\'\275\347N\262<\206\217\267\274\236\264s<\325\373\031=t\300\214;\336\202\007\275\360\240A<\365\340\226\274\252.0<\235\323\234<\261{\245\273Z\013\355<\351\270I<\016\320]=;8\301=\264O\343<X\240M=\377\374\216<\270\004\212={\214K\274P\227\031=k\341.\2743hN\2743{\370\273-^(\275|\002\033\2757\373\037\274\351(\247<~\343\265\275\r\205\264\273/\216\321\274\026\264\224\273\240\210\246\275\203(\361\275E\013\231=1\025\205\273\200U\251\275\263\322\005=P)\"\275\232\253\202\273K\324d=W\263\032\275.\362\341=\010\234\365<\376+\225=\360\315\'=-}Z<)\366e<2\001\257\274Q\324\034<\241\376\336<\361]\253\274\006\031\t=\306\2078\275\327>\017\275\372U\016=r\212\223;\r\315c=ak\326\273s\327_=\210&N\275\007n\314=2\003\362\272A\3051=\364\301\302\275\246\177\"\275\243n\331<@uD\274WZ\251\273\306J\220\2741\347\271\274\374\377\210\275\016AP=\267\314C=\300q\214\274p\271\234\274\321\326\313\274]\207\345\274\327\363\'=E\356\301=\356\211\264=\n=\352\274W\237|\275\235\2657=\316\234\261=\025\306t<\352\242\027<\241\236\266;\3661\272<\204h\225<\002\211(\275\007mR<1D\212<Y\350\363;\372U\005\274\232\016\315<\214\007\211;\205\037\247\274\310\315\224\275$\001\211<\324\343\267\274U\030\014=\337B\'\275\371!\240\274\247\t.\275\242\201\017\274\300\311\360<^\375\215<Y\234\006=g\010\013;Ai\335\274\374\330!\275rj5=\365C\246=\213x\276=\234\257Y\272\205U\277<\220\311\335\2743\205\207<+n\027\275\242&[=\031\014\370;\0347\033\275\211\331\276\273\361\034\003\276?\351\333\2736\250\316\2741\337\376\274\245(;\274\016\347\010\275\010\256\022=\234c\327<[\250c<\355yY\274j\224\201=\251j\253<\003\311\207<y\016\227\275\361#\235\275\376U\244\274\256\352\214=q\347\266=\222~5<\316\320\220\275\244=\224\2728\023\"\274\023\036\342<\223\214\007\275\005\217\271<\177\373\211\275\345\314&=\017\030\213\274-`t\274B\343\242\274\006\263\217\275\021\240\023\273\3642\275\274\317\254\330\274x\2327\275\260\255 \274\r\342\366\274\335t\005\275\267\275\204;z\357\374=<\221?;\350\327g\274\013\357_\275\237\032\375\274~A\231\274\351)\007\275\214\315\241<\334\035F\275\335\215\010=\241\007C=I\251\202\275\362B\177=W\005\257\274\227\313\303<\022\341q={2p\275\232\276\005<VG\2548\217Zo=\007\273\210=(\347\231\274T[\230=\034n\005\275\365\324(\274H^\212;\255\251L<(\276`\275\327\365\353:`\322\222\275\376\'$\273E\227J=\241\"\211=\307\201\177\275\304,6;Y\255:\275\255\016/=\2154\236<\227\031\244\274y\032f=\350\340I\275\367\360\233<\2436\370\273\377\274\034<\366\013!=v2\262\274\330\372_<\007\250\215=a\242\225<\264\217\214<\211\213!\275Z-\201\274\320\321-=\326YU\275\327%\252<1\0352\275\332\036\272=>5\036=\317\353\200=\216\360\202\274\333\375M\275C\'\235\275C\177\021\275\222\3250\275\364\t\\=%\212\263\272\003\276\224<|l\235\275\217\375v<q\242\310\274\0075\003=\024\345\250\274h\306.\275\304\342]<\215\235\n\275\340a\221\274\336\034\236\275\341\274\225=\004#\337\273mp\212=\035\006(\274\306\247\377<\324oY\275\317p\332<E\315\215<$I\020\274\307\254B\275{\326\'=q,\304<(\274\216\275B6\203\275\222\215\347:k\335\037\274\356\356\354\274\340J@<\003}\300<c\003\360\274T\204\271\274J\333\217=\227xj\274\022^\016\275\256(^=\204\375\215\274j\212%=`\344h=\013y\206\2750\335@< k\007\275\211x\215\275\357_4=Rn\262\274\\c+\275\033t\235\274\377B\332=\177\340\016<\2112\224=\277\3217\275\216\225\027=\314\362\310<\365l\014=\303\021\270\274\024(\314<O\033\217\274\002>\266\274\224\276\347<}\345\302\274\222J\005\275\272G\030=/\030\264\272wU0;\034\000 \275g\376\223\275\364\316\226\275-\022\023\274\350Y%<o\307\201;\305?E\274\215?H\274\333\3459=zwW\274\247\341\322\275\025(\031;\2000\331;\312\276\001\275\367\267\007\274\310\203B=\247\332\324\274\2713\027=\002\004J=*u\202\274\266\250\370\274\017K)\275\260\330\276\275\'|`=-oo\274\003JH=p#\310\274\373\237\032\275i\273\013\274\324\361\311\274\242\016\303\274-\355\n\275(\325O\275\302w\353<\267=9\275\272\310u\275\302\342\342<\'\201\302<\021{\006\275\376\234z<\003e\t\275\211\351[\273n\322Z=\206Ko:+4\244<<\376@\274Y\207\317\274k\267\203\274f\327b\275z\305C\275\324\333\372\275\367F\261\2748Z\337\274\333\2178\275\240\372<=5\237_;\363\365W<\307\200\210=\243\004?=\360gJ;/\004\252=<S\302\273}\036\001=\2630K\274\251\240\203\275hR\367\274x\262\'\275\326\376\310\275\035\372\217\274\2609\261<@\341\217<L\331\240<S\002\024<d\243M<\301\240\212\275\223\304\316:\237\027\017\274v\261\350<2T[=\026`\002=\272\220\\\275H\tn<2S\355\274R\231\"\275L\3558=Q\005\275\274\264c\310\272h\325\302<c\335\262<\303\261e<\262\333\237\275\360\255\005\2757\2259\275\260\007\212=\254?\251<\367\335\361<\023\323\246\274zIf\275\320\247\350\274\300`$\275\237\\V=\025\031\316<\242(\260\274\244a,=\007\245\356<\236\374\'\275\3640\375\273\301\236*=\to\2419s\302\357\273V\001\246\274\024\333\367<a&\354<\00722\274+\r\315\274[\340\245\275\024\277\332\274\020B\255\274\336\344`\275\036Zo\274\255\'\"\275\362\310v=\237\320\255\275J2j<o40;F\341h\274+\200r<i\341\010\274\022J\252=\333\222\256\274\254\324G<$\352\277\274\'\234\344;\034\242\007=\262\023K\275\033P_=\243X\000\275W\017;;>\001A;M\035\357\275\211\"\251<\303\225\222<\343\321\272\274l\260i=\375\260]=\211_\220=xL\371\274\343]4<\3639\343\274\005\0006<\332\017\031=<\t\226\274t\364\205\274\262\377\335=\036\007\264<R\321_=\316\024\r\275\336\203b\275\255.M<\235\302H\274\010\023\351<\310w\357;~[\371<[\232\\=\351\031@\275\327\204B\275JV6=wR\222<\331q\374;\241\002\202\273\004!\255;\277g\254\273\013\245\201\275\200i\324\275u3\216\272eh\340<\023\370\234=\221\330\220\274qs\031\275\r<\242\275\326\311\207\274\034\367\275<j\253\354\273\206\336\305\275\235n\025=\326\214\251\274\210z\270\275/S\260\274\223(_<\304\006\022\275\235\362\370</\370\200=\303\227\203=\203>\027=\033#\333<\233g\360\274\253\325\314:\375\033\022=!\257\314;\347T\237\274\224|\005\275\331a\321<g\2337=\343y\274\274>\225\265\275F\275\251<\023\201[<\233\017M\271:^^<eG\277\274\275\223\255\275\305\332\036=\323\225l=E\331S\275 \n\235\2749\277m<\234\304\331<@\360\332:#\376o\275\250\261\335\275\010\236V=J/\255\275\377z\227<\204r\354<\314\343\343<\230T\014<\277\215l\274iL\010<\212\324\214<}\374X\275@o)\275fF\035=\230wd=^!c<e9\333<\206\005\207\275\036?\n\275\366\276U\275;\304\001=\037\304\201<\232\305\233=\204\362[\275Iu\207=\017\017\337<&3/=jO\004\276\200\3124\275L\317\003<=c^\275s\024\331<\334^\220=z\326\212=|\264\206=\010D\351\273\030T\375<\252\372Z\275\247\340\023\275%\226\372;\354\230T\275\00738\275N\335U\274\263 P\275R\231\265;\026<K=I6%=,\005\026\275_11=\262\320{\275<\321\336<]\021\226\274s\301-<\202\235(=~\037\265;\202v\352\274\212\233y=\332\330\306\272\275\331\204:\310\226\003=\327\245a\275d\355\001\273\343G\303\274\037\235H=|f_\275\250\240\335\2745\207P<.\266V\275]G\224\274}\351g=~O\n<\247~F\275\273\2538\274\235\206\206\274~!m\275+\200\306\274\365\001\221<u\275x\273\223]\024\275\363E\'<#\226\357<\235\260\307<\027fZ=v\227_\274m\225\225\275\231\243\223<\336\0147=\347(\370:L\001>=!1C\274\300N\221\2751\223\t>\016]x\275\230o\216\274G0\212\274,\241\014\274(\357\240<{\225_\274\275\243\366\274\020\001\345<\340]\364\274\3704\343\274\031/\351<\356\273/<\314\211{\274\320\027O\2750x\304\274\207\204\265\274\372\307\354\274QL-\273\2437\275\275\332\232\333\274\310D\001\275\202\265\026\275\000R\264\274\360\351\026<\266<\227\274}\027\034\273)j\246<A[P\275\234\362\373<\213\326\216<Z \223:k\244D<\360\242\\\274\346\371\203<\300[\266=8r\231\275\265\301u=O\223\326\273J\313\335;\256M\205\274WT\357\274M\245\203\274\007\352&\2759\310\244\274\224\002\247=Mf\216;\200K\326\275\304\224|<%\340Z\274]-\204<\'\206,<,QT=\323\351\370:\020\254,\275\215\177;;`\303\340<\311 \233=^\004\235\273\317\345\010=\3664\215\273\021\204\212\275\352F\003<U\276\217\2743y\230=LK\241<\360\327\361<\022)^\273\000\"\203<\252>5=\220&\230\273`<\202\275s\002\200\274B\275\275<\r\035\021>J\\a\275\235\327\t\275\315z!\275\t\342\035\2740\345\376\274+!\356<\206\321#=\336\261R=1.\332<\251\235:\274\037?\202;9\245\272\274\327\'\037\275\036\016\233\2752+\024=\010]\243=\203\205\243=9\341\244\274\026\t\347\274\332*\322<E\010\274;\311T\277<\025\354\032<\312\3566\275\270j =\033\250\205=\367,<<P\221e<R\007\177\274N\254\246<\355}\234=l\310{\2754c\3419\021\334\323\273\327\210Y\271\305v\271<BLP=h| \275\220\302?;%$\334\275{2=\275\347\362\034=k `\275\007\0301\275\227\272\222\274\371\'\232=(\014\353\274\211\273[\2746\364F\274\221\035\205\275Z&T\274\021d\314\274]\250`\2748\345\254\275\211\245\265\275\366I0\275i0\032\275\315\205<=`\203Z\275\272`i\275=\2111\275\211\205\337<6\361\237\274\254\270\313\275\3125\260\275h)\223\274\347\004b=[\265\253=\220\371<\275\363\272e=\253\242a<\256KB;Yo\016\275\357\321\360\273\'\215\202={_\235;\235\366\032=OJ\022\275\323\213l=\230\2074\275n~\255=\360\337b\274\307b}\275L\242^\275OJT\275|$\021\2759\315U\274\321co\273K\017Y=\206\231\202=c\177W;\2470h\273\221\226H=\213\034\227<\262\372\213=\024\231\205=\276\t\020\273\362^\357<\'\272\264\274\010W\215\275\210\304\345\273\227\037\014=\261\013\317=tL\231<\265H\033\274\347\275\035\275\277\372\033\274T?\221=\341\204-=}\210\021\275\362\220$=\3405\202\275\362f\003=w\266\372\274v\213\205\274\233T\257<\327\241\177<\304\305\225\274\366\344\212\275u\317\222;\n\331\020=Z\204c\274\276\013\211=\227\240\253\275M;\244\275qQ6=d\310\033;\374\201\237\274\366\241\017<\231\001?\275%\321S\274z\2036\274\016f\320\275Q\241:\275\357)\335\274e\034\367\274op\r\273\344\373G=-\355\230\273\245\216U=\031\217z=\217\353\212;\013J@<\006\0015<\330u\035\275\233%3;\tKi=\220%\033=\212m\030\275\353\256\212\275.[\241<s|\350<\023G\225= \307\275<(wF\275\347\372\022\274\275\031y\2751<=\275\234\217\031\274\226\300\016:\322\"\221=H\027\027=>:[\274^s\270={}\371;\246\223*=l\321P<\366\232\213=\366\254\330:\032\255\237;(\341\311\274\342#.\275i\354\004=S\276\n\275Y\037C\275\375\031\230\273[N\211;\374v\264:]\334\262<\245\316#\274\'|9=\203E\271\274\275GS:K\016\244=\217\022\216<\036[\231\275_(I<\266\340U\275\307~\366<\036\"\021\275\253\271(\274\247 \241\275\310k\223<\324\343\010<d\3346\275\376\3701\275\265\316\016\275\245\365\000\275\265\017~\274\221)~\275]\366\313\274l\370a\273\227W\004=\312\356_=\216.\335\274X\203e\275\212e.=9-\227<H\203$\275x\201y=\312-\214<\377\205\203;2\t\322\275S\'\257\275\231\224\360\273\217r_\275\237\232\223\274b\260\003<.\007Y\2753\344\220=\366r\007;[M\251=y\215\337\274(\257\255<\222\327j=Ur\210\274>1>=\322\211r=\321\360z\274*6\221\275Ln\247<\351KZ\275\267s\\=<\311\201\275\373\347\207=\230\234\335\2746]\212\274\313\344e\275\246\262\244\275\r\365\221:\232c\245=\345\232\273=\347\023\206;\005e&\275\240\323P\275b\217\371\274X\376\306\274\320+\255\275\024\'\317<9\3216\275\r\346B=\277w\014\275\303n\244\274\313\027\303\274;\032%=\277y\207\275Y{\207\275l|\220\275L\341y\274[\324\202\275\203\030\320\274\227l\214=\003Eg<\210\367\223=3l\023\274\217\300%\275\005\271\202\273g.\010\272N\025\373\273%JO=\362\251\276\275\202<|\275\024\323\004=\356\3718\274\377\3512\274\000\350\317;&M\223=\030l\372\274\356\344\t\274)!\020=\306\035E\275\261\014\254<C\032\233\273Qw\332\274t\337\264\275\313\344\314\274\035\244\277;]5D\275\263&\205=/|\301<\262Z\330\274v91\275\227!\351\274$\250\037\274)o\234=j\231\240\274{s\035=`\272\352<\305\262\343<\255\307\366;Q\345\252<\213|9=\231\t\215=}\252B;i\253\220\275\306<\351\274\021\265\202\274\003n<=\022\303\246;a\332\254<\215-u<\327\352\003\275\264\222\272\2734\342&<\025\267\001=6\023\203\274~\002\035\275\021C\217\275\367\0147\275\267g\230\274G\n0=\237Ok8\201\203\333\273do\355<\034C\t\275\271mM;\034\272\377; C\225\275k\244\001\275\316\307\351\2746)\212<6\262A\275\005\346\213<\227~\223=<\277\200<\"\024|\274#\312\222\275[\267*\275t\367g<\3734\214\274o\342H\275W\177\305\274\212\353\332\274\202\273\204;\223%C<\232\023\200\275\302\321\001<V>\302<\262HC=\005\316\346<\260\366h=\004/v=\361\374\246\275Z\325\202=\320\014\002\275\327t\367\274\270\327\364<pS\224\275\227\306\301=\021\031\377=\364\276\000\275\024%\255=\221>\224:\2308@\275\212\024\375\273\031\221\311\274y\314\230\273\027\3270<\010AC\274\264L\206<\2428w\274\271\242\021=K[A=\213\347\177<wd\323;\254\264\264\275,O\312\272\252\r=\274]\255W\275\332J,<\032*\373\274\373u\342\273o[\025\275\032\253\342<\251l\247\273\260H-\275\371\351\305\2743\355\262\275\251*\272=\020\203\325=\024.==\315o\336;yv\200\274\354o\"=\004\037\234\273\240\n\014\274\017\250\230=\245/\027\275\372_g=\265\236{\274\370\351\376<\372\013\301<\2530a\271\335\024Z\275\265\016\237<O\205\224<n0`=\004\345\024\275\251$\322\2745k)\275\262\323\332\275pL\200\274\'\003X\275\0345\323<[\352\325;\366\271\271=\200\3425=\032\355R\274\260\207\002<\332\357\t\274X\005}<\267N\255<\321M\205\275n\227\236\275\354z\317<E\261\013\274\\\177\024\273\321\005\335\274Dn\304=\n\237\335<\270\022\255\274\266\236\256\274\212g>\274\350\000\337;>7y=\222\005\256\275\031(\312=\256\326\251\273\005\2071=[\'D=LP\205\275,\335\033\275\374\245\202<d\247\030<\017\3412\275\2523\257\272\224\327\223\275\352\302]\275\262\351\202;\203\336\353<J\300\221\274pX\230\273\034\370^\275q@\026:\374\027\030\275\021-\316<\006\302\220=\244\317\322<\020\356\341\274/\025\365\274&\354\006\274#K\177\275\313[\000>s(\302<\204|(\274\311\367\250<$\177\221\275\032\020\031;R\204\250\273\263nF=sGx\275\324\026c=\033\030\217\275Fv\376\274~,\364<\262\0055\273\377\206\231\274\354\325\234=>\333\216;\245X\202=\234\365\263<\226\2032<\025\224g<\221\355\212=\206%\035\274/.\210\275\216\274g\274;\034\256=\237\341\030=f\037)\275=\221\211:\325\034O=h\342\231\274h\265e\273\227\274\244;\321V\200\275\324[\376;5\326\001\275W z\274l2w=H\003\223\274\324w\251=~u\213;\332\032\253<J&\013<B\3241\273\375@q=\016Z\025\275\017,\206=s\244l=\375,\017:u\212\271\272\032\314\211=\0259\210<\024\305I=\273\025r\271Yf\247\275\267\331\215:\343\263\212\274s\370\230\272\010\264d\275\023e\261=\222\344\347\274$\345(;\265\030\234<\t\262n<\224\233\003\275\347\335v=\2617l<\267\262\332<\031\365~\273\200\037\244=\004/\237=\266\205\370;\020\361~\274@\336\250<MU\023=UhG=\252\306)\274\212\204F\274\340\210\252=d\001?\275\213\307Q<\246\307d\275[(\304<x\261\014\273\226\352\327\2754\010Y\274rx\347\274\246N\214\2748\216\221\275\334\217\260=\271\221@\274\324\260\304<B\332\261<\277\332\202<\277\0032\2740\202\002=\000\340\033<+9?\275\254\220:\274\236\363><&\212\201\275\210\006\214\275~\032\327;\275>A\275\317\304,\274\272\246J=\214~\024=\t\232\226\273\304\363K<\346\371\017=\002l\013\273\226\352_\275s\221:\275d\324x\274`\204c\274\000\245\246\274\345\235W\275o\244\335;\256\377\257=>\370\363<\247\256\r\274\r\"v\274U\206\365<pS\035\274\211*\031\272\351\313\237=\316\265\245;\037\036\352=\253n}=0?e\275\223\352\220\274\322\003\321\274\246\311\377<\020\336\271\274\022\312\325<fy\020<_V\335=c\215t\275\351J\377\273j1\274=5P~\275\375\214>=B\006\224\2758\275c\275>\035\333\274\346L\313\2747\'\236\275\262\260S=\255\276\371\274ju\376;\212\371\025\275\375\023\237<\203\377\371\273a\265\374:\343\334%=\357\035\234;!\200\202<fg\032;/>H;uV\220:\323\335\325<O\246[\274c\344?\274\'\352\202<\234\235\214<Nc\230\274\241#T\273\345\270z\273\262D;\275\322=\232<u\0276\275A\367\002\2756\317\256=\177\213\233<o\305W\273!m\201<=\326\005\274\232S\224\275ki\030\275\342\177\'<;\217\362\273gd%\275\351\225\226\275\374nA\275)\223Y=E{\330\274\320R\273\274xV\312<y\227\220\267\333\306Y<5\211%\275\t\370T\274\376\201\033\274 @\032\274\n\253V=\3032E<\346\332L<\317\177\263<J\2004\274gS \2754\216J=(\230\203\275\035\362d\274\335\310t\2758\221\234\274R\022\364<\203\363\366;+s\n\275\255cP<\311/\210=?\231\244=!\273\r\275>q\243<[\034C\275\330\033\326<}N\273\2757\225K=\257\205\243\274\275gw<\250\363\225=/\270!<TU\366\274D\324\215\274H\030\266\272\262<\207\275\017\370\250\274b\247\302\273\263\032\321\274\223\2303=c]?\274\"\226\215<$\247;=I\010\013\275m\370\314\275\202\316\207<f\214\270\275+\334\031\275I\357\271\274\244W\034\274ly\004>4h\244\274\276\031H\275\212\265i\274\025\356x\2739\177\330\274!\254\342\274\325\236\212\275kA\256\275=\211\252\273V{\001=,\221h<\353\222\351\274\363\306\243\274\335h\270;@\255\212\274i\331\333<DT\013\275-\202\240=\204\300&=\224\277\260\2756\324\306\273:\3245=07q\274J\257S=\025Q\272=A\306\242<K\240\2154\351p\265=V\2074\275\3534\345<\245\207\001\275\235\2274\275?C\304\274P\"\215\275\221\200\215\275\237\245~=\001\364\300;\340P\332<\213\226@=\310\036\221\275\305a\"\275Qk\243<&\334\022:\203\026\023\275Fe\242=B\244\031=\025\2559<\305\030+\275\265G\001\273\211}:\2759M\206<3m\205\275\216\272\363\274<\267\036=\021B\206=C\034O=R\305\026>\321j<\275\351\351\302<_I\233<\234\301\220<\313)\372\270\031\253\232=N\241O<V\245\'\275*\364\276=\016\321\324\274 Id\275\367\314x=q;V\275\316!\014\275\247\265\225\275c \304;\354\335\305<\313\372\265<\361\311\202\274\341\327\207=3R\346<~\354\314\272\230fe\273\332A\024<;y{\275\321\366[=\236\000\233=\223R$\275\220p|<\221\344\370<\261\237\313\274D\320\354\274\203\343\350\274\325\377\202\275\325H\245\275\260t\004\275\354\361\303\2758^g\275\365C\275=\251\024\354\274o\343\020\275\220\341\257\273\266li\275\360\321R\2730\022W=V\221\"=\000q\262\274R\216\014\275\300.\035\275Y\344\242=\005\370\205=RRD\275\016;\371\274\027J\217\275d\247F\275\363\310\213\274\225\314W\275\275PI\275\372\212\256\2753\227\030\275%1T;\017\003N\274\026\336\236<\347\315\250<\374u\364:\2528\214</\322[<\2036H\274\032X*<\021\377\025=\234OB<w\260\376<%\322&\275\013\374\026=\t8\304\275Zk\213<\371\310\356\2748\247\005=\354\272\000=\315`\241<\255\263\217\274\351x\225=6\235;\275\334\016\263=\017t\311<\354MP=\266\243\021=\231\363\276\274c\244_:b%\241<\026%]\273\225\277\025=\337\354\304\274\357\372\252\274->\211\274X7\021;X\252r;\322u!=p\020\025\275\333\340R=\300\245!=\315\272\244=\0363\265<\311\340\230\275\276\351\001=7z\025=\340\313\365<\001\207\316\274\004\024\222\273v\210\004>?\243\242<\236?X=\262PJ\275H\275y\275\364$p<\374\221P=\313\340\215=\264\003\"\275c\271\257\274loh\274\231\'o=*\241\005=8\327\303\273\273\371\323<\272\361\205\275\355y<\275\200;\212\274\304\242\246<\017\017\267\274h\326~=l6-\274, \325\274R\027\205<\014t\210<W:\303<Y\306\005=\t&\224\274G\214\243=J\302\212<\267\2139=\342\231]=C\211b<?j7\275\260N\260\275\000 \362\274K\036\n<\244\302\263<V\205\037\274@<\223\274\375\264\361\273\213\330\232;\024\255\323<%qS=1\'\242\274\342\266\177\274\323\226\017=\217\030\357\274\377r\367\2736\271L\275\357\341.=\037m\263\274\'\360\267\274\334\352\356\274X?&\275$cx\274Z[\205=\037\321\223\275\366\033\323\274\000\337\240\274\200\362\357\274\2545\367<\273wN<\371\250R=I8)\2751\212\240\274}5J=\036?\263\273\261GM=\213\257\272<:6\233\273\007\033\265\2731\031@\2752o)\274hS_\274\220|#\273\241XM\275\2120\276\271dG\236\274\370F\010\275s\234~<\335S_\274`\243\363\274nU\371\273E\234\016\273\020[\214\275\177\036:;\027\257\315\2748u\230=\363\366\205=+X\265\274\222\353=\273\235t7=\266\213\376\2740\275\177<#*\263<\367\376\201=\217|\351;%$\032\275^\301\311=\300\316\313=\244\r\343\273\030z}<k_\231;\336\025L=x\246\024\275\310>\321;\361\t\206\274\221\t\321<C\331;\275\245\2140\275\355\210\202;\001*r\274\2765-\275\242\242\343<\372\002\270<\241T\272\275k\314\237=p\372\257\275\250\270S=\2325\216\275\354\300#\273\217\353\227<c\243%=\200\345h<\357\373Q\274Xg+\274iy\210=G\227\241\274\006\360\350;6\356C=\276\"\300=\247b\224\274\020\301\202\275\336\346/<B\222\250<2oQ\275\201\342\003=\354!\234<\373E\241=\357\350@\275\3629\236\275\"t\231=\367I,<\210[\230\274f4\r\275\227\271\301\274K\351\361\274\026{\221\274\275R\035=\276\276\313\272\220\303)\275\300\311N\275\tl\"\275\016\247 <\035<\310\273\310\030\214=\317\356\225=\266\313\215<R\3140\274\276\005\271\274\223\240\207\275\361\236\247<bYV\275\316\001{<1$\205\272Gq5=No\036=\304\367\236\273\313\222:=\350\366\034=\263\236\022=\2555\240\274\\0C=\361\341\034=\331\215\224\275\rr\206=\324\007\225\272Z\273\334\274\320\222a\275\004\3026=3\320\005\273\332\245\272\275-q\275<\331\253n\275v\376\223<b\032\025<\250\374\235=}\3531\275\327\226 <]\376\217\274k\263\256\274p\302\266\274\272%\341\274\367\2661<1\237\371\274h\272p\274-\335\'<\312^_=B\372\033\275cl\035\275\322\243\014=:\244\301\274q\035\310\275\273\263\001<\327t\253\275\207\376h<1=C\275^t\307=\206\235\325\273R\200\204<[\252\243<\303\016\271<\342A\355\274\262\261@\275F\365*=_\230M\273\267\2044\275h^\272\274\217\021\305\275p\351\257\275TD\322\275\177\372f\275\251\305&<\334|\256;\023>\2479\270\234a\274\350;?=>\252\222<>\204>=\214/Q;\315k\326\274\362[\342;\316\026\271\275\202\273d=\276\236\223=\351\361\247=e\273\207<\2269\303:q\200\244=\333K+\275\020#\231\274\2739&\274\324\236\024=o\026A=\217`\311=\215\302\312<\364aw=\003\014r\273@B1\274\212M\317<o U\274\311\246\214=\235\255\";^\252\"\275\013\215\031=\333o\010\275\"\367\223<\032\232\014=c%\246<\321b\305\274\211\340\311<\231\006\265\274.\253\371\273\336\234\005>x+@;\034Y\033\275\313\335\306\274\000B\370\274\256\036\207\273\364\204r\274\036O5\274\230\036\327=f\312\037\275\237\016\350\275}\3022\275V\363\223\274n\027`=\332^\252\275\033\245\226\275-\n\003\275\335\337\307;\261\001F\275\377m\177\275z\272\210\275\344\222/\275\304\237\245<\372x\236\275\375\340\321\273\315\221/=\014\373\033\275\213)\264<G\016\002=\277\260\004\274\364F,=\203\0219\275\256g\027\275\341d\255=2\367\265<lE\255\274I\212\375\274\021BX=\013O\234=\273Q\004=>\335\212\275:\304\021<\336\020\316\274\254\275\336\274\0262\031:s\023`\275\333|T\275\2222$=\200\230\'\275\367s\336:so\260<\271\037\217\275\305\037p\275Yd+=RpI<\326\035\273\274\265\243\254\275\2222\221<\036\202\215\275V\255\373<\316\275\223\274\360}\013\275t\322\312\273\213\361\000\274\021`\r\275Q\376\004\2752\237^=z\346<;\360\035\232\275P8\214=\335\001g\2757\034\t=\2617\346\273\300rd=\233\210:\275\270k\n\275g\3708=~\267\222=\210Uj\274\025\020N\275\342<z\273\372\323\261<\276\300\257=\001\366i\274\240E\t<f@Z<\2762r\272)\333\220=\270\267\256\275((\034=W\226s\275\370(\311<,\021`\275\010\032\276\274x6\342\272\303\337\234\275A\374\342;\264D\322\274\227aC<\303A\264\274\247\031\020=\032\204\034=\273ab=r\216U\275\275R\006\274\363a#\274\265\261\n\275\326^\003\275{H\221\273\234m1<C\036\021=|\331s=\272\264%\272+\372T\274\223\250\325\274\177\205\270\274\r\317\232\274\345\342\016\275\333\377w=\207l!=\367W\304;\t\357\331=-l\205\275\347\240K=F\363\014\275?x\371;\350F\010=\266\241\332<\231\353\376<\2363\021\275\204\327\240\272&\344\217\275\311Qz=+\373\360=?OV\274\241\272\362\274\235\315\235=\206\236O=\210j\036\272_-\243\275\370*\276;!\177\204\274\212\327\006\275UU\220;i\2038=h\314`=7\305\316<q\364\214\274a)\214=g\245%\274d\323=<w\331w\275{\320E<ss\351;=\3542\275\253!\257<\357|\017=!\365\210;B\250d\273|~:=_F\216\274\207l\313:F\037\332\274\333\203\305\275\330\216a\274\010 \352\274[3\277=\335\004b\275\0372\016=Xs\343=\332\205\336<\005\252\364\272D\007g=d\271\016\275\270D\356\275\307\354A=q\327\005\275sk\313\275<\n\036=\212N\311\273\264s\022<\345u\313<\215\367\263\275?|\356<\210\372\250=\3171\214\272\016E\236\274\023\023\031\274\226%\035\275\333\264\221\273\007\315\036\275r\253\214\274\374\020\335\274\200*\326<5Z\217\274j$\242\273\331\275{=K\240\271<\354\264\263=AW\246<R\r\316:p\262\227:\243\372L\275\305\330\316\273(\243\220<|\225\221;\357\006I<\035\276N\275!+\273<Y%+\274\330\361\217<p\224\001\275\006H\250\274st\032\275@\252\032=!\234\r\274?\355\266\274w\255\005=_\353\005\275\000\253~\2759\302n\274\313/\025\274\203Q\007\275\263\325^\2753\2265=\254m\340;\206\273\333\274.\312\001\275\224\333\215<D=\017\275n\203\214=lX\207;\240\260\205\275\221s\005\275N=\022=\310\371{\275\201\202A\275\263\t\206=\246H\214\275S\340\305;\353\274\206=l\230\221\275\2202\210<1\217+=\202\177\335\274\344\003\026\274\323\027-=\244\260_\275\025\312\342\272\240D\205\273#\364\033;\311\217\211\274\357\305\250\275\244\3356\274\035\201B\275\227\232\320\274d\372\023=\202\027\267<L\020R\273\333w\204\275\024]\331<\363B\215\272pa\273\273WV\025\274/\247\277<\330\273\032=\335\350\001\275]\032\356\274\277J\035;\363\222\033\275Q\312\177\274\266\254d=\2152\245\274\311\344\016;\002`\233=\257\027\313\275Z$\'\275\335\300\307<~;W\275\244\253W<^\347\363\274\311\346\027=w\360\021\275\216s\314<\022\036\207\275\207J\024\275A\366\375\274\331\3367<\312\220\271\274?b\364\274G\355(\275\255\361]\275 \033\037=Y\221H\275\277jU\274\361\352C\274Q\255\017=\003\023\275<[5\313<\233\353#\273\334n^=6\ta=L5\360<\211Q\253<X\355\272<\362^,=\321\317\243;Pc\223<\250\252\226=\343d\247\275\324\332}<n\0363=J\373\326\275\233i\215=\371P\360\273/\2227=\nY\373:\000X\263<C\036\253;\025>\342<_\266\032\272v\372,\275\323ne\275d\t=<\222\327\n\274u^\315<\323\2406\274J2\231\275\233\235I\275)g\210=~\274\305\275\035\361-=t\225\014\275^\335\200\275l\376\201=\311d\374\2749\265+\275\313\010\330;K\263\363<c\261\035<\034G\200\273\233?\212\275\271\250\271\275\365\207(<\225|V=\266\031\277\275Lm\265\274#\251\245<\206\235(\274+\235X=\221\005\007\275\3379v<\256h\023\275\010\200\261=\304\356\272\274\201\005\010\275Xm_\274\242\013\306\274\327\234\273<\2061\232\274Q\375\031=Wpz<A\310\331;{k\274<\177\214\232\275\001\262D\274T\203\007=\245n?=\032\2725\274tE+=\306K\001<v\376]=\016\206\246<V\356\367<\321\374\301\273\262\267&\274\025\352\221\273N\033\001=\374)3\275\030\204\302;\222\033\333<MFb<\336W+\275-\357\203\271LG\265;?5@=\007\242\334<\026*\231\274s\364\205\275\245)\305\2754\204H=X\251\200=\240\274\317;\210\265M9\261\344\366\274\3001\030\274\036\256\253\275~\031\264=\376\373\024\275\235\022\366;\275\334\260\274\231\371Q\275\217\274&=\320\265\354\274\361\331\214=\233\323\014\274\233\245-<8C2=\322\227\302\274\262I\301<\221e\217=\206yD\275.\313u\275\016P\t=\210\362A=\035\316\327\274\347u\225=J(N\275a\212b=i\253\313\274\365\276K\275\232\213\026=\017\211\005\275\300\027\345;\355\027Y\274i\005%=\025\003\013\276\276\206\n=\2545\366;%\321\024\275U\033\033=\247\355\211<\350K\211=7\004\222\273\371\242\312\274\325\321\303\271:\211S\275\277cW\275\353|3;\000Kf\275d\211\246=c\227\263\274^\345\177=\326.\257=\017A\021<\271\021\023<&\017\036<\371\201N=g\367\226:\262D\261<\346\362\266=e\246.=O\357\322\274\203\217\364\275\315[\225;\353\241\214\275=\335\266=\365\025\334; \000\001<B\367\314=:~D=,O\276<\231/\017=\223\325\216<\336\346U=\262\027\365\274\342\314\233\275\022\006D=\377\365V\275\361\271\220:}.\224\274R\216!=\341\032Q;\255\0028=r-\355\274\257\330\002<\371\243\301\275\217h\027=t:\200<9f\254\274M\376q=\271\310\303<s]\000;\355\241\034\274\271p%\275\216Y\032\275\030\201O=\023\034\252\274\224!E\275qn\351\274\326\001\211\274\237\236\312=\205_\302:S@\202\275s8\025\275\223uf\274\031X/=\230q.=\221V\021\275\346`}<\247#A\273|w\316:97j\275\277\346\261<MP\330\273\030\354\003\274\0278b<=?\365\274|\260\301<\305[\355\274\331gW<\th\327\275\036G\326<\264\345 =g\273\365\273\270:\207<+\231N\275\"(!\274+s\016=\260\334\247\273\037W\236\275{8\263<\203RU=7\r1<.\006t\273\024:<\275\246\023\002\274\336F\225\275<#\210\274\276\355\260<\247\033\247=\253\220\223\274\336^\234\274\226#,\274\020\372\322\274\010\235 =\311\333\316<\335`T\275f\372\207;\260Nv:\264>T=t\236z=\345\364d;2E,=l\306\025\275/.f\274vh?\275\272\335\260=\306\224K=\330\252\203=\335\246\255;K\365\276<VG\303\275PqJ=S{\021\275\263\266\216\273f\242.\275Mx%:\377\371\270\274\032\245\023\274\t\006J\275XM\244<\'\335T\274\004\007\262\274\312*\300\274\311ud<\314b\004\275\357w-=\307\023:=!.\274<\245v\367<}\231\270=\333\376x\275\024s\340=G\343%\275\251\332\003\275<\331\201\275\255m\233=\207\005B\274\022;q<[VL\274\025/E\275\2642\000\274\323\236\255\274\035\333\371\274\246!\264<h\225/\272\005\202F=\362VV\275\006\226l:\315\331\202<`Hu\275\251|S\274-\021+<\364\244K<V/\222<I\240>\275\034\307\247\273*\005T<\245\3323\2752\022\310=\2679\373\272t\216%=\347\214\270<\234\226\230\275r\200p=X\371\260\273\205\371\203\274\311\302\022>ek\357\274\275\254\372<\363\344\230=\326\333\366\275\360\366\204=\033;\356<\r\226\331<al\"=A\030\002<\3034\000<\023\020\230\274\331.\030\275~\302$\273\342GU=\002Z(\275\362\254\030\275\314\014\202<\373\231\342\274p`;\275\375eR=>\371\212\274]\272\321\274\245a\264<\321{t\275\243\312\231=\361\376\n\276\nu\206\273\3639\261=^\353\254<+\334\357<\254\341\002<h\257\371<\005\246\215\274:\210\225=g\202\030=`\000]\275\272\211\244\275|\262(\274/\026x\275[\331\240\2756\361)=$M\024=\235\303\003<\2537\347\274\261K\274\275r\344\370\274?\260^=\344}b<LX\213\274\317\003M=3Zx<\023\347\361\275B\361B\275\333x\234\275\361\201j=\2573\017>#8\365\274\224\365\364\274\212/\217\274\2627\r=B\365\203<0\302\264\274n?\025=\347kP\275\212)v=\353\037\005=\t\325\036=\003\001t\275@\314a:P\212@<:\343,\275\214v\024=\312S\221;p\322\257\274\266\265==\321\273\343<\031d\200\274\203\037\373<\357\366>\274\227\352\013=\25506=\316]\332\274E\351\275<\354S\350<C(\352\274\314\001\224<\240\257O=I\010\302<\353\237\245\275\376\352\010\274j\361\217\2745\302\233\273;\3647=\332\035\036\274kO\333<`\246\275<\002\241\277<\266z\366;H\211\232<\373\342\303\275}\307\\=Fcm\275\316\313\320\275\347!8=\024\374\022\275\274\352r<5\210\246=M%\327\274\t\267b=<X\264\273\254RM\275\306Q\204=\353\343\213\274\006\314\220\274\227k3\275\202\317\'\274{jR=6\"Z;\037K\340=v\365\246\273$\355\236\275\0029F\275\352\271\256\274(f\200\274H!\033=\206)T=E\300\310\275\025\371\216<\241\301\300=\316y\'\275+\023\035<\275\273m=\335\037\002=f\233\224\274\033\030C\275\270\\I\275YF\212\275\234\242\236=\252\243\257\274I\365x=\032s\276\275\244\277\230\275\030\255\315\275I\035a\273\250\203&=*\0008\273\353g\221<\013z\022\274\220\346\204<\210\3472=@,\211\274\312L\235;%\342\231\274\211\022\034\275ie\001\274\0108\215\274~\310)=]6\363\275\345\316\026\275-\336$=\350\244\007\275n%\360\274(\177C=;G\031\275\000\272&=\3410r=\375n\017\275\372\313\021\275\274\035~;Od\273;i\220\033=\361\\\231\275~\243\367<i\333\265\274a\376\341\274e\036\r\275\306\230\224\274\212\277\005\275\250\371\272<f\026\254=-\230q=\016g\020<8\325\303\274\017\r\n;L/$=\013\244\022\275\034\204\252<\334$\206\275KQ\326<i\304H\275m\235d\274\317*\305\274,\270V\274\336\304\200\274\344>\033=\255\361\006<M\216\006=%}d\272}\372\\=@B\270=\356F\332:\333E\365\274_\305\216=/\031\211;\332\326$\274\035\224{=\356\246\233\273O-F<\311\250@=d\271a\272\341\"7\274VD[\275/U\017\275\213\234\321\274\341\2663\275\242\351\r\27526\024\275\222\231\207\275\227\362\205<\243\013\325=af\351\274\236\021\177\275\020\301\003\274/\t\222<8\304(\275*\004\235<,\236\202=\307\333\343<\247l\312;\353\357o<\366C>=\022\226\300\273B\352G\275>\344\360<\234\027\240\275\2553g\274^4%\274\013DV\275\216\223\036\275h\203-\275rP\032\274\224\276\005<\232\235\333\274\016\237\342=\330\324\304<Qq\202=\001\231\037=\226\307b\275\325\310\301<\275\351]\274\r\030\336<\353\211\204\275\342%\250;\350\022\237\275\237\n\241\275\347(\212=V\273\320\272\360\265\010\275\214\346,<B\316\221<d\2146\275\345\375\212<\2759\303=t~\225;R\223-\275\267\221\302;\275[J\274\342G\364\274\205\275\312\274\363_-=\361q\201<Y\215\006\275p$\023=\371f\311<c\"\031\275\254\276z\275\313p\224\274\002Il\274f\027i=\376\031?=J\263\222=|L\364\274\223~\240\274\030\203\261\273E\362\005=\240n\345=\262 f\273PP\004<\370\364\371<\231\255N\275\356pC\275\315\366\232\275s\334Q;U\323\233\274d\254\220;k!\307<\305(\200<\010\342|=\225\361a=\0261\225=\350N\220\274\213S\227<\312SK=\227\236\305;\375QF\275\330mq;=\376c\274\207\271-\274QU;\274oM*\275\020F>\275,\311\242=\205\004\236\274\257\007\305<\247\260\270\274\027?\213<\313A\202\274-\372\213=\300\265`\275\341D\371\274\251Q\001>a\025\010=\350\354\300\274\200\tN\275V\352Y\272\026D\263\273\326b\251;\352*\316=\001\345B=\205E\216<\273\033\303<\327g\256\274p\246\245<\017\355\272\273\304X\354<!\324\237\274\320\342X\275\271\027\237<\236\330\002\275\265\003\222\275?\031`<%[\031=h\350\004=\n\322\203=\243\255L<\300\224\027\275\315\306\240<\373\274F<\273\014\330\274x\247\006\276\333=\232<D\300\214\275\315:3=\tK\253\274\0378X=\221\235\216\275\311U\250\274\351\231|=\247\205@\274\010\333%\275?\307A\275$\242\213\275\n\327\322=\213\247\324\273\230\323\247\273\354]\261=\235\2408\275\2652\223=/\340E<N\0050=W\273\217<O\235d\275\342t,\274\031N\271\275\245\252\020=w]_<;K\031=\330\254\"\275\211\355\241<\302\315\331<\023\373O=\376\r\351<\232\304\204\273\237\0374\275\033\203\262\275\177\336\020\275\304\347\246<\300%e<\033\341\223;\307\270*=\250{\227<\230\363\007\275\034\346\236\273v\320\221=\251\377\263\275\233\t\223=1\214\271<{\244\026=\361 r=\324\177\207;\224\346\357\275\364\336\024\275\200\253j<n\205\241\274\220(\323\275\246\220\020;\000\211\337\274/\017b\275\230B\257\275\036\356\313\273\\\307\343<\350%4\275\365d\352\273&\017\202\275\255\356\313<\320\312\222=\337\225\357<I\331\241\273>\214\205\273w\231f\275E\020\366<I\\y<|\332\201<\334\320Q\275\247\246\323<\223u\000\274\023y\210\274\371\355\006\274\202`e\275\376\310\212< \340\210\274\226|\266<\261\220\261\274\357$\t=-\360\003\273\342\360P\274xN\022\275\270\246\341<\307\361\023\273\334\n\021\275/\242\340<\306\204\253<\244f\273=\322|\221=\273\324\266\2753_K=\364\221\207=\'\177N=n\027\207;V;\326\274\016KL;\254\205\021<+\025\306<\263\352\031\275\374\376]=\032\233\262;\327;A==\362\027\275\252\276\206\274\371\007\265<J\3203\275\262B =\010\256\315;\211\331\266\274,+5\275\2767\\\273hp\231\275\033j+<\351\275W\275=&\317\273\227\321J=\334\323\321<\245\t\013\275Z\2367=\212\371\024=\304\251i<\3113(=1\013\016;\321\265\203\275\254Z)\274\243$\014=\225\322\035\272\356\022\014=\004\002\222=2\202!=\303\252!=J\026\204=\302a\307<\345\003@\273\r\277\'=f\364\213\274\341\252\005\275=p\237\274\036\200\204=\251\266\331;o\014L\274\224\342\253=b\037\213\275q\377\251\275A\020\315<+\340\343<\210\370\370<`\353)=%\376=<#\356\322<\210o\230\274\003ab\275\374)\216\275\324\332==\230\246=\274\377\271\355<F\024\232\271\262ho<\314\007\363\273\225v=<F\202\323:\343\216\277=6]&=\024$\013\275\031\365\310<\262t\245<y5\222<\026\031$=\207\007\276;=j\271=\225\346Q\273?N:\275\217Lj\273\263\257M\275\022O\312\274,\322\010\274PX.\275\233\205*=+\r\261\275\310\350\013\275\010\324\331<\025\202t=#\265\210\274m=\214\275\371mM\272\204f\361<\007b\200\275\030GL\274dfD\2747\223\255\273>\247\267\274\325\335\030<\363O\312<\275\264\331<\320\225T<\031BD=[W\007;\265GA\275\3756<=0G\346\275\323\006\371\274\376\353\202\273\300\301S\275\002\251\202\275\212\0205\274Z\036\344\275\204\222.<mPd\275\272\023\272;\265<\202=N\244u<\017{\371<\232id\275I\034\005=\243zM\273\247:z\275M\361\216=\220$\376<\255\213^\275-}\262\274G\353\002\275ngV<\231\231P<:&\337\274\354\245#=V\316\020<\225\021+\275\26544=\342\014U\275\265\221M=\"\017Z\2755fS=8\270\336\274V\324\272<\324dz=\014\021@=\002\314(<\014\033M=\310\205\214=\321cb\274\352;\234\274/7d\275\355\276.\275\177\302\214</\223\265\274J\252\310\274yr\210=\320\005\266\274\265\355H\275\270\r\003=\262\337\307<\265-\010\275c\264\1778c\343\204;\177W\032\274uo\203\272(\256\261\275\221Y%=\305\224\316\274\261\313\037\274\361\270C\275\342\361\027\274nKZ=5\230\247\274\234\206i\275\006\216@\273\320\373e=j\256\311\273\210\325%\275\010\021\245=\365\324\237=:j\224;\205\027\023=\320\031\377<p\030\026=,}m\275\003\271\025;\255\237\252=\276Lj<\324\365K<&\243V\275*B3\275b\210h<\034f\266\272\314I\352\273>\302\267<\302F\360<n\013Z\274\362\300n<\271\r\265;j\210\255\274\261D\231=b\376\243<\004f\275=\355\207\305=E\344\253\274\263S\023=m\212\030=1C\270\274,/\267\274U>\210\275\235\223\211=-j\271\274\260\025\200<i\362\301<\257\214\'<\nhw=8}X\275<\006\347\274$\000^=b\275R\274\273+\230<?z\367\273^\177\032=\225h\035\273d\303U=\357\371\247\274\356\'\235=\353\205\"\275\235|\261\274\2303\360;+w7;\216z\035\275\256\2431=\243L`<\225G\236=\024\346\345\272y\021,\274\325}\001>p\324\260\274\204\230\332<K\220\251\274b\311 \274\202\004/<\233\031#=\202\272l\275_\212\242\273\330g\255<{\2660<\212B\026\275\345\377D<8h\323;\353\275(=\202r\376<^\251\245=\302\350\260\275\243\264\010\273\007\0038\275\342\322\013\275t\363D\275\325\276#=Y{\003>\333\365F=J\233b\275\030\250h\275>\362\316\274\347\2545=Hdk<os\226<\244^\004=M\223b\274\257\006.\2752nj\275\313\364\277\274\342\241\316\275\214s\247=\355\010\311\273 n\211=\377\261\006>\3011\342\275\372p\315<\365\320\373\274$\333\245\275\301\226\321<2l\"\275\333\020%<\217\373\243\275L\356`=\307\001\247\274)\037Z<\202\0133<\335\265y<\326\324\207\275\210\353\255\275/\302\000=\313\350h\275\"\000\351<o\256\211=\"\322\314;\306\306E\275VD8=?>\252\274\364%\220<\016M\000=\331\t:=\255;\367:\231\035\302=vVd=\276\217\234=\347\374\223<\311\304P=\333%\233\275i\302\315\275\t10\275\033@I<\007\263\02590\217\213\275q\271\230<!: =_:\000\275\022\025\t\275b#\201\274L\227J<\343\207\361=k7\357:\001\347\276\275\255\2703<\253`\016\275\344\0311=\217\021S\2759\250l<\204jZ=\272\240R\275\216\333|=\372Q\260\275jZ\322\275\006\360\306<\343\nT=\332F\307\274\233w\351;\263\247d\275LG\036\2759\000\243\274\267\202\340<}S\217\275\355r\250:\343{.\274`:U<)\206\355\273\212\376\201\275\214?&\275\352\013;<R\316\\\275\252\302\244\275\313G\222\274I\372\376\273\341\'\315< \\V=\226\024\000\275\232\013(\275\354\244\215=f=\306\274\224\271u=^\206B\273\236&H=18W\275a\227\333=\020$\201\275a4\236\274\347-\217<\332t\361\274\237\306\r\275k\277\312\274\273\270#\275\020\254\275\274:\324\030;\333]\374<\270|\270\272\006e\331=:#\224\275.\305\000\274p\221\273:\332E\'\273O\3663=\330\260\311\274+\0365=\223\276[\272\376\340\363<.\311N=\233hl\275\233\331\275<\354,$\275\255\237\331\274\277\317\316\274\325q\010=\325c\034\275\010\336\034<\257\233\275\274] \365\273\'\253\025=p\337\225=\253\274j<3\361\022\275c\033\032=\376\264\207\275\323\244\023\275\313\t\317\274\277\357\026\2735\017\253\274\016\273\256\274N*\235=4M\340;>\t\223\275\375Q\221;\311\220v=\026\"\"\275\252\307i<\306\006\010=\203>\276<\256E*=+\340\302\273\010\037\344<e[@<1SC=\242\307\372;\371\263\375\274\302\207\202\275\350\026e\273\274\206\230<\330\267\222\275[<V=\357\251\316\275\010`l=\324\360@\275yJ-=g\206\030=\232\262\366\274\\\032\207<\356\235\207<\0261\212\273@\345\025\274\341\006:\275,\346\356\272\025-\277=\027\305f= y\r\274\312\231\362\273\314\221\217\275\005h\371<[A9\275{\010\250<\010\033/\274K)z\275c\034\214\275\274\362\227\275\324\250A\275\217q\350<\376S\241\274\250\232`<\315\330\345\273\354\224\025\275\013b\206=\007`\236\274`R\305=(\332j=X\352B=v\371\216\275\273\266U\275\017@\374\274\204\006\222\274\355\207\222=\035\014\374\274|\177\272<\306\006\005=v:\202\275N\213\347\273\204\225\325\274\217\363\334=L\322Z\275\326\001(\275(BP\275\253\027y\272 qz\274~\343\220\275M\t\017\275%\034\t<\351\307\345\274\035\325\231<\021\2119=\200\336\245\274hl\221<>6G\275\334\245\202\274*wu=\032#\010\275\234w\\\275\340H\313:\227b\204=\337\215\006\272\353l\023\275\315G\016\275\206\261\217<\034\210~\274\226j\036\275\215n)=\242#\201\273\256\242\030\274\271\3306\275+\3601<\337:\2349\215\254\202= l\314<\353\'\202\274&h\210\274\215/\350\274_\353\210=\0171\314<sb\203;\361\213v;.\372\222\274l\332r\275\037<\323<Rh\\\2754\314\332\274\005x\240\275\355Vk=8\367\004;\317h\002=s\344_\273_\366\026\275Az\n\274\310-$\275w\355\304\275\351\010\242=|kI\2752\321b=\375u:<~_&\275\343\300\326<\024\250\233<\216\245\021=\241\323\201=\366\036\313<\014\034\234\275\337?n;\343\330\360:a\002Z=\230\002\317;{\201x\274=\242_\274\226\266\337\275yM>\275\350\036I=\260\256\002=ES\237\275\244b\307\273M\350#=:\263\006\275\005\035 \275_A\277\274\322\274o=\017\206\340\274\036E\372\274>\322\032<\244\266\215<\357\213\335\274n\235\007<)\231\312<\001\347A\274>\337\303\273\334<l\275K9\225\275 `\273\273\207{\273\275A4\326: \253\017<;[\037\274\311\372\317<p&\r=\306*\3529\355\322\346\271\033\262\266<6\253R=\021\307\236<@\314\354\274\334\237\020\275\316\240M\275\314\352\207<}\034g\273\340\242)\274\346~`=g\\\264\274\303/y<\013\357\224=\007\362a<\3362\004<\320\032*<\337\006\215\274\215\017\t=i\351\235=\300\272\372<\375\210I<\307\350\017=z?\205\275\024\213\301<\236\330a=(\354\035\275M6\016\275\246\336V\273\265\034\025\275\336\241\215<\323\022\205\275\340\364\250;s]|\274\304k\221;_\325\236\274g~\305=r\343\022<b\312\234\272mY\230\274\366$n\273\037\337\262\275\241\3469=)\t\273<\206\237\000<A4X\274\330\241\217<\373\t\226=8\370\267\275\344\301\334\274k\310\347\274\"~\013=\335\203\214\275\236\210\264\273#\r\325\274zj?=\356\200\314\274N\210\231\273\177!>\275\307\326\036\274\271\333\017\274\272o\204\274\362Q\230=\263\255\225<.GX<\033\"p\274\212\301\304\274\031\002\367\274\352\023\'<\006W\277\274o\324\263\274{B\225\2742Q*=h.h=c+Y=|\342\315\274\355\227\254\275G!\220<\367O.=\336O\246\275\325\317\232:,\212A\274\267\240\265<G\031A\275:[\230\275\014z\213\275\3021\210;\3419\360;\021`\204=\313\305U=t-r=){\t=\370\032\314<U\002\232;\222\345\345\274\234\364\214\2731\244\355\275\261;\246<Z8\003\274<4\340\275\311=\365\275kN\214=\234\247=\275\354-\363<{AE=\264\024Z\275\344\023C=\331,S=\t\023\300\275pj\254\274 \241\376<R=\241\275)\204h=\324n\315:\302\373\241;\240\3461=\367#R=\225\024A\275\025p\350<\343|\233\274~\261w=,\373u\275/\020\200<D\221\243\274\312a\352<\006\327\322<\353j\242<\313\372\003\275n!\210\274\364s\273;\365n\321=\267\265\360<\221\275\262=y\236\200=\202\265_\275\373\315\364<f\225Y\275\343\033L=\215\007\017\274z#Q\274i\n=\275\345\354Z=c\001\210\274s\342\207<\373\3002\274\264\033p<\270\022\346\274{\261\204=6~;=2N\320\273\320\266\212\275\025\244\351\274:\333N\275J\353\207<\021\202q=\0238Q<\2216\230<\0275\220<\265\203^<z\357s\275\003\201\206<\304\212\273\274\034\014}<]\037\221=;\2045\275\216<[\275\223\025\261<\226\3016\274\347\327\252:\354a\337=\301\271\367;\204\265\371\274\001\302\226\274$=\221\274p\354\264<k\347J=~\244X;\316\302\326\274\212\301\244\274$\346T\275\226\217I\271\356hv=\010N\221\275\022\342\203=\253\310\034<\377:\317\274m\217\000\275VMq\275\365B\005\273\304~\224\272\360\202w\275Q\241\274\274\257\273\007\274\236\014\277\274,\361R\275\317t=\275>Y\r\275^\376\204<\251\353A=\351\357\201=\377\246\210\275\276\021\010\275\360+\034\275\311\020\017\275\t2b:\227KT\274\360i\007\275\234\356\234</&\323<\231v\303\274@\2516\275U\204\033=\340\207\334;2{h<\036*\330<\324K\014\275\357\353\\=\267\326\323<Lp\240\274\001s\036\275\340\230\326;G\250J</\\:=\0265f\275\264pM=\251\033\251=X1Y=/\003\263\274\266\367\246\274\272oK\275v\264\335<?S\003<\224f\010\273\364\034\267\274\345\277\270\274\274\223\035=(\n\230\274z\026\014\273\350LW\274\361\356\344;\251j\270;z\n\366\273R4\323\274\3166I\275\211\340!\2756fS=v]\252\275+n\r\275VR\217<\367c&=\306\367[\274\241\264\230\274\230\237s<_\254\221;\372\363\204=\256!\001<\365\341k=\272\036\r\275\237V7\274\240\257/=\373\024\276:\212\277&<z\303\217=#\377\007\275\2112\324<H\325*=D\335\000=\006d3=\246\256\225\272\324\306\322;\255\020L=\023h-<c\353b;i\225\276\273\"\032\216=t\275\374;0\363,=N\312\001<5d\345<\343\321\334\274\203\326\342<\251\210\026\275(\315f<\210Q#\275|K\334<\\A\013=\321\306\242\274\274\n\330\274\216\251\024\275\247\2648<.\326\344\271\265\027\303<\341u#=G\233e\275E\0219\275vrU<\3159\353=\216\000O=\2731B=\213w\303\274GoH\275\350Qm\275\236c\303:U\017\215<\021~U\275\361\301\241\274\036d%=\022\252n<\030\371\305\274}_\340\274Z\361$\275\357\315\274\272\247y\263<\201\034C\275\035e\200\274\324\271[=i7y<Pk\210\275|\203\270\274\201\214\263\275\'hR\275\274\331/\275\376\354%\275\223\3742<\345d\207<~\303\241\275\037)\376:\314\034n=\317rV<J\312\246<\360{\237\2743\237q\273=\337\224\275\tF\245=$\"\001=\270^/\275FH\340<\037j9<\230\022\303;\227{\264<\261\370\272\274\370wV\2751\035\304=vS\212\275\363U\321\274\262`\353:\231\3548=\275\215C\275G\374\375\273\340\206\356\274\243\321\332=p\204\022\275\2234\374=U\362\254\275\322\241\260\274\313:\317<f\344|\275\334\014\266=\215Qp9\376\370/\275\0019n\273\213a\344\272H\n\335\275\231\260\364<G\007\214\274q\036\032=\246\330\006\275\010`\363\274\220\222\005\275ly2\275\373<[\275\007\242\262\275Y\317N=pWa;\272JG=\3631O=+z{=\356\364\024\274\020\242\230=\377\307\230\273\250\255\270<Q\357G=\037\035,<\023\262$=\213\262>\275\365\312H\275\351\227d;\254sR<\325\355\270=E\206\007\275;\t\230\275\317Mf\275l\315*\275\272\034\315\272\245\"\207\273\364V9\275\226\265\361\270\261H\370<\017I)\275\310\323\206<\034\3510=K\333\030\274@\226\200\275\221\234\270\275\013\260\017=\021q?\274C\277-\275\320H\026\274\260vE\275uw\214\274@4\017=\024\200\337\274|\241D\275\271\233?;\222R\256\275Wv\276\274\337\370\216=3\374\203=\nq\226\274\307\306\344\272\214Un\275\007S5\274\204\221\361\274o\001\332=\002u(\275+\355\025=\030Ef\275ykK=\221Sm\274\314\017\353<\032\022>\275\3753\007\272\211N\235=r\234\246<\303\315w=\365\221\014=\211\236\023\275\203\337\233\275mQ\202\275\340\037J=\310)y=6\371\224\274=\013\034=\210\236\332\274\356\273 \2752o\337\274\231\342?\274\312Q\221\275\324\273\'\275c\352\273;\256R,=\277\023\223=\001vu\275\264\022\264\2753Vr\275\341\016m<\250\265x=\300\236\024=\022S==\232j,=1\367\027=\037\260\265\274\031X\301=W\010O\2740xM\274\341d\216\273\020Z\252\275\2156Q<l_1\275\223\347\030\273*+\023\275\027\032\345\274)\252\n\273\254\025\306;\251\335\353\274\013Q\036=5\273\240=\301\014\215\275\330\324\n\275\267\237&=yG\246<\\\365\024\276\2249\224\274\202\326A\275\241\033\301<\027\243+=!^|=\224,\316\275\000\207\001<i\323G\274\221\341\335<\233\177\276=\337\375T\274\306\366>=S4\021\273\004cq<\265\273\240\274\356\016\023=t\"\021\275\363W\274=s \310:\202\253z<\232\246\337\272\314\321\007\274p,\207\275\337\226\037\275|\376\353\275\017\370\311<x\244-\274T3c<\262\2647=kl\363\274+3\307\274\370\331\315<\363\252@\271\007{\326: V\301\274U\025}\275H\032c\274\267\344\243<\351\035\014\274\022[{;#\3011\274\370s\005=F\232\375=\332\302?\275vR\312\274\365F\001<O\344\250\274\325\230H\275\357\365\025=3d\327\270|\352\367<o\234\262=k~\350;\361\364r=?\244\314\274\020\334\335<\306j\276\273\266\216\004<\010\024\331<6Z^\275\356\327\001<\353\251\231\274\030\2207\275\320#V\273\211\326 =8\376\216=\026\326\262<\004\020@=\362l\214<\337\371\375\273=\024\334\274\001\377|\275\267\221y\275\350Tt\270\025\036\222=\217~\326;(\276\306\2743\237\037=F\236V\275\275Y=\274\205\253\250;\215t\020\2759\002#;\233\263\215<G\265\262\275\231a\304=~\000@<\2300\3578\337\022\'\275\266\031\234;\335\246\220\273@o\271\2742\034T;\231R\343\272\202I\025\274\244f6\273\032\305\036\272`\3554\275d[\r\275\246m\245\274\306Z\203<\360>\263\275[\307>\275\246\230\037\275\031\001Z=\301!B=\327\024\217\275\032\331:\274i\324\364<\374<:\274\2501\263\274\244\226g\274\322\013f\274\200\272\t>\003h\212\275\303\236\006=\007.\007=\304H\031\275\036]%\275*\010Q8u\024\n\275\231\315\315=\030p\217=\007\347\"\275\320\213O<;n\031\275\200\215\317\274Z\337\323\273O\340\223=\202\314\301\273\000SG9\036M\202\275\204V\240\275\2208\217\275\346\221\\=(sU\275\255\031\253\27524\222\273\355\332\371\274yQ\332;=%4=.\004\016<E\023I\275\336}\266\274|,\304=\032\343z\275\260Zx=,\215\277=\372\215\006=]$\270\275\026\013\3149l4m<>\223\213\274Cb\264\275Yd\225\275\362\250\254\274#\233\"<\177s\030=\342S\223=1O\"\2724\003\037\274\261\332\002<\272\350y=l\213\200=\265\330\230=\366c\277\275?j\304<\276\205\236<Vj\\=\314\022-=U\3670<`x\305=\235B\205<\270\237\217=\356\260\261<\241\377\316=^\230~<\230\243\204=g\353\205=\035<\331\274Y\313?\275\263\351\363;\315\032\246;,F\270\273\322\020\234=`\234\363\272\340\323\034;\005\263X<:\026\357<\350~\245<\200\003=\275=c\\\275*+\312\274T\274\024=re\234\275\342\300y\275B@\202\275\023\010\204\275\037\240p\273\335\036\230\274\264\030\307\274\036S\315<\342\276\341<\262kj\274\311\377\263\274otY=(\307\252\275\014\375\027:*\031\347<\214D\000>\235\rl\274\317\352[=\245\303\010=\202K\233<\021\352\027\274>\343\242\274IZH<%$\'\274s\003~\275\004FZ\273\360[\232\274\242\357%\275i\225\232<\335\327S\274#\337W\274\200\013L;\274\227\240<w\211\322\274|\245W<Ut\375\274\2677\247\275\005\231q\274#\373?<\264m\002=*&\226\274\224\024\030\274\244\267\351\274\200\362_\274+Q~\275w+4\274\3673M=g\214x=4h\214=;\255\024\275\212w\310;\177\353\221;`\205q=\372\335F=8^\"\275\247{4=Bm\306\273\231\237z\275\000\366\360\274sL\332\273fS\006=:5v<\3025G\275l\313\252=\313\215!=\344\327\360\274%\255\254\274\202\244Z=P7\315\274u>\r=Q\342\252\275\315\226,=\03372=\355\022\314<p\341\245=\244\315\363\274\007X\207<\3266\261<O\337\200=\250l+\275*\273\360<}T\032\274\314\2763\273\230L\233\274\375\332!\275P\360\302<K\345s<y\316\207=\243\021\006=\251\217.;\010\271\323\274xp\004\2758\317!\275O6=\275\373R\000=V\300C=\352\260\033\275\247\216\310<\227\324\372\273\202\200A\275<\346\202\275\263\325)=[|\370<\025\002Q\275\030g\311<.\235\031\275_<V\275y\343\213=$\377\350<nZ_\273\024lr\274\274\300\320\274\307\006A\275H\220\311\274\027\345:=\325i+=\345\310\260<\032\240[=\210(\021<hOZ<\025\351`\275j\202\023=\374\307\375\273d{D9n\217L=,\n\t=p\270\204<2\264\213=\035\021\274\272\212\201\232=\364\257\276\275\357\373\373<C\226\254<\340N\350<G\247\304\275\321k\262\274[fQ\2757\r\322<\265\220\333\274\351\251\207\274Xn>=\334\246\257\274\326\033\202\275\003Z5;\3463\271\2740!\236=T\307\213\275{\206\263\274uS\242:\320\305\220<\245\306\'=\025|H\274FR\367;R\330\200=\361\232C=\270\000^\273\303\022\201<Q\331\3419F\026\234\274\201\010\r=<\023\261<\336x%=\211e\203\273\350\266\243\275\265K\322;\035\366\033=a\232\324\274\347\251\361<?X\230<\274\0148=>\031.\275\323{\322;$\3639<\353\025\321\274\341\327_=\030\"\324<xU\027<#\016\203=T)\221<\307\347}\274\\\324\201\274zi\316\275\225\025*\275\333,X=f\234\245=\304A\264\274\342\206V=\257\310\016<\364\n\252\274oR\266\274\345\021\375<\027\024\r<\344\273G<<\344\325<\007od<jF\214\274\007\3637\275\222\243}\275QTf=0\207\223\274\270\346[=\317\002\204=\365\274x=G\275\255\273C\n\241<\205\262\240<8$\253=\000\343\336\273\237\216Y=\301\362\235=\336\3538=\006\206\250=;!\004;\351_\207\275\234\224\013<\311\2577\274\304\207_\275=\005\366<U\255*\275\003\356\261=:\010E\274~\377\307\274\346j\217\274\237_2\275/\010\310\273\255\234\235=1\002\251=\325\215\022<N\210\364\273\376\343\036=)\371.=\333x\035=e\372\341\274m\353S=Z\233N\274:\265\326<b\257\037=\347E\203\275*1\336\273\\\017\233<y\177\320\274\322\027\277<\'\300\257<\306(v\274\210s\205;ye$=Z>\001\275\304a\341<\256\356\247=\273yg\275\352C\241\274\363\251O=B^\301<\266~\235=\205\215#;\361\336\272\274\357\363/;Xb\206=\331\374\314<\226\316<<\016:\021=,l\254=\0355_=\333\312\350<\267}\235\275I\265\007\275\334\001 =E4v\275#a\277\275`\370\313\275\374\325\210<\266\214\353\2744\270\262\273\357P\224\274\277\032%=\326\306\205<\035\3620;\000\366\257:-\3652=c\004\304<^\313\345<j\265_\275Qk\372<\226\021\203\275\323\346\221\275w. \275\373\262\263\274\372\245I<\027\021\346\274\'\265\024==l\014\275\255\366\205\275\034\210\304\2714\2325=M.}=\333\253\330\273c#!=w\241\211=U\207\300;Y\314\275\274\256\336\265<7\021\225=^\005\326<`&w\275\371\335\035=\033GA=\303lH=IN\002=\362U\031\275\236\363\016\274\326\224\332<~\315\3308\2628>=\277\'b\275*\335\326;\221f\n<\0214\031\275OH\344\274\315\236O\274E\177\272;\315$\356\274U\314\263\275f\300\325<\330^\230\275\217\271\013=\316\361\007\275\221\255\231;\304\354\240<3\"0=\r~\376<u\337\000\275q\250\341<\210\364\346\275\304\351N=\200\272\214=\366\333\307<7\365L=\373\243\017=Jpt=\361\335\215\274\343\276\266\275\013\010\245\275\271\026H\275\332\335(=\325Ux=(\227&<\250\022\030=\350\277\212\275p\021%\272x\204\032\274E.Z<\367\377\231<\352?E<\310\021&=\337\350H;\331\251\266=\032T\307\274\312Ga<\223\361b\275M\n\007=(\330\302;\236\022\331\274d\262\352\274[T\256<Gi$<\217\016:\273\n\364\235\275\373Tl\274\225\333\215\275I\254h\275\374\237&\275\\G\235\274\220\312{\274\261\231\215=\370\353\334;\366i\342\274\213\006F\275\013+{<\214\307\213<\357\307Q<\317RW\275\200\331.=\220(\352<\007C\203=_\353\243\274\215\361\034=\261\270\200\274\307\325\013<\364\n\n\2752\206\036<r\361\005>\220\323\215\275]X\305\275\206\376\001\275K\336#<4\257\353\274\217\rr<\234\205\035\275\021F\240\274Q\347\231=\247q=\2732e\215\275\001\373\347\273\013\335\'\275\311\361[\275\256s\212\274\350\365\014\274\301\242\004<\333\236\235<\242j[=\371L\360<\214\307\336<\263\177\204\275\t\210a\272\006O\243=\024g}9\004.\177<\316^\370<]\232\026=\'\306V=\270 \263\274O\016x<\362\262n=\343\361\302\273|\300\310=\354/X\274D!\024<\004\027$=\332\377\301<\235-d<{\340S\275k\005\330\273\356\317X=\364\316\352;\262\356C<\357\006\277\274n\331\032\275K\304\312<\221\240\220<\0050U\275}\023\023=0R\277\274\336x\334=\200zD=d\340\242=\230\257\t=\352[\177\275>\341s\275\250\244\016\274\017\306\004<\334FN\275[\365\260<\003f\226\2749\204r\274\270\242\262\273\370E,=\366\233\227\275\001r\207\275Y\311\'<8\217.=\212,\263=\310Q\343\275\307\245\377<*\234\016<\212\037\251<d\322S\275e\330\t=\316m\315\273\314\271c\274c\370\005=\347Fw=\231 \003=PQ@=\020\237B=\001\222\263\274FL\013\275\237\233\270\274\317\010\224;\244\222\016=\345pO\275\307\307J=\013U\262;hlh=\361Hf\275\226\230\221=t\231\213\275$(\223\273A\317\301\275T\014\310\275m\\\024\275q\210\225\275\333cu<7\302N\275\255\'\037=~\224.=\033\345\026=\251\031\035<p*L=W\201\247\274\220\336\263\274W0|=\246\353 \274j\340\022<\031\204i\275\366f\334<c\244|\274\361\366\211=l\240\"\273\1773\021\275]G%\275H\354\"\275\016K\256\275\374\206\302=8>\355<\305\266\333\274\235\\\250<>P1<X\311\266=\006\271m\275y\034\036\275\035\240\023=#\024\251\275\250\273M\272\237p\345\273\344R\266<\265\267\271\2748\255@<\020\312\231\274\002\023\204=\324}\236<\206y!=\246\311\035=\376\363\350\274\013\326\343<gYT<+yF\275\014\372\272;^\331\033=x\335\265\275\032\206@=\242MK=\325b\260\275\337\301\317\275\001p\360;\201\302\201\275\256\362\353<[\030c=idC<\322N\363\274\357!O=\323\314\205=\247\317\370\274\nH\003=\230\013\304<\223\372\341<J\317\337<2\020\203\275\311e\311<\261\344\017\275f\177\245<\315\307s\274\314\3311=T\312\n\275\014\214\363\274\207\0219\272;\332\230<\3519l<\271\205Z<\276-\323\274\326\336k=\324\275\206=u\314/\274\226\004U<!\334\240;\020\357\243=\007_\363<\354\225\227=n\254\356=\304\002i=A\347\211=\300\026\n\274\0336Q\274\262\304\177<\207h\350\274\023J\013\275\245\004\034=\200\276\230<SgJ\275\024b\271;\300\223p=\332\025\000=&\3622\272\003\271c<\227\355\253;[?\037=\347o9\275M!m\275\r,o<\2138\206<\003\034\373\274\330k\202=\2106\212\274\343o:=[\346\'=\243\353X\275\024\022\212=T:\262<\210\321P\275\305\002~\275\247/\216<\323\303\252\274\274\177\032=\2515\357<\272\242v<\250M\302\274\\\t*:e\025+\275\357[\202=d\213]<\360\343\262<YC<=\275\320\317\274\207`\007<P\342\014<-H\034\275\362@\r=\036\334\304=?\256\202\275M\242t\273\177\021\262\274\342\351\337<\267\350A\274\004gi\275#\217\247:E\322\312\274\254;8<\201~\"\276N\340\244\275\200,\223\272\310{\276<\026\204\'=\333\252W=\232\233\210<\371}:<!\023\240;\200\351\035\2759\265\271<\016{\272\274&] =\323\226\214=\3409\200=K)\032=)\335E=\342\354\373<%\025\214<\352:\337\273\247\240k=_\247\207\274\343\252\211;\330\367}\274\207\014\222<\037\'M\275\367\010\223\274i\316E=~\327\3419\321\3533=\265\340-\275C\031\372:\207g?\274\t\335\037\274\302\354\250=!6\'\275\334\017i=\277/\227\2751\206\375;\014\304\203\273o\364\326;\331G&=k\305^=\233\215\'\274\376\241\336=\rA\256=h\027\327\273\360\003N<#\234\350<8\257\032<t\272\342<K\002u\275[s\371<1\331\354\273U\255\332\275E\317\215\274\201E\033\275\272+\006=\2402#<FP\036<7B\224=\354<\233\275G\210\324\274\222\330M\274r\314\253\274\037\301J\275\344l\240\274\225J\234\274|\325\205<U\271x=,\317u=@k\243\275`d\254:\321e\326<Xr\r\273F\261\227=\267-\017\275\264\242 =1;\010\275\225A\317:\235H\006\274(\213a\275\240@X\275\255cH<P\3632=\334&\226\272\211\300\320<\361y\376;7\2331\274Z`L;\2343\025\274\321h\261\275HN\r\274\212\357\225<\313\363\353\274\334\272\024=\213\334n<h\255\333;FcJ;\326vX=B\300\243<\337\265y<;!\207=\233\313n\273\331\325\207=L(\014>\232V@\273\225\2253\275\376U+=\201\371\343\275\336\213\357<?\274k<\201.\004\275\223*v<\227\222\327\273\340]\014\275 h\212\274\363\220\362\274h\333\232<\314\246\001<u\334q\273M\'A=\356\231X\275\006\3448=T\367\014=L8\245\273\n\375\223\275)\2415\275\226`c\275\211mb=l\273V=^\220\243\275!\232\327\274.\036\326=\020\"M=Vo\377\273 \313\210\275\212\265Q\275\264I\351\2743(\317\271u\033\017=\177k\365\274\223\201\034<\001\250\302;\276?\307<gq\274\273d\353\251\275\023(\205\274{\352\275\274hdD\273\251?9=\302\311\030\275\371e\254<\234\336\243\275Z\030\344;+\327\372\274\030\331|\275>#e\274\024\234s<\231\317\315\274+\320\322<\301|i\274\244\"E=\251\245*\275^\254\230\275\240\024\270<1qV\275}*\346<\260\200C=\3512\351\273\303\035!<\211\230\237<#[\032\276.\300\001\274\200i*=)\206\010=\337\'\230\275\361\231\203\274\241\342A=\252\310\342<\346\350\201=\025\005e\275I\2659=E\252\034=xP\301;\25788\275(\177\356\274\315\256\202\274\225\263\261\274\350\366\214\274\315\234\300<\205%\301\273\340\326\201\274`NJ\274[\327~<M0P\274\215&\250=\033\303\333\275\n\341\236;\267\202,=\274\227\037\275\243\336\226<\340{\003\275\377\264\r\275\030\252\211\275\364\377\256;\243\234\037=\264\216\010=^\343J\275\236\337\337\274\013jZ\275U\212\327\275\"\000\263<\027\235~\274\343\250\353\274\217\177\t;c\233\362\275\236\326i\274!\241\213\274\374M\037=\311\234\271;\323\030\371\274r.\'=e\026\033\2750\002\265=\324\330\215\274.w\255<\316IB=R\372\004\274-fq=\215\247\325=w\244\232\275&bE\275\371F\021<\270\266\271\273\340\330!\274\222I\216\275\213\216I=\035c\363\273\227\276\247\271lR\240<W\245X=\364\345\231=&\325@<lII=\321\027Q;\250\227\335\274\223\310\232\273)~\211\275\206\301E\274\356\342\020<\267\350\217\274\376S\277\274\361\262\214=\315\007K\274$\307\223=\335\335\305\274\356\317\017\275d\230\356:\022\241\025<\250\262\023<\367\322`=\275{%\275\304\035\346<7\263\233\274go\311\275p5P<\327\031\2568g\265d\274\254\341\022\275S\257E=\366\203\342<`C\266;\316>\003=\210\315\273\275{V\225<\257\206\215;\254\361\003\275\363Dk=7\211j:-\005\331<\0357\316<\310\221\340\274\254!\002=\225\312L\270X\227\"\273\372k\202=\276\373|\273\216\307\025=\251#\306<\240\201\343<\311\030\245<)\020\202;f,\"<\350l\314\273\322\340\035\274\003\0276\275\225\342\342\274},{\275J\320\226\275z\003x=\024\322\017\275e\301,\274\000\032\221;\017`\3009\333\326_={\005\200=\352g\204<#\202\244\274\246\333\277\2746\227Z\275\030\250&=\010\326\206=\210\002\236<\202[\374;h]\205=P+9=\016\321\005\275\036\315R=5\235S9)J\230\273\270\3369\275n\366;\2754\210\230=r\245\005\275\275\335\"\275\327l7\274\264f\033;\327\2101\274q\350\352\274&\t\006\275\274\312[=m\301\354\273\3726C=\235\336\024=\324|0;9\305\355<\023c\026\273b\250\022\275\t^\255\275\365\'\344<M)Q<\r\254\300=\\\351\267<\317\267\035\273\304\'\034\2755#\026\275\207N\241=u\255\237\275II\221\274\302\375\356<&\301\221\275E\315\272<\211\005\020\2757\3368=\227\3527\274\335\013\247<%\3335\274\353\277#=JN0<\253*\336<\206\330\n=\310\257\217\275\224\\\205=\376\262\314<O\276\367;\200\321w=Y\376\226\275\026F\270\273\"\263\\=\216y$\274w\330\014= \370\211\274\316\351\207=4\372\330\274\006\333\212=>X\243\275\263X\244\274\256\201\2369\325\232\353;\311!1\274\262\313\356=\306\232\241\274#\307n=\223j\373;\247Bx\273\233\r\374\274\322%\211\274(\267D=\007\351E\275\320A\252<h\274\364<\177\025\232<,\353\277\275\027\306\213\272\205V+=wb\374<\004\245[=\331q\200\273,\203W=\336R\232<W\023\263<\363g*\274-\331H=7\007\252=\334\330\330;\265\200\207=\232\020%\275\341\021\333<~e\210\274_2\377\274\350`T=\'\370Q=\223\241L;~r\007\275\242&\267\273\301\313\241\274\035>N<;|\"\274-\344\021;IbR\275B\365T;`\335\347\274A\250\036=\360\314\240<\267D\215=0\241\340\273A#><\254\367\250<4(\300=l\010\257;|\3565=p\204\304\273{\356s=\357\304\326<\277\336\226\275\376\014 <n\026W=\262.9=\265Qe=H\214/=\245\371\351\274\260\243V\2759B\271\273k<-\274\367\027d<A/\205\274\271\261\036=g\007\231\274\345{P\275\032>E\275\357b\260\274\330\3461<\n\374\305\274N\256\337=\005\214G\274R\253\237;y\336+\274\024\000=\275\362H\020=\252\246\004\275^\016\204\274\220\tH\275(1\242<\303\034\236;\014\204P\274\002\355\371\275\037,z=:Hk=5h)\273e\371\316\274\246\370\206\274\345\002\t=\227\321$=\2319.<\016\223v=\025\330\250<\376B\333<F\250A=\0215\032=73\301<vZ\037\272A\035\226\275\333\243\243<\3757\220<B\017F<\215\245z\275\336\335\\=b\373\327\274]\007\356\274\n\277^=\361Xl\275i\245\221\274\265\354\264<\351\352\370\274eg\335=\241\343\266\273rA&=\237\3507\275\313\220\253\275\246\371\354\273\177\215G;\rJ\251\273\t\233\026\275\322\033_\275\003\023@<\226\\/\274\325x\212\275\036\216\r=\253)\344\274\035\211\334\267u\350U=\352\322\307\274\367\324\345;\375\n\005\274\2736H<\032\301\335</\232\211\274\225\360\231<\301bA=I\326\225=Ae\016\275\241[G=L~9=\220\347\000\274}\272G\275)a\230\2754\363\242;\266\241\370\274\251()<#k\336<\210\001\314=\372O\327<\245\2202=\032e1\275\213\205\310\274\254\301\036\274\334\021u\275\341}\251<\027+S\274_\254\246\275GMN\274\362\220v\275\360\363\360=$\021V\274\314d?\275\262z\\\275j\247\271\274C\\\251=\354\242\033\275\202\"\206\275\230C\337=\023\221\263<\347\326*=\016\264f=\333YZ\274\306\232\225=\267\335o=\224\002N=\225\'\021=\263\225c<\032\252#=\322\211/=/\251\024=>+.=\027E\246;\206/*<r\373\241\274,\005\"\2751\316\337<\277\027F\2757\311F<\376\216\247\274\325#\264\267\017Y\342\275X\367U=y\330\274<\216\337\245;\332\212Q<\314\301\355\274\266W\202\275$\301\225\274\243\231?\275\"\\\334;\343\312\351\275r\205W<-\325\356\274j8\221\275\273\334\200<\000V\031\274\006lY=\2437\300<+\035\t=\244\307\367\27538\277=d\376\034;\r\311T=\267\362\000=\262\025\250\273m\220k=\261\236@\275o\356\204\275\001\315@\275\355\300\204<\362\241\037\275H\237\234\275\3314\034=4%(=s\304\360=\244\027\222\2738\360\323={F\027\275uk\020=\363\004\262=\270\325\030;W\223%\2754[G\275\251\375#<\260\307\375=\336-#\275\t\367\007=N\177\035;Q\013\371<ms\364\273oS\236;\307\323\005>$N\304<\264\375\032=MP/\274\261Q\275\274\204`\232<\231A\357\274\223+\303=\316ew\275\260\364_\275\301\365\217\275h\341\370<\324\026\221\275\341\310=\274BS\305\274_<\214\274\333\213q<\231\037i\275\311h\344<\336\020^\275\005/5<\005\326o\275\235!D;\256P)\275\203\233C\275\254p\233\275\332|\253\273\010B\256=f\343\255<8\321a\273\312\005\363<(]\320<%ea=j\016)\275\004\304\"\275\035\340\362\274\314\351\362\274\351X\232\275\005\270|\274\017A\026<\362\236*;\rb\200\274KS\366\274qK\342\274\226\303\320\273\333\321k<\014\345\251\274:\020\007\275\340\313Q\275\311\261\212\274\t\013Y\275\211y\334<\322\306\226;\017\244\245\274\347\021K\274\374\266s=v\301B\275\246\374K=\200\201$\275\177\035A=@B\n\275\252\351\247=s\327W=\255\211\022=-}\255<ii\205\274B\336m:w\275\203=\273\034F\275\233sS\274(\000%\275f\370\034=it\234\275,o+\275\246\301\364\273\271\206j\274\037\360\233<B\0274<\324{M=\217%\267\273T\330_\273[w\000\275T\346\340\272\215\033\014=\177\203\242=Ct\356\273\223\300\317<\363\377j\274\211Bm=\r\360\335<\305\275\231=\036P\027\275\226\361q;7\200\315<\316\222\271<c\037\n\275\031F1\275\244V\340<\360\362\203<+:\021\272\272(C=\235l<<=\200+\275\032\000(<%\323\342;1s\236<\242o1\275\235\247\343\272\206\217$\275\361\331\202=\333\001Q=e\221\235\274K`\\\275\336\255\220<\0167\'\275\350L<\275@\252F\273\213\211\275\273\2232,=\0138\262\275\345\325P\275\252\221-=:\021\376\272hG\223\275m\377\212\274\235\032\343\273\265\253\335\274\252\254\217=W\370C\275\320\271K=\215\030<\275\014@\224\275|NO\275\032\303\007\275\355A0=%3w<\322\260?\275a&=<\242\253\245\274K\334\241\274)`}\275\2257O\275\233\342\212=.\273\271\275\357\341\301<ww+=%!\237\273(\216\205\273-\216\233<\347\376*=\253\374\016\275\177\323\263\274\037|7=\276\'\223;[\224\032==\376\036\275\303t\225=J\206\032=\220h\361\274\232\230\320\272j\341B=\354\271P\275\313\302\370\273\311\\\035\2759\231\005=\261e\265=\336\343<=\024\271\310\275\247\256=<\217\216\274<\013\305\201\2758\341\200\273\207+\201\275\221U\363<|\203*=\375\272\232\275\362`j\275\333A\251\271\246\273\014<\315\361\036\275\252\271M\275z\023\201\272\364\367\234\274\235Dg=\204\037\232=\262\336\252<\324\033>=\371\316\264<\216\262\236<o\354\t\275\224\251N=\377\233\255\273\377\225!\275\276\343\216<\207\344\255\275\317\024\316\275\254u!=\255\336\203\275\024tZ<\355`o<+\031K=\301]\r=%eQ\275\322=\222\273!\257N\275\316k\264<3\207p<\033}\317\273\310D\330\275H\367J=\336,q=r\234I=g\233*\274\021\215\206\275T\210\177:\3419(\275\253\014\t=\341M\356<\\\260\333<k\331\021\275-&\036;\211G\265<\'1q\275q\312\227\275\240\300\350\274\324mF\272k\256\032\274^\347\262;x2\200\274\261\204n=\223\353\372\274P{Y=\t\250I:\273\350\002\275t\313\256\274Z\2359\275\010\225C;\311c6<\242e4=\327Y\345\274\272\325\322;\265\\\257=\013\332\202<\323\2010=\356\324\363\274\317\323\314<k;\227=\357\315\312=\2700\341\274\207\000\264\272B\350\302\273\346h\252<CG\254\274\343\304\326\275g\302\374\274\240\003G=T\342\323\275\212\277@\275\002\032\227=\242\366\311\274\317\314\0369\264J\321\274\376\302\213\274\270\341>\275Kle<\306\317\236=\342\n\r\275-k\023<~1\004=_\260\332\275\257\356\002\275\2659\352\274\014v\366<\341\367\310;IC\203=\363\264\213\275\006o\245<\271&\353<\276\212\030<\004\n\002\274V4F\275\226\035\030=\243\020\232=\373\351p<\022\211\212<\002\033S\2733,\254=\272\307\365<\353\206b\273r\332\232<\303Q2\274\206\2147\275,hV\274\257\000\024\272fm\323\273\317M\276<\321F\225=\257\351\241<\270\303(\275\205\240\247\273BP\305<\301\005\312\274\364\345b=V\247\r\275\214L\344\273R\351&=\363\375K;\376\261\034=\037\230\023=S\317\313<dvU<\200Ph;\255\376\343;\t\223\002=\0135\234<\023&(\275\261#\026\274\235\330\021<\366y^\274\014\030a\274\267\251=\274.\311\241\274\013\010\244\273z\265r\2756l\t\275)\227\216\274\016t\276\274\351\260\336<\003f\201=\336]&\273\330=i\275pf\031\274C3\212<v\022\206\275\310\037\325:\254\366|<-\222\225\274\020$\274\275@\2453\2751]e\275z\217l\274\330G\211<\266\2467=\217\001\223=u\323\270<\355b3=[5R=/%\364\273\025\250\357\273\271V\314<\201\230\230<\246\373\273<j\216\214\274y\311#=\300\3076<\010\377[=\204O^\275\255\205\'\274\324\374\370\274\274\206\247\275V(<\275\2711\021\274j\206?\273\177\224\223\273yq]\275\004\201\213\274\352?:\275;\032\004=\037%\003\275\207H\250<\316\004\322=h\227\301\275\014\177\211=\244S\323=\3528\236\274&Y\020\274\374\030\271\274fFS<\235A\315<\341\316\373\274\330\000y=\030\237$<\007n\222\275I\275g\275\223\370\203\275!\277.\275\200n\371;G\370\232\275\243\226\377\274Y\263\346\274\215\225\035\275\205_\020<\234K\223\273\237\025\227\274b\205\026\275\n\222\272=2\002\316\272\210\262\356<\2162\320\274\323r\3048\260*\354\274G(p=\32549:\2756\320=#\004\006\276\322\333\302<\365\303d\274uP\302\274\354\343\246<\026\366\213;\257\211I\275ZCs=\267\310+=$B\377\273^\337\211\275\372\260\251<\245\371\036\274L?:\275\235\377\251=\354\344g<\232\270\007>\235?\352\273\347e\n\274\232!?\273m\265\231=\225k\232\273\350\235\254\275\0137\203\275*KD=\343\373P=\023\377\213<\333WQ<M\212\201=S8\371\273]\326\265<\206\'\205=.!\303\275\226\031\367\274\024\235z<\374+C\275\235]7;\260\013m;\216\311\201\274HY\241\275\376\307R=\231O\245=\033=8\275\270ip\274\2773p\275@\213L;\'O\220<\3366\303\274\226\265 =\317j|<7\353\030=\345j\034\275\032\334\013=\362J\277=\305(e\272%\270\343;\024\357E\274\031F\026=\301{\206\275A\004\264<\233\261\274<\230\017\261\272\003D\340<n\006Y\275\265\305\310=v\316\314<$8\255\275\347\324\007<\347\001\"\275\364%N=\311\332:=\346/9=\212H\212\274\373g\326;\177\035)=\227\343\204=3\034\026\275\237\365\246\275G\256\260=%\265\"<wJ\263\275\333F)=0\232K;U\217\306\274[b\273\275;\355^\275\366A\276<\024l\335\274\207ED<F\216j=\326q\316\274J\001\341\272-\001\237\272\264\203k\275\016c\221<\206\337\r<\177\374W;\225;\264\275\374\r\326\274\355\240p\272\332]\032= \nt=\034\300]\274uS\217\275\034\177a=7!\023\275\235q\241\274}:\035=59P\274oU$\275\3367\262=\234\033\010\275\336\022\261;\n!c\275G\006\027=\256\377\377<\351\036\025\274\223\270L\275\247\032h\273\3756i<\2534,\275;\231\021\275lW\207\274\372\314\266=h\312\207\274\331T\306\274\260\024f\275iF\212=M,\260\274\252\332\200\275\030\254\207\274T\0163\274\370\2637=C\236\325;Q\215\016\275\2431\234<\232\364=\275D\353z<o\341q\273LV:\274\223\327\253\271\010\205x\275\027\366\374<\272\346\"=\240\360\326;\213\242\274\2756\002\202\275\231\032q=\353\371V\275L\301%\275\216\342\360\274\234\216\t\275\202\212|=\"\271\267\275<@\n\275n\255\254=\246;m=\323\251\306\275\275]\233\275\360Ka=4\0070\275\330\020\253=\351SI=Oe\345\2746\206\036=\003x/\274\237\344g\274~\t\215\275\263\032\201=\367\240\231<S\371\'=4\234\367<\3355\222\274\306ks=\027A\270;\242\364\202<\017\324\370;U(\255\274\3048\235;M\320\335\274\250\246\324=\362ri\274u\1775\274\n\301\026\275>\025\246\274\r^\000\275\027}\253\275M\020:=G\336\350<\345.\251\274\223b\010=\315]\260\274_\251\210\271\003fD\274)\373\241=/\306{\274\005(\226\274k\331R\275\231\232\3259Xoc;\177\226\002=\270\022\353\274\242\352x<Ohx=\001D\204<h<g\275\215T\264<\260\346U=\255\256\312\273\r\375\237\275\016o\214\274\236)C\275\273W\241<%\250\205\275\316\275@=\251\345\354\274\"2\207=\221\231\215\274\235\246\264=EJ\221=\264\003\027=\025\243\020\274\244\212<\275\275Ba=B\030\234\274\337\272f==0B\274\230?\261\274\356\322\246\274jv\237\274>4\203=\233c\251\274\371\3555<\340\277g<\337\237\232<\245\003O\275\231\267\341\274\215\245\200\275p@\017\2759k\005=a\247\024\275\t3\330\273\260En=\000\315\025\275\221\376\363\274\301\032\240<\n\217\236\274_\017\253\274\315\261\314=\333.\"=\354\371k;w!\211\274\027k>\275a\251\035=\363c\222<\301\325\253\274\024\200y\274\227\361\016\275.e\024=\013\214l;*\302\370<\372\246\252;\347\202\220\274\301\325\207\275\024\2534\275\001.\305<\261/\332\273O\025\243=>\311\314\274\307W\274\275k\256q=9m\355;*\321\366<_\371\352<\213w\'\274\311\273\332\274\322\254\n=\340\007\"\275\324\336\2779\252a\003;\333\344\213\275[*A<\021\3066=\244.S\275\002\005U=\217[s<.7\265\274\320\213\224\273\307s\335=>\r\205\274wS\215\274\t!h\275\361\353\235\273\257\351a\275\023\3623\275\240\034\333;\034\352\010=\tb\002\275\241\246\005=Fde<`\207\304<\023%(\274\025\215\231\274.\222y=Y\311w=\220\310x;\264?\225<\223\001\276\275\217\'\267\274\340\336\361=\377I\000=\0246!=4\022?\274\204\233\337<\377!\227=\366\025;\275}\304\330\274=\214\030\275\360\241]\275\252\027}=\330\275\266;J-\214<\267\333\232;*\341\367;\n!l\273\355\215\004<\371g7;\335\247\031\274\227\006<=\254z\204\275#86\274\233\247\026<A(\374<\207\251q</\203\222\275]\277)\275\321\236C=:\351\262\274da1\273\034\023]\275\233\246v\275l)i=\272\0276<R\020\276\274)#-\275\366`}\273\010\266\n\274&\023\n\274\242\357\206;/\216N\275\305L@\275\377\245_\274\376\001\360\274S\262\244=Q|Q\275\303\017w\275\036V\242\275HV==\243\231\260\274\273\265\330<\026\035s\274\272\r\377\273a0K=\265\201\304=\353q\253=\357\003\255\275\323>\247<Z}\035\275\004\215\036<\331\344`=\344\205O\275\353\317\341<w\332\206\275\372\356+=Nq\303\275\366t^\275\265\335\220<T\333\221\275\304A(=\375\331\277<\330\245r<\352E;\271R\374N\275<P\235\275r\033{\275)\216\007\270\222\202;\275\000J\331\274\342\223?\275\326cS<o!\260=K\037P\275 \033\006=f\317\017<\306}\304<\375<\257<\261\245\036=\301\343\215;8k\r\275\344\253p=\251\372$=\213\253\213=\367U\312\274W\017+\274\267j\005=\330\236\347<\314\027\343\274\363\030\234\275\366\275j<X\313q<?\337\237=\351e\207\274\262\300\004;\177\273\305<5\225\n=\223\340\013\272T\367<=\306\365\006<e\251\316\274\002\021\206<F\311\345\274}HA<\"(\217\274\352_A=\314\230O=\"d\017\273F\225#<\236\016#\274\r\310g\274k\006?=\350?%\275\270TN\275\"\001Q=M>\237\274\345\332\346\274Z\361+\275\005\334\016=0\035\241\273\351\031\234<K\027.\275\003}\027=z\341J;-\010\246\274\3108\223\275\273\316\231\270\215\177\354\274;\326U;\001&0\275\2269\236\275A\2132\275\336\377\264\274g\177\225<0\253==\254\314\257\274\230\363\336\274+\243.\275$>I\275\271\3240\275\304\313\236=\034t\244;Z\232\242\273NO\243\275\035&\017=\223\202\216\275u\034\352<\026\222\006\274@O\036\275\036\025`<\326;\231\275i\212\313=\342\311\227\274}\225\230\2742\033:;\336U\010<ej\236\272\000\275\214<R\303\005\275\177?\r=\0004\260<5$\213=\316\375\225;\206\3305<\270\317\250=\357\035\367\273\344\367\206\275\321\275\346\274\264O\341\273#\246\355\274\010<\207<L5_\275\237\255c\275@\227\232\275\003n#<\211\332\210\275\246R\177=\353\377[<\261q\034\275(\001\021\275\257\265\344;\246\373\236\274&\2500\275pv\241=w\001\001\275>4&\275\322\224\335\274\032-\252<\335\357\276:\373\326\224=\267\361\r\275\244\036p=\243\251\374;\035\253\323<\n\236p=0\247\246\270\367\333\030\275\305\332\204<\005\221B=\372z\201;\014\213>\275X~\t\274\356\025*=\3348A\275\005t>\274(y\260\274L\346\016\2751\204/=\213\265N\275\272we;\033h6=\220\240\234\274\366\317\016<\240\226\227=\230\002\222=\362fu\275\261\351><4\216\n=\345\241\364\274\023\303\207:\342\332\031\275\354a\004\274\365\306e\275s\343\036=\317\002\223\275t\250\226<p\230\036\275}\336\222\274l%N=\332\350\331\272H\224\347<\202\364\317\274\351\r\342\274\"\250\360<\272V\242=\n\025\220\274<\367\337<\322g\23199\013\331=Id\322=\333\356\004<->l\275\005\352\241<\321\0011\275\364\345\033=\316\273\303\274~m\020\274T\213w\275\245\303\211\274\tu\007\275M\025\236\273\177\016\337\274}z\277=H\330a\275\321\224\327\275(#\207\274\347\016\005=\325\302 \275q\326D\275\206\367\236\275\217\330\241\275\227\005E\275\310V\033\275\202|\240\275\361\212d=\000\005.\275-\201\311\275\276\007\370\274\275\010\033=\270\302\312<\352\217l=2b\256<\026\256J\275\'\372\323\273\332\211(=eG\360=\257\004>\275w\253\233=\\+y<\204+\247;Au\237\274\214\257\245=&\2710\274$R\240\274\334\336\237<\360\234\030\275i\000\245<\325\213\224\275\251\215x\274{\364s\275\305\036S\274\024\r\200<D\377\314=\216\3479\275\371\230\324<hG\010=o\346\035\275\337gO=F\205\275<\236T\275\274\202. \275\017\305\253<\2579\273<\024\022\"\273|\035\253<\244uh;N\027\321\275\01003<\216\rV\275\354\327\321<e\230\246<\203\202\236\275x\022\360;\374\024\237\275\010\370_\272\373\016\210\275>\360\306\273\306\3603\275\245\364K<\240\317\032\275Wp\215\274\"\026\345\274\360f\370<\373\207G\275\244%!;_G \275\244\004&=0X\316<\260\232`\273\205\337#\275\344\2626=5\315\332\275M@y=tV\231<\022\203\256\275\240`4=\r&Z=\r\265L\275z\340\"\274^\204}=\204\265\025\275\344eU\274\007\353\237\275@\375\0169>\027\202=\334\361\204=s\272\\\274\t\010\215=1\315:=TB\240\275\360W\336<\344\331\254<\275x\211\274bN,\275\264\200\221\275\327\302\252<x\001\331<\342*\326\272\231=\253<\223\310\004\274\235\206e=\207\331\315\274t\251\264\274A\306\207=\032\313\276<\214]M\275\237\221\356\273J\333\331\274\'\370#\275I\303\214=\016Rb=\265\261\000\274f\357\201\275\037U7=\326\374\255\275\322h\264<\337V\350\274\377\267,=a~\266\274\212\'V=\033\240\037=e\"\230=\214\251\203=\341Q\257\274E\370\005\274T9\357<\260-B<SUS=\304R\327</T{\275\324\271\271<\013\323R:\334\247\240\272\000=\265\274\031\300\033\275\205\221\331\273\031T\215\273\013\234\246;\300\202\331;\3567\211\275\242\'S=\301o\207\275\3035\257\274\261?\227=\302\256\270=6\252\321\274\203\241|\275\312\336\314\274\027\364\035=!\241E\275&h\226\274\241\202\030=1\354\240<s\010O\271\340p\314<\336,\026\274\370\353\213=T\306s<\325W\300\274\036Q\317\274x\010\244;\227\265\344=mz\037\274.{\271<\352\307\365<t@a=\022M\225\275C\322\225\274&[C=S\2468\275\341\305\362\273\023V\344\274\302p\246=\263\204\323<\224\261k\273\230\355\213<\267\t$<RS\334\273\023?\222\274\372Q\324\274\264\021\374\274\321\357\360\274\020\276\347<C|S<\355\200?\275\0069?=\300\306c\274<j:=\rPI=\006y\234=\255\376;\275-\315\202=\254\256\020=\226\372\313<=\344\303\273^\t];\370\0248=)\3306\276\372\234C=D\025\235\275\013\267\253<\2540\244<\210\027\265\274\021\351\344:\321\246\231=\367\332\220=\362\020\205\274\244\322\222\2742\251\370\2749@\244=`\260\211<1\220/=\224\265\210\272h\271\211\274\320+U\273\340\227\236\274\232\217t=\332\013.<\025\253\341<\361F\025=\213Tq\275\320F\251;\335t\247<4\t\227<\331\233p\275\014\210 =\205h\224\274\242\367\272\274j\016#\273\014\332\276\273\314\245Y=\240\305\315\275\311\206^=\214\006\307\275j) \275\352\211N\275\261\207\025\275\002\031\r\275\223\233:\274|9\271\274\211\245\250<\257\270\026=\346X$=\026\376\324<\372\234J<V\027\260\272(-\370<\"\335\330;\243Z|\275\253\246\353\273\315o\007=\001\002H<\324\346\307\274\026\251\366\2735\251(\274l\325\244=:\323\275<\215\0237\275\226\034\013=\276\021\300\274Z\364\223<\354\213\271;\352\\\375\273}\013@\275a^B<C\342?=\256F\332:\357g\237<S\000\215=\305\336\303<\241\266d\275\370\263$<\"\216\271\274\252\020\322\272\233\203O=\360\003\031=\3312\177\275\233H\006<\225\233\017\275F\327\021=r\247\271<\336\202\027<%\n=\274\255\031\307=\373\022\367<\2203\224\275\333\\\005\275\3767\205;\251\347R=I\207\221<\314\266\031\275\323\246\374\274\342\023~=A\300\225<\314\274\0009\240\274\026\275t\352\377=\316\214\343<i\002X=\305\256\032\275s\023\017<\260\261\030=\030\353;\275@EU\274\271r\241<\201\206r\274\305\271\314<\332\373f<\372\237/;\203\005\027\274t\331\007=\334\014]\275&\222\273\275`W\000=\207j\214\274\332\003\362\272u\234 \275\361Hw\275m\312q\275)#a\273\004K\022\276.\366\340;\223\177<\275ae\246=\030\343\340<\010\213N\272\376;\251=\277+\361\273\n\001&<\222\007\322\274x\314\034:#\316K=\255\330\322\274\261\201\225=\354\224|=\272\202h;\203C,\275NI\202=)\030m=\273uY\274\"3\025=\256\253,\275\315\252o\275\327\3462\275\345\301x<\267/%\274,\241 \275\201\224\202\275\212\261\201\275\022A\024=6\247|=S\225\357;\217\243Q;\341FR\275\'.>=\332\322\232=dA\204<\24037\274oM\033\275as\203<\367\276W<n\276\210;\026\352d\275LK\030\275\002\030\205<\261$\303<\224\277)=\275Hf<\3213\014\274\0141\373\274\346G\252\273c\271\033<;\177\245\274\362,z:\206\353\342<\242\223\254\274\004M\350\274\024E2\275Ie\037\275\0056i<\345\035R=\n1\313=}1:\275 q\376\274\343\205\026\275k]\226\275\250\263\324\274\212Wy\272>\373?\275\216\372\303\275\336\0251=jy\203<a\233\021\275\327lH=\365\022V=\313\031M\275\335\210\236\273<\201\360<\n\217\225\275\t\274 \275\312\331Q=\224\313\263<\002\tB;\362\235+=Ok-=\277\n\247=\032\267%;\212\313\251<\203\036\030\275f\354C\275\035\315\360\274<\365\";\006ss\275\342{{<\037&\260=\371\274\":*g\221<;\2169<\251\365\253;\"\321\362;t>C=\2631\233<I\226\337\274\211S\207\275\001M\210\274s\361\026\275q\321s\274\204\374&=\220\307M<\233\342\n=\220\305\266\274I\374\205\2743\300\034<(Wg=\345\273\341<\226h?<\007\355?=@\306\367<7\270\256\274\020A\032\275\363>\n\275\r{\202=\n\222A=\202\261\357\275\274\272\205\274[\366\304\275-\375g=\003\276\255\274\251\257\300=\013\234\204\275\336YI\274P\217\206\275\276;C=DO\332;\351l\326<\376~\315\271kU\275=q\030\373\2743\\\236\275P\260w\274\301WO\274\':M=\367rs\274=\311\010\274b%0=\320Av\274\370\276\020=\313.\177\275*\255\236\2751\220\267<\000\212w\274\200\330J\274\302\030\330;\373|\321\274\007\n\n;l\030\337\274\314\002s=\325\r9\275$\362N<\334\250\003=\205w&\275s\300\327\275P\343\363<^\246\021<\375\356X\275\206\001\202=:(\270\272\334\017\224\274N\314\026\274\350J(\275\316$\246<\345\316\266\273\255C\016\274\250n\020\275\230\'Y<FJ\034=\261\365\370\274\213\364\241\2731\002$\275f\366\002\275#\250\236\275\255\245u\274u(\313\274\344y\326\274\230i\262<\253\365 =\213$d=\031\364!\274?\347\237\275\273)%\275FL\031\274\350`\253\273\000\025):&\037\216\275pA\226\274\211o+\273(\223\303<\034\207\024=\007\276\237=\342\276\304<_\360\000\275f\261\205=\\\032G\275\315\320`=l7!\275\244>\257<Q\351\030\275s>=\271Ht\027=f\225\013\275\322*\367<}\337>\274\346\002+\275\004\270\362\274[\356\217=M5T\275Fd?<b\272\007\275\\\251\337\275\272u\221=\275\220\020=W\363\223<H\010\020\274\267up=\003\221\312\275\212kW=\302\017\265;\353\315\\\274\005j\263\273\360Q\251=@\267%\274f[\333\274\212\332\372<\2326N\275p\373\300\274\324\260\036=Z7\023=u\247+=\343\213`\274\311\307\\\275\206h\361\2737\252\251<b\265\343<_\032\264\273\276\022\265<\372\017z\275{\347\035\274\n+\222=i\227\212<\312\227\236=\261\321\247=\214t\252\274\360.\355\274ViT\274\235d\213\275\264\331\321\275?\201\305\275?\325^;\211O\274=\323&\220\275\331r\256;c|\312\274\002\214\355;i\253\237\272%\314.=k\240\251\275z[u:6F\273<\304\215V=\366\325\321;\226\362\335=JNS=QZ\213\274\275\300\305\273B\303T:r\232\217\275\002{\207\275x\223\027<\350B\216=\316\225\274\275\274\3269=\304\310\274:j\330\017=b\226\244=%\275\210\274\035*C\265@=&\275\nW\027\275\227\2352\274\310\036B=C\276\335;\270\262\202\275\225O\242=\235\221\342\274z\210;\275\325\310|=\313\254\202\275\231\261P=\353-\035\275\241\034\330<jB\321=t\273\311<\033\340\312:5\350\225\273\323\00319\034\254:<\354\221\016=\0272\256<\321 \226<\265\323\213=\377\250\'=\346Z_<x\370\301=]\017\241\275\275\300\263\275\342\025z;C\201\332\274\2213q\275oP$<\033\177\016<\247\275\002>\301\354|\274\021p\325\272\251\214&\275=b\213=3Cr\275ul\333\273\310\225\327;8?*\274In2<\264\020\275;\005\302\326\273\346\221\250\272\375\3563\275uB\017=n\262i\275*\027n\275\t\013\034\274\261\223\221<\nG\245\275\254\235\025\275TxA\275\316\2722<(6\312\273\222\275e\273C%c\274\335g`<\214yR<\360\244s8[I\341<\376*\215;\343\366\013\274\237-\212<L\231\345\274\210\271\342<\376\321\033=\212\317\212\275\373\345\344\2748\204\304<2ND=\326\312O=\004B\322<\261\003\260<\326d\256\274#\224\006=\320*N=}\272\034\275\321x7;\256\243\231\275\346\257\257=\035`!\275\022\245\252<r(\221=\254\034`<\313\301G\275\002\330\002\273\030\024\226\273[\257\242\275iJ\374\273\'^\r\275\002\252\t\275t\303!=A\245\232<\327\264\025\275\321\\\225<\215\262\036<`\254\026\275o\002B<v\246\210<\304\234*=\313\376\236<_\034a\275\357\013]<\022\005\016\274(\0076=\260\332J\275Ff\010<\250C\234=\215\'\357\273\204\244\350=i\305;\275\2202Y=\231\341H\274\251\034\024<\360e\264=\035\225\314\275O\366\301\274\242\270!\274\267OI\275[\356\217\274\273\211\204;\367\027\200\272\2554\212=\210\217\212<h\002T=\254\004\212\275N\\p;\257\240\327\274\2519\344<\334\317\230\275\000\332\325<Kd\364<Ec\234=\202\253!=\357)\002;\016\277o\274\333y\253\274\276\331\244\273\345\353D\274\327\214:=\201\344`\275B+\372\274\216\307\334<\3239*=[z\021\276g5\215\272Rh$\275D,m\275h\t\213=#J\271<\204\237\203\274\373\263\002\274\037\026\314\274_^\037\275K\243\237\2758}\252\2748\nn\275)\350\303<\002!o=\332\304\202==\215\004<&<\242<\205\245\222=xb\362\274b\r\030\275\272\352i<CY\010\274\371\024\361;B57\274K\016\026\275\304\223\020\275\032\374\211\275_\340\265<T\023w\275\365\257\360<\267Z>\274_z\231\274\2057C\275:\032\331\274\214\300\372\274\244M\262\275{\242e\275\201\027\273<nQ\005=\305\225b\275\221\336b\275\241>\026\274\365\211\273\272\233^\r\275\361\3458=\332\261@=d\0135\275O\315x\275$\323m\273\345\213\250;\224\243\025=_\024M<\307f\264;\2003\\\274\227Y\336\272\317\347\262\273v^;=\225\253c=3\3102\275\257\3246\275F\033q\275\252\254<\274\005\350\323\274\221\300\347\2731\003\341\274\'\321~<9\221\242<%\204F\274\233\376L\275\006e\374;i\264+=\242X\205;]5\336:\347\006\224=\024=}<\355j\207\273\005C1=\271\210\230\275\206\013\337;\340\272g\274\201]\200=\366\272\311<\251\264\216;\264\373A=\271\212\255\273\342\204U\275gLz\275f\023\342;+\334\204\274\032\025\343\274w\355\307\274\017\024\354<\206q1\275}<,=\207\237+\274zkE=E#\263<2M\221<\035]N\275\307\273\231<\206\260\n\274b\327\337\274\334h\345\274h>2\274\271\006\203\2733\250\021\274\240e<\274=\356%\275\\e\r\274\252\316h=\n\272\356<5\312\000>\0251\r=\361<J=H\374\261\2742\267\274\274_\334\036=\202\016R\2741\2445\275\226X\032\275\334\210r\274\341\277\337<\355\243\355<c71=\200\306\221=\334\231\024=\310\322\017=9\230\207;>\367\267=\204\276i\275\324\325\021\274\254\336\300\275\204\020\242\274\354^\262<\233\222\306\273\355\271\242\275\360\320\226\274\231\267\230\2723B\346<i\2450=\240LP<+{%\275\232\003L\274F!E\275\313r\342\273\027\305\371\274\030B\251<\252\006\177=\306\0222\274\020\373\\=\361\027\205=\352\t\202<\324\201\265\273\206\005\224<\034\345&\275?\345\255<\256\313~\275\223\210&\274\327W\222\275\354\226\023\275\t\260\357\273\035y(=l\025V\275Z\233\202=\220\267|\274\213\223%\274?H\235<\344ck\275u}\031=l\336\355;C\312J\275@WA\274\334a\210\274rEw<J]{=\303\251\210=V5\213<x\234r=\t\203c<\333LY<Q\177\243<\261\310\266\274\027w\304<a\014\205\274\231\226\345\274\332\367\313<4\000\214=\251M)<\225(\004\275I\365I=\273v\200=f:P\275Um\346=\222+\031\275\350i\203\275B\241\016\275m\265\205\274\251\325B\275W\204\024=\253),\274\340\251K;\026\360\223\274\252\013d\274f\336 \275\367\n\017\274\204\212\310<f\272\030=u\000\357\275t\217v\273AQ\267<\002n\265:\355\nh<\253\034\201=NK`\275VB\366<_\004\226=^\345\365\274\374<\024\274C\367)\275g\323U=Mg!\275\027\214\237;\t\331\013=\021\370\355\275/\306\211\275\021\030\273=t\205\'\273i\324G\275\031\020%\275\206\212\325:\020\236\340\274\340\3561\275\375f\007\275\227\3579\275T\321\246<M^%\275S\213\304<hB\344\274\313\306e\275\017\302\354\275[\0317\275\020+\032\275\253\260\236=\017\032\\\275\034\214\007=<\246q\275\030v\235\275\245\256-\275m\350\010\275\337c\220\275\023\271#=\365C\303\274M\024]=\352\no\275\202\255\215=\343o\346=\257\342\225<\364#j;w/\005\2744\037\311\275J\n\270<w\217,=7\343\265\275\364\257\036=\232\274\311<\274\356\031\275\357\247\223=\356\013\027=\034\201\033=O\337\024\275\372\247E=<<z\274\217\264\250\275&\316\261\274|u\024=\323\210H=*2\305;\t\236\211=|u\030\275\267<P<u\265\351<\223\221\230=\332\342\016\275\036\364\220\274\240\220\227<\375\231s\273\352\003\"=C5\206\275\331]\247:\205\204\037<\245\034b<\316\226,\273j\262\330;\001(I=\265Br<u\265.\275\000\326\314\274A\240Y=}\225;\2759\367\236\274^\241\231;\177\272n=\303\"\206\275\027q\004\275dp>=\2361X=bN\245<\275j\360\275o\356\242;\354\322\270<F-\213=4\026\322<\332\372\353=\360$\203\274\213\205\006\275\2069\272<UI\226\274\307\2120=:\360\332\274\321\377\213\274\261\221\366\274N1\246\2758\2770\275\351\002M=O\312\020\275\343\325\367;h\270|;\225\350O\275\356\353\3417j\367\300\2744\263\022\275\232\234\204=Q\035\022=zL\331;\253\374/=HN\231<\206\352\331;\355\254\237=V]>\274 \177$\275\006w\376=\034Oj<gL\275\273(Y\202\2747\343\237\275Q\242\277\274\350?@=\247e\216:\375m\271=\321X\265\274\336\353\"\275\242\235\325\274\313A\232\274<Y\376\274\"{\345<\341L\031=e\301p=\233\3446\275\303\003\202=N\324\205\274d%\320\274\350\316\262;\304\207==\037\216\347<\323dh\275\325z\034=e\342\263<v\242\307:\372re<\010\224\272=\221.\333<\346\302\226=%\031\264\273\366#\013<\203\361\r>\243\035\365;\2072\260\275\264\351 <SB\340\272\215\272\017\275\242\2332=\r`\265\274 ;?\274o\023S\274U\271\013\275\262m\253\275\225\243^<\353\211Z\275#\270\241;A\230\200\273\367T\353\273\225\272\010<\251Y\\\275\270\'+=\312#*=\255j\301=\251\016\035=/\224\323;\301V\263=W\362\201<\277\242\232<#.\"\275?\210\006\274\316\354\276<7\356g<nD\220<\243\342m\275\371\346\224\275\020w\335<\206D\233=\230\035W:\201~\377\274o\237\256=\000r\032\275cnZ\275V\217\274<\360\273e=\320/|=\232\233\251\275\376{\230<3c\306;\t~\253\274rZ\355<\223\336n\275\255eC=>_9=\rM\245\274\347\312\260<\007\237\306=\010\254\"\274]\301\301=W\215\370<\205\210-<6*\226<_;\217=\371\353\337;\207;}\275\016\336\240;\332\310/<x\357\031\273\207\013\344\274b\263\356\274g\3670<gR\207\275\322\302\2608\202\321\365\273t\240f\274\214T\006\274\370\305\213\274\236sf\275\223|\260<\266\332\005\275 h\034<\340\256\327\274\351\230\346\275\351\253-\275\312\203C<Hs\225;n\221\214\274\264\234\023\2755\036q=f\354\233;\357[\346\274\355\274D=\341\306\r=:u\214<\354\3244\274^\320\313\274\227\212\311<\014\254\227<\010\203\376\274\034fc\273[H<\274N\340A\275\325\004:;$\036\263=\026\032\223=mg\241;\rd\260<\r\257\025<r\036\235=\030\014\325=\204a\037=\332t{<\312\371\032\274*]\302<6\037\221\275\276\334\020\275xf\031=+\301\203\275\301\256\217\275=_\223=\025mK<\271R\325<\014\274\253\275|\212L\275\266\210\203<\3139L\275\377\307\000\275\025Z\270;\317\314\375<\001\345\306<^G#\275\304t\005=\276!\004<\275F\2169=w^\275\236\205\255\273\207H.\274\345g1\273\312e\367\274j5M<V%\267<\304Y\312<\030\242\233\275k\3725\275teY\275\245}S:\371\240&<Yq\006=\360\362\021\275\273\237\"=\213-\n\275\370\305.\275\252\320Z\274ko\010\275\273\204\354<f;o\274p\274\256\273c\237-<\217\003e\275\036r\226;\236\340S\275\316\000O\275\255\365\370<\345t\326\274\370UW=YD\016=\242\364+=\262^Z=\277S\243<\347\3569\275w\234\r=\037P\224\2748aF=\260\276;=\332b\005\275\3534\254\275CX\375\273\324\326\224=\214g|=\307\304\256\274l\003u<\326S\300\275\271\3367\275s\342\350;\n\377V\274\237\322\232\273Jc\232=\350\351w\275m\346Q\275\341\333\341<\r\377N=\"0\231=\367\201Q<\347\003\321\274\247(\273<$\3769\275\"\331\366<\322hb\274w\355P\274#\227c<R\243r=\243\246D\274\276\351\337\272+`M\275nc\273=\036j\277; sM\275\304A\235\275N \347\274\350\264\265=.g\274\275R\246\022=rt\366\274:C\337\275=\352\023\274S5\030\274\213\221\234<la\007=MQ\225<.W\305<\027\362g\274\270|\213\274\353\262\210\272S5\001<\030\237\360=5\234\270\275\007\237\033\275o\312\215<\365\260\260\272\206U\013\275(\314B=\r\276\320:\201 \\=\021\265k\273V*\225\275\235$\314<\257\3649=\266{\215=\235q\0039\207/\241\274\212\203\304\275P\0144\275\363\257\336\273\3265\230\274&\357;=\316*c\274\366V\265\275\351q\221\273\220\371\215\274\237x\263=\370\246\221\274\211ID<\206\265-\275\017\020\314\274\320BM\274\2447L\274[\345\323<\305]\"=m\325\366\273i\310_=9y\227\275\313\375\r=\222^*\275]\360\220\273s`\210<\351\347\346<\374\205\210\275\361g\361;\2579\002=\205\020\321<\264^\215=\301\257o=\263\210D\275M\315U\275n\273\035=E\033\224\275\032\"\222<XG\207;[7\207=\375\236\010=_\275\211\275\211\331\n\274\257\336#\274&\234\374\274\305)h=\021?c\273ky\033\275\016\004\001\275X\r\220\275\343]\023=\326Ig<\355\216#\275\365d\354\274\350eH\274\326\342\034\275\260~\226\2741\312\022\275h9\032\275\340\234\013\274+\230\022=\261\316b\275\204\027\221;\231\037\372;|\224\240<\026\246Y\274#\277\343< \021\262=\246\330\307\274P\303}<R\237\003<\251\327\211\275\211\210c=P!\222=\372Y\276=\302_*=\231 u=\210\336(\275,5\026=\331\203*=\014\213 <\314\360\022=\201\253X\275\na\367\272E\352\223\273o\274\027\274\033S-<\311\022a\274_\215\360<\017\214N=\232\241\002>AL\367=}i\264\273FQ\316\275\2032=\275\230zZ\275\002}\246\274\"1\004</\253\260<\377\207\373<\244\256j<)\360\341\273\326 \003=\016\022\256\274?\366\241<<\345\233\275Fq\302\275\371N>=,C!=\351>\007;\225\266\373<\236\204\227<2;#\275\003<\026=\343\303\326<}!\000\274+\276K\275? \263\274Q\352\326\274L\360\365\274\267N\350\274\006R\002\275\016\334\364<\344<4=\3164.\275\327\355\251:\202\343\240<\205\275\320\272[\226\026<\025\n\243=H\3153=\331\034\352\274\254\276\231<\210!2=\260\374C\275X\214\"=X\210\230\272@\214T\275)d\367\273\204l\t\275\332p\240=\243\330G;\250\311\264=\312\363\230<\002\033r=\240\262P\275\350\307\274\273\201\tO=fl9\273\370v\373=\002l\313\274`\223g<\261\354.\275\277N(=\266\026\361<\312\347\212=\244c/\275-[\210<\371,\243=\337w\203=Dk\253<)Pn=\343\244\203<\374\256B\275\232\357==\327\2317\275\214\320\320;\000${=[\227\026\274\263\374 =\000\351\035\275\236\313\177;\320\202\236<\262p\232;N\245P<3-u<(\201E;y\332$\275\\\213\325;\355\351%=D\237\r=\3707\216\275\267\035\365<\001\351\223=|5W=\022\374\304\275\206\364\227\274\274\320Z=\305\330\365;\324\201\203;\t\020\251=\n\363\202\274\224WI\275U\321\357\274\373\010\213<\372u\024\273Jk\252=\231\311\356\274\251\002\'\273!\003\334<\024\014\307<\262\332>=\215\034\243\274aj_\275\014?\240;\333\370n\274\274\265\256<\007\206b\274o\261\017=\313\225k<D\2531\274\352\n\2549\304\014a\275>\353\035=\235\177\221=\006*\t=e\323\235\275\001\242\t\275\324(\314\274\304\2112=L\202\276\274\270\014\206=\365\343U=\365\320\260\274\344\313\231\275\007\223e\2747r\275\275\361\0133\275\003j\310=\265.\243<\371\366\232=\264\206-\275Oz\320\273\014\367\322<\272\303!\275\232\342%=)\275\035:\027\210M\273\236\220\214< \355\331=\364\230\205=\313\344\307\273\315\037\262<\254o\233=>\334\216=lY\203\275\277\254\211\275\3556\232<\360\367X\275\264\027\014=\371\311\362\274o\340q=2s\216\275\024\271\362\274\371\242\224=\352\321\006={\350\022=)\\\017<\353=\222=0s\336\274+ls\275\203yO=C\205W=?\341\010;SY\260\275,\227\002=\223\321O:\337\223Q\275\310;\345\274\001\242\017\275\027\312%\275 8+<R\371\t=\247&\357\271\243\036;\275\267y\261<A\323\002=/\3219<\2133j=\223`\257\275\211>};@\036\\=\251\260\321\274\325\312\320\275O\005\303=C\325\361\274\335\341\033=\333\235\271=\264\245\213\274\326\276A<\236\342$=\205#\006=^\232\006=\310n\275<\241J\257\273\323[]\274\306>\334\274R\324)\273\307\014\315\274\243\020\n=\032\360\207\275\372S\002<\237\3059=\266\223\250:1\217\013=3\362\210<X/\007\275F\036~<F\355\303<S\r\337\274\nM3\274\035(3\274\275UC=%\374\236:\352\327W\274\017)\333<\"_2=^zW\275Z\360\311\275\351\236F=N\344\300;G\274\300\275\340\222\021=\027*\333<\304P&\275B\352\026<\016\247V<\315\212\253\275\337\002g;*\007c\275\210\214\033\275]\0357;\2220g<.X\234<e\322\232=\007\332\036\275\236\026}9\362eF=\0270\275\274|\345=<\036\327k\275\2141\276<K\262\371<{M<\275\0274\300<\253f+\275\031;\375:S\007\\=\212l\227;y{\265\275\"UC<\031$\340\274e\335\371<\335\243A=g\365\255\275*;\357\274\270\327\253\275\304[g\275\216\020\347<\306h$\275\220z\267\274V,\005\274\242\316\235<\265Y\"<\017I\273=\312\2564\275\023oV\275\230\006e=\253\317\035=RQ\003=*\340\033<\372\265\350\273\036\232\265\274\277\307\033\275\253\021\006\274_\032\227=\326\234\204=\031\232(=\274T\212\275T\344*<\240\315j\274\023\335\002<\345DF=*\317\263<P\253\270\275I\037\034=\n\302\016=2\255\335\274\036\324\200\275t\370>=\305\214\006<\014b\307\273\323\214\330\274<\252B<\315\231\355<8\372\252;\354\347\243=\003\237U\274%\202\364\274?\023\210\274%\270\302\274\021\315\232\275\032#\213=\207\362Q\273\034\273\233=\356\353>\275(\367\013\275\304\334\037=\010J`\274[\266\223=\302<\003\274\035\277_=\332\323;\275\325\355\316=[r\203<\3335\005=\327\230\021=\335\211n\275K\204L;\257\251\371\275\346\004}\274K:,\274\\\335X=\034\323\000\274\274\0227\275\222F\244<\010\201\343\274\311\022\010\273\215-\254;t\300\343\274\241{\320<L\302K=\363G\364<\242\273\245\275\002\r\351<\246\252M=L\273o\275\031\357N<T\223\335\275\221 S\275`\324\205\274t\017e\275\367\306\346<,\277B=\203K\210=\334\356\000\275\006\000\230=\025:e=\035\305\200<\335\250\276<\333\223A=\260\305\006\275\244y\352\275F\316\273\274\251\332x\275\017I?\274\273v\333<d\226_\275\332\332\005<1\275\033\275j\230C==t\272\273\372U\322;\316\302\030\273\220\207\265\274P\030\353\274O\342{\274|nN\275\353\035\301=l\004\233<\024\336-=O\266T<\252n\031;&/u<&\362I\275(\332\203\275\236\322\337\274\324\324\316=\'\205\207\275\257\033\360<\245\252\n=\346\033y\274\366\227\t\275\001\245\362;\364\241V\274f\346\027\275\275\242\237\271\001o\241\275\007\333\237\273\266\3378<\024\201\225\274\002\367e=\267\355\266=R\336)<\006\213\0059t\317\201=\257\352#\275\036i!\275\206r\014\275TA\202\275\336\336T=\315\262\235<\352\317\233<?b\016\275\2039\\<\262\265\242=\332\330\261\274@\265\254\273\262\355\253\275\212\021\354=^\253\014>\022\257\'=,%\364;[?y<\230Q\242\274\310\363B\2751M\340=\330\357\320\273!u\002\275\200\234\344\274\0250\305<\366\016\225<\256\236\202\275\235oN\274\267\314\222\273N\017\352<\3735H<\260\216\254<\261\253z\274]\355\241\274\271\362\255=\016\215\233<\274\224q=\261\021\347<\266\201\366<\235\022\244\274\240\311\307\275\232\351\200\275~\204\244<\227\206~=\377r\271\272s\315\250<\266x\014\274\372\262+\2759\254\202\274Lky\275\256\000\202\275\351/\317<O\311\006\274\306|K=\307\202\257=\256 v\275]`\253;\017\216\337<EN\272<x\007X\2743\203\"\274\200\025K\275\023O\256\2744\027\004:=\267\021\275\270l<=\316\021\250=\032\226\237<\232c\301\275t\303|\275\364a\200<\000}\002\272\3306A\275\266\361\302<\023\344&\2754\031\351<\250P\356\274\226\212K\275\246y\233=\303\323\004\275o|(<\276L?\275\3660\343<\317\225\331<W\005\007=7+\344\274\306\233X=\307{J<\036\226\221\274\3336\t\275Vg\267;\000\264>\275\356\273\200\273\334\353\3769\332\305\t=p\002\002=^\026\372\274Rm\350<{\034\254\275\271\320 <\213\342R\274\014\254\213=\300b\361;\343\305\255\274\340R\254<\214\305F\274\0378\';\223N\004\275\233\t\023\275\006\362\"\273\003\315\222=\024\353\223<\330\210\021=\223\"\247<.T\006=\016\313\021=$\212J=\277\'\177=\231\326>\275\"\204W\274a\261P=6\360!<{\255\212\275\272jp\270{\377\357\273y\331\030\274\211\352#\275} H=\\\233O\275\301\236\220\273\003vh\274 j\037=/\355 \274mj\352\274\224\344$\275\360Zu<\325\366*\274\021\225?\274\323\235\361<\225\027\241\274pX\367\274\243\212!\275\2042O<\020\242\327<\037\312\245=R\275\227\275\027\360\223\275\311r\310\273{\346\237\275UIY<\360r\203\274\330\036\363\274}\274\221\273?0C=\267\302\205<eo>=:\246\366<:\'\n=\344,J<\237\246\250;s\022f\275\016\362\005=\000\304z</\215\270<\353yo\275;\021\344\274\265\033Y\275\306@U\275D\337\257=\267\206\325;\363\330\324:\354\364\233\274\3747\343<\207A\327\272\261\250\374<\354\031,\275oJE=\243\350\324<G\252\302\274\225\021R<\255<\352<&\262\227<S\375\374:!\313\335\274ejK\274M*l;\035\313D\273\276n\025\275\017\216E=\227\372T=\353g\037=\331\232\251=s\321\323=\276\006t;D5\202=L.\033\275\365\022\233<\\\251\202\274\370\330\205\275\214w\016<3$w\274U\237\025\275,\r\222:/WO=(\365\262\275\t\240\010\275\366\3152\275*\030\000=\304\266\224\275\356\257\211<\225P\255\274\254{\024\273+|\264;\333\274\003\275{\203v=n\204\360<\275\245r<p\320\017=\234T\337\274ql\003>&\337@\273\301\356x<\034\035\235\274R\010\206=D\246\212<C\373S=\232\265\022=|\3605=H\243\306\2738f\342\274:\"\364<\232G\213\275\342\252\352\274\277\260\016=\346\271\275<E\332S:\"Q\004\275)\342\036=\2364\205\273\251\271\211\275\037\216^=\227\357K\273/.\021\275V\1776\273\034\256\177=)\024\230\275>_C\275\222\016\307<z8\002=\235c\376=\365\273\356;\262t\206\275\276\215\357\274\222F2\274V#\027=\222\371\r<\326\343\312\274D\340\014=<J\277<1*q<\367^c\274\314\"\203=\211\246\016\275\026_#=X\367\305\274e=\235\275\201aR\275\335\302O=\177\342\206\275\363\r\236\275$\n\273\275\370\3229\275\375\321\202\274X\"\245\274\255\355\316\274m\367x\274|\264\250\274b\014-=lrn\275\370$\241;\312U\333;.\200S\275(\351P=i\203C<i(#<H\325\363\273\312!\"=\330\013%\275\245\231X;\277\213\205=\260\003>\275\275\032\3028\217\251\375\274\352\365b\275\226E\204\274\376\204\262\275\334k\332\272=l\243<$/\211\275{\232\020\274\033\001?<\323\306\024=vAT=\024*\243\275\030Q\n\274|p\212<G1\210<a\331\351\275\014\344\240=\r\'\214<t\3538\274B\341\270\274\321?\210\275\372\317\366:m\006\202<\306\027\365\272\337\275}=\253P\200\275\355\263\317\275Ef2;\202\264\271:\022\266\220;R\336\232\275\032\217i=%\3773=\tj\001\274\270l\337;Kb\224=U{\215\273\231|Y\274\241-s\274\215\377\323\274\360\345\331:\252\353\275\274k\322\231<\366\370\302\275n\274I\2755S\255\274\247bc<NJE\275\"\341F\275p~9=yvw=\227\207\204=w\354\365\274\003!\306\273UAR=\355$D\275\210\002\007\274T\252\202\275\177\315\206=\230\rR\274Y\247\310\275;\321&\275\271d\020;\\\003\326\274\276gM=S\211\271\275p\226\224\273\256F\232< \226F;\335\376~\274\201\265\237=4\223w=\027\334\221=\210n`=\233.J=k\3219=3\251(\275\301\266s;\216,\200=B\271\006\2753]-\275\312\376\351\273m{\212\275\212\2017<]v;;\333U\354\274\3422\345\272\324SJ<\036n\235=\315\371\200\275\304 5=X<\035=qL\210\273\273\252\023=\252\304\214;S\370l<d~x=\344\206P<\264\216\002;\221|\301\274\222>\247\275\347$\233\274\264\207\301<\223\036\211<\315\rf;\313?9\274- \222<\244f\206\274\362\271\002\275O\016S<-\274\320=\375\372\342<{\341\t=\032\214\273\274\027\213\'\275\232l\373\274\375\250z\275\372\344\210=\024\321\247=\212\017\033\274\023\000\236<{\345K\273\205d\004=\267Xk<\222!|\274j\2431\275(\\O;\332\221\217\27420\205\275HW\235<\252O%\275\265N\242\274R87=\304\206o\275\365\360\240=\351\316\204\274\251\257\222\274\005\357\000<\353\373b=\314\323\311\273$\274\313\274\302\256&=O\020\236\275\214\302\010=x\0009=\322\365X\275\354rg\275\004i4\274\016\311\371;\026\317\272=\224g\212=B\256\324<+P\371\274\'\327\031\274\013x\217<\222\343\362<\321\216\220<n-\020=O}\200=\242\035\224=\3017e<\225Q\215\274+\272\270\272\335\351\260=~A\236=\317\220\230=\030\366\357\274\232\257]\275\373\312\220<\001%\037\275F\257n\275\010\242\'\273eD\307\275\375\326\n\274\025\316\204=\016\327r\275\327\235\245\274B\354\267\274dV\212\274u\362\372\274J\260H\275?\'l;\207Q\222=\277\010\257=I\211[\274\306cS=s\240\350<\001l\'\275$\313K=^\247\275;\202\217~=<\022\007=|R\300=\006\222d=\316\240z\274aF\343<\002z\340;I\t\342\274\014,\247\274.\2040\274F\251u\275\320;B<$\364\363<yPh\274\216\241\020:\324\223\023=\020Cp</\351\205\274_S\216=Y\312\246\2747\217_\275\265\030j<c{\\=\023+\"=)eR\275x`\"=\021\264\277;gf\021\275\224a\007=\014k-\273\217CO<\317\257\027\275\304\333\206<\312\010&=<+\206\275\r\334\251\274\017\272?=5j%\275`\036\037=\222]\277\275Br\222;\211\"\200<\277\210\t\275>\027A\275\004\332\222\275q\315\264\274\367\214\021=\2166\317\274\303\275\215;\315]G=\202\202\326\274]\247\374<\3720\205\274\005k\376:Y\003m\275\263\252\232=7+\004\275d\230\207\274\352y\"\275\345w\005\275}s#\275\353>w\275Sv\000\273\307\242\341=\316^\262=)\213\265\275]\256\002=F\211\025=;0\200\274\275C\271\275R\002\253\274=\"w\274?\036\031\275>\263\036<;\267\031=%\317\n=z\312 =\377\214o=\222\351\034\275\374 \305\274B\030\025\274I\036*\274\345\\\352\274J\017i\271\007\265\345=\304\322\246\274B\014\360\274\262pp=\331\334\004\275\013\277\307\274.a\275<\326\n$\275\003\263\002<\301$\325\267\001o8\275\226\n$<uS\037\275p\343p\275f\361\323;y\265\000\273\036-r\2753\347\232\274\316o\215\274\212S\204\273\254Jt\275^h\205<\314\221\324<@\013[\275r\016\301\275\006\310;<K\330\027\275\212\2045\275U\332\215\275A\023\010=\357Q7\273\365\350\316\275i\346l\275\024\373y\275B\203\230=O>\210\274\354\266\267\274\270\360+\275\361\334E=n\316Q\274K\204\226=xy\263=\033\373\343\274\031\347\227\271r\354\320\275A\032\244\275nZ\325\275rF\212\275\021\2407<o\377\r\274\217u\027\274\33341\275fLh=\033\022\252\275\261\004\211\273c\343N=\235\333\347\271Q\\\035\274\311Hy=\036xU\275\3666{\275c\335#\275\354\334\214\275\307(?<&\035q<\316\2063=\334\034\3569p\342-\275\374\372\013\273\036/\215\274\010\034D\275\'S\203<i2\312\274\231\020\205<\306\376\200\274\370\346T;^\305\325;}`\361<A\316\323<\230\214d\275\361\230*<\355UF=Ic\027\275\312rh=\323\240(\274\027\026\357\273&\302\226<\372\363I<q\031\362=y_\274\274\376\222\324\274as\334\274)y\332<\353M\371<\361\016\226=\344\024\030\275\336\254\027\275C\356\272<a\215\245:\201\363D:N\202\265<Tz\352\273s\273\254\273\031u\002\275,J\316\273\025\020i\274\030y\017\274\263\"y<\3728\324\274\010\236e<@\214Z;3\3303\274\321C>=\212\356\316\273\017-\305<\271!b=\227=\310\274\361\367\220\274\037\013\274\274RJF:Z\026C=>\240\034\275\363W\316<\360\352\274\274\376m]\274\t]\271\2757b\277<M\224\033\275\352&\257\275\002\342V=\235\341\230\275\241Zz=i\252\205=\036\314);\243\372\313;&\253\325\275\322\222y=\377\016\235\275\256\360\270\274\002\2610=o\244\217\273\333\257L\274\273\3143=\na\023=\'z\013\275M\311\207\275F\354\204<\3542;\274\373p\232\274\372\362\326<\341Wf\274\023\'\021=\000\243\006<\376B\016\275\335\206\273<S\236p<\352\334\031=\362\216\361<\016lU=eT\351\274\000\202\346<2\346\345<\332\216\214\274\264\247M\274X\356v\273\304\341\270<\257J\017\274S\014\267<\342Rq\275\036\216\355\274\241\232\316\274\007Z\240\275Ngt\274\260\312\254<\364\222\210<\302S<\275~(\037\275\026\354\026\275\306(w=r/c<\244\215q=\037\"\344<\003\n\024<\2423.=\002\353n=\247C\210\272\370\033G<b\361\253\275\360a\027\275\217\253\220\274d\322\036\275\244\263\020\274\237\0336=0\030\t\274\360\341v;\250\275\233\275\266\000\256<\353k\362\274\274\3144=\260\203\260=\215~\370<\254\254\205=:Rb<\372\3600\275\227\371R\275\314\2556\274\330\232\n<O \251=\276\301\252=\005t\261=\326M\233<k\2600\275\310\273y\275\004\\P\2746i\240<\261\032\366\274y\004b<k\000\216<E\341\000\275\303Z\375\274h\266\243<\t](\275\263)O\273\354Q\\=m\317\032\275v\301\256\272\240\236V\275~\004\024=\217e7=\020\013\223=\025\212\231<a\326$=\002\3037=/bL\275)\300\001\275\322\335\217\273\302\216\233=\351z\302\274\013>&=\031\262\205\275+\367\350\275\026\3356;\226\357x<j\252M<\017\225==\254]\004=\305D\240=H\227\013\275\217M\221\274&}\033\274\2051A\274\220B\000;\003\214=\275\246/#=T\310\034\275n\253\037\274\023\'\277=\321,9=u\363\026=,X\307\274\251\257\257<eM\353\274{\354\225=\216\"\313<\312$\014=\207\323\034=\241-\205\274\001\305\211<\027N\276\275\357{\213=\354\327\340<*\206\307=\242u\333<I\276\"\275w\303m\275\311zI\275\036\351>=\211s~\275<\005\273\274\223\224^=3\026\232\275\201\377\n\274B\242\241\274z\247p<\262\200p\274,\216\210=Fy\356\275\300>\317\2759\243\210\275^d\004\275eV\"\275\213\',<\363\267\027=\214y4\275\236\263\275\274\002C\256<RE\020\275\271\204\023\275\321\256\316\274\025\275\356<\311\r\253\274*\016\210;\264\334\316\274\262\210\244;T\034\347\273K\254\332\2730\272\r\275\224 \374<\360\264b\275\2042\312<\256\036\312=\021\343P<\340):=\242v\201\275\243%\010\275\004o\222<~S\265=\237\375\204<\342D\r=K\345S=i\005\022\274qa\025\275#\004)=\211K\202<CkQ=\234\326\232<\377w\305=\357t\243:\325c\231\273\300\265\365<\315\232\274\274\313\221-=\262V\371=M\177\t<0\252\254=@\211\343<\350Q3\275\360\216}=&\376\367;\303q0\274\241\r\220;\314;\t\275<\270\253\274\260\233\276\2745\363)\274O\252\314\274.\003\323<{\373\272<\264a\231=H\345%<\206^n<{\313\"\275\0230\252<\312W7=\342A\355\275\2215l\275\243\343b<\230\334\"\275$N\'<\373Sv\274+\363W\272\355\356|=\322E\007=p\326\375\274\330>9\274\370|\220= \353\254<\337H\001\274\336\362\272\273x\351\204\274\315\237\340\273\264\217%\2732\225\243=\235\267\276=\036\370\320\274\271\302V=\216\307\335<nc^<\377\300\220\275\377J\264=\'/U=E\325\024=4\036k\2750a%\2758\001f<\333\337\371\274\221\032\270\274\244\021\223\274\026\"\316=+\350\300\273\204\030\305<\037\220\375<\217\223\263;\324f\202\275+\363\243\274\314\265y=\210*\277\275\326G\243<:Z\024=\213\311\n\274M\356\311<\253\014\207;L\231\203=\032n\313\274\355\243v<Q\347\211=\251\311\264\274\232\361M=\221\253-\275\'\330\'<\355\244\255\274\346\207+\275\352%\002\2756\r\361\274PJ%\275\267\311D=\013\034n=Nx\274\274\320\022\326=U\nV=\"\202\203\275\247\276m=\307\217\336;\340R\360=\261\213\237<\230$/\274o\230T=>\264\025=\261#f=V\237\366\273\373&q<z\025\353=`\310~;\214?\275<\3341/=\320\267\235:I\021\235\275\204\370\302;_\017/<\363\375U\275:\372\n\275\372\222\200=\310vs<\211\315y\274m\300\264<+\235#\274\001\361\227\274\273\226\230\275M%\216<\035\326P\275\217L\213<\032\022K\275\234\344 \274a\223\376<\2661\225\275p\376\204;\270R\013\274l\307&=\315\347\374\274\250\366\372\275\307\360\226\275=\240\241\271\213.\270<\270\356&\275Y\273\244\273\211\276~\275,<\302\274\354\370U=\365}\363=G6\216=\235\342P=\347P\207\273\022\177\271\274@\004\205<\242\205N=\003\016\243<\275\336\330\274n\260\237<5h#\2732\227#=\362e\277<\033W\230\273oQ\211=\374\227\260\274{\233\203\273\370\211\020\275S\355&\275\274\232\212\274\237OP=\222\315\\\274\362\333D<\326)\334<eHC=3L\003\275B\377t\275\030\216?=L~\201\275+\207\242\274\260\\5\275\273S\255;B@j=\336\376C<!\024\361<=D\211\275\346\333L\274\362\206\016\275\014e\320<G\311\277=HP\232\274\327:\032\275\023 e;qgw\275\371Yx\275\210\006e=\344bn\274\331v\244\2731\261\216<\344\022\346<\026\337\215\274^UQ=\226(\345\274\026$K\275\0262\231\273\037L\344\274FL\005\275\010\360\\;\322\376\371\273\333\333a=\003\214\205\274m\017$=L\355\324\274Z\2458=\236\365]\275\207F\257\273\337\241#=\'\376f\275\246\326\246\275\327\242\373<\265\241\007=0\n\243\274\300\366\204=f\200\017\275C\322=\275$\371\201;\022u\315\274\231\255&;\327\232\232\274\320\201 \275\'\257\n\275\315\301B=\220\017\242\275\257\027\250\274\354_x;:\273U\274-\0062\274\177\235\274\274\nE|\275p\007\241\2738R\242\275\023\231\004\275-\210\235\274\016\\s\274\202\0130\274\001\231\'\274]\240\t=R\202_=\206\341\037\275\237\236\352=41\210=\232\334\270\274\206\235\262\275\357\026\314<i\275\272=\315>l<u\260+\275j\300\257\274\025\314\327\275/d\345<\201\355\245<\0025\225\275bj8=\210\004\364\275\347\251\273\274\361\314V<Kg\332=\006#\214<\351\020\307<4\245\250=\003u]\274\327B\014\275\365\021\302=\340\327\202\273\013\222\246\274\221n\263\2736\310\336<\307\336\336\274\036\272F=n1\374<\n\322\230=\267q/\275\206\302\354<\326\022W\274\270\0262;\246s\002\275\262@\301;x\236\331\274\3359\022=^\336\203\275\\\200|;\371\256\277\274FM\025<\344\317\200\275\207d\002\275\327\2772\275\356\253\267=\363\027\271<C\367\251\271\001\363;\275.\356\311=\252m\224;f\371i=\366\322\211=r\340\250=\212OT=\276\217\300\275\370\236~=;{g\275\202\233*\275:w\201;$\005:\275\241\377i\274\271\276o<\227\375\211\273AcV\275\377\256\013<#\202f=\\g\036:\254\341 =\215\332\234\274\310w\004\271\001\004\222\274\367\006\031\275\327\365\221=\032xC\275\026i\220;\354\3702=\352\035\301<\016\375\324<\353\366\007<Uf0=K*?=.{\001\2759\275\335\274\331S\206=\367\037\310\274\374\000\247\274`\"\037\275\375{g\274\3616\374\274\030\223\005=`\\\222\275\312)c\275\204I6\274\0041h=j\255)\274\035\001\253=\035\312\225\274\023\241[=\300F\222\272\373\\\254\274~\033\320\274\216\254e;\365\237\313\274\254\344\307\273Ia\007;\"P\236\2748\'\233\274\244Wx<R\247q=\251Q\223<cc\263<PLP=n}7\275\271L\374\274\221\345\331<\020\023E\275\313\006\207=x\254\027<\321\327\237=\031\251`=\240\014\250<\237\266\301\274\207\300\201=\225\270\230\274bTb\275\204\032\010\274\013{\314<\017\372E\275OY\263\273\307\266\323;\276H\217=\027\'o<\362q\267<\266\020m=\236\014b=\354i\224=\301\010R\275\034\246c=\337\311@\275P\206\236<&\032\000\274\177\2545=\021\236\037\274=\365\203\2754{\211\274}\312V=\354\001\332\273\326\037\210=[\217\327;q\367\345<\023oN=\325\211\241=G\004_<p6\312\274\304)\242=\210\037\351<Y\351\220\274\262+&=\314\261\242\2754\254V=\262W\331;\241\275]=$\345d<~\356\236\275\311\016H\2751a\215\275\024,\325<\371t\016\274C\022;=\225\373\241\274\302\3608\274\345\3123=\007\277W\275\352\225\234\275\022\002\222\275\377\260\235\272\226\210\215<\311\270~\275\\\210\212=\326\n\332<\376\023\325<\374\342\266\275\"\374\324\275 \236O\275\247\251U\274\332\'h;D\1771\275\302\361\323\274\2230\244\273\0108\376<\200\271;\273\023`\202\274yZ\350\271\340\233\222<\216\301\345\274\373-n\274\224\277\277\272\371\317\375\274\331o\206</,n\275\220\352\325\272\244\014\220<\242c\232;\264gz\275h\260\232<hm\336\274\276\243\340<\311I\200;\324\273c\273s\"\213</\227\024\275\264\316=\275\240\257\022=\010fj=\030\213\177=\364\254J=\273\342i=\346\305D=O\256$\275a\355\221\274*V\310=\321A\003\274\261\335\212\2758\262\024\274\272J:;\365\007\014\275\211\241\250\274S\005\037\275\215Q\026<\312\002L=\034Y?=B\037\220\275B0\231\274$\347\202\275v\330L=o\035X<\025B\005\275\250\362\\<\305?T=\006Z\257\274\027N\024\275\355\177\314\274n\315\020\275\216\236\207\274{\0278=\343\376,=J\343w=y\373\023=\235R\303<\1772\210=Q\202\216\275L\365J=\270+\321<]\346\303\274w\261\227<!\001\306<\017\032\017=\332J\227;1\262/=\016\\,;\001\236\210\275\310=\217\275]\302\252<Q\207\352\274\342\2159\274|\343\233\275b8\222\275\003\234)\275\212C\005<\232\321\216\275\021L[\275\023=\020\275\342|\024\275\312,\371\274\305|\267\274\371\364\035<\236\211\212=\247\316\270;I\3002\275\340#i\275\031\257\316<S\001\013\275\274\247S\274*\203K<\232<+=\2143m=W\363\220\275\331\023!\275/=<\275I\261\025=\236\3533\275\034\353\022\274\255\\6\275\232\207\201=\256d\272\274\361\334\234<\024R\344\273\n\275 \275\367\250>=R\257\217=5\322L<o\235\267<\350\365\022=t\232\034\275[Oj<\024\004\215\274\032\367\016=[\257\010\275B\375\216\274V\033H\275\257\245\341<\310\213\"=~\224\217=d\250\341<\351R\327<u\274\014\2759\310B\275\273\325\351\274?\366\371\274\246\227\024\274p\264\235<Y8h=\022Xv\275\006\244a\275\377\254\037\274\273\016\031=\356\374\277\275\314\377i=#\243\304=r\244\346;\3035\342=\356\235g\274\340\0314=-z\217\275k9]\274\225\3600\274\"\276o=\227G\362\273\020\t\236=\262\202\210=\253\222\246=YY\314\274\344\304=\274\033Ro=\2444\022\275\201\311\343=\275W\2357\357.;\275\303\365\377\273\323a\376;\251f\023=\020\245\302\274\231\316\273<\177]\377<H\267\353\272\303\003\322\274f\003E\275,d\022<\340}}\274\023\213~\272\224n\204\274q\274;\2739\330)\2752T\210\274\324!\357\274\372\211\004=>\362\035=\\\237*=$\365K=y\330\247\274\203G\026<\177\266*\275a\350\227\274H\270\264\274\371e\336<\014;\323;\353J\205\274\372q\031=\311_\252\273d\213g\272WK\325\274\215*\003\273\377\273C=\316\027\232\275\361r\355\274\2750\033\275WL\265\274\177\207\257<\024:@\275a\345)\275\206*\203=\267\254-\275\322\200\203<\346\000\003\273\211P&<<\252\013=^8\326<\030\214.<\354\266\254<*g\275<\034\r\031\275v\354\370<G\372\206\275d\021\316=\230\370\271<X\216*=\356\013\245<\267\261\232\275\327,\022=N\0339=M\337\241<Cj\213\275\006\302!=\t\344\022=\221[\266\274W3\200\275\367\033\350\274H\237\331\274\013\207\021=\037\nx\274,\323Q\275\362%\315<\006\376\r\275]?\331;%\250\336<g\353\334;\036\335\230=\037\270g<\027V\236\275\324T\240\274\213)8\275\337\364\204=\316\315Q\275l\373\034\274\273\346\203\275$\241?<s\2634=!\367\206\272\274\354\026\275\276\002l=\300U\261\275b7+\274\300y\220=8L\031\275V\353$<\276\031\257<\355\317L;]\007t=\003\217j\275yI\340<\2333Q\275U\341\343\274\000$2\273\030\203\277\273[\306V=\261\0177\275\026\251s<\027\357\212<\226g\240=\276\222\277<\2458\261=+\014\003\274\t>i=h\337H=\305)\201<\364p\275<I\353Y=\2660_\275\017_\322\273\253\246\237\274>8\312=\002\232\\\275\340\276\347<\200\331\352\274w\246a=C\257k=\240\265w=Y@7\274\017\003\010\272sx{\274m\257\035\275\262\010\242\274(\372\212\274\314\222\344\274~\323J\274\271$\t\275))P=0\340\332\273\257\352n\274tg<\275\347\020+=\20303<J\213n\275\271K\204=T\212V\274\211\212\203=\253\226c\275\274\027\035\275!\274F<r\337\224<v2\024\275r\205\342\274\245\007<<`\023\343<\005=\311;\035Pt\275\343N\002\274\250\324\264<\306@\344<\032Y\202<\306\370P\275,\333\030<\267\325\341;\0253\324\274\2451\206=q\026\365\273\224\204\236=\026\253\r\275\325\316l\275.\016:\271\372u\212<\t\377>=r\230n=\266g1\274\037\324|\274`\355\227=h=r\275\232\222\346<q\2702=\370\254X<\334\347\347\274\357#\353\274{\304\022=\341\336\224\2748_@\275X\222R\275\314x\300\274\020\265\034;M{\305<\360\305_;\232b\005\275\260ZT=\200|W\2759a\331=\333\004\363;z\260\267<\342 \035>\3425\017=<%\312\274@\252\201=\035\177\320\274\364\001\030\274\"\346\022<\3531Z\275.\207%<\373\002!=}-\321\275\177\t\364<\346Hj<\256z\321\273\302\327\237=\034\3718<pO\214\274\302\236\037=\362\rH\275\273\322\326;\245\273\204\273\203M\232\274\1775\021\2764\225R\275\367\237\017\275X\021\323;\333\276r=\344\250\261\275F\034t<y\352(\273|\016~\273\214\310\360;\332\034\270<\211A\213=l\261\221<\001#\203\275\n\243Z<\316|M\275r\222\232\273\211\206\271\275\334q\377<\003\303X\275\331 \351=c\376\010=m\222x\274\353\021\030=\032\255\004=\360L6\274\022\345\013<\207\271\207\274\264\3629=\031\255M=\241\304\030\274\316\274\353\274:\024\204<\241\314.=\234\220/=\350\304\323\274\356\276\200\272\314\202\374<(U\266;[/\276\275C\302\022=\020k\372<\263\234\225\272\032\224\237=\350\333\003=\206\363\027=\326Gc=\247N\230<Ms\304<\204\340\243\274\246\340\250:X\027\230=\276\030\006=\260F\354\274\317\003\274<~\255\033\272\337F\235\274@\362\036;\001\001\327=7\374\365\273\234\033\205<\342\216x=\243Zt<\244\214\212\275\0326W\275,\327`=C\212u=]x\022\275\224j\376\273I\345\3359\t\347j\274O\316\026>\336&a=\303\201\264\274\246\370\234=\323\274\261\274\036J\317;\220\033\013\273\3664\006\275\033~\027=\331\355N\275t=\356\274\032\346\220\275g\211\000=\036Z\033\275\307\r\013\275\320i\367\273#\212p=\000\245\212=X[\365\2749\301\370\274tN\017<b\316\025<r\264\346\274O\013Q\274\207\3722\273n\271\266\274\033)7\275\226\031Z\275>\325\205=A60={>\322:w,\233\274U\327I=\000\000\377\274\022\034\301\274w\364\276\274\007jE\274D`\005\275?\0241\275J;\031\274!\215\244=\336t\244\275#\355\007=\2116\265\273&\221p=\332w\304<]\370n\275=\240\211\274\026\373\251\274\301\343?=\266$\'\275\001$Z<i_\224\275\"^\307\274I\244\373\273\226v\000>G\215\317\275|2\001=\227p\321=\327\032\306\274\362\002H\275\204\331F=\275\004\256<UQ.=\277\201\025=\307\316\216\274\307\257,\273\331? \271e3\203<QJV\275M4\000;\370A\177\275\036MK\275nq\371<S\246\036=\370\360\014\276r\231\212\275^|\214=\360\2253\275\301\262\324<\311x\211=3\177\347\271\317\376Z<R\033-\275*\255X=\354\357\277;\224\253\221\275|\350\257\273q\271d<\346\201\026\274^\0060=\324[\227<\025h\331\274\205T\302\275\017\270\r=\307\002\350<\307r|<\025D\364\274@\236\356\272e\203Y<\214\270C=2\013\201\274*_\235=\237\355!\275\221\250|;\230\330J\274\216\310\305<\246\227\234<\3438\312<\301\274\024\274E*>=7H\262\275\304J\213=0d\207\2743\216\241\275\006Xl\274\320\337\266\274\020\014\262\275\342\202\033<M\240\013\274J\227\030;\272\034\323\275\'\3035=$\300q\275O\034\242\274\375\275}\274;JO\275,y\200\275_Z*<\260\320\215=\r\314O\274o\207\211<\03232<6G5\275\230\242\030\275Xu\361<\377|\2029\370\271D=\000T\230<m\\R\275\210.=\274)\030O\275O\002\266;\230@\366;\267\351\271<\344\311\014\275\031p\013\275\325%\203\274\022\224\367\273\240;\247\274\312\032\'\274)\322E<\034\235\021=\344\243|\272\233\014&\275\310\356&;\036\377\255\274\243\352[=\235\016\030=\265\323\253={,/\275\260\3131\275\253\010\323=\303\304\351\274\243\335f<\013FL=7\256\325<\3534\027\275ENd;\036`\r=\\X\202\275\2712h=\234\344\300\275W\325\020;<\260\346\274\375\tg\274o\340R\275\322\"\201<\230\035\312\274\316\004\234<\014\016/=\013\356\226=s\027\204\275\321\026*\275(\334\004=\241\301\312<\374\270\3778\203E6\274\303\372\026\276\237\372\234<\361\372\324\275\217\337|=\337\261\227\274;\222\210\272d\223\377;\335^[\275\004{O\275\311\221Q\275]\322\315<\367\226 \275\033\026\331;\034L\364<\212\354\203;\251\330\232=\035\225\251\274\t\202i\273\316\224\224=\000\321\333\275F\265k=\374\354\024\274\235\314\"\275\237ze\275\316w\323<@t\013\275\352\250\021;\311\2005=\312!S=\215\332\255;&\310\272<W\223\261<|\353\037=B[\266\274\377\343q\275L\364\026=\373\221\204\273\344|\005\275{f\247\275\304\017\211\275\2371\200<\200\366D=\313\324h\271T\005\013=\314]\234=\261\344\216<\003\251\311\274;O\227<\3238\364\2742Z|=C\351\253\274\224\217\204\274\363\220\374<\204\020\207<\266>\211\274\2644\222=\230D\024\2767zM<y\325\224=\t_X\275+\t\"<\212O\220<\261\236A\273\314\244\203;\022\311\230=b\342K\275\213Ql\275\354HD;\270\313\237\274\257\216\022\274 \246s\274h.\236\274L\336]\274\307\313\222<\267(w\275\261\036\225=y\222\236\274\004\034\357;O\014\006\275d\'c=\3125\344\274\215\203 \274\002\023r\275`\2674\275?\273\211=\332^k<\260\270\236;\257\001\260<\370c\006\275\004\022\013\275\360k\245<H\343\260<\212rE=\323l\316\275\372\227\000\274:^\321<&\314\002\274\014v\023\275.~z\274\343\366t=\234\202\031=\340\271\234\275\243J\215<\223\017E\275Df\177\275\364\237\221;\302\313R\275<\203\217<\326a%\2754B\325\274I;\276\273\271\242\355<j\335\222\274.\224r<j\007_\274#\236\202<\302\225\025\275\351\333\337\274\275\307\234\274\247\262I<\306\210R\275]\325\232\274\217\026\225\275Xe\212=V(\005=\001\225\036<\333J\021=B\235k<b\021f;\021\204%\274\257\002\236=\214s\025\275\206\031\217=\323DW\275@i;\273t(x\275Bf\353;\344I\212;J\201w=\372o\014\275H\262Z\274\023\330\307\267\216w\370\274\363t\026<\351\252\232=y\276-=\245\307\352;\217\310\325\273%\023h;?it<\274\207\265;\017\031-<\266:\261=\020M\000\274\232B\213=\2528\\\274\311\300\262=HM\234\275\360\222W<\257%p\275\335x\303:@|\203;\221vY=\033V\210:\216O+\275\351\300\226\275\365Q\023\273\316\367$\275\033}Q\274\243\031\n=\317\021\020<B\334\323\273}f\340\274hB\342<\014\177+=\204\321\352;\357\225\247\275\332XA\275\032\374\274\274\254\330\234=\267\325\324\273\257i\243<\263(r\275\257\016q<\213g!<\230\032\335\274\241\247\202<\r\017S\275`\001a=1\327M\2731k\025\275%\237\237=;\257e\275\241^\301\274\375\270\266=\352\234\335<\330o\332;\264\251c\274\273\362;<I\001\251= ^\360<C\367g\274\257DA=<^\242\274\376\237\240=N\033\010\275\306a\206\275\225X>\275\354&9\2758\322\025<_\274P\275\261/\215<rKe=\232)\200\2758\035 \275:\307\357\273c\313W;\024\037y=\362*\312\274\217\201\207<\331y\251<}\004\275=\254U\275:\226\271\004=\200\266\322<\216\204\237<\nK0=\337\340\010\275\301\310\t\275\375\305\264\275\227)\362<]\243[\274;a\315\275\220\325)\275h\375\004=ec\344\274R\216\360<u~\226=T\003\236=HCz=\327\213\261\274\220M\247<\254\231\030\275\276\022\324;@5^=\250J\375;\'\376*=\210Z\373\274\221\010\334;8}\022=\235P\027=o\317U\274\312\314\251\275\327\036A\274O\375\265\274\204\250\r=@g\177\2740`\t= \213\364=T\005\014\275\215\036\211<\346\300%\274\274\373\017=\215\014\352<\245\355\001=L\373\316\274I\324\244\274\261d\221\2757i\267\275\332\0255\2741\313e\272\343\004\216\275\233\215\373\274|\247\r\275\347\252d<\203{\324\275V\334\225\274\351\336\013\273\017\372\037;\033I>\275\223\356\250\274\177\207\376;\225\363\230<\277~\004<4\325Z\275\340\277+\275\313_%\276\322+\025=\370l\213\274H\371i\275Ki&\274\327\342J=\021%_=n\234\234\274\374\324m<Ntm=\274]\231\275D8\343\274\230\277\314=s\017\321\274d?)=\342;?=\372\373$=\217g2\274\237.\317\274\014\252\264=\217b\025\275\275\372\024\274~!\\\275\026\314\343\274t\255\000\275\023\010\034\275W\016\220\274\371c\024\274x\305\225<\030\367\032\274\253\310\232\273~\317\334\273\333\226\212\274\0007\336<\261\327\311<H\3274=\251S\220\2750\222\177=%\225\"=r\242\211<-\355\324=\212\217\033\275\341A\240<&\026\006=x\246\023\274\241J{=\341g$\274\215\001W;\251\343\315\275\311\375\r\275\353[\301\274\022\332t=g\341/\273vH\276:\306\355\350\273\201[\331<\"\2029=\3151K\273\320\237\204<\002\352\357<\232s\317\274\001\336\313\273n\271O\275yB\363\274c|\211\274\214\205\332\274\027Xe=\227\024D\274A\254B=\202d\000\275\316:\320\274F\200\213\275\260A\034<Uj\247;H\373B\275\355\233\310<\264\363\301=KI/\275\360\025\017=\267\312\r<\334\375i\273|\262\004=\304 S<\247\026\024\274Q\267K\2754\010\333<\354$\265\275j`\035\273>n<=\2026\240\275^\226\'\275\337\017\231<f\026\304\273BO\320<$>\"\275S{-=\022\271y=\003}\010=\370\010\203=\034\"\n\276\256f\377<\305O\210\275\326\005\234\273\247\325W\274\313\200\020\2757\235\202=\237T =\341\341r=z\026f\275\023\306\335\273\346X\314\275D\241\204;P\3642=V\307\t\274q\275\367=\226=\"\275\000\250\035\274\215a\237\275\023D\255\274\002\004\350\274?\250m=\235\372\325\274\307\036\217<%\202e\275%\346/<f\237\026=)\rW\275g\002\223\275Z\265\274\274\006\303]<\001\023#=#\3746\275\310\366\253;\3700\344<\246Be=\231\251\366\273J9S:Y}\017<a[\211\274<\215\326\275s\354\036\275#\217\036=\205a\022\274\'\006\n\274\017\322\032\274\227\300\331\274k\313\245;\336\333\231\275w\322.=\347\225\201\274\332\316\222=y3\222\274\023?G\275\305\231\035<Gh\360\273\317\177\262\273Z\302\350\273\263\037\236\2741\004|=\347\311\032\274Q\3331;E\307\207\274-\305\224\274=\255\266\274\232j\007\275\3466\324\274\232\305+\274\301\327\014=\037:\250\274\003&\206=\234\264\205<\326I4=\334Tt=h\0043\275\251\360\200=&~\304\274N\255\350\273\217\361\340<\237\200\320<Rit=.\377o\274s\370|<\346\2173<\007\267\030\275\270\226b\2734x0\275xu\017\275f\3508\275\326::=[\260\233\274\273\351\330=U\372\226=wc\037\275\235\251\004<eA\255;\334\263\020=\222\005\203\273\245\321\277\275\217\'c\273%\311\224<\372\237\355\274\255\255\326:Q[\234\275/z\237=eB\227=\252\243\023;\222\366G\273R\343\034\275\210\343 \275G\023X<\2173\336<fx%<\364AN\275\317\222-\275\323Z\020=N\003?\275\372>\336\274[t\333<o\313\212<!\270#\275K\027\247<Q\033\177\275t\003\365\275\177e\346\274!m\277\275\310p\231<\252\t\035\274\312\273\260:o\326\035;\"\301\2619\243=\233\274\303\225\354\270\264_8\275\265\2063\274\022%@\274\310-\333=\022\224\034\274\2274\251<\266\306C\274\370KU\275\372\365\023<`\r\350=\332\"\227<\300\206\255\273\254\353\256=R1\000\275\003\351!\275\313\331\230\275\223\350\007\275\333%4\274)\361H\274-\222r\275\324Q\036=\326Be;N\341\036\275\2745\365;t\030Z=\004\341\327<L\'\271\273\r\356\214=\340\344\013\275\232]\t\274\354c\221=\330\347\007=\302\rK\275v\030S\275\033A\272=j\0234:\"\001\341<\037\013\005\273T\013\377<\315s\242\273\251\3055\275\220k\330\274\372\177\300<\374m\371<\275\2109\274\275\373s\275\343\214\036\274\243T\035:YWx\2746\277\032\275\005\261\227<\250Ow<6\"N=348\275\377>\010=z\272\272\274\211\217\360<\200\243\303=\265\332+\275\353\332^<\273\014\026<6\342f=\366\205N\275\307V\210<\246\033\315\274\305\251\307<\330 \230\274\006Q\203\275>\205\212\274=HA=\253\362\221\275\315I\201=a\353\227<i\227\017\274\332%?=\003,\014=\032\321\256<8\317\254\274LK\360<\340\252,=\266\377c\274\016\360C\275\260\257\301<\030\216X\275\276\027\302\274#\340\n\274\225w\027=)\357\006=T\212\327<(\016c\2750\234\227=\215Eo\275iK\003=\322e\314\274\232S@\275,\260\202\275\302\013:=\322\027\327\2740\317\323\274L\016\265=.\263\331;\346V\227\274t\266\224:/\375\362\2742\272\010<\253\r\013=\024\363 \275U\274V=\224\375\234<\347)0\275\201\022\263;\343\302\244\275h -\275Z\327\217\275e_\212=\334\007\344<\356\020\351<\nz\207\275\326\r$=\327]\362\274L\300j=\272x\342\273\223\365\n\275\\\206\312<)\000\\=g\260C<E\017\244<\177\002\201=0\027\215\275o9`=\333X\000\275\205\251\022\274\325s\223\275[\030\375\272\032\035\0169;\240u\274\334\tC=\351\003F\275\246\017\032\274\204\312\245=\260\r\213\274\3015\033\275\225\376\020\275\377J\346\273\367\246\302\275\022w\302<\247j\037\275-b\036=7\2141=\232\231?\274\262\375\003\275a\3058<\266\207\214=\332E\214\273\305\327\263<\275\343\243<\"d\n=\004F5<cKB\275\3428\030\275E0\207=\217\266\307<v\357\013\275\235\1773=.\360\000=\034&\275\273Q(\352\274\250\002!=\305\310\000=\214w\317\275\204\357\321\274J5`=\274\317~<\230<\332<$\317$\275\220|\306=\370r\251=\216\226\202;ao9<_DY\274\032\346\364\274\364\325\356\273D1\306\273\314\233\231=]\357\322<\265\254\252=\225\240\272\274(W\223<\206\036\242=\335\303\326\274Xw\212\275\321\271\220\275-\245\226=mbe\274\242[\246<E\207\336\275\254.#=\202\2744\274\204,\260<\237\244\253<\r\265T<\254\232\004=\3325\177<\024\213\264\275\344I\271\274\"\362,=\265\265\201\2757 W\275VT\376<\366\030\264\274?64;~;K<\347\275\253\274\034\207\331\275A\016\223=\234\221\003=6\032D<C\374\215\274\221f\310\274\323\345\207\275\315`\210\274\"\003\216\275\"\376\332<AB-\275_\027\023\274\020\237\207\273\016\227\204\275\320\0038;\211\214\365\274\300?\335\273\353\276?<\245\013\223<\231\214J\275\210\350\251\274}\000\257\275\264\270\236\274_fS<;A\340=\3002\321\272\313\233\336\275\367F\266\275\375\2074=\'/\371=\220\373z;\255?\207:\322\373\256\273\215H\220<\313\325\016\275\210i/\275X\254\032;\313\333$\275S\021\303\274yN\022\275\313fB\273\267\237U\274\200M\327\274Ne\004\275\236\351\246\275\312>4\273IpW\275\001\356\245\274|\213\350\274\326\355\231\275\223\262@\275\024\036\267\274\324\027\017=0\240\241\274)\202\025=\323\027\330\273b\253\226\273rvK=\363~\206\274\267\277\014\275\035F8\275Y\256\231\274;\000\233\274A\017q<\206\276\021=^j\020;-7\t=a\361\377\274\t\027D<9\277D\275\004\267y\275I\024\023=\327\203\372<\370kf=\202\322\303<z\321y\275\321+\236\274\006\231\034;\2775\022;\376\377\270;\006r\242\275\274x]\274Yg+\275~aJ<8LC=o1\n9\352\314l7\037k\213\274\223CR\275\276\235\326<5M\235\274\301.J\274V\017s<\306Z\260<hP\233\274P\350\365<f\203|\275\376\336\233\2734xH\275\304\2225=T\'>\275r\027\301\275\226\001\202=\273\323^=\027\213\207\275\204\234i\275`t\323\275;\306\233<\250\203\025<\362\211\220\275!\363!\275O\376\243\274\376\300!\275\221M\202=\020\300\021\275\354\301+=/Xo=\3567\301\273h\001\034=P4?\275?&\200\275\255wT\274\371v^\275\253a\205\275E\262\037\274\304\\\312\274\375v\324<\251\232U<\206j\301;L\262\024\275\357#W\275\304S\256\273\3659\264\274\335\342\277<\247I)\274MH\315\275\306\206\\<\227V\327=\005\241\351;\350\377j\274l\211\215\275j\272\344<ub\214<\232#\331<\302eS<\275\006|=\372\267M=\'/\255<\001z\243=`\242\027:\244\223^<\312\224#=\t\367O\273\264\351\221\274\244\202J\275zr?=\344\266e=\2044\332\274-\374s\274\317\273\243=$\350\014\275\224\340{\275\267e\223\275\345\030\233\275\n\310A:{\275\302=\215\324\270\273\200\273\253=\354\251F=k\251\007\275~=I\275\333\333\212=\247\237\223\275\265\223\021\274\341S\371\271t\354+<\315\260\031\275\017\241P\275\303.)\274\357\216?=\333L\333\275\34214\275\014g\006<Axl\275\202h#;Cx\r\275Hh\362<\226E0<Z\027\201\275\357\355f\275\226\360\205=~&\270;M\233%=6\234\262\274,\037\245<?\253\212=\360^\263=\352\350k<\221GG\274\232\352\000\2744\214\214\275\236s\300<\220\2272=\2322\022\275\250T\006\275\027\342P=il|\275\270\034`=\026\001\003\275}\"\334<\343\371\265<\351VD=\251?\247\271\232\353\034\272\327\235\025=\007\215\354<\335\201\255\273\001\364\030<\346\211*<\t\033\222=T\027d=F\334\253<i\366\253<_\014\210\273\010\335S=D\026\355\274\243\026]\274!\311\211\274\344%\200=,W\365\274\377\315\207<`CR=Pb\300\274\243\371r\275\0143#=k)~<>CF=\365I\246<g\2022\274\351wl=\354\037\021=\270r\033\275\217-\260=\030\262{=\250\034\230<D\317\003=\263\223Y=\263\256\345:#pu<\330\177l\274\273*\234=\324\000\201\274\265\245\037<s\274\300;\324\035X=\261\025:\275\345+}=\307b\371\274\267\030\276\275h1\027=\213\215\214\274j\311\313:\361Z\221\273\274\347\024=\022\350\r=zBl=\027D\205\275k\303h<\3022\026\274\202\217p\275\245\343K=\301d\215<Q\2674=%\270N=g\320\006>>\027\026\275\201P\357<\256X\036<\227\360\220\274\231\337\r;f\2038=\0050g\275<\226F<\327\353\233\275\303\346\221\275^\3404=\233\226e<\010\200X:K><\275v<\302\274\010M\354\273\254\205\001=\2713a\275R\334E=X ]=d\334?\275I\363\033\275\371\340\250\274\030\t\372;%y]= _\013\274\322K\307\274W#\212\274~Dq=c\362N\275O\031\375:Q8\235\271\221\335R\275\250\330\233=p\326$=\237\323\372\274U\250N\275:\236\t\275&X\017=k\236\376<\202\234s\274\257$\227\275\263\256\306\2743\246\352<Q\317\257<\211%\266=f#E=|\303\031\275\331\276\022\276P+\221\273\254\247m\274\2725@<|\274\224=\226\326\204\275\362\027Z<\362\227\007=6\0050=\025\272T\273w\253\276\273\023\227\211\274~lp<`\313|=\336K\231<\312\216\035\274\312J\304=5G\320\274\246\316c\2754:\336<B\247\213=pw\t\275\"\225)\274\336\340\"<?\351\201\275R\331\204<\227\353\001=\250\ns<\366\357\252;l\005\234\274\212\216\301\274pl\002=\221t@=rq\243=*\250>=\371\313\025=\352\2764=\304\021c\274\3011\216;\203\311\244=\350\306/\275\'\274\365<)J\020\273`?\206=\214\241\306\271\354l\330\274\230A\023=\226\007[\275,\346^\275,\243\341\275\017\236\010\275\252\206/=\236\233\232\273_Q\216<\302F\037=h\021\263\275\275\256Z=\300\2717\274eI\365;sq\224\273e`F<H\370K<\227\256\373<-\334\311<\346\201\312<\365\033\244<\355g\264\274\034Y(\275\033\324r=3bi<\002\270y<A\227\376\273\353\235.<(!m=\010}w\275e\n5=f\201\262<\304\252v;\246\212@=\271w\247=\357@\321=\225g\224<q\261\237=\025-\235;\214\n\366<#\366\000=U\026\215\275\217\361\t;\204\364\261=\221\227v=\031\314\025=\341\304\010\275\362\261\277<\321\244\256\275i6\250<\345C\013<d\251\024=4\263\265<\304\234=\275\347\3300=\305\002\210<Xx\035<\023\260\225=\022T\315\274\325f\003=\251jh;\315\224\263<\313\364D=\342\005j=\354\226\360\274\302x\234=\035\367n\2747aj=\010\304\013<\315\025\271\274~\337\343\275\250\027\005\275a4(\275w\330\n\275@\222\221\274\2437\026\271x\242\201<\023Ps\275|\361\022\275\"\1776\275\364\2023\275*\375\370\274y\363\357;\'\256q\275cC\315<\277x\017=\360_0=\006vO<YV\245\275J\016\t\27406\234\274\231\361h\275\355!\360\274%f\034=\305\035(\275\237\367j\275p\301\206=\367\321.\275\351\261w\275\237\266\224\273n\2114\275\205\250o\275G\366D<\026{\360\272\270U\257<\343\312\311=\204\367\274=5\202\301:\\\323\247<\333\000\304<B\325\347\274E\236\233\275\342>)=\312\342\006\274\211O\021=I\246\r<5\366\001<\016\367\205\275\007\305\256\273\016\024\262\275r\360\025\275\213\370l<\r]\220\273\211\204\\\275/\2238=\034\211\363<\003\305\220=\230}G<3v\"=e\305\351;\352\211\322;=\273?\275R\352\"\274\216\036N<\265Q\244\274d&\201\274\017\311/=2`\357<\337\"b<\025\225!=\276fq<\021j\207=\305\330\217<\027\233c=\025\333\320\273\2046.<&\272\315=\323N\217\274\357\212,=\271\270\033<\026c1=\250tS\274\352>7\274\347lE\274{4\270<\2121l=\364|O=\230\023\014;5.%\275:\035\004= \206\362<\213s\334\271<\346\344\274\215\350!\275Q&p\274\253\005\235=\n{-<\312}\221\274j51\272?\204A=\252\204x\275\"\326\311<\257\215\252=K7r\275 HH=\3276\272<H(\371:\231\341\210=C\031\352<k\200\336<(k\252<\3633F=\261\316T\275tc\223\274\366\330\224\275\313\247S=\342\372\037\274\227\317S=M\333\026=\202\304:=\224\203\363\273v\013r\274W(\267<\322\017#\275\302e\013=\361\026~=\277\323(\273\200)\014<\370\363\037=\0378V\275\240\201m=\313\346\322<\235JB\275\024\246\316\274\217\275\203\275\0021\205<\215Q\203=\204\031\360\272\342\007@=\030~\276\275\205Y>\274\231\032\311\2753R\216=$}`\274K\365\264\274\026\344T\273\304\317O=az\255\274\000\377\302<\241n\260<\007\311\245\272se\330\274\t\177:=\204O\200\275d\273\233=e\000\361<\357\361\010\274F|\366<<k\336=\262\271\023=\3678\241\274\226\206^\275\036\220o=uo\240\274gR#;.\373P=\224~\032;\375\267\036<I^\236==\370G\275HO\200<\275|\351\275\030\304\333\274\361#\200=&\367=\274\"\023\036<\272w4=\032l\271\273a\004\004=\010+\"\275[\tq\275=\346~\274\257\315^=z\306\244\273\237\3373\275Yp\202\275\355y\336\274r\316\371;\263%\024\275\235\013\"\274\016\225\356\274\253\t\207\275%\332\201=\346\336\324\275\024\301r\272uK\366\274\222MG\275\371\3441\275Pw\212\275\220Q\234\273\274Lw<)8\002=\026\265\315\274\237>h<\352\'\361;\0236\372\273\365\236\032\275)\020}=v)O\27499L\273v:\005\274\n\257j\274\2171\227\273Z\027\233=\201i\304<\304u\375=\363V\005\275\007\315\324\273\006T\266\274\261>\n=\031\177\210=\221\222\256=\013r\334<U\317F<\305:\006\275?\331P=\257\001\001=\016\314\032\274\004(\271\274\357\223\326;dy.\275\262\034Z=\2705\364\274~q\266\274z\356c\275Q\331\346<\335\244d\275\240\013\250=1\243\333\273\016\210\225\274\355\332\3338\240\002\350\272\266\327\360\2736\357\204\274\342\2344\275z\277\322<\340\373\037<c\212\000\276\205\302\236<>!\342<\274\3234\275\344\311m=\202\213\225=Y~2=\231\275\215\275{\2729\275\n\307\224<Y\371L=5\201\033\273*\303\302\275\270\210\247\275\300\365\240\274\221R==\273\200\332<\324\036[<\345\217}<\231`\004\275\306m\356\274*?\233=\313\325)=\252\275\005=\373\350\204\274\346m\310<\030\340\006=;\224\272<V\321\222=\310\307\206<\365\264\017=\036>e=K\013\032=\352_\001\275\244\235\302\274\3507.;\351\333\225\272\331J\324<\0137v=2^B<Dc|\274\"\376H=7\364\250<\275\2415\273\315\373\215=\001\003\"=\006\311\323<\264\201Q\275\367\354\260\275o\312\220;\244\027\332<p\363\216\274i\365\024\275?\264\241\274<a\217\275T[D=\230\246\362;\236\303\224\267\014\264\207=\302\332\227=\201\031\344:\032\346o=a\317\234\274\202\316\000\275HD\004\275\330J\306=p\227\362\275|\306\221\274\022po=\222i\225;\363\267\352\274F\033\354<\322\217J\2750[ =\321\312\334\274\242\001\001;\243\311\347<w}Y\275\223\277\346\274|\"E=\262\301\230\275G.#\274x\263\237;\366\n\250<a{\361\274\344\3725=Ml\221\274\364\256B\274\3613L\275\306h5\274m\340Y\2749\350\005\274\355\306L=\245\225=;\247z\022\275\240G\260\275\263T\031\274wk\271\275F\277\257<\227\255\200\274\210\356\177\274\201\347\032\275\201\250\014\274\253pc\274\3200\320=qO\230=`]\373\274E\373-\274\343\025\276\2749\"\237=\246\274\003=*\246\250\273\014\342\253=Q\037G\274\232\323\177=^\025|<\272XA\274\367y:9X\014\274\274g\321>=\372\241\204\275\\ap=Di\346;\334\337\220<\350\'R=\334B\271=+\352I=\352\256\215\275/\010\210\275g\031\356\274\216\002Q\274P9&\274\255\023R\274=\350\355;=\364\243<\"\356\017\275s\250\250=]\301\321\273\201\214\277<\027\325\212=\365\222_=;~\222=U\016\321<;\225\202\273\323S\351<\2572\003=j\242\317<hc\267<\204\213+\2756\312\2609=<_=\244\235g=\217\014\014=\251\371\366<\263\264\020=I\355\205\275\3311\266<\276j\006=\031\206,\275g\027.=M\225\226\272v\356\252\274\372\365\320\275\214\212\237=iB\334\274\326\307\213\273\250\177\034\274\0273\206=z2D=\222|\020\274\215\006\350<naz\274\322\244D=a\246b=\212\3457=^\322\014\274\3026\202\275 \251\315=p\022\021=\324\374\251\274V8^\274\264\254q\274by\032=<\006\221\275\275\243Y\275\023\213v=\355\212\274<u*\275=q-,\2751\323\335<&\226\024=\025\032\221\274\013\233\021\275\364O\222=\312Yw\274\016\226\316<\265x\233<\214\256c<\035\236\322\274\201q\204\274\332\335B\275h\352F=A\236I\274\350\311\303<\"\330\275<Ef/\275\352Z\353\274\024\'\026\273(1\232\275|#X\275\016\023\222\275\240&\311\274m\222^\275MN\030\274\265\034\321\275}.0\274\337g\240\274\210\207d;\2158\257\275\226p\252<-\236\307<z\371F\275\342!\026\275\026\355Q=Yu\036<?0\343<\345i\255<\274\236\241\274\007\023\324<r\251,=\371#Z\275\340\276\366<a\375\n=Q\234F\275\202\226\037=\2440\277<]:{\274$\253$;j\312Y=\266:\326<W\007\334\273\310\004\001;\345\352\310=a\263Q\275\306\026\212\274\330\356P\275\\\337J=\254\315T<3\023\300\274?\014\'\274\241^U=\225/\350\274\304\322\023=\302\202\215\275\203\246\026=s`\325\274\032\351\345\274\'\321\234\275\250\032$\2743\357H\275ZbJ\272?\303\"=7r\315\273\325uf\275\"\262x<\321\345\221\273\344\233\201<\200\322S\275\211e\022=\263\274\210;\004>U\275\025D\306=\211\222n=Kn\204\272*\246#\275$\343Z;d>\210=\301Jd<\354e\245\275\224\267\347<=\003\005=\224w;8Bz\202=-\323\310\274G\345F<\031)\354=\242gS\275\365^\004=\332\307\364\274\023k+\275[\002\014=U\366Z\273\247XQ=b]\033\274\332v\231=\007\213\373<\217v\214<l)\206\275\232\370\266:\365\023\016\274\1772C<\360:\265\275b\266\035=\241k$\275\243_\202\274\226\\\227<\256\321\305\275\267ys<\3566B\274?\225\233\271\300N\037<\256\232\032\275ra#\275U;\270=\177\370\013=\304\301\221=\245J\251\275>g\000\274\007\304\273<\'\217\223=\033\340\005<hXV=\223\356\n\274H\006\035=\035\022\022:xM\237<\313X\225<\207\332I<\227\027\317\273e\342\274=`cj<8\016\311<\000:%=7!\253\274\357\014@=5\271x\274\026\311\317\274\021\371q\273\214\000@\274\312\266Y\275\201hE\2756\0102\273\327\007\223=J\276\213<\341\020\275\275B\356\240\275\236:\245\275\345(\242=(\376\037\274\220\370|<\351B6=\236\356P\274\214\217\210<\204Zq\275[?\236=\001F\201<\340\233\347\274|[\357\274!C\030=\233\213\246=\356\225\341;5\242&=\275N6\274v\332\000>9m\r\275\266\275\252<\275\337\214=\213\200\256\275&\020v<s\010\234;\336\327\262<\266kl\275\236\210g\275!/\361<\265\032\213\2758Q`=\206\356\002=\200\213\'\275\212\237\201<_3\027\275\363\306/\275\317\311\220\275\276\2755\275\306\331\023\275\263\024z=\227H\006\275T\355\236=\357\307S;\264t\007;\234y\031\275\376S\253<\342mT=\241\206\2619\034\350\232\275\336\245%\2759$\336<\037gK=_\222\330\274\221n\305<\302\335\031\275lB^<\256\3053\275B\354:\275\316\327\372<\315[?\274\216\344\217\275!ez\275\347\365T\274\365\374\310\274\376o/=oZ\266=\033u\204<\303\316R<[Y\373<\"\303(;\316\265\332\274\253\3603=\032N\n\275\351\352<=\362\023T=\001D\225\275vNv\275\203\331\324;\374\024\226:\204\013\020:\004\256\005=\260\017a\275axk<\214\241\005\275BV\n\275R/\216\274\037\256\265:\332\344 \2749\276\271;\312\206\024\275\364\215\037<hu\222\274E\023i=\247\020#\275\317\326\031\275\245_\007=\363\267k=\203J\222=\272\343\327<U\037\265<,\023\266\274s\356\'\275\016\243\020=_\360*=E\313\275<\305\341\n\275w]\346<q\210z=;\367\001\274\231V\023\2752@\312<\256\335\005\275\345+\214\275\350v\260<\237S\244;7\255|<\302\334\365\272R\034\027<HG2\274\335\255\223\275\245\252\377\274\247*\251\275sXe\274>\032~\274X\342\312;\230;\201<\303&D:R.x\275V;\220\275\267}\217\275\235\027\002\274\221\271\315;M^M\275\253\267|\274\322L\'\275\010\304\023\275Ws\212\273\376\222\201<\030\264\027=\266\373-\275.\315\335\274\243<\347\275\334\247d;\220}\275\275t\230\235\2756z\\<\005ku\275\201\301\020<\267\266\203\2741\002v=\\`\270;T/\234;p^\237\275\222D\346<.\032\317<\230\360\366<\267w%=\005<\201<1\245\216\274\003\244\211\274\\\031\202<\2266\013<\003+\257\274&\202\002=@m\301\272\n\027~=\371\t\021\275\213\214\303;\350e\"=\253I\214<\037\224\311\2746a.;\274D\306\275NK\033\275\033b\034<\346ud\275\276\034\324\274(\353\333\274\3142\016=q\243\207<S\275\'\274\301E\234\274\374,\342;6\240X=\034\337S\274w\302\360\275.^4\275\307\016\332<\265\323\373\272\242\243\304:K\331y\272\236\331\317\274\264\216)\275\njb\275\2633X<x\255F=e\2322\275_\n\226<\322;X=Xi1;\360\254*\275w\360\225\274\031\204=\274\270\213\377<\204\236\250=k\223\321<\324\032\017\273&\323\026\275\177\340\271<\215\305V\274\000\356s<\223h\362;\372\227\215\274\031\365\023\2758.,=\003\221\245=;\032\355<dZr=\241\231\225\275yP\016<\301\245P=\t\217K\275\272\233E=\213\374\334\274=|?\2753m\204\275\036\0357\274G\345]\275\n\206\235\274\303\324\220=\000\210B<\336*M\275\025\363\014\275\315\306\240\274\010\t3=^e\222\275]\330\326<\020O\370=\3421+\275_\304*=\203\033\312<av\230\272\305\322V\275\223\222\370\274\231\271\336\274\211\224Y\275\234\033[\275\253\225\351;M\2652=\300\341\363\275\0358\362<SOv\275k;\236;\344\021\244\274\225\224d<\006F\r\275\217F\343\273\3157\226\275F\217J\274\262\244\002\275@\336\306=\320\307\360;\'\317\304<O\313\274\274}\r\336\2744T<\275\240\\\257\274I\036y\275O\221\275=\266|\343\275\236g\273\273\373C\"=\026\335Q=\376\214R=L\331\213<c\206\255=\233\301\225=\265\312\332:\371\372\363\273\207\002\206\275,G\232\275\262^\373\274\266\323\260\273\265%\022<\264\340B\275\277\302\323;\212x\370;B\304m=\364\227k<\307O\032\274S\r\350<\224\367\177\274e\366\374<\330\363\203\275\035\203\322<\030\025\330\273\2271\367<\036\t\020=\252\275\201<\333\243\347\272\275\":\275zI\331\272\014\324\273<\000\230\255\274\350\370\244<\315MQ\2756\223&\273\270\023m\274\374\276\240=\242\"\247\274\375V@<v\203\212\274.\031-\273\030\303\223\275\254\000\002;\356T\222\275g\357\255\274n\021\t\275[\005X\273m\363w<\312\252\274\274\305\340Q=\203<4<\262\326{\275\003\377\372<_\367\002\275\201\301\003=\025\304\027;\220Q\010;\245<x\275^J\347\273G9\037=\256\2279\275\033/>\275\224\"\025=\371\224\216=>\320N\274q\032\361\274F\276\351\273]\035R\275T\364R=\322\255\357\274|@\274\275\364\036m<\231\'\233\274\345\231\260\274\001EX=\030\3116;]\222N<\271\230\226=`g\302<\023\376\330\274e\3650\275\031\254\311<$\034\267<\334Z2\273\246\027\275\274\014\032\005=\026\n\014<@;\264:0\247c=8\265\350\275\225P\204\275\031\230\007=X\0141=\254*\262\274\344\256%\275\205\035\177:$\272\367=>\231\214=\364\316\216<\257\231x<<`*=\371\333e\275@\343m\274\307\027\250\274\361.\021\274\017\033]=\310k\032=\225=\232\275\025\342\203=G\301\337\274\034A\323<\223\332\241\275\354I\037\273\264\321\033\275\327\242\257<\377\340\217\275\036`L\275\030\026\214=\310\330\214\273\231\230\233\275&\202e;!\264-=(\206\334<\005o\236<\232\'\036\275-\370\260\275#\375\r\275\t\035\230\274~h8<\343\341\263=\210p=\275\314\216\362;c\017\247\274 \033\255\273\305w\267;\327a\341<\315\367\353\2758M\232=}\215\323\274\365B\264\274\354\010C\275\001*k\2752Z\217=\r\304C\275Jp_=\014\313\362:\036\221\306=\272\267Z\275\021\303\341<8\363\317\274\323k\017<:[\177;\006>\275;\027\255\310=`N\251=\035\272\240\274v^\265\274\334\217y\274C\334\222=\347`\245<\354\0061<O\374W\274\376\3734=;\375\017\2752\340\004=\336#\275\274y\2013\275\177)\221\2750\350\201=9j\'\275\253>\325<L\266\034;\314\256d\275\350N\202\2750\022P\274\277\337\204\274\027\013`\275@\246\220=\232\223\177=XJ\334\274Y\335\216<cQ7\274\216M7\275_\375M\275v\0132\275e\"\031<\330\302\306\274\034\016\260<\242\264D=\246J\256<A\204B=\000~w\275\357h*\275\315W{<c\024B;r\255\205<\322\313\325:\260\333l\275\345)\206=s\364\335\273\300\321\371<\201K\306\274<v\272\272\373\315\234=\343\324\022=\276;\237\275\370\377m<\267\221H<0\237\337\273\246_\323<\267t\221\275h\225\202\274;\030\":\255\016\235\275\030K\216;\036/0\2752\032(=\017\t\201\274\306\377\327<{\023c<\240\230\300\274\365f\345;\345\212\021\272o\335\321\274\225\275D\275\306P\257;\322\317\003=}\035\343\273\210\302A;c\253\343<\032\031\320<)%I\275\203\307q=u\311\203\274i\222X=\031N)=^G\220=\244A!\275t\277\032<\333I4\275\3042\013\2752G\262<\221/\223\274Q\216G\275\006\350\272=\246\002\003\275\026\r\206<1\263c=f\366\032<s\337\340\274\247yW\272\231c2\275\r\317\r\273N\310G\275\266\237|\2749\341\255\275\202\026\360\274A\213\276\274\321M\274=\030<\366<d\327S\274\210\270\200<\326\246Y\273\216\227e\273\3256\022\275\244Y\320=\225\201\350<v\256\006<^!\366;XW-=\373\021\251=\270\006\223=\2561a\275=\301\022=\005\253\006\275\222$J=\232=\237\273~\233t=\321\262\023\275,\246\262;\315\271\201<|\030\003<\256N\202=\327E\205\272u\315E\275\037\276\206\274\350\"<\275\245\244\265=\351\020e=\256Q\200=\255C\305\275\363\025\002>Xm\241<\204\256\341\274,\016\211=JQ\027\275\270\025;<\037S\276<\327\272\330\273$\365F\274\324r\343\273\024#\342<j\217\252\274w\374\201\275\214_G\272]\363\224\274\306`\006\274YB%=\250\251\246=\252\r\376\274&\350\347;p\r\203\275\023\304\224<\336\242\253\273\245\030\010=\266\n\215=\305\033\206\273\006\021z<;\3233\275\263s5\275\367\325\315<\006f\242<\022y\366<\2246\202\274\211\r\020\275\241\\:<\363OF\275\201\340\224\275:&\205\274+:\227\274\304\025@\274\347\260\211\275QK,\275\257\361\000\275\270r\023=\341\363\034=\\\201\026\275\217\245o\273\354\211\236;\232+\273\274\350(\031\275F\365w\275U`?=\3373-\275|E\210\275\270\217\376=\3605@;\200\341\337\274[y\314\274\246\353\352<\334\353\006=\351\004\230\275\\\014\'\275l\203h\275\316F\022\275\3250\r\274{\242w=2\000\036\275o\017\035=q\032\200=\334u@=Y>\315= \301\022=\007K\236<N\247\036=\002\330\255\275\317\002Q;\312\2417<\220\363 \275=\212\215=\227k\017=\301\230\025=\214b\010\274\350\302\002=\203\374\2229\247\025\270\275\350\2527\275A\226\004<\264P\024<\263/W\274UK\337\274\276\267\203\275yD+<\374N\335=\364\243I\2755q^<\251\237+=\335\210H=B,\346\274\276\223P=\360V\214<_\226V\271k\340l\2746ef;9\017\356\274\365\303\313<K\023p\275c\312\255\274g\215P=LGM\275V\rO\275\205\337\203\275f\"}\275i+<<D\204\261<\266~\303\274\300\213O\274!\315x\274\034\242\361\273\215\006\254\2743S\n>b\001\004\276\247\025\361\273\241\210\311\273\205\031\243<\265\373\342<\337V\216\273\214\000*<\027\332\260\275H\361\254<\360L\342<4a\230\2749`5\274*\220*\274\215W\200\275\265\332\244<\211K*\275?\344\310<\345\326\203=\225\272+\274\224K\325\274r\360\246=\226\361n\274\tH\237\274\017\302\026\275\355=\322;\023L\341<\304P\211\274\245\312\202\275\315\257*=\n\374\030\275\2608\035\275g\250&<\177\037^\275\034\247\234\273\032\326\361=\2311\177\275\3077\225\274PwI\275\036\225\200=\327L\301<\277}\004\275\023\221\315<\370!\\<R\243\033=\266\320\264<\205m\213\275m|\n\274\r.\320\273\272\273\325;\024w\237=\246)\365\272\360\027+=\004\314\337\273Ato=\336\001>=\204\212\326<NI.\274|\223\206\274D\"\212\275\342oI<\013\253\002=>\260\264\275\2735t=\034\nE=|\205o=\317\036I\275\027\177\024=\264\352Y;\321\3426=\006\361\311\275\236\313\243\275$\212\275\273\341\232\214\274\267\376u\275\035$\205;\365\t\233<=\323\341<J\331@\275\260\343\007\275\020\373\010=\267\370\202<g\204i\275Nr8\275\\nX=*\006`=\274Q\207\275\361\263O\274V\027\302\275\226%\366\274\232\206\225=\361\337M\275k\266&\275@r\006=\210\035\007\275\277\310\334<\245\357\231\275^P\013:)\331P=9\002\234\275W5\230\275\344\n\346;\355n+<\\\361T\274\026\357\223;\010\366\232<\360\373A\275\212\211\240<\352m\307\275\376\260\214<\357l\300=U\217\t<\n\006E<&\273\355\273\351a\r\274\3236\217;\307Ms\274N3k\275d?\211\275h\021\262\274f\023\363\273n\037g\275\313\226B=Dv\t\275dh\353\275\270,\321<\323\342\267\273\307\217\212\275Rq\221\273\226\007\235\273\334\023\\=7\261C\274\242K&\275\254*D=\373N$<\337O\270\272>\254\240<a\314\226\274\337\371_\274\373\340\362<\323\027b\275V\226\231\275 \227g=Ee2\275\361s\027<\272Z\263\273v\365x<\244\205\\=\337\257L\275J\"\363;\302<\367<jP\227\275\241#\367\274\037]2=\r\004\n=\247\2355<\332\372\031\275AU\313=\000\033D=(\216\001=\247<\036<&\335\202=\320!\\;OI\217=\273\350\336<\2372\257\275\374\177\030\274Y\001N=e63;\313nF=Rd\275\275IC\242\275\'X6;Q\300\370\274\345\304\231=\276\255#<\306\2031\274{\n\n=\231\204\267<\024\211\365\272\013\237f=\314\200\366\274QS\300<?\233\265\272\376T\224<=\203\224=\337\320\335\274UO\327;\337+\276<\207\007\254\274\325}\300</\305\215\274\021\r\355\274\216D\364;\206\ts=7\032\001\275\\l\234<\346V\363\271U@\354<2eu=\266\357\327<T\275\n\275\375\227\251\274\310X\023;\005f\346\272\'s\335=\276_\217=\237\207\352<\343P\250\274\024\336x\275F\0202<\020\241\310=\262V\357\274H\n\251\273\257T9\275\000=\250<\214\252*\275\'\236i<\327\374\245\273\330\206\213=\356\257\265<\001#\374<\302\265e\275\026\026\037\275\032\376\030\274\004h\202\275\016,\225\274\t\305\246\274\355\020\037=\217z\301<2y\243\273p\017\305\274[\264>\275\313\375s\275\270<\177\274g\030\221=\036\0359\275\214\340z=\230t\000=\356=\275<S\353\267\274\357];\275\222\260\352\274@\336*=\304\231Y\275I\225\225<\214\353O\275\n\354\327\274I\233E\275\030\206\033=g\030r=A\265!=g\326\033=\311\246\332\273L\205\177\275\"@1=\242\267\326<\264/\010\274\022\337\326=q\365N\274\314\005\267=\335\252\300=\356\265>=\002\257\214=\237S\002\274\274\2216=\356\013\271\275\237\205\023\275\327\245\030\274\272:8<\030\274\361=#\013u<\222\322\026\274\311\213\376\274\016\333\001\275&I\023<\365U\226=\376\031s;\247\347\333\274\240\257R\275W\322t=\371R\334\273\3613\202\275\350\342Z\275A\266p\275\020f\023\275\375]D<\364T\201\275_\336\244<\243/\327<Y(|<\2666@<t\271\t<\312T\366;\214g\330;\217+\312;\036\375\276\274\233\334j\274\363\233\277;\307{0=\352f\306<\\\213\241\2732\274i=\364\027\265\274\201\216\341;\247f =\363&<\275zO(\274&k@=\036I+=\3013\242=I\206\375<)\306\210=\301\223\220\274/\240\263\275\261\325\"\275a-\203\275\367D\204;\3353\277<F\225\307\273\254t\315:\337\307\201\275tn\215<~X\277\273\021\327\007<f\020\025=\017r\346\274\233\367\224\273\"S9\273/W\341<\336\244\211\275@\211B<\202\226\307=\024\336\243\275/\266\341<\206R\250\275\3311\277<\346t\255\273d\t\205=$\177L\275\272S\235\275\031\353\037>\225\333\004\273M\266\270;\333\341W\274\020\003\326\274\315\274\301\274\264\345\251\274sd`\275\234\214\352\274\3504\025;|\251\205\275\200YB\274\336\334\356<\003\277\237\274\331\244\363;\2777 \275\250\257\221=*u\010=Nb_\275\375\004\'<bq\235\273\307\214\207<\026{\346\274\365/\306<\257i\316\274^\322\245\272*7*=\237\210[=i\241\220=/gl\275\234\306)=.\350Q\273\300<M\275\034\272\214=\351w\270\274t\020\201\275A\023@\274\031\362s\275\371\270@\274K\302\t\275\230\307O;\0376\271<\245\344w\274\371\256+\275\203\206\321\275\006D\264\275#k\037\274\013\222\005=I;\001<\314>\004=@\262\320<\035\206;\272l\272\271<n,<=H\370M=\355\234\024\275\371x\203:v\231y\275\331x{\275\035\350\224\275M\356O\274\263f\212<\261\372-=Jy\003\276\332\326[=\325\222\363<\276\371\354<\240\243P\275\013\3028<s+D\275D8w<j\303 <\310\242\261<\313\344\000=\367TE\275`\232\216<-\201\345;\320#q<\321\\\354;\037#\317<\227:\346<\371wM;3\037\252<*Vt\274\225\036\213=Q\301\351<\031\253%\275oM3<nuE=\254R\017=\351\227\315\2759,\224=\014\320\274\275\212\307\326=32B\275\306@\254=\267\354\314\275I\273X\274\304u\222<\310O\245<\000\333\001\275\024p\252<\261,\317\274\303\256Q<\250p\222=\227\242f<\212$\233\274\362y\223=\026\351\017\275\316\025*<\006\203\265\274\333Q\213\274,a\216<\003\003\305\275\312\270\301\273\267\333\221=E\257q<e\267+=\321+\177;\021,\246\2746\243\024\275\306\344?\275\207\265&\274;\033\025\275\342l_\275\'\244\270=/O\274=PA\273\275\366\341\344;xF\360<\\\302\220=\262r\354<\222MO;\355\362Z=S;\347\274\035\335\217\271=\263\'=\345\275O\275\212{D=\244m\017\275IM\013\2755Df<\230\216\252\275\371\317>\275\\\"\003<\177\307\312;\260\360\300\273\266\235\231=R\017n=\250b\215\274c\212\215<\032\021\256\274\003\332\000\275\014$\215\274b\223W\275\366\024\213<\246|\002=\311.\n\275\303V\232\275\357\260\237<\336h\335<\353\3020<i\212\n\275\357\346\224=~\024%\275cQ\356\274\254\322\236;\316Jd=M\0043\2740R\\=\362\325d<\205\217\205=$\033\373<k\265F\275\345]<\275\243\035\263<Dz\214<\316\212\245\274n\265\252\275)\330\242\274\3266\226=\377\227S\275\251X\010<Ge!=\314\224n<|\301<=\241Df\275\224D\005\275\277\325\310<!\247\325;\200\013a\274\031\277\021=\207y\263\274ca\215<\300O\331;y\303\225\274hC\341\272\354X\213=x\355,;\206\236\005;\2265\363<\327P\353\273\030\302\362<\337\343l=\253]\016\275~8\\\275<}M;,F\205<\342DW\275a\'\321<\321mE\274\226\347Y;t\026\251=\214*O<\334\233\205<P\202n=\223U\235<\375S;\275zBw\275e\030\202=9\224\370\272\363M\313;!Z\226\275F\314:=\266\364b\275\253\207 \275\321\262\332<\357\366\013=\271z]\275*\031\022=-\014W=\216b\030;\211\r\351\274\353\353\017\275\230&{\274\330h\361\274\\\334+\275y\tY\2750\213h\274\'\206E=\205;Q=\254\242f<\243\371\343\274\203,\215\275\210\233\360\274t\271P\275\364\272\274\274?\211\366\274\221\362\231=5z>\275\325]p=\274\214\354<\215\352\000=\377\204\214\274\234\226\223<&H\352;)\262\325\275\263\302\332\274\307\240\337<\362\252\t\275\203j\220\274\016L\206\275\025\232\244\273\203\340\007\273\211/\210\274\307&@\275C\221\221=C\017\350\274\206A\354\274\306\245b\275\016\251\233\275\275\370]<Z]D=\236o\307<V=\224\275Tl\"=h\275\310<\262\306+=\204\022\307\275\366z\260\274}q\262=q\206\222<\003\317\014\274\271\236;=\007}D<\373\203o=\247\235\226\274\235s\203\274i\220\212<\206\312\246\274\360t\'=f2\035\2752\222)=2\241,;\333\032\215=\014\201J=\032\252\232;\\\033\220\275p\307\177\274\256\315\230<)\321_=\026\310-\275\273\264\356\274\023S6=KSE<u1b:U\006\212\273\221O\345=\334BT<V\233]=\016\002\177\275\357\345\033<6\303\336\274\254}\201\275\177\253\\=\354\266\301=\225\315p=\340G\341\273j\r\001=\244\027\233=\223\000l=\273>\001<\313\367\220;z\341%\275-\344\006\2728k\266\275\323k\333;\244\256T=(\nU\274\323\347\340<4\323\223\275\241~\344\274\241\032|\275\304\275&\275\233\3534;\273;c<\324\307g=\321N\270\271a\300\230=\206\224\025\275\372\214\026=\313\321V\275\367\352\223=\376\317\233\2751n[:;\271\274\273\tfN=\317La=\313 [<8\276\231\274\003;\003<\204Z^\273\257\360\216=\250\262\000=\203\223\362;BOy=\025\233n<\273&\304\274\314\022l=\253r`=I\247\313\274b\200\337<\006x_\275mQh=\312\200\334\274\r\360p=\'\224\337\274\254\205\375;\250\320\260\275\252\364\237;$V6=\217*6;PR\340\275\322\'\243\273\315\305O=\204i;;2\317\004=\022\247\253=\002.\007\275\355ym<fq@\2752#\366<\251\364\033\275\310@$\275\037\'\375<\261f\025\274\360\371\013\275v\331\375\273\026Xx\275\317\330)\275\365{_;\244\272b\275\021\307\205=\222\023|\275%\216i<\340\331\010=H\0225=;X#\274\370\021\234<\343\264\023\275\245\270\024\276v%\265\273\206\366\002\275\276\2235<\275r\365;\036\3053<\371\342F\274\360x?\273\340\t\253\274#4\332<\254\354\203=\327{\362\274Pu\333\273\2675D=\004u\016\2754\265\240\275\023\265\301<m\014\204<\004\377\265\274N\257\215<\250A\305\274JW\271<\217\347\322<^\256\313\275g8S\275oV\304:\227\327N=\034s\354;\275\233\017\275J5x=\245\'\231=zs^\273Vr\n\275\344\257\264\274jWM\275\340\364\262:\366\\\266<\r\033\362=\'l\233<\352l\213\274\034A\227=\351\360,\275}\325f\274\212\327\241=\001L<=\231\317\251<(\373\317\273\020\224\363\273\233\251I\2746\342h\274\224\351\n\275\220\302\244\273\357\356\247\274\266KT\275\360\205\014=\200\301^<r\367\202\275\322\276\312<Y\332\260<FG\357\274\027\310\326\274b\222\"=\n\027\307\274\275\nl\275\356\204\323\275\007\252\353\2740\313\346<\302M\250<\237J_=u\205\334<<]\253=O\365\3229\336\020\240: \360\271<Vf=\275$5\202\275\235\317d\274\264\325%=\376\3127<\204m\364\274\030Y4<\270Tu=\312\367v=I\320\322\274!O\367<\220\342\243\274\326\245\007\275D\336@\274\370\r\211<`\302\224\273\276\257\241\274\234|\330;\346\033@\274S\026\272=\006gZ<<;\022\274\354\321Q\275\301z\004\274!\031Y=\207t\n\275E\235\212<\221\024D\275?\307\026=a>C=\253\2179=\001\030\241\275<L\007=AbW=n\211\316\275\226\013F=\212\301o<\377\202R\273\216\227\223\274\253\000x\275\300\017\240\275\r\033\336\272\014\350E\2758\037\337<B\222\014=\036*\317\274X\010\243\275N\214S=\374}\266;~\240.<\360q\020\275e\022\240\275\010\031N\275\353\320\006\274\242D\273=#\232\027=\300e\210=_\254\236\274:xD\275\340\273m\275\007\241\302\275A\312l=\3669h\275r\220Q=\342Q\200=\207\347/=\016\034\252;\247[0=o\007\237;\304&p\2754\252\217=!\340\213\274Krn<|\335a\275aXf=\272\316\244\274W\014F<w\314\241\275\213\270\033=a\266\006\275Y\332a\275U-\226=\345\236\211\274\227[\262\274\2331\037<[~5\275\377\001\371;9\241Q=1\247o\274\327\016\276;I~\014\275\201\360\226\275\310\376g<8\252\242\274\334\302`\275\023y_=,\225+=\021\371:\275\232\214\204=\307\232b\275\371\206\000\275\213\3007=Y\200\302;=\000n<\323\266\351\275\331\304\371<D\245\273\274\273\201\207\274\213\033\223=\302\240\212<\274\010\300\274s\035\376<\023\241\262<\270\"\272<z\350~\275Z9\035==m\250\275i\250\306\273\261\322\271\274\324KI<\337{\217<w1\237=j\257\n\275c\332\260=\265\231\335;\322\324\031<\323\273\"\275\331Kn\274@\227g;*\014\216\275\314\327\374;\265\366\370<ke#\274\357\211\020\274D-I\275//;\275M\370\003=t\306P\275O^\331\274N\333\206;\016hv=\265\345H<\301\002\001=R\222z=\t0\314<\216\365\254;bA\005=\n\247\211\274O\372\022=\216B\307=\203\024\330=\314\n\000\274\3239\270\2742\277\'=\244\374\375<7\032l<\376\273=\274\230D\344\274\326D\337=\355\233r=j@\234<\304k\222\273\310\262A\274L\333\030;\002:`=\310\320\272<\341\356\324\274\032\214\270\274\353\345\246\275T\032\215\274k\002\005=j\336A\275n:\214\272\321\022\260\274\301\221\222\275tz@\275yH\337<\302\300\\\275\335\302\360<\360\326B\275\360H\264<I\006\311<\321\277?\275J\263\021\274K\215\276\275\334\265e=\217\210\251\274\242\036\017\275\336[\256\275\252\362\036\275\233\301\326<}v\270<\n\214\375\274.\024\310\272\351\340\003=\330\030\266\274%\250^\275\252s\017\275B\231\335;\330\263\211\275\331\343\260<\247\300\367\273|e\016=\344B{=\374~\221;\212w\273\273h\270|=\027b7\275\3608K\275e\005\254\274\001\036`=\211\037(\275K\304L<\223\th\275\035\362$=T\356\205=]\342\254\273\350\307\023\275\271\235n\275f,\275\274\354*B;*L5\275\207<\346\273r\211\014\275T\210c\275+=\354<P\345\262\275m\017\211;\267-\377<\357\210x\275\r[\225<h\313-;\251\2462<T\257\026\275\035\350\255\274r\r\370<]\310;=\371\204\264\275\003\357\016\272\255\002%;\2466\003\273qe\220<d\367\365;`\347\242\274\230\332\006=;|\322<\004\324t\275n\371\322<\013\344\237<\361#\262\274\213 :\275\250G\025\274\002aq\275\031K1\275\317\247\342:\003\231K\274\025[\323\275D\033A\275\270px=\345(\367\274\305\250q<\350\266z=1\2743=*Y\353\275\205\342o<\335q\006=\022\213}\274\361\034(=\335\311A=\235\036{\273\237\331\271:\321\357\016=\202\216w\273\326\347\037=\372\264\321<\010\\\230\275\322\245\236\274~Eq=\334\357\001\275\236\'\2129\3103\246=\177\315\014=\314\234\247=\254M\027<\217J\210\273\212\342\'=9g\217=3J\213\275\241\027q;\264EZ\274M\350\263<e[\361\272=M\347<&\206M=\036\365\336\274i\244O\275jW\001=HuA\274D\311\321\275\377\347Z\275\347`\301\274wl\336<]\344\300\274\267\375a<\351\216M<\311\024\"<u\020\213\274\346\246+=WHc\273g9\273=\341\0205<&\020\277;~\363~\275t\277\303<\231\303A\275\320\362\026\275\014\034\301\273\332\256\201=*\267\027\275dY\037\275\260\r\302<\363\371,\275\203\274\241<\320\200p\273\327-\201=\370Ct<\232\2471;\274\303\036\274\331\026\004\274\003A\355\274w\324\220\273\331\354\240\275^\274\014=,m\234;\3076!=\020\3128;.\337<=\272\033i\274k*\006=\033\037%\275\252T\320\275,\214,\274/P\200\275\371lF<\033\215\201\275\266\301\370<\221\314\264\274\315\037\225\275\274\031r\275\013\016\346\272(G\242\275\341\033\213=Rl.\275{\034\207=\343\365\177<1\317\200<\233\315M<\206\002\266=F\245i\274\370\201\347<\002\304\021<\004\250[\274\317+X=\013i\021=)\3044=\355%\324<=<\332=Q\225\"=p}N=/\221L<\326\377\270\273MF\221<\022,\241\275FB\347\274VA\212<<^\327\275\235\245I\274\275\356\250\274\017?\325= \300\314\273\233\0032\275\177\026\005\275|\347\014\275^\021/\274w?\r\275]\312\005\275+7\023\275T\244{\275\231\'\016\2764\003\204\274\377\272L\275\274\251\315;\353\3272\275\340\2763<fxs\274\334\371\267\274y\337L<\177\273!<\341`\010=\232&\333<\032\306w=\301t\n\275\\^:=\316\260u\275\253\033\261\274\213\375\241= \024\306\275\364>\373<\225\277m<\237\276\366\273\340Y\022:\221\036\n=\373\273\207\273\022\330\t\2750\220I\2751\\\002={<\210=\024E\006\275\035\266\203\274N\016y<\232f\263\275@\354\204=\034P\200\275\243\353r\275}\243\212<yc\275<l\'\252\273\346\nT=\n|u=V\345\322<9\021\275\274\024*\340<\311\330S\275\013\210/\275)n\016=$\3374\274\351w\236=\220\003\276\274\207hZ<\327:\302\273\254E(\275\013\307\013\275]\241#\275c(\244=c5P=(\004\223\275D\007\201\273\245\201`=D\244\017\276\370\345\334<\237\357\353<\252\365\277\273\324o\233\275\247H\033=\213\262\334;[b\363\274\222q\205\2759\241T:\323\024U=\305\311\024\272\333\326\343;Xq]\274\345n\312<\004\025\214<\2702\264;\305\034%=_u9\274VG\307;)D\\<\377Z\214;[\243\326<\215\325\323:_q\206\273\351\254\231\274\204/3\275\354\005\323<w r\275\336\024\241\274$o\005\273\330\375\206\274\031 c\275\342\325\003\275\257B\201=H\001\r={\033\304<\243\002:\274\010\3521;At\335\274\250\237W\275|zZ=\302\262\202\274\305,\244\274\353d\234\274GV\010=\220\225\336\275\254\007\201=\211\332\026=mE\216\274S/\320\274\263\264\332:\376{\026\275\316\3277\275KG\243=\274z\215\275\355x\007=+_\020\275\303\331\361;\343\264<\275#\022\'=YJS\275\353\267\025=\024_\000=(\273\221<\223E&=\375O\301\272\0260d=\237u?=\rO\033\275){\342;\255=\266\275\256U\002\275\227\0350\275\"\276\355\274\214\334\030\275\264\n\332\272]=\t=\313k\006<c\030\367\274\212\330.<\333\3274\274\3454o9\217\360\002\274b\007\267<qH\225\272\241x\345\272\257\260i\275v\227z\274\023\010\253<$\210\216<\330~\260=\237%\t\27579C\273\240V\314<_\332\202;\322X\270;\365y%<\270L\307<\3029\004<\361\263X<M\236\252\273\306\203\226=\330\213\t=\353\377\032\275D4\304\274\364\344;\274Y3w\275t\334\252\274\315\333\204\275\261\272\017\275H]\303\274\253\2411;\022D\213\275>s\370;L;\223<\271\3720\273\030\250/\274\305\250\016=\021 \220<[%\036\274\214s\227\2752\355\305=7f>\272E|h\274\331VH=\274\322\025=)\026\233=\"\014\030=:\311\027<\006\245\366\273\327\037\272<\005\353b\275\256,~=\322\032\211\275LT-\275\333\206/<\016\314}=\373\301\013\2750\333\022\275\241\276\022=\336TR\275\'\353\216\275\274\3071=\210\324\241<\217+*=\035\006\222\274K\034\264\274p%\354\274\323\005\257<O\253C=\t\227\023\275\260\346^\2757-\257\2758D\027=\260,\001\274\204X\217=d\220;\275\347\001)=q\264\351\274s\301m\275\310q\270\275\314a\354\274{>\266\275\242Z,=\200\325+=\026I\221\274K\237\252\275\242d\253<\311\365\010\275\223\276\265=\340\226`\275\221\332\346\273\014\214\204=\337\235\231\274b}A=d$5<<\n\314=\013|\032=Q\334\244\275\355\310g<Y\261X\274S>\262=l\263\224\275\026\022a\275H\372\305=Mi\303\274\333\026X;\301<\003=\360\237\205=H\343\370:^\266\000\275^a\231;\233s!\275\231\242\005\275\361\265/\275\205\022:\274\215\336\005\275\331\315\263=`\212\230=\202|\235<b\231\316\274\323\263\343<\373W\322\274q\342\"\275e\326\253=\014\303\010=\333\023\";2\306\312:\001\352?=?V\245=\2529\n\275\324#\252\275\250\340\221=\017\336\336\274hFH\275[;[<\221[a\274\335\305\310=\221\201\217\273\211\303\241\2759%x\273*\320&<\033F\231\275\002A\213=Fy\007\274\266\244H;\"_\'\275(e\307\274\005O\310\274L\300\217\274q\226\240\272\340%\322;Z\370\223=\356\247W<t\253\245\274r\215\226\275+.m<\010D\255\275exk<\363\207\303\275\345\0246<\022m\007\271\"\307/<\000|H\275z+!\2747\322\352<Zy\217\275]\271\227=y\252\304\274\310L^\275\372\263Z<\331\366,<9\374g\273\200hl=\271BK=\301\254\262\275\035\007\215\273\251\276\227<|D\032\274\275(\316\273\302!1<S\355\350<\277\354\226=rD\273\274\316=g\274\305\366\036=\023\303\033=.Rf=\"\221z=\200\321\001\275\224h\276\274Wo\303\275\241\364\237\275:\023\211\275\365\257G=\037\215\313<\322\000\360\274\311E\311<u)\214<\366v\237<\352Yq=\3078\322\274\233G[\275\237\360#<\262\023\320\274\017ZD=\013h\325\274\217\020\013;\250\005\010=\004\331d\273\232\n\023=s\264I<\322E\375\273d>\213\2742\363\244\274\213?\241<\3775\353<q.\216\275\030\336\036<z\375\244\275\007e`\273X\314`=\262\236D\274\223\010\022=bFS\275bCu\275\002l+=\214\234\331<\005\224\331\273%\251\204\275p\251\267<\311\334\221=\306\036D=\221\2053=aJ}\2756\361H\275\221\267\215\274z6\225\272\016\247\205\272:\276M\275\035\370\'\273\025\347\211=\264\'\017\275\304(\001\275\375I\027\275\223{\366;k\371\036=\364\2304\275\337\262\024<.\'\221\274\310\373\037\275\331H\272=F\307\201\275|a\026=\357\t\217=p@\203<X\331\263\274\271\361\201\272K\302h\275\306\220\031=<+\330\274FaE=\205>\276:,W\t=\\1\263\275*\036E\275\034\252\324<\316\354#>=\276\336\274\3724\026\274\276E3< \231\210\274;\357\330;\204a\306\274\212;P\275\273\354W<\332\204\202\274\211\314\217<go\034\275\372$+\272%C\273\274b\263\317:\213sP=\334\225x\274\340\375\037=\360\216\262\275\026\2703<\370\342\016\274\212\330\226=X\321==F1N\273-\331\t\275\244\010=<\344\021\252\274\200Ea=\264b\365<\252 \337:|7\026\272\202\313a;\306z6\275\260@\003\275\353&T==,$<\341\360~\275+\345\344\274f\323X:~\004\313\274t\3644\274N\274\342\274\221|l\275\331M\255\275\"!N<g%\233<Y\317p\275\344L\305\275W\303\000<\205\231\307\275\361\332;\275\263\270T<\324\246J\274s\221\253\274D\250i=>$E=\365\006\263<\366]\224<0\304\205\274\216\247&\275a\367\264=\025\375\311<r\375/=\230\017Y=\020\217\020<\360\201\210\275\270\307T\275\202_0\274\253\025\356<\333\005S=\031\253\336\274i\225\021\274U*\361\274\016\237\001=\021I\023=V\303\216\275\260\020\204\272\001\361<\275E+t<Z\021@\275nB%<<\013\316<Z\331\267\274xfn\275\001\017\312\273\307\230\016\271\005\317\022\274_\031\024\2753\016\"\274\240(\244\275\005u\236;c\213\201\275e\226\031\275\230\347\356<\314W\326<\240\372B\275jG\350;\324\2333=\335\202e\275\301\210\222=\272\372\252\275$0k\275J\377\213=y\277\010=\236\347\224\275\017+\315;&\203Y<\025\034b\275\205\240\225\273\300b\334\273W^\025\274\243\366\222=\327\347P<\177\257\200\274\024n\227\275\215\3670\275\351\233\036=!\313\t\271i\245*=\233\202H\274SZ\220:\326\205\231=\345\326p=\220\331\001\275\005\253\217\274\253Y\263\275\325\362R\275\004~\217\274\363\243\203\271#\\\001\275\003\030\255\271X\023\241=\311\202\004\275\246\310_;\223\334#\274\245\022\255\274\235\344\270<\204\253 \274\023\333\210\274\0347\240=o\3141=_\203\\\274\244\336\234\273\373l\332\273d\271\336=r<\325\275\316\0165=D\"\000\275\253?u=\257\203\252<\307\222\357=\314\346g9\225\311^=\001Ce=\361sJ<\216g\207=\261\3650\274\017f\331<\330\005\007=\301\377\212\274?\027\037\275mX\363<\321h\255<{J\237<\204\257_<\026\t7=\326\263\227;Q\204r=Q\312*\272\236\006\275\274 d\t={\372\321\274\250D\314\274\240\332\270\275X\373\t\275\272<3=4-D<2A\320\274T\026\277=\331\310\224=\377B\213=\335\350\231<XzL=\206\226\331\274}\227\222=\007\226\303\274c45=\233\276J\275\354\314I\275[\315l=\232\207-\275\307\333\020=\372m9\275\236l\202\275\253c\006\275\344z\211<\210\341\334\274\3424\267<\013)\010\274\356\202/\275\010\316\272<-,\033;5\3765\275\305\010\257\275j\372\220\275C\rj<q\325\004<\363\234(\274\261\200\363;\204\013\363;\210\302N<\361-\370\274\366=\n\275\033\343\321\272Fh4\275m\331O\274%\261\221=\357m5\274\252K!;_\206\212\274\212N\254<\341\236\223<A\013\373\274\214vK<(u\024\274\213\017\370<\211\217\233\273\235\007\330<m0R\274dV\227=\013\244B<\0037\232=\201\302E\274MN\207\272\200p0=%\322\025>*#\213<7\360~\274l\274\035<\233s\326<\332\273\315<\344\341\017\275\301G\210<\024\273\005=`\020Z=\335:O\273\345B\323:\205\024@<o\372=<_[=\275%\315\247=n?\375:\016\017h<\220m\371\274<\002 \275;\260\177=\343\244\223\275\036\022\231\275\022\312>\275\373\373\030;\2774\023\274\'\265\303\275\0015I<\021\246)<\217\t\000\275\311\206\302\275\331#\241\275\376\345.=-\232y\275\221\036 \275<\343x\275\376\025\030\275\017@w=\226\374D\275\277\343\226\273\'?\366\274K\367\003<\200\323\026\274\371\206t=\304\037\271\275.7\274\274\365\031\352\274\344\360\227\274s\376o=\313\265\031\275\320c\316\274\242\332\214\275?u\273<AJ,\274#nn=\034\342U\275\251(o\275A=\241=<\276\205\274/\207w;A\312\351<\225\331\241\274wd\006<\300 \241=\"\204\221=\222\026\034=PZ\232<\233\322\n\275G\312\210\275\373\362g<\021W\2159\003\317v=\273/\335=B\324\250\275\371\272D\275\342\345\200<d\274\241\274\211\035c\274\365\033\375<\230w\014\275@\201\210=k\200\301;\037\353]<\031D`<\230\306\340;\347`Q=\364\3358=\001l\2549\337j\334<R\201\024\274\n\211\366<\316\372\276\273\356\276\344;\031\263O<\213T\256<pa\207:\361\240\247\274g\001\206=\263\266\265:g\307T<\002\274L=]\356\201<Ho\216\275\274e<\275\257\306\220\275\274\272h<6\326\213=\245wb\275\365\226\366\273\310\213\250\274z\225\021\275w\237\334<\0328_\275=\271T=\337\365E\274\010G\347</\237\341\272\365S\016\275h\265\270\275-\023@\275x\025\370<\276KJ<dW\211<yl\034=\2057\207<2\022S=>}G=\306O\337<\t\342%\275\245\366\202=\207[\353=t\033\222<7\244n;\007\365\243\274\35345\275IC\207\274\256\246\014<\220\013\346<x;\241\275X\254+\275\202\0376<\370\371\263=`\274\200;\323H\221:\335hs<\202\'\352\273\213\034h=#\315\363\273\303?\016=A\256|\275\037v\317<4g_<\337Y\242\274Lf\345\273\3421v;\225k\255<\005C\006;\257\336X\274\236#\255\273B5\211\275\375\343G=\246v\000\275\177bM\274\211\204r=+\306\364\275\203\323\003=\311\036\344<\252/\';\310\207\374\273\264L\013=\261\357\331<\271\250\006=\303\2506=\022ZA\275E3\317\2747z\347;\350\327\276\273\210dM<\363\350p\274uD\203\275\001F\201<.\262;=c\235\033=%\016h=\"\242\205\275\267%.=\2449M<\377<\310\274[\263U\275\212\260[;A\312\231<\235\336\036=\324\037+=\024\222\237<^\210K\275\210\003\220=\276\\\301\274\330\264X\274:\266-=\274\017|\274\251jK\275\201\205!\275\335\334\242\272]\303Z\275;|[<7\0368:\2171\271\273\224\'\246\275y6x=\276\343#=\323\327,\275\222\307\242=\272\247\033;\032\205K<H\236\204;\032\211\266=\331[\315<\266W\346<\246~\241\274\354\235\210<\301\264\302=H6\025=\241@\033=5\202\332=;\001\200=\303\241\021\274\016\323M\2747I~\272\304\355\253=\236\307&<\314N\177=p\r\243\275w\213\242\275\360K\315\274\034\272\373\272}\302c\274\025\264L=\231\276^\273\013\366\021\275c\255\260\274\006\261\240\274lm\322:\244\315\252\275\237\304\035\274\013&~=\275&\002<\257\232\032=Q\035\373;\241\211\304\273+8W=d\022U<\013\211x\274t3d\274\023\376\007=\"y\264\275\377\177\005\275?2,\275_c\223\275\204\243\227\274\357n\205\275\';^\275\340\337W<A0n=T\336\204\275\341=D=\242\266\207<XVH\275om\t=\362|\207<]\300\206\274\274\315\025\275:S\361\273-@\206\275R\021\377;k\315J<\363q\211\275\276\313\267\274\001\351\212<\270H\275\273\233U\020=\303T1\275\001\324\230\275\253\233\327<#\021\237\275\241Y\244\274h\226\215\275O\207\231\274\006\214\n=\370\r\347\274\n\301\r\275\3023\214\274\272\334\270=w\334\312<\337\320\370=\260M\224=\313z\330\273R\002;=\331\3658\275\205\000\004\275k\266\220=\202\240\206\274\236B<=\372\355\017=\232\247h=~Z);\246\326q=\236j\255\275*\r\014=\034xh<S\262\253=\250\304@\275C*w=\364n\204\275\303\rn\273\266I\274\273\346\344\272;_\273\231\274\376E\270<wm\234\274\223\201\244\272\212\204f=\250RQ\274\343>A\275q\021\212\2744\322\233;*tT=\007O\250\275R\203\314;\364@\354\273p\036\213\274R\264\375<\214e\251=\225M\036=56\263\274[\252\213\274\353Y\263;\315\355\006\2756&\273\274\351\034\277;\300\225&\275\257\004\316<{\254\243\274\252\224\257\273\034\334s<\370\"\016\273\337\273\243;\t(/\274h\r\361;\245\202\334\274\307a\304=\214\203\206=\332\360\224;o\262\305;\022\307E\2758-D=t\177z=\227\t\326;\361\032\326\275\347\214\017\274\355\365\267<#Q\001=\321\326@\275S\365>=8P\340<\3461\007;\335\366\317<\223\204X\274\223Ka\275m=I=\345\266<;\207\244\371\273\235\036.=\027\307\031=\324\276Z<U\372\032=\356\005x=\300]|\275(\324X\274I\254\214\275l\023C;Tb\035<\031\326\316\272&n\016\275\316\221\014\273\2476\207=p\004\013=4\317\025=\344[\033\275\343\266N\275\324H9\274\006\272s<0f\236=\000k\277<\334\001\"\275\342R_=\200o\226=\030\3736\274\"\n\202\2755\354\245<\247\271V<-\337\027\275\370\026\213;2\2004=\376\305\345\274\264+\363\2748\324\335<=>6\275\222\273\017\275^\031\261\274\362\3704=E\320\322;$M\302:\203\223\267=\356\261\020=[\204V=\243\371\203\275\334\376C;\347N\370\275\335\267\330<\235\345\230<\230\000\364<B,\250;\366\025\266:\254>\243\275\217\231\241<\207\277\362\274\275:\\\275\025\021r=\000\230\262\274K\300\222\274\030\021\021\275\273\320R\274^NR<\273\273`\275\255\246\031\275t\353\204\275[\246\371\272\225\233x\274K\276\270=HL\374\2735z\336\274V:\177=\0034\177<\322P\205=(\250\313\273-\306\252<@\036n\2754\207f=\001-\266\275~)Y<&\367N;(dP=A\363\300=\215\224\212\275j\312!\275\230\231\216\274\013\340*\274\213\331\030\275C~\366:{\344\004\274 .J\275\222\273!\275\207\356i\275j\264\265<)\010\214\274\271\035\315\274<\204\217\275\302\361U\275\013\357L<:6\307<\375\007\346\274)M\032\275-\213\212\27572\260;\021-\271\274\360\271\020<&\221\217=d\353\327\273\344\253\023\275x\317\311\274\363\352\355<\226\216\267<\266\222\260\273\013\2601\275\246:\206\274\246\"\215;z\210\"\275\221\326+=\256\225\004\276\263\255)\275\022\331\207\275\317,\253\274\257\305B\275\257<\222<\002\\\200=\265\310\025=\224Ci:\3013\003=n\201Y\275\023\242\247<<\030\330<\376\202\366\274\342_\207;t\322Z=P\n\000=O[\322<Z\215\240=\342\211?\274\217\020\025\274w\262\245=\r\276 =T\215\207\274\263\341q=\375\211\000\274sIY<a]\032\275\361\225\247\274{=\024=\343\230\037\275\022\014\217=\254\313\376<\2156\271;a\177~<\035\263\n\274\251\311\226\274\276cv<\237Vl<,ki<\223:\201\270\3423\242=\002\302\347\272\252\000\262\272\034z;=n\234\271\275\324~\021=\275q\004=Ia\216=\001o\017\275\314\236Q\274x\036\215=L\323\324\274\244\0066\275\031P\274=\2230\217=\363\177\375<\354\221\377\274^;\307=\3165\221\274.\311\251\274\007\201\315\274\336Qx\275\233\257\365<g\266\335\274\2363\031=?\270\003=\037)\017=\366`v\275v\0232\275q\344g;\361\343\270;0[\213\274\240\225\324=ZWM\274\027|\324<\336\004\324\273\346\246\247\275]\253\205\275\257\001F\274\"\t*==\243\302<\305\314\207\275\331\237\236\2758\321\231<\014:F;\025\323\'=v\326+\275\312\211\364\274@\177\002\275\035`\261\274\2761$\274\004\3141=I,\001=\262\346\032\2744*\231=\273\326\242=\230\232j= \365\200\274N\350\243=O\376\202;\022{\224\272f&-\275\266&\003=)\213Q<\244\013\260<\n@\221<\213=n<\035lB<\346\",=2\345C\274\377\032\374<\017\0039\274\230\225\243<\375\304\014\275:\007\220\273\202\030\250=\245\245i\274\272\002\'\275\311\242E=_\224\235=\204\260l\275;\037\035\274\300\"\203=\337C\231\274f%\270=\031\037\230;(\006\301\2748y \275&\'*=\343\327\273\274\037*\316\275\362f\'\275\377\210\013=%\243\014\275\034\312\262<\271^\337<\250V\250=\330D\274\274\231\230\"\275\251\350\013<\006\273Z\2749<\362\274\367P|\271\302s:\274\354\312\254\273B\005<\275\030\370\010=7\030\221\275I\220\363<\211\304\213\273;O\032<\214\362\t\275\277\356\224=p\347P=kGL\275\037<\271<\305\377\255:f\256\002=\3526\354\273\316\256\031=>\tp\2751\037\235\274\025\347\213<\322\263\217\274\302PR\275\205I+=p\354\030=\353\250\230<*\253\363<\223L1\275\221\021b=l\256\356\274\200\253\362<\310_X<W\360\204=\364\243\262=b\017\'=\0179\261\274\210\007\330=e5~\275\206\345\350\274`\322\234<\351\342\321\274C_\245;g\010\340\273\203\005\353<\201\306\366\274\220f\035=S\301r=\001i\201<\035\315!=2\256;=\344\221\326;\244\375\213\275Z\255\235=\345)*<,\007Q<\333\250P\275\307@\001=}}\016\273\322\'\001\274J\2279\274\302v9=P\352\300=\375\342\315<y\220\255\274\"&a\274H\'\202=6\312p\275RB\031\275\023x\324;\030\247U\274\255\215(\275\334\375\026=W\003g<p\344S\275@\347\236\275\2240\245<\251e\243\275\272\303\325\274\300\266\\\274\010-\206<`\177e<\221\373\270\274\223\312\007=\256\330\261\273\275u\320\275\373\301I=\243\3715\275\330Q\254\275\025T\257<\266\014\266\273\2661\202\275*\022\232<\223U$\274\237\236|=\316\t \2737C\217\273\017a\226<\355\003\375\274\277\231\357\274\365U\361\274\202\262\025=\2272\221=\352\320~\275\313a\210\275\341\347\307\275\253\305\313\271\346\212\260=5\017\020<\217\274\241<\r\355\231\274\017u\206\275.\301\213=G\000\242\273\221^\273\275G\330\374<\3309\370\273\332y,=\002\\\213\273\200\021n=Y|V<_`\232\275\220\374\262<\225\227\021\274*\036`\274w0Q<\374}(=T\273u=*\007\n<T!\014=D\033\240=\211\003\265\273\353\324\332\273\016\006H\275k\257\323<\263-j=\310\271y;\204\\\336\275\213,7<\355\365\257=t&\"\275\233\332\031\2755\235\311=\351\210\007=\273n\007;\364~\r\275*\217\203\275i\370\013=\366\021\260\275\200\344\343=\350\005\030=\030\036k\275CE\026=0<\024<\332J\314\275\354\216R<\201\023\210<\305N\270\275\026\341\243=ODn\275\n\020==\013\325\337<v\351\264;0N.=\203z\007=\026\323R=E4\314;\361IZ=\260\236H\275X\264\026\275\317\370@\275\251\350\376\274\234\327I<\323\371\254\275wqv<\330\211[=\220\227Q\275q\352\233=\323\214P=\232(?<\2061?\275\356\036\315\274F\010\024<b\247\003=x\021\306=C\253\t\275\233SS\275\371\016O\275\030nw<\244\356\235\274\024\362\250<y\357z\275i\221\026<q\311\333<[\2430\274DW\262=\372\301\013<\036\377*\275w_\021\274\373\300\316\274KW\315=\300\347\240=\026v\223<\372I\271\2749\314\216<\0333\345;n\305==\031\236,\275\257\357\306\274\252\214\211\274\332\004\344\274\377\214\\\275\360\0134\273\210 \212\275p\206U=2\372\264\274\\n6<\204\353\373;\201\236\225<\267/\210\274\000\360\230<D\361\332<?3\007\276\216\261N\272\260\014\035\275\002;\317\274\370bZ\2752\231\243\275V9\251;\232gX\275\203\203E=\347\033\236\275@\213\230\275.\24249\215\014\221<*\177X=\326r\007\275U\335\365\2708\265\207<\356\241\236=I1i\275\225\0227;\3369\231\274\372C\035\274\253\276\374<\242\200\344;\254B\324\274\326\222s<\327\266\321\274\226q\251=\225\360\264:dl\243\2759\250%<r\341[\275\032*\020\273\235\256\212=,|\221=mB\006<i\255\277;{\351\031\274\224\256\025=\"|v<\227&,=\214\"\334=\271\374\210\275]\331\215=\234\214O\275\374\213\217=\025\032\351\272\276\000\201\275\251\325s=\355>5<g\313\222\273\355\"\227<\314\000\r=\236&6<?=)=\227\352\215<\352\234f<\374\301e\275\347M\200\2757\200\325\274\354*\032=M\316\301<\244x\237\273\365\232\202\275\362\013m=\342wH=\266\364\r<)W\022=!\356\334<\214\271\245=\304\030s=\362<\303\275\372\343\212=\276\377y<\326\3248\275dT\364<\220>;\275\020&\252\275\364\005\342\273~\375\230<\277fP=0\341F=\317\035\364<.\237|<\016c\205\275\255^\003=\377\377\000=\326\277h\275\027\214\255\275\233C\227<\271\007\364\274\370\377\246\275\216,\005\272D,?=O\323W<0OM\274\217\207o==U\340;\333\375\240<#qV;\234\326\025=3\271\224;\265\206G=.\307\323<\262n7\275\265\223r<Z\016\352<\367\221<=F\370=\275\343\210\374\274\322P\020\275K5\202=\003i\253\275-;\242\2747\336n;\243F\021\275\034\263w<\032a\276\273e|1<Uq\251=t\202\032\274]\014\236\274{\231E:\307\266\205<\222\337\032=P`$\272\222\204L\275PEb<[\311\004=\243\203\367\274\223\231\255\274\310Y\265=\n@\252<\332\031 \274\325\036\267=\246Z\337\274\370#j<\274\013\365<\226\201\217\274\014\220\034\275Ja9=V\324\354;\344\220\214\272\333)T=\223i]\274\206\261+\273\226\323\354<\263Lz\274P\301)\274\234\215\213<kw3=\031e\274\273En\341<\022#\214=\035j\355<\r\\\253=I\307\257=\307]\257\2751o(\274[\257<=E#P\275\312\327!=\347b\300:9\236\326\274\203\n;=\313\037\324\275\376V\351\274\3305J\275\034WD\275\234/!=1\202\321<RL\273<\216\213\025\2751.\025\275\376\376\353;=\327<=>\332u=\311u\033\275L\200F\274r+<<\356\245\350<\327\367J=$\010\326\275\245\267\r<l\233\\\275\307j\376\273\301\225\364<\367\000\344\273My\211=\222\027\320<\033n;\274\361\256=<Z\013\025;P1\215=t\004\261\275\240\253\212=|\347\006=\317\361+=\232L\225\274\017Z\335<?\226\307:0i\333\273t\017\023\275g\335\215=i\230u\274\331F{<\3603\274\274\007y/=>l\241;>\031\315\274\360\024\235\275\211$\026\275\231\260\002\275\347\245\244;e)\203\275\360\337\230\273$\265.=\206r^9\252\347\220\274Ob\201\273@\256;<\261J\253=t\213};\351s\266;\022\367\202<&Gm\274.\373\004\275\353\000\370:\236\215V=\002\263(\274tR\231=\276\313\336\274\361\225\022\274\200\240==\306O@=\335\036\200\274\236\301\262\274\263\227\205<hf\010\274;~\250<\017OK<F\033M=\023\220 \275\243\273\203=\326\332\016\275\357\241b\275\226N\001<1\361\235\275%\334\214\275\222\324\252\275\034Q\251;\000\246\247\274\370\023\234\273\0270\305\273\352\311c\275\016\231\337\275H\340\000=\037\340\036<\231U*<t\233\235\275\251\300\234<\327\021\252<d\300\316<\024\233\000>\351\207\024\275\213\363\275\275\2203\227=M\036\225<\263\206Q<WP[\275^(g\2753\223\004\275\221#\t\275\365\236\373\274\240?\232;\341i\205\275\335aA=\030n\324\274-V\353\273\n#y\274\230\265q\274\352\223\276\274\261{)=\324K\233=x\3511\2750\330\262\274\363\2256\274\323\031\237<1\216\357\274\237\327\030==\247,=\250FC\275k\373==t\231\004=\034@\247\274\t\327\014=\341M\006<\216\327\020=\226?\252=&d\364\274K\374\226=y\350\331:\0140\374\274\231\202?\275\3239^<9n7\274\026\007\225\274\332\360\002\276\374\232\032\275\360\335<\275c]5=\250\340\000=Y\020\220<$\217\014=\266\254\223\273\006\350\234<\303H\233\275\232\332\223<\232=j\274\261\033\257=WZ\006\275~G\343\2751\306H\274\032\317\221\274\020eG=\301\307\035=\374\031\234\275?e\304<k\360B=\242?\325;K$\311<\216\2147\274\324\026@=\211\366\275<\363r*\275\334\351\035\275Hd\242=\305-\331\273\304\2524\275\236\241\026=\1776\353<\014b:\274\2744\327<Jd\006=\354\266\366\2749F)=C\325\336\2740\207O=\242.3<\032\247\231<\250\003\257\272\226\"\242\274!\363\263\274C\350\014=O\215(=\005\336\021;\225\t\200\274\223\337&<h\320k=\323!\363;\264\003]<u\263\006\275\035b\366\274g?\313\275G\t\222\275K\345\346\274\222aj\275\243\305\272=!7w\274\312\206)\275\330r_\275^\340\363\274\275B\001=\t\016L\274\203\215\271\275li\355\273$a\260;\271\324\301\274k\353\261=\312\027\243=\261r\177=Z\223\202\274\303\276N<\031\004\000=U=\243<\2226\327;\307&\027\275d0\007=o\321\322\274D#~=\2149\302=\246\0142\274\032\333\214<\313\2056<m\\\033\274\306\025;<\327\305\r=\027\256|=l\343{\274D\231\206=\271\207M<~w\277=#w0=c\2221\275\374\261\254\275\277=\275\274\305`[\274\240\321\311=6Q\336\273\230]\275<\367\023\250\2758\261\240<7\235\'=\375+\200\274\321\272\235\274\245\257A\272\206\031r\274e[*<\250$\357<7\270\347;\362S\016=,x\355\274<\024\261<\314F\030\275\330\010\203=\236\306\031\274\271\234\320\275pF\\\2753\234\255<\005b\225\275\247\362P<\027d\261<,$\'=dt\346<\026+S\275\\TB\275\270c\037\275;\213\241<\330\340\315\274\231\260\244\273[\"\264\274\223M3\275\030|\033\276S||9ly\370\274F\344\335\274\000d\344<4\367\271\275Y\261w\274\024\233\003<5E(\275\250g\311;Un\232\274\327\221\364<\304\032\372<\000\316@\275+g(\275\177\3615\273-2b\275\344)\213\274t)\273<\334\331\273\275\377\306:\275 \035C=\330@\276<\343\311\317\274\264\222\036<\314\\;<\254\324\355;\007^d=WiC<\006\227\241\272xm\000=\245\203\214\274\014O\255<FS\203\273\373\2541\275\263B6\275\333\027\204\275\367-:=\223P\254=\334\236\240<\np\n\274`?U\275\016\001A=LF\273\274 c\224<P;\2029\212Z]\274\000\205\224\275\346v0<\362z(=<\222>=\222\275\255<]&\025\274\021\\_\275\357C\216<\365\334\256<\226\354.<<\307\217:/\000d\275\224D\205\274\250T\302\274\330`\371<\302[)=[\2007<@\0135\275[\254\272<&\202\202=-\241\261\274\321<\365;\007\241\237\273\006\203\263\274\221\n\224\275+N\006\2745\372\002:\335\243\334\272\355\301\032<\204\305G<T\203\017=\n\300v\275^\347%\275\264\2502=\225\234\025=\032\246\235\274\300\305s\274\245\257\222\274\245[\337\274\022\366\225\275\213,i\275\372\350$=b\267\256=\246\nm=QQ\352<\347\203>\275\255t\373<\33497<3\3261<\351\216&\275V\216-<\222)8=\221h\370\274:E\014=e\177\226\274\344\032\213\273x\246\374\272\224\316\337<\034>\247\275z\037\255\275\026\r\262\274\232\003*\275\036\266\345\273\321\030\222\273)BF\273`a\253=\225A\257\274\r\267\226=O\tR\275,\215Y=\263\207g\275\342N\027=\324\233O<T\366E\274\272\214z\274Q\030\227<%\312\202=\315\200\266<3\330z<&\3248=#^/<\010sF\275f\312\221\274w\2672=J\306\000<9U\025=\206y\202\274s\316T\275\335`\236\2742\327\300==H\314\2743_\026=\210\320\014=\311\327~\273sH\240<M\265\245\274N\003\314<u\323\021\275\206[\003\273\265\246\'\274\330o\373;\363\357\260\275\374\274\222:gG\332\274\340\230\020\275wd\256\274\374\023\212=\357\3355<\327[m\275\244i\007\275\373mg=.\200N=\t\3459=!\223@\275c\207\003\275\360\314\"=\021\320\325;\251Lc=f\301\344\273\243\225\221\275\352\233\247\274\213\364S=\321\374H\2743\0143\274\303\031D\2752ed<\245!\035<\rE\351<*x\251=!Z\222<%C\340\274J\007\225<\360\025\303\275G\325\260=\305\003\r=\253\334\214\275\2702G<\217\203\271;Q*\310\274\0356\016\275\317\230<\274\354\252\032\274\254\253$\275j4\343\275\212\346\200=\202\320\224=PN\002\275\\\236\336<1E^\275\263\265\024\276\032\377\r=\247<\010\276_\006\253<!\355\305\275\212\371(\275\027>T\275\030j\330\273\334\004\360<[\265\013=,\023\237\273\336\004\203\275\216}M\275.\036\007=ms\271\275\255\224\272=ZL\324\274\235\310j\273\335\007\251\275>\201c\275y\277\350<\002\327\332=kt\260;\035.k=\263FU\275\251K\351<L\273\206=\256\305C\275\240\366\277\275#\254\007>7[\3249\325\332|\275\272\272\207\273K\207\277\274k\325\261\273\341\202T\275\230\243\255<\334\311*=0\265\246<\006\367\236\275\363\202\002=\324U]\274\202\311\004=\260\373\241\275|2\016\273\345\242j\273\240N\350\275\304\343\207<L\375Z\272\363ru=\311h\317\275\275\034\203=\276O\271;\215\307\\\275K\314\341\272\'q\316\274y\335\255=Jf\324\273\217w\344<\010X7=kg\364<\013 J\274W\313\316\2743\260c\273\010\014\000=\020Q\313;\347\006\315\273\375P\030<S\215\004\274{\247\271\273\374s\305\274\017\263.<\363\361$\275\360\303E\275C\342\017\275\341\332!=p\002\234<6\240\271\274\007\322#=\215\262\233<\216\"/=*\344\025\275\311x\037\274=\\\356;\357\024\n<\273I0\275\004\272\307\274\t\241\265\271\017!6<\300,a=\231C\005=+-\205<k\205\232\274\343\245\004<\275\215\212\274\245b\244;\016\017\210<F\207\233\273T\362\033=\342\360\214\273[0\022\275\220\336\224<\266\251\310\274|\374i=\253\\\363\273\037?\233<\353^\340\274v\346\215\275:a\014\2756\312\326=<\242\267\274\342H\372<;[\243<\260\266\256;\254\212\017<E\335\004=\017o\200\273AI\017=\020{\000=\033=\246=v(f\275\344\001C=\221\"\204\274J\302\036\275\231nD=\013\300l<&f\013=\226\304\232=\227z\354<\010Pb<d\352j<\264\347\r=\254\375\340=\351>\020=.:\300:\234\021\022\274hl^\275*u,={,\243=]y3\274\372*\341<\251\':;\"S\277\270\275\250\205\275\214`\002:.\0144=\014\277G\274\330\357\353=W\0149=:p\002\275\263\342\010\2752\233\221;)\305\213<&\004\200<\3126#=\351\300\275;P\275\351\273\342\226k<\323Qx\274\327[\'=iBl=\003\n\203;\231a\324\273\277\257\327\274r\370\254<\376Zk\275\247\317\'\275\340\260+=v\311\217<35\000<\2140_=j\376\273<w\234\224=,\321h\275um\034=9O\000=\2408\277=}\263\340\272\202\377 \275\250J\272\274\243p\025\275\344\332.:\024.\346<r\346P\275\310\321\017\275\347\311\005\276\350\200\226<\316!\025=\201>\314<\362qm=7\305\216\270Dsc=e;\350\272\036|\310<\374y\215<sL\310\274\263\241\013\275\270]\371<\003\360\353<Ve\324<\224\243\n\275\234}l\275\354\337\246<c\320\232<\360\205(=\001\010\202\275i\236i\275\215=\361;O3M\274m\242\325<W\332>\274\300H\207=A\225\237=\273\373k<\032KH=\017\356c\275-\005\025\275 \246\221\274\020w\230\274c\367.\275\323\3317\275\266:\233;\003\322\346\273\267\2641=\311W\340\274U\332\240\275\264\247\210<\337n\270=\025\220\250=\344\233\215\275\177iU\275q\007\022=\320#\373<\201Yx\275r\362R\275Y\242\244\274\234J\272\275\350\251\322:v\032\265\274\371v\305=\005$0\275\227;Z\275W!\343\273\253X\203=\t\\\217\275*+?\275^\013\370<eZ\030\275\215v\316;\221\t\361;f\346\222=\345a}\275\373\352\275\274\370\005}<\267\334\231=?LB\2744\227\200=\036OJ=/\036\241<58\013\275z\367\232=\257\n\032=\211\302V=\017\360\203<[\206\004\274\365\266x=\363a\214\275\206c\251\273\346s\301=\204\370\261<\246\216\014\275\216\221<\275\014\001\372<]\245\324=|t\304\274\230-\325\274\241<\360\273\014I\027=\260Y\036\275\324\037\256;\235\035\271\274\324\336$\275\002*\220\275Z\032\362\274Im\351\273\301\313\021=%\240\332;<\230\n;Q\363z<\227\324;=\312\201\334\274\335vO\275b\010\313\275y/\007<\326\n\314\274\206w\341:\201\013\203\274G\242\370<\035R:=\343~\214\275`Z\314<\352\256\250=\360\302B=\007\316h\274\311\204\361=\321\025\243=Y\001\371\274)_]<\277\002\211\274\022;\312\273\034\214\207;T\306\264\274E\272\233<\356\'\023\275\n\007k\275NDk=\277\345\010<u\027\364<\36511<\375\271\"9\"\367\026=\000\257\r\2751f\013\274\016\332\235;\347\\\334\274\016cy=\225\206\314\273\216\226\027\275\214\224\376\274\032*\010\275c$\000\275\235R\002=uR\352;\221\361\234\275\300\216\237\274\213\3735=\t\023#\273\t\205\263<\367\207\237<$\257[\275\326\327B<Jyr=\310\255\021<\022\350\321<U\317\227\274\255d\232:\364\037?=@\221E\274\307\346\\\274\272f\311\275\007\312\006\275\323b\365\2755c\353<V4\221<G\025\025\275\344p\220;R\333\355<S9\266<W\0021\275\342\356N\275M\354e\275\301\366\244=\254B.\273Q\274?\275\324R\371<\375\031\316<\232\003\007=\013/\267\273n3\\=\017\236\216<\201Fy:#X\314\274\004=w=\230;\020<o\354\306\274\215p\263\274\330\325H=\374\034V=\000l\361<\332z\251\275\350\025\257\275\341\202\207\274cR\216\274\244G\211<\246\036\211\275)f-\275\2268\270=\214\247\324<\\dz=\006a\016=>\341\r\275Gb\247=\333Te=\375d7\273\014\014,\275\341\246\233\274\256}\220<\034\036\224\275\023\231\363\274\207A!=\2164\'=\021 \014=at\304\275*\0171\275K\313R\275\351\317k;\204\231\261<l2\'=&\264\260\274\371\266B=\302\257r\275\225\227\r<)Ef\274\0305#\274\243\232\274<\332Y\021<b\341\010=\007 \211\274%eD=\211\332<=\036\2613=b\303\263<\303\032S=\260\005\355=\177{\257\274C\227\320=&\214$;\377$\251=R`\336\274\376Iw\274\227\312`\274N\030\036\275B\267t\273\315\357\215=\223K\033\274k\200\351\274\343\311M\273_\222\270=\201b\376;\345\235\002=%\222P\275\373\220\036\275a\336\r\275\034\205\r\275\005\264\356=\347\273\364\272\t\213i=\205\346)\275\314L.\275\247*\312\2728\233\277\275\002g\254\274\305v\334\274\230\244>=\217V\025\274\306)\255\274\326y\364<\264s\306;\255\275\236:a\201X\275\3262\316<\336AF<\200\220R<\205\014\242\275\372\203<;\017\371p=\006*6\274\310\362\006=\013\201\005\2756\272\307\274\260\020\375\274\214\234\366\274\360TK\274\r\301\206\274\252\245\212\275>m\320=<8\323<\307\316+\274+H\201<J\355\\<T_\t\273\376\257{\275\272\313_\274\300\016Y\274MR-\275\352/\316\274\240\234\231:\273\205\353\272\267x\355\273?\023\337\2745+\013\275\274\'\277<N\0217=\177\254\274<E\0024<\3322-=\321\234\216\274\331\343 =z\234\030=8\357%<T\004\014=\363\203\322<\0359Y\275\177\350Y=\252I%=\302(\260\274$\024v=\363\372\200<\243 \271\274\337\324L=\270\311\304\274\031yT\275\177lz\274\215W7=\376\317\312\274\t\206\276=\365\'\365\275z\027\211<\247\347\210\275)\362\300\274\307\307\275\274\233\3205\275\332\327*\275I{O=\014r\267<\254\225\243=\366+\201\274\023`\224<\220{\325<\370`\215\275\327\003<;\362\026!=\204\266\353\273\340\252P\274\263\022\211=r\026\271\2759\373`\273\005\227\r\274Z\260\242<\350\260\331<[\006&<j\2215<\2360d=\034(\267=\220p%=\323\021\303<\226C\237<Q\321$=q\035/<d\030\225<H\344\273<\000\351+\275@\201\302=\330\016e=\030(*=\347\234[\272\263\266+\275\233S\236\273\221^\010\275\360{\224<O\224\022=*`\014=\367[\216\275\324\277$\275\346\257\312;\314n\331\274\376\005+=\345\255\n=\337N\177\274\276\275\303\273\245-\\\272\306\236\235<7\341B\275GZe\275\021\034\037=\317\225\014\275>\"\204\274\321\216s\274\260=\'=b\332@\273H\242\275=\312\225\374=\220\217\006\275\303\236\252;|,\362;_|\013=\370A\205\275\014\302\277\274m\370\313\273\220x\"\273\275\323\213=\212\361\376\275\342\337\177\275\266\023\215\274\032\021\014<3\213b=\000J\255=\215\026\363<\216\267\352\274\375\276\240\275\031\342\346\274\345\323\016\275\3245\212\275,\235F\274n\363w\275\227\\!<<\177\231<g\237$\274\331\2004=\335\372-\275|\250M\274\206\251\002<\022\301\317<Y;\302<\322\204\245\275@\376s\275\013,$\275\204\232o\275\370\237\257<\231\212\025<\267r_=\332\314~\275g\250\200\273yYq\2749pC\275\225\033\031<x\353\264<M\243\020\275\217\271\301<z-4\275\300\014i\274T\2408<\200\224:=\205\007\n= \240\251<\216\216\236;S\260\264\274lB\231\275j\222\007;\260\274C<\3422T\274Q\265\013\274*\005H\275S\234\027\274\010\222\264=B\006o\275\017)\243\274\303\232;\2750\373\222<\354p\332=\017\372(\275\223\374\316<\0266\276<\033\247\242<y\225\014\275\350\r\004\274\004d\235=\225\357\305\274\007\262\n\2755D\224=\030\343\326<\200\t\276\274G\313\270\275v\305\330\273\222\312\205\274}\'\366<\270r\272\274\2503\245=\\\002\371\271\025MA\275\250\004\0079w\332p\274\204\272\366;\201\306\023<\377p\310\274t\213>=\205l\031=\315\211\314:\374-Z=\371-\267:e\021\034\275\310$\244\275c\347\315\274\3172\336\274u\376T<3J\036\274\261\236\315:\366\320\253<\215\353\201\275\356+\034\274\2002\234;\020\037u=v\237\221=\271\343\225;\367\371\027=\265\n\036=\265\303\375<\315\0367\275\340\"J\275\312\213\344\275c(\002=\264m\274\273\022S\203\274xK\357<.\257\354\273>\354\025\275\372\2535=\214?\242;\347b\320\274\013\300\'<q\360\322\275\362(j\275\363\216\210=Q\"\325<\035\036\305<{\274==\253\2649\274F\305\237=<\264\033\274\342Q\266\273?J]\274\213\267H=\001fC<\256\020;\275\3325?\275;!\261;\360\322\340;\035\0236\275H\372\277<\027VJ<85\304\273n\324\376<.\207/\275\002\212q\274!#\013=\374\r!=\347\307]=+\037O\274\303\327\304=\204\016`=\360\376n=\014d\363=\205\252\212\274\357y\367<\347\026\203=\013\200\203\275\370N\320\270\3404\255\270w=I=Fqj\274\027\t\272\274\361\350`\275\207X\333=s\346\030=\202\210\237\275B\203\223=\311\257\345\275\344(\257=\247\251\222<%\305\350\273\n$\225\274\351s{<\276F\205<\274\373\223\275l*k=\225\177\031\275\024\233\253<\326\307\r<\244\370\017\275=:\212\275\251\266\221=\234\317\001\275\263\362\343\273x\312\241<\376\236\024=\304\332x=\214\321p=\000\311(\275\367\271\031=\231\376\301<\237-W\274\377tv<[\022\177\273\177\317@\275\212\364C\275\211\350\245<\225\332\\\275\267N-\275Y\262q<\335\021\200\275\213\211r<p1\272;\345\363\026=0\'b=QJ\034\275\313;e\273!\310$\275/`:=\357\267>=\215)\201=\016\201\343\274/X\227={\034\261\274\321\215\276\275\350\224\305\2741\177x;L\207#;\003\363\005:\014\360\213;x\'\210\275$\277.=uyn=\030T\304\274\377\345`;\024\316\274<:\360\261\274\341\257\274\275\307~D=\332\324L:3\371K\275\275\300\243;F;\001\275\335&\021\274\242\320%\274\346\\\271<\356\223\006\275\214\"\006\2759\316r={uv\274\312\2551=\214p\212<\245\260\366<\372\233\002\275c\260\013\275bG#=\2317\022=\022\223\350\274Zm\312=\332\251\205\274-W6=~f\004\275q!\204\274\373\375\261\274\325\306\230<+\237\023=\264\236\320;e\252\032\275\271lp\273\352+i<\237\017\230<\031j\250;\345\302\014=\271\025\004\275\2755\335<;\314\013\276\256\255\221\273$\216,\275\024Z:=5\373\375<.\375y\272\330\317a\275\230\275\326=R\215-<\201\321\236\275#\257\020=\004\004\301=\272a*=X66=+}\226\275\303\240\223\274\036\305\207\275\230\254\260\275\346\245\206<\360\002\254=\360\001\311\273ce\325\273&\037a\274s\027n=\377\257,<\231\330P<|\003,=\'X\321<-E\000\275!x\273\274\362c\330\275\372\024\322<\020\271}\275!\205\312\273\237P9<\205\353:=\312\353%=\323\367\201=\002\317\003\275g\2519\275!\033:\275\311\221\247<~\316\332\273\"\037\222\275_`(;\325\306\227\275&g\356<\234\244\377\272\233\201\306<N\001\214;?\203\262\275t\272\335\273\277\373i\275a9\315;e\210\271\274\240um\275\270\224\335\273\016\350U=!\014E=D\353#\274N\020s=^\352\017\275\000\010o8\324h\340<I!\330<\276\326\355\273\336\367Y\275\023\333\364;\036\201:=c\254\017<B;\242=\375\314\3659\220*\315;TN9<b\351I\273\233$\033<r[w=\004W\n<\371-\035\273a?\024<\251Z\341=\340\277M\274,\253\264=\3002O\275\277A\005\275\303\271\"\275>\330\r\275\227\215\006\275\340.\352;\1770\322\274\014\340\261<\245\237\222\275w\241\267;\274\360\251<\330s\217<C\204T\275\241\232\364\274\337\361\037<\376\013-<\002x\001\275\206\304\273\275\340\\\021\275>\333\001\276F\025\261=`>D:xU\271<z\2156\275\227\201\027=\017\307 \274]\227K<u\204\005<J\001\216<\256[\002\275 \317\020\275\267!\177=Y\237w\273\211 \236<\202c%\274\344\002\221\274\337vw<c\254\265\275g~\\\274\362k\351\274\347v\257\274r\276\235<\347\035\367:,\311;\2746\256\306<\247Q\323\274\275s\221\274\250B\232\275L\225\201\275\235u\032<&\333\222=\010\361\202<\266Bw\275%(\201\275\001MD\275\237s\026\275\270\365\031<\310\222\017>\263[\354<\030k\222\275\026\310\024<\251A\206<\357\365\332\274qu\006<\267!\177\275u&\223=\000\220\360<i\322\204\275\344\r\247\274_n\031=\306\221N\274\026\274)\275R\263\311\274c\352%\274\264\231\340<\314\347\207\275\022\367\216\2759)`=\035\330%\275\005MP<xrT=\246OV;wsL<\n\322\205=*\201g=\267\376\325\2747\367X=\326n\006\273.%\035\275{\362\212\275v\243\020\2750?v\275\326\325p=\373\351\343=\373\241\274;\026\005\246\274\031s\035<\035\360\275\274\340mE=\363\277\311;8\346\234:\036\336V\275\232Et<\005 \031\275\013y,=pzC=\276I.=\301\321\364\274+\220\264\274\320\223\235;\241\263\236\274\320\232\302<|\032\321\275\017\217\240\274\020\353Z\272\312m)=c\352\311<\357<\253;\231\013\264\275e\362:\275\374\r>;\334E^=t\031L;{\212\300\275w\201\215= v\021=]\006a=\352\364[=\355\211\002=\245?\265=)\001\272<A\245O\275R+\335<{\304\234\275@\252\256<\371\326\200<\240\036,\273\325\301\261\274\027\330\223=3\316\013<\370\n\017\275\025\302\\<\353\321\301\273\003\014\324<R\323\332<\206{\352\274\303/\217\274\303\232q\274\322\257\020\275\231,,\275\357}\221=\024b\210\275,\352\277;\237S\027\275\336\351\210=\307\271e\275W\335\265<\337\366\204\275@\327}<\025\025\263<\203\\\003=%\202\223\275\304\340~<.\342\332<5\313,=\t\216?=\"\214\241:!\325\036\275@!b=\032\213:\275\310y\303=\320\371\235<\271UN\2727\025S\274\223\254\177\2756[\373;\216\025\212\273\223\020\004<\352\263F;\010@\371<\021\t>=\201L\325\274[\372@=\261\334f\274]\262F<\2363U\275\017\253v<\200/!=n`\255\275)d\232\2758(\007\275Y+\222\275\200\242K\274\317y\245\274\007_\330=\231,\247<\350jz\274\361X\241\274\341\005$\275Lw\230\275\002\022\315\274\313\341\006\275\266\366^\275[\343\266\274{i\';j\006\376<\241\366#=dl\207<\360X\001;\003K\026\275\'\240\020=<\361\202<:\031\201\274\\\365\025=7\322\225=2\321P=N;\241<=\242\343;r\353X;?\311c\275\217\000\354;\000\345+\274\377:R\272\334u\314<\034;\237\275\327\357k<f\236\212\273g\220\246<\363.\226\274\034\332\225\274tCZ\275\261r\216\274+y[= \335\217\273\336\026S\275\244\005\003:\260\331\351\274\305\204\343<\274\340\006\273z\357\202\274\270G\021\275\377\245\301=|\205\r\275N\337;;\226o\333\272\320x\246<kV\235\275f\301<<#i\372<\2676\231<\370\255\337\274??\310\273g\271e\275C\262$\275\266\246\242\275/\214\227=\n\005\354\274\206C\334\273\235\335C\275\353\"B\275D\310\372\274$t\233<\355\207\006\275\221\203\341;\201\345\312<\222\261\306\274=u\020=5K\037=\332\3755\275\327\364w\274\212[O<\373S\263=\361\345<=2\332M\275\334\310\342;=\253\202\275\212\004\310\270\351N\303<\216\033%\275\240/\240\274T\310\211=\334\251\245<6J1=9\361\321<\375\333?\274pe\341<\004\320\213=\340<\202=\314\333\035\274\245}\371\275\350\253\367\274\375\036\212<\300\325\033\275V\363\243\274N/\206\275\26431<B\275#\275\3434\002=\217)\314=\203\377\202\275`!\177<\014\t*\275\316\375\210=\236\223\252<T\262\301=8v\343\274\247\272\356<\004%~=Ok\342<\330K\261=\204\357\025\275bv\241\275\326&y=$\250\377<\022\341I\274|\325\360\273\226\366w=!\177\250=\'\001\206<\222_\203\275Ke\310\273\014P\236\274\2172\323\274\307\200 \275NR-<\363-H\274I<\344\274\035\2745\2754\367\375\274\376\313\254<\343\312g=\001\343\031\275o4\367\274X\210\003>\250\266\207:$pa<\311\216\227\274\003A8<\256(\211=X\004\353\274\342\300\007=\330\265\347\273\2745E\274\346/\217\273\004i\300=3K\210=i\023v=\254\307\253<\211vO=\033V\275\275\234,\237\273\306(\374\274\371\022\227<B\025\217<U\rc=\217\311\002=s\333\017=B\337\243=\362\367\010\275\004\310\326=\233\342X\274U\244\021=j\263\005\274@K\210\274\343\206\263\275\240JA<\345\021\377\274|\326\360;)O\013;\301\225\275;TK\313\275\225\230\247\275\221\316\024\275t\231\027<\312\037z<\261|G\275\033\rB:\270\207X=\235\033\001\275\345iW\275\231\326M=\357Q\264\274\000\354\007\274\r\204\007\275\002\370:\275\352\210\023=\3340\306\274R\315B\275D\204\025<\344]\005\274\376\247\007\275\331\023\245;\353\261o\274\231p\225\274\214]\025=\177K \273\365w\025<\r\036\350;\344\316\364\274>\377~=\254E\277=\003\240h<\335\367\322=n|\004\273SD\245\274\237\036f=V\302t=B\337\212<1\322\007=\325\232\215\275\3547\036\275\311T\246<\201\202\203=C\345\255\274\217\325\333\275$TK\275\224|\000\275*\372\027\275B\350\236<\010\266\264=ak\314\274\017\252\370\274\210B,;5\270d\275\354\232*\2746\326*=5\2123=\205YA=+}\301\274\370\365\366\273_\207\010<\362\360\224<\341\262^\274\277\314\304<\020\235!\274V}\005\272 \315B\273y\035\273\275\375\244\'\2753\373\t\275.\335\206<\243zL<\336\200D<Y\271Z=G\342,<{\324/\275}D\031\274\300\006\034\275\211\0230\275c\356\242<\037\276\263\275\377\0026\274\230~\201=\326\'\326\274f\320\246\275\305\204\337;\230yi=\t\351v\273Id\025</\026U\274?\005\363<\014\022\242\273\254\204.\275\367\353\r<\027\271\024\274\272\314W\275\335a\240=\277\222\200<5nP\275\213\210\200=\317\341\236\274\350U\220\274\354\205\362:\316\275v\272\362\001\313\274t\370\216\275\013\311\004\275\377?\337\275j];=\177\203\222\275\343\377\032;V\361\\;\0141\233=\217]{\275 \230\3078F\300\256=d\317\000=\353y\221<N*&=\261\346\254\274\343\250,=\0202\241;\305Z,=\353\352\001=y\323j<\247Zr\275X\271\216\273\rj\304=\271&\033\275\301k1;\030\244}\275h{U\274nv\326\274\002\273g=\213!?\275\025\364\244=m\223\265:\326\0267=i\361\350<\002D\222\274\352%\237\275v\321\210\275\364\314\2429@f\233<;\312.=\347[:;;[\n<\267\314\212=\n\005-==\244\023\273\251x\245\275j\260\005\274hh\302\273#%y:H\346\264<a\001\022<}\336\242\274\014\307R\274W\371r\274<,\277<\200,\271\274\327V\350<\273{\302<\254\341\r=?\300\021\275!\241\361=G\343l\275\257wJ<z=\262=\036\245O=\2136\233\275\203[\335\274\222q@={X\351<\247\300\026\275\035 \230<\243>\350\274\204u+\275Tq<;\222\t\227\275E{P=\030o\351\274m\332\177<z67\275\323$T\273\317^\203<Z#c\275b\003\033\274\222\252\021=g\030\215=\333v\202<\2519\374\274\274\312\024\275\374\217\372<\200\t\230=\352\331.=\017{S\273J\274\303\273W4f<\324Q\203<\020?\037=W\t8\275\032\001\235\275\031.\207<\371\336\362\274B\022{\275\3517\010<$c)\275`\254_\275\261;a\275\255\354~<cPj\274\337\252\231\274P\225\374\273\347w\022<\006%\230=\315\351\216<\037\177K=d1\320<\t\360\262=n\314\305:\237\334W\275\3044\240<C1\214=\320\271}\2747\363\031\273Tw\333\275\306\220\022\275\233\010\235=\234\321\206\273\351\353\335\274L\330\321\274\033dA<Q\025\361<-\273\025<Q\375\204\274\233\316\\\275c\033`\27550G\275\206k`={\220\324<\003\315P<R\360\361<\353\244l<\272\303\273\275\003\367\272\274\375\031\261<\270q\026=\351(\013;\206$\272:\002\342\361\274\232\217\016=\032\327\034=A\003\302\275JF\001\275|g&<jZ\007=\266\002\336\274\355\256\330\275\031\243L\275\3009\036=\301\320<=\333\215\027\275\322|j=\rVW\275eR6=\302Z\002\275Y\356\305<\177_\362\271P#y=\2229\323\274\354*\r\275\252\344\350\275W\021\\\275:\223\232<$V\n=\230\257\001=\303\020\025\274\3357\262:K\241\001\2753\353\220\274g\236+\275\\\311\361\273d\335\\=\365)B<\222\306\001\275\034\214\017=\363J\246=\252\214%\275\207\243\201\274\250\331\000={CU=K\227/;\351d\201=\001\223\337\274\021\345!=yJe\275%k\312\275\377\3078=\261\'Y<\316\000\202<\213\273a\273kU\214\273\261\010\3767\035\227\217=\233\227\035=\325\260\304\275 MQ\274\255\215!\275\205}\325\274\213l\221\275\314v\256<\256;\346\274\000\003a=M\345\263\274\374t8=\214\332M\274\022\025\013\275O\335A\275\245\300\211<Y\321_;k\342 \2756\217g\273\234H\321\274v\010\223\275\230c\265\275\350\020\205\275*\355\235\274\341\225\200=%)#=G\227\360=\217\206\344\274pXk=p\227\256<\266\226\351\274e\237y=<\274,=\344q\357\274\032\376?=\350xT<\253\253o\2758\331\010\275\351\203N\275\275\034-\275\204\235\311;#\330\256=\326\000\014\274\234\355\237\275\243H*\274\016\'\337\274lJ\232\274\275\260j\274\273\246g\275i\264\373\274\356$\3269q\267 =a\312{=\377\266\334\274N\2156\275\271l\213=(\356\332\274D\276\257\274,0>=\367\254\345\274\360Rn\275\000N\027\274\243\232r=\327Y\020\275\010\006\232\274\207\240\221\275\363\236e=\277\2650=3\024\227=\032\362\222\275\347)Q=\223<\274\274mF\250=`\303y\274\201\225H\275\244\376\240\275\317.\006\273\371\237_\275\236Q$\2750E\253\275M2\366<xJL\275=\330\207\273n!\010=\250\324\005<\352\372G<\017\3355\273V\305?\275\334\375p=\226\252\215\274v\252\302\274\376\000Z\275\270\0308\275\223\227G\274 \202\201\275\267)E=\311\324\250=|\346\013\272\234=\221\2757\252l\275\224\335\221\275\231LT=\307Yr=H\260\256\274C\301\317\274\350\t\001=^\001F<\317\261\264<\321\314(\275\220\363\250=\2460>\275\226\333,\275\203\n\375\274\3654\354;L+\376<k\354\213\275h&|=\301\330\247<\201b\207=\373?\366\274\376\321\020\2747\227\222\275\351K\217:\273\031h\273\255\215l;N\274\305<\202\245\205\275\203\253\377<\233,\r\275E\352\030\273\360\322-<\007L\345<\373\300\022\274\331\024\337\274\314\216;\274\013`-\275\346\320`=4HB\273\355\233\273=h\360j\2741]\303\274\2405\353<\300\331.<,\t\350\274\007w!=\0339\233<\257L^=\342\002?\274\251~&\275\261\001*=k\rs=v\272(=\244\250\307<{\005\354;\222u\243\275\325\324\221=ep\206\275\022f&=\331R{=\206K\227\275\251v\020\275i\316*\2751f$\275s\330k=\364\r$=\233\022T\2734\361H=\307\031D\274\001\233]\275\312\245\235\273#\252+<\361\203Q=\310\247\020\275\2308\201\275\313\2738=\305\032\204\273\314\244\036<Q\276K<\273\220\230=\341\216\035=\007\301\300<\'\222t\275\001.\376<\367o\227;1\215\226\274\230\020\210\2756B\2259\261Y@\275\273\"?\274`\245\001\273\306\005\232=h#\215<\200\271\251\274u>w\274\353\017M\275\364\234\031\275\025\233\343\272\342\366\201\274\312\206C\275J\350>\275`T\t=\233\221K\275\261\020+\273\020\031\177;q\232\242<\314T\221=8\2759\274-\027\234=d\232\207=\\\235\027=\335\020\241\273X\346C\275\351^\364<\240\\\\=\226\260\333\272\250\357\177\274\034\234\232\274\206\177\243\275Q\342\036<0\337\037<\321H\261\274\315\024\036<8ht<\372\233?=\266\205\274\274Q;\343\273\r\262\274\274\224\226\013\275\357;(\275\244\342\266\274\233\335\257<\300SA\275\361\207\260\274sX\321\274[.\312<\314\315.=\030\210W\273w\224\305\275\177\223\215=\370\252w<\331\224\322=\216\377\223=-S\357\274)\\[=\2570\003;\314)3\275\372G*=*\271\373\274\234\021X\275\272K\327\274\342??\274\205G\030=\037}\236\275\362\001\231\275\367=\004\273\316\212\252=\377\232u\274\302+\310\272BY\340\274\rZ\340\275\022v\014;oO\221:\341%\005=\010\233\025=c!4=\253Qr\275Z\263\017\273\013\353F\273\350\250\241=\373\342\362<\374\234|=vHk=+#D=rk\337<`\354\211\273G`\370\274}Z\344<\205\226\215\275\252\0211\274\325\260\321<;d\371\274\n\242\001\275w\220\335\274h\216\245;\346\303\200\274R8[=\374\355U;\002\340\032\275\025\270\264<\273\214g\275C\2164\274\343x\343<3\262n\273\324\301w\275\372\335/<\254\245\033\276\257\010P\275\235\270\205\275\007\267\247\275L\322\216\274LKK<\214\326\223\275\3047&<\214\275\300<|m\353=\344z\210\274\206\373\323;\207\340\243\274\301l\300\2745\310[=\244G\341<\323\316_\275\223\237\266\275\245\031\210\275!\223\210\275;\332\350<\27508=\033c\000\275\321Q\005=\030\321c;\250\253\305\274Ag\230<E\017\300\274*\0345\272\275\003\342\2740\306X<\322\324\006\273\262\340\251=\257\3066\275a$7\275\344T%\274\264\035c\274\370y\240<\214\3178=\345i\243\273;\346N\275\343UV=eA\270\275\031zS=/\355\216\275&e\220;\251B\274;\034\227I=I=H\274\230M\024\2759\257\317<D\020\213=\350\273\256\274\214\362#=\344\326\240\275\354\231\314;\261\323\217:\021\264e=U4\245\273~%S\275\273^a:\245P\264;\300v\221\274\214Tb\272}K\222=\r\247)=\275\331\347<P\200\343<\263\022\336\274\277\361I\275\246L\310;\007e\207\274\211]\234;S\232\361:\r\363N\275\364\332\245\275\2124j<\322\316q<-<\307\274\263\247\306\273\254\365\n\273\300|\212\275\350\251\256\274#\032E\275\007Og\274\035\376\221\274\241\244\026<O\246\005\274\227\034\222<\331\333~\275\263b\201\275 I\224\275\002\016\023\273~\270\241\275\006\'\316;\'\003\202\275n{F<XD\224\273$\\\n<\326}\005\275\317v\257\274\332\\\337;8Vl=\014\2558\275C\233O\274\235\316\265<\237\222u=\311\376\000<\024\374k<\314n\300<|G\354\272c\327\013\275\026#\203\272\201i)\275\r\322\363\274\376\351\320<\262\210\245=\327\023E<-`\210\275\264\034\214\275\314\327X\274EA\350<\'\247N=\256\235\375\2745\241\216<\360\250\010\274\244\r\020\275Z\347s\274\321\275\006\275lx\004=\207\306\273=\234\372\313<\237*e<\370Nr=\270lj\275b\245<=\324\033\313<\234p4=\222y\020=I\021\375\274;\225\315;R\264k;\034@j=\367\315\317\273\316\330\010\273#\240\347\274F\205P=R\005\260;\276\016!\275j\034s\274xNW=\2048\266<D?U\2751\341\235\274\246\341j\275\350ys\275\032\025L=\241\240\033\2751@\263\275\001\364\236\274\307\203\007\275\273j\362\273\264\002\242=Mx\214<\277Z\252\274\254\310\234=\0060q\274\277I\313\275\023l9\275\030\217\367\274\241=3\275M\033b=\334\200c=\3276b<3\223\243\275Fy\366<Q9q\275\013r\206\274\000mE\275\247\203s<\372\364g\274\314\371\314\274\331F\355<)\253\005=\267$\320\274IA\223<\241#9\275v\204\222=\252\260\250\274\340C\005=\004\262X<\254b\212=\265\326\207=]8\200<\357J\226=\206\377\275<\002(4=\202\345\244\275\323\271\314\274\317D\215=Z+\244\275\332\267/\275\232[\302;\226F\226=\377\205\304<\037\220\206\275#\240x=3:\204\2747\001\206;%8\266\275\344+\302=S\231\204=PL\026<\201\366\203\274\372x\007=\243\274\267\275\254+\213\273o\243I\275\240\375\016\274\360\274\021=\n>W\274\225N\204=\300&\326\273\351\374\331\274\"\201\'=\230\026\031;\246\240\002<m\207k\275\027\353\016\275\036\276\201;\216\n\031\274###\275^\215\247\275s\010I=\327\253\221;G}`\275\317\373]\273PLM\275\t\366t=\252\357S\275\3277\252\273\010\244\230\275\017\2471\275ea_<\271S\251\275\260z\324\273\217\275A\273\205\026\312\274\247b\304<\203i\265\275)\021\024\275q!\216\275!sA=V\'\n\275\357Sy\275\340\344\354<*r\206<o\212\347;\000j\245\272\031o\373<\317\022\255\275\255\336d\275#9\007=5#D=\307Q\360\274\237+>\275\327P0<\262\310\261=\333X\271;\r!\256=#K\253\274\343W\242;\313\230\206;ze2=\177D\246\273\263Cr\275BD\023\273&\240\'=\007\253{=cl\305\275L\025&\274%Tc\274\261\037\312\275\215\004d\274\336F\314<\337N%=\037\273\360\274g\234\211=E\320\244;\315\341+=\334\274\240<sK\240\275\013\236X=\230\273\207\273+\367\007=F.x\275\323\377_\274\374R\006;R\023\217\274]Q\206<\307}\260<wFQ\275\244\252\310;\342F\302<\364\2142\275`\317\242;\226\256\032\275M0\023\275\033\233b\275\241\354\307\274F\024\236\274)0\225=(/$\273\370)x;\033\320\\\275\233\237\236=$I\233\275\'\246\364\273\003\235,:\306!\211<\260r\215=#\371\373<F\251f=\276\250\207\272\230\367\345\274\207\373\241\274\243Z\237\273H\244\004\275\264\375\335<\261\267M\274\355\237\013=D2\207\275z2\034=\030SE<\251\324\304\274\0203~\275FWD=\346#\354\273r\317M=\323\341\307:\224\373\306\274F\275\360</\227\203\274\277\302\275\272\233\223@\275\247\212\377;j,\301\274Z4\t\275\331$(=\266\354\300<*\345R=\017\337`\275\312a\207=\257\031\014\275p\265Z\274\313A\036\274\216U\217=\276\256\305\273\257\r\314=,\027!\275\340\204\341\275\3716\314<\023\032\177=x\300\026<\n~\342<\261\245\307\273\353\275\345<\253\306\232\274\2235.=\356\266R=\351V1=EL\307<\374\3260=^mR=t:v=m\370D\273K\241P<;\277>\275C\020\370<\256Q\215\275\312\326\002\275\2740\356<Z\312\227<\331\255\225\274`Dp\275v\351A=\362x2=\n@\032\274\257\327\220<fl\255\273\207\307\227=\217l)>]m\215=\355\247\210\275L7\245<;@\016\273\240\230\321\274\332\342\202\275\362)A\275\037\342\244;\337<\245;w\220\202<\003\232\207\275\305\3338\275\213\276\240=\000\241+;p\334\t=\251\0357\274?\200!=a\374\263\275\370kw<=n\365<\233\251\365<R\213\207=c\321\213\272/\206\273<T\315i\275\020\331\204=\377\361\002\274z4<\273\346J\227\273\301\243\245\273\251\267\250\275\211U\033=;\304\217\2755\223f\275[\322\026=\2720\226\274\201\250\201\274\2557N\275\241]]\274\256L\213\274m\346\362\274d^\243\274+9W\275\032\211[=\370\326\264=\006\253\231\2749\001\261<\017\231~<*\377\305\275\006\022\253\275\325 7=\003\251\211<\372l\277\274&V\272=\006P\245<=>C<\026Y\326\274F\333P\275\371\374\211=)\307\035\274\246H\275\273\255\343_\274\252\256\260\273\215\272\353<\231\334\014\273N\010T=\215z\024\275\026\030\360<\315\330\234\272\234Q\202=\330\321.\274\002\\\254<\003\225\207=\323\312\033=@\013\025=\300\276\274\274\2472\2268\'n\225\275\354\251\n\275\2377-=I\200\245\274N\026\007=fl\007=f\333s< X\t\274F\245\213=\330!\315\274\037]\324\274A\003V\275\232QR=^\216\3568l\210\345\274\021\013,\2758\3642=\037\220\304\274\201k\275=\242\300\254\274\013MD\275\243\t\205=)\246\020\274\307\306j=c\037\256\274h\275V\274:s\035<8=\224\275\316\224-\275\271\202\032=\363\261\246=O\254g=\006\266\271=F\234\226\274\361\243-\275Y>\177<\207\337[=\r\276\030\274\300\230$=[\327\333<%\316\014\275\204\357\213\273\2462\206\275G\t\324=h5\361<\226\213\223\274M\236\267=xf\030\275\310\013N=\256~\362\275\334\254\024;\2129\315\275\254\272\226;\356\235m\275\222x\347<\223\375\025\275N\016\201=\211\356\031\275.\332!\273\222J\003=\033):\274\324\322\177\273\267\317\007\276\206\232\352\274y\314$\275\352\351\261\275w\035\232\275\006\021%\275\247X\023=\203E\037<^{\237\274t\255\033\275\226\211\312\275\025;\242\274\246tr=rd\250\275\365\363\3678\314}B=\002\217\353\274I\335P=\301\371\031\275\014\271A=\333&\227\274\324\320-;_\246\'<\215\347J\275\370dR=\222\211\223\274\013\335\201<\301T\324<\357\317o<\306\231{\274\311\326\273\274\272\205\304\274E\036\302\274\272\330\245\274&\023\354\271\273\234=\275&\307{=\366@\031<{3\377<\0269\244\272\310N\201\275\321b\225\275\263\227\327=\006\020\213\275q\235\247\274\262y\264=\301\031F=k\213\032=KY\032\275\244\334\233<h\306\n=\214\263f=\365\270\252<\246\206N<\234\373\002\273\023pH=\351C\270=\024\353\037\275#\301\233\274\320\222\036\275\245]\316\274\003\250%\275[\006@\275\205\"\222\274\307~\371\273T\311\363\273 \210\334<\320\260\024\2730\010 \275\021\025\302<JQ\356;\262U\005\274\212zT=>\375\215\275\013\222f\274\345\212^\273\016\363+<=\316\313</&n\274\202[\212;\330\234;=\342\230\250\275k\237\301\275\024\n\246\275\227QC\275\322\324\261\274li\315\274\346\205\204\274W\005%\275\273\034\256<\334%\204<\305\214\225\274|x9;\223\202\025=`0\200=r\003\323\273\3346\361:\330\315R\275\363\343,\2751\006\327\275\177]\375<\2640\034\274\344(\033\275\017\0344=jnS\275\207^;\273\020J\231;/>\325;q\rr=\026\225\225<\257Ta=\024\207\306\273z?4\2755\023\217\274\333\267:\275\262\327\213\274\037\236\n<u\3244<\234;\220=\216\334\346<\370\237y\275\232\311\211:\376\177D\273\263\231\303\274\275\263\364<v\210\271<\301\242\356<\321T^\272\235\215\211\275\345\227\223\274~\365\274<\364\313\274\274s\272\260\2728[\\=Q\037\236=3s\006\275:\263\n=\007\346\260\274\251o`\274\226\314\013=\233;\261\275p\264\003\275.\360$=\331\004\233=cd\237=,$\324<\\\377\251\275\220n\001<M\016H\275\246\203+=\277i\254;b\033\223\275\306\361\032;\305\246\365\274Q\247@\275k\357\215:\006{\"=\033\275\227=\336\363V\275\031N\352<(qj\274\326`^=\357\361\030=\251]\t\275\222\366\257=\272y\227\275v\342\036<\352\270\233\275\212\327\037\274\310;p\275l0\236\273t\020\016>\206\002\344\272xs\035=\005\001R\273P\323j\2755\246\022=:\334w<u\232\250\275\255R\345:\362\025\247\274\375\211\344\274o\177>\274\202\2129\275\263\263u;f\206\244\275(\337\035>t\230A\275c\340^\275;\262O=v\023\'\275x\216H<\226\275\262\274\311\247:=hUy\274lg\231\2745Qj<`7\242=\231\005\205\275\024\006\034=U\232\215<\244=\311\275\275A*<\237\007\303<o@\021\275U\265\023\274]9\215<\205\341\314\274 5\373<\314;\250;D\0372=\235\364\353<\372a\024=-\221\036<\211`Z\273H\325`=\241\215H\275\326m\341<y\270\260;\261G\233\274Y@\037=\032\272\303\273\343\223(=mZ\206;\364\037z<\200p\033=\267\234\226:\024\317S\275\034|:;\027;\013\275\016\0362\275XU\216\275\205\210\n=\347]\212\27506>\275\272\237\233;\354)l;\211O\013\273>\010\257<\205\006\201\275\272:\020\275\253\010\244<\202\355{\272\0316\274=\036\357\n\275\212\375\002=\000\273\023=!\357z\273\177Z\327;\252|\277\275\362ab\275\231\334\013=\223\177+\274\227\372\340\274j\3407=^\024-=\016\256\024\274\312Q-<\314.\321\272\220\256j<\031\034\316\272j\022Z=\311,\227\274\005\231|\275\001\243\001\275\221\306\324;Y\336\350=r\267\354<}\006\214\275K\317\214\273(\'\322<\366\272\201:\345\217\326\274\034\034F\275\352\026\261\275\316\310F=dU\357\274\3133\255<>\026\234\272_\235O=0F\246<\312\262c=\r\251Y<\013\242\031=dq\242<P\345#<\027\270O\274\263\274\376\274\207_\354<h\303P\274\264Z7<\005O&\274N\3346\274\252\321\213<\364\013\341\274G\372\200\274e\'\300<\311\232X\272\240\243\177\275\323\317\217<\033/m=\304\342\017=\313\243\007\275a\376\251\274l\242F\275?\301\344<\341\356\021<\304\361c=t\347\215:\301\361\311\274V\256\221\274A\334\217\274\271\357p<\0106[\274\341\304.\275U\305\206<\276\311`\2757\366\003<\031\326B=\346\3418=P\023H=\227\035\017<\270(\021<\231 N<e\002\212\273\216\221@\273\004\210F\275`A\200=d\003{=\010\255\006\274\204\2012<\023\256\341=\317\202\035=V\0320\275g\364\202\275\317\377\233\274d\225<<\370\241\n<-\377f\275\177\213\"\274V\232R=\330\360+<\211\336\005=\014\3226\275d\331j\273j\273\352\274ZI\022\275\301\034\005=Y\027\232\273\271n\200\274\302\034j\275\365\226$\275\036\276.\275\320\214\356<;E\201=\246M\242=\256y%\275\032\363\321\274\227\311\325< U\003\275\3632\313\274_LE\274\027\216\260=\305j\346\274\255K\304=+\n\271\274\244\036h\273#jS\274\376\260\201\274\363v\370\273\265b~<\027S\r\275\024\373_\275\n#\323<\261\302\243<K\353\305=Q9F\275\335.k\275\023\252Z=\236\276\212\274l/\256\273\363cB=f\216\t<\033\023.\276\344\266\262\274\030\305\270<\036\305(=\366-\203\2753\355r;i\350\235<\022\342&=\300=\023=[\245)=\212\373\272\274\330\023V\274\0169\324=\256\177Z\2759?x=xu\034\275\3021\323:\261\267\312\275Vb\037\272|\255\207<\r\242\037\273)G\250=\316&\264\274\202\270J\275%\013l;\362.\016\274\364\271r:\323\351[<@\323\206<\367\036\211\274{\313\352<O\227\030\274\323\216\t\275D\343\255<\306\206\234\274\243\000T\274eE\t\275\220\273\251\273\3032[<\203\244\200\275\026\207\215:\303\\\335<\360\263\205<\207\324r<^U \274\367\304\202=\376\344n\275%\251\345<s\020P\274\307TS\2753:\2149\247\345\324\274^VF=bcu\271\323\245\265=\231z\371;a\360\254;\246 \340=jD\212\275\222\002\310\275T3\264<_\\\037;\203D\352<\001 \207\275/t\026=\203`\002<Z\365\341\274\363\336\300\274\243U\236:\324\244n=\322\311-\275\224\177+<P\376\023=\234\354\315;T((\275\210\204\370\270\216XA=S6\217\275\314\217\212<\362u\274\275\30595<wz\010\275\034\rN<\26694=\315\372\213=\362\030\253\273#\362h\275I\366\010\275k1\223\274s0\355<\000\302\303\273\342\376)\274\245M\254\275\005\320r=\207\037\017=\331T+=\344b\314\274\237\013\007\275\017\267\331\273/\001\334\274#\002\016\274kZ\306;k>\220\272\322\027\343<\010e:\274\316\344\207=[[\334\275R\303S\275\373\206%\273\311d\206;\\x\227\274k\004w\274&S|\2750&\307\272\006\004\\=\372\354\201\275h\355\215=\227\312\300=\207#\377\274\022u\372<:LM=\221\246,\274\352J}<7\013\264<\025Y\246<\005\354y<quN=\334\2201\275b\2264\272\2404\354\274B\261\337<XW\335:\240\2211<\217\027\265=\3354\220\275\245K\267\275\335\025\016\274\364\263\377\273\025\n\025\275%I\230=[P\231\275<\201\231\275\250\213\267<R\367\"\274\225\351\262<\312\3359;\243\310\341<G`N\275jn@\275t:u\274\202\304\200<\204\\\223<\223-R<\210\273b\275\301a\016=\032\\%\275\\x\341\274L>b\2745\341\004=\206n\361<\001\305\213\275\241\302\204=\201\273\277\274\202.\266<\237R\211\275\250\313~<v4)\274[[\017\275<~\360<cfK<\225\035\227\275R\316\235\274i5\n\274\251m\031=\367\322\317;\346MQ=\374*\250;{#|\274\035\250\025\275\210\246\014=\257TW=`\036\002<\r~\211\273\260/{\275\020\216\233<\371\206\216\274Cc\002<\203\376\310\273\303\261\n=*\324\010\276\211.\215\275\334_7=B\271Z=\354>\235;\375\0279<\034\362\226=\010)\301\274\252P\323\274\3606{\275\271\236\251<\033\226+\275\301\022t\275>\327z\2759\216\r=\014Sl\267\\\220\275\274_\202\307;@\232\300\275h\274\206<\3543%<{\331\244=q\264\320\274\006\352\276\274\321\272&<\333\307.=\202+\021\275\327\232\341;\247\266\010\275\320Q\262=\315\367\261=\361IM=\355\017\230;}^\032\274e4\020\273\262\376\330\274F\245#\275u\256\277\272\036\310\203=C\374?\275\214\036D\273A\017\340\274\372\377\315<\021k\030<\276\233\220=\3676\010\275\362[\307<\025\002N\275\305I\375\274m0\177\275P\3629=\001!\217=+\275\254<C\344\337<\352\031~\275\222\230\336\273L\370\026=\214\3263;[sm\274I\n%=\226z\237\275\217H.<R6\263<\315`\335\274[\260\354\274ie/=,1h=\341\370\016=\375\014n\275F\321\347<\223\226o=\3438\312=\360m\222<\350\345\221\275\342\257D=\232.\255<\245\3314\275\372\246\024\275_\243\237\275\225az<\022\311/<S\314\'\275\212_9=\005\001M=i\202\331\274t\314\256<EH\031\274k?\200\275\035\370(\274q\345D\275\377\010\t=\203\234\2749\2376m\274\001\004\017=\253\332\n\274\237I\205=\"\250\275\274K\353\226\2751\314\263=~\317&\273bD\245<\330\304\001\275E\037\240\274\264\"]<0\351\232\272\317\303\326;\324AF\275\0304\3479\025\321X\275\371\232\247\275j:\201\275d\017\350<\371\370\217\274\241\204\254\274\026UH<nG\361\274\r\350\037;\266\345\246\274a\250\301\274U\004{\275@\232_=\2431\036\275?{P\275Z\006\231<\006\004\366\274\342\007\375\273\225\243\312\273`W\320<\376\020\325:\221\342\270\273\320q\033=\311d/=X\343\354\272\346\223u\275\t*\267=\242\253c\275\253\001-\273\010J\205=\004\003\001=\261\243\373;\3556$=DY\222=M\217r\275\006\026\224=/9\226\274\234\304\255=F]\251\274O\021_=\000\301k\274$\375@=\366UN\275\2255\233\273y\260\017=#\271;=\337\233\354\273\203m~=\315\310\240\274\214\016\261\274[\'\372<\221E\303:CE&=\n \212=d\346\201\274\0143\326\274Mb|=\316\205e=K\317\"\273\266\030\216=\360\314\004\274\202Q\005=\374\305\225=#\233e\273\320\312\005\273\200T\312\272a\301\217=\270\350{<\3516\033\275\230\200}=\213f\206\275\277 \000\275\307k\233<+A\013\275\20407\275n\027\344\2739\355\352;\202\027\373<\345\234\242\275\317n;\275}\035\223\275\371N\225\273#\363u=\243G\313=\210\357\001\275\0207\225=\034\257c=\320/\311<\371c\252=[\257\336=&{b=\004\275\274\274\220\007\344\274K\257\250<\256\344O<f0B\2741C\247\274\033\026\221<4\307e=\202\214\277\273\rZ\273\274B\321\307<+\317\244\274z\2161=5\366\203<Y\302M\274o>\"</Y\375\273\210\232\031\275\234\220\344<\306QH\275\246\304\336\274{ B\275\206\274\313;\220t\277\275\211\315\234\275%\323H\275Q\200\203\275\233g\273;f\007\242<\310\377\242=\0073\034=Z\002\235\275\365\315\234=\214A\001<\217.D<\252\320 \275]\234\007<k\260\230\275W\354\032=-\210\365=\226~\231\274\303\350\324\274\273\376\264<:i\234\272.\0355\275\212\254\031\275\211)\331=\254,\204=a),\275\311\315W\274\325\354h=\226\020\025\275\224\270Y\274=l\311\274d\230\352<\003\'\213\275\263\365\r\275@da\273R\'\263=\263-=\275\333\3357=\222\023\037:5\'\271\275\274\342V\275\241j\010\274\300\0206;\033&\363;}\326U\275\032\321\212<%id\273\010JC\275\021\351D<\307\357\235=\217>\221\275+\236\003\275\255e\323\274\357\226\241<\001\371\203\275\363S\306\274\026\240\343<\361)\212=\340\036\223;\244{\032=\030^M\273\217\231\266\273\027\261\242\273\265(8\275A1\352<\317\r\230:\215\232\033=t\224\260<\026\365\032\275\221\361M\275\203\000)=\002\036\247;H)P=\311\3523\275\010#\r\275*\241\247\275\220J\326;CQV\271\315\273 <E\270\251<\n\263u\275\253t\373\273\216p\235\275@\t@=s\3633=\305\tG<I\233B<_\356\214\275`\221\334\274\3379\254\275\310v\230\272f\266==-\2104=n-\255<\236\rD<\360\322\255;\005\254\256;h\001\364;b\215\216\273\307\355\244:Z\256\227<\n\020\016<\264\224\310<2DZ\274F5\034\275\271\333@\275V\001\n\275\3671\244\274l\317 \275\230\366\220\274\316\253\376\273\200\267\021\275\277\211\004=\335Ul\275f4\312\270\307\313\262<-\243t\275\217j.=\377\213\234\273\374/\321\275|6\t\273z\215\024=\376\027\301=N\304\257\275\215\242\201<\204\204\n=\235\273$\275\004\255\006=)\"\251<~\211\312=\333\232}=\221\226\000>\264Z%=\2405\032\275f\355\330\273\224&r<\211\227\272<n\303\230\2750Xf=\374$\222<D\357g<\0336\327;\020_\226\275\227\033\311;\351\317\270\274en\373\274\200\262\265=;2\235<\222\371\235\275\335\223Q\275\334CJ=V\203\325<\277\343 =\363\244\270\274\026QR<\341QL=\224&\274=\014\030\210\275\246\007\017\275~\336\t=\370\217)\275a\031[\275\200 \235\275\345\3518\274\221\032\333<[\312~\275\200.\276<|\341A\275\261\333\231<\363i1=v0\210=\372\334/\275+\277*\274\314FF=\263\257\005=\r)\257\272\274\216\"=;\356\026=\363\004\210\2755\272\230\273\255\004\306<-\034\360<\243\'\252\275Z\240h\273\\\300\301\274\316\214\010\275<sX\275\377\'^\274\371>\207\2754\2250=\220x\270;d\3733\275\356s\202=\031kI<j\225f=\200e\235<k\317U=\177\020\211\275\026\301X\2751\315\337;\277\205\"\275\313\324\314\272\025\241\346\273KP\242;\304\014\322\274\222\373\244=\256:\022=\223\021\251<\335\345\"\275\030\265\253\275\314\214\242\274m;v<I#z\2740\014^\274\357\3368=\333\3626=s(\026<.f\307\273(r\316\275\266%\007\275]\334\217=?\240\205:7\302\347\274\327\271\027;1zr<6\000l\275#\020d\275PL\033=\226\353S\275*\204\177<W{j\274\r\346\\\274=\344x=\0179\266\274\211\313\022\275\345\203@\275\360\372B=\014K\203\272\233\217z< \024\177=\313Y\204<\033\000\220\274M\000\020\274\226\304e\273\303\343u=w\311O\275`\237\362<\024t\251;\351\370\357:5\245h\275\340\t\t\275\201\335\261;\034/\237\274\251b\010\275\213\276\370\273\257\312\305\274{\223\207=\"eb\275\362\232\204\274\245B\t=\230\216\t\275\313\274\304\274ga\270<!!\357\273\366\374\241=L\270\236\274G_\206\272\356\240\262\2751\347\374\273\t\263\323\274\010\300\230\275\270nx;\271\306\257\275y\226.\274\203\254=\274\266\352\r=\205\260/=\3274E<z\261^\275YO\354<\000\\{\274/-\261\274\315\207I\275\256\367\301\274\037\376\313=\325\330\220\274\rH\034<\213S\211=\034\036\220\275\335\372\300\274\216\262\023\275\206\215\234=>C%\275\222 \024\275=\223\005<~\330Y=\371:N\274\030\301\264\275\310\272\336:\321\337\020\273\213F\225=r\024n=\255\333t\274\304C?\272\362\r\274\272\326i\242<4\2558\275\314@\324:R\333\250\274;\330!\274;\306\302=M\256W;w\236\256\2758u\227<\206\324R\273\n\266\305<\017eO=\206\372\003\274M\021\327\274\353\314\370\274\335V\244=\021Nv\275\020\334\005\275X\315\240=\326}\022=\250\266\255=>\217\222\2755\260\217;D\225\230\274u8/<\ry\241=\300\357\372\274\313D\260\274en\010\275\322\304\001\273\217\362\271=!v\373\275pxI\274\"\370\271\272\033\254=<E\027\353\274vyd<iYk\274W\350*\273q\'\354\274\324J\225\274\335\343\263\275\350\234\201=\321\300\253=TN\013\275\014m\216\2756.\201=$\n\033\276\351.?\275\323F\345<\323\226O\275\216\362\232=\366h\233=\276\264\353\275\302\321\037<\325\302T\275\n\322\233=n\313\306\274\225_b<*Q\304<\2757\214\275\3362\000<_0\232\275.\243\240\275\251\252\215;\213\266\250\275)\342\273<b\345\035=\004\266\217\275\031[\032\274\201X\034\275<T+\2757\351?\273\014\336\307<\303\023\037\275i\237f<\310\264\n\274\036\261\372<\271@\003<|\016\226;s\200\t\275T\346D<\361Pb\274\267\2344\275\254\255\376\274b\241\363<\251\005\365<\235$5\275-ny\273\356t\375<g\262K\275H\366\333<SS\237\274\303Y\010\275\360\020b=\311#|<]\210/=\3239\341\274\316\324\366:[|\320<v\375\263<\265r\025=<\256\375\274\270\322\276=\237\263\256\275\206\250*;\337\233\371;o\233\233\274A5\375<\331H\306;\007\315|=hDw\275\272%\241<\272\245\210\274\336\372\201<\375\365\235<\356\320\254\275\214\220\014=\355H\245\274\266,\373\2733\032\324\2749=\247<4x\001\275\365h\316\274\350\371\330;+\360\212\274h\2270\274\364OP\274\n\345\224\275\223\204\212\275D\250\027\2754\3212<d\364\234=\010\022\010\274i\246\200\275{F\014\275\363\372\317\272\341\r\213<\205\033\233;\314\004\315\273\304\024\204:\005\"\365\274\206>s<\376\202\275<\345\303\253\273\035\"r:\336\337\311<\027k\252\274\337w\206\275\367\242g\275\273k\202=gsW\275o\035\333\274v\242\240\275\204\354\366\273~bq\274\031\0224:,g\251;\3165\254\275\360\225\357:\0200\213<\237f\016\274\303\250z\274T/\363<\r\341\300=\352xl<bj\222<\021\332l<\314~\177=A!\306<)\215\254;\2753\r=\232\355S\275\312\260\313<\304N\272\271I\274;=\321\347v\275\241\004F=\354\020\264\274\322f\000<K\023\375\273\226[\002\275\346t\000=i\022\033=+r\220=?\367\253\274\336,\221\275\307}+\274\263q\244<\306R\337<\213A\230\275\337r\301:\367B!;\241\344~\274\203\235\263\273\025\022\001\275@IN\275g\325N=\241\332\206=q9\240=\236M`<\220\304\231\2757\353\355\274\026$J8\371s\337\274\352\3651=&\337\021=\3509\r=bp\336\274\241w\340\274|P\206\274\216\205\235\274\244|(<\275Fs=\227\030\246:_\355\236\275\006\334M=0R9<\342\216Q=\"@@\275[\351\254=\243H\202<\200\313\303<\377\026\r\274\316,d=\337\337\343\274\320d\234<\332P1\275S\315\243\275\365\001\300=\241 D\275|\013\247<\306_\331=\235j\226\273I!\353\274\246\221\236=\"\021\335\274\274\022\233\274\364@,:m\241\237;Fi\200\274\305\205\350\274h\212\034\275Lz\234<\322\r\242\275w\345\232=T\003c\273\251\014\265\274\'\030\024\275\334N1\275\021*f\273Aa\202=\337\207\300=4\272\200\275\262~\201=K\263\207\273d\032\246\274Y{\242\275\263e*=\274\'\233\274\032\362\205<\301k\267\274\0138s\275\216\204\234=\262B$;\366p\215=\224\017;\275(y\232=\0243\004\275\341\242\216\275\023\\\322\273\227\2627\275\341\n\016=\261*\003\275M\220$=-}\277=\334\247\004\275\232\330G\275\200.\014\275`\202\303\275\333\316\035=o\352b\274\207\235b\274\026\372\206\274\205H\206\272\245\376\311\273^\273\345\273\217\301@\275\262\235\024=\326\205\230\274\273/\037\273\237,\027:\351> \275\313\254Z<\335 \035\276Ys\217=\231=\355;\002}L\275NI\370<B\205\335;\227B\251=\314_2\2752%\334\274\020\312z\275\320I\267\274\035\274B=~s\010\275\010G\037=\335\245\241=\332\024\026\275\307k\021\275\344\376)<ol\222<\313)\243\275\033\202\206=\303\342\236<\026:\200=\326%\264<\032\220\251\275\021D\020\275\037\3638<\366\342\203:\324I\331<\320\333\264=\265\344\205=A\321\276<\231\261\355\272i\256\266=\007K\005\2758\327\251\2759\262\237\274\306.\014=\253v\301\274T/\227=\215\331{<\263o\000\275\016#\201<j\231k\273l\020\\=\227\000\205\271\230\'\316;\265\336\250<\036G\243<7\237\202<\275\255v\273\310>\254\274\216\203\017=\023\201K\275\244\304\346<i*\204\274\252\275\342\274\231\2007=^\336\203\275\207@\"\274$\206\003<\374\307*\275p\032\323\275\r\311.=+\004\214<\032H\007=\234l\330;\217\335]=C$\216;\377\330)\275\275\243\325\274\277#\243\273^Z\025=v\016\277<!g\255<>\361F=\271#\235\275\273@\'=,\342\335;\237\233\326\274`\330\233\275|\365\014<\330c5=\215\335\323\274\007s:=0-\017<S\314\027\275y\216\036=&\332=\275\254T?<g\312\275\275\021\010O<\376\000\215<\013\212{<\364\026p<\356\307\253\274~\0147\273\003\317\371\274N\364\252=\026\nB=\322\262b\273u\234\260\274\237\261A<~&\353<\351\364\236<*y\336\274\224ND=`\225,\273\362Dg\273\263\263c\274\262\327&\275k\0021\273<\032\235=\271\271#=\020\273\256;%\362/=\330\314\344\275\253\232\023\275\0370\014\274}<\000<\276;4\275\263\200\336;\273\343\314\275\023%\225\273\315\374t=o\377?\274\007Q\330\274i_\024=\\\245k\275$G\336\272\315\307?\275\3063C<\247#~\273\230\303\363\274\272\036\345\274\203\376\244:[\r{<y\234\212\274V\206l<\314\373\375\274\003\374t=\234\343\213=k\244\213\274\007h4<Mb\035\275\226\361W<\325\355\r=\220\007X=\230K\037\275/2\214=\354\022b\275wpM=D\364\014>\236\370\210<\257\306<=\031Wm\275#\320)=\016C\224=W\035\351<\"\n\203\274\261\247\231\2753\007\220<\337\2251<\212\273[=\200\026\354<@;E<\001Rz\275}Ux=\315\037\004=M\017\\=\200M\023=\226r\235\274\2702\244\273#\344w\275?+m=\237\373c\275\001l\365;(\277\274\275\000\r\252<%\\\213<\005\003\010=\306\361\234\274\034\372\035\275h\201\003>\t\273\013\274\247\2140=\326\372\212\275\021t\316\274\205\246\350\274Q\242\036=\335e\335\273j\030\264\274EW\235\273\337$\031\275\376>\243=1z\000=:rJ=W\237\250\2757[\267\274\366x2=\361\356~<y\023\2428\366\022\024\275\200\300\331\274\323L\276<\271\017\264\274\006\246\266\275\316Z\212\275\'6/<u\316\343\273\177\211N=\364\016\216=\002\262\003=\271\0207\275$o\373;m\323)9\004\230\270\274\030\021N\275\314YS=0\021\375\275m\2502\275\357\276\232\274<\267f\274\215\021\376<_\343\244<\214\360\213\273xYF=O\222&=\201\362\200\275\246\353\366<\271\3134\275\000\010\023=9_\350<L\360\205<\340>]\275qx\207<\303\371\202\274\255\3321\275-\025\344\274\264\212\230<\001r\215<\270\262\234=\000H\356\274\361\026\257\275\3439j<9\200\204=\242\346\227=T\\\234=J\216\215=\366gD\275\nf\341;x\322\204\274\330\217#\275H\301G:k\214\344\274/wi;\245\312\305=\313\232\260\274\213F]\273=\254S\275\272K\300\275\217&\021\275\'D\004<!\322\206\274q\036\254<\037`\"\275\243u\301;\264\315\243=\341d\371\274[\232 \273\371\370\336:\362\262\242;\202\350\205<\212\307\235;xw\006\275\2513Y\275\267\355@=\013+V\274\300\353\025\275;\210\230\275\336\237\337\274h\273\013\275Gc\357<n\"\n\275\007\367\233\275\377Q\214\275\376\n[\275\254\242\333\275\203|\024=\341\200\323;b\370\236<\331 \234<36F<\315\266\325\274^\357:\273\255q\345\274\216\3642\275\301W\004=\027\\\034=\324\307}\275\2522\004=\032^\207\274\024u\207\275\022)\374\273f\266f\275\305\264J\275\014\n\331\274\346o1\275\"\203.=\207\207\n;\347\344\n\275\256\250\236<u\213\375\274\376\0026\275\361\302U\275\243\202\304\274K\366\203\275\026\016\377<\350a\035\275\306+\016=\306\253c\275\251P5\275\340\353\302<\346\257e=\301Z\002\275\260\014\r\275\315\245\344<\363\231\211<\214\034\237\275\256\313^\275W\362\007\275\336\210\351\274\264\2017=&`%;\204\370\025\275\3123\t=\251Mi;\372aw\275\255\233\2579\267\335h<vy\210<Z\253\357<\362\352\346:\245\3745:\256\'c;\366\033o\274\320\245h<\344W\005\275\344V6\275\256b\264<\247\272\376<\327\342\324=\256+ \275\023\274\253<\250\032\221\275K\004\307\274\260\031\252\273\310\275\366<n0\341\274G=\212\273%n\375<\205c\014=\337{Y<p\354L<%\373\017=/\213\004\275\t`7\275\344>\236:U\3714\274\177>\001\275\337\263\346\274\337\255w\275q_\371\274\260\371\373<\333B\023=Ca\3259\317\000\262\275H\001r<IdE\274\r\242\211\275m\356\353;\2415Y\274|\257\340;N2\224\274\037\0258\275\361\267s\274\315j\252;\023%\351\273\t\371#=\243i$=G\\\024=\367\331\204\275\367\277(\275\243\232\020\274<\036\027=\270H\010\274?\252\033=\351\263\206\275\004\267i\275\253\303\017\275\203\026r<\374\033\242\275\344=\313\275\264\356\016\275\233]\r\274\273\212\277<\212\005\237\273\354\361\210=r\022\034\273\301i\227\274\r\205w9\203\341\245\275\227\355\003\275\345\210\327\273\2023\201=\267\311\201\2741\361\330\2743\217p\273\3101\024=\363\356\306\274\275\341@\275\204T\244;\341\203!=\363\375h\274\220\273\203\275\217q\245\274\275q\344\275\231t\340\274\370\244Q<\337\344\177\2745:\244\272\216\367\264\275\301)\270<M[\221=\302\250#=\210o\240\275\3458\334\273\236\032\252<\226\307\350\274\256\016;\275B\202\003=\032\323\007=\217z\177</\372\016<\"\240 \275T\222\230=\"wV\274\264\036\020<\311B\352\274\210.F\275Vm\240\275\306\023\205<\253\336o\274C\376^\275<\207\235=\241s#\275\272\317<\275$\361\220=ik\254\274\363\247\225<\341\000\031<\203\224\034;\035\357\210<;6F=m\332\245<\270\316\213\275\241Zu\274z\320-\274G\236\016=\333h\334\274\270A\002:\341\004d\275\321z\274\274\006}\235\273\356D\307=\214\234\230\275\350\242\275\274~\250\341\2746\316\204<\021\203\204<\357\246\226\275\037\254M;S\275J\274!Ej=t\263\375<\261_r8\004jw\275\2652\273\272\330I\226\274\2756e=\226UD\275\270\007\004=\267s/\274b\346%\274/\275P=\224/\263<JX\236\275\240\323$=\346\234\262\272_\350\262\275[Q\206=:\315T\275(\006\341<b\200J\275\010\277\325:a9\271=\203\3473\275N\352/=5\263H=\r\373F=e\325\310=\342\254\231<`\345\366\274\032%\034\275\312S\246;\275Y\022\274\017k\203=e\227P\275\273\223\004\275L\362d=\376\332\013\275d7\025\273L\037\217\275\354\032\257<\274\n\316\274\373\004\270=\267I\203<}\013%\275;\353\036\275*\233\244\275\225\032:\275e\342g\275\277_\204\273[\221\033=\247@\202\273\266*\204\273j\252j=\261\2407\275\301\320\016\275Z\263\342\275@/\211\275\352\346\027=n\236\356<z\035;\275\262#\254=f\370\261=9\244\215\274\220?D=\212\310\236\275\340\364\026\275\353/\232\275\017\247\244<Y\014\n\275\334h\272\274\307w\006\275\241S\305\274\307 \341=\222\364/=\324\277\003=6\214\267=7[\216<]\207\264<\321\033\300;\'\242\206\275S\237+=\332a\230<\230L?\275\305\312\010>\032\303A\274\321v\211=^\317\373;%\241V\274g\301H<\251\354\236\274\2525\225\273l!o\275\215\211\246\274D)\347\274/J\036\275b`\342:\304\207\035\275<\216\010<\354\210V=\225\332I=(\244\'=\224\235%\275\260\365\351;lE\253<\260*\275=\224\270\216=\333V\322\274\375E\'\275Zu\'=ye\314\273\363^ \275k,\016=r\333q=\020-x\272\300\372\236<\202\337\037\275\t\037\213<\377\r\327<\036\312H\2750lX\273\375R#\2744z\250\274\234\251\235\274@R\217<B\265c\275\304\246\261=\222\016\317\274\024\361\274\274\361\267\253\274-\350V\275\026\362\333\274\244zL=\217\343V\274\267\377\036=]\304q\274\016\014\321\274\232\2266<\243Q\254;`\230\224=BP\005\2732u\032\275>\375N=\016\345\271;B5a\275\353}\020\275\314\340\254\272P\243\262<):h=\006D\264;\245`\003=\237\265H\274\230\227x=kV\223\275v\321\202\275\312\025k=\237\247\371\273\372\313\356\275|\3737<^\254\326;\202\352\305\274\303Ob;`l\305=\005\020*\275`\034|\274\032\031\315=\342\324^=\031y1\275\313\027>\275\206\323\266\272\307\263\225\275\222:,=H\037\223\275%\216:={\362\235\2744\267H=\205\324\210=\260\311(=`<D\274\241z\020\275l\367\264\273e\372\204\274t\241\270=Xv\371;\344\343s=\203\304\036\275\211v\227\274\307\255\237\273E&\226\273\016\2103\275\341\3756=5\304\247<8:\320\266\274UR=R\246Q<\360l\3019\230\370\010=\027\374\014;a\000W\274\326\237\022<\237)\233=\306\212\306<\301\265h\273\020\332\307<\272c\310\274\235\035;=\305\353\333\2747`\306\275\253(\030\275\244\311\n\274\247\302Z=\003WN\275D_\002\274\262\215\206<\372\021.=\005t\004\275\274W\\\275\3010\256=l7\023=\342\273\017>{\377\240<\0028#\275\346\031\345<\225\234:\275GZ\023\274\337\035\353\275\243\020d<1\037\345=\236-\260<\354>-=\3506.=\263\370\013=|\314,=\263\3063:|\331\326<\224N\010\275\3345\034\275\376b\202<\215M\210<id^<V\261I<A\206\002=\021\216\366<\007\205W<7\033\230\274I\r:\274\\\235\335\274\024\036\t<\245(\360;\034?\327<\333\374\\=\333\"\236\274g\243\210=\026\tI<\377fv\2742\336\206=K\310\307\272\026\257\034=\203F\025\275f\216\217=\201\034M<\023\220\314=d\310V=\315\201,\274N\r\212\272\220Z\004\276\330\352\000=\257\310\r;0[\315\274s\223\010=/Aw\275H\002\214\275u\225\241<\233\233\270<\211\036s<\211V\331\274:v\314\274\313\277\004<\312R4\275\200M\000\275\003\3013\274\224\037\n\275\346\302U;>\301\\\275Mf\267\272\310\277\352\274\\_q=/\337\243\273\235\246\257<\330+-=m\220k\274\332\000\256;\177\300\340<\345\277\270\274\027\212\335\2757Y\336<\355\320\373\274^\031$\275\374S\253=w\343n\275n\332\276<\350\244;=7Z2=\213\031\224\275;X\231\275\341;\210=\251:\260\274\264!\357<%\022\375<\373v\2439\205\211I\275N\374\262\275\nG\014>->d\275\35776\275Y\307H\275T\271N\274`:\323\274\307\222\212\275\313\342\223<\3720\271\273\277>\232<>\372\n\275\362\276d<8B\201\2754\265\221\2748\204\034\275\252\342_\274VI\201<\025\007#\274\334G5=\300\347\206=\200zS=Xp{\275\265\356\276<\302\352w<\255\2127=\2413\327\274S\007\217\275.6\207=\360\206F=\322G\230<\363\272\275\275u\357+=\345i\007\275n}\231=\345KB=\237\252(\275\262q\201=%s\017;q\037\014=\245\034S=\347\354.\273\035O>\275u\266\233=\254\335\303<^\037J\274T\030N=\2779\202<-\206[=N\230Z<\2614m=\273\302)\275d\022\255\275g\242\030\275\013\367\027;\345\323\372<\356|\242\274\r~\023=r\250\222<)\020\336\274\254\207F\274\236\005\270;f\030\272<f\037\t\274b9\235=S\307\'=S*+\273\350h\203\272\351\364\352\274\004`\010\275\214\214\365\273\007\301H\275e\207\"==\233\320\274-\325\214<i\205\211\274\220\246\013=\241LH<\3309h<\253rR\274~\252};\014\326\241\275\3715F\275\242b\311< \031\026<\020\026\244\274\301\272w=\3273\332\274\255N%=\"+\244\275\332\336\215\275\306O\304;`Y$<\034M\340<\001\307\306\274\374\277L\275\207\362\265\274?\205\276:\273\027\336<\273\375\207=\303\334\n=\030\036\014=qm\301\274M\210a=\377\267\315:\t\214B\275p\222\000:\010\'\215=c\321\032=\032\351\222\274\323\272\271\274\203\261u\275\302\2553\273$P\212=\270eD\2751&\025\275\226\023\351<\302u^\275\232\312!=\013,\200\274\267\360\236<#\226\255\274\007\370\323<\322\320\234=\034\311\\;\355\023\373<\2574\256=\031\r\206\275\251\373\367<6Up\27345\351\274\257Ve\273\254\231\001=\207\370\277=\272\000n=\316\353\360;\006D\t\274-\371k=\277;\234<O\370&\275\201\234y<Wv\026\273\265\370\001=\036\224\312\274\213\247]\273\364\031\003\274\n\312\301\275\'\023@=\377K\301\274\240v\303:a\025T<:\206\351<\244\326\254\274\351;\\<\376\3578<\316\322\253\274:1\322\274G\306\204\275n\033\376\274\360\317\263\274>\231\"\2737H\245<\325\341E=\n-\360\275\320\356%\274Z\007\302=!1\017=f\032\002=FO\200\274\336\034H\274\213\245\023=\236\343#=J\214\276\273\014\"O\275Z-=\275\n\210H\274\222\217\016\275\022\000\200=\227\242#<\243\250z=\013@e=\375M@\271\325;\215<\335,\271\274\216B\236<\257C\310:\220\'3\275\t\252,<\330\303\366\274\265\230\334:\026\232\002>\222T\277<\3229\245\272GF\312<\212\354\351\274:\352\205\2759\352-\274\264h\346\274\252J\201=7\340=\274\356C\357\274\360F\330<\333{E<\007H\025\275\034\261\211\273R\247E\272\276fn\2756\021l\274\026\304Q=\373V\376\273\030\241\304<.\200L=\262\000\003<\324\215\277<\236\260\225\274\306\305K=(\320\205<V\240\221\275\253\223\353;\20093<[\356\254=\334\\\275=t\230\222\275(\266\256\275\230\250\264\275\231\013\214\275\224!q=\377\233X\273\320\221h\275\243g\000\275\320\201\204<\311_\034\275\033\365J=\010\245b\274)o$\275\223\303\322\274\217\243\207\275\006\327\003=\312)-=-q|\275`\326\300\274\300\020\333\275\235T\235<\342\363.=i,4\275\036a;=`\314\227\273\363\021\351;\376\360\325\274\353\024;\275\261\230\341\275_\262\210=sW{\2749\303\277\274j\221\007=m.\002\275\300\224V<\345~\354<\345\tN=\347;\3039\274\030\316\275e`B\275)\360_=`\267\006\275\'zM=\377\301\r;\376\213\026\275Yx\310\274\\\203\226<\234Z\203\275/\177\t=m\375W\275\031~i=\364l\244\275\375\277\231=\006\3253\275\\\334#=\\\031\222<\363k\335<t\003N=\230\031\214:\004\'\003<\343k\177\274\244\276+=N\031\177<R\275\027=\334\3200<)\255\247<\305\222`\273\305`\013\275\367\321s:zT\273\274\270\262\223;3\001\235<\240#\016=u\347O=t\265\246\274m*\001\274\025,J<\210\002@=\004\223\006;J\254\';\013\020\370\272~\033\227=\010\3511\274 \370\324\274d\233\220\274m\225\245<\243\252\254\275!\322\361\272)x\001=\353D\346\274\020\244\007=\301\355 =\321M\311\274\026\031\003\275O\372n\275\375\013\247\274u\002#=\234\006}<\311\035\017\275\321\376\221\273\247!\001\275\036\326\240\275j\t\341<q\233j\272i\245\233\275c8 \273\346\250\315<\201\253&\275\313Q\262=i\324k\275#1\253=?\315\202\275O\230\306;!0\007\275\240\336a\275\'\344\267\275\031\377E=\002>\307\274\323\271Y\273\002\004\t>\303\2379\275%M\250\274!\315\021\272\203z\t=P\255\326\275\312\277^=\232\004#<\362\247\252\274>!F\275\354\353M\275>\332K\274+\370\332<\344:\213\274\333*t;M\t\245\273\033\211\310\275?bI=\226\302b=\277\3377==\216\201\274l4e<?\234e\275\306En=\222=\313<<\305\217\275\224\362\317\275\215;w\273Vu\006\274\213W\265;M\177\321\274H\366\317\274\305\335\242<>\013\347<EB\342<\020\332\026\273>m`\275\363c\004=\262\314\000\274\346\362?=\252<\035\275p\206\260\274c[\025=\236(p\275\320\023\211\273\301\202\224\275\322\3677=7\255\213\274j0X<\272\301\366:`(M\275\305\336;\275\014<\241=\210r\027=\200\014\024=o\203\202\275\024\251\330\274_\230\275=\221U]\275\221\332\037\275D2\205=\236;b={\n\266\274\026\367\376={ \023\275)\013\022\275\233\326\031\275i\237\261:_\271\200\275\205f\300<\356\311\232=\340=&=\263\315!<\242#\261=\031\037\364;\032\317\211\275s#\313\275\026\360\322;qw\005\275\362W\247\273\257\225\233\274\365\254 :\272Y\317;hn8;\372NJ\2759\323!\274\307L\007\275\216z\304\273\022x\024\275c\005\270\273\253[!\274rY\273\272\245\247m=\227\200\220=5.~\274\274\331\021\274\235\341\010\273\262;\010=\274\221\222<c\217\025\275li\232\274\316\214\266\275\376\t\243\2757\374\025\275\361\316\224\274\202\3026<b\336\304<\353Q\240<\346\202\240=\341d\206=g\266\330\273\214\034\211<\257~\342< \372M\275\345\254\307\274\211\211Y<\323.\331<I\303\302;\014\036.\275z\357`\272HA\006\275\272o*\274\322\324Y<\353\202:;\335\335\t=]\357\221\273\023\017\221\275\003\013==0e\312\274\200\013\030\275\2700]\275\331C\r\2748a\016\276\236:\216<44\207=\377hi=\226\347\034\275\305\231\215\275b\250R\274p\322\006\275\312%\253\2740\214\001=\354\272\232\272\273\306\237\273j\333\215\275Y\232a\274\005H\027\275E.\036\275\371e\r<\n`\t=\213\253l=\tjC\275Aa\226\275\241\200\262<v\375\276\273\343\216B=f}\215\2735\267\276\274>\222\n:\027\030\205\275\026K\034\274!qu=\371\271b=\032tB\274\271\313\207=0we;\200ar<\223U\031<\201v]<\301\016\271\273\351\017\301\274\377XR=@\010\225\275\0349y\274\257d<<A\327\215={5\010\273\024\014\017=\215\377m\2750>\271\275\342\027(=\0222\010\275c\350\237=:\271\036\274N\216\321<;\3121=\027\300~=$45\274\272\034~<Q\366q\274\344t\341<\220\036e\274\255\030\357\274\305\t\315\273d\2537=}>)\275F\201\240<\014\255\312\273m\272\327\274i{<=\317yP\275\0328\025\274tD\226\275\207\211\257\2744\313\226\274\342\023\206\275\266\200\250<4\036\223\275\334\240\354\274\034D2==\017\213<\217\3768\275\023\376\002=\"&\007\275\263\261\240\274\033u\225=M\236D\275\355+8\275i\333\302\275\203\3367=Lj\363\274\3701\235\275\236\360D<L\030<<\371\2526=\254\303\023\275G\225U=\260 \177\273m\200@\274?iT=\226\207\267\274\267\303\211<\034\306\202=\203b\223\275\363\234\252\275V_g<\301\225\027\275\032#\352<V\275\214=\336o\233=\376L\320=\027\020\206\275(\205\223;\375I\236<%Sl=\n,\304\274\246X\321\274\377:G\275\234\245\263\272M9\001\275\337\242I=\204a\256\273\037\346\211\274\336\3054\275\230\373\305\273\226\020\231\275\364\273\240\2743\275_=\301\331\243\275\261\253]=\234T\335=\016\277\224<\253\226u=\355\303\036<\014\320\250;\2351J<8\302\317\273\'\006\013\274\020|\352;c\305z\275u\256r\274p\272\007\275\303A\010\274\225\362\006\275\022~\274<\234\264\277\274\205{\255=\212(\230\274\210\253\035<\347\207\';\306\200\314\275l>\222\275<sq\273\272\345 \275CW\244<g\377e\274J\315\227\2751\314\231=\3501\357\274f\260\014<\3120|=\213\201\272<>\277\364<\243\307\230\274\352\035\242=\301\'\260\274;b\207;M\265\246=\357\255+\274\207\2614\274\037\230\351<`\265Q=04-\275\370c\250;\343\337\220\275!\"\025=\0348a<\304*\336<\036\211\016=a\336\210\274s\331\021\275\237\323\030=5\217\224=d\333\230;\002\"9=\010\004\t=\006a\236;\256\223\327<\247\260\366\274\217G)<D\211\004=\370\033\302\275\205\275!\275\203`\334;mx\226;7\357\307\274\301;\347\274\035\262\234\275\333\024\374\272\312\233\334<\220\361(\275\177\220(\275\'`M<\327>\002\274\245\203A\273\225\265\301<5qJ=\265\321\204;u\217F\275\305~\306\273\352\317\013<\206\267t\274\333i`\274\261Li\274\'\324\212\273/vL\2759\223\323\274\343\254>=\023\007\365<5Gp\273tU\246<\350\373\026\275q\220\326;\347ve\275\3178!<\002\301+=~F\362<N\345K\275\2058\254\274\207t\234\273\230-\023\275<;?<\250\'P=\261\364\376;\\\372.;\305\210\227=\252\370\325\274\010\336B\274\346o#\274\301^\353<\002y\237\274B\237\306\274tZ\277<\003\273?<\225\340\"=\006TV=\256\223\006=\355\234K=\202\242\032\275>6\'\275W\211j\275&\007#\274\n,y=\366)\327=6u\375\270\351\034\336<\333\340V\274j\324\006\275?\246(\275\031\376n\275\305\231V<\375qO=x\210Y\275\201\242\210=?c\002=\363\330m\274<\352(={`7\274\004\300x\275\341\370\325<\037\373\225=\221\346]\273s\270G=&Jt=\347t\033\275Z\000o\275\371\241==S\210d\274\222\372\302\275\232$\000=\304\375\001\275n]\263\274\362)N=?|?\275\237\001\312<\221\253\315<\250\377g=-I\006\275\313d#\275\260{\333\275O\370b\275U.w\275M)\004=u\227\"=+\017\305;\367\005\301\273\033\376\024=\000U\t\275\0175\372<\361\026?=\035\265-<]{\253\275LQ\255<\257\225\236\275\234\370}=\337x\266<\243|\320\274\250v\244\274+\300F\275\214\261\024\275\352\344|\275|\321O\275NMV=V)\336=\337\350\n\275c\375\335\275\345\007x<[\343\246\273\'\303\241\272\003\373G=k\371\220\272\345Z =\372\013\307\273\204T\n=\362\221B\275\304k\357\273C\205E=\336\245\267\275\347\205\007\275\277\360\315\272\357\022\276;\342\034\r\275\n\276\3739\264\205\030\275L\034p\275v&K=\203\236\014=\327\250}\275\216\245\244\274\233\t.=%_U\275a\360\334<\234\356\n=\343bf\275k\3004\274\331\262\213=\203,\220;g\004j\275\000\346\232\274@\260!<\240.r=\320B\367<W\336\030;\217\341\334\274I\255W<\004\361\267<\230\346Q\275\344\033:=\010U\345\274?M\240=\274\307t\275\206\342&=r\265\201\275\010\no=\261bH=\347\306\206=\236\330\320=\345D\276\2741\025\231=^\'u<\310.n\274T\351\244\274\001\013\020=* \237<\264x\251\273\204\016\271=\243\037\236<\362\"\t\275\000<i\275<\342\207\275%\273\033\275\022\225\"\2748\262k<6\003\260\273\356\355a\275\370=6=\203\332\212\274\016\025\032=\363T\232=+\177\225=\352\260i<L\022\222=\227\206\031\2750y\005=\332\232&\275g\266I\274\241:\331<\301+\201;\273.\361\275\315\335\221=%\027e\275\352!\311<\273*\000\275\222\273\252\273\356+v\274-\341\237\274Dg[<\270Z\214<:G\016=bq\t=mi\302\273\332\336\312\273\200 $\2737\313L\274\001$\254<2\230\217\274O\030D\275}!\201\274B)\310<\005L\007=\033\204\242<fl!=\326\'{<F\302\232\275*\272\230=\024vq\274A\276,<\201\355J\274\316\252\222\275j\374j\274\215\027W\274\226\374 <\035\252\321;\021\304f=\023c1\275~\004\254\275X@\013<\202]F\274u\327\335\273\0021\254=d\201\237<\350\217\315<\005\320N\275Z\300[\274\323Z\255\275}\333\235<\303\333\322\274^\373\006<\364\025\240\275\242Pl\275\373\321\'=\000\270\276<\200\353{\272~]\354\274(\034\210<[\t.=\325+\313<\013<\235=\034;j=H\374\035=\346\235/\270\000\005\002=\275\022\217<\3250C<\331G:\275\314@\221<\240b\303\275#\277\314\273\210\321\263<\227\211\312\274\252\356\337\274\363dD=\367\334\360<0Y8=\241\232<;\210N\257=5\002\377\274e[\224<>?-;Bq\003\274Y+\322<py\034\275\337p\223<T\257\350\274~N\347\274H\324\336\273r\233/\274\017\010#\275\315\315\276\274Wh\227\275\356\035_\275\2213s\275\313\372\267\275\374\214\344<\272\350\t=\331\213\207<WT\340\274\034\273\221<\337\344\360\271\200\016\036=\'\312\226=U\350Z\275\237o\303;\344C\n\275\274\027\261=\3349\256\275IN0<\001\250\267\274\200\262\021\275h\264\344\273\234\006\204<\366\005\200;\275\317\260;=6I=- 5\275yy\327\274\317\034f=\021c2<P\241\247=x\213#\275\340\346\252<\010\340\230;\342\033#\274\274n\244=\266{\241\275\337F\364\273j\233\255;\365\034Z=\320X\014=\202K\216\273\2630\n=V\324\030\275\332-6\275K\230\230\275-\020\245\275\001\353`\2749\311\370<\300Q\t>g>+\275\203Q\r=\242\326\031\275\370\255\322\272\307b\026\274d\r\350<\226\3521=\226\032\225\273\\\341k;&\377\347<V\224\342<Ly5\274A\260.\275[\356\222=\335\334\213\274u#(=~\352*=\214\t\204\275c\024\r\275_\203\340:\310\017\306;]Q5:\222\\\300\274\210\027\325\274\342\021J=Q>\322=\230\207C<\260R\247<\001\233\241=\303\351#\275\237j\024\274\2664\035\275\343\213e<\317\027\376;\351\301\032\275M\2426=0\"6\274G))=\214(u=tV\350;\255^\321;\214\024j\2758\3555=9!_\275r\315\270\274\374\312.\275\272\260F\274e\023v;\034\242\005\275\325\322\262\274\345\325\211=\206\327\212\274\333sY<\324\024\030;\'E\017<;7\367;_1\301\275O\202U=\023\235\177\275\300\302\275;!i\335\274\002\257|\275\3764\352\274j\303z=\373D0=\302\247\244=0\032\277<\323\266\017>\353\353C<<\365/\273;{\254=)A\277\274\337\266c;\250\224\033\274\002\277\023\2740%\325\275\325\021\025\275\267\363\203<\"\321O\275\237\024\016;`\344#=\374~\024\275t\037\207<*Jq<<|%;x\334\230=c!\342\274\252\242~\275\"\202\260=\033&P<\246\177c\274\002\374d;\260;\001=4\357k\274t\203X\273\322\n\022=|\341\236< R(\275\207\254\235=\227V7=\373\363c\275\3419\026=r\241@\274\327\366\200\275\246\323\276\274\002\334c\275\034G\236\274\321+\254<]\201O=L\262A<\350\323\246\274\211\366\311<\'\224\373<\020\356\256<[Q\\=\203g\216=\000B)\274w\177\022\274\037\347J=\177\201\324\274\351\301J\275\264-\321\274\220B\'<\360L\244\273\026\374\307\274\306c\244;\250\370\246=\177_\003\274C<\247<\221\202\001\275y\346\013\275\006\010\t=\016)\221\2742\201\277\273aU\344\274d>\036=\342\274\206\275)y\264\274\007\344W\275\017\r\236\274\244g\276=k\242\230:\334\236\223<\'\027t\275;T\234\274K%\311\274\221Y\211=<\335\311\274\375\000O\274\340\205\330;\016\216\254\275-m\r\275\371\276\266\275\3149\3079A\014\1777\013\340\254\272\325B2\275\316\216c=A\210\311\272\227\330\034=^\272\333\272N\351\3269\306\022\331;\366\320\262\275\3179\2309\347y\327<\246E^\274\005e\025=]\334\360\275\363\334\246\273\260\020P\275\363P,\275\251\2144=\213\367\326<\'\031\262<H\274C\275kc\233=\2408@=\033,\207\274\354\230\335\275\243\327e\275\316Z\216\274\335S\345\274\367\217\034=\037\036\244<\364rl=\256\374\030=\026O{\274\177\020)\275\307\357\240\275h\242\030=Zh\210\2715\366\243\273X*\237\275fk\"=\336\025`\274duS=\031\302\214\275\322\313^\275Y\350\311\274\307/u=\330\320\366\274\264X\253\274D\034H\274\033\236A\274g\250\200=\276\030\022\275\365>\002<\206:X<\330D~\275\016\256S\275F$\240=E\305\010\275\273^E\275\230d\013\273\3730M\275\031\274K\273h\373?<\316n\233=6|\035<x(\306\272\311X\000>\230D\266\274f\267\317\274e\252D\271\255:Y=w\367\227\275S\351\224<\n\022\347=\236\032\227<\0173\366;\363\"\017=\231P\033=J\367\335<\257V\340<C\226\367\274W\335\263;\343\246\375\274\355W\t;\270K\200\274\2178\262\275\343\344\203\274)\317\033\274\236\222\203=\020u\335\275O\277s\275\024|I=\340\253{\275I+\016>a\346\364\2744\320\362:\\D\227\275\230\216\332\274\323\\$=\210\016z=\022\217\262:$\031\223\274\331R\244=\316\263\250=\234\337\376\274\027\337{<>E\204\275A\362t:\357J}=t\213\221\274\256\367B=\245W?\274\353\251)<S\364^=C\354_\275c\325\027<\023=P=F\242\307\274\201\333\t=\365\246\206\275x\033I<\222\207o\275\225\331\031\274\021\031\245\272c\261\317\275d\277}\275\323\206\255<H\242-=\nD\022\275~\246\200\273L\017\246\275\264\271\351\274\3674?;\000x@=\310\024\342\274*w,;\016\373\357;\314\267y=-#\255\275\330\031\216\2757\270w\272\233\207@=\321\006}\274\027/r9?\222\264\274\233\302\204\274\221\257\310<\345\210g\275~&\366<k,\037\274\334\220?<\007\307\324;*8\003;6/\017=\376\020\037\275\352i\276=\373\335z;\300eR\27514?=\344\326B\275\310\366\321<\305:\250\274\250\016\030=\234\342Y\275\212\033\203\274\\\302\263\273p8\250<\035\231\323;J\336\251\275J\231V=\001e\350\274\312O^\273f!\263\275\375\372\234\275\000\201\201;*MR;9\2475;i\304$\275\214\257[\274*\227)\273\342g\276\274u@A\273\\69\274\220\021\354\275\017\357\366\274c\3622=\336m\322:\270\321\033;\013\255d\275\021\277\207=\033\177\251=\220<\221\275\256VO;\235(\377\273\221\004t\274_\344\371<2\240J=\350aq;\3509T<c\333\332<\032\343#<\031\352O\273\372\321u\274v\037\000<I!l=t\266\354<\016\324[\275F\223^<qIQ\275\005\364\240=\3424\233\275\r\002F;\325\032\352<3\353D=\374\231\221=\036\323\227<\027\r\037=.o\003=\373\010\207<\266\363\246=y\\\210=\ri\246\274\016&z\274\017U\375\274\254\214\004;\242\213*\274P3m\275\316\327\010=9\006\243\275\2366H=\241\377\204<\036 \302\273\006\003\323=\255\353\331\273\361\024\225<\306) <b\215\230\274\377J\232=\031G\257=\227\323\026=1\344\004\275\220\240\304<8\376\217\273\263\3278=\257 \362\273\365\320&=\000#\335\275\251\340\307:\276{\311<\"\321\217=8%(=\375d\220\274\026i\321\275t\253c=\366T\207<w\241\374\274\035\006\355<\360\212\217<i\236\253\275\211\\\352\274\224\310\026<\301\265)\274\321\253.\274\314g1\275k\322r\273z-E=#\323\353\274\002w\363<\246\035\177\275\233\265j<\032:\006=\334\255#=\234r\255\274xx\014\274@g\236\275\240\215\320\274N\311u\2752@\202\274\343\331\264;m\341&\275\037\007f=\223\013\023\275\333\007\243\275!\374\204\275k\"\\\274\351fV=\203\254{<U\261\213<F\177\245\275\024\346\252\274\001\354\341<\020\221E\275\2100\007<\240b\347;\302\260\224<\311\357\203\275\344\364\031=1\2117\273LS\357\274=Q\316<\263\022\265\274\360\200\312\274\367\237\212\275\302/\t<\323\257s<\025\250+=c`\214\272\347\341}\275y4%\273\301\335\225;\3468$\275\203\n,=\255\353X\274v\373\r=\204N\372\275\330 \234=\344\310[=\216;I\271v\020$=\006\313\233<\n\303\277\274\200\320\250<\266k\253\274&G\274=kF{=\255\277\317\274\340\214M<\374\224f\275\020?\207<e\344\241<\351\275Z<{A*=TT\025=]\271\306\274u\020\251\275\351\222\031\275V\202\370<$\370\276=\0300?=\212\030\010=Z\336\250\274\0131O=1\232(\274\246\007\203<\002\275\007=\273\2106\273c\027$\275\307i \275\027^:\274\264\221_\273W\027\347;\332\304\364=\246\332\250\274\201*F<\373J7\275\241}\360\274\203\253\243=\350\304}\274(hm=jA8\275/\300\376<[\324\343\274\024\362\363<\366,\036<\212\375\024\275\031\264&\274m\360R<*2\337<\313\025;\274\177\336{;\207\352\347<\366YQ=CA&=\264\024V<Q\036n=@^\227;\343\375+=\207\223\016\274.\353P\275\325\372\242\275kgh=\301\276\317\274X\274\257:\324^N\273o\250\272\2749\302]\275\255\352\032;\215Y&=\220a\237\274\336\3111\274\316Yn<gN>=\344\315N;\200\003(\275\311\363\204<;\222^=J\016\305;A`\262\272\023\357\027\274\3234\375\274\'\243\377\274\20128=\235\017\201\274kNi\274A\301\201=\262\343D=\365o\033\275\034vX=;\025\236<\224\334\224\275<\277\213=[_\223<\230\352\241;+\033\231\275\226\342\022\275)\364\253\274\230\"\036<\340d\014\273\353\361\'=\035\205o<\0064\274\274\006\t\200=\373\207h<\243\337\203\274\326\010\330\273\322j\004=3y\201\274\316\320\246<?\321X\275\252~\314<\017\275\343\275}>l\274\277\273a\274\2521W\275\211\2762<]\235\'\275J\013\305:\006\260\262\274\350?~\274T\206\367\274= \221\275\034\032b\275Ad\177=)\316[\275\247b(\2757&\331\274\316\243y\275\313\025v\275\023\000\210\274T%\220\275\n\277\256\275\273:\255\274\036\305\226\275\315\246\177\274\337\373\346<\361\023\001=E|\034=\242\333H\274\005nB\275&\177s=sD\245<\244\237\r<`!\037\276\274d\001=\316\014\370\274\001+\'=\361\200\263=\335\021:<\332\300p<\304i\016:\272U\235<\373d\322<\350\246\016\274\002\342\366=8!\005\275`\332\035\275\344\\T<\317:\244=\3135\025\274r\353\220=\351\272\366\274\'TM\275\002\325\203\275R\276\334\274\004#\264\275\273\322<\275\261\266\265<\307|\016\275vf\200\275\022\033\244<%\264\205\275\212\000A\275\303<\256\275\271\340\210\275\337\203 <\326\373\205<\221G\246\273\230\345P\275x\214\274\275x\243\013\275\215\027\354\274I\307\370\274\221\340j\274/\304\021=\233\035\216\275.\177\022\275\213\354\237=ss\352=\325\2405=\016\367\200=\362s\022\275\263\207C=P>&=\035\'\007=\t\317s\273&\337$\275\342\261S=OZ>=\250t==\005\313\013\274\271\005\356;UM\277=\246\321r\2756{\331\273\364\244\021\275\370\251\216\275$\373\302;\205\357\024\273\016\266\014=\207_/\272\327\246\216<R_\r\275\246\274O\274:\325v\275\363\222`=N\240\334<f\331$=\001]F\275G\230\241=w\370\214\274~b%\275}\330\032\275\031\010\036=sg\205\275\263\251\225\2758\352\237=OI-=[@`<\314\004\253\275u\315\345<O\337 \275\262\025@\275E\302\233<e]\005=@o]=\310R&=b\217W;\372#T\274\352\322\220\274\233!\037=\n\037\233<\264\223\301\2751x\237\275y\317\256<\025\201\024=R\375d\274\031\237\205\273\010\3516=\217\334\207=/\317\334<\267\213\334<\355\302!\274\022\213O\275X\333\270\275\237\310\256<\372\304#=\013\332\257\273\350\224\243\274e\363\226\275[\306\37680\367}\272\003\001&\275(\035\024=\345\373\031\274\".S\275\3261\026=\213x\240<\323\336^=iD\230<\034\013\314<\005\005\230<\356-\274\274K\224\223;\331c\310=0\013\363\274&\027\276=\317!==\204\320\322\274D\237\227=\252\311b\273\0223\314<s\241o\275\315\272 =\'\207^<N\264\200\274mEZ\274\333\352\226=\220\235\273\275@\331\016\275o\234u\274\'\253k\274\313\343\330\272S\331\375;\204f(=\376M8;\224(\260<\027\207\316\273\000\252\225=}KM\274o:\030\275{\376\212<M\3716<\351\256]<\345ui<\342:r=\370E!\275&\337:<\334\311\005=$qw\273\312\325\002\274\020\tg\275\211\271.=M\037\013=\257\212\244\272\031\336\244\275\261\303:\274~5\3769F\227\000=\357\211\235<\353(\033\275\341\310\r;W2\201\274\335-\032\275\006\213 \275R\253\022=\307\222J=\244\342\212=\250\022\213=\203\357\207<I\245a=&\370\007=\327\017\211\274\301\244\234<\250\334]=\312\266N<d\342\253<\230\354j=s\306\222<Y\217\025\275vy\220=\206p[<\3509\300\275\350k.=%I\261=nD\332\274\\\360\234\274\201\214F\275`i\202\275d\341\332=X\236\210\275r\201\235=\3309\r=Y\315:\275\252?\247\273\022>\260<\350h\037=\225\336\237<B#S\2732\273\236\274\206Am<\273\n-\275\253\312\005\275\335\177W\274?\235\327<\025\273U=\002i\234=\232\3736=\300\336\036\274\345\201\334<\032\216>=\265\342\336\273q\303~\273\026 \027\275*\002\273;m\240\244=\317\311d\274(\227\375\273k\220\251<\226\030K\275>i\230=\356\014\354\274\022\r\346<\365\363*<\213\310\001:\367y\031\275\253\250=\275>|\243\273a\233k=y\273\037=p\330F\275\334=\271;U!\002<\230\275%\275\035\263e\274\374\014\235\274\254n\235=\016\345\333\273\375\370\017\275 \014\324=\256\267\230\273\220\256$\275z/V\275\377p\340\2752\240\251;3\260\003=Y\375\343\274b\316\026<5\244~<\372\223\033=p}c<\315\017W=\014\342\027\275\224\314`\275Zw\357\275\250\270\246<\336\303\211\274{*\265\271\217^\024<e\005\r\275@\303s\275\363\374\r\274\263\233\374\274\007L\210=\n\034V\274\343\216\010\273\000}\005\275\303/\274<T\314$=\003r\346\274N\276\351\274\320\034\003=\324(\263=\300~\302<\202-N<{_B\274\307\220\257\275n\274\020<\243\221\341\275U9\345\273c\331\343\273\257\376\021\275\214;\034<3)\255\274\226\235h<\323,\247;\031\247r<\241\373\211=\223:\255<\336\"7=p\363\347<\212\327)\275\021\362\364<\334\253\353\274Ra\215\274\222\327\251=\037\336%;d\355\006\275\354\354\372;#7C\275p\254\246\274&\373\206\274;\000\037=\365\206\206=\306\026\335;\360\3264\275\3008\341<\314\306(=L\177I=\002\2421=\213\324\243<Y\371\314=\t\\\352<,\253\272=\310\315\030=\237zS\275\030\2536\273@B\225\2757=\342<\366\\\022\274g\254\302<h\204\323\272\313\203\357\274\030\365F=rr\351;\363\365;\274Dsq\275p\371A\274\250\343Q\275\022\254\376\274\363\275\316<g_\357\274\247\220\257\274\347m\021=\347\356\335\274\226\263I<~7\350<|\254,\274\273\340\221=\347)P\272\215\256D=\227\266K=\201&\000\275\346?\013=\022a\241<E\303e\275$\375\247\275?\202\344<\376\255\025=Dj\020\274C\246P=Q\004\276\273l1-\272\210}\335;\362\344l\275\201\017\002=\335x\331\274\217\274\300;EN\034=\030d\274\274WY\271;\247\235\326\275\305\354e=\253d\003=\210\3579=#R\341;\350\210K=\027\037\374\274]+7\274\260\245\027==\274\355\274\002\233\261<\"\013\023<ZbT\274m?q\274\217\352\274\274\251.*\274W\017\336;\246S\245<\322\240n=\016\325\230\275n\002,\275\241\345\026=\245\206(=\317\360Y\274b\347\254<\017\017\353=M\327\234\275i\3766\275\020\315y\275\266GD=M\323,=_\315/=\351\273\2179\315|\177=\237y!<\246\010[=\325\333)=\ro1=c\356l\275\2177\"=\3331\266<\244\375L=\027v\315\273\006\377g<\221\025\010\275J\350t;\301\254\205\275\257\022\203\275\346\311\006\275)\336\270;Bh\221\275*\263\324<\217|\315\274\354\317\036=d\010i\274\020~\223;.\rV=\226\203W=be\362<\361Q*\275\354\274\001=\034>\201=U\244>=\325\367\254\273o\203~=\267jy\274BO\036\274\002m\375\274\201u\274\273\337x\277=+B\304=\323Z(=\347\311\244=Pk\345\274\313b\210\275\350\006\023\275\254\020\006\275\2526\336=\002\375\214=\246a\234;\00271\275\305aZ\274\336\233\000\275)\322y=\322\351\361<\330\332\227\274\300\317\256<@\254?=\034\2550\274\'\343\n\274\2639\316\2744_\350<\365\333V\2751\007\360<\343\207\020\275\270\215\271<\271 \371<q\0373=\244\377\242=mf\251\273*\201\251\274\022\373\231\275\321Ck<\265\000J<\003\320\350<\\X\215<$\251\003=\256\260\034\275\260B\026\274r\201c=\236\376\376\274\233\027\227\274\344=1<4P\275=\221\271o\275\355\3615=5l\234=|Z\255<\246\004\t\275\010\017\234\275p\237S\273HF\035\273 pe=\354:C\275\366I\277\275\201sl\270\372Ce<\025\254\214\2746\263t\273\"\354\313\274\371\266\254<\207Q;\274\344\206s=\306d\271<\321sp<\217\270;\275d\3312=\223k\273\272\364\022\026=k\211\345\274\265\302b=u)\343<b\006\232\274\236D\007\275\323\261.=\342\2711<\300s\235\275\254\227*\275\021\255\246\274\326\235,\275\246s+\275\223dz;\361\306g\274\022s@=I\337\216\275\337\375\214\274\363\353\263=\342\017\014\275C\233o;\361~\270<}\330\227\275\2255\330\274\371iu\275\275i7=\313\214\324<|5\237\275g\326\237\275\254Im\273\300R\207\275/S\304:\261*p=Y\332+\275\302\324\361<\030\276\017\275=jq\274\371\312\312\273&5\327<{\370\234<\377\026}\275vd\233=\221\020<=\264\242!\275Q\256\202=\314t\222=\\\317e\275ou\372<EQ\266<F\357\266\275\254\272U=`\267P=\204Kx\274\321\276\207\274?1\350\274H\276\210\274\225\3624\2757\317\210\275\n\002;=\233\217\263=!}\000\275E\367-\275L:\203\275i\207#=#9\201\2747L\001=\316H\204\275\372\237\363\274\237\030\021\275\312C\213\272\244\275\351\274\033\262\243<\335\360\237=JU\334<\'\201\030\275\337\037\325\274\233\327\370\274\272M)\274h\022\003\274T\371Q\274CG2\275d|\030=?ai\2741\276\241;A<\224<E\014\034\274\007\037\236\275y\303\277=\312=(\273\214\376\350;\026\3214\273\244\276]\275\004\\\306=cOy<\215\033f=\373\224\212\275\204\022\234=\273l\024=\351\252N\275\335\002\263=\346\233\272< g\353\273\036\350\276;e\034\322\2744\3278;gM\232<a\027t=\352k`=\300\374X\2751\363\333\273d\3337=\267P\330\274\177\206Y=\2043\230=~<\n\274P\374\251\272\267\364M=\034\237\'=\351C\312\274W,v=\2667\305<\221\226~\274\304<\316\272\"\223f\275\250\221\355\273U\260\254<\231T\023<>\265\024=&\264\032\275\302<\001=\210JM=\244\255\210=\256\325-<rb-\275\265\006\360<\223\025,9\000.\022=r\213;\275\277\313\024\274\202\244F\274+\010\026\275\251\031\300\275\227?O=0\245\234\273\316]B=\204\036\270\274\204\212:\275h\027\255\273\203\014\205=\322\177\030=\022\271\333<Ou\363<\220\257\005\275i\037k\273\346d\356\273\013\361*<izN\275\0061*:A\005R<1Lc\275\360\324\304\275\213L\251<\351\364\254\273\0144\257\275\353\211+\275\3460\214\275\331\267\000>[-\212=\353\202K\2757\342\261;\246T\323\273B\345\023:\356\'k<A\225\033\274\351aa\275\000\2668\275\027$t\275>y\237<\355\3711;\337q\231<\353U\212<\005\004\r;\256\036]\275yZ\373\274\366\337\320\272A#\001\274>\304f\274\306\272\204<\236\372\365<\260\n]\275`\340\243;\273\312\203=\275J[=\rO\314=\366k\\=\324\036w=\331H\220\274m\336$=F\357\251\274\343\025\030=[l\203\274\ts\210=\210\233e\275\004M\004=a\351$=H\267\226\275\354\230\216=u\323U\275\247?v=\177#z\275\\\025\233\274CAl<\203k\207\275\341\033\250\274-[u\275\275\256\016=.\305\324<=\274\306\275\252\265\270\271\nK7\275\362\327\310\274\027\3223<)\246\032=\341-f\273\370\0226=\214\222F<\203<N=\332`*=+\"U=\365\260g\275]N\266\274&\033\200=\212&\272\274\341\242m\2749\223\207==\307\230=]^\005=\017\\?=\240]\213\275\037V5\273j\217\272\275\252W\254=\227\213\212<\325\254z\275z1\252<Q3\327<}\272\333;.e?\273\263Z\247:`\242T\274o\\4<#\033p<\354b.=\312\\A\275d\022\233\272,\203\202\274`\245L=\213\327\014=\215\004.=\337.H\274\314L\333<\303\323\265\274\241\341\246\275&\366i\275\2042(\274\017\234V<N\005b\275K\321><\271\221\\\275YWg\274\366\333x\275\341\2022\275\257=\007<x2p\274\027V\264=\256\n\256\274R\370\351\273 \266\376\274\361B$<.\313\265\275w0\333:\337\267\310=Q\271v\274)\3022;\203\017\276\274\033\365\364<\r-\336\275\020j\231=#%\250\275y\3534\275\350\200\221=v\267N:mS9\275\nA\367; )\217;\366Y+\275}Y\242;w\201\027==4\262;T\333\247<T\016\022<\331B2\275\262\360)\275\325\350\301\274\233\3146\275\221\215\257\272q\362\201=-HA<\250\022J=u\374\316<\232\177\324<\004\217>\2759\343\230\273aF\036\275q\024\353\274\320\366\306\275\221\366\026=/;\'\274\336\356\014\274\333\306\210=\233\217\255\273`\370\362<y\021\002=:\315\245=\215\263\214\273\205W\026\275?\364s=\323\3748;\353{\315\275\377\274\036\275?l\213=\316\344\343\274\tf\256\275\0214\316\274\003\312<\275\231\337&\275o\250\202\275op\003\274\241\231x=|&=\275[\312\236\274\275\"\274<(I\273<\244\225\023<\0015m=\366\351;\275\352\252\270\275-]s\275\022\342\036\2755w\310=X.\201=\246\231\301\274g\205\\\275\342\022\234;${\243\274\304\024D\275\342\273\033=U\263P=\034\235\016<\275\277\216<@LP<yy\206\275\222\310\220\273\2571u=8\202C\275\2327A\275\315 N\275M\346\003=\036\371\001\275\027\234\203\274(5f=S\240\022\275\353\350\'=$7l<\207\253\320=0g\266;\360 \355<\005\336\3329\3355M\275\020\307;<>\030%\275\251\244=;\027\\\262=\233\210>\274\203f\240=\221m\257=\010\312\254\274?\001<\274\325t4\275\212du=\365m.\275\270\357l\275\350\337\013\275\300\2110=)\211\033;\347?\340;k\367\277<O\314\n=m\312\244\275\263\370\272\273\334\216\037=\367\233\207=\302f)\275Ls\032;\242\220\207<\315\251\363<\236\253&\274\200\210\340<\204z\026>\223\002\237\275\274\220D\275\322\021\014<\265k?\275\303\022t\275\n\3139\274\023m\r\275\260\314\212\273Uu\372\274[\341\272;|\313\202\275\304\010\203\275kr\022\275\322\002\214=\235a\014=\014F\021\274\202S)<\367\036\367\275\271U\026\275\300\037e\274t\223|=\206q\250\274\002L&<\025ON=\'\341U=\207x\340\273\306\343\n\275]\254\267\274\032\374;\274\357z\347\274\320j\365\275\237\227\001\275\317\274L\273\301\222e\274a3\243<\321r\335;\027}\213<NW\002\274\371\362f:\226\223c83\020\211\274u\206\300;)\"l\275\261\365\313;\365\002+\275\273\001.=\235\'\333\275\230:\035<\314\317\027=<+Y\274[\302I\275\357\021\r\274\265\n\265\274\005\262\222=c\304e;\nl\255;\237@C<j\025D\274\276\250\353:\356\302\315<D\213\314\273<\022\327\273\024{\361\273\334uN=\232\374\030=bV\277<\310\277\033=\372\274J\275@\007\210\274\372\270{<\370R+<Z$q=\222\207d<\325>\231\274\324\261\257=\274|\204=\250\350\227<\216\014~<\225C\206<j\2365\275\243\215d\275\351p\206\274{\344\014<\323\036\216=\225\327\317\274$\303<\275\222\026{<\304D;\275 \320e\275s\317\032<\221f\216<%\266\202\274\031\233\007\274\017\321M=\346[\020\274Y\342\025\274\262Q\036\273\3738T\275\372\314l=g\243\031\275\273)}\2756U1=\"yN\274\033\334\344\274\307\214v<^w\206\274\303\200*=\315\025\n\275\253M\005=:\323\372\274\206\244\205\275\212b\314<\262\301P\275\314b0=\354\334/=\271d\251\274[\214\230\274UD\206=]\241\356:4c#\2759\023\310\274\021\373\210=hk>=C\342\317\274\262\357\005\275A\003\252<$\025\034\275_\227\251\272n\374q\275\344$c\275[nK<\351[\212\275T\354j\275\037\241\352\274\315Qu=\341Dv<1\211V\275\223\364.\275?\323r;&\267z<Y\315B\2751\351\371\274\216\3528\2744\361\275\275\263A\237\275\026N\331<8G!<\345\341\346<^\302S=\204y\030=?4\235<\353_\027=\331T_=\350S.=\366f\243\275\316\202\243=J\345\367\273O\255\035\274I#\241=\322\312\'=\004\031\343=Z0\021\275f\356@\274\356\204\345<\363\357;\275\\p\323\275SAM<\245\005\226\275c\226y\2748\266Z\275\273n\213\274\0270\036=9P\305=\355l.=\243_\367\274\3238u\273\'|\364;\260\037\036\271m4\315\274\223\013K=`|\022\275\340\332w=\337\0244\273\267\201\217\275A\245\035\272\233\255\221\275C\363\r=s\351\006<G/\245\275#\324(\275\223+\021\275\007%H;n\204L=\007\223\243\274\234\tr\275+\211\222<\026\234V=K\351\032\275df&<\3740\026=\000e\242\274\242\217=\275\250\000\340\275\200\267\213\275o\272\027=\235\334|=\\I\354<P\206\374\274M(\202<\335Ye\274\204\335\345=\373\311\315<f\033\210=\352s\310<\316D\n=\235n\237\273\222o\223\274Qsn\274\353\243\251<\207\252\t<{K\032=\350!\214\274\n\014m\2745\333X\2759\231\367\274\3503\360\273\241\270d\275\')\320\273\276\242\327\2749\300\242\274\370\242\026=|\212\207\272Z\345\244\274U\235o=L\3118\275Nzc<\255\020\267;\337\0221\275\303\220\364<\254\247\370\274\004S\205:\204l2<\n\355\214\274\034\360s\274\301_\251=\257\020\240\274\355t\306\274\364\300\034\275\235\226\265\274*\217\312=\202p8:\327\274\'=\305.e<#\252\366<I\355\245\275:i>\274\334\260L=\332G\202=\003\302\201=YH\326\275t\351\202\275\017lT\275[\353k=\177\033!<\242R}\274\2143\237\275G\221\241<`\247\n=\314\235\202=n\017\004=\217&\231<j\234\262<\345\'\205\274/1\"=\247P\335\273\367\246:\275f\342|\273\305\"\272<\'j\"\275r\304T=\241\376\000<h\355\336\275\226@\304\275\251\313\314<B\326K\275\366P\323\274\032\371\252<\330\271\364<8y\350=\220\235F\275a\3652=E\301)=\232\313P\275\371\214&=x9:\275ze\343;.\360\246<\211)\305<O;r<\300\313\235<\226\025\246<\tC\251=D\357\224=\377S]=9\245\227<\303\364\232\274\3307\365\273\304e\241=:4\317;\2323\215;\267\205\023=]o\225<\331\250\224\275]|\307<\242\262\276<\366\342~\272\206\202;=V\314\241\274\373C6=\304z>\275P\356\211\2746\204\006=@\344\036=\277g\276\272I\277\365<\022\215\324\274\240\244\342=\005o\205\275G\355\016\275\226\355\371\274\351\277%=\034>\005<W\355\241\273\350Xd<ac\205\274\274M\016<K\342\231\274\\g8\275\212\007\373\274cHR=Vg\273;r\354\302\274\000p;\275!\202>=\201.\224=\256\032)\275n\3134\2750l\002=\234F\013\274\212\320\210\275(?\334=\247y\300<\255H@=p\037;<(CW\272)\261\212\275\210\234i<E\367\371\273\345Z\263\274\300\035\036\275<\324\002\275\370V\270\274\027\022\014=\306\253b<\243:\003=8\302\261\275\'\203\360<5:==\203\311@\275\031\354\250:\321\007-\275\365\361~\275;z?=\361\252\203\275\352\232\021<\037I\004=\230 \311\272RgY\275E\270\003\274\031\227\201\272\376\352=\275f|8=\375\332#=\354\256\273\275*\331\245\275\336\024\334<m\'\223:V\306\033\275\362\231\220\274c\251 =|\021;<\244Z\232\275\253\226\010<_\250\312<\023\337$=\014o\025;n\245\264<d\213\205\274\270\335U\275\363\256*= \322w\273\236>\271\275\256\201\030=O\357\022=\323\037\374<\002\307\337\274\362\255\233=\275\001C\274,\000\377\274\325\311A=\354]\310=}\340\207\275\2154*=\0052\321\273^\024\006=\254b4\275\021(4\275\016\330<=\337x,\275Z\020<<#h\327\274:\267\211=\220m\272<U\340M\275\tTQ\275\245\352\365<m\263W\275R\251\323<\277\0309\275i\244K<vv,=\004\'\203\274\233\026 =\t\001\206<T\216\333;\033\tM\274!<e\275\234y\260<\360\305K=tZ\023\275\341R\025\275\274\\\351\273\250\267\305<\235\333e\275\203J\t\275\0133\300\275\2662 =\252\264\207<\201S\006=`\364\223\272S\030\036\275\0171O\274\206\347\314\274\001\230\313\271\223B\t<\232\033\313\275\021}z=OG^\274n;#\273\303\345c=Z\003\333\274k\245\321<\320\216\370<\236\221\000\274\363\315\317\275\225\037\007>w\031\232=\224\'\027\275\300T&\274\033\237\362=\377\330\352\273\361\274%\273\251\3320\275\313\3758=3}\305;\311 c<\236M\311;\371|\003>\261s\226\275\352>M\2755\3543\274\370\221I=\"*\020\275\306\306\035\275\204\270N<\300\270\301\275\324\365\237\275\036=\016\275\370\021\255<w\242\202\2746\350\2449\336\231\271<\2734\346\273\355_O\274\327\205\346\274\310z\256<uh\223\275D\374:;-\335\246\275\330\321#:\310\302\t\274\324L\316\274G\255\365\274\235Yn<\333\216|<=@u\275\310\377C=U\004&=\366\342\337;\325\272!=\326E\213<X\341Y=\357\r\2719L\356\313\275\335\306\030\275\320\204\253\275\331\244\243\274E\342\321<\272\316\007\275\233\301\177\273\276f\226<J\004\206;x\375\270<\243QV=\236\347\220\275[U\233\275\302\014\266\275Y<\375\275,\215E=\341i8=U\226:\274\251\007r\274\300\232$<\301\221Q\275\331\242\222\2744N\331\274\263\223\272\274\376xa\274%\356\366;\353\204s=\316qf\274\002\222\344\274,\027B=n\020\263:\341g\347\274u\216\310\275\266\027\211=\212\343I=\236\321\242\274\r2P=\024R\231\274\006\217\225\275\237D\241\274\313%\262<\315#\261=\325\203\203=\375\241\253\273\306\334\204<\003\246a\2748\001\264;`\325\271\275Y)5=\254\364B=\222It=\233\036\270\2758\260|;\002FL=PJw\274\240\237\245\273\227\240\200=\242\177\232=\202\272Y=_\000\364<\326\246\212=\331U\201\274\355\247D\274\033\311\035\274\311.\214\275\205\271\371<\221\202\306\274\333\250\005\275/\336\335\275\376\374\214\273x\3706\275\231\262e\274\231\027\035\275\372\324\240\274\237\033\243=\000\263\260;\272\215y<q\336\241=\340\316\270\274,\0141\274x\272\223\275/;}\274uB\227\274\315K\226\275J\2371\275\357i\205=\020\033\262<\310\302\t\275\035o\213<\277\010\360\274\036\304\267\273o\262\200\275\314P\027=\013\352V=yX\233\275\344\2629=\200!\3679<z\374;a\003\232=%u;=\014(\004= \025\324\273\246?\261\273\352\003\327\2742=\264\273\351\247?\275\260\353\033=\256\036c<\213:I=\247\220_\274\205\260\'<\027\363q\275\266\225\313\274\016\373\320\2754K1=\003\024h;$Pk<\000\037\323\273^\026i\2758\233\200\272\201\034!\275q\353\014\275\324\2018\274\0012/=`\200E=$\t\021\275%\206%\273\310\302\014=\331\006\204<\310J!\275\230y\014<\263\257\013\275}\345i\275\311\201\273\275\3455E\274l:6=\265\037\206=\r\204\247;\363b\026\274\343\3270\274\274\222J=d\251;=\026\212\031=\237\212\017\275\366Ml<\026m.\275Q\374\376\272\035/l\275Lm\260\275\207\277D<\331\313\305\274yW)\2742\214\232\274\3415\247;*Pv<7\261R=\260,y=\311\333\002\274\343x\235<\240\357\n\274\354\337\335\274\357\365\214<\004\211\035\275\345\267\274\274\204\374\223\274\'\272\241\272*J\246\274\371\005\305<2\034O\274\212\213\r;\337\342\223\275\305\020=;\325\346\t\275\376\323]=\202\236C\275\311\016J<B5\247<T\036\245\274\030\221\315\274|\023\364:\302\225U\275\303\337T\274Df\340\273\311\323\247=\267\010\003\275*\210\032\275G=*=\277\370\214;3\010\315=M\236>\273\342\244e\275\330@.=K\017\010\275d\266Y\275*\317\232\273\260\271\017\275O!7\274\311\241#\2749u\252\274u\006F\273\232\363]\275\262\177\371\2744\207L\273q\223E\275+\321\030;\332i\234;\023\023\240<\320\361.\274\001\254\355\275\366g\257\275\305\255\305\275\237\352\025\275\013-\263\274F\372\374\274\242\007\274=\206\277!=\276\"\001\275<Zg\275}\027\342\274\336\031\313\272%\202l;\257\317==\343\303n<\307?E\275^@;=\246\"\272=\316S\325<\261V\364\272\tL\315\275\003\317\227=?\337\274\2703\345\315<\027\276\272<\302\312B\275yhP;V\266T<2\177\323\275m*\251\275\341\211\300\275^\320j\275\243\023\374\274^_`\275\370\251u<\325\217\017\274\212(\007\275+\270\215<\001Rw\275\357\256.\275C\362k;\312Bs\274\324\n\235<\345\262\250=D\032\345\272\377\202\263\273i\253\014\2757\242]\272q\261\220\275\337\371A\274A\\\201\275A\nI<HCg\275\313f\264\274\271\237\350<\377\020\345\273\273\001\343<\222\177\017=\217\336!<\337\221E=d\326\321<\017\272\337\274*\337?\275\244\306\002\275D\340p\275p#\246;\300-\2658XCd\273\304\231\010\274\233^}<>&I\274]\327\263;B\253j\275\"^J=>\303\245\275\010R\260\274\322\346\016<\302\332_\275\241\020\226<\033\030@\274[\361\354\273;#\215<r\264a=\265\265V=\374\013)=\370\201`\275|\037\254<\216\214t\274\202\324\333;\227\207V\275\374\236\221=g\232\302\275\332\t\020\275w\\\275<)\231L\275\273\355\322\274<f8=\363~\016\273\020\357\203\274\273\335@<\236\026\245\274\212^\023=\233\363\006\275\324\003\251;\343!@\272,\3154=\330\317\213=\356W\301\273\342\200\355<\376\271g=\350\342\223;\211d\253\274\022\376\226\275\355\341\000<\307\371\326;\325{\331\274\3445\265\275\025\345z=\370\033$\275n\275\231\274xx\201=}k\252<\'\364\t=\370f8<b\247\253\274\322h,<h\342\244\275k[v=bbS\274\320\005\361;\235ew=\356\330\245=\225:\202;\014\\\363\274`\334.\272\316\3755=W\311\021=\200\031\254\273 \350\243<\362M\036>%\316\036\273\275\340\225<\034`\271\274\3457;=]\337v<\3054\333;e4s=*\363\270\275x\342$\274t&\037\274\221\261u\273\320\006H\274\341\262\334<=\326\244\273\262\034\330\274\353\224C:(!\342\274\326\371o=\303\264\277<W\275\212\274r\305:\273N\332\035=`\343L\275\031\254\343\274\320~\216\275WI\203\275c\254\225<\314iT\275\216\215#\275\243\235\007\275\025\262\002=\022\252\027=\274=\235\274b7:</\226X=\314(\216\274\312\033G=lJ\006=\022\256\235<\370\303\304\274\266\002\361\275\307\203\000\274\025\003\232\274)%\314\275\242\351\227=bZ\343<{\223\273=4\037g\273\361\023b<C\313\242\275_o\200\274\333\376\243\274m\031\320;\241\024\310=\264\"\242\275R\035\026<y\210\322;\023\216\205<\031\013j=u\006_\272\001\262\303\274\360\034-=\334\322\030\275-\254c\272\276d\313<\265M\010\275/l\002\275\316\270\000\275\360\324\245\274\242\234\343\273\231\257\227\275<\252\236<GV\203<S\312\014<I\266\240\274\251_\202\27342\242\273\305\037\177=\225:\212=\243\237\371<%\n\004\276R1d=\263\325\216\275\202\265\353<|\353(\274\366\330\337;\372\252\203\275\227\324\254<ri\334\272\324D\350\274h\314\312\274\366\350p=q\026\331=\336@\206\275;d\203\275\247#q\275\004\234\260\274\241\251\006\27446\304<\025Y<=/\000\265<Y\n\003=\202\327w=]\350\330<\220(\237\27522\336;3\250\216\274_\0047;\301\'8\275\252\223o=\242d\177=c\205\203\274\221\333\211=\254\021\307\274\257\033C=\232>\275=_\2668=\017)G\274\307\372\264;\252@(=\340\014`=\260bp\273\251\034a<\371\231X\275>-\010\274?\004\222=s\240\232\275\361\222\025\271\006\317\025={\346J\275\271\360\035=]\020K=so\215\274\247t\251<V\310\222\275\"\376X={Ta\273\325\212\030=\264N\004\275}\341T\274\354\250\252\273~\350-;yd\304\274<.T=4Ag<E\205\'=x\217\332;\314\034!=\325<!\2758\202*\275\262!`\274C\034\236\271N\026#=Cr\240\274\330\257@\275\333p\257\2757\245\350\274\002\374\005=-\273(\275!\353\301\274i \013\275\240\004\004=\263G\036\275hC\265=\301)\203<KYp\275\207\361P\274l\223\n=|\320\267\275\023\t\316\274A\274\254\275\321\002O=\276@F\274\222Th=\341\030\265< 6\344\274\212\373\003\275\035\373.=\322\305M\275\370-7=\226b\271;5(\275\273\313\263\033\274\374\306\316<\261\267\255\275\314\236\304\275\213k\270\274E\333\344\2748\313_\275\207\214\351\274\253&\205\274\375\217\337<s6\216=\302\010L\275M\226M\275\372\311\334=\235ET= \317\263=\023\250\226<\251\227Q=\217\031\007\275\347\263\010\274\204\360\202\273\236n\224=P\000S\274 \302\331\274\321~\204\274f\023+\275P\222\260\274\264\n\276=\231\312\031<d\240\236\273I\320k\275L\207\346\274\035[\360;OsB;\377\241z=\365\203u<\033\220\214<\321\211\301:l\362\203\275]\347\271:i\362\267:aF\327=a\271\240<W\256\213\273W\272\022\275k\036\311<{3==\035\344\251<\223\367\222\2756\274\222<=\210)=\243{\252=A\336\354\273;\312\002\276\250p\023<\002aN\275\230\341F<\326\253`=\363\300S=\024\0050\273\314P]=2\247\242<\203\373M<@\373\267=\032B\364\274uJ%=\035\232\272<\036\372\304\275f\204\250\275P\264O=\255\201\334<\273\264\003\276\330.d<I\367\010<^#\013\275o\367\323<\027\254\344<_\364\207<u@\361\274\024J\317=\2674\223<]\016a\275,\300p<t\3572<\204\033\r\275L\003\026=R\255\255\274A\320q\272\267\363q\274o\025\002\274\266\221\245<\r\256\346<i^\355:\005\341\034\275\'=\311<\210P,\274\003\252\350<\326\316L\275\004\3361<\3273\201=R\310v\275\213\353\302\274\356\241D\275;\341\016\272\007f\353<\236+/\272H_\321<\313\256L\274\3057\234<\310\001\351\273pj\006\275\216\036<=\031\345w;x\311\353\275\036\005 =\266\026R\275\350\\\247\275Q\236\366;4CD=)\265\272<$\207\354<\024o\026\274\365\367\363;\377\235*=\037\262J=E\351\260<\204\244\332<)\010\274<\303F6\275?q4;\240\361\303<Yqg=\035;\033=A\231\234=\312\r\201\274rX\002<\215\337=\275\362:E\274\257\370s=H\371\212\275c\376\206\275xh\201\275j&K=\036\016\302\275\213c\222<qX\344\2742\220^\274O\265\016=\276\264\023=rK\010\274/\300X\275\001\2550\275\300\244\035\274B\235\351\274\272\207<\275\277\305\361\274D\222\223<\244\363\025\275Q\272\r=\375\363\317\274\3759\232=\332\256V=d0\307\273a\230\243\275\362\354\215<\337\256,\275\262\324\255\274L\335\r=\340A\214<\027[\211\275\342\210\206\273\271\221\327\272\326uo=\217\375B\275(\003D\273\002\024(\275\317\372\266<I\361[=\314\022\267=\035\327c;\320\031Q\2730\253B\275Y\254\211\274\344\2754=C\306R=\226\321U\275\035E9=#-c\275s\361\r\275\027F=\275\217hb=W\274!<$\366K;\030_\005<H\341/\275\007\016\300<\374\235P=\370\247]<M$\265<t\021:=\243\261\347<q\273\356\274\341\344\035\275\264\002\214<\00351=\303)\262\274I\363\257<\177H\230<\035>\217=i8\252<\320GP\272F-\370;\013G.=|\353/\275\371P\265;\367\035$\275[U(=Hf\030:\216\327\237=/^X\275o\225h=\275L\324\274\216\007\006\275+>\273\273#\"\005\274\371.f=\265\226e\274k\311\241\275\010\324\025\274#F\225\275z\265\025\275\313D)=e\341\261<\270\206\352<NA\316\275\214\311\272<\031\343\203\275G\356\007\275\374\225,\2754\262\253\274r\333\n=\275\257\263\273\030Q_=\367\275\210=\273[\320<\352\356j\274\223\272\213\275S[\363\273\332\300L<\004\005S\275Xd\202\275\313\351\037\274\'\350:\272\255\233\220<\365\223\241=p\020#\275\331\347\013:\217\215\315<\376VG\275\266/&=U\221\205=\314\234\001=\005\350]\2752\343\263\274q>\234\275\355\024\226\274h\014\'\274\350\201I;|(\236\274e\204\031=\252\276\200\274.7\224<&l\227\275v\211\344<\030\rb\275\354?\255\274\345#T\275\037\212\026\274\215\326O=\\\236&\275A\034\031\275\216\002\274=\322`\227=\017fA<\352\202\000=^n\233<Q\3256=K\275\001<h\2522\274u\220\260\274Gt&=\216\373\010<\355\\R=0\021\364<v*+=\303\200\226<\253Cb=\273\211\354\273B\026E=\'\335\252\275\005\375\027=\300D*=\372\310\367<\303\367\014\275&\247\232=Z\017K=\316\213n=\036 \325<W\264\204\274 UN\275i/\370\274+\034\353\274\023\336.=W\"\212\275A\231\242;\301\354\362<O\207\214\274dJ0=\013\205\362<4\242\240<\035.\276\272\330C==\215\276\250<\n\245\344\272$\225\215<\267d\251<\3273\221\275\025\376\203<\260\2661\275\315;\273\274z\365\333\275\036yA\275\215\2260\275D,\331\274}\024\314< \330\371\274\010\271,=G\330\347<\300:\244<\361\343\255\274\225\312\024=\310\236\256\274\250t\206\274_\003&=\240:\023\275\214\246\276=\217\201\275\274\177\365\331\272\263\004\005\276\324z\256\275\312\270&\274W3+\274\365\207\014<d\004\331:\231\301\342\272\331\323\372\273\370:\330=3}\226<\371\341\020\275\357@\266<T\014B<\226%\260=\351\257I<\260\375v\274\253\363k\275\223M\007=\361+\030\275\214\201\005\274\004\207\340\274L\002\213\2752\000\205=C\231\257=T\242\205=\220\301\255\275s\023\007<\203\275\250\274\266?\211<\327\327\274\275\377\341~\275\205b\244\274\374\270\271<\nlN<\036ve<K\321\326;\035\247<\274\250\356\271\274\273\003\\\275\232O\223\273Z\243\356\274\244\r\237=&3\361\274\n0\272\275gtS=\"y\277<\342\364\300\274\313\200\243;\355}c=o\265\273\275\332\336\177\275?\327\265\273\331z\017\275\006\317\033=U\263\305<:8Z\275\341\254\t=5\242\005=9[p\274s\201<\275\224N\032\275\333\223x\275\304\373E=p\356B=\352\370\300\275c\246b<\313\301\221<\210:!<\032S\213=R\330\346\274\275\257\027=P;N\275ij\215\275\252\334@\275\007\276\243<`\246\374<\235\221D=6\303\037=*\343\244;z\336\371;\230\331\005\275\336r>=\213\226\004\275\n\315\332;\224\232/=\276\212\013=F(\300\274\343>\017=\224U\226<,\032\265\274\224;#\275\247\242g;`\307\272<K\035\201<jL\323<\020\211\215\274\025\274\327<|\n\265\275\022\'\033=6\027|\275\304\303\027\273\363\361\005=\333=\353<\022w\323\2749e\025\273\337\376\312;R\360v;\335\353(\273\211\354a=X=S\274\273\232\340\274\234\014\271\274\251\001\207\275\260g?\275w{8=\277(\212\2755\001\231=E\\p\275r\020@\274\201\241\353;V\314\225<L\317 \275\352\210B=\2179\306=\2417\204\274C\001\304< \345\345=\367L\313\274,\353\362<\270\003\001=\357u\207<\333H\272<\213\354\023<\035C$\274\263\375\023\275\260\310p\274\314[\031\275\375\035X\270\240\345\213=J\375\270=\302c\261<\211\350\331\274/\360\364=\007\274\031\275\236\004\025=<\271\361<X\276\232<\210\274\265\275b.\331\275\024\352(=#\234\210=\345 \314\273\\\303\016\275\226\213\364<B\305\346\274\020\300|:|\212H={\0060\275;\202b=\374\211\025=\365\230\220\275g\364\350<\221>\236<\266\261-;\370O2\274r\324\265\274\354\372\236=\357\'\214\274\2775\215<\372\337#<\247\337\230<@E\004\273\025\316\200=\207\3379=\327\351#<{\206I\275d\255\327\274\342\3447=\014\\\"\274r\241\216\275\314\312S=\266\035\211=\263x\241\274\324\221\223<*\372\240=\254\351\253<9nk<\346\030D=\034;j\273\221\333\335<G\024\221\275\267\300r;\307R\336\275\357\216q:\347\2300\275\006X\234=\341\335Q\275\344D\004\275\35603\274C\314F=\024\233\306\271\310\014\236\275\035D\357\274U\373\t=\313\034\n=\'\205\223<M^Y\275\265?o=\r5\235\275\rV\002\274\326\257\256\274SA\221\275\314k\234\275\352\241q<P\303\266<B\223\211<\375k\254\272\300NT\274\321@\203=\273@\357=\017\203\346\274\370-\002<\356y\316<&\315\n\274\305\3610\274\206g\304\2745\017\001=\027\3112;Tv\n=\243\375\036\275\250\244\003\275\220\371\322<\272\233\032<\207^\034=\214\342\032=\254\215*=\314<\024=\305\231%<\344\201_<Y\271\000\275\225Hh<p7\202=;\277p:cV\021\274\226m\231<\340S\201=\214\216\216=\033\3365<6\217z\274+\376^=\312\313\267\273\226\366\365;\235J\251;.4\016\275\344.w<4f\2209&^f\275\026k(<\010\316?\275\025\2606=\030\0306\275\"]*=\215\207\305\274\256,\243\273T\n\304\274\204|\245:\273\305\245\274\306T\247\273\020\226g\275\356\300\251:\"\177\341=\037 d\273\370\223\231\275\021p\315\275\000\235c\274M\2520\274@\310\246\275Mo\314\275[M8=\331\027L\274\273\311H=\352\276^\272\372+\215\274I\263\274\275\242uo\272\264bO\272E\237q;u\305r=\201\343-\275U\354\243<F\364\275<t\013\037\273w\373\344\274{E\232\2740p\302<\225d\256\274\355\020\301\274nDY\274m\254\014=\"8\253\274f\264\021=\303\233v=\033\361+<B+\r\272\006\271\005\275\314[!\274\323\205J=:>\206\275\034\334\372\274\306\013\034\275\223i\010\274Q \030\275\252BG\275\352\037\224=D\3772=\221\177\342<\265I\210=> 2=\035\314==\301H\006=\372\340\204\274\350\002\033\275\362Q\002\275\004\3373<f\266\007\274\034\306\032=0\'\337;\016\230I\275\303\251\027=3\223!\275k[\255\2744gC=\003\306(=\327\036\202=\016\360\257=\346\334^<\001\377\273<\024\204\026>~\210=\275\277\357\217\274\235\025\346<\302A\200\274\320\036\023=\305\324\232<\361\350\320;\350\327\005=P\262.=@\236\001=\016\004Z=E\031\350\274s\007\242\273:\357K\2706a\325\274_\322\373\274X\210@\275\344g\321\274\364\311\262\274& \242<\315\231\306\273L\301\236\274S\036\223\275\213G\215<\260*\351<2\031\272=\337k\'\275\357y\214\274\343a\210\275Q\261\005\27531\310\275[F\357\274\353d\016<iH\351\272\365\204\230\275\304\343l=\351\373M<\020\230O<\353&@<\333\204!=;hB=\n\005\027=J\367\241=\230\036R<v\375\226=H\346j<\351N$<\177!U<Rc\254=\310$C\275\304\317.={\365t=\3671&\2748\337X\274\036\250\334<u\256A\275\013\207L=\020JJ\275;\367\232\274nC\203<R\3079;\226\261\005=\254n\233=\207\236\275=\376\241%\275Z\037^\274\351\351\276\272\223#\220<\033\001U=\303K\205=\200\024&\274\372\010\262<%kC<6\323O\274\326B\t=s\033\036\275a\001\370\275\327\023\037\275\231?\307\275\017\322\312<\t\023$;\017<\201\275kL\006\275\231\260+=\225\250\243=\206\000m\275m\313\214<\0133\374\274\362\332\211;\302\276*<>L\274\274\001*\327\275\205\360%\275a\260\032\274\311\254!=\003\024\210\275\262\327O\273\254\241\320:\343\217\331\2748l\261\273=i\244<\315\331M=vm\234\273\365L\202\275hW\243\275\322\t+=%H=\275\261\365\020=\251\371\373<\272\224x\275\033\314\272\274/lD=\253W\231<\207\306\212\275\014D\257<f\321A\275\023\024\335:F\021\273\274\347\027C\275\306\227{\275\260.2=3\277\r\275?I\"\272\213j\305;t\2217;\213}\000;H\302\257=\017\355T\274\t\260[=%\366\013<\353u\314; (\334\274\234\010b\275\253\307E\274\'\223F\273\202\315c\274P,\350\273}bU\274\014\203T=\213\275N=\324\355\022\274*\025\362\274\270\372\023\275\325\216\251\274\013\225\207\274\027\001\225=r/\r=B\247\023\275G\322Q\275\231.\305:;\263\321\275\303\211+\275\325\211\277\273\367\031<=\222\264h\275\301\262\025=UWV\274\t\367\252=b\023e\275|J\002\274\223:7\274Tl\216=\235E\262<\373\200`\274\222\210\t<!A\316\274^H\014<\306\373\227<\256\022&\274\370%o\275\023z\357=\250_\350;\324\304D=\371y\230<\314\031j<\332\324\025\2743S\355\273\367)\316=\342\346\247\273\364\375\t\276U\205\024\274\025\n\354;\373B\322;}\023Q\275^\254\220\274CKB\275\003\267\247=\r\321\225;\312\327X\273>\266\313\273\026k{<\321\315>\275Y\371\364\273\005\020\0359ti\000=n\323$\275\243\253\223<I\225\003=\017\255\246\274\304\000e<1\001\216<Sr\365\273\235\010\003=\007\\Z\275\322\337\321\273/\3040\275]]\023=\313De<\036\206\372<R\353\031=\266\364c\275/:\235\274X\222\016=1\026\206\273\013\026\200=db\000=i\3106=\371\357\227<\003v?=\005\216\375\274p\352\332\274\234\3214=\3317\001\275\205\250\323\273\216\226%<g\222F<\206;\311<\004\350\022\275\037\000c=\206&W\274v\350T\275\314\203@\275e)\220\274+\316\221=\300&\307\274[\311\254;\255\356\005=\322\236 ;\260\370\017<\023\350\020<\224\235\372<\342\251\340<\335\372\030\275\013\320\330;\225\261\'=\272E\226\274\273uL\273\204|\207=\256Cj<\276\360~\2751\344\210\275g\255H\275\r\341/=\353\300\254;\253/T\275y\034(=\\\305\336\274?\374\326\274\ncd=0\341-=u\361\225=\203\250\307=\n\t\036\274\0377e\274\345\276/=\177\000\026\276m\231\336<\331\304\003=0w\321\274q\035~=%[\220\275\327\",\275:u-\273P\255\305<\300h\344\274B\256\025\275\257\216\264=\363\"\025=W\250T\275\267g\007=\326V-\275\177\310V\274\255w?\274\216\271h=U\243\215<H\004)\275\306\254\375:\025g.<HZe<\237\331\231\274\301`{<`4\016=\024W`\274\272\255\036\275\"\2412\273\246aU<\211W\000=\206\252\227\275xZ\274\275\234\323\017\275Fb\344;\200\350\204;Y\322\223<\273V\377;\211\211\361\274:\352\210<\356\000\211:I\304\026\272$xq\275\372B\260;\352\244\'\275\265\357N\275\261v\222<U\2434\275S&h\275\332\237\242\272e\311H\274\021H\274\275a\004\274\274b\312<=\240\347\312\274\271\347\367\273u\254C\275M?/<\251j\332\272\212\374\242<\267\037\201\274L\213\020=\306\257E\275\323\264d\275\260\022\234<\253\034\206=_\340s=B\202\005=\223\3157=\254\206\037\275\035v\3318z\332\3259\357\030)=\'F\217<\204\000\204=\351\226\311\274A2k\275\230\337\300;\006L\265\272\001\021c<\353\226\035\275\301\307\230<:g\344\274:\213i\275\274?8\275\361\333B=\013F\035\275V\241\244\275\3267\263\275\261\321\306\274\027}_=\275i\026=\221l)=K\016 \273\253\354\215\274jZ\355<\206\177\362\274\230Qx=B\236\241<5\201\2729\016\372\351\274\335\031[\2741\245\226\270\370\253\335<d\267\342;\372\330\245\275\315>\250<\2236K=0\037\225<\343\003\030\275\275j\241=s&\372=\366\217\256\2759\312\253<i8\317\275\231\000\032\275\024`\275<\307\3751=\013\000\026<\203\257\240<eT\"<\232\214\242\273\244\']=\356\261\313<\341\264S\275\231\316\r;\305\337\243\274s\034\312<\300;\204<\003\351\317\274%v\224\273\252QU\273|\311\217\273\241\242\331\272|\310\004\276\275\007\261\274\334\333\300;\254\244\177\274\004\220T\275;\017\273=?k\002=\374\230\357\274-J\326=\014-\206\275R\222\024\275\246A^\275y\377m\275\226\301\372<\001)\332\275DaQ\274\000\332\211<^u\276\275H\223\340<\263|\332\274\253\356\252<m\326W\274$c\375\272\300\345U\275\213\276/=\233B\233=\214G\000>\000\232*\275\210\3017\275\260_K=27\244\274\3449\270=,\342F\275\355\345\203\275\355\306\375\273u\020.\275\005\202\264\275\025\325\242;\310\"\227<\"\260/=\311\027`\275A^+=\r6\220<\322\247F<\274\260s\275\036\337(=N;\021\275v\371\021\276\322\315<\273T\374I=\200E\316\274q=b=\t\021|;$u\242\274\033\017\226< \211\307\274==\020\275\355\347\306\273\017\367\212\273\370\2131<\322\371\350;\026\262\016\275\226\317\010\274L\3370=I\006\211=\240\313$\271\235\267\371\273\341\t+\274\333Q;\275\210\0225<\001\033\302\275l\267\365\274w\217\\<\376\301\214=![\033\2750S\230=\332\032\261<\263\303\261=\204\272\217:<\316\321\274\300\212\232<\321Z\315<\000C\'\275lx\300\275\370,\354\274\352(#\275\221w\356<F-3=l\236\243\274/\027\241=\350\'\277\275\315w\005<-c\207\275\245h\251\274\216\375\030\275\344\243E\274\322\371;<\030\270\242\275\216\001\215<\030\247\374<|\013N\275\216\376\355\274,\266L<\036(\026=r^\301<6\2645:\357iq\275mz\033;\266}\361<\323\273\224<\314\344l=\025\363M<\225\212W=O;$\275\252wI\273c\252\363=\337\270\255=\220y\367<:-[< 9\244<.\007\017\2755\365l\274\237\236\004\274\224?;=8\314\006\275\345\273\377\274\034\357n=\003\r+=M3M=t\317\230=\363\001\222=z>\305<\244\225\231=N\201\203<\237f\220\275o\022\206\274\331\254\021\274\026\246\200;(\340t\275\332\255\264<()W=k/\241\275\205\212\t\275j\341\376<\177XX<\020SB=1\014\276:\tO&=qt\243<\351\2227\275\257\001\367<\315\364\204\274\275D\362\274=F\003=\204\016\240\275\326N\246\274\nv\213=\204\341\276\274\226sN\275\016\341\201\274,\233!\274\007\340\206=\271Wc=\361\316\022\275b) \275\027t\362<,\335\210=\374\031\027=\252\002S;yUG=Nk\t\275\323\257.=\352\031\250\274\225\370\"=\354\303\205<\264\341\251=\361a\251\2738\322\270\274\256v\257\274d\254\300\274\360Z\t\275\034$w\275 PP\275\352hI=\022\277\221=\016\342b\274g\267\001>\213\333\221\274\340\235\234=\224\0031\275\247*\315<so\014\274\203\'Q=\005x\031=)\377\"=\222\353\307\271Z\341\227\273E\363\341\274\244ax\275\010\217^=kC\325\275S\363\202\275\326\306\177\273yKZ=\222?\337<qQ\245;\235\2029=\241\032\022\275\300{\023=\366h\347<\233bc\275\264\303\023\275\003\305\362\273$k\n=0\026\013=\337:f<{\337\230\273G\314\315<\024\205\032\275mq\264=\373\353\037\274N\347\022=\233\230y=\257\242\364\274\271\275\353\274\367YW\274\326=\313\274\031\206\206<M\222\016=rK\205\275\203N%\273B{\255=\325\3013=\035[\316<&?\316<\t*`\275^f\275\274\246\020\217\274\371\233\244\274\362&1\275mj0\275\237I\224\273\324\212\233\275\220\1775=\2314\342<\254\222t=.\346\343\274\244\224\354<AK]=\274\006\314\274\323\314<\274\360\024\222\272\265\017\263=\2523\301;\210\277R\275\024\254\244<\354\357\013<\355\242Z<0\005\366\274}7\332:;\t\010=\230:\020\273v\004p=\0030\210<\306\314Q\275\t8\t=\3065G=k\220\206=kc\261\274\356#\212;\241&F<5N\216<\351d\023\274\007\345\203\275\237_U<\252\355\242\2748-\251=\277\303];9w\014\275\250K\322\272Fj\361\274\225\365!=ot\227\275\021pT\275{4\3129\035w\262\275,\237Z\275\241Z7\274\006\332\337<x@\360<\336\345\202\275\234\352\016\275V\343\013\274Y\345\n\275N\017E=\246\230\013\274\0252x\274\033\360Y\275\251\0318<\330i\362\274\311\365\031\274y\325q\273\337GC:,1\"\275j\004\035;6V\036=\316\270\201<\025\005\230\275}\365D\275\300\014\342\274/\202$\275\252\344\262\273\211\313[\275\010\333\026\275\222\357m\275p\362n\275\316\010(\275q/\r\275\363\276\324<vI\025\275-\0377<K\304\271<\204\373\341<\366\351\336<y@6;\030\3029\275KAK\274\337\023*=\351\235\212<\320\270\010<m\340\301<\257\200\033\275`D|<\317\035.\274\330[\014=\326\236O=\206\230\203=\224(\212<%\370\207\275\037N\007=\213\216\300:\007V\000=\334\222\030\275Z\330\274<\262\023(;\2212\224\275\242\016\237\272x\027\200=\236\353\027\273e\001\273<\254\257*=P3B\275\263\355\273<;6o=\034\325.<yr&=`b\026<\034\217\266<,C\321\274\032\271N=\275\003\222\273\032&\240=N\335$<8\215\307\272\231\273f\273\030/\224\275\263\216\242=kAY=\026\245@\275\020\0024\2751=C=Ht\031\274\240NC<9I\366\273P\300\'=[\370\302;\001\304\342\273\0231N\275^\347@\275\226z\034=U\347\036=\325\326\037=\300\212\221\275\010\205t=|\373E\275\314\245\306;\216\242M\275\025\267\363;-M<\2748\0233\274\346\324\250<\342\010\210<R\021\256<\256>[\2755\t\213\275\2577><\007\306\352<\217\215\371\274\016\224P=\361dp=\247\026\036=\265\365\010=\032[\206\275\365Bd\274\253T\022\273.\345\265\274iP8\275\206L\033\275\266\263\033\276.\266\236\274\354w)\273NBw\275\257\312\211=\246o\204\273\217\261\360\2745-\225<1%\250\2759/\017\275v\264|=\364\177\217\275\315\036\366;x\3466\275W\254\332=\310\326\215<\021\022H\275\306\223\263\275\215\365\037\275\274:\312\274D\374\222\275i\003}<\260\241\234\274\222rx\275Xz\007<p\260\\\274O\202\225<Z\333\237;\353[\210=<\267\224<\3222\006\275DB=<M\300\002;\034\352\303\275e4p\274\303I\364\274\030\t\203={\346\001\275\250e\377<\367kc\275iY\207=\332\027-\276\252!\321\271\253\363~\275U\3453<X\310\277\274\006F\203=\336\333\316\274g\355\234\274\335I\347<\rH\355=\261\336\025;\371\341\001=f\371\030=\246\257\010=\320J\253\274E\022.<^\326\241=\213\300\202=\372\323\352<\246\327M<\007l\375\274`\313\211\274\360]\237\275\202\233\002\275v\357h\275\367l\2439Go);\025Q\205\275\272\370=\275u\303\236=\241\007E\274\377\367f\275\034*\242<\235\375\212\275\227\254\336;\023\252&\2754\243O=v\335\315\274C\225\177<\321\\\310=\362\332P=~\340\215\274\224\372\204:\353\213\240=\210-\310\274\276\016\032\275\003\230:\275)\r`=\3422`\2751\230C\275|d\343<\354bm=\376\307\316\275\023\342F=yT\'\274\227\215\210<\264z.=3J\310\274\246\2778\275/\366\210\273|\317\350\274\324\210\317\274\214\225K=\311W\177\274p_\274=/^\023=\014\007a\2756\301,\274\035\352\024\274\344\016\212\275\"%\224\274\263\001r\274\2173\264=\275A\020=%\326g\275\242\203:<W\203\371;c\n>\274\222\335\225\275\000>\356;-\326\3239\302[\221<\267\n\327\274T\351p=f\t\036=\253J\226<\326e\010\274Op6=\306\325X\2750No=\345\217\014\275j\232\300<\367\217\035=\254\020k\275\322\245\216=\\\374\376\2748\212[\274\322\270\000=\tJ\031<\017\354\266<\257\371\246\274!\3745\274\177_0\2750)2=\350\256V\275/\264\300\275s\345\236\275\003\006Y\274v\334B=oG\232\274\000\373\317\274s\004u\274N\214X\275\233\376\227\273\222\022;;\305\305P=\261\330y=\344\257\232=\250z\r;\352\357\205\274\227-\003\274\365Xv\273\346x\232=\202b\251\275n\327m=.b\025=\nt\241\274S\355p=\273\227\240</\3221\273\006T\205\275\360?H\273`\310!=\231o\331=\301\347m\275Y \231;\323*\031=\344<\317<&\016\010\275\246\346O=@\355g\275(\252==\205Y\004\275N\371\035;\3607Y;\366\325\241<~Y\021\274UIS;5#\204;\246=@\275\352\3050=\375N\336\273\241\005\324<]\266\202\275\213\360K<\251u:\274+\232\263\273\037\261\205\275\027\377\023=\270CE\275\244\r\254\274\320I\r;\027\341\351\274\240\337$\274\367\261\365\273\350v\244\274\026\326Q=\373l\321=\217i\370\275\371F\334\274%\207\033\273\312r\205;\342\331\226\273Y&\024\275}I.:i\245\256\275\034\037\331\275\334%G\273\362(\303;\221]\023=\306\342;=\325\347t\275\374\207X\2757#\227\275\013C\205\274\202\327V\275\026\346\275<5\320\227\274\244E\207\275\257,I\274\353\340\024\275\357r\342<A\260U\275\215\213\370;\316\005\262<!7\350\274=\364\016<\227UC=\310\362\265=\003\331\205\274\276z\032;\345\000\354<\353J\310\2732{\251\275Y=\241\275w5\t\275w\027\021;\t\311\347\274\316L\002\273j\256\364<\320\225\272\273\n[\211\275\341X7=\205G3=v\225\303<\236\017\203=R\3225\274\010]\030<*5\216\275\216\234\332<N\354d=n\215/<\202sz<\206\310:=\0324j\275\2417\267<\'[y;\367:\376<=?\230=;82;\323\006\033=\263}1\273\016\3632=@\340\262<\373\262\277;\311\346\272;\022r\245\274}\267\244\275\360\350\257\274\t{\303=\3524\210=\220C\260=;\230\224<Z/7\275\244\222k=<T\226=\331\210\342\274\024\304\343<\021+w=\266\363.\275\230\nr=4\202f\275C\243\313\272\003F\326\271\342V\033=00m\275i}\013=\346\247\237<t\227\376<6\035y=\000\242\000=\336\r[\274\234\331\277<\034\362\017=\363\233\013\275e\332\252<@\321\222<\373\342\365<\267W\357\273\030\004N=\2656a<\240~\232=\301\256V=N\021\267:\330Y\263<\233\353\252\275-\217\202=\350\260\207\274{\330<\274\262\215\370<a\372\314\275nz\353;J\333\367<\246\036\243\274B\020Q<]b\264<\2473>\274\001c\261\274|0@=b\277\r=5V5\275\\\213\263=\343\264\000\274\003\001\365\274\367T\002\274>%E=r\235\347<_\323\334<\206\323[\272\310\335\377\274\017\216Y=\255\270x=\271\305\354<\354\024\362<\014Vt=\377H\256\275@%J=\246\366\237=s\024x\273\r] =*\303\037\275,\177\217<\317!\r\275\3201\346<2\3708\2733\312z<\317\375`\275Uz\265;\357\201\264\275@\210\210=\\q\014=\215\014i<E\n\014\275eg=\275\034\324O<`\026(<\254\243Z<\201\365\030\2750<p=/z\214\275\243\226\030\275\371\030\340\271\352\362\240\274\373\0369=N\245\245<\310x\202<]\222\005\274\377_\210\275\240\032b\275\332\246\227<a\022|=\252\037\344<-\252=\274\233\366\203=\373!\207<\375\244\216\275\347\031\222=\021\312\251=\253\224\021=\270|\357\272\266:\302=\233.\014\275\260\327\206\274l\032\265\275\277\177\231\274\277E1=z\223\222\274\263\020\310\275\230\244\'\274!5\"=N\375\304;p\325)\275\205\222n\275\214#\253\275\r=*\275\374\342\376<\307\340\n\274\320\'\315<\251\020\217\274M\353\221\274\373\231\033\275\222s\201\275o\360m=\375zl\275m\3305\275\003+\215=\002\217a=9\217i\275\272`\372\274\315\202\222<k\327 =\302\n\300=v\323\301\2735\272\037<v\214\210<\361\2272\275\030\275O;\261\240\r\275\300\363==)q\242\273\313\234\233;_7\235<1\312@=\213L\'\274#\206\240<vB\267=\361\330\013\275\342^%=\245|>=\374O\214:\331v%<u\004v:\334\272W\274\n\323\266\275@\'t\274\006U\236\274/\223)\275K\324\240\274Yv\271\275\346k\001\275\257\323d\274\331\272\271\274\200$\304\273\266\220y\275\263\375\022=0\022\205\274&@\205=\245\352\243\275\372\037\301\275]R\255\2744\017&<o\204\365\274h\3274=>s\276<},\256;\014\016\245=\244\245\330<\223u\212=\270\345z;\335\023\005:\273\323\322\273\306\2607\275*\366\035\275tl\213;\211\200N\274\031\323Q<\376\243\236<#\202\324;>\257\240<&t\026\274\007\215\212\275\337\223?\274\253\316\201\275\3550j=\256\035\215\274$\262\005\275\203\027\334<\326\177a:#1a\275\016%\035\274\330i\341:\203}\201\275\210\376G\275w\244\314=R\260(\275c4\245\275\374\324\001\274\254\235\331\274i\324,\273\266\233,<\321\013\241=\344\357J\2753\tq=\206\005S=\236\212\005\275\t\342e\274V\341\014=,\335\204\275\272J\257=\367\232\343;\016\353\250<\305\177\210\274\323\231\025\275\231C7=\3010\374\274\336\021^\274^$\241<\023\335\002\275\343\266\367<u\203%==\2739=U\272\274\275F\371\233\273\341JH=2\014U\275f\2364<GA\356;\343?\236;\003\353\312<#\006A<0\017\034=\257\347\254=^\306\332\274\344\321\352\273\217v\334=\306\374\233<+Hh\275?\036\006=\352\034\230<\030$}=K5\275=\354\352\264\273l0A<\243R\337\274\241\035\246\274A,z=\3663\250\273\327L\204;K\361\364\274f\237\205\275\236\230\000=\030\2448=\250\036\213\275Bj\202=/(`=\345[\304<\364\257x;\231Xi\275mC\235\273\001\250\013\275\277\025\317<\237\014|\274\231X.\273\270!V=\361\032\300<6L\004\275\364yj\274_\231\277\274\377\316\314\274\320S\220<s\320\376\274s\302\026\275\346\204\270\274h\303]\2750\265\332\274\357\2174=\276\236\205\274G6U\275RC\377:I\262d\274;\252.\275Z\232\217\274\354W\207=*L\317\271\236\226\336<\352WY=Ch\226=\225\\V\273uP\236\274\236!\022\275d\254>\275\007[[=\304\261\273\274\225\240\242\275\n\036\200<\023nA\274\223\373\243\274V\365S=~A\215:\037\257\274\275\317\306\022\275@\036\324\275\314\370\376<\323\267\302\275M\240\031=\210!\236\274\274}@=H\265\372<\365>b\273\257\231\370\274hG\234\274}\'\265<\357n\204=\372\325m=\325\352*=F\333*\275ju\321:\036\221+\275\356\220.\275\264\273$\275\337l\271\274V\251\354<\305\353\212\275\307\303m=\023\004\007=\023\347u\275?\225r=\271\262\322<b\225?\275V\233.\275\257\216X<\201\025\233=\247.\222\275\3417m= \326\223\275\201\320\251\274V\260\266<[\302==\377\332\";\252b*\275\305?\260<\336\026\205=\306\271m\275\177\244\252;<\273\024<w\303\334\274\322I\217\275J+7=z\272\362\274\277~L\275m\362N<\241\222\006=\2355\217=6\314\211\275\364j\212\274]\377L=\254\317\203;\241:\001=\001Y\225;\304\r\336\274\312\264\220=\035\016R=v\"\211\274\330\326Q=@\013\032=\017[9\275\352D{=\232\240\007=0\260X;X9\032<\372\037J\275\347\316\347\274\207\363s=\304a}\274\016\305#=\277\314<\274$k\377\273k\253\352\274\263\200\233=7\034J=\260\334\357\274\316R\255\273\220\272H<\004\233\003\2759\025\241\274\225fi\275A\335(\275=|\022\275\247(\205\275w\350\205=\274_\363\274\\\'\213=\374\375\n=v\263\252\274#\225\021\275~\341\316<\000\335,<\313\343\005<}\372S<\326%\354<\346\212\202\275\327\301\225\275\204\234=\275\234\206\231\274LU|<K\271L=\035M?=\365@\241\2755\373\2669\252\327u\274Y\277\370\274aH\020\2753]\263\275\037\031\207:\375\035\007<\r^K\275\323h\304\274\034r\037\275\324\237\376\275\217\211\007\274\362\030\230\275\234\020\307<[I\203=-J\230\271\227\220C\274\026\017\257\275\003\246l\274x\217B\275\032ge\274\377\236c<\303$\245\275\346\3605\275j)\277=\307e \274\263\237\201<j\366\223=8\223\n\275\202V\260<}/$=!\251\010\275\226\024H\275\0144Q\275\304a\321\274\371\223\023\275\205\323\314<`\241\365<\241\255\266\274\216\303\271\272D\344\215<\214\231\037<{\221\035\274\020\2444\274\026wr\274\n_x\275)\321\324;\266\267\023=\023\002\231\275\2006\261\274\021\367{\275\252\000\242\274\300W\265\275\031\360\211=\206\312\265<j\033\342=\336M;=\373\277H\275\246\212d\275\206\270\361\273^\035\310\274\t\272\t\275\'^*=g-\303\274\370\233\361<\226\324\335\274<?\'=\024\003\034=\265\351S\274\037\251\n\275\304V9=\025\325\320<\033\333\024=`\246\212\274+\320\231\275\024\016\244=s\201\364<c\263\345<\000y\250<\005\322\002\275l\323\352\274\277\353v\274t\024\031\275\036\227\223\272\335\260\201<7\031[=\232UT\275sJ\310\274\354\207t\274*\212\303\274\227#]=`1;<F_\311\274py\220\275\200\013\211\2741\375|=[\334V<\014\262\336\273p\354(\275\"\220\234\272\023\222\307\274\013h\024=\305\261\305=\357\352D\275\342\006E\275w$\261=\336\355\351\273\214\220\321\274\271\n\366<\346b\320<\350\274\025\275#\206\201\275\253v\347\274\257cM<,<T<\000\367\002\276J\336\205\275J\363\036\275\002\213\020=}\327\301\272\034VA=\234\311/\274\233e\373\274T\'&<\356\303\277\2747\313\306\275\266\363o=\234\220\225\275~3D=\214\221\266;\276\346T\275\205\271b<\231\225};*\222<\275\234\276\363<\006V<\275\n\n\343=m\332\025\274\302\3312\274mX\242<}\327A=P\253\272\274\205{\262\274\200\342\013\273\222A\300<\254\031\365<\253#\222<\004l\254;\261\306\314\2744yx=z\210\241<$\250\177\274\\\301\236\274\235\303\322<\024\204\001=t?\001\273{Y\021=\002\315\260\274Q\257K<\376a\010\273\224\323\303=\265\202Q<.\377j\274&Y\311<%c\313=C\204\244;\213.f=9u\234=,M\331=l\231\002=<S\t<\236}\223\274\260\213N\275x\325\033=\230yK<\340\230\243\275\233\360d\274\001I\246\274YA\315\274\217Ut\275I\2458\275\332B\336<\023\224\272<\231&\016\275\242\333\200=\221\005W\275r\354\216\274\203B(=\344\235\274<\2072\243<\376\376X=\2036\307<\352}y\275y\231\014\275\341\204\n=!\005\210\275\2222\350\273y\326-=\t\027f\275P8\303<\331|\212=:\r\244\275\243\256x=\261|p=\216\004\t=a`\234\272\334\266\020=\246 z<d\354A\275\321X\246\275+\311\222=\036~y\272\243\212\346<\315_\230;\206\225b=\034\016)=\031\245\373\274\004\344\235=!}1<\2475P\273e^\265<jNS\275]c\206\273\254\373\271<\207\034\267\273\205xB\274\266oz\275|\336\305\274\23279\275\030\257\027=\256\005<\2753\247\304\273\301\375\370<\244\223\214=\232\223\201\275L6U\2756\177\000=yS\350<,B\264<3\276\224<\321\207\203\275.\250\262\274\350f\025= I\037<\277\212\244\273.F\250\274CFn=V\265\274=v]L\274f\310z\275\0251\242\273\tU\227\274\222r\226\274\270\210\324\273\013\342Y\273\257\276\243\275\254X\347\274\016\371c\275\202,L<\017\204\373<\367%\345\275\362\276\247<T\307\365\274Q\365\337<\255\364\022\275\213xt=;\274\311<\312x-=\271F\254<\336K\203\275\205\242\335\274\267~\267=G\366\n\274\002.O=\027\252\023=X4\214\274\372g\305\275\004\034\234<M\024\034<\013G\212=\377\322d\274cz\020\274\010=\256\274\235}\234\273\006\314\014=\255*\232=\232]\325=\270\333\271<n\223\220\274k4C\274\215\025\006\2759*\367\272\2540\210=S\333\231\274\233\210q=\026\373\270<^sU<aG\205=\360;M\275\020A\355<\324H\371<h\013_\275J\206\216<A\263\312\275\357\264\237<V\216c\274\221\363~=O\306\024\274\242\013\357;\\\332\321<\256\020U=@4\'\274F\231F=NF\210\275f\202\340;y\177\246=e\263P<<\003\264<\373Jy\2756\3100\275\226\031?=\340\340X=\375\210\303\273\240\2541<6\305\372\273\346c\315<\022\177\246\275zc\253\274\243\"\216\274\\\034\235;\3330\374;\346p\022\275\253\221\212=3\340D=\226L,<<T)\273\331\243\346\274D;X=\365\265(\275\300\324\315;\261\003\033\273\257\313W=9U!<b}\332<jyH\275<\306\'=2Qp\275N\304\273\275\214}5=\375\005\206=\nD\274=\017\375\\=b-\036=\236L\266=\223\014\255=H\261v<\234 K\275\267\000\260\275\333U6=R*\026\275\321\216\315;#\202e<WO1\275f\377\025\275\374\030p<\000\225]\275\330\005\235\275\227z\334\274\212\250\332\274rx\224<\200\350\230\275\3639 \274Z\357\206<|A\026\274\321\366\035<\211b\337<\025\370f\2759;\262\274\n\000\310\273\357Ca<\250\272l\275\363\375p<H4\316<aWs\275\325\361\232=\276\317\252\274`\325\254=\021n\222=\372mG=s\207\226\274 \001\036\274\300\006K<\337|\245=\026\024G=\242\003\320\272\250\337\026=\254\245#\274r\341Y==\244G\270w\263?=\254FK=\026`G:\267\335\365;\253\363\256<\225d\237<\370\210\204\2750}2<\340r\254\274\264\222\233\273f\320n=\223\316k\273\034\003O=\250\036\033=\337n\020=^]\377;Q\341_=c\031u\275\254\332\310<J\215\322:\010:\257\270\034\026\301=\232\2363=\261\240\t=X\t\321\273s\213\265\2740b\225=U\205d\274$z\245\272h\312\301=H\017\203<\213\234$=\031\314%\275\237>\340;h@L<\215 Q;\362\255\223<\221V\2428-\340\322\274\244\367\036=\346\274\227\273\252\220f\275\377\212\032<\221\216\017\274\270\271*\275\354\364Y\274\0308\210\274\317\242\200\275\035\316\205=n8\022\274\254\020\025=7\250\007<\240\220*\275\304n\332<O>\025=\334`\212\275\254\202\255<LIC\275\304\323\013=\2055\270\275\246\3472\275<\345\027<o\030\034\275\233q\225<\311\350\251=d\236\300;\256P\360\274X\360$<Z]\337\273\260\350+\274\360N\310\273$6\250;\334\203\213\2740\235B\274\324`\240<\305\005\241\274v\257Q;J\201o\272\230M\\\274\2325\022\274\320\270}<\243\256\242<\2077:\274\215\016\310;\375\207\237<\223\004@=\317ra;\206l\305<\313\014}\275z\032B\275\"-\250\275\0070\344<\325\022^=\300\002m=TF\210\275\022\276P=_\212\254=n(B<\026d/=;\260L=\t;U=K\203R=\231\353)<<\217\035=\364\341:={:\304\273\244\t\326\275\275\201\210\275\262\264j\275\213l\301<\233\302\366\274\021D\237\275\177\032\356\274\324\037&\275\332\356\253\275\265\361\234\274C\230\367<\223c\207<LO-<&\333\001\275G\306\264<W\326\332\274\367\340\017=\377\324\301;\327\264#\275\037F\r<\340\t\001=V52=\230\246\254=\2033N\274\306\014\242\274\351\2611\275}\027x=@ \014>J\212a\275X\240\374<\326\346Y\274Y0\261\274\017\366\007<\271\203\362\274\263\211\025\274\325\271\316\274TB\256\274 \014\247=3\301\241<\017;\201\275q^\203\2751\230%<0\311\010=\026\376\023=\003\312\305;l\223><\204q\267\274[S\357<\314S\213<&\2343\275\352M\003=3=$<\345{\250\275\351\t\225\273\005\255\200\275\217~\013<s|\250;\363\320\200=FZ\306<\261\277\227=\332\355\375\274@\325 \275\202\232\303<;D*<3\2119=\311\341\351\274GU\021=\005t]=\036\356\243=Bw\321</\231\000=CUo\275\243\016\212=\267\215\254<tw\303;~\033\315\274\003\342o\275\267\244\270\275\207\020O\275\357\260\223\275h\272_\275\334r\356\275\010\024\303\274\335\327\247<6\302\214\272\271s\026<\3116I\274`\220\376<\221\344\017\275Y?\344<\227\360);\346\260/\275\036*\206=\232\357=\275M\034\242\274\307b\232<\224\373\022\275\334\277~\275\220m\264=\223\212\016=\260\010\211=\362\274V=\270c\212=\252\210\334;\376f\201=\206B`=\303d\234\273\336\324a=*\352Q<\327YH\274\031t\'\275\016_\001=\375\365p\275K\230\000=P\223\024\275\304\364y<\247\301\314\273\344 \363<\025\036C<\037\302\376;\036\366\367<\376=$\275hf\r\275\331\027C=\200>\257<\323I \275W\003\r<\242\223[=\356(\226<qY\224=\344Q\333=\233<\016\275\307\332\217=\026\246\313;/\265\374<\324\300\277=\037/q\275a\330\260\275/aY=TDK\275\236\3277\275K^\311\274\333\277\362<\336\245\'\273\024\246\000\274\355xo\275\332p\265<\ng\242=\305\033\257\274\226f5=9\213h\275~\267\271=\264\321\357<\367\311\341\274\203\010\223=s\215\234=\3243\271=\004\201\020\275\347%\246\274\006\202/\272\025/\031\275A2_=\224\345\326\274\245\353\022;:\377\253<U.H\275\311\241\234<\202R\313;\244\271\236<\232G!\274=LT=\212\262P=\301\211|\275\371\377,\273\336\0238\275w\274]<\007\367\024\274\347\303^\275E\253\214;\273\261\225\2753\233[\275\3349\261=W\205\230\272+/1\275C\301\303\275\372K\"\272\256?X\275+>\031=\225IU\275\006\262\017>\216\027+\275?\362\200\275i\352\234\275\364,C=\205\217E\275.\256\026\275\335\260/\274\023\303~\275}\303\201\273\233\221\240<Z\244&\275\000\343\321;\225\321=\274Le\222<\023H\025=\273\216\021=-4~\274\315|5=\345\205S\275\337\251\030=\004A\234;\226^7\275nc\025\275\341\244\233\275\366M\033\274c\005\020<\312\204r\274\363\213x\275\354\360_=\353\211\007\275\351\376K=\210\210\344;k#\244\275\220\372\031\275\022\t\003\275\007<\246\274\216\'\r=\266t\225\275\365G\004=\026\272\347< d{<\247-\214=\363\257I\275j\254X\275\261!\022\275\230\3300=`\244\326=\t\354@\275p&\350\273\330\033\357\275?%\217:\017\035\272<\314\357\312<\277\232\333\274\217\004\275\275fB>\274\013\305\233<\025\311\232;\010\022A\274\336\325X=O\260(\273&\215\201;-\321r={\274\202=\310\037\373\274\34513\275I\205(=;4\034=\\\304x<#\245\225:\305\0229<\213Q\351\273.\376\276=\253f\003<\014\020\225\273YF\201\275l\024s\275\256\321\303=\260(0\275->\240\274\212\002\020\275gc\213<\262\202\326\274\254ps;\272\335\253=>\244[\275\306\330\347<\306\025\005\275Q8Y=K\340\233<\216y\264\275U\232\245=\330\251\262\272\314\025\246\274.i\202\275\210e\032=\313\246\364\274\365R\337<w\255o\275\236\340\250\273/\2775\275}\236\356\274+b+=\214\021.\275$\355\242\273\031ZH=\373\371J<F\275B\275\304\372D=T\377 =a\366Z\275*\242\024<\273\203\322<0\014,=?*\222\274\023^\013=@U\240\275\255&\026=,\305\336<\374\363\373=\370\001\224=\217h\325\2735\337\226\275\310\317\022<\003\252\321\274\334\331\002\275\027^{<`,\252\275+\235\374\274\361\305\324=\234\350\036\274\236\200\036\275\374@\";+\327\003=k\353K\274\343\376\304\2743\215&=@\233\002\274\n\311\270<\363t\330\275\263PM==\335;\275S\371F\275\215)W=0\355.=\031\242\021=\300\363\261<_\273\365<7b\320\274\317\2441\275\227\031\210=G\264P<\351\331~\275[\350\177<%)\031\276\\\253\3218\314\211\202=\361W\r\275\237g\007<h\301\242<\264\344\331\273w\005U\275\267m\202\275\351\245#;\225\262\226\274-A\207=\367&\\\275Trl:a3L<\321\360\214<\272{\214=\235-\215=L\177\237\273\234\377\'\274\366\311\274:(2<\275\036w\320\274,\207\352<\033z\034=\006\007\037\274J\365\222\274=\230\222=;\214\001\275\243\010,=\332\253\275<\255\347\354\274\002\247\255\275\2227\022=\r\341\253\274\351\321\376<\376\017:\273\254%V=)A7==\274\211=\232\2136\273y\t\001=\270\327!=|\362.\275K<\343\275\261gG\274\324dd\275\327\234\201\274\211\241\345<;q\024=\t\361\305;\241m\265\274\230~\355<\243\376\003\275\211UP<oJ\345;\365\352I\275T\314F\275P\353q\275/\2466=\3327\007=y{/\274\245\227\222\274\221L\373<\332k?=\230\235x\274e\030;<\217?\026\275\304=\021=\177\225a=\233\013/\275\250\262\244\275\267)\016\275\264\010\002\275\327\305B<\013\305C=\263^\376<r\226\023\274rk\267\274\007N\327;Xb(\275\343\272\244\274\357\222C;\317\327\246\274\305\024\242\275<-F=\237W\230<\002vO\275\242\246\273;$]\210\273]\352\000>\211\325m=\3054\266<\314\345\031=\300\205\202=\211\314\r\274\343\217\032\275\t2\022\275ma\201\274)\311\314\274\266\3664=\207\360.\275\233OH<\376\206\306<)7\345;(\r:<%\343.\274\352=\374\273\213\373\253;\253_\334=\270\371\306<>\2719=\253\204:=\333\272j\274\214C;=\347v\016<k\350\263\275~(w<\317A\206<E\025\336\275\211\263\271<\251B\031;C\027\001\274\203\277\342\274h\035\231<\033\263\016\274\213^y\274\254\257\357\273s\325\304\275\264pc\275\273\370\252<1<h<\3647\262\272D\024,\274V\"\222<R\006\330;\260\033\211=\033*\250\271\337\026\332=$D\242\275\273L\025\274f1\240<\262\265;<\266\034\275\274\362J\205\274CL\342;\243\3225\274\373\353\341<\310u\202\275\307\377{\275}V\'\274\254Qp\274\227C\227=\234d\266=g+\026\275\366K<\275r\330\211<\254\3531\275{\013{=\005\260G=\367\361Q\275\263\245N<o\376\251\274\361!\314=\032\315\271<ZC\\\275\347w\313\274\274\274;\275\257~\313<\230\231\203\274d\274\004\275\231\240\211=\272\036\334\273P\335\245<\330\360\324;hK\227=\003\371H\274&;b<I\207N<\232\300\006\275 \201\014\275\214\252R\275\224\301{\274l\256\220:j)\030<\266\035\245\275l\234%\2750\023\330\274\022\024L\274\264\376\032=\307y\320\274\351\206\272\275Y(a<\376F\365\2748\205\213=\204\005<=ezR\275\326X\204\274\243\n\006\275\361\261o=\247\212\026=\256\364\030\275\272\370\230\274\213M\302=e\201\277\273\255b\320<\314\036#\275\265K\360\274g\033\273;\\\251d\273x&\366\272\020P<\275\003\345\016=y\363\n=\371>\211=O;\001\276\225\004h\274\250\013\224\274\247\213R\275\203\243\270=\212a\314\274\022\212\031= \006\224\275?a\234;\227\026\351\273\241\037\014\273\312\353\013=\001\343M=\245\316[\274o\344\324<\005\250\231\275\276@\244<\304\226\230\274C\037\336<\334\203\302\274\303K?=\317K\225<\337\273:=\373<\214\274\327>,\275\006\355==|\352M\275\224Z%\275\220b\034\275\307B\021\275\222\355Q\273\262K\200\275=\367\234\274\361\250t=\221\2645=) \020=\357\037\013;Jt&\275}\337\027\275\213\224\242;\032\324i\274\016\376\313:\277\231\233\274fk\240<\307T\231\275\217\243\221=w\201/\274I\340\205<rsJ<\373_\003=\377\321 =t\373\260\274zA\002=\327\277+\274e\367V<\231\316j=\201\227\227<U\374U=/\321)=h\360y\275\036h\237<\302\200T\275i^\013=\007\357\202\275\343\350\002=\022\307m<\227M7=\261\347\253\273\367\025\236\275\327\226\031\275K9\344\275Y\263\005\275\0237D\275\203\367\013=\244K(=C\2542\275\005\306!=\236L$=n\216\316\273--s\275\3252\321\274{(q\275m;\326<\327\204\242=\333>?\275\313z\231\275\0359\273\275\234\317\221<6h\266\273\025yO\275>\033:\273\255\002Z\275\254\326\311;\367|\030\273A\310\351\274\214\350\376<\246p\354\274@Pl:\356\205\301\274\340i\000<Q%\321\272\271\245\255\274 \2572=\326\352\023=\233\351\267\274@\343*\275+=$\274\310c>\275\022*\320<J\331\036\275\351\346T\274?\023\231\275-\tu;\372\235\330<2\300\032\274\017x%\275\324\315\372;\\\242\207\274Q0~<R\310\260\274i\234\215\273\347\2447=\342\010g<\341\303.\275\001\364T=\302\267e\275\210\243t\275\354\\!\274\226\3562=\\kd\273\271\274\357<\213\335\365<\227\036\217<\357\204\303\274cXM\275\214\341\001\275\220\n\365;\216\204\034\275\336\312\006:\371^\267<\335-\233\274\021:W\275\254jn;[\225\001\275\355\231\037\275\251<\274\274\027\257\235\274\256f\"\275It*\275T\035\235\275R\034:\275\367U\032=\017\3560=L\215\263;\331\274\251\274x\336\246<\302\024k\275\365\305\362<\016u\024\275\035\243\234\273|\353=\272s\016O=\257\354K\275W=\362;\022\360\364;\300\334\206=}j\003=\307\324\240\275^\337\t\274.\177\361\274\232\264[\274\226;\372\272\304:\220\274L]+=b7(=\255F\372<\326\240\312<\230\022\016\275\316\305\021=9\n\312\274\356\315v<\362e\023<nA\320<\375YR=\377\021\001\275\3206\232<,C\003\275\264\314\'\274\211\226\036;Nx\365;\216\306\347=\263f$<\226S\261<\314w\270=%\222\366\272\337\233\305\274\301U\352;K\265K=\307 \206=F\236\220=/M\005\273\204,F\27550G\274\036\367\272<$\240\261:xb\261<L\023T=\035\347\227\275\323\236N<\256\',\275zi\345;\267\000\017\275\246\035\205:\357\200\225\271\002\355\234\274\010 &<\363\374s\275\226\300\234\275\323\307\221=Y\337Q<\277\235\"\275\322\347\311<\315\370\326<k\215\324;5\246\022=\251C\"\275&\005\024=\361k\033\275\235#}\275\376]]<EW\t\2721e\237\275\300\265\311=W\275\315<\212\354\307\273\313\350\205\274\003\317\226=\213\255 \275\1776\255\274\2136\324\275\353_\306\272\037\251\014=\262\361\350\273\266\222&\275\343\367\214\2747/R\2715\367\257=\022\305\315\274\352\301\370<\016HF=\013o\222\275\357\247\310<\254\251t\2754\230\364<\316<\337<\025\203\314\274\331\3579\275\3411\310\274\002\356\312\2720\032\027<\367\224\272\274\244\371\215<8\000\000\273\215\340\235\275\224r\264\275\262\321A<\027\244\370\273\233_\244\275\341\035{<\242X\230\275\220\351\034\266\227\201\025=\303\333\315\273\037\223+\275\350!@=\256\255\364<\361+\227=x\246\031\275\t\006 \275\237\264\330\270{\276Y=\267P\220=ei#<;y\002=\301\224\200\275\275C\353\274\022\353\255:5b\203\273:~\253\273]\337\264=!\0348\274^\206[=\033\303j<\t\3076=\027\226H\275W\347\004\275F\211\357<\013\251\227\272^\222\243\275k\001\200<\245j\350\2738\242\253\274\202\311\224=y\035\310\274\210\202\206<tml=\035>\346<DXx=\276\337\202\275\031\222\013<\003\357j\275K\261\270;\206x\302<\010\271>=\325G\226\273\241\250\255=p\205\217\275\035\204\223\275\325\274+=\375F\034\275\037p\315<^-\215<\352\343\';\303\267p=_\307C=9\000\321\274\016\336\363\274\312\211\354\275?~\265=\3129i=\275\2406\275\017\250\314=\302G\211\275\025\365@\274\324+\272;\036\233t<e\364\026\276\333\224\t=tbh\275Qp\223=.>\311=\377\026\315\274\310\365\234\275\265x\235\275-\207\221<\177\273Y\2727\364\223=\340\211Q<E\"\017\275\322\263R=G\032\317;7\217\3238\242{\220\274\267\354\362\274P7W:\256\377\216<\356\207\232\274\003\256\017\275J\251?\275P\035\177;\034\342\257;\246\022\315;\366\376p\275?\246g\274l>\232=\036nV\274\276!\237=V\364\r;(\233l<E\000\236<^\212\003<\222\325#\275YHt<\256\037\206=\272\255\227\274g\000\256:j\214K<\321H\213=VD\325<\365\226\315\274\251\006M\275\"\370\2009Fr+=\356\014D<\220\226\225\274\342\220\277\273\330\255[=\211\303\241=\225\366\342<\317\273^=\030z\014>\317q\246\275y\2700\275\204\177\342\274h\304\243=\276c\030\275\3742\240=d\270\036\275#a\335<UN\220=\334\303\277\273\372P]=i\314-=\316\345z\275\031\360[\275\313\020\366<\3318G=,T,\275\000\215\342<\252v\031\275*\"k\274\371\311\021\275\204\361\005=\235<\213<\225\262h\2747\376s\275\377\t\303\271C\374\347\274\033\255\271\273,\205\022=\236/T<k\200\236\274\216\321>=\210z\274\274T\267g=\032j\304\274\240i\013\275\216\214U=w#\r\275]P\204=\177\030\250<\370\365@\275]\010\354<\313Aw\274\363\354\333\2734\206]\275\246e\327:\377\274\322\274\307B\023\275xB\225\275J\\\320<Y\242\305\274\327\034\301\274\0176\246<\336m=\274}\221\333<\274\032\024=\350\r}9\273Vt\275(\301t\274\306\274\307\274T{\324<4=I\275\022\'\353\274\005\346l;\021\016\242<^\332~\274wJ\245<\354G\321;\\\233\324\275\t\010L<4\3616<\"\307\226\275.\250C\275\230\301\220=Z\326\220\274\321m\262\2751\010\031=.K\300\274\316\306E<A\364\264:\2378\000=\263\360I<7O\027\275U\251\200=\236x\256=o\3208\275\r\257\262=\271\025\037=0z\347<\224\242\000\274\311[t\273\005\210\215\2741\006\204<m\300A\275x\216\033\274\003u\314<?+q\275d\212\302\274\236V`=\026\277\271=\253(K<\264\337\251\275\354\246\260\275f\217\243=C\314U\274\255\314d\274(:^=\353j\231=\010\r\203\272\313D1<l\034\026=\277\203\005<*3\030\273\300\365\t\275\271;t\275&\211A\274\351#+\275\276\214\002=V\277\362<\225\234\250\275O2\214\274\253\321\374\274\213S*\275\204\350\264<\325\357\345<N\312b=\352\254\376\275}\250i=\376\353\203=\310i\003<\227\3717\275BLk\275\024\343O=p\266n\275\352k\327\273\307xh=\251)^\275r\342\227=\376\377o<\224\324%\275,\337\254\275\340\304%\275\000-\246\273\030#\305<\2342g=\303\374?\275\253\234`\275^\267j\275\345\371B\275\010\276\217<\3540!\275\344\227\275\274\256\013N\275\007IA\274\001\337;=\271$\022;\303\316\256=\024\357<\273\017\346\276<\272\275\013\274\312`\262\274NR\323<\242\334f\275\024\010\246\275\211\357\031\274\270.S=\362I9<^\357\360\274G\270\254\274\215Y\013\275\375\023k=H\'\237<\315\257,\270l\225\340<n\220\203\275Y\313\243\275\355$Z<MC3=\202\311\242=\345>;\274\345\331\031=\356\203\032=O\256\207\274;\0254=h\rl<\317Kb=G- \275\340\214C<\035\021~\273+\245!\275K\030\026=\201\355,;\006/!\275\201\025\201\274\020\261\235\275ps\177<7\217\232<r\247\024=\034\256\013=\035F?=V\002\021=b?==)\322\000\275\3056\225<\037j2\274\306\006\\\275=\353R\275\352\373\221\274j\370\320\274\332\025K\275\377V[=\010\3646<\201%^\274\000\303\207<6\270\241=7\243/\275X@\217\275\253{w\275\360\005\345<\344O\231=\361\260v\274m\020\260<*~p\273\021c\022\275/^m\274\204S;\275r\022u=z?\021\275\232S\246\2749\364d=\261pa\275\302\232\272=\354\323\221<3\037N=\201\353\226\275\277I\256<kv\005<\224\215+\275SU\212<\022\302\237\274X\2133\275B\177F\275\334l\325\273\\\376\236\273M\370\263<1\')<\230\036\206=a\001\177=\312\275@=\016L{\274\341!\220\274r/\224\275\014\256\033<\221\317b<\000\252\223\275\256\372\033=\365\221U=\\\205\\\275\246w\322<6\207[<\031k\306<\\`\246<\340\000)\275^\0216\275\324\034\306\273\240\315:=\200\320\252\275\240Zb<\263I#=\235\355\021=\267\373;;-\240<=\2236+\274\225m\000\274B\231\214=\246\267\037=\356G\216=\305 q=\276\377)\275\221\254\237\2758\345\260\274\007?\265\275\352S\013\275?Z\266\274\3753\000\275\263\034\245\275\237\266v\275\034d\032=\307\221\355<q\322\227\274\306\026X\275\356Z\034\273\310Eo<y\005\243\274F\221\362\273\032l\371;rd\020\275\255\033\247=\007\241\200\274\311\362\006=\303\354\226\2743\\X\273\362\246N\27470\006\275\nRA=nH\314=<\262\260\275\rDy\274\275IW\275c(+<\377\036,\275\252:\255=\356\230}\275\311\357\260\275\326\246\346;\367A\222\275\223\214\201=0\200\331=\213s\363<\271\247\221=\\\227\000\273B\311\215\274\260:\322<D\225_\275w\372Q\275\ra\212=\306\025\027;\013\246\025<\277\227/=(\307\206\274)\237\007\274\010g\203:d\241I<\213K!\275mA;\274\007\305\206\274\260\251\006\273\347z-<\332\203\204<\321\227\346\274;\345\225\275\261?\030<~\344\007=N\302\036=\334\267\260\275\211\"\'=\265!\246=\365\260\311=<\373\221\275\343\024s=<\362 =p\324\344<m$\355<.\222R\274\006]\371<\3209\2569.\307(\274rt\006=\207P\210==\253[<\315\022\027<\023at=\202l\372<\324\006\301\274\027\022\324\273\312\003\215\274\337\017\230=5\200\031\273\227%L\2744+D\275\374T\201<-\335\n\2751\364%\275\2742\325\274\243\313U=[,\201=x\275\322<\262n\206\271\016+b<z\354J\275x\230\321\274\021\313d<\026\372\244\272\344\351\2239~\227\222<\256}\260<\267\225\355\273\267\216\374\274\000kN=1\360=\274\277)5\273i.\206<\302\341\"=\363[G\275\353A\006\275\301\373E<7i\272<\324$\363<\004\262\207<\373\376\325<\247\224t\274\360Q\031<\214 \025=\024]9\275l\331|<w\002x\274\023XV\275{dC=7h\213\275e\373W\274\240{\202\274s\310@\275\252\316\364\274%F\030>d]\227=\2330\024\275\t\346V\275\276\262\226;\202\377\320;=\377\022;\310[\037\2744\014\333=\034\211K=I\034\307<\002\253_\275RE\r\275\334h\365;\t\'_\275\335\036z\275\377\366x=p.]\274\335\374\374\274L\023 =\345\365\246<R\320\017=\363F\371\274\204q/=\331r\307<\r\344\033\275n)\234<v~\006=]M\232\275l\365\301<\343s[<\204\376M\274\023 \236< /\313\274\335f\"\275\355\237\000\274\203V\215:9P\324\275@\267\034=\nh0=uSD\273\026\221\332\274\374\002\245\275\324\206\320<i\3470\274y/v<\024Q\213;\200\3556=\267\363\237\274Um\000\275\362\337%=,B\025\2733T%\275JSs\275H\035\000=\313\004\235<\356d\264<\304)\033=\016\234U\274I\241\"<\262\'N<\264\202\203=\276\253\216\275`\003L=\251\206\251<o4\204\271\026\3111\274-\342n\2749\256h\275\035\271\224<\033\244\214\274\250\370\220=\035#\\=\275\361\204<\274\313\314\274\216\016\"<j\270\002=\"\257\353\273\311\227Q\275\335\320y\275\234\r\342=S\340\t=\370\017\023:6\340\347:%\"W=\377\227\222\274\'\364\236=\224:\233\2743(\243=\272\255\241\275\361\256\\<[@\213=\232#\220=g\021\016\274\332\226\226\275\245\200\204<\210\025#=E\306N=\n9\306<\345b2=+\213\222=.\262\020\275\260\236\344:)\214N\275\347O/\275\373A\235\273\032V|\272\374\0304<\323g\023=\350\3706=\250\030\336<\354g\216\275\325b\'\275913\274\360\216\020\275L2\260<H\372\020\275(\022-=e\305e<\3552\332<\26207\275p .=O\362\214\273gZ\224\275\t\335\"=&\0164\275\346?2\274R 8\273F\375\200\275\355\037\217<T\010\004=K\035\276;\266\r\000\275ZD\216\273a\357\373<\345u\205\274\333\217\267\274\3413\233\275\276\007\023;\235\264\326\275\366\316e\27347\247=\271\240\234\274joR\274+\234i\274\231\0137;\363t\337=\343\031\032=6\022Y\275g\r.<hVe\275\362\364-\274_Q>\275\002l?\275m0\343<\267\025\207=\033\226\204<d\360C:\210\246e\275\311\266A=\337\371\036=\253\316\024\274\2630\n=\005\365;\275LXE\275\014\317\355;\342\377\226\275\351\276\250\275\020w\2069\016\010\233\274BS/\274~\272\352:l:\265\274\213\003\177=\311_\223=/\235\227\274\255z\317\274\350\306\325=+\304E=\300i\014\275+\361N=tI\030\275t\372\305\274g(\004\273f\277\261=\301\326\021\275\362\200?=t\224\010\275\325\202>\274f\327n\273\036w\236\275\332(\003:$J \275\033y\250<\026j\003\275\331v\030\275ia\356\272\223s\322=\214\324\n\275\004\3068\273\254\244\205\274\277\272\346=\224\0054=\327N!\275]\277\204\274\027\211Y=\220\354\006=\021>\034\275f\311\211=\214\024\351\274\025y\007\275\006\024\214\274\345\0025\275?\232m=\315\003\341\274)\310<;\377\362_=\2253\247<S\325\233=\222\236}\274\007J\252\274y\2058\275rN\002\276\204_\253\274\245\214\353\274\344W#\275\304)\222\275D\211\320\275\225AG\275\316%\205\274\343\321M<\2003U\275P\355\3418N\213f=\345\216\244\274\307\177\233\274\326\2429=JE&=\337\202\252\273*D\220\275\0257\270\273\346\021t\275\000\305\216\275\000\330\354<d?\375<\357\220\005=+-\244\274r\256T=\246m*\274\360t\207\272\223\261\034\275\222E\024\275\326\025\300<\250\035\233\275\230|\334<.\257\321<mi\236=\220\223I=\014\320\313\274\221\247\221<\003\240\261\273\244\036\347;a\355\005\275\376$\270\2744\333%=2\371\303;\264\021\n<\032a\200\275\274\360\342<>C\265\274\215 \211\274\033\373\242\274O\2639\273\251O\235\275\317c\260=\275\323\276\275\321\246\346\274\362\277C\275\031\r\027=d\360\365\275\267\323/=\002\013\226\275t\020\204=(\311\232\273H\031\344<\302\353\240<\370\216f\275\177%\222\274\255\263\036\273\030|\371;\204]\\=\001.{\275W\215\261\273\211\266\371\274\375\313\337<\227\340\261\274\026L\023\275ys\006=$\031\316\274\225yC=c\320Z\275\275\227\347<i\306\204\275\226\201\033\274D\223\205=\350\350H=n\347\201\275\004\263\224;%\030F\275\301\022e=\331\2210=\370=\214=\007\346:\274\036.\321\273\366:\263=%8\036\275\'\250{\275\222h\201\274\240\004\357\274J\0067\275\227\036m\273\'\376v\274V\341\023=\353\345\324=T\257\322<\230;h<rj\254\274\030R\350<nj\021\275s\224\314\274b1\277<a@\224\273\016i\231;a\037u<\254{>=v\004\242\275R\367A\275\0227d\275W\021\222\273w29=,\334\026\275s:\203\275\"\036\255\275*\302\240=\207\250\260\273\037\276\207\274\021\261~<~+i\275\007\177\377\274D\031d\274\374=\263\274\260p\020=\204\220\314<\377\237\337\272x\221\256\274\335\333\273<\210t\330;\262\342\330<}Z\226=\243\337\321;\250\2765=\217x}<\260\346\321\274\227\303\261\274\027C\206=\342$\275<\234\241\317<\261MC\274V\214b\272\322\n\222\2752W\336;\tj\350<\317\326_\275`C\216\274\246\206\177\274X(B\275\017m:=\310yO\275I\311\313\274[\203=\272\200\3726\275!\222,\275\240\205\355;/\216~<ct0=\324\034\207=\302\013\016\274\272b\272;\213\226\254<\255\365\307<*9D=\266\224<\275E\242\016;\246xQ\2751\3303\275`\336\010\2755\310\212\274\232\221\315\274\211\242\226\275\273\376\371\275>\037\241<\033\367\037=\256#\022\275\340\355K\274\353\254\225:(\234\334=\002\004\243\274\240@\355\275\024\303\247=\241A\221\275\026;\352\274\001\373\267<\264\260\t=\236\034w=c4\220=\236\337\016\273?^/\274-\351\002\275\374~\222\275\257u\026\275ao\020=)\013a<d3\255<z\236\255\273\014\257t=\356\325\372\2745\t\200=O\314\204=F\256\025\275\270=\310<\312\370\241;\326\236\214=\247c\247\275k\261\221\274\210\353\t=\274^K<\250\361%=\250\324\214;*6\021=\370\3154\275\204\225\202\275\022\244q\275\301DM<O\244\331\274\r|M=\247l\223\273\036\"\364<\375\207\024\274\024\315\363<x\tD\274;|y=_k.\275\232OL=\255\230\372\274\303^\022<\003\244*\276\204\353(\275\202\204\030\275c\365\212=#J\234\274\354%\205\275\230\022\\\275\005\233s\274\273\334\033=1;[<\254E&\275]\002*\275\245(\355\274w)\223\274\025\226\017\275\034\0305\273\311\220\202:X\233\274\275\200F\306\274\313L\224<\252\020\301;\373\263>\2744\014\261\275\321\274\3758\337I\002\274\004\363}=AO\355<$\360 \275\376\036\217\272\014t\227=\234\2222=\2348%=4\037\004=\021\250\t\273\350l\264<\247he\275\374\215Q=\033\016\247\275\227\360\217\2752\365\205\275\013\227{\274$6\004=D(\201\275o\233C\272\313\301\301<\016!X\275\255\376\177=\266\227\214=\377Q\320<&a(\273\375Q\223\275\010(}=k\373\202;\210l$\271\006\255\223\275\271\254\236=\305R\230<zQ\262<cL\210<\346\206\246\275\253W+<\241\021\227\274\367~\033\275L\302@\273\006\025\302\275\365\225\372;\3473w<\245@\n\275\360\273\364\274\353\025\320\274\250\022V\275Y\312\317\275\036\246z\275\001\201\003\275\000P\262<<jK\275\333H\026\275\236\330%<\317\376\305=\322\340>\274\304\360#\274e\364\370<\215\344%=\316\241\022=\334L\347\273\264\223\307<\004\2143\275\na\023=C\026\210=!\247\303\275\341\366z<\206\033#\274\010\324\320<\315\\\374<]6\200\275\215\325\343<+@\370\273\321\"\311\274W\202\204\273\215\314\205\272\177[\250<F\242\031\275\302\n\365<\200\375r=\324\320\345<(\203\3129\376\265T;\311\366\212<4\"\312\275\013\020\t=f\336\316\274\216\0056=|i\312\275m&\377<\255W\307;\253y\200\275\231\250\216<v\266<\275\037W\241<\314\257\362\273\236\007w8M\\\177\274\260\302\207\274\017\247\270=z\211\034\275\252\007$=\214w\216=\256f/\274\367\026\221\272\'\253\221\275\374}\347<\232\010-=~\244\325<v\277-\275\340R\240<i\262\177;v\001t\274\324\335\250=\314\227R\275\'%<:\356\300\362\274|\316\310<\251\002Q\274\231m <\332\303s\274\202\375\305<\327\324\021\274\210\314\313<\373\036\377\274\277)\001\274]\266I=xI\324\273\321\3274<6\364\254\275\331\217y\275\362\251\315<k5\351=\022\r\032\27509t<M\226B\275\374\\f\275\314a3\274\260\377\002\274\326b\217\274^y\336=v\2164=h\'\303\274Ibi=\353\211#\274\021\227\005\275y!a=\374\235,=\222\337\304\274\300}V=\026M\r:\371\327\036=\215\2228\274w\273\252:\\1y=\036\325\275\274c\373\023;mB\241\275zVI\275\030Y\360\274Rt\311\275O&.<WJ\354<\367\0355<\340\004\352<M\211\275<\333\241\264<\377\000\304<\2479\272<\246\211\256\274&\r\026=\005\356&<+A\247;\267\265\343=q\361\201=!\333E<\022\225\213;w\361|\2751\3728\275\230FU\275\335\346G=~;3=\215\321\367\272\035\344\232=5\032O;\344\232\013=\307\033\245=1\032\233=\215,\017\275~\312\330<\350N\367\270\214\021c\274n\331\246\274OG\326;\354\211\247\275YE\307;\261\325u\274/\216\027\275\215k\202\275\240m\206\274|\363\026\275v\362\013>O\327a;k\254\236=\2003\313<i\256\r=1h\266;y)\251\275\322\367\004\274\330\342,\275\303\251;<\302\360\227\274m\010\006=\266\354g<\261|\017\274\021d\205\275W.\023\275.\366b=C\251\353=\214\242\024\274\212\202\207<b\2642\273\340|\250\275\007\263\262;\332?g=\376\371\254<\347\016\023=\014\322*=\214\006v;\250\242O\274\262T\202\274>\344~\275\200\202\t\274\315@\222\275#\357\247<\353/\365\274\301\034\221=\200\323\024\275\224\304\301<\240\007\224\275\316\244\007\275\250\245\037:\262pK=\\/b=\320\325\315=\366LK=p\203\226<i\026\322\274l\n\210\275D\032\323<\32621\274\225U{\275\235\374P\272\266u-\275\316\231\321\274\372\366\360\274VbY=\214X\t=t\016@=\032\215\351\274\375R\331\271\305\025\351;\271_\310=\355l\251\273#\023\211\274\200\235\230=\3630U<\265\230Z=*\2274\274\306\216v\275\355q\207\274\360$#\274\336+w\274}\030C=\230\003\312;\016@\316<2\355-\275_(\237\274V\323\232\275WA\261\274{b\233;\204\352\353\273\257\217\323\274\257X\232\275\\]\251<\374\230\315\274\317\205\250\274B:\270\274nK2<\013\346+\274$\230e\274/\030d\274\024\221\353<\311\203\004\275-\355c\274\237\313\326<\325\017z;\237\031/=>bC=\261\350\236;\247zg\2746k\312\2747\t\217=\323\326!\275`\236H\275\320-a\275\312\0203\274\362\346h<6\337\301<\233\314\302=\246+0\274\005\331\t\276\321\212\277\272_,\311<q7\350:\361\331\216\274\220\236\205=\206\004\016\275\345\3231\273\333\344\356=$\356\205\275\327\206&=\344cp=\310:I=\004\035\017\274J\356E\275\321\177\t\275\373P\234\274\343\000\014\275\217\"}\275\\jf\274H\263\004\275@(\203\273C\231\320\273Hq%<U\352Y=T\332m<\361\223\177\275\005\314 \273\253X#\275/\321,<\360\201\037=\267R\327\273\014\002\"<\313E\232=4\025\303;\214\344\314<\201[\024\274\022\266J\275\255\274\376<\254\375\227\275\323\347\274<$\231L\275\332\327:\275\254 \177=\224\352\261=\003\254\017\275\351\362J=`\231<\274\263O\021=\264o\346\274\232\307H=\344\037\222\274\033\262\270<\350B\201<\032\307\244\274\2535g\272\214\307F=\223C\026=\323\227\200;\272\251\206<\\\242\032=\300\033\350<\366|\250\274(\231\r=eXX=v\030=\275\030\324`\275k9\212<\346\245C\275))f\275\376x\246\274`\263Z<\032\334\324;B\266\265\274Z\252a\275b\352W<\253\370\226=\232\231F\273\354\337\265\274\226\277\215=\362\274M\275\206LK<O4\036=@]1\275\"\226>=\275\205t=\260hi\275|\030\247\275w\003\225=\250\031\277\274\n\274)<\376\277\207\273\3631\235=\315\350\212=\3712\374=\336p\021\275+\357\023=\200 \224;\364\017c=\200\003\207\274\250g\252;\206\037;\274\346T\016<am\t<\365!(=\363\034\354\274\343\3004\275SR\204=\266F\303;;s\310\273b\215\007=\326m\231=\214\023\022>\332%/<H\370D\275W\024\233\275\304\235\224\274>\004\021=X\262B=8\020n\275\233*0\275\206\346\006=\325\315L=}Y\227;\210\220!\275\357\231\226\274\350\261B=W\376\275=Pz\255\274\346\255\215=`\212\257<D\344{\274\307L:\275\334\261\257<\3063u;\006!\033\275b\033U\275\3413\222\274\312\260.\274:).\275\237\221?\275\210\2250\2742\003^<nqj<\335\3071=g\244p<\234U\017\274\340V\t=\014\371\002=.dc\275?\346\237=\202gG=|\253\273<\"\271X\274\035\036\323;\215=\222=\264\026\245\274\234R\305\2747m\200\275p\006\030=7S\355\274\'m\\\274\207C\203\275w\342a=\010\363y\275\277W\367\272\340!\232\275\204(\005=\356\037\234\275\026\2766\275\1773\221=\232hT=\020\236\310\273\204S\037<\250\030\021=\241IA<\021\023\255\275\372\241\210=\372\031\307\274U\200\261=\346\274 \275\341\250w=?. =\223\302(\275\234 L=\263\n\310:9\t\005\275\251\025j<V\204\225\274\301\375\316<\334\212\327<\230\"\034=T\202B<\213Xk<\037\234\246<!}\035=k?#=\020\264M;\232\265L\273\340\335q:\002\rJ=(\302\223\275\327j\037=G\271\331\273H\330\377\274\371p\275\274\276\251(<\366J\026=\316\301\034\274X\261\247\273\363w\230\275\232\tl=\353\267\r<\220\243G\274\2449n<\032\266\227\274\274\252\021=\210J\206=\353\374\023=\036\201\322<i.\322\275qUq\275\t\300\262\274\323\035\320\274/X\312\274B\271O=\010\332\010=r2*=\220\230\256\274\242\335y<>\306M\275\363\001\007=:(\262\274\244\377\016\274\203@\311<\372\260\311<\316\300\037\275O\246\222=\376\021\235\275B\201\213\274\266]\237\273\325<N\274\311\3571\274\377\377H=V|\347<\002\276J=\252\277\031\275!\242\331<b\206n\274\2033\240\274\2231\242<$\214\002=\'\277\237<\320\217q\275\207\336\373\274\217j\003\275\325\327\261\275b\330\213\275\257\344u\275\3433\013=\204h\374\273\214\354\030\275Q\347\013<s;U<\024\365\326\274d\252\226\274\342\350\240==\344\235\274\266\024\223;R\240\034=8{\323<\300\262\221=\353U=\275\257\304\031\275,\335\260;\2314\366<\347\037\'\275\252\333a=\237\260c=\216\335\205\274\207\221\276<\357\211\206\2753\233\210<\004\\6\275\357\363\\\275a5y\275\253\323\333<\357\375\005=\263\353M\275\304\n\245<\221-T\275u\236\024=\313U\t\275\334&\001\275\304a\254<T\265\263;\206\353\264<TF\373\273v@G=\246\212s\275]\261\323\274R\0228\274iW\031\275\"8\323\275\211\354\033\275\215\025#\272/,Y=\326\000\013\275\206(\002\275\3766\032=\244\355%\275\257\034\002=\2359\t\275\344k7\275:\\0=v\262b<\325\334\273<i\276\036:\030\313\224<v\237\247=\307\nn<gd\205\275Hd\001;\027\177\026=\200I\245<\241\365\321\274\362\236J\275\300j.\274\362k\231=%\351\243\273p\225W\275\255*K=\231\355\215=rZ\034=}\315)<\336\242\377\274Z\255Q\275\365h\r\275Pb\274\272v\203\007<\353BR\275mW\272<\"\236%:7\032\314<\031\306X\275\002\223\270<+8\035=&\370\351\274\272`\242=y\210\217\274(>\342=\234\357,<3\233==\370\t\n\274Y`D\275\347\313\251\274g*\267\275\327\034\317<\242\233v<f\000\300<?BQ\274\265X\300\274Ml\t\275\354IN;\332\363\340=I\266\321=B\223\206=\326\030:\2723\037E=\266k>\275@\222\350\274\036\220\270<\217\262O\275\352.\340<\301n\n\274\202\\\304932Q\275.\304d=\026^Y=\236\010\276\274\351Dc;\t\032\370<\336jk\275\034\314\331\275\260\203)\275nu\355\274\363\302\246\274#K\225\274\265\361\347\274#\200\020=\325\2777\275\274g\006=\tX\316\274\357~\\\275\027\267n=\335\235\355\274\231P\364<G\3553=\342\027I=g\255=\275\024\343L\274\203l\264\2739al=-\360R=5\272x<\300v\273<:\324\005<2t~<\342Qp\2746F*<-\326\220\275=P\311\271w\272\033;00\311=\317([\274\214\321w\275\314\324[\275\221\277\210<\n\200\204=\254\236\370=\035\035,\275\310cx\274<\022$\275\317\343\224\275\\\021N=/N\235\274\234M{\274\327\351\210<\027\231\223\274,\341D\274\220\272\214\275\036w\032\274L\343\346<\221}\373\274\324\351\234\275\222\321\362<\t\024\277;\177\211\242=6\310\350<\364\254\277<o\223\233<\260\222\254\275\032k\212=\206\232\026\274\314z\021\275\373;c\275\367\323):m\245\251\274\234\212o\274J\333\236=\007tz\275\023\025=\275?\315\275=\305:E<!\261\250<\253\204\263\274{E\300=\036\324\266\275T\222\022=\326\236\246\274\r?\230=\"s\321\2743\243\305<&a\206\274\216;\233\274\311\035-\274\377\206\356<\217^\240\274\271?\262\274\027\233\003=~\022\205=fr?=)\2542=\274i\t\274\201\017\365<;-\004<\"\265v;\220\tC<\236\366R=k]\360\274\023\322Y=\250\357\031=\tQ:=\017\236\254<Dc\020<\360>x;~w\351;\222\354a\275E\202\277<N\250p;%uP\275b\244\035=\336o\215=\034Y\254<r4\017=#\323\307\274\323\257\361<n\323l\275K\207\222;\034\371}\275\363\n\031;\301\002\017\275\351\343p<w\345J<E\177P=*\337\267<3\240L\275\035\000\000\275i\026\326\274\353\\F=\240\006\027=\303\201d=\376\352A\275\262\222)=\245\217\203=s\020~\275\256Xk\274\310\311\205=V\317\265\270\223\331[\275\333\027-\2747\321\270=e|\206\274\222Wt=\212<\316<\222\220C<\271y\346<~\331\033\275\275{(=\361\'\022\275\305\026\310<3\213l\275D\'9\275\254Y\275\274\352\2112\275J\2024=\312\337\375;\221\265\322;\306\356\024=\003\202\330\272\353(/\275Z\313\221<\335G\223\2757N\205={\200\222<\223R7:\260\260\252= \021\237\274{\360\027\275\036I\204\275<\246\212\272X\037\317;+\307\267\2759\331y<p:\366<X\006v\275Y\271\214<?1#\273\322<\002\274\236\035\274\274i\262&=C\266\272<W\020\"\275ER\237=\223\346+=\305\374\240\275W\220\337\274\200\320\373\274\201\366\300\275\022w\200\274\354|\342;*\030=\275\367\305\236<vA\301=]1\300\274\366&)\275\353.\257\274\302\230\373\274\300\245\034\275g\212\262:\243>3\275\275\3612=\017$B\275\266v$=g\345\327<\242\036\371\275\244|\312\275\307L\266\275/Q\014=\021(w=\325\2043\272\210=-\275\276R\265= \205.:\357:\252\274=`\373\274\2359\216\273\220\323]:g\374\354\274\263\'\027=#I\353<>\327\017=\251\302\024=\333\242\031\275BO\035<\246J1\275\266\330\254\275\225%M\273\277vO<\322\275\'\275v\334\024\275\274\235\313<\205\3710=\3454\224:\313\253\323\274\236j\211\275x\272=\275\330\332\246\274\254\236_\275\226\357\027;\264;d=\027\233.=\243\351\365\273r\247|<\246\242L\2756X\342\2732\310C\274<Ef=\003Q\013\275\235]%=\\\225\204\275\014r+\274\352/)=\006\373\035\273s\212\005>\262\337P=\322\026+\274\026v\323\274\0252\217\274\331\002\211\274\231\256:=Gv\225\2747b\236<\370\000\252\275\"\306n=\342%|=>\022\010=>V\014=3f\266\270\247\251\251=\230y\220\275\025!\271\274\223t\203\274C\366\026\275\013\006I\275J\256\202=\302Qr=\303\255H<!\317\260=\304\223\262\275\215H\003;\247l*\275\026\222F=]9\205=a*q\275Z\250i\274n\352\275\274]\224.\275O\316D\273\330}\256\274O\224\264=\212k\323\275\227\t2=<\177\314\274\"\206$=\276\266\322\274`\014\313\275\361u\234<`\362\314\275\345\223\202\273g\336\243\274\363\331e\274\340J\212\275\201\033Y\274T\360\230\272xaY=\352 \222\272\211?\213<\t\213y;\227t\333\273v\312\256\274\371\267\370\274\300\035\200;\333\344\372\274\3240\216\273FV\230\273\027f9\275] \234<\203\231#\274v\225==\3029\235\272\016?\374<^\340\256;\274\236\010=\251\270\201;\2065\341\274\222\334\036=\224`\237\274T\332\006\275A\223\376\274&ny=_:\013=\351j\262<\"\323\334:\216zM\274\364{\017<\354\315\276<\'\306J=\010\276.\274\342\\\326=y2>\275\375\351\360=\347\310z\274\324\2412\275D\244\202<g\333\267=\365\'\331\2748\303\311=\220\307[\275G4\202:o\326\366\274\305\361\014=\300B>\2754\021\324\273d\364<\275\031\323\200\273OL\334\273\355g\214:\375v\364<\261\261v\275\301\355\t=\nV,=\342\022\305<(\266\321;\346`F\275\201~8<u;\246\274\300v\232\274\016\332\314\274\225\272\036;\352ZQ\275\023\363\025=\036\217:\275\224\237\264\274>\366\n=\273!\377\275\264&=\274\305\314:=HE:\273\004R\240<\254\332\021\275e\263\023=r\235\225\275 6\260\274\343>\216\275><\360\272H\212y=\224\0213=\022\317\216=D\241\002\275\211wi=c\021\021<w\242S<j0\201<COb\275\347KO<\337\034|\275\256_g=\261B\006=\234\250\t\275I\345\202\275\314\'\311\274\202\273\370<Q\277)=\002\273\320<\005*\250\274\345\257\351\272vJ\000<\233t\206\274\003\177]=\232\305\344\274\337\035e\275Kny\275\202\311\311<M\256\014\274\366\360\257\273s\265r=J\262\326\275\016J\027=\320\362\007\275\267\0257=*kr=<z\320<D\303\204<F\201\302<1\255\331\275\357\034\241<\266\360\244\274\367d\351;\021g{<\326\026\335<}\307\224\274\251H\307\274\350\206\265<Z\367(=\333wu\275\000\310\262\274]\266Y\275N\350\335\274\343\346\370\274bJ\340\274\260\370G<U\367\t\275\013\004$=oH\276<\210\032l\273\234X\020\276AV\024\274?\324\003\274*\230i<\365\346\016\275\354\025F=\352\234\206=\035\037\266\273 \3235=\326\206s\274\316\nt\275vv\016\274\\\377\345<%\346\235\274\336vM\274\006\347N\275\000% \275,\367?=\014\273a=\303mk=n\350\230=\244\316 \274\375\311#\275\0022\t\276\276\374\340\2721V\252\273}\\v\275n\335h<&\327T=\260d\364;s\363\222\274\337\036Z;\276\3510=D\356\371\274\206\347\255<\361^\364\274\224\377\300<*\033\232=\354\224\234\275\270\207\000=\347\273\211<kG\016\274\252]\030<:8\372<\306I\035\274p\225\200=`\317\370<b\275\301=\363\236\'\275\276\\+=\333\341\230<\227Ee;Q\377\247=\2043#\273j\r\033\275\303\020\204=/&\002=\333U\025=\207&\262\274n\242\223\275\251k\341\272\246^)\275!a\025<\"\275!=\227\342\027\2750-\241\275\030\'\007=\231k\247;u\264n\275?\301\031\275\010\274M=\241\023/\275\375\361\205;\245\343L;k\263\360\274\2027\340=\033\034L\274c\272l\274\002\0064\275\327;1=\2463\317\273~\267\013<\335l\025=Xfa<\351W\013\274\002\307;=\345\267\240<\324\320\205\275\020\274\240<Y\202\243<\375\240\320\275\352\001\250<i\005-\275\004\300@\275\237\226\371\273\375\365\016\275\226G\272\273I{\312\275\221xC\272\354N \273\032G:<\212\350C\274\245\263\025\275G\211\246<8\363\230=\266?\271\275\004Nw=},\017=\222g\310\274`\375\205=mz[\275\363\217&\275\017:\251<6U.<\025S\331<\247\030\217\272\r\371\315\274\231\224W=\003.\304;lkx\273\345\224K\274\013\202b=\203\354U=\251\204\014=\271\376j\274^\245\302<\316F#=L6\366\273\001\273L\275\004\202\023\275\006\021\201<\263\246X\2751\213\001<t\327;\274\352s;\275\177\347*=\320-L=\013C\240<\202\017\013\275\006\230P\274N\244\247\275\004y+<\001\013\'=\265\231\026\275@\320S=\243m\231\274\001\020E\275\200\r\362<\274v\253\273\244\360,=\207\007E\275:\313\340<\013\3639=\325\316\222\275\355\022\026=gM\266\272\212\262\017\275Tx2\275W\353\351\274<\024p\274\034\245P\273\037\3251=\001\036X\2750a\375;TX><3\251\005=]\377 \273ZF\030=\345\237\032\273\332\343\362\274\203\327A=s3$<\362\3627\274\303\225q=\2704.<\023\324\242\274\367\222\365\273`,\003\276 \246\215=x\356\244\274\367\004\223\275\367s\347\274\262\311\034=ul\206\274#\276\217\275:eY<\\\207\321<j\312\020\275\370\204\010\276\241b\"\274\272\004\333\274\006\311\353\274t{*\275\305\250\200\275-?\002=j\"?\2756wA\275\315\221\276\274\301\375\241<\230S\277\274\243$\274\274\325D\303\274\311\261\017\275W\277x=\017m2=^$\212\274\333\010T\275o/\246\274\224\346*=~\364\200\274\200\250d<)\367\230=\327\225\300=\330t\232\275s\330R\275\261\\\353<\306nb<\025\337U\275X<\005\274\315Qf\275\241\311\213\275/\242\242\275c\375\320<c\227\005=\366\3448<\344\231\021\274\276\376\026\275\2606B\275\345\277-=\321\006\245\275\206\312\312<;r\240\273,B\210\274h\013\300\272\021w\365<\341E\231\274\345\222^=\336\244>\275Z\303d8\217w\242=\214\344K\274\347\025\223\275\034\212\344\274\212)Z=\312\000\364<7*\036;G\216\315\275\312J\356=x\256\365=\313\313P=\227;\201\275Md\234=\213d\207=j\037\010<$\004\217\275\210\3015=&\002\004=\266\201C\275\221\301%\274\3644$\275ze\230;\343f\256;\312M\325\270\225\336\357;\316\000\370\274\343a\334;X\317\220\275>\210\350<\\\314\240\274q\225\205<\255\355><\342\210\250<\2519M\275rV.\274\374\327\305\274C(\317\274_\245\004\2730\234\265\273\246+y\274\000\335\212\274\257h\340<\210;\317\273\270\224`\275\377\324\334\274!\354\332\275\007\200\001\275\206\221J<\222TE=\353\353}=rz\230\274n\235\374<\nt\010\274|3\264\275\247:\217\274\230b)=\342\235\350\273)%\217<+\025;<N\333\226<\273\034<=n\355\360\274\264\262}=6\210\n=c+\371<d*\236<H\2612=G\337\261<\273\204\026\275\215\373A\274\252\344{\2752\002\t=\321\254{;\225g\225<\3418\003={\235\367<\361\256C=Z\323\357=\327y\222\275\356L\305<$\010o\275d5\204=\230#\000=&\346\252;\3371h\275\000uw=\016]\265<D\375V\274\006aV\275f<\322\274\223s\203=\224\227\030\271I\361;=\t\030\341\273 \277V=\3451\027\275\234\177\377\273\016\365\235<{\343\320\274\350\005\206\274\337+\361<\307J\254;Rp\222<z\200\377\273\333h\324;d\237\001\274\257\222\376\273M\350\034<\221\2705\275)\016n<\321|~=l\267\227\275\263\245\207=\035\342\213=\273]\r<\242\025\002\275\316\036K=\275\240G\275\361\367j</\007\223<\r\374\257\274\305\327 =\315ua\275\221\220d=W\375\035=hF\230=\366\310H=\324~R\274\005\232\303\275l-\007\274\370\rD=\031\340\257<\266\237\000\276\245\3211\275\250\353\307\275,\250\006=\315\237I=\365\305\302\275\036O\211\274s<)\275\022Ho<\232\232\267<\202a-\275\026A\023=\305\303\267=Kz\200=\301!\305\274\354\225/9E\353\005=a\371?\275d\254\002=v\302\257\275M\266L=\365\027\033\275\250\204\223\275Wr\302\274\260\236|=\220hN=\311\251\002=h\010\311=fE\220\274\327\367\305<\347z!\275NF\014= \320C\274\\?\252\275V\254\270<\220\n\014<#*G\275[f\376;(\277\204<\013\222y;\310\332q\275|-\343<\310^\216=\250jD=F\207q\275$\302\236\274i\325\325\274n\316F=2s\237\271\275\310\322\275\362\215\000=\321\232\243<\245]==\240\207\257\275\252\300\211\275\245a\255<\241E\002<.(\345<\277i\236=\010\340\241<\360\237g\275\261n\322<\022\022(=\276\302\302<\310\031N\271_\206\376\273\337!\236\274h\353\215<\310`\352<\025\213\031\275&\372Z\273\\\343\266<Q\334\222<4\027\255<\313y+\274\212\267\037\275\322LH\275xl\231\272e.\033\275\233\027~\274\266\277\254<\211\326U<\276\374\312<\333\032C=\024a\303=G\276T=\372\234\330<i]\237<\240v\363;\333|\203=f\267\"=\271\n\006\273m\363\030<rdP=\275\364\265<\231D\371\274\n\2573\274\344\027,\275\230|\332\274^P4\275\226\221\271=\266\200\003\275\256Sf\275\207\024\202\275$5\332\274$\302!\274\272\346\343\274Xv\r\274\013\006d\273\006\002\262\273ln\253=MH\304<:\360\210\274:\037\004\275Y\225S=\330\025n\274\363\310\254<\220(\345\275(d\307\274*;\243=<e\351\274\300\220\336\272\2740\252\275q\035\204<\334\227\201<\307\344\320\273P\355\207\272\020\247\211\275\373e~\275ZQU=;\216w\274n\307\224=\251\037\312;/\263\027=\331\350\263\275\276o\331\275\312\230\177\274\373&\017=\303\025^=\215\255\232\274\352#\210\271M\216\273=\310\232w\273\210\236\212=1\277\013\275\025\370\326<\244\322!\274\317\340\200<\355\211\323<*\002\273;ET\340\274\343\237\254\274\270}!=M\007\017<\025*\t=\230\'\254\2742p\033\275\023\014\304<\357D\035=5\356\324\275\316z\220\275jp\026\275U\322\246<\034L\332\275U\275\371;P\357\211=\322\210\247<\334L0=U\267\255\275N\333\023\275\331\255\212\275\371\361:\275K\331\235=Z,\003>\311h\005\274\222\t\202\274l\2077\274\245\037}<8@\"=\224\0274\273-\006\377<{\322\'\275W\322F<u\253/\2757\264@\274\357\276\020\275\275\262\003=\344\023\2339\336I\202=\241\315M<\2223t=\271\260\261\273\342\035\321<\241\273g=\037\363\371<H\303W\274\351\025y\275\241\235C<\005\316\032\275\256\232}\275A+p=\020ze\275!3<\275\201du=\315ba\275.]\026=q\360\242\275\241\'\222\272\354\375\376<KM\022=^\325]\273\003\361\210\2740g\245\274\n\342\315\274\275\3639=\003bt\275y\337\271<_\272\337;c\021\376;\2559\033\275\223\006\010<\366\017\006;+\313\\=\237\371\257<\374\217\205\275\276\255\235\275\273\023\335\274q\334\244\275\225\022\231\274\263\214~\275)$\356;;\010y<V\270\250=?\003\352;\237\267\323\273\005\253+\275\245\036%\275\331\374\206\275z\232\353<\322q\271\274\013v\352\274\345\311\316\2743\3558\275\231\005\261\273<\025\036\275\362\365n\275m\251\001=\035hz\274\034\354\362\274\236\211\273\274\271IR</\237\213\274\255\363\t\275s\014\301\274\214x5\274\030j\261\274\246\326i\275\252\261\251\275\324\356 =`\020\273\274xR\260=\211B\022=lN\230<\274\0357<Y\261\032>a\277,\273\271\247#\275\2623\314<\264\330\372<\007\340\331;;\310,=\t\206\001\275~\"\336<\220\005E\274;/\224=\221\344\001\2755\030\220<\375\304\210\2750\317\032=\243\\\351;\005V\362<\0244\275\273\234\004\226\275}\203\241\274\320\336\350<\365\r\243=\366]d\274\322\326w\274.H\024=wE\024\275J\200\320:P>];\000\350\036=1\337\237=-z\334<R\354*=\026\016O;\341yM<\0346\234\273f\362\"\275\323\276p\274Y\037h\274)Qz=\361\333\324<:\214\003=\023vv=\227[d\274\307\005\310<)f\302=?\272L<\323MU\275/\327\250:\240\006\212\275\0341\327\273\331R\354;\340\265\301=\2028D\275\256\353\237<\264dp\274\314\322\316<\217\200l\273(\200{\275\261\207%\275\374\224D\275MQ\232=8\305\017>\257^\022;MKb\275\227\031\246\274\252\321\252=\302\271\230\274\033\274\301\273\320\233\303\275u\2039\273\203?\264=S\020\006\273\027w\333<\313>\277<=\265q\275\001K\204=\376z\264\275\271\314*\275<\302\n=\324\"\021=\351S\001<\371\016\266\274N\201\241\273\221\2667=>\214C=5\'\206\274\001<\335\274\215\r\236<\301\276\302\274\007p\000=~\357\305<\361\336\177<>~H\272b7m\275V\017\006\275\037\203\316<\t\212\246\274UXK=WgR<\274\202\200<p\"\276;9\326%\274\026 \216\274\331\010\367< \035\001<>\270V\273\363\367\223<\257\t\263\275w\253\310=\005\374\217\270\022/\005\275F\216\035\275\275\244\304<\225\316%=\271^\263\27362m<\025M\257<\335\031#\275\022P\210=M\256\022=\320\372\023\275\205\"\365<\232\367x\273`\215\246\275\353&\362\273]XD=\276\240\213=A\022\326<\031\216\341\274\327\267-\273\014U7\275\005:\n<\227\007#=.\321\006\275]\321X\274/\377\243<\022\3167\275\236r*<\\\267\t=\276\206\300=\253\346\032\273\301\001K\275\025,E\273-\341\t=\377\264\274\274\030\233Z=!\330\213\274\002\n\355\274\005\033\202<G\205\275;4\211W\274XXI;Yro=\204\275,\274\373\244\364<\250\225d=\272\204\242\275\205\233\211:\024t\260\273\335)}<WG]\275\350\342x\272C\023\307\275\303\213\035=\322}\277<\246^1={x\r=\351\214\3118a.\030=\345\255\006=\350\036?=d\360\212\274\027\224\0229\277)\347\274\272F\002\275&\223e=V\262\003=\273\236*\275\2706\032\274\374g\203\274\346\321\376<\353Y\355;5^\366<\321\223\201\273\331\336c\275\3428Y=\275\210\233=q\nT;\342\007c=\325rJ=\376NC<\343\302\371\272\3623\321=1\226m\274\357W\022\275\022\263\254<\314VY=\273\245\254\275$\303\201\275\253+\321\274z\022\226<\224\361R\275\375\350\032=\020\355\222=\330\251\327;^\214\216=U\316@=66&=j\024\023\273H]\377<9\020\333<\004\n)\275\310Jb\275{\205\222=[f\271\275\235q\365\274\215\227\233<\262`\263\271\277\303\264\274\235\205\223\274\302\322\224\274\024\tx\274\210\2670<\177\372\267\275W\307h\275\241&H\275\225\036\032;v\304\221\274\324\317\341\274On\2609\270\205u\274\026\355\245\275?\205\250<\266\350\t=\331\364\250\275j\247F<\274\205\035=\376P\3558\266!\313=i4\201=\246K\277\274\307\236Q=\003\232L\2744\357\'\274\002@\003\276\205\352\312\275\367Q\337<\321\332\371\274\307\233\246\274Prf=\000\273\203\2756\241\375<a.\000==v\005\274\254\321E<\242z\253\275\"\306\266<\267U\210\275\177\001\202=\227?\036=\353\323\203<\352\340\205;F\"\220=5!9\275\330\320%<?{\223=\374J\242\273\216]\207\274\003\214\340\272\361<g\273\264\236\034\274a\202v\275\370\300\t\275\273\351|<)\251Q=\221\243\030\274q\345s=T\236G:j \n\275\233.O=\271\230e\274\224\016s=\211\017Q;\244u\001:G\234Y=\000\027\362<\304\'j=\007\033,;[K9==\363w<!Sl=zg\327<\241\205\276\275\337\307\351=F\343\366\274\271\032\227\275\030\2062<xx\312\272>\345\022\275w\214/\275\205\234\226=\024\200\237<\017\217\340:\2521\276\274J\034;\275IK\023<\200\207o;L\022?<\243\246 =6\376\333\273\220Bg\275\'u\274<\215\243\322<T\'\020\273\274G\177<\3628\232\274\252y6=\202\'\n\275;\005C=\333\213\374\273M\350.\274\220\312-\275h\340\267\275=\312Q=\363\305u<t\260$\275\367m_\275\365\032j<:\217`\274\300\313_=u\362\212<\336\334Y=\036\224\013\274\010\374\021<\371Y0=!\357\000<D1Y=\236\341\322\2741\256\225\2751<9\275\\8\3619P\250A\275\256c\320<\227\273P\274\343\264y=\222\257\230;\333\371e\2749\241\371;a;c=\215\241\216;\277\322\326\275\256\263\177<\341\nd=\371\000t\275o\000U;\201xP<\331>\210\274\nAY=\037~\317<~\306\377\273\030\255\255\275\321\010=\274\365\234\327<\367$\314\273\306R_\275\027\226Q\274$\317\354\272\200@\220\275\322dE\275\354\007\004\275\002\217\276=\021b\255\273\251+R;\260\3321\275\311g\206<\031\3667<\214\336\026\275\315\216\311\273\340q\234<\217\351\013=\370\273\215\274\027H0\275/\236\207<\217\216\'\275j\021\310<\360l\316\275\225\266\n=\314\r\240\275\r\257]\275^\007y<\000\006\223<9\303/\273\013\324\207;\211\225\345:\331V\205\275\000\313\215<\313\274\267<p\256\337\274|\3429=N\026\255<K\002\014=\300\367\214=\326}P;\315\323\004\274\025\344\366=R>\233\275\264\326\317\274\312\231\'\275\007\3058\275$W\231=\205\177\'=\317O\'=A\303\020\2756\233\332<&\300\253<-\372*\275\322L\"=4\033\206\275/e\254;\217\213\200\275F\217\325\275\357L\277;\250\342\334\274\014\224\337\274p\236\334\274XJY\272\347\323\346\273\0313T=\270-\211=+\362\037= :x\274\371\031\023=j\300\256=\367}\263\274T\266H=X\264k\274F\374\212\275\":\277\274b\236\351;C\300\262;a\t@\275W\331J\274YR\034=\351\226A\274| 0\275\016)]\273\1779\022<\277\274\316\274\373N5=\'PN=s\021Y\274\235\252\234<\3105;\275\324\332\264\274\t\214G\275`V_=\341\234\177=\022\214\225\275\363\203\303\274\257\223\232\274\337\321\203=%\\A=\353T\367\274\357\313\374;*(\361\274\031g\305\275\257\362\224<\013\025\313\273,\315\220\275\356\370\271\274\203\265\317;X\333\352\273\245\np<N\214*\275\365\2626=\326@#<\315\240\223<-\337\023;\311\265\341;\213Q0;\362\265V<\3201\376<Av\201\275\263\226\334<\374\240\265\274<_\'\275C\335\327=\376V&\275\276k\010\273\344\221\205\275\222<T\274E \204=\311\226\211<\261\\\315=\001\265\305<\334\325\000\275\025\220a\2758\332\213\273x\033\002\275\234\256]\274\371R\235\275oX\023\274\2147\215\274:)L=\002\000,\275\235\376\334\274\211!h\275\240\332\3349\370\307F\2751\364U<-\000{<\031z\374<\025\3574\275\315\230G<B\302\n\275\374\240b<\304Q\261\274r\225\376\275\212\336\027=\366\t\017\275\262\245\353\273\271\207*\274\215\034+\275`\201\357;|\014@\273}/\363\274\322m\000\275!\272\212<\3475q=\374\316D=\000\237\311<\320-Y\275+\232\267\274\030\315\023\275\276\370\341=U\342\217\275\325E\361;5RA<e\036\371;\244Ad\274JJ\371\274QH]=\255\364\247\275G{z\275i -\275z \025=\240\360\020=\310\253\202;\242\344\340<B\031\267;x\314\030=\306\333\330\274~\343\177=\351`\346\274)\004p=\374\306\353\274\325ed\274\313\341\177<V\360\010:\234K\340<\246\366r\275r\351N<\037\303\306=\213\356~\274i[=<\027\353Q\275\0070_\271%g8\274\215\035L<\262YV\2754\002B\275\261EM=\301\370\224\275D\326h<\023\030\207=>$w;\thp:#\267:<U\371J\274\273\023\327\274\001\000\031=\\\361\034>\365e\n\275\250\217\037\273\024\373l\274\255+$\274!\316\014\273\r\266\020<\013h\365<I\212\n\275B\265`<y\254\350:\030DU=P\237\243\274\357i\272\273\2534\r\275W_\005\275\313\022,\275\010\361\311<\252\r\346<\320GV=nXa\275\204\254J\275}\257.=K.;\275\334h\265\275\n\237\337<k\210\004\276\002\302\350\274\375\277\231=N\343\340;k\217E=\255\322\277<\341\244M=\373Z\003;\254\3074=\241\201j\274h\241\031=\031\303\235\273\203\205\321:\341\n\235=o\300\362\274\327!\206\273\276cn<\224\324j=\021B\022=\332A\276\275h\222\211<b;\317\273\266E\222=\346\275-\275\257(V\275?\373a=\350\222F\275\321\r3<6\246%=\215\0146<Y$\262;\345\354\231\275\237i]<p\216\010\273\306\333\210\275\252\273\006\275y\354\020\275.eZ\275\215f\271<\240\327H=\357X!=\271\315\325=\232\264\010\275\332S3\275\375\222\230=\361\t\217=,\031\255=\233r\206=/>\'=H4\037=\370]\243<\344\303r\275\325[p\273\004\275n=\215\177H<\372\313O=q\221\227=\351\031\325\274\240\235\211<\254P\254=\270\226z\275\250\240\300\274}\0160<\004\313\t\274k\016\300\274\347\207,=\2373\316\274\030\210\261=UG\t=\277\245\350\273\367\273m\275\311\333\272;\026\351,\275\202\366M=\0260`\272\217\250\277\273\224;\246<\002<\253\275[\324\313\274ln\364:\300\361\241<;\320:\273\245_Y<\214\002\377=~W\'=\2519\212\272\227n\022\273\224\204@=\321\345\273\274e\\\354\273Gd\311\274`\347\"\273\'0j=\000\243Q<\010\333\3058o\325\035=\222\257\034=\320\333:\275\211\240J\272\030\262H\271\351\243\027<b\345\200\274\nN5\275\353\215\307\275\320Y\210\274O\327\t\275\206\353f;_\243\213\275\267[#=8Y\337\274\300\004x\275\036\006\332\275\376@\243=\310B\004\276>x\372;s\337\010\275\316\255-\275\240\200\274;\233(u</h\365\275\346\212\023\275\314\276\235<\237J.\275\302\302\242\274i\000I\275C\213S\274Oi\342<\256=\370<\251$\221\274\244\375\004=\341\373=\275\272H1=\222\203s\275P\245\006\274\220\216N=EZp\274\333\312\226\274\316\251\031;\361\262\311<\346\244\335\273#\215]<\243\024]<\022\220\334\274\243.\006\2755.\213=\226\'J<\333\034\273=\203\267<=#\023\006\274\352\337j=\005e\207;\023a\342\274\214\021\236=S\344\221=\340\315\375<|<\013\274R\033\025;\273\340\215\274\t2\r\275\354nV=!@\265\274\3151\337=\226\273\221<p:\224\274\357Q\234\274p\335F=\202\n~=\250\006\252\275\336\275N=fSJ=Vv\245\273/\200\270\274vfb=\375\337\230<-:T\274z{\367\273q|\243=SwX=J\325\226\273\031\"\314<\367\t\202\273\006\251\271\274\377\212\341<\253\2177\275hK\204;\237#\n<\0012&;\216\264\030<>\365\345\274\341\016\227=\023\002`\275\267c\032\275{\332\003\275K\270\255\274\354\314\221\273\205(\034\273\"\232\007\272q\023\324<\227oO\275_\213\031\275B6\364;c\247\240<\325I\270=\001\376\234;\365\030\013\275D(G\275\221j\257<\243\333\022<\036\035\213\274_\221\021=\204}U=\004\272q=\267\271\032=\213\310\340\273g\270_\275\242\342W=&\321A\275\364vw=\350\301F=\001\225o=\236/\336\274\221a1=\373\324\216=\272RL\2751\271\356\274W\274\356<u;\000\275{k#=\267\277\271=\315\333u\275\271\217\003\275\020\212o=\253\356G\275\330~\003=\345U\372\274\202\217p;\252q\251<UQ9=\227\351\340=\312\215\207\274=\264\217<U\343\333\274\277\022\024=\230\365t=\2410S\2758\214T\2753\006s\272\242\306s<+\034\200\274\274\002\246\274\225\227\210<\311\255\204\275\302 \"\275\024\320\000\275=\267\255=\0325\267\274Sw\035\275X\310\261\274Y\336\016\274\032\257.\275j\3644\275\250\251D=\373L\207\275\220b\223\275m\277\237\275\325\361\\\273\303\261\217\274\241\262\301<\234\240\225\275\032)q<\010\n\224\275\230Ta\275]\034\213<}\345\312\2751\342\335\273M\206\266\274\251{o=\311\364\340<T\351\020\275\371\014\341\275\345\2607<`\350x\275\331B\001>P\221\024<g\245\216=\224\275B\275\245\337C=>2\002>\324\377g=|f\t<8NH\275]{\211\274\237\021\334;\365\223\271=\315\017\276\274/{\345\274\250\221\003=\372\321\301\274\337\360`=\263_\2319\277\025\t\275H\220\370\275z\002\274\274\227\216s=i=@\275nb\313<R\230\207<\303O\260\275\235(/\275\376\027\347\274=\277}<pu\032\275}VX\275f\317\000=Z\267\215;\322\2216;\261\252\340\274\014\223l<\261=\373\274\351\224\202\274\004S-<\365\226N\2736\223}\275Sr\200=\'m\r\274\314\210\016\276v\241\224<\343\353\346<{\0161\274R\223\226\274\267\373Q\275\371\213\361\274\242L0\275}\365n<\277\350\022\273z$\360<\223dm<U\334L\274\377\233\313\274[\242\255<\300\266v\275\036\2320;\376\201\307<\317v\000\275\2677\264\274\253\001\344\274*P\257\272\3329\036\275\346\3701=w\222\005=\333\270\030=\2522\222\273c|a\274\307\242\231\275\035\006*=\320B\205\275\035h\370<\222\373\317\274\317\366\264\275\037\373#=\242@F\273\315\357\205=\342\034\206<\233Bf\274\1771\225=\377\373\304\273\t\344\016<t<\247\274Ye\257<\225\nB\275\354\305\354<\311\351\215=\002\245\201\274Da\221<\272L);\243)\013=\332\244\211\274\226f\302<\250\3622<`\276\316\275\202\353W\275XU\273\272V]\013=\246C\243\273\256\377\017=\314\214(=\177\244\016=\3202\226<g]\257<\314\326\216<S/J<\377\225E\275=]/\274\336\023\222=@\253M\275\220XT<\365\010-\275o\310\254\274\262\306\002=\233\242=<\261\266\226=\315\344\222\274\003)\t\275o\242\244=\313\354_\274R\206\013\275\370\023\202=\333\226\212\275\031\2772=\204\372\006\275\335\231\374<\333\200\226\274\313\2066=\014\352=\274?\036)<\257\251\245\275&\307\007\274\364s\315=\364\027p\274\236\342\267<\364\232\360<fr\r\275\000\032\311\274\027o\231=\346\374\277\274\2706\322;\326\274\335\2750\317\n\274F\357\237<\304/\261\274\310\214\200=\221\344\317<\217FJ\274-\027\001\276\021G\022\275\036\374 =YF\320\274\203jk;\350\364\226<\002\345w\275gGp\274\327\251c\274\354E6\275\371\217^=\027\022\013=D%\224\275/\346\036\275\034\325u<q\021H\274\207j\204;\"\023\337\273b?\235<:k\214<\225\232C=\017\326\277<R\213j=V\006\261\274\313\263x<0\333\220<\331-><Y\0340\275\2342\210\274hH\005\275m\314\211<A\006K=\276\324\341\274L\331\214\275\tu\261=\324\027C=\204S\324<4y\r<\233=a\2745\341\'\275\r\312\226<\242\325w<a\317\017<\267\227\236<3\035\177\275\201\355\027\274P\005\032\275`\022\271\275\360\323\262\272K\376\203<[\221U<\317\347\000\274\302\013\003\274|!.\274\032\035\240\275S\365\341\274\214J\237<\246\030\202\275\000\325s=\330w\2169\200\r\262<\270\201\360;\326>\357\274\353\304k=\351\274\333<\004\302\033\275Q\221\204<\305\n8\2751t\032<\335\301\010\275n\242\"=\006o\222<:_ \274\021\3628\273D\002%\275\002r\267\275\271\344>\275\263\353\355<\0361\227=S\3019<\346\023o\275\325\327K\274*E\224\275\211\334:=\227\321s\275\302\nt\274b\313\220<\346\260T\275\032\213\230<\007\033Y\275e\364\314<\366^\t<\373\r\374<{\032\007=\210ye\275\343\232^\274\224\234+=\223D\341\274-\326\225\274!\322p\274\376\362\263\275\311\016\204\275\332\312\371<\352\271\314;\215\374@=\240\306\207<g\331\030=\2231\037\275\216\375\353\274?_|\273\375F\326\274\217\351\036=A\370g\275\025+\003\275\316}\364\275\016\0165\274\205\276U<\247\333\201=z\270\377<\035\372o\273Yc\223=\354\010w=\255\026\200\275[`;\275\010*\032\275\021*]\270l\013\237\274j\276J\275\357\272\277={j\001\274i.\217;\233\365R=Z&C;\205\016J<\3304\001\275\027\200\363<Hw\027\275\275\275\030\274h2[;\026\241\327<\351A\201\274\210\265e=l\337\216;\203\004h\274\242Af=?(}\274\331J\243<\nR\007=\325@R\275h}0=\242\017A<`\324\244\275h\204=\275\272 ?\275e,%=f\3510\274jN\010\274\353\362\222\274\004Aa=sC\224\274Q\347\220\273\'\014\322\275\371\355\"=\2252m\275He\371;\234\323\233\273\221c\027=m\215\324\274\362\346\272\273D\217\327<\343\317\233<\373A_=l\244Z\275\273\020\230=\270v\227\274\253\223q\275\351\373]\275\014\255\343\274\325\337!\274,\231\000\273Jl\227=-\274\265:\223L\252;(\273}=\276\213&\273Y5V<\267C\004=\207B~=\334f\316=\3201\336\274\350\356/\275/\250\227=\033#\037<\233\016\217\275\375\330T\275\213\253\331<\004\003\241<\350\007\242;\256\274\332<\256Ys<\013)C\275\245\247V\275\001Y.\274\221o\025=9\376\013=)\240\257\274t\332\247<s`\200<\251\361\310\275>\347\003\275\3518\257:\02262=W\227)=;\315\017<4\252w<\216\274\334\275\212\275\240\274&\356\226\275\223\360\n=\033\037[=w\003\212=\326\336~=(b\356\273~\202\347\273Ph\037<B\240\201\275\260\312\342\273\200*\237<5\316\374<\315h\205=o\275\225<\300*\233\275\370\027\237\274\361\332\003\274\370\317\205\274\335K\206\274\265u\272\274\356\004\016<\r\211\023=\217\216\210\274\366^\007\275\325^\234<J-\333\274\300\376\260<bq\311;\200\207\246\274F\254J\275\036\017E\274.\373\223\274\204\241\211<\235\006\321\274\022\010g\275\321\315\253=\360\2546<\244\265\023=\376:\371\275\036[d\274\265\014\351<^#\210\274\0027\251=\324\007\241\275\203\265\206<1\3544\275J\025G<I\3559;\353\224c;/\333U=\375\251*\275a\354==\024\347\362\274I?\304\275\226?\010=yx\327\273\314\220\006\276\307\002\334\274\006\212\031;\020\351\037<\372\322\001<\021\236q=\276\035\263\275?\270\"=\362\"\005=l\r><LJ\002\275\276\346\242<$\364>=\217\r\037\275+]3=\265\000\235\275D+ \273C\n\243\274)\355\320\275\252*\232\274*\030\003=\334\033-=\001\017\206\275&\220r\274k\326\246=\226|j\275\373\252\236;\312\364\014\275\016nj<\323{\215\273\316D\227<\010\333Q\275\355\203\210:\n;z\275\224/\206<\321\3523\274\226\037_\275!+,=w\314P<\235\315==\252l\252<\003\332\n\274\373\234\247<\320\263e\273\204d*\275_)\036\274\250\244_<\276\206\252\274\036V%\275g\342\217\275\305\334\355\274\265_\354\273\206\271\246\272\326\035\206\274\2318\347=\321\360\"<\320\313\000\274\321\311\242;pw%\275#[\001\274u1y\274\031\251\303<\256\006\224\2752\006$\275\243\033E\275g\333\214\275A+\224=\021NR=\267\331N\275\202\240\241\273\203\035\364:\213\032\267\275:W$=\243t\252\274\355\366\314<\235\341D\275\027\243\225<be\205=\267\025\204\275\230\337\337<\347g\004\2739IC\275q\360E;\3506E=\361\335\005\276P\016\253<qD\261\273t\266\200\275\201u0\275\000\220\223<\343K-=\261\327\256<\220\030\027\275\000\033!\275\275\001A;,\207\300\274\374>\240\274\243\210\005\275\031\220\007<c\036\206<\003\r{\274 \237\t\275o\"2\274\276\230N=\322\355\223\275W\330?<\255p\335\274\270\024\213=:\237\215=\212\267D=\257\211\r\274#eA\274\310\017B=\353\372\313=\364k\241\275\033\240M\275\326v\267;\030\003\034\274\331\357\026\275\346\">\275\352\276\356\275\0230\243\275\337\326(=\330\r\237\273(@\213=\357\021\025=\254;\263=\036AG\275S\327\345\274\227\016v:\014\353\357\2748\024\312\274\220\367\016:@\305\264\273\244\036\035=\020b\226=\200\277\215\275\213\206\000\275@]\316\274\275m\334;m\247\347;?{\212\274\372j\374\274X-\323;\323G\200<\007%\240<\336\002\221\2754\207\002=\177F\r=\177\276\253<\347\331\016=x+\341<\254\300\n\274y\215\026=I\237\357\274 TP\275\006?\264<\342,\243;Z\257\037\275P!\000>8\2164<\\\2244<\177\331_==)<=\202\016\213\275\025iD\275\340!\334\274,\323\342\2746\207\007=\270ee=\254\262\311<\010/\323\274t\213\257<\343{\244\274\207\350\344<V\210\267\274S\2158;}\223\203<\223J \275=\365\267=Ma\006=}#U\274\034\306\202\274\234\272P=\235Va=X\372^<\333\026\000<\225\256\360\2758\270(=\r\004\272\275\033\247\246\27428\001=P<\375\273\221&\207<\311G5=\200w\232=D\236\"=\244\226\007\273WYF=\351KC=c@-\275\316\316\320\274xJ\234=H\211\301\275\274\260b<\336r\307<\366\320v\275b6\204\275\251\030\247\274%\025\221\275\231\310\252\275\343\363\214\275\2002\256\274\261\352L=8\372\303<\345N5<\233\204J=\323S\201=\004\334\207<>\306.=\377m\360<\303\340\036=\274\017\270\274\346@%=\256\274#\274F,\232\275 \222\305<\247\230\274=\341\311R\274Ni\244\274\255\241\246;\307d/\275m\263N<\261^\372;\236\275\271\274\nwi\275J@\235<m\206\261=\312\037$\275S`\233</\300\353\273\230]\254=9*B\275\033\274\203\275\276pD\275*\"\026\275Q_\237\272\264H\334<\245~\234<\262\233c=W\230\245\275\022f\230<X\n\026=1\326\324\273\367K\241\275\227r\014=\330\014\000<\374\277\231<\"A\304\274\247\027[=\227\354D=\245\\\021>;\335\243\273\224\';\275\366,E<[7\375<\346|\234<\2712\267<\315m\334<\264\223\336\274\365\000T\275hl\207<^]\343;\232\316\303\274\346\020/\275\014\366R\273\376\235\211\274\367-)=!\273U<1\340\227<\177\\\252=Ze<=[\225\365\274\346oL<C\3408\2745\310J=\036\273q\274\030\242\022<5\205\245\273\206\2576\275\017~e\274\333ld<\215\352\300\274\221\202\307;d\303\216<@G\010=\236@-=\232\372N=q\316U<\373y\360\273\224\355.=,&<< \352\272\274Y\226\030=PH \274\223W\003\275\270\332\230\275`\310\010=\202dh=\316:X=\215\265\023=- \245\275\263\250\033\274v\252\214\274\007>\336<\024P\206=p\3209<N\2729=\310\212\033\274\353*\224\275\376\031\231\274D\000A\273\315[M\274\321\357\013=\262y\r=\266+f=\030\233\234\273\267\234\373=H>8<\262\246%\275\2302\316<{\237\212\275W\2771\275\270\353\030=\215@$\275\217\220-=\312\326\346\274c\013\331\274\246\372\"=~\035\243\275\266Q\202\275\3228T;\017\346t\275\010\333\271<\360\212\201\273Z\316\364\275\217L);\363N0\275\006\2775;\206j\320\273\351U\313\274\263\310\342\273u\375\023\275B\350\210<g*$=w\261\237\275<\350\036=\\\336a\275\036\230\271\274g/*\274\0206\017=J\316!\274\230\264\004\274\221\325\375;\330\347\201\275m\236\210<\213\274\314<\302G.=G\305\202\274\"Dz;-\267\354:\343\331\236\275\343\010\276=Z\355_\275[\255\365\2734N\257\275\254\004\231<`\014\212\274\210\202\221\274\\r\026\274\225\226\031=\000z\237\2752\317^\275B`\210\275\230\236\266\274_\004]=A\306\325\273\251G\235=\211\313~\274\037\201I=(\261\346<\241~\210=\302\230*=H\320\231<\036\357\r=\326e_\274\354\177\031=y\036B;\027|0=\000\234<\275\302\251\037==\334^:\266\347!\274\003d)\274 g\347\273\363Y\342<g5\244<\305u\314\275.`\316\274\332\306\004<\214\252\214\275\203\004\305\272c\010\n=\211\235f\275\020\245\037\275\374\032\266=\227\316<\274\245U\361<[\3549<:-)<7\225\3659O\027#\2755\200m=\366N\373\274\266B\232<R\226\247\275IB\345\275\027\373o\275\322R~\273\255L\313;-M\273\274\033k\243\274\276\371g\275\210\207\233=\241~\020\274.\ri\273T\356\207\275\013\266\323:\307\315e\274\225 \026\275\233\370\351\274\244\327\220=:q\337;RH\003<\274\275W\275N\002\236=\311\274\205=\374\237-=\345\234q;$,3\275\006#5\275 \t8\274\337\010R\275\360\215W<D\'+\274+\272\214<\354\002\031<\"\247n\274\201E\346\274\303\200\200=#\007\246\274\310oi;\2065.=\\E\026=TU\267=r\236\361\274B\214\353<\313\037\210=\234\035a\275\251\355\031=^\346\270<W\236\261\274\252\220^<NT^;t\352\270=l\322\"=\323zT=&\264\223=\\R7=9di=\242\351\346\274\227\215\254\275D\332\201;\300t\306<S\200l=\231\232K\275\201O\332\274\002W\256\275\005\367o9\313\266b\275JxL\275\373n\221<4a\252<3G+\275\033l(\275\023L\000<K|&=\r\027\347<\372\006\035>[G:\2731\033Y\274\204\274\264\274\014_<\274ej\t=\022\355\206<D\334l\275\'w\020\275\257\000$\275\315Z\037\274\341h\213;\032\253_=)\025\210\274 \325z\274\270?[\275\335\022V\275\323\221\352<\260\320\226<-GO\274\016\023\273\273\263?\207;\234\336L\274!|\233\275&O\357\271Z\355\234<\036=]\275\026\250)=\236\035N=\000\356\372<6\251<:\253f\004\2746`\215<[\305\251<z\327\"=\225,#<\0312\022=D\022\233=I\344\255<}h\003=\r\373\262<\366\023\035=!\316/\275\232\025\341\274\373\023\031\275\214\3004;H.\306\274\207\264\230<U\377\245<\016\265C;\344o\222\274\257|V<\211\263\022\275\306U\3069\256\222?\275\364Z\351\274\200\030{=\232\032(\275\225\001\363\274\231\307\021<\036^.=\256\252e<\315\241k\275\305\'X\275AZh=\006c?\275\0346j<\200\024 <\352x4=\371W\016<\353q\202\275\352\225\025\275\340=\210\275\321\213\002\275\0140\002\275N\334\332:)\342\366<H\232&=\356\223\367<cj{\275uzm\273\324\202V\275\330\244\227=\017\201\302<\007\030\034=\221G\022;\201b\335<\331\276\002\275\204u\\\274\234\207\010\275\375 \204=\353;z\272`#\207\274\007\276\'<\345\313_\275\265\003\223=,qs=i\347\252\275\205\243\374\274\255\215\263\274@&d=\217V\033=\3377\007\275#\376\354\274I\273}\275\344\264\361\273\372|\016:\007\364_\275\300R\314<\214\242\204=$\261\370;+\345\226\274%\354f\274z7o=\320\000\212\274\031\257\003\275\221\242T<\206i\335\275\275\264\3479\\^\205=\335\037J=\020a\221\274F~F=U3\223=\014\374\252=\270s\313\275\033\034\242\273\325\366\307<\202|\234\275|\027:<\237\003\312<\345C\325\272\030\277\034=\204\204\300<\310\203(=#\250\235<O\0041\275\033\260\372\274\325\nM<}\377\206\274\3512J\275\r<R\275d\2219\275\360l6=\344\343\236<\002\300\316<\017mp\275\265\225\331=\204\0339=\007\272\275<\304\r\222\275V\376\227<=\014\242\274QB\211<\260\234\234<<\317=\274Ki\307\274\356\370\327;\230\305\321\271\367,\'82q\t=:J\252=0b\001;D=\225<\324\227\004\273M*1\275g\227\225=i0\226\2742N\006=\314\237)\274*\305\360\274\272\014\205<y\224a=X\'\316<\344\"\253=\364\266\251\274\335\3626\275\310\274\216\273\312{\201\274\014\326\'\275\376\217\343\274\341\020\302\275F\351\262\274\026\342v=\330ox\274lFT=\312$1=\210\254\322\272\014\325\265\273\302\017\271<\235\345\333\274\2639f=\314\371\203\275\n\216\226<\341\3204<1\377\326\275\332\317\342<~y%\275`\262\214\275$\026v<\204-W\274\301\036\017<\332)\347<q\210\232\275:\245\371\274/Os<\005\035\035=\362\315\375\275\021O\247=~\030\177\266\252Q\245\2731\350\276\274\363Tj\272\204\022\203=\033\364V<\332^\021=\272\320\277\273\257U\312\274\304\215\324\274\260\213\005\273\014%\030\275\'zb<C\210\014\275\035\363\027\273\036~\020;\266\241\224<\020\'V<\021\257\216<M\234\220\275\360\213\352\275~\365\003\276:\223D;\352\2175=eR\032=\017@\357=7\242\003=\023\210A=H^\026\273\205\0305\275)\014\253=a\2407=\307\210\241\274\003~\004\275\366\270\334;\360\201\016=\323\270\347<\3303C\275\255\317\216=\254\246\256\2759\325U=U\353\233<\257\n4\275\265\2562=\3454\346<\330pV\275\032\304X\274n^\301<@\345s\273X\264\240\275\'$\312<>\0209\274\212i\016\275\333\224\330<>G;:\031\343\026;\220cJ\274\013\010\202\274Z\026@=\256\300\220\275\323\006\'=\030\373\006=\226\262b\274\271Km=\213{\275\270\002\345\001=\324\021\223\274\345\270\222\275\375>M\275\333H\314\273\337\325\323;v\033\272=B\353\t<\351\017\264\274@\316\337\274\366H\374;{%\323<\315\353\215\275\225l\232\274\031\340\334\274\003\313\313<n\224\207\274~\326\005\275\310\000\221\275B\014\322<\223\367)\275YU\343\274\300\365\027\273r\353\202;\257\2401\275*\024@=\374\222\256\273\303\263%\274>c\372\274U\257i\272\267\225=\275+Bv=\375\024\020\275\330..\275\t\233=\275~C]\274\024\374\274\275\327\206d<\366\220\033=\310\230\364\273\246G\343\275\263B\275\274\344i\375<\317\027\230\275\344\254\361\275\356\244\025<\032\307w\275\300\220\331\274T\351\225=w5\007\274\177LN<?\230\255\272\336\244\337;\320.\243\275\343\262!=\344K\310<\317\365\t=\332H\017\275\377\223\250=\241\034\000==\024n\275\205\320\237\274\005\204V\275\236\376\355<l\026\326<`jw\274\301P\313<\327\230Q\273]\321.\275\375h\302<\270\357\370<\034\333\245=\256B*=\231\345\201=\326\330d\275\241\371\037\272\243qO\274\264\325\356;\0136\211=\237i\037;\024\372\234<\371 (=l\340\025=2\014\212<\342\275\204=\307.\216\274\243eE\275\312\320\264\275o\032\256\275T\"\354\274\021\276X=\\9\202=\330~J\275\305\020\031\274\253<\206\275\003\254\022\272\254\314F=G\032\377\2739\014r<\224+\347\274\357\3141\276\373\312L=\222G)<\267M9=\240\273\2739\016\223(<M0\354<fp\203\274\363x\3768Dg\214=e\016\024\275\252M\031\275\245#\016\275\'\305R\274\307a\025\275\260\0063\275\321\327\375\274\026\217o=\342\325[\274\257\3336\273\253r\243\275$z\233\274\231G3=\035$k=1\022\004\275K\263\230\274\023M\231;\266\224\217=\3771\363\2745\210E=\\\177\244<\316\343\232;\030\235\347;\025SC<=^\222\272\007\257\003<\2663!\274\25257=c\353\241\272)\014\251<A\210\207\273(\335\333<rh\336<\030\014\001;Q\222x<\334\324\036=\245\256X\275.z\267=F\023\216=\'\000Y\275)\216H\275\200\200\341<\202\367|\270\306\335\247=(\374\375\274\35759=\026d\221\275<\030U<\213\275\361:\235\216\000=\277\'h<\031\355\037=\333\215m\275\312L\242=\230\226r<\364\214\210\273\r7\217\273\257\214[\2758\003\222\274[\207@\275\374\350\204\274\317\363\320<\010\257\202=49\253<aD\005\275Y\275\t;H\213_\274mKX=fr\251;G\310*=@R|\275\334\362\252\275\034\276\301\274\274\237\006\275\356S\'\273v/\213<\262\025\366<^c\257\274\215y-\274\332\341X\275o\331*=\325P*\275\221\273s\275<\241\304<1Z\350\274\265f\275;\031J{\275\307Y\244<\264\035\221\274\300q\014\275\313n\304<\335}\305<\254k%\275<\212\325<\327\337\260\275\233\372\204\275\330\na=W\277\257\275a\373\026;\374c\233\274$\321\007<\251\227\234=\362\024\200\275TH\272<\343o\220\275\217\260\036<C\316_\275>]\225=\200v\240<\013\374F=\330P\210<\"}O\274HRQ<\222\276\300<\\|\314\274^9\231\272\033\2752\2751\226\023=\302l.=\266{@\273\253\253\"=\365@\225<\004\324B<\226c\200=\364\364\226\273\346\036\026\275\t\237$=B\222\356\274ANJ\272\325\311\210;C\037>\2743s\274\274\343/\331;\335\352\372\274\344&S;P\347#=\351\332W=\323\364?<\2767\006=\314\323\241<\244\207\213=5\367\267:wY\030\275 \232>\275\304\376\304\274E\374&<($\343\274\033\035c\274\002\241g=\271\032\343\273\027v\001\276\004\354\347;\374\272\021=\347\376l\275\"\203\252\275\272\235/=tq\327<T\332\346\275\353\263\277\274\357\336\006\275go\261=\235\242\243\274-\335u=\340`\014\275\266cw\275\021\201\342\27453^<k\376\322\275\311\374$<\324\021d\274\315\350b\275\326\2057\274\206\035\030=j#\014=\211E8\275]O\252\274\256j\203<\220\t\035\275S\026\2279\0250\206<\347t\014=\364\307\r\275b]\003\274Y\346o<\333\302i\274\217o_;j\255!\275\\\r[=vXR\274g\301\022=\214\337\334\274\257\211\256;\"\321t<h\177\330<\241/\301<\355+\036\274\257\005~=\371\276$\275\033&)\274N\211\312\275\311]T=\255\361\331\274\374|\304\275\274B\364\271\350\213Q\275\360\025\034\275\023\241\000\276T\240\206\2753\004\000=\020Kj=W\226\202\275\225\016!<)\357\207;Bc\2579G\201<=\361\374l<.v+<#\322\001=\324d\306\275\372v\030<\'iO\275\006\035)\275}\332\257\274c\246v\275\177\362}\272\n\277\267\275\307\3552\275\253\331\177=\206PN=\325w\367;\211\325\310<\320\247Z=:QB\275\256\252\325<\313\261\206=\022ZB\275\226\260\340\274;\351\024<m\224\277\274\260\254\033<\201\302\366\274W<\007=\341\317\225\275tY\252:}\262\003\276\266\362\356\272\037\201\005<\346=6;N6V\275^\275\251\274\3471\304<3\331(\275AL\372\274\261o\020=\215\235h\272G\323\016\275e\273\244:\355\n\376\274p\017\031\271\010\327\010\275\323\020;<\316Bo=\221\000\311;\314\264\320\274\253\245\244\2746\204\316<\346\002\007=|\375\t\273\224\303\254\275^v`\275\362v\033\275\256\261\001\273v\025b=\004\201\355\274\330\313O=\317\347S\275\321\217\225=v!\013\274J\214\346\273\350\331\203\274\276j\020=\332v\014=l5\247=\024\236G:1@\206<\036\266q=\262I\360\274wt:\274M\371\261<\341G\227=\373\373U\275\002go=\n\002\000=\3026P\274@\3717<C\312\242\275\300\305\250\275\266$\275<\321~N=g\033\031=Q\r\206\275\322\321u\275\330%\237\273|\036\215=\206\005\000<\306K\031=\327\006\254<z\365\021=J\031d\274\234z8=\r\335l=#\004\233=\217\033\275=6\317\227=\376\343 <\304?\032\2758\257\r\275\320L\"\275\225A\222\274\246\026\260;\035\214-\275Y\206\224\2754\227\247\274\361\327\t=9\313?\273{\000[\275\004#\240\275\277\303\032\275\364/\221\273\321\006\310<\237\214u\275\326\245\211;\221\242\367=X\225d\274N\217]\274v\363\331\2730X\324\274\\\245\377<\253\305\320\274\244\037{<N\253\273<\210I\333=\271a+<\026F5\275H\317u<\027\017\013\274\341\205\n\275\264W\231\275y\201\221=\234Kc\275\004}\005\275\201\031\254\273n=\310\274\264k\204<\325D6=*\022V=\306\312\021=n\201]={\333[\273J\247\335\274\236!\215=j\206\235<\003d\022;b\342C\275p(\033=\017f\303\274&h\221=3\370\027=FLr=JI)\274\344\233Z\274L\\\246<>\244\037\2758\027.\274:7F\273\227o\217\274\002\233-\273W\221W=K\205\201=6\307s=83\305\274\010g9\274EM\335:\261\'\322=\n\367X=\225\213N<\\\210R=\005\207\331<\267\310\260=Q\327\233\274\362\214\311<3\227G\274\361\363\026=\'e\266=\347{\027\275\377=\322\272m\017\037\273\3705A\274\243x\363<\246ar\274T\t\210\275%P\326\274|\220\253=O\261\005\276\236\227\370\274{N\203=\245\252w<\034d\021\275\007u\303\274\366\354\351\272\344\276\270\273R\337\252=\302F\241=\364\331\261=xt5\275\"\306\251<^\270<\274\014\177\251<\242P]=`\320\206\274\t\034\2049G\305#=\274t\361\275\340\357=\275P\264\000\275\333\212\201\271\0311\030<\207\261.\275\325]\256\274cr1\275&\016\t=I\"\021\275\004\273T9n\315\'\275(>V<!\241\240=\243\025\255=\304\320\352<A\326 \274\036\261\000\273\337\325\252\274\337\350\031\274\303;\365\274s\357\255\274\024&\256\275\031\224\274<\016\202B\275{\244\243\273\254\363E\274\220\337W=|\376\032=6\342\326\274U\322\216\273\006F\201=\251\276\005\275#$\334\274\217\0208\274\321\344\324\274\233\254\000\275\321\301-\275\321@\033=l\247\036=j\211q\274\267\303\036\275\373SM<\362\364\371<\316\377\243=\005\210\260=8.\222\274\262 -\275.\312\235<\277\237\331<Cr\273\274`\267\3669\272\034\260=P\354\222<V\0100\275_]\367<\334\227\200\275R\271d\274\257~\202=:\026\300\275\217\313:\275\350{`\274\261\247\206<\227.\303\275\334\326\271:\257\242u\275)SA<+\243\205=\233\204H\2750\242\206\275\321\247\033\273\241)\217\275\275\347i\275t3\022\275\367S\235=A\265\017\275CCY\274\341\014\321<4\'4\274;\331\366<\267bj\275+&\007=\347\315Y<\005X\257<<\345a=!\311\270=\250\225\210=\376\244C\275\206Sb\274H\033\375<\276\245\325<\3306\214=\270\'\344\273\273\347\224\275\307l\230<\265\336\314<\0074\354<\227\010\235<*&x\274\377\304~\275\310cK<7\320\026=a&\241\2739\242\005=\017\313E\273NE)=\252S\"\275\'\260\225\274E\224\031\275\361\245\260<\000\215\311=\003_\'\2722\275X<\225\340\006\275&-\342\275\362d\261<\264\006\204<\230\306\000\274\205\367\207\275\375g\022<\316c4\272\223=\302\275\323\233\230=\350v5=nI\207=\347\253\001\274\253\247\251=t\332p=\036\223\034\274i5\215=g\270\274<\325\213\341\274\320\226\261<\'\276\026\275s\327\200<\362\313\035\275\361\211\007:\2032\036=\370\364\222\275\375\325.=U\033g\275V3\334\273\376\023\3219\3763\370\273\233l\034=\014B\014=\363\206\204=\304\213\212\275\2329c\275\272a!\275\320\300G\275\0347\302\274\264\317 <\204ep\275fp\";K\2021\275\354\274Y=\226]-=\276\215\000\276\265g\201<[\307\264<\273\350\311<\266\222\221=\372\337z\274\035u_\275\240\270\256\274\332\267\\=\026\0354=\257\231x\2748m+\275\255\333K\273\2575\357<\320A\345;\025\2260\274dm\n=\301\365\217\275*\006]=6\006\352<,\362\200<\300[4\2743\357/=}\202\335;Z\231\260\273\263\362C\274\026\r{=\277\252j\275\211\310\037=\000@6<|7\233\271\265\277\262<!o\031=\354\366\375\275\341\230\244<\201\305\031=d(f\275dX\262=*\316\n\276\033B\274:A\007(=L\324\014=sc\310\274\037\225 \275\206A\212=\2178\216\275\023\340\355\271\341\240\001\275[\016\203\275\233\034\216\275\026\317\223\275\001\036\003<\'\307$\275\210o\331<\'\322\275\274\3645H=\n\257\341:\321x\t< \367\233\2748\345!\274\332\033`=\333\377C:\247\257~=\205L\004=\330\362\274<\252\273\373\274u2\205\275%\032V\275\372\216\002\274\207\357\315\274\331^\255<\013\221<=\264\204g=\224k\020<\312\nb=6\211>=U_\302\274\222Gw<\321\023\317\274\272\205y=[\036\354<\260j\314\274\360*[<7\325\214\274\362\006\366;\340\225w=\3572\343\274\376\006}<\352\255\311\275\210r\311\274\266\235\037=w\314\223;g\212\266\272M\010\013<9~%=[pf\274\244\327\233\270\336\035\210\275X\016/\272k\323\356<\301ZG\274$d(\275\013\271\223<\007\241\003\275\312\227\321\273\232Y\220<\'}z\275Zp\363<\001\275\243\274j\370\312\273N\241X\2750f\301\274\311\247)\274\n\276\233<*U\255\272\372%#\275\203\355\013=c\354\035\274\350}\251=\351y\017\275{2\205=`I\310<+`)=\350P\222=\254\036e\274\332\224b<q\026\024\275\303m\211\274+O\260=|{\200\275\262\216\216=a\333R\275\216\023\224:\263ZB=\356\032\230\274Z\272\226\274\0315\332<q\022\232=\221\263\252\273(\370\003=\3601\222<\027]\225=\033\367\020\274\276\2260=\034\333\370\274<)\356<\352o\242\274\2461j\2748\3063\275CA/<\231^\267\274oq\032\275v\257\347<\374\242[\275\255\002a<\252d\272;\321O=\275O|\354\274\351\331\020\275\034\207H\274\032\367\302\274\302\027\255=\277\261\216=\350>\336;\221\205\202=v\032\217=\206P\231\273 \256\232=\022;\240\275e\3740\274\203\276\t\276k\237D\275\010\\!\275O<\234\275\377$\215\275\017\357\000=8-\313<\351\267%8\277\364\343\274j:\261=\306\357\354<\264\313%\275S\300\363<\377\310\216\274b\321g=\314\201\263<\344\211~\275l\370}\2752\314\257\273p\327\315\2752&w\274eAY\275\362\371\332<Y\007\202\274\3076\016=\304\203\211\274\007<\207\274\321ts<\317i9\275\013;\"=\016\341~=\024v\355<\217\377\016=w\306m<*\0045\275\037\361\004\274?\020\3679\3348Z<\301\232\367;9\023\264\274\372\314\235<\334\215~\275\227\001\255\274\200\350[=\007gE\2753\024x\275\221#\301< l\263;\332\313O<9\250J\275\032#\271<\315\212\204\275\336\217\217\275\023{\036=(\2618=\346\006\016\275\255K\233=\t\020\002\272\302\0361\275q\234\036<\241\300\262\274\212\243\216=\266Y\202=\370\305\005=\210P\244;\371\364\336<\r\037)\275\320 \275<\214\204\367\274\273\022\302<\346\245\007\2755\022\237;\024#\t=\3169\t=\006\226 \273\230\026\325;\217\223\267;\374ea\275\226\025i\275)P.<\377\017r=\254\237\347<|\002\322\274\337\325\n=\217\207\"\275\361\321\006=y\370y\275q\337\240;\246\226\216\273L\335\243\274\206\024M\2750X\302;\333\204\221<\216\325\372\274\240\255\203\274\371\341\260\275\360\372\022<!\334\r\276\275Q\354\273\350\360\331\274?\007F=n\345\303<\006\235m<\355\325\317\275\253\315}<\031\205R\275\307`\334\275\022t\247\274p3\373;\021Y\260<js\206=\001\251\305<\353\t\323\274\365~\306;\001\340==0\204\005\275\367\2705;\310\373\\=\356\224\014\275h\346\263\274hV\210\274\351\222\231=8\t\023=s\001T=\372*\322<P5/=\302\316>=\345\350\346;\305\225s<\025\027\236<^a\250<+Z\010=gC\246<M\022\233\275\213\333\345<\334\261.\273U\277\264\275\351\3465=Y\267\256<\353@\241\275v\324\333\274\031\243\327=0\006\273\272\317\214\n\275\330\363P=ZL<\275\030\331\372<\371\"\031\275\270E\357\274\326}\325\275Yd\306=R\267\250\274\017/\036=\361S!\275z\307Z\275\206\253\333\271\356\r\363\274&a\275;(f\300<\311\331A\275\226\014N\2753\365\016=\206>\236\274\315\252\016=\2074\001\273\336\320\223\274\306\006f\275\362\224\016\275\026\356\n\275\327B\202=\244\t&\275\036\nP\274:\207\372<UHf=a\022h=\005\210\371<\341\236O\274\302\365:\275\347)\007\275\0240\274\273\200\303\327\275\211`\223\275\314\303<=\243\006\267<\342\010\026<\253H\317<y]\271\273\361\373;=\370+\r=\033\270a=\206+\310=|\210\036\2757\037\207=\223\334\335\274\367\004\270\274Zf\206=\367\031c=\211!\277\275*$c\273\027\033k<\335\225`\274ut\016\275\207\023\016<\200&\230<\032\236\024\275\263\245\336\271\274\354\242<\331\215\037=\272xt==R\367\274}*N\275\002\364\020=)li\274t\351\003<P^\232<\013\266U\275hG\005=c\200\351<\252\204\302=s\214\317\274\374G\277<\265S\306\272\022<S\275\177\256\026\276)\243_=\364\364\275\270\260\'\004=,\335\006=\336\372\310<\206\370D\275\010\337(<\311\240\323\274s_\312<\037 \367:\017\010\"\273\010\327&\274-\340\272\274\216\335\213=\020r\263=b\256\322\274\235\360\017\275\367\'\037\275\201\350Q=}A\004\275\362\023\237;\227\306`=\010le\275O}Y\275\302\021.\273N\262#\275\273\022\255;\303\003\2149\256C\206<\310\374\250\2758z\217\274\207tZ<\373\335=\275\213\241b=\325g\314\273s\344(\275\254\203\270:\227W;<\177\344\300;\036\354E\274\030y\257=\310\353\214<<i\005=B\030\234\274\001^\034\275\373\351o=\213(\362<~i\020=\3775\354\274\331\203\367\273\277u\266\275\252=\026=Cx\246\275\373\025\347<wT\'\274F\230\351< /\306<\030\360?\273\2757!\275\221\013/\274\303\273\255<\365\352\332\274\262y:;\332\017\300;\255\216\247=\025 q<R\237\215;\302o\342\275\222\254\230;\'\257\203\275\206\375\317<\000X\325\273#H\214=C\005\243<U\342\005\275\231\340\022=N\360k\275\342<~\275\226\252\324\274\006\357\233;\006\356\322\274G\354\266\274\034\334\276\272Q\344<\275\016\017\273\274{\211 \273\367\215\257=5\227\205=*~\347\275q\003\257=M-\313=\"l\267<{uJ=n?(=M\023B=\037\330\317;e\306\350\274^\177\236\275Q5>\274i\031\203\274\337\3333>C\260\372\274\001\227\332<\265ny9\021\371E=\250\227\"\274\033\213J\275^\324\217\275\277\005\310\274\217^\213=ab5=l\204K=j\272N<w\250\340<-\312x\274D\370\226=l\245\261\274\204\203\313\274#)R\274\342;\212<\221i\367\273\2049\343;\344\255\235<\203\364\013>\3053\257\274w\026^\2743\013}=\263\256K\275\014\0031\275Om\311\274>@V<\t\n\033\275n\344\022=\206\315$\275K\263\007=\317w\266=\264]/\273\227D\323\274\227@\017::zS=\361\251\353\2749\200\\=\242\337\307<\010\234\360\274\356\212\337\274\036_\266=\366&\206=\273\300\224\2758r\253=\341\332\n=\311\363\275\274C\205I\273\025&O=A\217N=J$r;J\364\005=\341r\273\273z\337#\275\216\016\274;\230~\202\275\204\017O\275\014\201\"=Pv\207\275?\202\344\274C\273\303\272\336\363\256<\325\005\310\274\235\364\005<z\214\210:gC\203=\221\013R<Q\236\300\274\320w\354<\'\215\351\273\231-\377;\350\346\022<\240&\251=D\210z\274\353\346\267;\021\n\033\275\'\265\267\274u \333;\254\320T\275Jv\251=*\366\354<\034}\205\275\247\300\243<=:_=f\254\214;\242\243X\275\2743n<\231Y\220\275\256\210F=\325uc\275C\221\207=\023\337<=\200\026\257=\230G\n=\r\346^\274k&!\274\031R5\274\252e\255<\2321\203\274j\016K\273\314\326\346;\336\351u=\207j\203=\242W\202<j\340\037\274c\354.=\215\337\253=\355\'\222\274\327\274\341\274\346t,\2757\276g\275\315\341G\275\034\023\013\274\370e\"\275\225\235\206\275-\347\023>\002B7\275D\005\241\275~\367\331;\3739\261<\336\363X=9\235Y=\201?\301\273\010\347\322<\377O~=C\231f\275\257>\014\273G^8=d}\236<k.\014\274\2233~=\031\227\227=\346\302\262=\362L\222<E\324\203\275;\336\352<\005}\347\273w\006?\275g\211\355<\213\3723=\213\000q\275\305\3006\274<\014\227<P\021I<4\242s<\234u\303\274\331\234p\274r\247\001\275)\323\266\274\230\004\266<\337\325\216\275\361\367\002=2\032\216<FS\307\274\224\035\214<$\177!\274c\344\021=\307\341\300=\327\033,\274\354\'\207\273A%\206\275\311\234\216\275\372\263\221\275\336\014\303<\t\024\016<2\317\234\275\362\324z\270\302\'\005=\203\242\242<\017\331\300<\253B\201=\363A\255<\231KO\275L\305\241=\200%\321;U\354\032\275\252\272\024\273\014\223?\272\2539/\275\226\276\277<\003\234\266\274\242\224\320<\327;\262\274\364\'\024<,\376\352<\204\007\226\275$\344\250\275t\375\177<\365\315\304=\256\373\256<\213\300\324<\252\272\324\275\013\346\251\273|~\026\275\374\230v<\0202+=\201\337\236\273\264\231\254\272\263\311E=\266\363\210\274\235~\017\276\265\203\267=\223\266\313\274B\021\037\275bm|\275\377\340l=\020=\006<q\016\330\272\246\377\314\275\245(;\275\030KC<\213,\334\271-\364\227\274<#\364<\330w\033\275\000\2552\275\250i\276\274\220\217\345\274\340\302\030<\340x\274\274\301\215(=v\035\250;R<a\274\375\216\205\274r\225\324<\3726&\275\245\273\023<f\311f\275\367\326\270<\2006\325<C\354\203\275\'\232\201=\326|_=\343\234\204\274N\227\007=\324\230\226=\216\356\203=ju\177\274\314\027\n=\270z6\275\"\211\274=,\214D<\376\232\200\274\370\311}8\225Z\204=\3747k\274\246\322\276\275P\343J<p\212\306\274+\255\034=4\020\340<\242@\032=T\247\217=sP3=\026\243E;\020\031|\274\232\330\013=B\360\342<-d\231\274\230\322o<\332\303\232=9\261\013\275\272\006\226=\235\230\255=\241y\235\274\3347\226\275\200\014\\\275q\320\020\274\342\035z\275\025\027U<\317\020\201\274\006m\003<e\030\272= \275\222\274\347dd\274\215\363t=j-,=\207\222\205\2755\366p\275Y\0134=\357/H=P\343\027;\212\367\244\273\377\033X<\371\275\307<iw\355;\021\206\310<\'v\020=:70<\032\010\010:\204\252\220\274\211-@\275\274\372\201\275\010o\302\272\230u\200\274\353\210\375\273t5\036\275\340\\\307\274\374\367\233=\363\355\244<8^\002:k\222\032\272B\021\343\274\206l\220<T\200$=\312fZ\274E\271\204\275<\354\325<e\324\374\272\004\257D\275e$y\274\327\265\003\273z\266j\274\300\2741=B\351v\275\202\340\307\274F\354j\275\032C0\275g-\333\274\nZ\200=\204\0367\275\250i\237\274t=\004\275}\366r\274EW\031\272n,j=\017\243\366<\214\006\345\274\200\001\203<\227\275\341=\337*\037\274\2326\356<f<\227<\363U\212\274W\026\'=\234?\201\273\342\304\300\274\230\337\242<\260\214.\274\216Re\274\272\374\233<\204\002\030\275\"1\245=r\211\206\274\016\237{\274G-\307\274\036\361O=]\370\231\274\365}\271\274l\233\272\271\007\314f\274A>D=.1\035=gR\220<M\032\211\274lA;9\2636\311\274bc\352;\t\250\205=\216`e\273\211w\257=N\316\364<\262z\360:073<\234\275\240<\362e\224\274\226m\031\2754\027F=)\272^\275Gq\227\274.\276j=\227\360\030\275ek\364\275\367\321\217\2749\003c=\371\335\023\275\256\320\231<\373#\334\274\371!`\275V\316\3309B{\2069\265\235\243\274(\255,=O\237U\275\263r%\275<C\256\274\372\3577<\304\272\264<\314\334\203\274\233\325\024\274/\372\021=$\022\363\274\351\006G=[N]\275\207\337\210=\'z\227\275Z\036\357<\343\237\027;KS\224=\355v\234\273\253\363\356\274\353\304\243:aa\224\275\002\321w\275\026\272W\275mo\367\274X\261\226\275\371i\345\273\374P\t\275\374?W\275\030\213\235<\211pL\275\2516\201:G\373\267<\362n.<\347\023e=\377Tn=2Q\246\274\374\331\026\273\350\265\223\275pc\321<\032G9=\377z^=\273\275\221=\317\210\345\274?Y\033=6\344\315\274F\236o\273\344\306:\275)\2643=\203r\221\2737\223!\275he\233\274\247\215\345\274:\357\211\273\014\341_\275^\215:\275qU+\2750\022\202\274O\265\220\274!V0\275\013\372t\275\272\032/\274G\312\352<\270j\352\274\202\376\267=J\215\026\273\301\216=<\205(\322<\366\250\232\275\254\342\241\275\364^H=\263\325q<\005U6\275u\217\334\273\0277[=\006\233\005=\031M\001\275F\2752\275\032\313\006\275\314:s\275M;:=]\004+\275\035\2251;L\356\203;\026~\262\272\002k:\275\217\202\037=\306O6=.Q\016=\246\262\247\274\320\272\326\274\254\207)<\371\304\253<\2629\203=p;\266=M\371\344<\266`\254=\026m&<~\244\270;\224\317\270=\201\254&\275lg\317<\247\233\203\275\372\355\271\275#\336\227\275I3\351<\365\010#=\030\022\250<HM\372\274*\247\207\275\325\2142\273U\231\235\275fG\243=\014\250O\275\014\247^\275:R\020\275!I\232\274-\223\014<\275\320~\274\377H\217\274\212Zd=\375\254\361=iq\030=?~\270\274\210`\231\275;|S<\"\224\366:\"s\333\273R\245\265<b\250e=\222\314\002\276\255\322g\275\366\372\330\274\353T\276\274\233\024W;7\271>=\331q\203\275\021\216\217\275kz\005\275c\251\016=B\326\307<W\270~\274{\3321\275\260\014\236\274\t\276\324<\n\'9=\263\033G\275\221\303y<G\025\357\275\323\177\232=\'lF:\351\342\251\274\206P*<a3\220\274\246>:\274\332\257\333\274\020\267m=~f\224\275\334\3328;A\266\033\275Y\242)\275\010\340\356<\254\210A\275UX\313\275\235\312\303\274\026\263$<0/5=\345\273\211<\314\311\236<\333\226@\275#nh=[\336\247<A\355\366\274\343\026\212=@B\232=\313\333\235\274\231\305\256:\003\361\006=B}\312<\320\002|\275T\214B<(\310\001<\360x\205<]\332~=\377\203\242\274\345vv=\232YR\274XF\017\275\237\021\033\275\020\351\030=\272\324\257\275\273\345k\274\210.8\275\343T&=0\376\365\275\365B<=\364\006U\275c\206\356\273\251-\320\274\002\321n=\354<\241\274\224\242\000=\031\205\260\275\210\353\'\274v\302\002<\231)\225\273\232\362!\275\347d\365<\234\336\200\275j\001\031\275J\010`=\272\242\253\274\032\211F=\245b\277;\342\017\333\274\305?\351\275\210M\227=\244/\020\275GC\342<\323\'\203\274\360\177P\2756\207\257\274\033\222\032\274]u\034<\003\220\365<\'\320\355\273\233?G\275\334\327e\275\003\270\235\273\027\312\340\274\377\367\002\274^\376{=\231\001\022=N\257\307\274\377\311};\301\245m\275\262\026\262<\030(\377<\001\2041=\016\264&\2756\327\215\275~\363A\275\035[\320<#\r\340<\027\212,=\245\324\220\274\362M8\275\371\245\346\274#\345J\275;\331J\273$\033\251\274W*\007=\0320\306\274\316\036\203\275\261*\201\274\221E\353<U\315\241\275]r\323\274\306f\253<}H\237\275\237\250\262\274o\225\030\274\313\217\177=\222r]=\212]Q\275\220\315R\274\266\330\310=\204\013\021=1\343<=\263\261;\274\027\271N=\274tt\275=\375+\275\330r\227<Wd\353\274\010c$\273\317\3521= \352\226\275\237\270\240=\0207\211=\302!\203\274\026.\251;\203\356\253\275\375Q\203\274\375O]<\003\310\004=\034\235\205=>\202b=\342\t\331<\020r\"\274\333\274\207\274\2752\341=\304\214\350\274\342)\r=\374L\357\272\265%><z\237\266\275\0241h=QXH<%\343 =\302\335F\275M\247,\275\005\202\377;\245\204\004=\321\311^\274p$\303<\343\227G=H\356\201\274E\247\247<\317\244$=\260\317\333\2748\324A\274@\243D\274\265\230/=8\304\317\274\374\306\314\274\246\377\240<\316n\212\275\030\273\301<`\230\333<\363D\242=\020\014W<5\347:\274\032\244\026=|\250R\275~\0077\275\235\253\031=W\363$\275\256\347\346\274\317\025(\275\330%6=l\241\031=`\236\024\275g\037`\275\372{\000=`\031\373:\261\344\207\275\0027\243=\377\273\213\275E\0216=\250\372\372<\201\351E\274\006\325\262<\342\322\307\273I\330$\275\\\321\321<(\014\371\274\233N(\272\226\321\310<f\'\025;G\363\363<j|\246=\346aV\275|\217\217\274e\2272;vE\276\273[\027\205=u=@=e\005\221\274Vt\002\275\340\r\352\274\230\247\205=\212G\342<\214\032e=\321\202l=\376.\027\275\276|\236<!h\263:KaL\274\r\313\202\274\020&\210\273\303-\367<Q\206\004=\275g\037\275J\310s<\264\002\233<\213>\315=\265\211\342<W*\305=\026=\000\273\266i\346<\0170\243=\241\272\262;\264\232\007\275oKq\275L\244\227=aF\241\275\001\314\222\274\261\336\030\275i\231Y=\321\370\321;\341\362c\273\342\r\266;\222D\235\273\0103\022=!\r9=@\341\026\275\256@W\275\227 \"=\200\244Q<=a?=\033\364\220\273Zb\n\273m\246z<Y\324N\275\020U\331\273\037\253\021\275\216\257\177\275\254/r\274\317\006(=\216\026\263\275\3539\275<\366(\233=2m\001=\340\313\305\2739L\270\273\300\017\020=6J\002\274\333\256\334\273\231\265#=\361\351\310=\201(U<\024)\252;\026B\223<#m\266\273\375\244\206\275|\354R\275\227\334r;\3230p<\366\236\360;v\334\270\271z9\341\2745\'\205=\265!\370<\265\377B=\035\r\270\274\023l\317<\317u\030=\006\374[\273\370\264\323\275X\365\214=\251\331\006=\303\370\203=\334\240\322=S/\313<\220\337\320<\263d\226\274\347\230<\274\345\225m=(I\200=t\347\234<\027K\202<\340\001\202;\307c\220\275h\261==\301\256\333\274l\352\205=\246\312\224=rP\222\274;\322C=\234t$\273\3218\276\274\267/\233<\262\324r\274\237\334\263\274D$\372<\222h\367\274\3251\225=2?r<k\200\202\275\317\336,=\321\342\005<\242\331\233;8S\004=\\3s\274de|\275\026\223\024=\352\356\237<\001\025\355\274Mm\027\275(\206?;\357G\201<;\343\200<\371\326E\274\007E_=\252\313,\275\321\215\305\274E\323\253<\231E\333<\223\223\024=\204\346\017=\327\254\252=\2708q\275\361p\034\275N\306\226\275\322\236\371<xM\207=\300\201\203:\371>\252\274\234i\330\274\251I\374<\316eK=\213\2652\275\0001\237\274\204\244e=\206\257\360<\213y%\275\r\223n\275\326JE=l\267\211\275=\324\004\274\301\237\236=P\'x\275\232&\031=\376ca<\350;q=\251\204\202\274G\216\223=DMq\275\325\232\240\274\221\356\342<\3207\025=9\223\201\2754\343i<\307\022\300\274q\224\334\274\351\334\327\273\245p\017\275\003\2539\274\271\301\245=O\305A=\305v\200\275vEi=5\320\355\274#\327\246\275(@W=l\233\245\274p\204+=F\276\236<\267\002\300\274\322;J=:\372\310<\227B+=\"\025\265\274\246\tt=K\254|\275\254\021\271=\317b\216\274\227w\024=\020\207b=Q\201|=\345\024i<\222\227\200\275\016\"E;\0308\\\275r\r(\275\305V\337:\376\373\016=\214\373\013\275\205;3\275+dQ=5\207\230<\250\227:=&\305#\274\21728=\326\254\000=\246\377\222\274\276\330\342\274\200k\000:n\026\217\275\362\315\331\275\rG\273;*\220\234\2730\343\301\274H\"+<4\376\300<\266j\n\275\3473\022<\313j\240=\t\331y\274\004\014\267=/\220\321\274\277\350\220\274\237\365,:\304\225%\275\220\t\235\275\222\345&\275\243\000\005=\\\026\226\274\220\031(<\353\236\340<l\n\025<\215\234\"\275\002\353H\275\235\230#<\317\263\351<\361\356e=\353:\021\275#P/\275\030)\215\272\237\230\320\274&\236\224=\0208\236=\231\226\316\275T\307D\275\020V\264=~\360\303<stE\275\323\201\252\274`\254\234\275G\272\360;\202\256\212\275\276\227\343;9\225\025\275p\207S=_\202\256=\242\331\334\274\314w\250=\357~A=\242\305b\275\271A\330\275 \354\207=\253Qq=N\252\307\2745\276\374<\267\255\213\275\200\037\210\275\211\r\t\275=\371\336\2758\306\220\274\321\3355=\325\233\036<\022\002C=\341\200f=\201+\256<\270\242 =\025B\253\274\370xd=\315\243\241\275|\273\307=\312\363\204\274\251\306\006=\213\2704<\'\020\200\274y\234V\274\263MM\275\307\243\n<\030?\023<\322\036\313<03\235<\262Nr=>%\305<\357uO<A`\306<d\034*\274z\375%\275*\347f\274\335gh:\014\326U=\200\203\346;\363\351 \275\022\260\037\274\022P\025\275\364\263U=\312\306\r\275\364\346\306\274|\260!\275c\226\030<\330\024\361\274\274\275[\272$Z\212=\007 \367;\020h\221\274\352\351\016=\002=\201\274\367\203e=g\310\300<^C\226\274ua\253\275o;\376<\332\322\354\274\204k\003=ClK<-\341i;p\226@=\301S#\274\246\032\372;\340\326\337<p\364~\274O\376q<\262\333\032=[\374z=H\r\254\273\027a\030>\201\177\211=G\370\343<\234}\204=lT\232\275\220\3541\273B\033\351<\020\272\261=\327\200\267<\204\313W\274\332H<;\211W\013=\177<+\275\321L\000\275\014\277\001=L%\t\275,\017\236\273\202\301\032\274\303>7\273\255\3553=\352aR=\302\336\306\275-\346\017=\266\260m\275\317\3457\275\027\'\200\275\2612\274=\275D\n=\246\316\275<T$\024\275N\272\032\275pJ*\273\214^\300<<p$<\302\225\247<\'s\345:\230\306d<p\331s<\306v\362\275\252\336p\275\341\234\006\275\313o\320\274\230_7\275\353\314\022\273~KS<N\256\"=\252\2006<\304\313\257;c\237\241\271c\261(=\014f\337;\2651\265\274\352\340o\275\223\352\213\274W)\016\275\005\305\013\273\305OB:Y{3\274\0169\034\275n\242\033\275\224\367\030<\212\326\210;\200>\316\272W\316\271=,\017\226=\340f\220\274x\353\364:\207%\033\275\214\313\007\275#a1\275e\265\357\274\336Vm=4\361\002\274\251\213\211=\357z\027=j\230\220<\342\021H=O\332g\274AI\017\275{<\030\275\243\304\300\274=\033\337<w\273#<\004\366\334\273Y\273i\272[J\014=\234^\205\274\035\267_=\030\2642=;K\273\275\032\367T\275\215\250\253=+<\032<\350\007\2729\326\027\036=U\370%\275\327J\033\275y+\304\274\0302\313=\246\224\307<p\"\t;\315\354h\274\253\376F\275\026.\016=\376UY=\010\354\200<\307\314\300<\220\323>\273\235\312+=\360\013(=\201\263\273<op\024=P\376\205<z\2308<\214\333\304=,&\023=\314\334y=\341\022O=\321gX< r\216\273\253GA\275_\254\216\275\365n9\273\241lz\274\350\016O=\006\225_=7\316\372\274B\030\016=q\2139<\241\254\016=~\307\222=\006\007\360<Xa\233\275z\005\365;5R\307\273\347\3236\275\230\273+=h\320\020=.\364\033=2\302\237\275\2307\031\274!o\373=\253g\274\275\302\262\204<\326(\215=D\363\026\275\251\321\227<\014\2151=A\360C=\373\366\321\274\323\262%<\256\014\t\274\231G\t\272\210\223\314\274k\"\306\274\361H\377\274\244\024><\305_\035=+XW\275p\202\334\273\344\246\335<\034\302\300;I\346\245\274\326q>=\177\210\026=\277\3338=\243\342\332\274\tB\r=\323\270\304:\003\236\010\274\204\230\013=$\035\261=l\376\301<W\261}\275/\361\266\272\341fI\273\034\221==j\341\312; \237\207<3\3224<uw\301\274\371_\013\275\304\310\031\275\326i\206\275C\324\026=\343\2409=\322[9\274\010\253\233\272\305u\207=\201\004\r=\201E\n=X\367\036=\235?\262\275\205\200\030=k\177\r<!;\244\275\350\034\024;\354\201\013;\265\3535\273<\231\024\275R\265\263<\355\273\034=\333\270\310\274!9\302\272\267x\330\274\203\000\311\273\334\237\300=\377\301\340\274p\375\263\275%\027\002\274p\025\033\275\237\261\350\274\036\257\031<\270\343\250\275k\003o<S\343\214<\362\031\304<\231O\006=\221\000\315<\255\211\317<\226\234<;\301\273\356<ti\303=\356\332\264;\222\027\302=\337\2238<\223\244\235\274&\325f<N~\177:RtO=\226\204\223<x\342\\\275\220\266\004<^K:<yCg=\231\345\216\274\221bK\275C\262\321=\275\243\235\274\266/m=/\022\235<\307\224i\275X\367\321<\351\261t=\356}\260\274\225l\000=\220\264\030<\263\261b\273-A\365<\225\313\036=\225\370Z=jf\000\275\230Q\222\275j\275\331\275\"\247\364<M\332\326=\303/\\=\210\tS\274\265\010\256\274\310\214\210=\341\365\241=0\253:=\245\205J\275D$2\274\310k\213\274\2506\230<\024\241\231\274\255\233(=\355Y\025<)o\343\274\371\376\177=N\342\216\275\262`\003\276\216\214\370=\274j\306;\340\362\006=\2333\024=\253\036\216=\0225x\275\034B(\275\315.\324\274\001JA=\017.\245<\036S\321<\242#`=!\317\370;\366\347\277\274mR\230=\232l\320\274\372\037\034\273\2226\217\275&@\363\274*\344\260\273\303\375\366<>\362L=\312\214+\275\017\247\313<\031\323\241;j\373\225\275MJ\202<P\177X=\207/\257<Mj\245\274\240\377\001=\275\312.\274q\211;\275$\270\216\275:3\276=\240\006\216<R\211\235<\376m]<\202s\007<\212\366R:i\\c=\025\373\374<y\350\231;\337\262\215\275DH\376\274\221\362\354\274gU\357<\352,\010\275s\275S\275\216\177.\274+D\200\275\253\335p\2753~\242\275\217L\036<5@\226\274\006M\036=\021IP;\305\236\323<\313\266i<\315!\270<\205F\t\275\350q\251\274%\373\260;\254\034\251\274c\325W;\267\356\203\274\334\276\026\274\253\300d\27597\244<\366.\272<\373E\334;\331\036\314\275\236\324\201<\035\242\023=Q\310\340<k\035\022<@\301\256\274<\254\270\274fD\2409\033GJ;\362wB\275W\232:\275\372\223\"\275\265s\224\275\315\363\230\274\323\305\251=\260\247u\275\341\025v=\277\354\224;r\252\017\275\020\372\320\274\251\204y\275\327p\325<\212&C<8\255\250\275\204\247\267\274\362N\326<\311J\376\274\236^\036\275\323\340\244=\024S\212\274|}\034=\035\320\016\275n\204s\275\037\252l=tu\374<\255t\'=\262\245\376\273u\361\226\2754,o\275\007\242\r\275\314z\030\275\362\302\024\275\031]\301;A\366\233<\300\371M\275\324p\216\275\026m\234;a\024\256=_b\205\275\221g\360\274\304\"\331<\256\006\245=\204\261\321\273\307\375\352\273\354\003)<S\320\031\275\367\202\256<{\277\372<\322c/\275>fv\274\267\360\203=\033L\021\275<\324[=\253\345V\274\tu\3158\303\246h=K\314E\274\336_\256\274K\t\246<\252\310)\274\313\206\207=:Y+=\321\365\244\273\364\205\275\274iB\t\275\007/\216;/\220\023<\302\327\274\275\330Ov=\236\t\337\274e\243\376<\213s\247\275\330\342\216= \273`=pUf\275\240T\274\274J\324?:r\343\314<\006\341\"\275\\t\323\274\016\t\027\275q\036\033=\325\023\017\274\347\273F=\274\366Q=\277N\206<\333d\004=w\202\303\274\371\347\325\274\033\322\217\273\371\372\224<\354\376\220\275\312\243\013\275\264\267\013=T\253A\275\027@\202<(cq=\203\276\334\274#\n\262<\027M\264<\026\304N\2738\266\226\275;\253x=\333i\270\275\032\305\251;`\231>=\361\217\274=\007\022\237<\035j\326<T\n\r\275b\235\230=\244u\006<\317\221\301=\250&\354=\270\303u\275\306\255\370<\321LU=-\003\316\273\265\336\303\275\360\267 \275\034\022&=n\027\211\274\034\201Q<\274eR=\321\264\317\275\251=\020\274\212\001\344\274\000\247\006\273a\273\221=\372\247\001<\225\352\257;\214\t\321<#\303\235:\002W\017\274\007\362:\275?$\372<\270\223\005=\202\226\205:\224\352\201=\177H\3078\264r\201=s\357\245=p\357,\274/\323P\275\247X8\275\336\232_<\260>%\275\246\226M\275#\245\016\275\211p\307\27422\022\275>I\025<\202K\236\272\'\350\310\274\351\023\362<\261c#\275\203\213\214=\271\330e\274\217\006\206<\313q.=\\\215\033=\245,\317=o\3614=\255Rw=W\314q;\314\317\227\275\262\363B=A\376\322<s\363@\275-Y~=e\334\253<\272*\334\274\246kq=Q\376\024\275\246\321b=\254=\204<x\016>\274\343\377\030=(\356\323<\304\376d\275\346\350\030=;]q=t\016\222\273\342\263\205=\023\233\200=`\177|\274\320\003\023\275\260\357P\275\3119y;y\212\203=#\214\255<\\\315~=`\215\207<lk\305\274X\221j;\303\340Q\275~\002D\2742\367\201\274;\022\206\274<\201r=\312k\344\274>p\217=\300\342\351<\367j\315;\276G~;(\023R\273^o\241=\347\316\232<\365FD=\264\016\236<&\316\024\275\001\027\313\275m\355B\274\335\271j=\274\220\355<J\325\213\275\223\025\240<8\231[\2755\264K;\330E\343<p\352\244;vt\257;\245\257\006\275\344\241\271\273\200J\204\275<\3607<fG\336\273\246y4=\335s\342\272\030uL\274\34190<\200\330\360<I\301\020\275\350\306\344<\212~\234\275W\200\250;\n\276\231=\n\301\325\273\207\330;\275\255\216\007\275 \307%\2754|\263=\344(\361;\375>\254<E\323\226\274UJ3\274\371<P\274\235\214_\275\324`\345=}\201\367\273<V\231= \330\204<.\212\302<\334z5\274\365\034_<U@\243<\035\0047\275q\366R\275\337h\200;1\272\233\275\007,\205\274\375\241\031\275v\336\233=p\262C:\267:0=R%\213\273H~z\275\237I\252=\230\240\242;\343\375]\275m1\217=4r\223;P7\275\272L\340\203\275u\234\224\275a^\230;\337X\225<:.\034\2721{\233\275\216jJ\275fU\215=\245\3561\275\370\236\000\274\264\304p\275\034\254.=\211\n\237\274\237\204\344=1\023G:&\233\323\273Bq\036\275\326\022W=\240\240\350<x\027[=@\350.=\266Z\236=\354\244\360\274\347N\250\274{k\221\272\217l`\274\232\334\230\274X\315\346\274\253^\377<\343\325\357\273\250\256\315\274\252L\221\275\276\230\231\275=\367\201\273\270\353P<\353\004.\275\366\020A=\342Fn\274HB\225\274fn\245<\377\367\235\274\317I\242=\300\210\025\274\2251\211\2751E\204<o\206\014\275\005Ah\275\341\014\341<\206\201T\275-\217\373\273\216\246\201=?\317\000<\034\366\'<!\266W\275\365\235\206\275\214\352!\275\026\325D\275*\357\016;\250\031\271:\237L\212\275\227\340\017<\370\355\022\275tRX\275\252\352I=Z1\217<s\034\031;\013\225\337<\235\250\004\274N\337\251\274\023r\320\274S\264`\275\335\254\336=\246\313\r;\217~\022=\354\032H=P\275|=\355\3019\274\331\353\'=\0144\006\275\221\331\014\274\247\205\233=\335\275\204<\302\247\224:\021\333^=B\0017\275b\033\342\272\206n\301<f\376\303\274\236\027F\275<\263\205=\315\243\344\275\2674\265\273\257\363R=\334T\213<c\265\035=\210a#\275\3113\245\274\234r\311\274w\004L=\265\232\257\275\003\372w=iI\241=i\276L\275 \371\r\275o\350J=[\373\026<\2322\327;M\375\205<\300\312\240\275@A:\275\230\304^<\006\254\016=\"\021\307\275{BL;\362\3625\275\332\035s=~\036\034=D\204%=\\P\345\274\260b\270=\325\316\270\274\031\257\273=\374\036\203;\205\205\230;\244\271\233<9\354\213;j8%\275\037\021q\275\376\201\027\276\252\026\236\274\341\313\002=&l0=\255\037\023\274I}\303;6\031\023\275\242E\215\2754\207\005\275\2305\267\274z\2367=\322\244\215;.rB\275\374{@\275\256m\"\274\247H@=#\357I=\025]\035=\240\352\307<\037\273\323\274w\317/\275\253\007\"\274A#g:fv\004=\207\330\212\275\237\377H<\206F2\275\263\311\272\275o\326\323<i\006\346\274\366b\'\274\230\265&=\371\000\307\274\264\350{\273\350\331\256\274p\353V\274T\257\360\273o\325\220\274\374G\323=\277~m<\013\013\221\274\301 \216\274-\224\206\275%\230\240\275\377n)<\351\376&<\231[\310\275\307\303\365\274{\032\355< Tb\274\234\243>\275\351\315\217\275\302O\206\274\177~;\275\361\031\212\275-i\007;\030\364-=uGY=\360%\252\275 \263\367\274==u\274]u\005\275\275]\241<h\2558<K\302\202\274\003\333\277\274\352\273\207=\210p\010\275\263\252H\275z^\222\273\025\224\223\275\016\242U\273\325\217\004=\025M\205=\377\n\212\274m\365\323\274\n\023\013\274\010\010<:\270\036&<\226\230L\272g\033\016\275B\335\243\275\"\203Z<@\032\212\274\305R\346<\272s =$\352\353\274^\203\270<\257^S;J$=\275k0\203\274l\217\001\275^&\206\275k\377,\272`\206\214\275\215\322\007=\016\257-=C\0311=\025Y\177<\276\267\002\275\302\241\222\275q\014l=fD\000\275\021{X\275=\264p=\371g\276\274\332\021X\274\202\021\210\274v(\254<S\273\346<\t\261h=\372\260d\275\212*\344\275`\322\321\275G\226\304\274rX\315\274\320%<\275\333\366\032\275\367\235\255\275,\025\251<b\035\253\275\362\007\013\275\307\3455<\307\214\250<\n\216\357\272\263\346C\274\353%$=\035\265\027\275J\357\t;{\210\024\275>-\250<#h\344<\235j\316<\266\362Y\275\340\025[<\270O\222\274;\0207\275\267\333\244\274\304\027{\274\005\233\244\274\225d\207<\222~p;\205@\202\273?\247\004=\310\335$\275\"\341\340\274:C\342\274\020\337i\275T\213\361;H{j\274\231t\001=\233\017\004\275\301\"\'<lA\024=\275\367)\275\267n\223\272\225\024g\274\034\373B\275<\002\014<\211\375\255\2750m\240=\006\000B=\242\014\216\274\252\033\237\275\374t9\2751Px<\350\0163=\2240\332\273\256O|\275e\364\006;\240\004\036<\261\235\206\273x\270D<g\307\017\275\213|C=\364X\003<\0360\203\274\221\210^\275\330\203\013\274\370\n$\275\330\330\266\274y/\324;#\271\374<<\264]=\261\336\027=\360\274F\273\022\266\030=\013U\330\273A4\213=\266\371\216\275\026V8=\032v-\275\033#\210\275\007\231\002=\013v\023<Q\035_\275\204\303\364\274\336\3013<\366\331\022\275Oe\262\273\203\3652\275\031\300\216\274z\007\023\275l\351\266\275\374\010\246\274\nc\207\275\2223\354;\022M\010<\\E\023<Z=\362;\317\240\241=]n&9\356\245\313<\204\264z=?\314\266<\376\343\353;Aw\210\275\331Y\014=\266\350\013=wX\331\273\350\260a=\306h\311<\306\014\017=\352\001\252<!\312\220<)\365c\275\035x\375\273-\031\000=\262\335m<1\216\252<\326\273)=\021\3168=\004\024\022\275\326v\230\275L\305\227<]V\350\2731\224\210;\242\036u=e\260\022=m$0<\310\320\341\274K\375b\275Krw=#=\366<\362\265-\274Z\245*<\260\320\376<\034\0067\275B\301/\275\275\271W\274\024W^\275\264\270\265\274\354\2730=%\205\220=F\351f\275D\036\260<\313\340\247\274\014\002\202\275\203\276\317\2740a\306<\351f1\272\315\357H\273\202J\233=\246*\003\272\242X\337\274\212>\347=ok:\275\222~!\275\226\277\256=\256\262\311\273m\023;\272E\237\030=\231\241\217\274K\324\203\275\325\331\231\275\035\220\333\274V\335#<\351\313\352<\256\234f\272\377y\241\274s\021\211=P\370p==`n<\354m\343\274i=\270\274\014 \371\273\364\261\217;}\362\007\272\025\375)=Z\217\006\2740,2=*!d\275\347\266\216\274\275\205m\274\267\255\000\275\370\241\240\275\371\002\271=Q\204\261;\365\244-\275T\336\215<\344\365\264\275}A\002\276\234\335i\275\265\224\000\275\025\005\337<\026M\303=x6&;\005\014\014=\237\227\024=\213\344\323\273\244~\000=l\322\261\275\274&\363\274\237I\205=\021C\260=\323\365\253<\302C\303\275\335\031\3749\207)\037\275\036\030\222;F\250\356\274\177\021\252=<2\236\273\317\260\201=]\255\240=\237\033\211\275\330L*\274\305l\'=\3121+\274J\312\204\275\215\234\200<\013\254\034=n\313\013\276O\376t=nN\303;$\222\271<\005\273\304;\036L\016\275^\035S=a\002\375\274\352\324\354=L\241\033\275\222#b\273\005\230a<d\257\222=\351S0<}fU=\215\036\223=\363\207_\275\025o\025=\310\000\204<\341[\357<\246\002$\275\203K+=s\321b\274(\016\371<u\0023\275;\363\273\275\021\326I\275\314\341^\274\334<\316\274\325\'\017\275\216\246g=1\213\203\275\002\3029\271\2123\355\274\247\207\236\273\362%>\275\367a\032\274\246\213\351\274\014\330>=\222\346\'=q\033\203=\\\307.=\255\232t=}\326\202\275\366\033\233\274X\370\344<M\316\265\275\023\001z\274\356\024\"=\341\332\212\275Pjm\2749\016\023=\267\234)=\267Z\024=t^\000\275\336\003P<6XY\273h\230m\275\20001<\3162~\275\023\376\232\273r\360\231\274N\256\230<{\232\217\274\246\206\212<Zc\315\274\375\207\272<\320\014\032=o\177\200\274\263W$:t72=\025\263\266\275\265\274\262=9\232<\275mg\226;\331\010\202=r\304\266=S\213W\274Ay\213\275\263${=\\:#9\004\2559\275\251J\327\274h\373U\275\"\206&\275\226i\202=\334\035\320\274\263\233\234\273O\372j\274!\330G=\257<V\275^\323\002=\257\227\317\274\220\235\023=\227\374\031\274\277\024\255\275b\303r=\226)\323<S\010\277\275{^}<m}\353\274\204\327\220;\335\232=<\367\305\360\273\032Q\010<U}\242=\350\342}<Y\324T=\025\215m=\352\213Y;IS\235\275\021\347\250=\203w#<\374\376\373\275\224%)\275\022y\r\275\215\351\277\272\230\225\270;\345\260\010\275dj\342=\234\371\227<\201j\225\274\352j\240<J\205\301\275\030\014\200\272\002\264N=\217\264\224=,\342\243\275j\271:<\353[\355\274\3524\013\275g\254\226\274\343C\355<\334\253k\273\020\004\227=\200Y\\=\303\375\020=$\200\004\275\342TG\273\200\tA\275,\321\n\275\r;\014\275\266\315K\272\030\177\275=\243\223\212\274\3046?=\224\344\034\274\306\214\256=\250\316K;\223\014F<\003\017M<[\3431\2751\274\022<CW]<\262#0<a,\335<\177\272\255\274\274\274\212<\302\322\270\274\353|\004<\366\304-\275\311a\274\273\363]\221\274\306\350\323\275\020\341\372\2746\003e=\014KV\275%\354\335;F\0362;\001\237\265<\327\tU=0\325A= X(\273(R%\275\365\202\020=/\253\272\274\337\376\177\274\253\253\373:\357\305\361\274\261X2\274]\235*<\n\315\203\274\333\252J\274\202c\240\275\274\t\314\274.\324K=\354J\226\274=\272Q\275\343x\005\275\260\222\321\274\013mG;\324_\277=0\010\207\275\234\331\004;\306_V<Kz*;Z\031:\275g\316A=\260\306\250\274\204\243\001\274\031\230\200\275\305\314\':!\002N\274gI6\275\234\276*=\036\333~\275z\343M\275\324\270\301\274;\241\023\275d\000`<\212\271\027=\257\3468=:\273\201<g\305\205=\263TA\275\232\006\235\274\324\336\272=\003\216\371<\250\343&<f\223w=<\020\252=y\220\032=\0334\204\274\363\245\031\275\243\\\353:\226\271\370;\036\267\215\274\366\017\263\274\032\325\311<\341\267\200\274\215\'*\274\2120\251<\221\323~\2752:\350<?\013)\2744_\277\274\037\223\264\274v\2516<GE&:\0377i\275\035\232e<`\234N=\\\242\017=\326\365\234\274a\003\230\273\264\334\356\275\021o\346\274\354\242\307\274\237\202I=)\233\030\275k?\300\274\204w\236<\241`\'\275\304]a\274\276\007\301\273\222\234\242\274\226d\\<\367\361\006=jV\207<\367\310\220=\223\n\231<\362\316\265=\360L9<\000s\321\274)\311\372\274KnN\274Iw\030\275\257\326\233\273\255\230\374<}!\227\274\267\365\371<\362\224\262<+\230\345\273\301\001\351<\320k\247\275`\304\035<#Hn<\326\326\300\274\305\314\313\274\3757b\275\35728\273\r\350\272=\203]M\275\341a\357\275Z|\367\274\005e\000\275\0255,;\t,\024\274gpr\275a\311\243\274\344\315\331<\017\3768=\233\226\n\270\006^n=\232\326n\274\306h\210<\231\241L\275\222\215\222=\024\304g\275Y\006\256=\317\205S=\351f]\275\246\030Z\2731$\277=\354h\263<\361Rk=E-,<t\213\'=\317\361Y\273H@\347;*7\220<\001\006\341\273\233\033g</\037\224\275q$\347\274\314\303\312=\005ta\275\215\316\200\275\312\347\034\274\216\304\312\274\207\007G\275\304\252\035\274\030\247;\275u\023`=\321[\203<\333\311\345<Y5\271<\034\244\271;\037c`=\375\224\224\274\230\315\330<q\222\201;\300P&<k\341\244=2\t_=\217\266r\275\261\371\362<\216 \202\273\312\242\010<^R\214\275\227{\330\273\311&\233\275\007g\316;\232\316\004=\014\375.\275(r\251=XQ3<\206q\002=\2166\300=\335cI=d8\213=#l\351\273\202\322\023=\236\026\245\275|8\205\275\323\226\304\274\371\314\037\275\340\371h;8[\222\274:E\215=\201\206\230=\024\n\374\274\340]\335\273\221\325\013\273\262SB=\362\340\230\275;\256\314=N\231\036=j\356Z;\272\213B\274\362\321\347\274\260\264\377;A\331S\275\334\326\266\272%\241\371<q\203\023\274\205\326[\274q\020\305\274|\375\355\273\366\020\243\272x\317\205\274\372\007\254\274!\267\t=V]\375<k\037\201<3\377\016>\250\305\225=\372h\324<y\253B=.8\257;\240\254\234\272c\255\224<AU\244;\033\030\t\275\301\211\267\274\034\3538\274\0207l=\022\317\017<\353\017:=/\034j\275h\017\202\275\361\253j=\221`\035=}z\261\273\014\233h=p\037I\275Mj\004=\232\350Z\275\366\327Y=\355\245J\275\247\246>\275\035N\202<\320Co\267\313F\201<\337\302\030=r!\230<\221\344\316<up\234\273\200\364\035=\244Oq\275`~\366\274\350\256w=\310\312\302\274\237uk=\020\321\030=\326\312Z\274y/Z=B\001\211\275Q\205\000=F$\241\274\277s\303\274\310\030\207\275\226jQ=&\353\311<\017\256j\272\'\373\222\274l \017\275\207\334>=\323\031\223;\232\032\253\273\325\326\306\274\211L]=G\257 \275\352\314\317\275\204\225\251\274a+\023\275\223\277\024\275N\003\355\274\340\032\263< +\367\274\021\315O=\024tn\2740R\204<G\317\205\275\257\306\002=\315\217#=\214\201z=\026\346\310\274[uO\274=\357\020;\261\245m\274d\227k\274C\303\034\275\013|\236<Qe\376\274P\212B\275G\217\"=\037\017\360<j\3174\275O\277F=\002\362D=Dh\334=\250\237\207\274\354\336\204=\007\220=\275\321.{\274Sd\206=+\362\272<\244\247&\275\305\267\325=\205Z\210\275\036m\226=w\r\000=g\nF=1?\247\274p:\007\275\221\347\214\274\233\037\022\275\030v\256\274\261\340\212\275\036=i\275\224i\203<r\017\376<\334a\254<\031w\365<8aZ\273\357\233\200=\212\202\016=6?\302\274\216\242\240\274\r\316%=\347\220O\274\334{\224\27383y\275\314\266\316\273\256)\251<\357\177\340\273\n\3553=q\270\263=?,x\275\245\247\312:\237\304\235\275\264\220\321<\341\347\035=\350h\216\274>\177U\275\266\"\213\275\2513f\275o1o\275W5\222;\302\221\347\273\n\'\303<\354\364\361\273/\322(\273c\337<<\320\351\254\275\265\315\022<\277\242\257\275\243\272\217\275\363\365\205;,\035\032=\206\203$\275c\332\267\274\347~X\275r[\216\275\373\035n<+\234\272;J\332\014\274\306\341\334\274\206\253\303\273|\224~\275k\331\331\275\322\363\211\275\243\216i=0\272\234<.+\251\271v\263C\275\340cX=O+\244\274\330\003\207\274\255\220\0029\203r\001=\311\312Y\2753\266\255\274\375\312\232<l\372\302\274\242hs\2735\221\247;\340YR\275R\007\210\272\323\253@\275\362k\252<\337\202\376<$E\310;\215\321\265=\263]T=\0215\300\274\3778V\273\177\353@\275\203\226\260\275h\337.\275@;Q=\231\335\222\275\216P\023\275O%\010\274!\\==\2744\330<\022C\344\273\350)\025=&\334\231<\001\264d\2755\177\220\273\234,\304=\233p\001\275\315\264X<\253*\226\274I\333*\2740\222U<\327C-\275<h\307;\nnj\275\014\204\236=\342@\224\274\220o\030\275D\253\245\274\t5\275<\241\221\323\275\004\305U\275\211P\364=;.\267=/\223\032\275\245\222\227<<Z\216={I\363\274\267{\260<7Q\261<\341\246\272;\203\266\231={\002\221<\202\311\332;s;\241\274\312L\252<5\017\320\274S\020\021=\231=\231\275\262\325\022\274\325r\330:\357\022\231\274~\254\301<|\202\177\274\2721B\275\225\201\317\2746\210\261<\337j\017=Q\0175=2\324\301\275^\303K\271w\231\232=;\022G\274wW|\274\2117E=\023\363\325\273\327\255\233\275\354\245\251\274b\002i\275\023\257\240\275ZuS\275L\357\230<\311\321j\275\215\245\336\275n\021\"<\034\021\211=\370\366\253\274\337 \351;\226\321U<\035\251\344\275k\021\317<J\326+=O^4<\271\334\000=\366\302\264\275~\206|=\277\005\274\275h\344-\275\006\255\277\274\345U\354\273M\236a<<\216\217:\306\006\010\273\235\263\207<#5\356=\226\002\201\274\314P\255\2745\265\\\275o\r/=\245`\245=\235%\202\2758\325\346\273z\3419\274H\021\177;<\211\216\275_z\323=\010\376\277<\337\257\r\275\313\360_=H\332 =v\007\247;,\257\005\275\223\270\204=\376\253\241\274\310\3140\274\026k_<\t=\317<K\033\024>\"\000\005\275&\374\200<g\337?\274H\255B\275\254\304~<\300#\313\273\367.\246\275\214\236\255\274j\356L<\020\002a\275\r8\262<!7\242\275d\3275=D\363A=\025\264f=\304n\223=\207q\023=c\377\315;\303(c\275\374\2224=\005\224\265<\253\251\361<\357\303n<\001\207\355\274he\354:\322\313\207\274E\3519\275\233\227\020=\3458\214\274r\035\021\275\030\023\325\273\320\r\351<\360\234P<QQ\037\274\227\263\255<\335u\236<\325\n\223=\206\320\252\275[\225\210\273NCp\275}\005\371<6\232\334<y\230f\275($$<r\t\006=\247C\244\275\215\243\225\274\226\025\265;\326\177%\275\337\315\036\275\272\027\004=\237\345:=\240\023\022\275\351=E\275>\030\330\274f\235S<S\366\226\275\310tG\274\344&[=\003\035\023\275\350w\235\274\023\263\033\274\035cW<\267\313\005\274\005@l;,\236\273\275\257\331\327<\004\333\244\275\373\002\360<1\360\260\274,\330r\275\002\206\313\274\336Q,\274\204\362\336:\217%\231=x\031\031\275<\027\300\2730\342\264\274\013\247S<b\335\225<\351#>=\256\356\217\273Y\366W=`\377\313\274\241\302L=t\270\211<bJ4<\000G@<\361W\220\273\316\236\223<\270\001S\275\023L\205<y=\365;\204\311\245=\251\210\207=\031\224\035\275\365i\006\275z\217N\275\346w\034\275\372\023p\274D\373\320\274\367\224\014\273O\031\244=\344\251\001\275B[\321\274\034\246\334\274\322\224\323\274\355\307\363:#D\302<\030\350\250=\016\033w<s\035\231\272\003\237\006\273\357g\354<|\223s\275\327\241\t=.Z\265\274\251\002r\274\002\235/\273\310-\231\274[f\273\274x\013\257<\213\312\340=\177=\317<\027U\260<I\342\300\274|\026\270;b\364\300\274\377v\031<\245\\Q=: \270\274\003\262\204=5\275B<\203\200\366\272\311\300o\275?\342\244\275F\261\005\274\357\224O=\350\322\250<\223$c<\247z\037\275\336\216>\274\237\035\326<\322\214&\275\233\022\035\275]s?\275\250\316Z\275T\013\031=\204\251\222\274\014\273>\274\340t\340=\036~L=WX\236\275\\rp<#\312\264\274;\257b=1F\225=^\232c<\001yF=R\255y=\243X\220\275X\\-<\036NS\274+?\221\275\2531\014\274;\325e\274\037\213R\275\345e\004\275\217=H=}\002K\275m\230K=\216A\275<|\360\305<>\227k\275\330\t\200\274\211\361\227=\034\346\325\274"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/concat"
  op: "ConcatV2"
  input: "lstm_1/Const"
  input: "lstm_1/Const_1"
  input: "lstm_1/Const_2"
  input: "lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/read"
  op: "Identity"
  input: "lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/zeros_like"
  op: "ZerosLike"
  input: "conv1d_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Sum"
  op: "Sum"
  input: "lstm_1/zeros_like"
  input: "lstm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_1/Sum"
  input: "lstm_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile_1"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose"
  op: "Transpose"
  input: "conv1d_4/Relu"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1/Shape"
  input: "lstm_1/strided_slice_12/stack"
  input: "lstm_1/strided_slice_12/stack_1"
  input: "lstm_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1/transpose"
  input: "lstm_1/strided_slice_13/stack"
  input: "lstm_1/strided_slice_13/stack_1"
  input: "lstm_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/MatMul"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/MatMul"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add"
  op: "Add"
  input: "lstm_1/BiasAdd"
  input: "lstm_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul"
  op: "Mul"
  input: "lstm_1/mul/x"
  input: "lstm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_1"
  op: "Add"
  input: "lstm_1/mul"
  input: "lstm_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/add_1"
  input: "lstm_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value"
  op: "Maximum"
  input: "lstm_1/clip_by_value/Minimum"
  input: "lstm_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2"
  op: "Add"
  input: "lstm_1/BiasAdd_1"
  input: "lstm_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_1"
  op: "Mul"
  input: "lstm_1/mul_1/x"
  input: "lstm_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_3"
  op: "Add"
  input: "lstm_1/mul_1"
  input: "lstm_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/add_3"
  input: "lstm_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/clip_by_value_1/Minimum"
  input: "lstm_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_2"
  op: "Mul"
  input: "lstm_1/clip_by_value_1"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4"
  op: "Add"
  input: "lstm_1/BiasAdd_2"
  input: "lstm_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh"
  op: "Tanh"
  input: "lstm_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_3"
  op: "Mul"
  input: "lstm_1/clip_by_value"
  input: "lstm_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_5"
  op: "Add"
  input: "lstm_1/mul_2"
  input: "lstm_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6"
  op: "Add"
  input: "lstm_1/BiasAdd_3"
  input: "lstm_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_4"
  op: "Mul"
  input: "lstm_1/mul_4/x"
  input: "lstm_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_7"
  op: "Add"
  input: "lstm_1/mul_4"
  input: "lstm_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/add_7"
  input: "lstm_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/clip_by_value_2/Minimum"
  input: "lstm_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_5"
  op: "Mul"
  input: "lstm_1/clip_by_value_2"
  input: "lstm_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start"
  input: "lstm_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "lstm_1/transpose"
  input: "lstm_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "lstm_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter"
  op: "Enter"
  input: "lstm_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge"
  op: "Merge"
  input: "lstm_1/while/Enter"
  input: "lstm_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1"
  input: "lstm_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1/while/Enter_2"
  input: "lstm_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1/while/Enter_3"
  input: "lstm_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Less"
  op: "Less"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1/while/Less"
}
node {
  name: "lstm_1/while/Switch"
  op: "Switch"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1/while/Merge_2"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1/while/Merge_3"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity"
  op: "Identity"
  input: "lstm_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul"
  input: "lstm_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_1"
  input: "lstm_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_2"
  input: "lstm_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_3"
  input: "lstm_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add"
  op: "Add"
  input: "lstm_1/while/BiasAdd"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul"
  op: "Mul"
  input: "lstm_1/while/mul/x"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_1/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_1"
  op: "Add"
  input: "lstm_1/while/mul"
  input: "lstm_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_1"
  input: "lstm_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "lstm_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_2"
  op: "Add"
  input: "lstm_1/while/BiasAdd_1"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_1/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1"
  op: "Mul"
  input: "lstm_1/while/mul_1/x"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_3/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_3"
  op: "Add"
  input: "lstm_1/while/mul_1"
  input: "lstm_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_3"
  input: "lstm_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "lstm_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_2"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_4"
  op: "Add"
  input: "lstm_1/while/BiasAdd_2"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_3"
  op: "Mul"
  input: "lstm_1/while/clip_by_value"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_5"
  op: "Add"
  input: "lstm_1/while/mul_2"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_6"
  op: "Add"
  input: "lstm_1/while/BiasAdd_3"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_4/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_4"
  op: "Mul"
  input: "lstm_1/while/mul_4/x"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_7/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_7"
  op: "Add"
  input: "lstm_1/while/mul_4"
  input: "lstm_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_4"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_5"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_7"
  input: "lstm_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "lstm_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_5"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/mul_5"
  input: "lstm_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8"
  op: "Add"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit"
  op: "Exit"
  input: "lstm_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/TensorArrayStack/range"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "lstm_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/sub"
  op: "Sub"
  input: "lstm_1/while/Exit"
  input: "lstm_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/sub"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5922225
    }
  }
}
node {
  name: "lstm_2/random_uniform/sub"
  op: "Sub"
  input: "lstm_2/random_uniform/max"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform/mul"
  op: "Mul"
  input: "lstm_2/random_uniform/RandomUniform"
  input: "lstm_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform"
  op: "Add"
  input: "lstm_2/random_uniform/mul"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/kernel/Assign"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "lstm_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/kernel/read"
  op: "Identity"
  input: "lstm_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "\3411\307\273S\304\237=\204\331\315;\337\272\253=\240\343~\274:h\324<\340\376\256=\237\304}\274\350\032==%\324\241=\255\272\203=\350N\223<\231\n==9e\177=\337q\347=\213\r\234\275S\317\347\274-\256\236\275Hq\272;\225\346\216=\\V\204\275\255\203\215\275\227\273@=\354\361\224=\333\356i\275Q#\300\275.\237\252=\256\000\t=?\274\203<Pee\273I\217\342<\"\241\323=c\253\253=\212\220\224\274\021\260g=O\031\025\274\220 E\275\344\021\332\275#\020\207\275\206:\223=\006K\321<\t\257\331=<Mf=\234\253:\275\323\3534<\345\241\363:\214?\006\275\256\037I=\212t\031\275gn\343\275\206\005\312\274a\266\301\275F`\365<\375A)\276\013\363K\275\324\260?=\r\254?\275\"\214\326\275\3632\037\275\330\322\257\275y\3643==\220\027=\375@_=\017\0337\275.\205V;\211v\020<sci=\t\351.\275(\3579\275\177v\035=\243\277\227=\234`\256\274\265\362\273<MH\202\274\350\316G\275f\305\342<\013\325%\275\010\376\\=\'\276\351\274\336\324`\275\322\262J=n\271b\275\027\232X=\223\257\245\275\333\343%\275\375\357\324\273\003JN<i\353\333=\247f\233\275\020? =&9\306\275\352\364\325<\002\230\n\274^0\r\2763Mf\275V\265\202\274\017\241&=\303J\213<\003\021p<\231\303V<\322\356\255<Kj\306\275\0249\327\275\006lN\275\214\326\025<\356\271\341\274\t\244\025\276]\2148=\304\013\234:ec\304\275\346\020\246=\366Cv\274\314;U<\374\366.\275\306x\234\274\022\265l\275\374KD;\303`i\275BE\026\276\205\332\316\275\\\250\037\275\307\243\205\274\370=\376\274\345\333\215\274\336\\\277<\244~\323\275A4\014\274L\372P\275\236\374v\274\360\325\277=Wh\233=\273K\017==\364\311\274=H\247\275\177\256v<\333\342\202=\007\005\227<;\343]\275\306i\274=J\264\212\275\n\226\235\275\\\341\277\274Z%\220\275-\005G\275\030\025\347\272\376\014S=\377\2455\275>c\033\275\272\033@\274DAu=\\\250\354\275\377i\224=e\337\315\274\234x\315<\336\324\256\275;dP={\375\305<\030E\326<\313\370\"\275\2262\211<\333\3169;\217\ne<\277\341\371=\214[\342=\244H}\274\3619\326\275\177R\270\275,\227\360\274\361\314$\275\357\032\363\274\n$\261\275\214\343\252=p\272\263\274U\233\361\274R \232:\311t\321\273\t\312.<\007s2\274\367\220\310;\220\001\231\274\201\002\210\274[f\206\275\304j\213;\300\230\342\274N\315(=\276J\372\272\010z\014>T\260k=\220\020\214=G\010\337\274`\021\376=\351\314\337\274Y\313\253\275|U\261<\274\271\220=[\251\005\275\211\024\211\275\024\003\301;x*\216\275\316\223\222\273B\014\235\275\204\321P=\247p\352=\247X\302\273\206\360\000\276\336Q\030=\344\"\335=\006\244\254\275\345&{\275llP=\3727\367<%\347/=\242\324t=\313\236\225\275\033b\351<P\264\223\273\35449\275\3614K<\202\312\234\274v[\277\275\305\347\310<\205\206|\274\341\203\264=\360\033<\275\016\260s=\266\216\362=\363\213]=\336Z\277=i\241\257;pg\224\273N\364\215\273?\337\214<\n\315\005>\026\371[\274\002B\344<\347\304};\320\306\006\275\356\261\241=*i\232\275o\340\305;\235r\001\275\335}\335\271\313\373y=p\3159<<\2020\276\241-_\276 C\277\275\\\362\316=\035\324l\275Z\3617=\340\310\251\274\241\247\233\274\270\222\236\275\260F\223<\210\1772\275\360U\242=0f,=\200M\357\274tx\325<C\272\007\275\340\327]=6\247\361\273\343Q\032;\262\360\223=\334\201x=\2349\305:\364_+=\034V\256<\267\232\226=@\245^\275%b\247<-\245\347\275\r\273\330=`C\210=\325\324\'\275.hk\275\262\235\242=\321c\354\273\312\3571\273\324YG=|Bt;r\3761=\365\004\351\275\304\266#=\014\014\323\273\245y\221\2744\244\026=\342\363\021\275gn\252=\244\tF<\226\261\370<\310\364\302<\341\024\241\273\353\006\005>\030C\215\275_\255o=C\030V\275\373[\234=rR\267\275\251\253:=\3723\222=\217\017\305<\026:\037<\036\351\\=\317\324\342\275\021\311\206\275\031A\213\274B\310_\275\302Y\022\275d\001H\275./\330\274?\021\236\274\243\331\336\274\307^E=\t\371\005>0\003\033=\233\227\231\275\035C\224\2743C\233=$N\007=)R\220<\362~\203=V\3061=\255\377\266=kc.\275\337\305\034\275\337\316\202\2742\244\210\274\313\"\002=\263\231\316=5\246\037\275\341oI\274]\316\323\275\376\001m=,)\330=\347X\302<\30511=:\367\332\275\313z\245<\362\n5\275n\371n\274\316\216\300\275\215\371Z=G\324\013\276\243\301\003\275\307&\212:\3671)\274|\370\"=d>|=\247\257\313\274/M\373\275\007\010\210\274\2568H=+\375%=\340dP\273/\374\347=\301\253\\\274\364o*>\335>\332=\3675\343\274\210\002\323\275\203$t\275\315\274\215\270h\225\225=\010m\307;F\240\315=~\224\n>H\325\275\275U\200\000\276\342\001\215;K\315O>\rAa\275LW\030>\327vR<\223\346\265\275\3672\212<\275\371]=\314oN\273P\034\331=\217r\n\272\326\270\221<{\301D\274\254\003L\275\177d6\275\301\t/=\"\206\344\273\\\246\255<\001\303\345=p\031\301=\016\270\262\275y\332\024>o\014/\276gH\002=\357J\342\273\306~\201<\340\007\256\275\356\343c\275O[\201=\227\257\215<\331\342)\274F\337I=q\300*\276u\226\024\275e\003\207<\2078\261;hJ\020=?\216\321\274\306\257\260\273;FX\274\003\376\222=6\377g=\"\216\241;\024\023,<\252\267\r\274\036\2137\275\024&_\275E$\004\275A\013\310=&\321+\275\205\016J\273\204/\n=\'v\005\276\276\244\236\274\200\005\231\275\033A\\=\354\224\233<U\207Z\275Egl=R%I<\337\321\t\274\202\2258=\226\336\362\273\202Cy\275+\317\031=\200~\220=\262\326K=Y\204\207=\210\035\005>\026\005\352\272Ti\242\275%3\230\274\257\300\217=\302\030\213\275\241\220f=\372\245@;\265\261J\275\267!\226\275\242{\333\274\235\226\224<\035B\324<L\301v=FZ\206=\221\273i\275\275\232{<\245#\025\274n\332<\274V\227\'\275\304\023\341=\371\034\353<\346\205\031=C1>\275\316\324|\275\362\215\214\2747N\224\275 \235\201\275\005\213\246\275\274A\323\272q\257/\275\037m\316;\274\343\201=\"C\227\274\233N\357\274\213.p=\262\305N=\000\205\031\275C\331\370=A\023\204:\323\340\n\274A\301Y\275d\n\177=\267\000?=~\232\242=\221\246\312=\031\346\212=\303\225\264=\273>\252\274\216\t\314=\202\251\351\272\214\376\257\274u\351]<\362\003\311\275\036 \000\274L|m\273\313 \234\275\327W-<\374\211#\274\304\217q=O\353\001\275\267\373g\274\261\347\375\275\"\177\177;X\201>= \253{;\002\332a=\222>\260=q\337\275\275\260\203\214\274+\262\220<&c_<\267\014\025\275;[\362\273x\365\016\273\231i\363=\245\232\240:<\333\377\273\376<\017>^,\212\274\227\214\331<\r\277f=g+\006\275Xv\336=\244V\204\274\316\237\212\275\301\354\361\274&0\217\271*\341\370\274\'\371X\275T\344\231=W\361\215\274\323.\020=\240Yv\272$_z=w\327\256=\364\326\266=v\303\352<\3166\356\274oE}\274l\331\376\271\246\337><M\377\213\275\274\324=<C\313\001\275\273N\271;\300O\033\275\215g\232\274\016\036\231\274\022\262\345<OH\271\273\006\277\260=\266\222\250\275\333t\\=\370\303\370\274\231A\307\274\365F\246<\336\205y<G9\204=>I5=<\373\274<\351\203b\275\0012\033\274V\003\362<Wk\031=p\3649\274U)\214\274-\255\331=\331\013\327\275}\356\254;U\216\213\275\307=\017=&U\263<\334`\364\274Fx\337<*5)\275\364\232V=\322\256#\275\246\255<\275\244\314L<\337\362\241\275\021\211->\275,\312:\325\335\237\274\037r\302\275\'\240\373;\334\335\330:\2563\337<\234\300>=\246\201\355\274~0D=\335\3066\2753\374\313<\240\352?\275\327\034\324\275B\234D\275\220\246\362<5\345\'\275\222\350\007\274\356\326\023\275\217\271\335\275\216\220.\273i0P\275\035\322\201=XJ\017=\365\353\362=\212\314\246\274[\344\016\274\306;\004<9,n=\246\274\256\275\216\276\351<\\\220r=\263\336\237=\022\343z\275\203\020e\274\231\002\027;\375\"\034\275=vd=7rg=tY\243\274\t+\274=8\251D\275\265n\031:\337#\237\275\356\022\300\273\206\346/\2745\027)\275p3\270\2752\n\005>\343\311P=n\220q\275\356{-\275t\340)\275\232-\373=\233\225\r\271+H\357<\031\323\026=\2714\362<a\363-\275\317e\327<N\254\037\275w\270\231<\205(\224=\030\242q\275ms\213=\320\315\255=\213M>=IS\220;*Ge=\002E\307\274+\274\233\274L\374\037\275)@\341=5T\327\275\241\364\346=\002_\315<\270wF\275<\t\273=\371j\242<hW\357<u\027\351;be\363\2755\r\213=\357\344\027\276\247\375P\275F\237U\272Nm\270\275k\214J\275P\226\374\274\274\346\241=\"\341\026\274\321\215R=Xua<\214\005\030<\254F\331=h\365\241=\217]\004=\014;L\275\244f5\274z\316\206\275n\231T;\246\330F=|\315\230\274\270\000\216=\232\223\206=\236\345\335\274\266R\230=w\205)\275Q\275\274\275Z\262\'\274\002\213\365<\003\244\335\273\013\334c\2754\376U\274ep\362<\025d(\275#16=\333\351B=\354\216\256=PS\313=ci\030>\005ZH<\301K\244\2753\225\304<\374\203\256=\025]\222\274&\357\317\275\266\247\216\274\255\016\n\2751\032\021>\005\035\020=\244z\007>A\2722\273\212\226\344\274\372\006\273\275\322\263V<[\214\314<\214\025\253\275\177&2>\353\350\244\274\244j\202=\364\252A\2754\026\352\275}\031\026=\307\333\230<R\262\006\276zk\222\275\204T\271<\'\007\031=k\244\017=\227_c<\364\377\010>\346\356\200=\261B\251\274dGN\275,M+<t\332\214<7\330\312=\341\020\004>\016\325g=r@\237<\002\217w\274\256\006J\275\357L\205\275\355\257Q\274F\225>>tF\240\275+\032W=\254\311\200=\206?\373<}\216%=\276\302\205\274$\350\335={r\350=_\231\372\275hTf=\344\302\337\274G\261\014\275\373\2563=\262^\"\2752\317\222=5\013\022\275\365\330{=f.\226=p.\263=\0334\313\273j\2700\275\307`\215\275&\304\021>v\373\017=\0305.\2751\035w=\353\356\226\275\362\306\302\275\010\310\342\275\'\237!\274[\314\242=}y;=S+_:\322\243\210\275i\005\250<\232~\305\274\332\315\021\276\030\226\213\274\237\022\370\275x\342\262=\310_\264\275\264\350P\275L\001\252=}\360!=\026I\336=^g\022=N\350\002>\352\tT\275!\t\265;\233Y\356<C\247\360;P\370\251\274\247p@\273\232\013`=\333\032\003\275\010\206\253=__9=fa\336\274\214^\204\275\010\\\r\2757Us\275\027\203H<U\320\223\275\321\205\322<v\243\177=\206\256F<\260\025\247\275/v\237<5E\252\275o#6=\365\226M\275C\226\024\275\272\357\017=\224\322J<\027\342\311=3\302B=\001\251\200=\350\216\237<m\005F\275\253_\230=\253\257a\275h3\375\274\336\362\212<:\250Y<<\233\243\271\331\322\362\274/\214\037<\374\342\263\275\3324J\274\250\035{\275V\224=;\306H\220\275\377\345\200\274\232\002*<\2271\202\275\274\217\206\275\201\"\006=<\332\351\274\311i\245=\271\0374\275\034\303P\274\350>\344=e\254\371\275\247)\204\275\354\nT=\033\005q=S\232Y=\224\312\253=T\300\203=\343\365\304\275\223f\275<\301\317\203\274~\271\206;\205|\207\274~i\235\274\001\276;\273\232\023\377=\351f~\275\237k)=\275\203\315<\251~\245\275\032\374\372=\006\010\374=W\355K\275\360\241\332\275\267\250v\275\255o\224\274\244 \035\275h\225\247\275K+\207\275\001\337<\276\\br=\244\311J\275u\256p\273Y\322\353<\337N\353\274 \346\260\273\321T\201=\351\006T\274\n]\336\275\352\325\n<D_\252\275l\346\342\272\017\026\303\274=@7=\241\204b;<\366j=i\202\253\274B\341\312\275$\367\373\274\tZ\303\274\257z\004>Z\213P\275\343\251\276\275\235?\230=\271\244\332\274\260S\364=\376\"\017\276\202\032\366=\261\326\356<\037\351\035\275gNk\275\260\n\262<\342\272\376=3\031F\275\332\214\213\275\003\207\025\275\023b\007\274\322V\206\275\210\001+\275\214\370}\275\360:\257<\273\262\004=c\206;\274CY\252=\213\013\316=\026\346\024=\030\177Z=\300\214\212<)\231\n<v\316\333\275k^-\275\241\016\035<\344\373\273;JX\000\2761\207\233=\236\\g;R\226\230=\201w6=\037\004\007<@\024W=\032\364\003=\256\356\270\273\274n\361=\254\342\242\274.^\343;7j\270=\'E\242<\021R\013<\356%s\275\241\307\020=\317*\'\275\001\024\347\274\021r|\274Z)e\275\254\201\016=G\241\301=\301\351\322\2758m\241\274Q\265\274\275\367)\373<\0105\203\275\200\327\365\272\264\243=\274\016\206\274\275\371\033\342=\'\221e\275s\376#\274\322q\214\275\256\313\036\274\343\251n=\261\2437\275\316rt\275\203K\337<,\262\316\274*\023\232=k\021}=\227\245\245<\205\337\342\274p`\334\274\241r\203\275\253M\r=,\334\014\275\347\267\362\275\361J\224\274m\014\327\274\3639<\275\223D\276=\'\321\261<Q\330x=\021\025\034\27672t\271\375w\306=\255\376e=uL$\275|\377\033=K\354:<\003\275\002=\253\235f<\010\345\256\273~\253}=\004s\000\275z\035\351\275Q\347\221\275@u\237=\256\345\027\275\261\200\026\2766\213\210\275\261\016\324=\365\336a\275\232\275\032=S\224\267\274\n\243p=<\334g\275\363\032\222=\211\315+\273\345\363\222=\245\344\231<\3556\013=w\017i\275\356\325\307<\307\322s:^`\200;\304\346\211=\305\202M\2759\304\001\275\327\237\333=4\363\301\274\305\322\206\275\336S\352;\027n\331=\034\333o\275\371\301\277=\250(\357\275\320\240\306\272\261\361\361=e\2567\2755\221\316\274\032\305S=\264<\314\274\300\266\310\275H\227\323\274\310\t\027\275\301Na<uRN\275h([\275\273;\177<|\307J\274\315\000\315\274)\364F\275\213d\232=\337\275\311=L\3665\275\226J\032\273\324\363\241\275\232\031\216<\233\223\220<\211\263!\274\3411\307<?\357%=\023\273,=\215O\t=K\330\305\274U\227\000>Q\227Z\274\014\311\002<\'\317\327<\321\273f=+\021\252\274\007\373\t\274\035\242X\275\022\234\312;\226`\n=\301\366\210\275\232\320\023\275\205\352C\275hU,\275\371\210g=BT\324\275\371{>\275\357\235\t\275\233\215\257=wn\214\275/\000v<\273I\330<7P\255\274\202M]=Cd\256<\013l\'\274\217\016\267=:\374X<DV\001>w\006\002\273\203u\030=B\\A\275:\376\202=\200I\261\275xE~=t\226\t>T7\320=\302~}\274/\232\352\275\022C\362;/\007\263=\365V\031=H\327z\275\241\327[\274\355%5=p\032j=\223\016\306\275\220\232\367\273\007\264\262\274L\206\025>\203\r\241=\342Ve:\260\367\333<\237\321d\275\360\224\326<f~\362<ry\245=\361S\233\274K\005-<\202\001\207\275\r\352\263=\216k\260<l0)=\031hl=\217\353e\275K-\222\275h8O\274\362\263\316\274\241\304&\275\306\352\016\276kL\310\274u\031\361<\336\275k=\343\n\242=\322X\216\274\237\242\342\274\362\271|\275:\315\317=.\334\020<\271#\222\275\037\2637=g!\240\272\352\200\266\275;G\300\275v\325K\275.\307\002\276Q\220\320\270\371\227C<z\320a\274?\016\027\274\343\007\303\275\240bY;:=\273\274\200)\233=\021P\252\275\237\003?\275\255\264\215\2746\361\271<>H\356<\277\023\361\275SB\215\275\260\317\314;-\240\312\275\205\372\305<\213\327\240\275\306~\010>\240\t\035=uR\313\271\350F!=!\233\206\275\253\233\024\274\001\"\346\273\223\271\260<\n\346\374=X\204\013=\326i\"\275\255\340\317\273A\201\004\276\n3\361\275\321\017\023\275\\\306\300<\250\356\271\275H\354\334<\271\254\363\275\304{\r\2764\375\373\275rG\n<\211\351\320\275\177\345\262=\342\017_\275\303\260\251=\364b\033\275\323L\215<\371\212\235:\265\017?\275\336p\377<b\200K\2749\036\247=V\272\236\275\261%\002>B\036K\274\222\205d=H\r+;\247xD=<\244\317<\305H%=\017\023\251;~\216\007\275\237K\000\276\033\316\270\274<\027\324\274\036_\002=t\026\332\274g\303q<\036\252 =\242\303\025\275p|p\275\030\356\256=J\'\362<\356\316.\274\006E\003>\235\277\352\2748\266\r=-`\347=\350C\240\275)\325\255<\000\223a=\203{\276\275\323EE<%\221\037\276\233N\312\275\210s\027:\3259&>x8\t\275(\334\245\273k#\376;f\177\033\276c\317\036\274Hh\230\273v\005\034=\334\272\306\274mC\267<\276\2371<,]\357\274\366A\362<\243\200\004>\"\360\270\275\375\245\257\274_\261B\2754S\004\275\177\313\243=\3058\357\274L\312}\275\014fe<\271+i\274\275\217\251\274r[\021=X\001w<\366[\016\276\342\367\260<#\034\335;\327C\022\274\225\320W=O2m=\330\002\246=)\342\177\271\314\201\220=\025\003\316<\375\026\010=O\374_\273\345\021M\275-\005A;\312\327\271=\"\322\245\275\300^;=\304\306\273<\002\324\206=2\330b\275(_x\275P\306\003=\312\005\223\274`eE=\352I\021<\247(\\<\273gj=\350&.\276\310\363K=d\177\225\275~q\336=\345=H\275\336_\033=\304\247\205=\343\305B=S3\017\276\263\264\203\2758\325\261=\206@\230\274P\210\302<\361\320\362<F\t\310\275Ai/\276\245\204F\275\363\004\220\274J5\302:[eO;\355\246\277=\320\321\236=7\271(=\3004\272=\374\020q\275\332\276\016\275\212\356^=\345\276\310:\355\233\276<b\203*=a\021\230<B\326\342\275\322\313\332=\330\014\312\274\004\356\304\275\274\202\345=\312wC=w\224\234\274)\023\274\275\302=F=@\262\341\274\023w%\275\245P\010\275\017\200\210\275;m\036>\250K5\275\200+?\274\324\n?\273}:\203<Og\270=\363\006\033=\272\376&=\305\016\320=\250\020\024<\223|\032>Pn\t=\006\020\322<Hi|\274B\025\007=\205\365\216=\217\261\033\273^=\306\274\014\321\205\274*\201\022\274O\231\035=CT\265\274mm\230=+\"\277<\203\"\211\275\313\243\327\272\313;\262<\345\026\260\275?\260\210=*\363\243\273\'\3012;\224\235\312=\201\037\000\275\353\252\260\273r\266\215<Qo\205\273Dx\264=\'\007\330\273)\'\310=\264*\313<\224\343\025\275\255?\257=o0]\274aB5\274\240\004\341\274\367\274\004\275\330\211\273=\201\325\207\275\220\340\335\275\025\372\246=\037\205\364<,R\201=x\316/=\201\223F=\360\034\336<\275\376\3028\376\276\205\275\2567\335\275\377\210-\275\272\362\343=A\274\242=J*\333=\217\215\237;\020\010\343=\331\"<\274\325\363?\274\'\321\322\2750\014a=/\343O=\355\032\261=T\020Z=\330+q\273\'8e\274\230\275\027\275u3\243\275z\030\260=\326\021C\272Jf\207<\026p =\366K\003>\227\216w=\032B\211<\215\353\035\275\355c\254\275\017w\005\275[Q\231\274\375\320\206={%5\275u3\303=Ye}=:Y \275\r\364\215<\323\364\315<_P\366\275\357\321\216\275\350m\226<C\216\271\275\346D\002\275\331\360V=\203\371\233=\225\324\365\274\344\227\"\275Ee\273<\246\024B=\326|\036\275A\276J\275G#\r\275\324\006\013\276\2040H\2750\021\212\2752`\246<*\">=\355K;;d.\320\275;\032\306=\2668\271\273\350\202\256\273\343\322\270\275\241E\310=\250\211\203\275\342\214\374=\273\270\030\274v\302\210<\206^\231\2756\310P\275\005\343\177\274\024\221\310\272\035c.\275\262\320\371\275?m\016\275\213U\'\274z<-\275\246Y\035;\371\220{=\224%\367\275\217E;\275@\356\004;\254\262\253=\241\2137=\331\014I\275-\031\347\274\374A\271\275\307\\\354\274j8\227;\231 \202<s\271\320=E\337V=c\223\022\274k\317\021=%\222\n\275i\346\205\274\362\344\r=\217k%=es\356<b\363\236<\t(.:\r\341\001<n\034\352\275\204\236\207\275\217\201\223\274$z\315=h,\261<\317\241W<\014M\211=\373e\025\275\246\353\243\275~\t\331\274\245\221\036<$\017\353\275\231I\375<\342\316\335<\274Ps\274\213\330\005\274\320\213\275:\264\300\023\274\357l\032=\242C\246\275~]\027<\205E\203=\t\346Z\275\330^\037;\025\315\246\274am\352=\343\322\031\275\272\262\376<\374\320\204\274\007\216T=\026@\262\274uB\t\274X\2113=\314\316\350\275B\363\234=K\230\212\274\212\322\200\275\301\234\032\274\373\316\t>\360\333\201\2745_\333=\341D\236=\265\020\216=Lt\232\275\232\255\014<T\231\'=2-\205<\200\300+\275\026\000\205\275\213\001\271\2756\020\300\275\241\000\242\275)\265D\275}j\334\274!\303\203;\330\212\036\2757\267-<#\206\206\274\002\223p<\211i\267=YQ\240=\263\240\177=\310\375&=\'j\243=\024\273\021<\271Yp\275J@\024=\006$\314\275\226\025\275\275.\332I\275\2415\025<\025\374J\275Xp\304<R\220\277=\225\367\347<\266c\221=\017#\000\275\226dL\275\032]U=z\014s\274\265\004%\275\325r\233<] D=\272<\003=1\024\217<\n\017#>K\322\351\273\230\274_\275\265g\273=V}\202<\017\3137:\374 \307<\020\325\034;\2448@\275]\"\277<\212YX\275\3737\234; *3\275s\334\310\273\270\\\\==\330\005=Rua=\207<\030<]\\\360<\315\003\032\275\213\001\372;\002\333p\275B\261\316\271\014\013s:sd\223<\343\n\211=\016\006@=\276\351:<\253v?<\252\347L=LK-=\205\331Z=\027V\251\275\320\t\342\274\234;\004=\357>\003\275\323\304\200\275\243\024\256\275\006\261\315\275\221\277\202=\261A\301\274K\272\333\275\n\'\324=I\364\177=\r\265\251\274T2\350<\034\376\357;\321\325\224\274s\253\027=\032=r\274\022K\303\274\275\373~\273;7\267\274\314;@\275\320A\304\275\034\2379=\r\t\201\275\217\246\'\275?\237@\275W\220\361\275\367u\222</#\304=\350E\035=\225\036;=\333Ll;y\361p=C\226\021=\250*S<\334L.<\001\210\n\273O\257`<\034\205\035\276A!\002=\t\372)<1\306\037\276XE<\275\222)->\254\377\326\274\207^t\274\207 \316\274\017X\255<\325\202\007\274\266H\345=\006<\210<u\246N=\212m;=\023\277u<\202\214\n\275\311oI=\326\000\270\275\034:\353\275#\r\000<+[J\275\224\306\'\275\247\031L=\304\t\307\274\023KH\273\370\213\310=\301\353\n\275VI\273=n\267\017=*]\305=\'|3\275\006\256\227\275?M\253=\301\377q\274\264V\221=\330O\323\275\335\265\327\275\034\273\253\275\331\024\214<>{\261:\373\372;\275\201\314{;Z\243.\276e\261\265\275\020\217\n\275\317\263i\275\274\354\255\273\271\256\241=\240\245\273\274(\010P=\007&\205\275\233\362H<\272\032\356\275\274\010\256\274\366\037Q=@\010\221\275\274\005\036<\372\333\320\275\024\375/\274\206M%=Y\347(\275\313-\014>\211\253\347<z>\361\274\301\341\327=|\244\277\275\035CT\273\323\232O\272\307\231\363\274\203\205S=\034\257V=ZH\265\274~\310|=\364\310\207\275\320\023\242=O\343K<\362=\000>\343\001a:\000du=7\2703\274\010\272\206\275\202\203\362\275I\217\031=\204\266\333;\302\243\331\274\030.\200=\223\277F\274\370\366\262\275\222\247\227<\310;\026\276/[o\274t9\253=`z\206\275\217\024\022=J\254l\275\274\332\274;\226s\003\275hce\276\271\001\236\275e\331\355\275-\3627=\274\216\034>,.\274<{;\237\274\r\232%=\360k\275\274N \035<n\230d=\343\t\032=\241A\014\274\261!1\275B\277\257;F\004o=\034\364\372:\347#\331\275u \025\275\300\300\'=\030\375\213\275Qj\276\273\035\300\317=\217\2447<\312\223k\275\274P\312\274j/\364\273\204\333\246\273\231\367\300<\255\021\n\274\017\271=\275\230\302W=\235\335\007>\344\016\216<}\256\352\274\370\016\324=H\215*\275_B\367\275\223\332\271=\263\314\021=\355\243\267;\332\341E=\365\376\014\2751\310\001>P\032\002>\236}\323;&ZE<\200e\004\276\261\221K=\223y\023=\014\004}=o\200e\273\327\202k:\235\025Z=H=l\275o;\000\276\341\234i=\033\374\204<\252}\021>C{0=#k <o\230\364\274\n\2710\275\321\326\324=\262S\230\274\371\250\225\274\261j\031\275-~\005\275\0305:=x\263\275\274\310\001\250=c\330\301\275MPc=\271\352\245\275\261N\247\274\212(A\275\344:\331\274\324\356+\275r\013M\275\357M\252<n]\022\275\215\330\373<\013\025b<\327\"\263<\314|\201\275\007\333\321\273\343\320\t\274\262i\317=I\207\300\272/3\206=\376Y]\275\377\245\207\275\374s\007\275\236j\363\275\362\306\345\274.(\224=\243\210\253<\021\323\017\276\351\237j<\014\317\271\272\276@s;5\306\254\274*1c\275e\202\226\275\270#5=\316P\222\274\213\276\303=\002\030];&\006\003\275}2\213=\007y:\274\020\0229=\316\257\300;~a\235=\326\005\004\275-x\003\272<_\255<\231\303\221=\344A\005=Y/8=\216\314)<\010\255\214\275\010L\302=&U\320=\252\366\357\275\320\016\020>\203\004\303=\213&\336=\275?\031\275\374q`=\207\002q\275\241\266-<\026\253\312\273\276o\273\271\275/\375;\217\265p\275\031\314\372<}f\311\275\0069\225<K4\341<V&3\2741\320\022=\033\0238\273\364\354*\275\302\250\260=\273c\221=9\342\374=\t\204\004\274\036\312L\275-4\301<\233\232\036=\307)\024=Q\2568\275I?\036>u\345\007\275i[\273\274\226\247\231\274\351u\264=\253\260\255=K\275\374\274\2032\021=\311_\006\275\r\024\\=\266\017\310\275\211\272x\275\264p\034=x\312\354\274\342\2249\275\036\254\231=8\351\231\273\030yg\274\243G\"\276\214\231\002>\346.\335\274j\372\214\275\227Yn\275\024\033\207<\017O\255\275z\355\021\275I\323\371=S\017\201=A\254\223=\"^\005\276\212\330\235=\342\021\204=\341\247t=\230c^\275\234\272\020=\211Ho=\200\261\201=\"\2604\275\342\225\275\274?M\005\276K\236\006=C\\\r<?\313\235\275\355\203\226<\342\267\261<\360m\323\274<\004\235<\031\204\010\275G-\316<\247\250\371\274\325\223\310\274\246W\005=\222\202\232;\356c\241<\2439\233<,\236\325=s\323\310\275\310!\270\274GO\247=>\271\262<\367q\204\274\326\217\032=g\360,=\0323\222=\362\261\226\273d\275F\275.\001\340=\020\243\000>\246fN\275p\"\231\275g\256=\275\340n\256;v\254K=[\332\201;.\t9>\323\211]=\260A\004=\004o\001<\242E\220\275Q\247\215\275dC\347<\305e\323;\263\370\323<\206Q\204<\351\341\307=\377\264\000>\005\302A\275}\'\264=\376\265.=\030\035\227\275\030\244\316<\2405\215;tp\274\275\023\003\000\275c2\203\275\255\256\220\275\203\2353<\213}\313\275f\361\247=\t\237\344:\226S\243\275\264f\027=\354\360\377=\237/\250\275:\371\306:dp\013\275R\343\246<>\375=<\r\325\323\2758\240=\275\242\325u\275\344\2303\276!\252U\275\003E\317\274=yr<\375\303\025=\306\241@;\356\233\007=\202\"\270<qb\006\275\337(\277\275NnG<m\254\003>\210dF\275\226\000\266=\242\301\214\275x\"\201\275(K\203\2755\217\241;\324\004\340<\021S-=\n \313\275&9\304=q\315\263<j\2005=\013\202\000=\264\367\334<\034\334\246\275\356S\220<\214\001\207<)\333\216<8\317\332=\325x\034\275M\007\266:\325\3248\275\243F\247=\004\355\310\274\356\005\021=\010L)\275$\375\206<C\207\253=)#\310<\004&K\275\377\330@=>sB\275\306\022\204=\215cf=\232\321N<\006\230%=\032\r\033\275\332g\241\275\340\253[=\010\256\241\275\354\262\225\275\320\331(\275\036.P\275/\227)\275[w\341=\362[E=\3556\356\273\257\000g=]\361\225=\352q\271\274\001\265\356=\306\304B=\376\242r=I\245x\274\230\314\022=\213\306\371<\026\017\217=\034\353\332\273\257Wx<\327\017!\275m2K\275}b\001\273\353\347\314\275\252\350\251=\277|;<\302%\346<\231e\302\274\361X\004=j2i=\337\321\014\274,\213\362\275C\261\262=\251]\243=a\324%\274\376\270\336;\364G^=C.\244=m\372\022=M:4\274\030!\222<x\210p=\200\351\033=X\257\002<a\016\234\275\372\375\260\273>\332\016\275?\t\031=\2414\217=\342\224\024\274}\027a=\014\305B\275\310\342\224< \214>=\224\340{<r\361\274=V\340\206:C\323$=`Q\272\275S,\004\274\226uJ\275\265}\313=\366\305H=\230|W\275\264\037\236\275\272\352\203=D\306b=Y\241\204<\264x\225<\242\262\035>\307(l=\264\337\303\275\'T\244=\337\260\016\275e~\331=\270\301\323\274H\327h\275\363/\021\276\235@~\274\356)\204\275\233\235c<\211\r\251\275Y\020\366=I\372\023\275\376\237\214<Q\227\260\275\355s-\275\001\031\350=\307\332]\2752\245\302<\303\210\322\274\006\250}=\002\347m\2757\262\217=W\037\217=\374u\326<\033~;\275&\220\343\273\2228\232\275\271\027\253\274\024\302\320;\207\024\025\275\227q\231=\001p\023<\216\306\255\274[\"P=\331\204\345=\017\305\210\275/E\213<\230\375\266\275AP\312\273X\275!\275\351Z*<l\263\304:\246\341\213=v\364\302<\021\226\306\274F\022\316\274m\333\246\2746\342\243\275(\222C<\261\262\252<S;}\274\203w>\27554\265\275\353\342\261\275\350E\035=+W\357\274\226\311\373\274\203X\025=\014\266\212\275\307\3032=\356\221\272\275O\020#;\370\374\004\275\350\345/=\205xf\275\007.v\275\'\277\303\275\007\232&=\303\t\034\274x\232\242=}@\215\275V-\232=\020\031\230<\201.\001=\010\374\275<J\262\300<7\323\013\275\026x\243=\277\336\003\275$g\213=\366\357f\275\332d\257=\345\235\352\275\212:\213<|+)=\336\225\024\276\3454\322=d\310s=bO`<\362V\006\2746\032\305=\227\374O=\223[\241<$\252\366\273\350\325\322\275\021\330U=\037\207\222\275\303\305r\275\275\2258=\344\244\002\275\345\344\366\275\234\036\021=\006\373\022>F\017\253\275\247l\211\275)pv=\364/n\272nH\261;\020W\362<\240\027\313\274\341q\222=\262\030\371<\224\023p<D\305\033=$P!\2760\341\360\275\025n\004\275\t\370y=W\311=\274\306a\273\275\344\361\006=>\202>=\233\232\222;\244\217\245</\260\321=\300\323z\275!\250N\275\005\320\253\274y\210#=\321\226\213=Y\271\337=M\031k=6\013\243=3\003\240\274\335h&<3bU\275\020\306\000=\216\226>\2748sh\275\013\t\031\275\r\353r<9\305?\275(\336\257=\364\'\035\273\\6\023\276N\001\223\274\365B\304<[zk\275K\312\343\275\334\302\007<\020D0=\316\343z\274\317\277\r\276\372\303J\276\035Y\010=K\006\266\275\300\325\203;e\217\341=\267\236\016\275c\201\376\272\233\376\255\275\027\020\361\272 ^\217=B\363\226=\244t\331<ETY\275\020\310\346=j\037 =\201\244t=)V\006\275\367JA=\343\353\367;\016F\306\274kC1\275\031\261\376=\177T\302=I\322\255\275[\244U\275\022\210Q<\024)1\274;\223>=vv\232\275\376vx<\254k\203\274\212U\325\272\\ot=\027\037n=,\032X=t\201\372<\235x\370\275\230VV\275\351\'\267<\342\301*\274\030mH=\270q%=\357\2357>+\022\205\275\240*\365<Rx\312;\006\252\206\275V\364K\275`\242\202\274\322\212\000=\305\177\317\273\277+\001=\307v\013>\262\031\266\275\027\354\241=(R,\274G\347\205\275\026\036x=\266\317\264=b\354\006\275K\251\214\275\343\302\265\275\333\244Q\275\337\337\267\275\017@<\273\004)\000=\020\207\321<h\332]\275\017\006\375=\244\346\247=\020}\001\275\323\222\207=\030\257\322\275\337\244\001\276(\217\326<[W\312\2754Ki\275\177\000\002\275\335\256%={@\223=\316\020\017\273\224g\214=\020\211B= 4\024=\204&\245\275\004\333\'=27f=\313I\000>\371\'\244:\034y\020=cM\212=\022\341\236\275\220\nL:P\303\330\275\320\337N\275\300\025\007\276\257\334\233=w\0353\275\271h\232\275\313\351\224\2752|\220=\210\232\3659\327a\241=\232+\347\274A\325z\275\035\246\005\275\331\255\254=n\304\205<\216\267\004\275\307U\027\274By\207=\252\310\355\274\241\222\243\270r\365\211=\257yt=\021\277\255\2754\253\225=@9\226<\231\322\233\274\335\360\302=\316mb\270\335\341q\275\374O\212\275\274\234\017=\350m\013\276B\023\247<\245\014\251<\031\366\216<\3740\023\275\204\331\327\273B`\213<\201\325\036=\357|)\274=s$\272K\276\246\275\003!r=\317i\002\275\350\022\274\272a\350\215<irl;\370\275\301\274tH\201\274=\'\242=D\201\017\275\216\321\"=\342\211\357;z_4=\275S\t\275\263h\264\275\216\225\260\273z\214`=^\204\345\273\271\350\225\275\235\3550\271Yn\031>\305\222\242\275\0334\305\274E\243\317\273\ts\315\275\271\t\237\274\310\316A\275\340\'\262=\013\246\343<;s\001;J\310s=\245\356\230=Xg\227=\326\247\030\276h{\304<\340 \364\274\207\2152\275;\"u<\265\212\317\275\341\003a;\021\017\223\275\350\033\306=\016\000\347\274\351\225\230\275\263D\322<\264\\\341\274\303\360U\275\020|#\275*\361\261=\035\203\245=\357\270\345<\373\376\205\275{\003%\274u5\221=\016\001\022\275\177\362\240\274N\270Z<\376\021\347\274\223\201\314;\3668\331\275\250\026\300=\303\250\261=\330[\347\275Z\343\022<\337\001\311<\242\027s\275\030\017v=\317\315_=\374\032u=Ig\366\275\354@\"=\"9\344\272\n\035\324=\212-\033<ub\246=\001\247\276\275\322\204x;\277q\t\276\327L\226=\353\356Y\275x\2072\273V\372%=RY\304=\271\024\223=\232\272<\273\\\260\032\275\010\345I=L\347/\274\010\021\033=t\303e=\324\351\264<\000\331\334\2750`\034\2762G/=W#\252=\204:\005\275f\331\036\275\037f\035={\241:\2757N\265\275\'\3160=\330?\004;\314\014\215\275\307\242\204\273\377\201\317\274\233B\217\275\032|\033=\266\352\r<\352\032\361\275Z\2652=G\350\004\276\375fA\274X\335\276<\344,\264=\261\327\334\274\333-\024\274\202{#=\016\316\263;5D\262\274\322\252\231\274v\rI\275\252(6\275!|\013\276=\276];\005\315\t=F\304\330\275^Zf=.;\004=\212E3=\241\200b;e \255\274J\311#\275\246;]=Y\236\275=Hk\r=\267c^\275\027\367\337<\035a\255=\252\'\240\275\312\253\270<\005=\201=\243\344\316\275\207\255\255=&4\004<\360\373\206\274\246\316\252\275\304?\343<\234\233\242=\037W\006\275%p\231=\t/\235\272\2642\022\275\2540\177\273\373\n\036\275roW\274&\022&=g\346\034>D3d\273\031\027\346\274\023\330\210<\204\323\305=?Y\312<,\032\032=\334\354\030\276\033\353\026\275\202\032\017\275&\022=:\207~=\275\251\360\256=\256\222\310=\331j\r=\224G\246=\204\335I\275\371\233\027=\336\024\023\275\277Oi=_\222\n\276\033\334\230=\275\273\353<~\316\010\275NQ\243=\3121\320=\275\214\244\275\234\233w\274\"k\t<\373x\021>3\337M\272\340!\r\275S\005\034=\034W\023=Hc\214;\221,\274=j\307E=\010\257.\275\010Tk<\007D\267=\r%j=c\r\375\275i%M\275\231y\034=\241m*\272\375\345;<?x\216=\253/\363\274\331\275\321\273\360\270\036\2742J+\274=5\020<2\274\225\274\244\262:<\264\347\031\274/\310\205\275v\217\331\274\325\367\031\275\013C\355=\"@\'=\321D[=\307\225\347\275\346;&\275\226,\027\275\362Ly\2756\235\217\275\364d\315=\037\355[=mw\004\274%gF=\256\371\330\274n\347\316=-\031\234<s\014\326<\237\312\005;\'\217\365\274\\\025\000\276Kj^\273Z\033D=\003g*\275\352\354N\275\307p\272\275<\300\030>X\r\205=\325!_\275W=\017\274E(\221\274J@\225=\211?\203=^\353\376=\312\313\001=f\315\345\275D\201R\275;\226\334=\364\333\236=M\032\267\275V\024\217;\264\343n<Yi\261\273_lP\274#\272\212=\342\273\035=l\237T\275zQ^<\327\275\324\274\357\370\306=\341\326\205=\307\350\273=\300\250\'\275T\222p\275m\236\234:\022\"\261\275\366\360\007\275\r\303\315\275\265\355{\275\375kl\275?\322\262\274\235|\017=\256\210x\275\'\252F\274\337\326Y=~\014\377=\362=\236\273,\330\226\275\217\036G;+}h<o~p<J]\212=\035\033\021=\006,\235<L\025\252<\007V#\274\025B\206=\237u\234\274\324\220i\273jse\272\367\337\270=zi,\274*\232\332\273\317\013\312<]\210\004\275N\213\254<\017\354\201<y\200L<E-R\275I,\201=7\307\245\275=e\317=g\030i\274\360S\030<\332\335(<\204b\345<\367x%=\325\365\305\275!\302\276=N\2375=m\267A\275\316\214\256=\243\352\262;\307L\354<\322\332P=\267M\r<\004\361\023=d\267p=\365\004>\275\244\035\020\276P^q<z\0350\275\304\030\322<NP\256<<f\346<b\265\017\275\373\030\306<\306\033\326<\305\377B\275ppA\275\235\335\244<\315\0341<\0015\211=\366\334\t>\276\307\211\274\371\023a=Y.\207\275\252\332\222\275\371d\227=\312F\034\275w\341\243\272\237\216\253=_\215\333\274\001\002\241=F\037\243\274\313\036\352=\2060\026\276H9\271=~\377\001\275\376\326\376\274\364\345\306=\314\326\211=\345S\227\275\342\352\036\275\266\274\311\275\204\315\037=\206\236\"\275\314Ag=\315c\022>\371\271\263<\264\204\254\275\333t\020\276(\230\203=i\"\235\2757\212\201<\312\314\023\275\332%%<x\343\307=\244\212d\275\316\214\255\274\177:J\273\014\340\205\275\372W\232\275\027\267b\275q\231\025\275\316d@\275\017I*\275b\021A=\212\202$\273\235\234\234\274\253\030G;%\025\214=\266rG\275\216\244\342\275\306>\357\274\376\025\253=\355v\313\275\346\033\260\275\331\t\256=\274\320\205\275\304\274L\275-E\314\275\253\r\363<&h\220\274\215%\323\274\036GY\274K\340\270;\275\210\377\275\341\327\201\274\256\204\036\276\354\021w=\242):\274oj\267\275|\010]\275\225\350\335\273\027z\222\275>w\223=\374\212\344\274\273\001j=cx\346\2753\311\025\275b)\004\274#,\275\274\250\037\'\275\022d=<\266\010y\275\356\267-\275\225\245\024\275\306\365\364\275\326\316x<\203\375\343=\030\244\215<2\177k=8+\203=\214\234\t>\343\215\240\274\325qk=\274\254L=\340\207\345\275\243\243\274:\221\230\332</\220\227<\251\200m\275]\337\241=Q$\317=\027\351\215=&S\300\275\013\033\306=\262]\037\274\021(\352\2750\271q=~\221_\2741\237\267\275\315M\032=\373\212\371\274\312\233\027=\206h1\276\305l\031\2747\366\222=\254\201\261\275x\024\275<\304RM<\300\2317\275\317N\347=?9\004\2749\236-<\362\021\214\274E\301S=4\371P\275\252\275\236=,x{=\001)e\274\345\266\244\275\224V\235=U\362\215\275J\323k=\034!\312\2755\237\341\274J\206Q=\344\333\235\274\200k\301<!P\035\275?W\271<E.C=\t\244&\27589;\274\374\243[\275x@\233=\232\306u=nJ.</\201&=\315\366\321<@\377[<r\206E\274\3707\036\275\345\313\263<\244\271\270\275\244O\365\274\244B\202=mI\250=\313\206\255\275\3437\271<\212\\,\275Y\276\213=*\206~\273\002\350\255=|r\016\275K\255\222<\347\204u\275\267L\253\275\254N\346<\267Z\274\275\263wG\274\032\224\221=\354\370\241<7\216j\275\263j\033\275\367S4=Q\"\230\273\022iI\275\227\353\311\274\244\210\233;9c@=rgw<N;\250\275p\267\301\275\354\247\223=J\254\205=\341\033\364\2745\327\332\275\326\325\231\274\206Zr\274f\n\020\275\274\026\367\2741\225\343<\324\324\177<\272\255\032=s\304\330\2753\2150<\305C\322=\215&\004=\326x\251\274\351G\002><\005\306\275\211-\257\274\035\332\025\275\232\334\201=8\032&\275H\261\032<\n;\317\275|\210\023=L\263\340\275HY|=\037\"W\275\311E\217\275\307\313\313=Ev\013\275\033\226\364\274&Kl\275\206\251\013>\2369]\274E\235\315<\347\025X\274\217\324\024\275\215\301n=[\231a\275\362\334G\275\241\345\313=\216\2453<\002\300/=O\3670=C\372#\275\274\373\325\273\311\267\233=w\0338\275\262:j<\320\225\276=\270\210\005=\346 \013=>.\214<[\177\026\275\013\317\320<\375Z\362<\230\371\322\274\n%\026=Dtn\274\311u\036\275=\345O=\231\356\236\275\277\377B9\027\357\337\274\200z\240\275\365\347N=\324\232\352\274\255\213\246\274\233S\270=\326\326/=\372\034\t\275\342\365\204\275\251\365\003=\"\201\307=uR\n>\354:\366<\035\365\312;#19\276yW,;yR\210=\314\240;<\351f}=\235X\342<{^-=/\177Q>\346{\302=\314\202\345\273\232\177\212=\255u\303\275P%\177=\027\373\315=v0y\2729\232\037=<\276\233=\270\214\021\276j\315\340\274\243\251\323=\000{\264;\231/ :an\231=\240\340\340=\235\023\203;\366\312/<\020\257i\274l\203\262<\377\223a\275\001v1=H\001\224\273\035\345\204\274t\037\361:\323\002.=\001r:\274px\254=}\367\227\275\270?\037=e\200_=\375\237N\275\374:\001>\205Z\251\274\031\302\261\275\210\375\036\275\333\353\201\275\344r\013\275\230R\313=\274<A\271\370\346\t>q\022,=0V\237\275~{\220<i\361\023\275\2151\366=\231`\264\274\022H\r=\243\201\005<\313\345c\274$b\212<LI\t\276\365\223\361\273\367\tF=\313l\256\273\366\031\022\275\305\246\245\275\352pZ=\007\024\375\275\210Q\211=\207z\270\275D\367\270\273\225d\222\275#,!=\245\205\345\275D\n\322=\037O\345;e\036\221<\230\2315\275\265\013=\2759\366r\275\004R\223\275s\272!\275\020%\361<\251\275\275\273\371|\277\272\324\276\322<Fn\221\275\344\362\027\275\242U\013\274Zw\241\275#\342\333<\225\321\223\274U\223\235\275/\257\013\275{\274\206\275\007\200\211\275\363\373\247\275\246\307\222\275c\337\262\274\232!\351\274\245j\255<x\023m\275\031\037\254\273gBz\274\017\243\017\275\360t\316=\363\t\022;N\341\220<:i\222;D\305\203\274s\361\t\276\332\021Q=x\335\212=w\275\377\275\2740\301=G\365/\275O\0076=\226V\224\275\250X5=\324\234]=\2405\217<\266L\032=\206&\331\275\036\377o\275W\227\211\275,q<=\r\263/=\231\362\347<84>\274w\022B\275\0276\240=\254\374\001>\224&\314=L\365=\275]Dz\272\005\361\n\275P\377]\274\327\353\226<\271\207B>j\234\">ws\337\275\347H\275\275N\276\224\275P\324j<\314\246~\274\007%2;\213F{\273\362\030\202<^\306\371<\366\034\226\2757\334\262=*\230\203\274/\210\203=\376\276F\275@\340L\275\315K\372=\227\237\223=\275\357%\275\256\271\234=5\355A\274]\023]\275\266\302\237=\021\224\216<\231p\005\275jP\332\275\372\034\223\273\017\024j\275P\211G\275\262\034\301\2743\300\020=\315\307@\275\345\255\264=\2428P=\270Z\024=\026.k\275\037\256\212=\222h\210=\372T\331=z\362\027=\330c`<@\235\303<\374\0162=\027\320\223\275\251\336\022\272\370\221\236=En\240\275\370B\'\275\0352r\273\242\345\234\275\346O;=S\002,\274*d8\275\274n1=S)\030=\375d\242\274\270\236\304;o\272\034\275\001\310\001=\267\\\014=oz\221<X\323\252=Yg\350\274\224\345$\275\310\000\351\274\347\207u=\206\363z=\353\207:\275\034\257\337\275\250\322\352\275\000\345\271<\335\365\333\275\374\327\355\274\201\211G\275M\265\250=\372\202\200\274\225\236\261=\270i\006>O+\331;\177\206\001\275\324Y\202=3\260\255\273L]<\273`\327L\274FF\212<\354\374\300\273\017\344\026\274\032:S<\'\217\372\275*\t\253\275\312\333\241:\272t\275=\351\377\311\274`,\"\274zS\360<Gp\333=\213\305\t\276\206A\304\273\245\027N\275h\273\372<w}8;\240\246(=J\037Q;\222\263\"<P\237\\\275i\247\006=\234\214T\275\370\352\351\275\200\\\207\275\372_\014\276^d\251\273\247\322\276=\323r\301=U/e94\364/;\244\264\271=\344\240\014<\332\352\360\274\336\246M\275\224\322\315<X\033\304\272\022\265J<\232\366H>u\342\232\274\263\230\231<\204\343\350\274\"w\202=\330\377\243\275\337-\316<L\253\010;\375\206\316\2736\350n\275\204\264z<{\035\202\274r5\213;\nLu\275\000O\202=[\340\250=\265a\231\275\223\231\302<@\204\315\274\316\356\245=\224\264\255=\210jm\274@\310\256\275\213\304\276\275\336\301\356\275\340q&>\3749\244\273\346\225\'\275U}\355=B\276\276\275Hj\351\273\032\202\265\275\325\304\337<*Z\233=\320\347\271<$\257G\275\345\335\351=(\364)<\331j\314\273\036\3718\274\031\001F\275;si=w}R=\341\021\216\274/\263\211\275\342?}\2750y!\274\231\307\205<A)C=\331\313\003=j\3723=kW\243=]?v=\317!d\275$\337\'=\367\204Z=J]5=N:d=\306\227S\275\021\367n=\247\001\371\274\277\270\272<Q4\345\274\033a\007<\226\032\005\275\005\024X=\032\230\315<\2673\243\275z\245\277\275\325\236\033\275:xy=.\323\264\274\025\244\r\274\314?\214=W%\031\275\022/\t\275g\366\025<\022p!\275\271\241\214<\264P\327\275\026\321\302\275n#Z\275\rJ*\275UW\370\275G\372\026=\005\177\267\275E\311\250<\361\236\250;\244u!=+q\354=\\\356\001>\353\371\337=\371q\254\275\033\364 <\236\360!;\201\026O=\n`\000\275Pob=\370\323\315\274^\300v\2756;\364\274\337\262\244=2w\237\275r\216\361\274\340\001B=J\363 =\317hm=\237\337\232\272\223\264X=\203Ue=_k\325\275\216\2533>\235\311\035=(\014\327=\336hK=\345]\354\273\231b\356=\037#5=\350W\211\274\311\205\347\274\030\320\027\275\225\365\267=v\227\253\2740 \364<\247\357\016\275\204;\234\275\210I\216=\241\252\0359\306\220!=\271\365\204=\350\330\211\273?\330\233\275\017\231\264\275\353\031\023=\354\016\364\275[@5\275\217\242S\275a\344\203<\203Q\333\274a.\010=\250\352\244\274\027\345\364\274\273\373v\275L+\237\275\3738\244\275\203\273\002\274]\214\273=\324\311<\265\240\257\236=\263>\213\274\361\301\257\275\365^\226\2756\342m<\366\216\324\275\3301\347<\200Z7\274d\214}\275(a@\275I\244\007\275\335b\246=\341\365\305=\377\2464\275\327\2537\275\207\363r\274\345\241\020=\245\336w=L\370\206\275Z\035\347<X\241\001\275Yz\230<VA\364\274\213\2676\275\312<^= \301\344\274\024\304\037=\030\334\272=\375m\036<}[\247\274\353Hi\275\356c\006\275\025\036\347=\277\\S=\t\232\374\275\357r*\275\033\3769<m\201\362\2756\0346\274\022$>=y\264\315=^p\032\274\026\207\270\274\316\300\232=\251q\221\275]\236\260=\332\231\003=5,\363=\330\\\\=G\334\266<\242\200\227\274h\372~=\343\203\244:8-\260\274&#\033=G8\200\275\266\017\243\274\177~\323\275\033T\327\272\234\221\343\275\017\336J\275\376\330;\275!\032\241<7p\260=\021\236\234<\250\023\343=\214v\303:,\002\016>\343\004\217=\222\265\021=*H\314\275\251\000\024\271/\210\275=\207U\327\274\310\222\210<R\353+;$\270\354\274\247\236\356<\226\343\376\275^\357\257\273\211\245\361\274\336Es<#-\215<\336\232\001=\000\361\306=\224P\345\275k\262\034\275\203L\035\275{h\232\275giA=\216\367B\275\344\312\016\275\217u7=(\2570=\252J\221\275\"D%\2728\3732=\272\350\305=\301i\342=p8\275=y\312\321<\326\202\361\274R\340\033\276\r\030\254\275\322K\231<\017\202\301=\310d\202\275j=T\275\377\023\243=\017\014\223=v\231\257\274w\242d\275\001\220i\275D\267\252\273]\310\024\275Y\212\210\275\313\265\020\2750\357N=R\215>=9\336\275\272\307\325\237<\241!\353=b\"\226<\230\255\010\275\025f\212\274d\316v\275\370\202\315=d.F=\005\177\254\275\315.\232=\331\3502\275}\342\340\275\246\310B\274\346u\257\274\025\231\321<\'_\016=\013\230\005\275\321\304&\275\177~\211\275B\0317>\357\253{=>\326(\272C>\232=\310\235B:\277+K=\\\032\225\275\303q\300\274h\242\253\275\005\372;\275;\035\177\275\356v\265=\230\221\013=\362!\261<\014\236P=\300\244\001>\023O\346\274{\240\003=\242:\325\274u\334\016<\232\326\247\275Nz\343=\207\252~;\246\233\252<\207z\2759h\341\200=~7i=\241&s=\357\360)<:o\250=#\016\350\273\214S(<\300\267t=\004\027T\275z6\017\274t\332&\274\366s\224\275\3635=\275\313\327\027\276\177\304\001=\316B\037\275\313\010C\2730\236\220\274\242\004,>wi\211:~\276\025\272\352\206\022=i\307\315\275\267\277\021\275/\215\345\275\302R\177\275A\005\236=>\016\252<\312\241\037\2743\325\307=+[\266=\336\355\265=Z\200\270\275 \235\010<~j\355<\237\r\315=\266>I=\325\200\215=\340\323\021=\235\257\241\275\236mm\274)q+\275m\216!<e\347K\274\0343k=Y\353\030\275\014\233\022=\'\236\324<\363W;\275\324J\206<\365\2209\274e!\246<`\016\212\274\210cT\275\376\022\327\275v\021\023\274\345\221\264\273n\375\350;n\227\010\276z\"\317\275\207\310\317\273@\213\307\275U\211^\275s\014Y\275{\325\205\275^\336y=\004\r\357\275\244\365?\275\240\304G>g\376\271=G\253\021=u2\357<\030\256\230\275\351\227\236\275H\017\363\274\204\003\007\275\033\210\020\275\345\267\267=\2226u\275o\306\226\275+lr<\014\223|=\226\264\236=^\237b\275\211X\240\275\255\030\216<\032\321\277\275\217\326\013<+\234z<#F\201\275I\330\244;\261\243\333=\336\341\223\275\345\371Z<\003\355\001>\201\340\251=\016\326\274=\300\224\236\275\202p-=\307h\t\275\304\227\300=~\230\r\276N\017\305<\270\213\264\275\323\312O\2757}r\275\200x<=\321g\027<U\3241\275\327\332\266=\252\307U\275\021\370\254<\272;T=\361\\Z\275]\rf\274\303\306\315\274g|\202=\273d\272\275\'H\303<k\277\211==j\360<bT\263\275]\353\361<o\355\215\274\250;\320\274\233\227\340\272OEM=B\214\352\275\242\211Q=\252\035\324<\234\276\031\276cn\207\275\341z\013\276T\221T=\354^n\273\356\233J\275\362\r\225\275]\355\261<\002\310#\275\025\256\323\274\032\026\224\272Sq\235=\205\273&\2733x\266\2710=Z\275\250\242\014\275\020a\005=g\265\230=X\362\277=*\253\036\274\360\235*=\326u\206\274<\250\374\275|_#=\201\246\260=\314FI\275\250\326\037=\377$\213\275z\336-\275X:\306;\340\2758=/~\n=\036\003\024\275(\374\t\275\371\207\201\275\277\016\242<\230\312m=\2257w\275\305\314\t=\207]\252\275\357\335)=\304\026\234\274\227\357M\275C\211\273<-K\022\273\215uO\275\303\001\237=-m\267=\200m\363=\341M\352\275\231L\002\276\245\201P=A}\251\272I\006C;a\261a<M>:=\276I\177=2\234\226=\210)\301=I|$=\202\'\364<8\344\231\275+aq=T\343\362\274\177Y\026\275\247\366\035<\300i\316=V<O=\027\316\030=\"\200C=\254\246\017<\277\'\364<8\373\014=\024\201\036\275tZ\303<]K\200:\334\276\302\275\377\345\221\274\220\224.=O\033\206\2751\203\226\275\355w\240\273M\236\035=@\030\301\2743c\232= \007\365<5\212\207\2755\231G\275\000\217\n=\250q\221\275\376\307\217=\231\321\006=\266\235\226=\010\301\270<H\364\232\272e\177\355\2749M\030>\206B\225\275\365\372i;\351\031\357\273\2647\351\2750<B\275\326\360\371\274q\306\034\276\361\210s\274\330\264\260:\351\203\213<\013\366?\273\345A\242\275\236\226\334\274\201\211\207\275+%\245;\213\253P=\223g\217=\261_\366\274\354x\232=\374%B\274\374I\340\274\265f\255<V\036v=\352\320\364<Js\337<)\260\223\275\225\333?\275\010\364\244<\364\231\374=\246\321[=\n\037Q=h\230`=:\177g\275\365j\242\275\211\3128\274H3B<\326\337?=\351\275\251\274\362\317\221\275\026\177\007>7\256\217\272y\315\000\274)\004\326\275\032\3036\274\034\033\373=\237o9\275\r\030\'<e\030\213\275\234\006\037<\303\225\312=\373\314\266=\371\231A\275\335f\276=\344\\\271\274f\027\211\274\330\370\277<\226-\001\276-\027\002>\270\344\311=\326t\214\275\362V6=\2532\220\274\026\354\245=QJ\357\274\001H\234=\363\223\347<\\\313/\274\245\202\r\275\346\031H\274[}<=\367E\315<\000\034\020\275G\243\324\274\313K\234\275\211v\026\275\255\224\033=\312\244A\275\224U\371=\356V\323\274\265\017\337<\032G\214\275\222l\014\274~\027\200\275&\233H\271\'\264)\276l\003\303\274\210\257\351\274\215|\215\273\037\300\013>H\271\024=\215\206\030\275U0\374:#\013\355\274g\307\227=d\020\232\275\327\210\307<e\017\307<\014\027h\274\335t\256\274\031\257\220<\257c<=\374\204X\275\35090\274{\373\210=UOb=.\020\275=\343w\256\274\223\232\265\275rg%=\231\002\237=\031\351\001\276\377w\007\276\210\244\017=H\302\223<\325O\347\275)B\305=Q\341\357<DN\214\274\'\250\217=>\220\026\275\237\366\267<\177\204\216=\215\014\036<UT2=\355f(\275p\024\336=\215\326\220<zn\223=\257~\'\274\345\0357\275\325\3671=\317\363\346=!\211\341\2744\342\366\274\224+\214\275\013S\354<;\233\357\274Nn\333\273\367\036\203<\320g\324;*\3732\275kww\275\341;\221;\351\242\022=\344e\221\275\203\277\206\275\232\262\r=\360\302\007=\335\313\330\273Qt\254=]\220\337=\216\332\222\275p]\371\274\374\362\263\275|g\373\274\257\016d\275\321\337\250\275|\320\025\275\3333i=\323\3440<\021\r\323=\356s\002\275\033\312\241<\200\340\267<\010?\002=\007\214\354<*T\204\273\026)\331<\275\345\231\275J\030\363\274\032\236\250=\274\031j=\347\304\017=\257\361\337=3\022{=\027#\022<^$b\275\344\332\230=EZ\355\273K}W\275A\335i\273s\2229<>i\006\273\351\021\236;\265\216\014=v\034\014\275\327Q\360\274\262\272\305<IV\333;r\376\033\276\304Q\030\274\3000\265\275M\2621<;\274\232<2\r\327<\372\235\327\275\347w\321\275\333f\177\275\352\317\026<\006\037\233=L) \275n\272~\274S\002m=\373w\177=\266Z\232;\305\311\023>t\321\220\275gDN<\266Q\037\275\215y\274\275\327c\004>\266\244I\275\242\031M\274 \000#\275\000?a;\030\263\203<8xN\275K\204\310;\020;\201<\276\317\222=R{1;\300;\003=\036\243\244=\364\007\222\275;y\n\275!\202\370\274\247\023\303:\006e\242;\327\314\265=\031\306\035=d\027\253=E\341\263;\026o\203\275\023\006Q=i\344r\275\264\214\234=\375\0134=?\320\233=\365\027\216\274]!\251\275Vm\301\2742\302\"=\311L\200=\263$/\275\020s\357=\023\265\316\274\"}\004=\022a\035=\270\n\177\2753O\234;+\222\275=\030\222\251=\'$\225=\314\302\305=\334n\032=d\377l\275\346\021 \275Rj\266=\260`\315=\201\036\311\275\373\216\261:H\003\241=\346\310\371\275J?|\275\n^t=\354l\301=\341\317{\275\'\030\321<p\311\372\273\017\227\343\274 ?v=t\244\233=\243\376\267\275\253\376\266<\275B1\273\324\224\216=\376\277\323=\330\267\342=\212\351H\275\237a\356;\221\035\267\275\225\316\364\274-v\307<\264\000\311=\030\234\374\275\242\202\206;\005\036v\275\311\326>\276A\347;\275\331\004\322\274\035\250\236=}T\n<\203\236;=j\003&\274$\3207<?\300\300<\324\205\276=\245[\371=\355\264X<\370\010\227\275\331M=\275\375\030\322<u\337\325\275\344\361\330=\311G\253=\023n\326\273r\366\213\275@\304\325;\305\353\374\274\023\020\216\2752\310<\275\261\277\035<\304\261\201\275\341w\236<\r\356\245\275#G\211=\r\337\220\274\207f\0108&\306\t>\232!\036;p\333\257\274\236\027\217\275\234\376\"\275 1\010\275j\301Q\275\333\006\272\274\010\322\316=<\214\233\273i\366+<F\036\013\274`\207\177\275\036\354\032\274\333\316 >\346\346\305=%\321\341=\337\360\235=cSc\275\267\253S\275\245g\n\274?\031W=\3315Q\275\352\265\332\274\032\345f\274\374$M\274\231S\253=\255\037\223\275B\377\331<\277\016\327<\262\303j\275u\335\245\275@k\251=\361\371\304\274\270/\253;\032\253\r\276\201[\022=T*y=\247\2329\275\305\311\006\274\370/\251\274\234\314\343\274\343,\241<$\345z=y.\235=u\027\230=\303\230\332\274}\t\243\275\354\203\207<\361H\026>\223\331d\275\020w\232<r\201f;\220\311\263\274\364\0135>\347\017\213\275\301\355<;\037Ii=\000 \357=\304\016\376<\371/\221\275\010C\014\276\246\"\237=cO\206\274\371\023\272<\014s+=\221\342>\275\365S\016\274\025\266#\274HZ\201\275\271\025\017>?\264}<r\210t\275H\376\233\275n\364\304\275+\"C\275\213\262\271=+\000#=\270\323\270\275\335\335\233<\241`\220\275,fP\274\3234\340\275\252|\223\273\322\334\225\275\023\035B=l2\026=\013\304\273\274\\T2=f\"\206=q3X=o\324\202\275\000\206V\275r\214K\273\333_P=zm/=\030~\n\275\360\265%=t3\\;\235f\261\274\373\t9\27511\355\275\307\032\274\274\343\037\245=\014\274\021\276\014\367\035=B\212c\275\214A\356<\274\375\004=\177D/=\2527-\275*\004\001\275.\217\225\275\341\211\226\275\363\267\244</iV=f\320a=\206\275\010=g\307\313;R\022>\273\r\251\250\273\020\217\037=\206T\325\272\010\265\314\274\340\267\252\275\363*\334\274i\363\024>R\301l\275H\252(=\260\303=9\02515=\010\317\214=O\256\177\275h\364\003=\306\030h\275\253r\261;\372\2102=\225\353\311<\273T\000\275\223\276\316\275\000\324\273\273\362\343`=O\000K>%H\206=\3074\222;S*\315<\"\362\371=\004\256\201=j\263j\27505\201=Z7\260\274\037\035(\275\303g\033=\313\250\241\275\347\337V=\026W\027\275\224=e<\257\207O\273\227\255&=B\032\315=wS\224=\300l\320=\240\222\350\273E5\013=\023JI\2747\336-\276\365\320\017=\357\024m\275\231+E=\276\220!>\277\231\310\275\225dV\275\242\007\314\274\363[9\274\355\325\204<\276\024\217=t\036\313\275k%\216=\311\005%\275\212\305\320\272\310\362\325\273$G7\275\220\232N=1g\205\274\274s\000=\302\225\317\274I \177\274\221\266\361<A\366\202\275\360\343l=\364\371\202<%\327\220=9\026\250\275-\347\032\275\035y\017\274\362r\215=XO\221=\371\244E\275\310Q\222\274G\334\260=\317\371\350=\033>\331<ahY=1\312\022=l\270\305\274\266\253\227\274\360\262\364;\360\240\374<fp|\275,q\212\274J\347\022=\204\230d<\357\314\207\274\020\2604=\323~\241=[{C=\034\272B\274z\205\177=};\366:\207\230\347<\371\355\362\274\216\312\r\276w\350\234=\252\206\207\273\317\257\304=h\247N=*$\333\274\t\210\313\275\031\243\264\275[\2550\2753~\301\274\016\377\214=\335\261\354\2757\371\317\275\315\206@=\002\034\025\271\204\227\332\274\n<\221\273,\000)\273\344\375\010\275\236-.=\251\352\222=\246\366\311=_1\276\274i{\270<s\206\250=}]3<@r\370\274\335\254\312\275b\026\212=\347\204w=\352\313\302<\006E0=\346\324r\275\201}G\275l\347\224\275\250\210\234\275R2\323\274\222\t\220=\217\023\246\275\030\005\002=bY\'=x\314B;3\355\001\275^6_\274o*\222\274+\016\205=\242\201\275\274\036R\362\274\2666m\274\306\035\004\276\227\265\347:c[\233<]i\266\274\210jK=\020~\223<(\177\221\274\233\215\210\274\\\361\014\2758\253n\275\247\272@\275\034\363X\275_\351\020>\313\353\355\274(6\355;\250\\K\274\003\360\256\275\233b\\=7B\307=O`D\275R\374-\275\277\211J<\036\335\023\2755\034\347<\302k\356\275O8\220\275\205\277x<\243+\231\273\234\003\200\275~\266\001\275\362\306\246\275\262\314\272=I\215(\275\263\304\246\274,KI<_\301\322\273\323\362\344\275\014lR\275%C\334<\237\013l=\322\223\241\274\207o\021>\030\256]=\342\227|\275{\244G=\304\r\345\274Q\252\014=O\346\370\2758r\030=?\212\313\275s\323\262=\265h}\273\306T\3629\345N\240=~\304\257<\256b,<\3519\006=u\"\206\274\275\014m\275\326\274\245\272\345\3026=\005\363\020=\361\t\206<n\021\236\275q\363b\275\036\354h=\353\007\365=\004\363W=\003K\374=L\326\216=\334\247b\275K]2=+\355\212\275[;\330:\212\320\326\275\2742 \275\266\315\022=\235\210?\275\013hY=\366\255\021<\254d\202=LE\346=\261\265Y\274\007\352\307<8m\031=\201\324\375\274\356\346@\275\351\357[\275\203\327\'\275+p\'>\315Tm\275N\306\021>o\254\226=1]U=\241i\024=g\376\007\275D\346\005=\246\314}\275\014=\217=\323\210\377\274\263\200~\274@r\215=\273\342\021\276\001\305\221\275\326B\366\275` \342\274K\271f\275,\355\001<8WP=\304\344\t\276\001\262\233\275\271\320\216<\373\246\261\273\217\355Y=\010\205c\275\027\0214<9\013i\275\343b\271\275\342\371\261\273\037\342\205=I\036\307\275gq\r=dQ\213=\346\261\206\274\036\243A\275\312\001\213=\210lx\275\032\312\016\275\010\256\356\273\000\301t\275\270\333I\276\342\235\006=\024\327\377\274\264\037\224\275\215\335C\274y\223\233\273\311\325\202\275v\215\353<#L?<{\232L\274v\204\n=@7\210=Y\3428\275\327\016U\274^\303\236=cC\235=\304\006@=\204\261\027\276V\300\210=,]\324<\277\250\246=}\035\201=\324\304\231=c\311\001\276m0\335=\207\337\341\274la\313<\017\252\035;\213<,< \257\030\276?\346$=\342w\225=\006\236\363\274vX\243<\251\323\247\274bD\335\274\272\022<\275\204!\'\275\362\035\246;C10\275\275I\254\274~\301\003=\303b\254\275\374A\227\273\321\220R\275\272:\214\275]\023\240=\326\373$=\337\007\302<\353\304\254\275%\033\264\273!\272\017\275JS\205=\245y\244;j\2660<\3311T=\030*\266;\224\365\327=\024i\357;\224\321+=C\376^\274\360;\234;\247\200\305\275\277J\031>\300\206<;ePX\275Y\321\220=::.=\265vB\275\rD\251\275)\302\205\275\2205\232\273\304W\215\275a\342|\274i5\252\274L\215V<\025-\000=\214\360\345=u\225\000\276\374\220\217=k\035\002\275I\363P=\177\377\300<m<\373=p\016\226\275\362\036\241<\311\245p\275H\222}\275\274\276\265;\200\370\313\273$\370\303=\177\256\266=\356\332U\275x\237F\275c\271\"\275^Er\275,\203\207<H\327\363<u\3265=\010\032\303\274\035\237==\001\326w\275\254\354\373\274\252@5\275\000\242\032=\352\320y=N\017B\275\033\310\231\273&\370\215=\351%-<hiW\275Cc:=\001\367-\274M\350\035\276S\0146<\306h0=q2j\275\367\343\365\275L\376i=\341\363\007=\202\202\227\275\t\274C\275\335\300\252\274v@h=l\217w\275T\371\023\275W\253)\275\316\225\362\275\277\224\335\275/\\6\275i\366Z\275\367\307M\275%D~=7C\364<Up\022\275\372\004;=\240<\3549n\224\276=(\340#\275\245@\022\275\177r\371<\204v\314;\262\254\216\274\217\325\372\275H\260\212=S\266\026=]\350\205=\336K2\276\307\347\t\275:v\274=\316\252y\275^\267\264\274e\361\241\275\"\\\207=\276p\t\274u\331)=kT\310=2\010\354=fEi<\026\275\227\274x\261\354\274\332\261\266=7Q\221=\004m\005\276\224\207\003\275\006&;=\3549\013\275<\271\226\275BL\325\275Cn\305\275\277G\016\275\201\353\364\2737xK=\2724\377<\305\254!>\223\267\245<1\202k\275\231\350\206\273\304\267\257=\362}\003\274\327\204\232\275\366~c\275\350<\217=\245\253\253\274aC\304\275T\365\247=\311\215q<\17765\275b\337\373;l\000\260\275\264q\312<\253\267x\275\3210r=\251\3645\275W\267\271;p\335\324\274\r\022\003<\037H\017\275\032?\210<\233\2143\275}\276\023>\204\205\276\275|9\233\275R\276\207=\027\267-=\270\201\345\275\373\030\300;[AH\275\333\320\237\274=\307\021=\260\010P\275m3\035\275\025\325\246=M\223q<T\351\221=5\241\023\276\327\004\214\275\177(\251\273e\352\n\276}?\217\273D$><6<\353\275\231\004\355<\323\250!=\334\316\030\275\346\026\235=\372\365\017<@\350n\275\210\353n=\225\016\211\275n\016=\276H%\362<\306\222\347;\345\036\214<])\n>n|\234\274g\301O\274\"\321\264<\240\224\323=\336L\224\275gl\345=\337\255.=\364\345\215\275xK\211\273\241d\003=\0134\246\274\370\357\010;l\322\010<f\354\207\275?C0\275\364\303`\275\260\003\036=\312o\361\274\223\276R\275\\\302\201=\320\247o\2754\023f:`eQ=\001\201\265\274\200\026\000>:\334\375<\265\330p\275A\322\'=^m\001<\315p\226\275\200\376\313\275b@\200<\023\002u\275Ye\244\2759Q\316\2732\2057<\226u\247;o\307v\275\253mU\275a\366#=$\037\375\273),_=\365\232\326=\237$\347\274\220\276;\275M|8=zJ\274\275\212\243\000\275\256[z=\277y\023=\243\265K\275\303e\037\275\302\000\333\274\342\212\244;Q\217R=\327V\314<\033\243\365\275\215\200\326<\252\211\360<Z\216\316\275\307\020,9\004\365\014\275w}\205\275\3245-\276\266\351V=\225\234\242=\316\035\204=\250\236\342<\331\030\027\275\244\247\017=aA_<\021\351[=\'\242\255\2745E?=\374\352:=}/\253={\216\313<\332\225\027;\203\321q<u\000\272;?\357\315=v\276O=\232m\320\274l\376\224\275\241\213{\275l\\\271\275\355\357\036\275)9\001=[\264\265\2759\256\225<}!\200\275\363\226\005=%H\'=\313\255D=\212Q\313<\037\207\000\275\252\252\346\275b/\205\275\310\267\236=\253\034`\273h\302\261:\301`\260\273\273\024-\275.\335\342=\275\266q\275\371\207\261\271a\361\361=\222\321\250\2747Z\217\275X\016N\275\010Y\344;D(6\275\200k\223\275\230\310_\275\t\3137\275\22195=\364ge\2759>\013\276\203\350\235<\210\226\247\275\021|4<\031x\t\274K:n=\234\0132>V\267\350=\200\264\353;w\204\005=\323\271>\274\226\202\250=\370Y\235=\220[\325<rY\250<6\033\243<\200\344\334\273\030\276\010>X^]\275\220\323\376<\354\031\240;N9\372\273\310\216\307\273\246,\256=9\207\234\275R\013S=/\260\343\274\035\271\224\274ty\231=\246\310\214\274\322\200\205=\237\372~\275\210.\330=\330\013\353\274\244A\036\275\2134\200=\327\334^=\002\202\023\274\356)H\275\034N\332<\324!H\275\200\352\023\274\035D\246=cu\312;6\3330=\264\325\331=E\206\274=\335\253\350;<\010\342=H\222Z<\232\221\373<\006u\216=\035\275\022\274\352\000\255\274\270w\374:\005\364\227<!|\212\275\336\332\255\273_\311\246\274SE\375<\211\025\244=\232\245\262<\313\326\220\275J\303\223=Z5\t\275\270\325`=\340)!\275.\275\317=\303\242\225\275YQ1<e\374\314=\221R\211\273{\2061\275P\022\"\276\303\205\336\275\346\016\201<\236\023\241\275\256\003}<\004U\244\274\007\216\253\275\205\323\353\275\222\002\233;_\001|\275\230\334]</O\366\2747\321\251=f\200Z\275\373\277\257\275fR\374\274\177!E\275\374\233\323\274\314<\354\274\250\301\220\275K\206[\275\'\346\255=\013E]=\245\353\205\274\30148\275b\342\207=`\'\020\275\\O`\273lR\\<\014\020\261<#\360b=\303\327V\275\232$-=\320\350\324;\207\033K=\270\351\217\275\374\024\264<I\357\363\274\343r\372\275-Vj\274\276\277\217=\331=\307\275\206\366\306;\362.N=\347\366\350\275\351\270I\275\245\004\260<\222K\215\274;X\233=x\224\370;\254H\033\276\313W\321;F\214\330<;=\215\274\275\233\250=\263\205\271:\364B\344;h2\265\275\276\340\321=\007\314\376\273\303\207\213=\362\357\031\275\025\245\r<\252e\352\274d\036\243<\3247\230=\004\334\216<r$(\275\302\2349\275\203U\247\275\243N\312<\013\234\240<\271\\\030\275a\270\276=@\223\200=\036J\014\274J\307\346<\240o7=+\317\325=\352m\"\275\355\326J\276=M\023\275\274\227\346\274\235\207\t=\254\321\342<\375\227\217=QT\373\275\022m\370\275\226\325\377\274v^\302\275\224w\221<\204\370\232;L\021\036\276\232\027H\275\010\366Y<5\035\030\275\352\262\037>\331\210\332=\206\203\235\274\001\214L=\321\256\220=s\354\032\276\177:p=\2250\241=*\364\256\271\323\007\340=]%\312\275j\272\022=\372\354\310<E\020\032\275_\016\003\276\024\346P=A \333\274\333\370\247:~\n&\275[\270\202=\315}\321\274A=\213=\320\204.=\354\237K=\021\251\\=f\300`\275\207\233\234<UH\232;\236\202\266\272<\256\344\274\254\227>\275:\216\353<\306\247\027\275\342\253\266<\247NW<\202\310(<na\t=\200p\006\276F\312\234<\013\263\214=m\006\014=\223H\306=0=/=\266\261\000\2760\271J\274{\215\274=\354\376\020=\033ax=S\002\245=\036\252\273=\016d\030=\357\306^=\342|L<bP`=%\024\220=\215=9\275?\217\235\273M[\364\274rGU=\330L\251<\237\335\316<\366\310`\275~\365\243=j\357o\2750_\213<\237vP\274|\202n=\262\024W\275\200A\215\274\001o\330=\312\236~\275\214\361#<\2632\323\274?\254d<\346\370w\274\351n?\274Y\230\034\2760\256y=\354_\326\274\007\377w\275\341\252\224=|\363\033=7n\250<<[\303\275|\327\214=\016r\006=-\250\023\276:\277\032=\3403\306<\317!\031=\327jW\275\231\302\000\275\235\227\273=\246\245\204\274\225F*<\330;\321<\3337\217\275\314x\010=\014\035\213\274W\260\330=\317s\002=1\316\332\274\363\031\221=\313\275\032>\272\247\007;\323\304r\275\343*\306\273~8\006\276\350\217\226=43N\273\364R\374<(\035\304\275\276\257\263=\031\235\373<\207\230+\275m\252\260\274?\310\213\274\251\347\256=\351\361\241=B\211A\273\254\'\237\275\035\270\r>\335m[\275\026F\242\275\257\013\273==%\300\274C\245\237\275\343?L=\244q\213=g\325J;\0073\033=RvB\274\351}\203\275\243\277\355\274oe4=m\031\203=\234\225L=\3107c\275[m\243\275\277>\350\273\202\350j=\322bI\275\235\301\261\275$\303\320=\314\261\321\275\255\333\032=9\303\347;\253?#>p>\235=j\305E\275T\312\t=\033\001\261\275e7\366<Eq&\276\363\001\003=\271A[\273p\234s=\316\305&\275\252\204\020=\036\230\221\275Fzy\274\200\240\320\275\360\032\204<\253\333\n=tP\"=C\327\031\275EZ\004=\022_\336\274\004\037~\275\262\007\236=S\257\306\272\005\3014=\212\254\200\274\371\346\356\273\251\373\231=\217\3733=\255\204#=\352[\306\274:\213\246\274\224\3753\275\036\232@\274\371\272T\275\335)\225\275\027\253\017;\323mq=\025\337\263=3\332<\275NF\241\275\365\375\216\275\2267\004=H\236\353;\377\204\307<j|{\275\340\225\021\275\341\246\032=\300p\376\273\022_\220;\335~\261=\370N\252\274\332\233A=p\265\025\276],\n\275\207xM=\253P\254\273\t\212\300<A\034\225\275]i\363\273\304\300\032\275\357\235\376=\353\300\n\275\333\032\204\275\334\\\320\275\022\001O\275\356\021\231\275\374\2105=KbO\276>\032\223\275\251\3767\275D\211\\87H\206<c\313\215\274x\337\366=D\265\026\276\230{\207\275\226\0024\275>Q\232<\277<\312<\244\232\031=\207\212W\275\332H\273<\317b:=\030\'\337\273\032\377\376\274\340\311\341\274\202P\235\275\346\222\035\275\\\024\277<\005\253\331=P\367\216=ik\000\275atE=\033a\346\274\265\317\212\274\035\360E\274L\336P=OK\023:\212\227C\274\310m+<4\312\272\273\375\312\205\275(\264\320=\2604\205;\255\215\226\275Q\255\001\276\2576\203=\372!\020>\204\2336<\366\2442\274\234R\030\275\274\020\251=x*\222<\201\253F\274y\200=\275d\242\206\275\374O(<7ty\275\215\016,<\316\'\262\275\367a\022\274\001\022\230=b~n<(\004\333\274f\267G=M\274\365<yI&\2749\010==\376\247\'\275\016\332o=\334\331\322<\242\276\356<|${<\344y\242=\006\221<=\346\341x=Q\256 \275gx\215\274\021\341\251<\327\2552\274\311\214\031>\356_r:!\267\374\272\010\213r\272\316\335\014=\370\230(\275\273(\214<q]\222\275\231\010\271=!\324\232=\340\303\222\272\\\312\013=h%\227=ob\271\275%\341\232\275\342\346\005\276>D\226\274\273k\001\275\261\361\205<>\330\270=\212q\207=\311\322\325\274T\n\037<3\344p\273\263\302\021>D\220\254<b\276\024\275\264 }\2744\2113\2755?\007=\032\034\221=aG\234\274\320\312\317=I3J\275\305=Y=\242\241^=\336W\330\274\'\251\355\275*\262\026>\300~\023=\032\'\010\272*\326-:\203\233\342<\252\344\017=\010,\356\275\2226g==\310\201=\262aN\274\035\347\205\274\000.\372<\366\312r\275\255\343\251;\272\356\005\275\207\351\277\274\014 \224\275\365,H<x\350\313\275m/\217\275\001i!\275,\206N\275CTO=\352\032\307\274\337\351\037=\230\347\202=\305q\272\273.>(<\275\032\366\273/%\"\275I\351+=\270\305g\275K\034+\274x\245,<\375J-=\312\356\223=b\016\241;{\367r=\315\317\276=\275\370\201\275s[!=\217?\024<\222\356T=P=\013\274?\205t\274Hm/\274\355+^={\277f\275\000b\032\273\331\013F\275\342nZ\275\225\247C=\362\026\021\275\202J0\275y\200\r;\010{I\274\032\020\231=\r<\037>\357/\375;\275x\245<\254\035\272=\n\237\334\274\254\322\236;_\277\312;\210\203\2239#\347/\275\026_/\275\240g\235\275\244\3650\274^\360\361=\226\327G=\244I\350\274\273\274\016=Y\357\213=\021s\275\275\371\276\201;\356k\214=\207\260\263\275\275\216\023\274\274\340\233\272\305\200\252\275\243\204\314\275i\t`=\361\260\312<\277p==\2566I=\001C\224\275\322\"\223=\364\277k\274\347\262#\275\256y\300<\233\rD\275\331\003\257\274\337G<\275\340\346\330\275\205(\253\2753\003\001\276\323\r\006=<\372\201=\220\031\345\274C\306\002\272\375F\210\275\246\013 =\3122K\272\264j?>\031\035\035\275\223Z\263\275\3111v<\267\2224=\214\265\177=%\246\017\275#\253S\275\373\241\277=o\010\207\275\342\224;\275|\363\225\275\271\234\312\273\244\326\264<9\344W\275\363%\025\276\232{\250==l\306;\030\201\004;\266\351\211\275p\324\355<\325}\346\274[\247\203=\354\';<\371\2202\275C\021\013=#S\267\274\004\247\207<\345H-\275_;\303;\344$\234<\362\225\205\274\360%\207=f\313c=\236\214q\275\004\344\223\274\000Wn\275\"\240g\275\341\260\302;\250y\275\275\275H\037<\336\310\032\275\312:\224\272`FD=\024\367\024=\304\311O\273\3756\016=\225D\007\275\n:\206\275\215\213,=\335]N\275\313m\203={k\213\275\2450\204\271\350K\026\275DN\341\2752\263\373=o\273\010>]\347\263=\365\235\243\273\233\001\341=\357\370O<\211\327\026=A\327\365<\322\263\323=\363\301\313\274\272\216\322<l\017\315;\211\017\225=\005Y\254\275\312\245\006=\034r\213=7c\001>zK\266<6J\222=y<K=\204\213\036=\331\356\251;pi\205\2758\3322\275\276Pa=T/\323\275\264\356\223\275\346\024\016\276\370~\361\275\202\245\002\276\327\"\233<\2573\270\275\251Rm=\350\264\211=\036Z\313\275f\033D=\260\321\260=\'\372e=8\373\003=}0A=\364O4\275U\017W\275D\313\346<\327\026\246=\252K\272=\271A\232\275\225\304\274\275/6\335\274\236|7<\323\337\207\272\351\253\254\274,\216?<\250WQ\275\356\024\256<\014\251\264\275\314\246\211<\302\267\002=N2P\275U\354a<\\tV<\035\237:\275\322:\365;8qo<?u\210\274\353\210\215=d5\241=z\377p\275\322\217\363\273\220\352\371\275\341\021;\2755P\343\274/\2021=\344\303\027>-\333\r\276\231\361A\274\237\010e\275\001_\352=\226\323\215=\323)\362<\343\3151\275\231\252j\275\263\0053\275\236\302J=\014\262\222<\360P\025=`\000\206\275\2320\230=\243l\262;\027\226\035\275\272\254\352<\257\255\020\275\342\227o=\341\314o\276\206\323S\275k0\310<g.\200=\372\0136\276\276\334\336:\'J\317\275w\026D<\022\231\254\275/3\304\274\3465&=\330\266w=cD\177\275\032\205;=\214@.\275\'z\017>\210\007\235<\310`\320\274\214\221a<+\241\320=\3357\227\274.\034\240=\027\320!=\222\345U=\313$L:s\031\r>N\372B\275\031(\237\275\371\222f=\242\233\006>\300Z\275<v\235&\275\373\225\215\275\0342\211\274\272\017\326\275\0016\216=\223<\373\272`s9\275\312\004\274<\3163?\275\313\337\026\275N\354\252<\037\336\246\274\034\017-\274\273\263\036>\322\226X<\261\272\234<\235\2701=\204I\367\275o@\337<\321J\222=\341\034\205=D6\013=\233\340\244\275K_>=\275\211\177\274\0245M\275\037j\245<\355\272}\275\000\352\010>\326\211[\275\273.\221\275\277\253h=\324\275\025=\nL\301\274\366y\271=\223@\022\276\253on\275\210\371b\275\3455\213=\020<\">#\343J<\031\302\307=\315JG<\307\022\377\274(\334\200\275\275\010[;#\'B<\230L\037>\352\300\304=)\223\247\275\271\266\006\276\203\017\277\274\357U\206\274+\216\034\275P\036\246\275\322\233K<\365\374`\274\326\373\313\274l\317\351;\211\334\014\275qs\214<\026\336\256<\211\270C\275\272\024\007:\276\262A<v\"\334=\252\300\010=\317M\267\274\210\220\362\273U\001j=\250?\234=\354\325\276\275\000\353Q=\365\201\021=\354(;\274\335K\\=\346I\260\274\232\347y\275\264\372\235\274\250/\020>{R\262<\207R\352\274z\307};\246\330>=\254\352\222\274\312v\213=\360U,=2\267\210\274H\324r=\350\330\237\275\013\320y\275.H\023=\205\024\004\275\227\245\251=\364\323<\275\252\237+=\334MA\273\251$\333;\354\310(<\276L\031>:\303\234\274\360&M\275\307\213\023\275\221?-\275\376:v\2737Q\016=Rv\227\275\0013j\274g\337\310\275\2450\001:\002!\216\274GB\202\274q\014\254;\355Z\351<\261\370\206\275\210\347\n\275\375t\337=\371t\321<L\017\007<\267\005\216\274\021(\220\275G\005-\275\321\n\336=\007b\277=W_\341\274.\'\250<S\200\220\273c\215~\274\227\316\020=R\027\244\274\010\226\250<\027\2272<\242\017\335:\013r4\274\354x\336=\305\004\021>\320\342\314=\\|\247=\330.\020\274d\255\202\275\352\'s\275U\322\007>\365\330x=^\361\026\275\376\0148<\363c\264=\2134M\275R\257v=\221\251\313<\316\273\367\273\302\177\300=w;\212\275\312!\027\275\342\261\345\274\357d\030\274\350\336\353\275\363\005\277\275u\200\217\275qc\3178\253\311\237=\323\327\267=\365\030\205=`\213\372\275\213\305\314=^a\214\274\365\235\030=\021d\217\274\232\014l<\346zV\275\303\016\214\272v\001\376\273\214\020\231\275\351x\377<\007\256\330=\334\3543=r\277\031\275\326n\007\276\355\335\271\275|\001\256\275\221\364`\274\035I\245\275\004\203\351<;\240\332\274\216\271\233=E\213\245\274\374\200\221<\026K\366;\276\005\313\274@\r\\<\266\034\222\2757\346@\273\243\273\226\274N\033\366\274\321\\4</W\210=\013z\030\275\377\202\247\274Zzj=~\\\036\275\253W\241\274\262\264\275\275Ut\214\275\377\313\310\274\306\3241=\250\321:;8Y\234=\005\244\253\275\206\256G\275\330\210`\275\316\223\202=\3721\266\274{\010\326\275&\214\023\275\225\241K=7-\022\275<\014\202<\366\312\267\275\215\372\033\275R\253>\274B\021Q=Sq0\275\023\226\277\275N\020\230=*N\037>kbd=\267\276\305\274\023\022\200=\203\277\350\275X\n\223<X\332\275<\307\377\203\275\377f\344=5^7=1tA=F\333\242=\364\372J\274\206=\203;g-p=\305\326\364=$\036\357\274\000.u=\031\227)\274\333\t \275N\235Z=C\367\362\274\214\001\237<\215\222O\274\240e\211\275\322\221?\275\375\316^\274\272HH9\316\353\037\275\331U\246=ic\272\274x\366]\273\274\035\270\275\177\020\316\275\260\334%\275Pp=\275\340,T\275\'\272\335=P\364\254<4\202^\275C\2631=\333J^=\367g\312\275/\240\203\274\020\272\307<8\264%\275\343F.>FM\354\275\004\177\367<\242\333\325<\371\236\365=\316(\275\273\322\321\376;\034\312\202\275(\377\235\275\242\251O\276\t\370\236\273\377MF\275T\245J<K^\t\276:\004\353<\247\353d<;\3263\275\310\375\374;8\247\237<\327\242\214=\022\226l\274\324=\230\275\251\2452\274m\254\331\275\334\356\241\275P|\241\274%\006\"=\243\020j<;\254\237\275\317\360\'\275X\n^<\214\325\316\275\304Y\217\275\027\316&=C\370\010\275\014ff\275\252R\370\275N\337\211=m]\000;K\326\217\273\260I\323=wa\320\273\212\013\002>\"\031\013;\010\255\230<a\373\204\273\007\000\036\275\246\306\257\274\372\005,\275\261T\262=\276\346_=\305\232\235=\232\324C\276\246\233\211\275\313\260\233\274@\351\215=\340.\330<\210\\d=\205/1;\216\026\336=\204\233\334\274\312\371\377<\254F\212=\317CP\273\262\032->\357-}<\213zO=_\254\211\275ud\224=\223i\311\274n=\023=\202Ju=n\367\177\274\221\365\244=\005\203\263=\357\355\365\274\2016\356=\254\3324=\365\200\336<\312\006\352<>\370K=\013f\336\273\336\247\277=Z\350\021>\r\263@\275\240@\301\275\264R\024<\022\2067=P\021q\274~\364\2679\350R\322=\r`\311\2749KG\274\035\210\256:\010\245M\274\030\326\000=\014\204M\274\301\332+=\332Ag\275\"\021O\275\375\276p\2753\001#>\372\2336\275\307M\301;\302\262\200\274\303\261\244\275\224\274\345=$[\376=v\360d=\352S\251\275\322g&=\373\360\224\275\367N&<\227\260\232<\320\327=\275\371+]=\347\034&<\206\266\354;\330i8=\r\255\276\275\333;j\275t\215\273\274J\273k\275\246q\234<SU\317<\34083=\210.\373\275\230dD=\034~\210=\255z\212=\332\264\231\2746t\313\274\262n\222<\372\000\001<\212\306b=\001\3624\275\316\267\037=\310w/\274M\325\247;\021\347\226\275ST\235\275\257\344\257\274\223\330\272\273_\301\207\275\260\321\022<\"\205\275<\234\256\230\273\301K\230=\352\233\234\275(\307\242<\326\244\267\275vT\032<\326Q\345\274\335\236u=-u\251=\206\371\272;#\t\027=XO\r\276\227\004\242<\202.\206\275m\3326\274zy\000=\262\254\220\275\024\244/\275\337\\\n\276\304\222\213\274{\016\201<\001<\214\275\016\240\000=\332\212\371<\004\311\374\275\314 \022=<R_=\217\377\252; n\235\275\211V\002\274\314X\225\275\2615\255\274\326\030\270\274c<\304\274. \212\275\355\225}<\313\314\374<\207-\230=QCI\274\t\324j\274\336\310\243\274Z#\230=\235x\250<w\3665=\001\344\024=\023,\210<\010s\251\275*\215F<\231a$<\371\024\025\275\023l\021\275\202Y\266=\177`\030=\262\211\014\274\232\022y=6\300U;a\324\204=\034d\357=\245\316\317=\203~\205\274\310\264&=\243\267\234\274T4i<\270\353\305\275\261\006]=\006\345\010\276\005\355\314<d\366m\275\177\314\233\275V\235\220=\237\177\230\275\005\031\316\275u\365t=\032d^<\206\263\207\274bHR<?-\305\272\254_\245<\010\307~\275\243\246\"\275\213\214\207<\355\231\364\275\304\257\210\275}c\275<\002K\206\275cL\301\275\364\272\251=\311v\202\274\371\326\206\275-\035\200\2730\355\237\274\'\204\324<\354\244L=?\370\324\275x\320\270\274\001c\352=\225\304\016<\333vG=h\302\002<\317\3337=\005\025\307\275*b\360=\225\025>=\374\354h=^D\262=\235\345\325\275\263\317s\275\200(\010=\373\231*\275\307\332\334=\020a\017>L\344\302=\312\t!\275\302r\206=RSy:D\271>\275iP\000\275t\200\t\276\207\324D=6di=\034\3571\274\375\345\254\2755G\200\275}\302\247\272\202_\206=%s\260;\360d\355<\250Xk\275|\334L\275\230\313\005=$\252\030>\274\275\033=?\242\200=\330\335&\275\263#\205=\247\321E\275h:\t\275\226\'\310=\364\244\232\275cv\245=\374\362v=a\357\344\272\006E\207\275\274\270\204:\235@\230\274_\256\255=!\034\236=jp\320=m+X\275R\217\341\274\\\351\225\275\023U8\274\316S\211\274o# =\272\'>=\224\236\005=\n\255\004\275\\\354L\275\272[O;\001f6=\216\234\351\273\277ac<\340\311\024<j\244c\274_\376\020=]\2779=\345\021\371\274\033\016\n;\177\306\355=\260\017\205\275ZL\200=\351au\275\261]J\275\370%\250\275\026<\252=\354\264\242\275\350\326}\275p\311!\276\203\373D\275\367\3643\274\003nt\275\277\230\030\276\002\022\335<\010 \004=\346\263\313<\031\257l=\322\303\034>\022@\301=\377\363\372\274c\225\240\274\202\020\256\275\330W\333\273\3562\027\275\3306\353\274\201\024u<[j1=x\202\345;I\336\235\2741t}\274\365\251\020>\006\273j<;\377=\275`\246\263=\351\331j\273\375\272G\275\332\363\014=\314#\334<\033#;\275;K\005=\203O\323\274\223\013\023=\325(\3608y\026\232\275?\267\344<\272f\335\275\367\332\027\275\341)x\275\237\331a=\366n\035=\256&\343<\347d\335<A\356#<P\203\251\275\235\004\002=\335\327\314<\237x[=\333(\334<\316\"F=-\270\036=`\357r\275/\272\224<\020\264M=\360\211\376=\227\014[\274\335O\013>\350\301\002=\245\246m=x*\'=i\341\230=\255\001a\274\224\212#=\031[\003\274\177\306\202\275\276\r\"<{\254\272\274`K\343<4:\235=b\250\200:\244\021\236\275\315\000H\275\231p\002\275H\032\344\275\272F&\273\014(t\275\256N:\275\rX\262<M\232u=\350\000{=\257\261x<M\310\314;\233x\273\275\257\213\236\273\323W\217\2758~/<O\253\367\274c\n\027>\310\247X\275r\336\342\274\370\000\204=\272>#=^\230{=V\252\006=\303A\267\275\221y \275z\334\247\275\372\312\214=\357\201\246=W\033+\274RA\211<E\\\024=\351\344W\275\022dz\275\256\370\311\274\364\016\371;\204\330\256=\205\274T\275Q\200\351<\267D\200<\'\r\265\275i\243};\301\362\305\275Y\234\350<\356\276o\275\264\336{=W\245\220<\030\035~\275\311[=>\323\233\324\275\005\334\017\275p\223#=\306\254\333\272n\010\027\276YL\312\274s\007\016=\367\021S<\250\316\317=CQ|\274\234\031\316\275\274\3225=\325,\277\275/\274\224=U\234\273\275\213\013R\275\304X\211\275\0061\032\275\362\314\026=\3449K;\\\243 =E\030U\275i\316\220=\330f\234=`\223\210=\257^\223=OEY<\245K\027>\353OR\275B\027\250<P\262g\275Q6\005\275\220\236\242<\212\307c\275\214\300\342\275\307g\232\275\340D\232=8\346\257=7\372|=\210:\373<\250\234\013<\n\013a<]\311\224\275\370L\336\275>\372\r<p\375\374;\226\336->\363\373y\275\2511\321:\210\242\347<\264j\374=\337\217\225\273>\242\260<\307q\247=,\035\207\274\252\207\357\274A\234\327<\032E,\275+\t\272\275\362\347\251\275\177\224C\275\256\352\223\275\026K\026\275u\226\264<\344\016>=\234WT\275\325\2252=\377\337\353\275\002\020\271<p\322\316\275\277\335\322\274c\373\373<\234\340Z=\235~\221\275\274j\003=\005Zb\273\276\304\243=\322\376\341\274\2068\177\274\n\340\312\274\366\266:\275h\353\365<^2\217=L\236\227\2756,a\274\375\242\014>\207\370\375=\377\360\2636\374#\001\272\233#\230=lA\006\275\254\352\365=\365\344\251\275q\3556<\355\323\245\275[\004\210\275\321\322\340\273\334\0272=xU\221\2751 \016\275O\203\243;<\005\212=9_\361\274\003\357u=i\246\266<\212FK;d\225\322=\205\274\026=\227\225\363\275\342\211\236\275\347\254\246=\264c\203\275\',\215=S\034.\274Tm\216=\253\310\032\274\272Yz=E\336\017>\300 \201=o\177\r\275\333\020\306=\022\230\267<\350`\030<1f\274<N\3652\2750\261\313\274Hw\215\274\202C\211\275l\311Z={\375\242\272\264\234}\275\006\"\262\275\355\301\222\275\327\305\215\275$6\311=`7\245\275-\257\341<\217\357\255=R\323M;V\202\211\275\025\321\231\275\373\276\231=\334C6=^\204\016\275\247\334\021\275\237\376\364\274\360\037G\275\234\001J=\207\266\272<\005\312w\275k\317\004=\300\225\027=\241\207\273=\023\354\210<t\321\254\273\256!\206=\361\220\031\275\002\007\231\274\351\377*\275\373y\301<\032\237\000\275\272\376\267\274\032\353\202=\003$\200\275Dc\303<Re\270\275\215D\033\275\231\022\t\275\256\247\001=\261\353,\276]#\300\275\036\207\273;\007#M=D\311\256\275JH\371\275\034\274V\274\021\235\247\274\234\320\205=\375\3227\275+f\220\274\254r\031\274\033\244U\274\207r-\2762\366|\275\205\370A=\341\2623\275PZ\215=+e^\274\246\016\240=\r\361\352\274OJ\337\275\316\272\340\275\301\003\346<\263\0009\275T[\302<\013\255\217\275V\2202\275}GZ\274\215\357\236\275\205\272\003>\212\233r;\202\034d\275\216\202Y={\260&=\341\2632=hC\264=P/7;\302\264!\275\177\235\"\274SjD\275\2546\322\275\260f\363\275\341\326\207\275\034\236\000>\343&\267\274\345 \270=\343\254\215\274\310\323\246\274\230\337n<~\310\227=\252A|=\213\014\271\275*\343\347<\017\275\"=\024\026\211<J\343\322<\337SJ\275\\*\266<!\n\022\274\037\346)\275{\331\016\2768#\353=\323\341\025\275@|\302\275\262@*<\020\2356=\272\230\314\2748\236o<:1G\275D\262\271=\350\334\313=\212\'\337\275Uq\013\274\346\277\264\274\273\347\214\275\3603T<d\025\030<\351\310\r\276\252\214\361\275\034k\361;\270\301\310\274\267\344\307<\241_\226=\tk\236\275)\332>=\342\3307=\365\323\"\274\036\260\026\274\302\003\315=\300\236\376<\265\337|=\0035m\275b\331\262\275\320\243\214=\037\303*=~Z\311<T\211!=\n\0320\275\300\324\022<k\334\240=x\367[=\207\0351\274\366.y\275\245%g<\310\2473\2757F*=o\222,=\023=\207=\013\344\327;\234Jb=\346,[=\021\373\213\274\273d\025<H\220\350\274\252\t}\275y6\261\275\226\241\355<6\355\000\274*\241$\273 \214B\275\211\222\337\2723\212\225=]05\275\032.\202=\n!\257\272\207\200\325\275Y@\356=\310z\201=\252\260f<\353\214,=]S\200\275a\001\3709\330\272\026\274\230\326G=\275\263]\275\362\327g\273\261:i=\264\232d;\014YF=\353\3702=Q\216\346\273\320*\227<\216\030b=\350\316g\274\324\2603=+\036\260=~\006 =\207<\260=\031\3567=\344+\n\273_\227\204\274>:\214\274\263\034D\275\357\021\325<%\331\267=D\262 \2768x\340<\235$\236<\244\273\013\276\354\302\221<\276\360\221\275\3562\220=-\365\203\275R\317$\275\033|\024\275:\321(\276$\021@\274\247\223\361\274\t\314\263\274\372\006A\275{3\214=\373\255c=\264\271\336\275\332\303\023\275P5\020\274vC\351<\302\351\377:\254\247\226<k\230\244<x]\325<\373\\\301=\237\037\353\275a\336n<I\337\226\275\271i&=C\274\237=\236b\277=\002\226\006\275\2722\324\275\346\313\371<\032\031c=D:=;,\372\010=\315}\330\275\223\232\231<\217\203\226\275\014g\377\274`\023J;\255W\336\275\021\010\360<\203\300m=BQ\272<8\320>\275\223%E\275k\001\230\275)\374\364<\273\010Q\275\360T\220\273e\022\260<\247\001\365=\001\356\032\275\332My\275\222\334\214<\3523)\275\326>x=\365\301B< \2146\275\312\253\236\275\212\373\300\274\355\233\024\275\336\210\227<~\330]=\320\325G\274\023}\023\273\343\230\252<\346\360\200=\271}\354=\363\223\301=Z\216\240=m\272$=D\216\030\273\221\034\362:SO\275<\357\306\"\275\366\2476\274+\353-\275 \253\007>\030\302\r>R\3519=#9i=\233\326\363\274\315\224\206=Sy\016=\325\316\245\275\275ph<\370\362b\275\363o\371<\031\231\261<\2734\214\274U\205Q\274\326\205)\275;A\014=(\240d\2757+&<\335\250$=\237#\031=\327e\334\275\343\363\265=\273\203\335\275\235\235\277\275\357\347\200=\321~\350=x\361\220=\017\332\036\275\356lP\275\265\202<=\354c\215=\336V\210<\020\366\201\275\034F\033\275\271\341\233\275\362K\021\275\346\032s\2750\330\363<\'\231a<|\317\276\275\313j\375\275\323\313\243\275\276\214\250\275\201\266\301=\023\374\304=\311\225\271\274\242\013\003=D\225\226=I\r\253\273\303\371\373\274\032_\356\275\364\020\241\275\373\271\003\276V5\030>\031\243\227<\220E0=~\205\225\275\336\2216=>Pg=\013\3532\274\200\321\355\275\325$s\2750l\245<J\323\265\275E`\337=\302\021\224\275\236\366\315=\203\026\201\275\231\003\236<\217~V=\316\205\000\275\261X\235\275\021\343\375;\177\035\265\275y\\F\274D\357\375\274\355_\302<9B\006\275l\253\306\275\003\024$=t\216=\274\223u\004\275\r\016\023\275\346\260\247\273\244\320\232\275\336Z\367\274\350\340\222\274\234\n2\275\345+_=\016Wy\274H\272\215=M\230\023>\360\034\304=\205/\245\275\374\276c=\361\335\002\276\314\373K\275G\353\332\275y\366\216\275\237+\256\274f\205]<\200\315\250\275\003<\325\274T\331\025<u:\223=2^A\275\200\274\267\274\207\255t=\313\225\366;\202X\371\275\241\334f<\266]\340=\036\266Q\275V\232B\274\267o\225\275+\202\033;Y\034\307\275\013\213\250=\317\373;\275\026@\016\274\3756\265=\205+\325<\031\315+\275\300\364\264\275\354\234M\275]b!\275\271l\232=\030.\214\274\216yK\275\347\350\027\274h\274\373<\314\002?=\031y\206=\265\336\301=\260GD\274\373y\217\2759\017\t=f\316\357<\013\347=<\356\005\346:\340\010\310<\253\202F=\364\301\315=\025\224B=\037\302D=\260\000\002=\302{\353\273\346\355\343\275P\372\177\275\207\346\002>{\245~<Q\373\000>\371{\314\274\007<)\275z\'\347=nRZ=\367\253\305\273\2309\377\274JGk\272\001\3027\275\205\023M\275\367\202\030=\233\331o<\203\326F\275\0241\304\273\204\242*\275\232Q\351\274\240i\220=\310\305\373=97\337<\243\326X\274t\031\031=T\024\305\274\341,C\275r\t\017\276\277>\260\274\332\262\261\275\252\264E=\017>}<\024x\366<<VJ=\266y\302\2742B\233\275\355S\213=~\247\337<~\332\341\274.\360\241\275lc\245\275\203\374\227\275\303\251\244<s\353\327\274,\343\253\275Y\270\315=n\260\314=\212e\243\275\212\314\241\275\200aw\274\231\322\363<\331\364\236=H\325\275\275&\353\014>\276\370\277\274>\2450=\314P\211\275\223>g\274@F\351\273:\210\350<zo-=3\'@\274g\343J\275\351nU\275\334@e=[A\234\275\372\302t\275\301e\337\274\334\356i\275\377PR=\031\203\340\273\034\355\037\274Z\270\237\272-\244\000\273\217j\210<0]\346<\376*,\275\016\356\260=\371J\346\275]\346c\275\177\"!<\024\355\307\273\257\340\036=\374U\310\274\272\357P\275J\206\357<>\2631=\322$_\273\313zk\274lT\227;mXt\275\252\037!\276@\304*\275\241\211\264=\241\223\221\275\002\n!\275\237\0076>\224f\234\274F\277\204\275[\363\264\275\364\264\351\273~\257{\275\223|\340\274\361\356\230=\316\241\373\2750\323d\274\305\261\032=\265y\000\275Eg\327<$\007\023>\361\364\333=\351&\021=\330\303\020:U\2318<\220N*=tu\207\275\255I\204=\331(\005\276\"h\212\274\t\274\234<G u\274\t\331\330;\221%\225\275W\3007\274U\001;\275\030\223j\275r\021\324\274~\034\003\276\2335\353=N\276\212=\235\242\021\275\364E\030=<v\016\274\321\035\277\273x\226\004\2754\310\014<O{\023\275x\035\002\275\274\024\262\275\320\027\247\275D\303\337;]f\272\275\352\373B\275\274\331\211\275\274E\254\2758\326\366\275y\306\324<\037\316\201;\331\252#\275\375\234[;\026>\037=t\213\304\275\351du;\235\003\337\273\277\263\370=\336DR:\032\345\202\275\206(\301=\024^\326\2759\277\220=\342\030\245=If5=\'{\230<\300mT\275O<\377<_2\242=o\267\243=\252Q\234\275\233L\331\274\003+\356<\325\377\000\275Eq\324=U\334\017\272\351c<=\244\226\266=?\217\"<\006p(\275!\337\261=\362\031u\275P\206\001<\374 \022\275\\\310\372\274?\202\020\275\374\211\237\275\361\213\270\275+O\001\276\002\263\373<q \003=\002\027\232=\252\"\304<\347\255\271\275o\222\330=U\024T\275\345u\213\272\346\376\373\275\032\325?=\311\3424\2742\266\251<\355\274\326=z\ni\275\273\230\204<\225\326\305\274\004\324&\274\3060\013;\026\253\002\275\232\310\273=\311C\201\2758\032\246=!*\000<-\310\266\273\250\270\005;\344\276\334;\333\347\002>\021\0349=\207\035\300\274S\314\340\275\271h\224\275\331\204<=\"$\200=!\355K\273$\'\327<\2519j;\256\357\201<0\206\224\275H\303\230\275\332\307\372<\3575\001=\273\312\326<\010\203\243=z[\247\2759\030\r>\206Q\005=\377\3100\275\207v\243\274\003\252\251=\206\365V\275\256[\026=\2758A=\341\264S=@\021\341=\355\261\214<\242\275#=>\021\226=\335=\020;]\026\243\275j\301\023=\034\216S\274\242\356\300=\007\037d\275|T\227<\222\372\277\275\361e\371\275\261\323\362\275A\324\356\274\266\254\350<\212\270o\274\276\352\354<6\032\254\274\010\025\350\274\210\353\030\275Q\216\n\273;\014\377=\304i<=L\033\236=c\314\207=\353\240&\275\240\374\r=|\020\221\275.\300g\275\217\027\022\275\315\245l\275C\375\324\274J8\321=8\t\370=\252$ =\372K\340\274\014\300P\275\025\010\310=\004J\356=\367\013\275\275)\035\020=i!\342=Q\320\007\274\246\304A\275\214A\247\274ap\302<\331c\262<\305Y\037\276^\307\375\275\331~\030=\'r \275\236\227\025=\236\354\272\274\305f\356\274\336-\005=\365\223\352\274\265\037L;\325\024\202=Q\3668\275\036T\265;n\215\371\274\34076\274\265\261&\274W\351\243=\357\373g\275\0040\254=\033\365*\275\005\036\027=\341\325\020\275\373!\007\276b6\005>\227\217\035=\216\014\251\274&\251\217\275\017qH\274(5\000>BJ\255=\314d\\\2727k^\273\257]\212\275v\335\343\275O\237\373\2744D\301<[S\026\276\343\333\267;6\352\001\276\004\263o\274\212\252\351\275\036Z\006\275\031\344w=\210\261q\275\271rk=\364\247\235\274\365`s=\313d\217\275\013\036a\274\370o]\274\230\027\273<\361\227\035\275\024\227o\275\314Q\270=\235\270\225\275\037\345\277\275\024\241|<L\301B=;\020\013;y\243Y\273\3114j<{\177>\274\024O4\275ExU;\024\\\031\276\377i\321<\231\356[\275o_\326\275lO\361\274\'\366\240\274O\017@<\217g\265=\363\360\037\275\200\356C=+U\336=\313\034\262\275\272\306\317;\313\022\264=\352\207\023>y\224\003=\222\036\327<]>\263:wh\001\275\373\223\024\275d\271]\275\265\'Y=\244/\217\2759\032\\<\356]\001=\\\251\310\275\251\366t\274I\353]\274\326\275\036\273\021\260\273<\261\362\267=\215\256\260\274\000\0348=\200\227\266\275\366\021\230\275\035_\316=I\343\263<\263\251b\272vE\004<\310\037\321=G\330\307=:\016F\275K\024\000\276\324\337\005<{y\222=B%\203\273\034\363=\272\275\247\005=\231[\326<x\345\210\274\\\320\305\275\355\266\210\274\321[f<\323A\266\274,\004\317\271L\355\241=1+;=}3\253\274\265\362\353<\337\323\243\274B\212\014\275p\275\026=%\214\344=\275\324\357<\n\233\014<\363\253*\275\247\342T\275o\370\276=h\321\271=\000\243\321;T\200\256=\222P?=R8\t=\017\006+=\317qP\274\343\221\371\274I\023\002=\337f\321\274BX\322\274\256F \275b\2752\275\010E\224<6\313S\275\217l\335\273\227T1<\2071+=\220T\245\275\374\244\323<\021\312\324\273\345\212\200<\\:y\274P\335\001>A\270L\275R\210{\275m9\247;\360\373\014\275\026\234\317\273\361\024\340\274U\334N\275\211r\002\276\327\213\004=V\272\004>f\3718=\1772b\275\000\363\257\275\030\370k\275\246|\002<yU\272;\037\243-\275]\315\226\272\365\262\204=N\240\006\276t\332\013>\367\270\236\275\265\221 \275b#W=r\\\367<\331\311x\275\306\\\024\275\n\216==\315\364\345\274X|\227\275\025\314p<\251p\206\274*\321\226\275^\205\265\275\210\035\336<!a\030<\345d~\275\2424\030=\337to=X?s=\211\335\213:\317\345\000\276.u\266=\036~\236\275E\025\033\275!\277\210=\341\263\376\274\361I\343\275 \017\250\275\356\233\217=\235.\243=\311x\352\273\000\267\000\274\247\2131=\030\314[\275\322;\315=\216\265U\275\204\215\354\273\274,\216\274\306\231\031>\026|q\274\216\302C\274\325l\233=\332\037\214\275\2721\027=\363\227{=%;\263=\005B%=\213\336\241\275\314\032\277=\335\350>\275\233\210\007\275\253\0175\275\273\316\035>z\216\251<\266\201\371\274_^\005\275\0027&=v\025!<\'\323\311=\211\027\324<S;\331\2750\324R\275l\275\346<\261\357G\275\241\227\001;I\311\246<\26481\275l\335\211\273(=\315<\\\246\237<\034\207\002\276\026@G=t\322\353=\377\3509\276J\2508\275\'\354\026\275T\0248:\213\203Y\275\343LF\275\000P\325\274{n\240\275\317\306\233:\326%\320\273\313!N<J\222\346<\002;\274\274@|\n\275\025\364\212=6\362\016=\231\367\001=\303\231\"\275\203R\270\275\257\201\306<\210K\324\275\325*5\275\346\225\312<8\346\236\273\254\266\006\275\3020\035\275(`\022<\263\nV=\016\031\357\274\306\255\310\273\267\017\254=\326O\351\272\037\270/\274~\257\207\275\032\273\221\274\261\253\277\275\231\004 <\371\201\301\275E\272\022\274o\025,\275\320\2653=c\220\243<\"\025\177=3+\r\276I\374l\275\343\241\370=\202\330>=\247R\037=\0261\245;\247}\317;\363\361\274\275~J\315\275\023\376\000\273\277*7\275\025,\"\276\232\365\036>\031\301;=&\240\315<hl\024=\321\\\240\274\300W\017=\2308\033\275\271\360\214<\322\253\027=\035\242\315\275\351\275@\275\353\206\225;D\3422;\230\353\024=`\331\226\2753\213\216=\014\373\303=\214\001E\275 y\017\276hTj\275\265\"\327<x\211\360=-\037\210<\312\323s\275\252\366H=\271u\226\275@\325M</\375G=\317\361A=\016\363\030\275z!<\275G\375E\273P&\277\274\353U\315;[\360\263\275\371\202.=a\246,\273\325\271\026;\314\233U=c\336\343;|\360\263\2756X\244\273\377\007\037\275HF\234\275wv\207=\340z\214=T\263\230\274\014\3765=\244\242\017=\357L\320\275V\276\300\273p\3067=\203\227\231=e\221\213\275\t\004\257=Mt\242=G8(=d\236\243\274x\363\333=I\330\330:\022w\212<\347u\245=S\006K\274\311\325\022=\304Fd\275\323\273\037=q\274\021=}\036\032\275\370\007\337<\253\245\023\276\177}\243<\327r\321\274\375\323\r>\346\\\202\275\305k\240\274d_\230=\300\244\312<\226\240\350<hX\241\274e\272\343=\311g\255=\013\206}\275i\307)\275\200\371;\275\335\027h\275\332\205\324= fj\275\264\3017\275\344vO<\375\342\207=\034\340\002=\355\263{\275I\225\301<\037\033\224\275\307a\001>55:<-\315q<flS=\240\252\010\275\205\314H<\t<m=e\211I=\357\177\265=VZk=#\337\316\275\327\231J=\001\274\016\275a\350\t<\024!b=\037\030\303<\363\326\345=\375\016e<t\311E\275\341\225\"=\263\323i\275 \3060<\2262t=\311\322\037\276\256\200\027\275\304\3171\275\023\223K=\246\0102<P\035^=\020\366#=\322\346\236=,\302\017\275\323q[\275\003\007\371\275W\317:=\212\241\307=\354\024l;w\2152=\274\205a\274\032`\234\274\217\354B\274\351\023\263\274\030\317\221=T\241>\275\265\t\014\275\334\357\271=)\367\'>\206m,\275|j\007<\357d8\2759:\261\275\305\241\253=\314\366{\274l\204(9+c\261\275\022\324\276=v\017\016\275\025GE=\036\201\021<\260\336\303\275X:+=\007\366\301<\352\031\221\275\260\200\001>\304\367\237\275\374\262\001\274J\272\003>\0223\310=Z[z<\237\035&:.\032\225\273j?\315:\323}X=0,_\275\362 \247\274B/\242\275]b\033\275\003\333\243\275-\007\377\275\004h \275\335\300\026<@\274\t=\311)\363\274\231\320\003<\213U\2249/\377\030\275Pf\245=\377Uv\275h\010\013<\264Q\230<\352o\027\275\221\013\312=^\212\232\275\341C\271<\n|\300\274juZ\274\230\220\005=\257\230\032\275\273\t\311<HG;<\201\020\024<\250\253\264<\301^\226\274\364\267\335=\n\236\246;*3\232=5\354.<k\001e<\020\021\010\275\240\311\216\275\246b\252\275O\233\007\274\235\230X={t\212<\222\036<=tV\203\275t\206\354\274$\225@=\206X\235\275C\304S\274\327\033\253\275Y|\240\274\226?\232\274Og\274\275\306\311.=H\372\211=\273X\255\2750 \001=\314y\001\274\220\275\036=FZ\252\275%J\037=\276\306\330<\347r\007<\037\330\320=\341gY\275\367\330l\275\347\3217=\347\006\343<u\260G=\033\350 \274\022eI\275PQ\234;\317\302K=\222\266\032>\315\336\262\275\336AI\275+\004N=\330\205\001>\366\2178\275\336\325\265\275\310G\033\275\3427q<G\034\257=\252\251\214=hb\037=m\373c\275|RG:\1776M:t\312F=\303;N=\022\3706\275\245\005\243<O\356\373;o\\\250=\333\227\273\275\004\322:\274\325\226\0239\t\241\024=\014\207\365=\032&\244\275\036p\276<\002\264\275\274\237\031\n=\266+d=\"\223\345\271\010\353\276\274\375_\324:Wr\215<&qs\275\252\026N\275\371h\023\275\301\363\351\275\205_\337=[\353\245\275\014\224!\2749\222\333<p\367I:\017\370\213=\r&k<\"\2357<\232N==C\364\301<Z\212\004\275\317r\320\274\263R\335\273\201\250^<\'\000\252\275\262u{\274\021\237+=\353|\242=J\306+\275\030\230\022\273\352>\372<\027\'\240\275\214A[\274\351\271\254=\312de\275fA\363=N\261\363<\020\265\301\273`Y\313\274\332\253\216\274\351\215$\275^\"\202\275h\315\t=.#]\273\216i\007>\261\003<\273\226A\207=&u\345\274\207CY\275L\321)\275\233\271}=\320\005\222=\376\226\205<\307\304\027\275\'B5\274\245!\372\2749\221\235\275\232\027\345;\206\242\273\271\275C\314\274\232B\211\274\332O\257=M\027\202<\342u4\274T\213\255=\254v\275\275>^\315<\236e\237=\204z\255\273\302\235\002\275\006H =0\256\000=\241\315\260\274\276\360F\275yw^=W]\251\275\270\267\013>\037^\322\275\324\002\302=b\320\032\276\367\307R\275gji<\267\332\302=\024\227\026\274\001\203\003>@\354\345<E\216 \276\331\255\035>\323\3504=\330\275\375=\336\274\006=\304\2101=k\346\244\275\003\241\003=\303\352\000\275\256\017\223\275u\363\350<\031\3123\274\024\367\255\275\\\206\246\275\211\027\313;J\360\245;\3160\273<\r\350X=\245\270\314=\245_-<d\'R\275*\235T<\376Q+=P[\021\274\321te=\257N\017>H\\h\275\357\220\256\275\t\226\262\275\310_\345=\'X\310=n\257\372<~E\n\276\321\266\365<m\2719<\315=U\275B\257l=\305\r\372<r\013\272\274\307\000%\276\023\313b\275\257\315\"\274\332ge=\220I\346\274$0\345=n\033\305\274\000X\331\273\331\323\314\274\332\351H\275\016\307 <F\304&>&\305!=\235\337\027=\n\n\350=\363Q9=\237)\244\275G\025\001\276\266|\351\2738\301\252<\252!\237\275\347\334u=\323^\200\275\366\024\003<\214T\250\275\331\254\367\274\3156t=\330\246\233=\001\324\316=Z\217b\275+\t\025\276\201\207\177\273\312!\300=\267\244W<R\004\217\275\322\300@<\271\263\216;\243/\203\275P\232\361\275\262\2166=(\313\300=\230\221\007\276z%T=\230.\031<\025Y\333<\324,\026\275X\\.=\227\030\247=m\017\013>bK.<\257! ;^\222\023\275\357\005\200\275R\271N9jw\003:\252\035\210\275\266\374\024\275\030\033v\275\367\215!\274\340;\002={1B\276\265Q}\274\324\366\221\274\347\266,\273x\261[\275 *\t\275\350\371\277\274\277/\023>\275\275\037\275F.\013\274\301\'\215<\260\t\340<\211/\210\275M\277g\273\351Y\273;\227F:\275!\346\327=)Q;=[\365\353\274\004\221\362<D\224\337=\235?#<w\357\305;\313\003\376\273@d\224=/\314\371\273d\277\332\274F\026<\274~6<\274\225J\334\274^\216T\275\234s\352\2750F\305<\252\305g;\221\2736=\205\256A=l\303)=[|\004\275\350\201\021\275\343#\215=PZN;\206j\002\276\204\033\233\274\315\377\364\274\261I4\275h\3336;\232_\214=\316\362\343=\265N\302\275\302\232\037\276v\361\202=`\320t\275\300\220\311\275a!?\275\374\375L\275\265\316\364\274\213\036I\275\245\353\326\275\362\021\251=\253\177\347\274\033J\304\27458\307\275\273\264\235\275\320UI\275\253H\002\276\n(\345\274E[\035>\321\370G\275\374\255[=\274\025\215=\007A\306=\235\266\346\274\327\254\351\274\372@\272=L\221\370\275\2271\322=\000\3272=T\031\370\274\212\263\037>T\376\023\275\245\311:=g*+\275\373\r@\275\005\345\017\275\307\230\006\2757KE=\361\370\360<C\367\265<m:\334<\265!\026\276\2132<\275\216\242k\2751`u\274\313\022\231\275\300X\n\275M\364O\275S\354\374\275|\242{\275B\242\227\273Z\271\204\274\245\270\342<l\0013=\235\002K\275\017\374\204\273\262\360\206\275\347\177i\275\266u\211\274\005?\202\275\2550\246=}\327&\275`]\361=E:\211\275\343A-\275O!\211\275\037\273\353\273O\2453>\276\370\216\275o\241)\275\313\255\275\274a\222\214=\223v\367\274\325\027\363\275\300\232\237\274\204p\207=\345\306$=v\222\346\274s\305U=@\3636\276x\017\026\275\256\252\357;\315\306\216=\022!\260\275u9\325\275\301\300\231\275Z\341\350<\223a\n\276\251\210\336\275\312\201\342=\307\t\027\275\201\357\312\275n*K\275\356\2246<Tt}<\2651B\275U\333\372<\n\233\224=\024\275\266\275\313\251\000\275\237\356\207=\242\356\335<$\033\334\275\367\232\251\274\221\355\274=\212D\315\274\204\321\226<H\246\326<\r9\306\275\340\r\243\272\367\337k<\033\375\242<\370m\331\274\022s\241\274\377\354E<j\351\330\274\rUC\275\177\273\n=x}{=\277\"\360<\023hC=pSO\274\222>\016\276\372\360\225<\236K\300\273\245F\316\275v\366\325=\347CE<\221\034\237\275e.#\274\\\204\016\274_\245A\275\257\236{;\341\"h=\267\0027<\030F*\274\262\355>\275\376c\266\274A\201\217<\r\356P<\203\231\026=\360\014\273=hf\241=\273s\255:\"\212S=\002y\246\274y\236@=\361\000\342=\301\214\322\274\316\232,<\276,V=E,\r=\276\027\302\2758\317g=\365\350\224=\3330&==\230\027=\214N\022\275\375e7=n\247c\274\337\030\201<J\342K\275\271\360\370\274p\227\345\274\037\361\033<\356M\300<\305\207\267\275\327i\263<\026\275\207;X\271\343<7\210\016\275\007\013t;\030\037\211<\362\346m\274t[\'\274\n\003\n<\305*@\273\322\303\360\273\243\202\023=\303A\005\275&\3424\275\262<\372<?D\264\275\022\024\333=\231 \332=\334l\353\2730\267v<C\336\213<\331\371&\275\3429\276=\214]\304=\232\316\274=\371C-=\343\270\017;6o\232\275VRr;\342\2318=\213,\273=u\266\017\274\212t\217=dA\025=I\002\230<\023\307\322\275\267\006\024=\310\202\305\275\307\360\002>q\3715<\352\336\026=\314\023\033\275\334\352\367:\350\335\177\275\3458\362<_\301&\274\016\331@\274\310\204\004=\313T\275<\374\005\035>\3348\023\275-\203\332\2757\236\224\274C\200\331<\343\322c;\351\354\233\275w\332C=K\330{\275f\020d<\375\224\032=\023\313\242=\314\026\316<\342\347\332=x\275\036=\225\274\323=\274\373\237=TQJ\2751.:\275z\224G\275\266\"\006\275\013\330\220=|8J=&\325I<\222\031\235<\243\251\376\273A\036\024\275b\321\003<\024\220#=\310w\240=C\210\212<\256\254\267;F\010\004\275\301u\346<\341\264\301<\362\256E\276yt\270\275\004wv\275\376\207\250\274\332\267\305\274\335\"\334=G\322]=@\311\260</\214\245\275\253;H\274T&\031\273\350\010\374=\353X:\275%Yu\275_+G=F6\242=\205\223E\275\212gZ=\203\017p\275#\np=S\222\364<\350\336)=\244\253\223={\251\254=\334;\217<&l\010\275\205\354\037\276\205\376\206\274Um\216=\024\3428<\352f\t=\035\310\"\275\000\354^=\353\204S\275>\217\372\275\347\026\355\274?\276\275;\270\206\331\273\356\007O\275\335k\250\275\335@5=\234\341\205=b[\216\275\317oE<\302\332\330<\2126\236\275z\373\341=\327k\006\276\371B\235\275E\217\037\275\312h{\275\303\216\271\274\275\270e\275\224\365\032\274\355_\035=\006N\272\273[\256\224=\245\356a\274\355\300\001=\337Q\"\274}\304\221\275\204+\214\275\272\246\227\274\250\324\340;\357c\325=\014\225}\275\222\206V\275s+\256<!`m\275\025a\242;0\250W<{\377#\275h\254\020\275F*\323\274bC\335=\246M\237=\204x\002<0\r\364<6Z\033\275\02154=\330+\241=\252\000\371\275C\017\360\275\235T\025;\265\225\243=\310\315\222\275n\270M<2<==\"h\312=G=x\275\214\266\343<5\375G<\340\266=\275\365A\226\274\357\320Q\273 %^=%\332\032=Hc\313\275vaa<\313\263\007>\316iU\275\332\333\237=\263%\263<\314{\023=9\273\203=v\347\352=\366\366\262\275v$\355=#\026J<\326\303?=\212;\251=\216\270@=\224\207\200\275\217\345\210;\220\222\310;}\306P=\026\241h=\3502\240\274\222\234N=<lX\274\035\360\022=\366~@=i\332m<\375\235\240=&v\206=\027\272_\274\t56>\356i\213\275j\265\227=\370]\242\275\260\300\352\275\r\331\r<i\3322=^Vo<\250\365\034:\010Z\214=rd\347\273\264\251f\275\3108>\275\203\366\231\275\367T\363<\023r\201\275}\374\354\274F\362\217\275\343\207\227\275k\0020<\357\017\207\275\330\363\213\275\2468\233;\370\350j=\323\212b\2753\007\317<\025]0=\327U\336\275\350\023\027\275\007\300\017;\367+c=\254C\316;8\363\004=\221\347\240\274\251\204~\275\023\270\251\275\250\024z\274d^\262=\251/\213\275:\211\357<\376\345G\273\013cb=\037\037\250\274,\216\'>\013<A=\206\260\300<\222\267\206=\321I$=)\r\240<\217\005\024\275\335[\201=#\\3=uC\253\275D\332\376<%[$>\314D\237=\214re\275\351\216n\275\321~\r\274WH\212\274\265\345\252<\013\372\"\274\346\347\311\275\\\340\306\275\303\003\177=/\272\212=\241H\003\276\213e\326=\017\316\242<9\032}=\305\022\213=3\323t<1[\354<\312\0051\275k\232\n\275\332\302\242<:`5\274\356n\221\275\367\036\376\273\315\230\235:\212\236\002=\225n\275\274T\3538\274\213Xk\275vd\215\274uS\231\275\246M/\274X\177\'=B\231\254=\010{\336\273Z\225\034>H\024\360\275U*\261\2759;3=5\203{\275\200\325\273<\033J\214\275\343\332\005\275\373\231\275\275,\313\303=\210\024\350=u;\201=N\203\027\275\252\273p=\021o\024\274<\204\230\274^\005\366\274\320\032\001=\014\241b\2753\006\264=\"\031\032<M\025\210<\027Pd\274\204\360\323\275}\n\205\2734L\226\274q\247\002\275A\311\211\274\2409@\275\3567\225\275\336F\310\272\366\241\244\273\2065\232\275\256\356\023\276\2009,=+\371\332\275\211\240\030=?\352\234\275\275L\004\275e\302\353\274\274\264 =\347\331\232=\004[@=q\222B=&\303\255=\275\021\330<\235\014Z\275e\021\002\275\336\003\365<\345V\027\275\3501\244=\023\022\002=\317\375\032>\335\025%\273\374QK=_lw=\024\334\347=?^\227=d\312\237\275\t\314\264\273;\263\364\275\231j1\275\263g\201\275\263\277\000\275RV\032\276\327q\314<b\313O\275\3443x;G_n<\214\264\202<8\217\000\276\254{\315<i\035E=\227\030F\274\\\225\022\275\313\351\345\275i\230+>\027\270\005\275\366\270\365=I;\233\275\246>\215\275\2609\312\275\212\002:\275\2706U\275A\341\233\275#Uc=\250\002\364<l}\224\275\314|V=<\272\210\274\352\224/=\031\370$=\256m\357\274\016\337\026\273\200\214\322;\321$)\275\214*\324\275\211]0=\252U\221=\014\334\224=\376\211r\275\305\274\301=\332\240)\274\223\200\003\273\325\360\006<,\024C=? \267;\371\301\365<C\343\365<\324\360\216\275q\005\273\274\342\024\271\275\253\312\003=\265\003\335\273\"Y\275\275\204\0238\274\326\253\314=\234/\213=\023%b\274\221\320\214<\330|^=\226\256\232\274\007\037k;\t\232\026\275C=\254<\3060\312\275\231\317\366<M\332_:\265\300F=\205\350\326\274\026\016\255\275I\376\000>\314\345*\275\335?K=\201*\243\274\360\346\033=\017\304j\275\001\326<=\335\311r=\221\217f\274\255\202\251\275\325j\204;\304\3776\273\016\270e:.\217\354\272\245>\262=\237Id\274\341\325\216\275\332t7\275\313T\374\274D\271C=\341\303\025\275|\324\177=\234H\252=J+\347<\311\006\335=\003\021\n\273\010\232H\275\257\000\302;|\215.=\352N\316=\234\024\254\275\312\342\032<\265\247@\2742\346\201=\213{\222\275J\225\t\273\342\201\223\272Y\224$\274c\021\200<?\272\241=M\277<\275W\210\026\276~\252\340\275\314\303t=\334\350$\275@^\272\275\342\210\334\275\313*\310\271?\361\356;\257\010/<\246\375\357\275\360\244m;\342\027y=*\333\206\274\333\202\265=cr\311\275WA\001\275|o\307<B\003\220\275\000hB=.E\006<\357\033\023\276\311H\242\274\366\247\312\275\247]:=*\375\270=\\\243\356\275\351\276\225\274\353\025)\275\252\257I\276\366\372#\275\376W\230\272\272t\305<\215\355\245\274\254\006\203\274\253\374\226\274\207\270\347\2758\017\347;\372r\217=<\332\020=\200=\242<\377C\007=\265\001\333;\331\036\003\275\n\234\206<@\275&=\255\030\023=\324\260\235=\3449\221<\324/\200\275_g\205\275\245\027\335\274\\\254\036=\236\333U<B\370\007\275i\344\251\275\245\031Z<\264\244\030\273\366\320\345\275?\317\251\271\000]\220\274\367\261\010\274\037U\204\275Q\333\246;\005\267\251=\017\036\216;[?[=\216\031\024=\243\\\017\275\274+\035\276\367\242\314\274\3001\261:#J\242\274\206C\303=\360h\321\273 \207\330<\350\000\273\275\013\356.\275\310\245\332\275\206\312\360\275\036\255\345\273\244\317f\275\337\337\177\275>\2523<\020\001\210<\004r\205\275\215\365G=5\034\350<\205AS\275\010\251\013\275\032\310\006\2748\200m=\276\375\206=\"\260\345=A\344\301\275#\005\331\2730*L\274\347\340>\2748\254\037=\265\370f<\372\306\257\275\025\200\364<m\315\316\274\311\370\'\274U\303\305\274\017\013\007\276\300\235\010\276\320\243)\275\257\023\230\2755\274\"=\361\027\321\274\267\306w\275\'G8=\231\330\265\275\302\317M\273\n\262b\275\266|E<:\337\037\2756S\035\276\204\376F=\211N\002\275\035\000w<x\n\275\273\254\3428\274\014k\022\2753\324\231\275\270\363\373\274 \t\255<\320\033\226\274\346ik\275;-\343;\354\321\247=\250_E<\271\\_\275\353\257T\275\255\035A\275\234\227J<6\307\231\274\217\267\255\275x\005\241=Q\037\246<@\314@\274\304\036R=\306\"\333\275\244x\322\275\265U\270=Xp\332=\354C\030\273xP\022\275\364$J=p\036\204=\225y\353<\000\255Q\275d\001\013\275v,\317<\023\306\037=\311D#\274\326\350\364<n\203%;\274\201t<T\316\321=\226\315\322<\007o\207=\014\241\"=\037\217\016=\010\205\014>a\234\326<\224\372\302<\250%\037>Y\363\276\274;x\\\274:;K=\213z\221\274\351\324\201\275\277{\360=Zo\265\275\353b\"\272\200BK=*x\307=Ni7=\",\246<\344by=\330\232\222=\213\201\202\274\000\242\305=\tW\201;E\275\025=\3635\245=n\331\332\274#\212\247\274\353\022\243=\356\201\253\275\033\346R\274\267\235j=+\253\016\275l\215\n\274\274U-=\204d\240=\336P\205\275i\211\266=\024\"]\275\337,F=\302*f=\027\021 =\351\2325<\366\363\215\275\030\223\007\2750L\007\275\370\265\264\275\2612\025=[\261\202\275?\226\205=\277r\246\273\303/\336\272\036@$=\366\005\024\275\277|\377=\271\3473=\347\001\263=i\330\251\2747\311\302<\3633\230\274\013\035\022\275\370\340\034=\376\343+<\022r\020\275\243-\240=\300\361\241\275!\tS\274\337g\251\2751\252\236\274\330\324\312<3\271n\275\350\260*>\337\002\023>\342\244\203\275\225\004==\353\r\\\274\036Q\356\272\005\226r\275f\273\272=\364;\005\274o\305m<S\243\377<E\276\t<\001u#>\001|\226;\002\262@=\265\033\022=\030\315\334\275\266\252\251\274.\352\221=\037\020D\275,\226_\276\024\250\244<<\204\216=\265\236\330<\203\304\022\272\021Y\032\2758A\361=7\023\364=U\030\362<-\244\215<;&#\274\036>\340\274\352\355\372<\037VL<\024\300\276=\3403N=\204\351x\274-\336G\275;\324\261=\013Z\325=\331\267\374\274\214\354\231;\267y\264=\322\321\005=\362\200\304\274AT*\274\213I&\275frq\275\275;\347:\350N\375<\221\002\272\275\303\3138\273\341y\206\273\221\274\t\275ym\347;\344l\350<\241\217\221=\2506M=r\345\r=\323I\370\274:\310\224=&\323@=\373S\245\275\r\313\260\275\303\237\200=f\362\235=\\{\371=\r\214\245\2756\243O=\201^\310\275;\023\214\274\322\247\232\275\204\324\220\274P\270\262=}\217\347=\236sy=kl\272\275\003\211\203=/\356%>(\220\'\274\2553O\275?\010\223;h|m=7\n\344\275\354\305#\274\316>\206=P\224D<\023\355$\273\207\334\355\272\222\300,\274\270r\023=\245\377]<\251~6>\0002\305\275,>\231\274\265 @\275\211\306\001>\251f\033=\275GD=G\316/<\324x\030=\375\317\005=\261[ \273\236\'F=\2426\232\272\214\220\334\275\211\300\233\274\244\002D=\365\261\260\275|\003\232=<\246\232=\335\264\037=&\003\025\275\335}@=\2668\277\275\\ ^\275\312j:<\"\204\320\273\311=\324\2755\370\272<\003\324\020\275\233\236\347\275\322\376\036=d\221\023=\027h_<\303\372O< Rj=O3\031\275o\341/\2757\2469<>\030\267\275\032\025E\274$\3258=}\332\252=E\001\013<\207-\246;-|\023=\362t\245\274\272}\223\275\330D\200\275\373,\246\274w\217\270\274\000\246\254<\210\365\206\275\035\206\017>\373\036\316;\375c\031\275\274\272\016<\tPk<\265b\204\274\246\2211=\010T\220\274\031\340\364\275\361XK\274\310G5\2741;\262<\026F\212\275\026q\261\275\335p-\275\356\214\215\275a\206(\276\200\236\216=Ms~=\327\004\321\274\335\275\232=H\315\242<\244p\270\266^\353\326;!\021b;XM\222\275\366W\321\275\024\036\035>\363\232a;\363G\336\275V!!=?n\341\273\202\267X:U\021*<\204\302s\275\252C\376\274e\034\314\275\021\304)=\221O\032=O-\227\274|\346a;\332;\'\274\2414\025<{]\241;\310\355\273\274\2378\234\275\253\275\211\275\341\024\205\273\274\246\017=ii\305=\222\036\200\275\255_7\274\236\201\320\274\212_{=\003\324T\274\243\027\001\276Jk\313:\301\014=\273\267\336\031>\366\233\256\275\005]\214=\005\215\205<\275T\267<\2440\373=\312\227E=\217\217\217=w%@\273\206\202p\275qu\362\272\264\271\203==5\000\275(\2454\275\265\361l\273\323A\342=\376%\246\275\300\354\036=aD\242<d\030\235\275\322%\033=I\255D\275\023\377\201\273\021s|\275#\355\t\276}\344\036=\034\3132=\211X\261\275I9\250=\230>\325;\232\205\307<\\\273\234\275^\333\340<\262*\177\275$\303f=\001\273\237\274VA^\275\310\231\277\274\207\202\212=\327\351\206\275>\333h=\236\350!\274\234\336\275=n\370M>\023\243u=\030s\251=\252\205\263=\354$$\274\261\006^\275\014\276T<2\221\213\275\314Q%<\240?^\276arT=!\260\324\273nM,<\276\014\232<\324\367\214\275#\217m=\245e\225<\362>\007=\345U\236\275\000\212\276\275\014\272.=\230e\2579\312\230G<\027\211\275\2751\237\330:*\215\342\274@\322\260\274\267\016 =\305@\"<$\251\177\274\316\235\253\274\370\372\310\273<\374\002>mr\372=\312\211\312=\361K$\275\311\004\277\274k\035s\275\016\243c=\377\215c\274\365\353\223=\214\025\274<\277R\326\274P\222`\275\201\3673\275{\320x=\353%j=b\032\316<]_\013>4H\212\274\027wu\275\277\005h=J,0=\223\321]=\314\205\317</_\177\275\271\200\014\276u\344\020\273m.\255\275O4s=\351\024[=+\241\252\274\366\265\"=\361s#\275\007\272N=\362\330\267;zS\205\275\365\036\266=7\027\253=\221\240\271=B\342 ;\247\307\256\274U,\212=\215\317\207\275\354_\316<\236\002\257=@4N\275\353\030\224<h\203$=\001\276\365<\343\267[=\302\255\013\275m\314u\275\021\n\360;\271\260\204\274l\026]\275\254W\326<\260J\301=9\263?<\325<\030=BDl=\002}\210=CC\204\275\242!\024=\013f\326<\021\304\241=}\005\032\274\036j.=\235\317,=t\315\375;{p\310\275\353\252\026=\270\375h=\005\336e\275nC|\275\210\232\276=\3448|\274nY\343<T=*\275-R\241\275q\316\210\275\\p\247\275\024fv=\364m\022>i[M>-\345\230=\026\307\030=r\254\240<\373\027F\275\003\r\334=\234K<\275sg\324\273\272\221i<1\316\216=\212\026\304\274>\307\304=\335j\374\275\036\312P:\262#\244<-\204\210=\300\227\224;\336a\302\274pBm=k\347\003\275\360\310\227\275\314\272\242=\330\370\245;\035\201g\275&>==Pa\360\272D%\320\274\0056\270=\223\245\262<\356\225\241=/Z\017<fTy<\236\302\353\274^\021,\273*\234\302=g\212\203\274\031\321\017;6t\260\272\"\177\343\274\303\210\274\275\333\020\316\275Vf\205=\'\213\205=2<\213\275$\306\204=4\323\034>(\364\002\276^\253\211=\004\245\245\274\326\226\320;\227^\032\276+\310\273\274\276@\253=\372jM\275y\234\024\275\037\025$\276X?\207=\372\002)=\352\250n\274\033\252\226\275#\261\234<k\001)=\250\2122=\360\370\213<M\272\273=p\263\203\275\227Ft\275Z\264\363<u\204\327;~\374\\\275\312\333^=b\251\262\274\342>C=\177\256\214\274\2341\271\275\021\240\001\275\226.h\275\271\3019\275\330\004\274<\245\350,<V\013\367\275O\031r<\315 \260\275n?\017;f\367\323<\321\256\250=\037\262\203=\270H\212\273}@\326=\2361\275=\'BW<\216\010\'\275\245\333\322=Q\361\310<\366}\224\2759\022\377;\231b\336=\251\340\221<\357\200\207=#\013\261\275\222C6=U\341o\273\031\2308\274J\310\024>\275FY\275\321_\211<,\243\231<;\236\343\273\2144A\275\223z\327\273\263\351\031\275\364\231\245\273\3573P\275\200\217\257\274\332M\335\274Tu==\213\271\334<\347D/<\376u\255\275\001J_;\323\206\224;$\371\312\274t=-=2\032\307\274\314\033\225\275\230\004+=\317\2146=u\014\366=\230\226f\275\213\033\231<\230\006\270=\235x\204<J\217\374=\217\271\034>\274<:=\247b\200=\206|\034=\227\371\226=j[\350\275\035!4<`\260h=\3601O=\\\317\004\275\177A\200\273\274l}\275pm\321\275]\301\246=\225/\265\275\330\345\274=\335\037\322=c,\244=\234x\214\275\332\0359=\177\222$<zh\272\275\204\302\333\275\301\377z:\330\'Z\275A\350\036<\350\324\201\273\275\201\340\275p\343\353\2755+\270=\305\314\017=\252\204U=\354\n#=[\257><s\016\230\272|M\335\274G\362\032\275\263\261\215=\025a\005=\264\316\210\275\372e\305<\216\322\242\275\360\010G=\244\004\276\272\373\036\234<6|4\275\310\007q=t?U=\316\334\272=\212o\230\274r!\023\2754\335\227\275S\335\362<\316h,=\033\301\000=yD\264=\367x\272\274\000o\373<n\320\002<\343\310\232<7c\274;g\330\022=\206\345j<I\204\254\273\335\365S\275\340\211\203\275\203t\204=_\257\342<\315\317\267;\251\222g\273\025\274\266\275\246\2633>mZ\315<+\027\312\275\201\266T<\222\212\320;\374 \331=\243\241\234:\221\261!\275\342\270\016=\346\006C<\344\354\306=\230\"\272=\324\r\264\275p\321\353<\211\327i\275CL\236\273\002c#<\265\035\331<\241\352s\275\366\362\260\274\200.\224\273\350\330\341\275\253\373<\272\222b\325\274\323\365s<\026\033\251;\025z\231\274[$k=\213W\247\275B\211\352\275\324\374\357=\313\276.\275\035)T=U<\201=3\021\020\275~&v\273\340rg\2745\262N=\211F3\274\237M\236\274?w\031=\254\307l\274.\346\027=>M\331\272\325:\245<\312\242G=\205\240\322\2743\274\210=l,\001=j\241\355\272{\007\277\2743\013\273\273\304\364\210;\253|\273\275\014cM=\016Z\362=[\276l=\276,\354\275\221X\324\273\357l\265\275X\350\275\272\332\332r\275\341\360\231\2755\353\261\275\342\037\025\274\361)\261=a,\n={\024\010=\203\365\016>\354\270\242;\352\302\021\275\317}\331=\013r\211=H\"\345<\242\004\302\274*w\245<\350\026\224<tm\007>8\321\312\275\236\243*\275\237u\260;\216\335\002\276\252Uq=\201\331\311\273\211Va=\027\340|\275\230G_=\177\262R\275\311(\326:\224l\036\274$\365\014>\226-\225\275U\230m\274O\327\312=<\221H\275a\324[=\000\245\034=\223\337\034=P4\307\274n\2611\275\314$\313;\321\221\001=!\350\316;\275C\323\275\266L\306<\236\342\251=\253K\272=\355\035\362\274\207$\224=\005\312\262=\252\240\250<&\355\361;\352AI\275\235\274\024=\235\304\\\275\321\244Y=\236\224@\272\272\252~=\032\274\370=\210?r\275i\207V\273\240dT\274n\332\340\274\014\246\310=\027k\226\275\256\360\221<W\235\203=\005A\257=N\254\001=\262\3234>\313\212.<\017\356#<\364a\216<\235\3611<<\216\347\274\231\352\334;\274\206\327\275D\274\026\275\032\301\007=\340\"T=ru&=\010\352\224=^\334\203=\235\234\002\2740\324\000\276I\272 =\344o\322=<j1\275\350\261n=\345A\241\275\341y\333\274\230\205\214\274^\025\027=a\365\230\275\220\000$<\235\361\363=W\320\220<4\370#\275t:*=a\271\332\2741\261T=\335Q\260\272\377F\323=3\371\235={\023\036\2755\356\351\274\267\t\266\275\344\365\370\275\226R\277=,=\235;\316\236\302\274!\2711\274\301{D<E\342\257<JS\226=\2107#\273N\356Y\275Ei\036\275\303iw\275.\262\203=g\372F<i|\223=+\014G=\363^b;A\224\202<L\314\247\275:\222l=\272\207-=8L\345\274+\024\224<8L\244=zj\364=p\210\263=\332\276\221=Qd]\275\363\261\275\274\022#p;\336#\312\275\377\345\227\275\347\263/\275hx\272=\035\346\004\275\362d9\275\250\212\024;\0146\252:\301\033G\275\242\305\214\275`\263\023\276\004\352\347\274\247\374>=\245\031\033\274x\210\267=\310u\037=|\264\201=;\233;\275\273\327\206=1\004\177\275\2655\000>hdE<\036\343\226<\006\272\221<\231j\236\274\204\343\201\275\370\200\211=\025#\275\275\341\021\257\275i\207\230=\313\337\'\275\2267\246;\2577)=\274\226#\275\232\276\360\274\346\217\227<o\322k<\257\265n;\251\035P\274!\253g\275o\264A=XX%=\314\031\247\275\221\td\274\231J\014>\256=\n\275\321\306\333\275k\326\313\2742\035\354<Eb\257=\333l\254<2\374\253\274\365\261S\275~.\357\275\225\216\366=\204\354\235\275\351\024\312\273o\272\267=u~\241\274V\257\221=\205\275\273=\212f\035\273\206\003\345=\265\274i\275\324\346\231;_?7\275\305\261\305<\315\237\351\275<F(\275\332_\024\275\032\304\224=\022\237%\275\032J\213=\264\023\004<S\3422<\240n\337=\307\276A\275\021)R=\354~\330\275\030o\311:}c@<X63=\351]\231<\322\213\313<K\004S=B\205.\276\333\242\277\274\356\245E=y&D\2746F\366;\215\022\201=\361\352\362<\203\020\213\275\271\236\206=\277Tr\275\310G\025<}\306 =\362]\210=\232x\316\275\371S\217<\307\315d\275\340\251%\274\276\231\227=\246\216T\272\241\016\004\2761\206Q=\363\300\303\275\000\220m<\365\201\345\275\360\330\217\275\024}(\2725/\251\275{\330n=\365\r\314;E\0148=\2230_\275i\242\207<\3333\240\275l\327\227=K\006J\275Bc{\273\035\250#\274\334\223\210\275K\347\025=\344M\335;H\254\177\275\301\025d\274al0\275\220\304\241\275\034\367\222\275\373\031\266\275ag\005\275\027\013\263\274\036\245\221\275\320y\244<\332\354X\273\306<\340<\372\221|\274U\202\013\276b\n\205=\031o\201<Z=\206=\010\014x\274*^\001\276\245O@=\367F^<O\220\3428fl!\274*V\207=\323\257\253<\324(i=\202a\231=\2433\267=2\024\r=\245^1=\234=N=\337\006e\274\330\326\252<\027\211\272\275\355\r2\275\326\222\231<\2549A\275b\306\207<\2451\321\274\233\202%:o\257G\275\304\244\353\275\352\273\315=/Z\337\2741\006\244=\302\365\260=w\215\322\275\205\303L\274\363\"\301=z\257\247=\321\177\240<\305\316\251\275B\0140\275\r\217\244\275\310~\231=\025\342\032\275\016\217\331<\022n\306=\225\361\245<\336xe<\253g\273\274\316:F=W}\371\274n$V\275\036l\002=\333@|\273A\250\\\274\201!\244=\002g\222<\317\006\026=\002\300\346\274\257\252f=\362[\245\275\222\236\037=\342\313d\274,\215\354\275\341$\004\276r\307\273;\330\006\344\275\343X}=cvZ\274\257_\346<\337^\350\274\365\235\244=\222?\316=1\007\243\274HqH<y\323\241\275,\353\345<%\361\007\2757\246\r;\022y\002\274$\200T\274\213\364\362;\t;\277\273\321\260\363;\222\235\224\275[}A=\243\376\007=\222\374;\275l\027\016\274u/\371\275\202\211n=u\277.<2\355^=\321<\242=\341\252\230=\376\270\330\275\367\351\002\276\220T\026>\201\032\312\275\332\340\210\274\230\212\242=\323^_\274E>X=_!\206<+\301\">\030MY;\377\002\362=m\nO\275z\315#\276:?\215\274\t\264\210=<NQ\274l\344Q=u\334\374=\254C}=\n \221\273\nI\000\276\232\311\231=\247R\207=\313\004\353;\024\350\222=\313{\200\275\204\030t\274\363\010\321\273\ru\353<\340]\356\275e\245\253\275?d\025=\265\305\036=\320\004\020=J3\005\276\020\253\233\275\243\233\r\275I\"-<\000\323\277=\347\263_\275\003U\210<\367\211l<\277\361\340=8\204\320=\344.\267=&\262\366\274c\246\275<\260]\303\275T^\211\275u\013\030\275\017\231a=s^\263=ZQ\272<\345\273\264\273\331*F=\026\020\302\273\016\236\016=9A\010=\227\233U\275\220\226\004=\306\037\'\2753\367\006=\270\n\035=\327\003\212=\017\200);\217\232I=^\214\240=\370\216\261<\373\267\367=\260hk\2742j\201=\345t\245\271\253\024\320\274\341\314\177\275\347\010z\275l\216\227\273<\261Z=r\002W;\226+\256\275\314x\350<M*\027>\326\014\376<(\365\207;313\274\213\351\347\273\226\314\032\275\314\365=\274\005\037\010\273\002W~<\027\002\352=\tc\204=\375\310\331=\353\213\254\275\332\215\213=\257\362\202\274<\311O\275\016\226\220=\303>\215<\330\253\250\273j\370\235=9\211\326=\224\351u\275\252\226\344\275\321\224\016=\263\257\361\274~\022\320\275\224\314C=\037CD=T@\033\275\366\262\022<\022e\274\275\260\362\334=c\333\343\275\310(\350\275(\250d=\221\033q<l\252#<\002\264S=\245\273\016\275\333 K=\342\323\202\274\263\262\342<o\352\357\2744Cy=0_.= \306\203=\215\366\034\275c&\033=\214\275\325\275\317M\227\275\224\251\263=w]\223\275@\014\013\276\327u\212\274()\3129\350?#\275\3278\267<\262\337R\275Qyc\275[\366)\275\240\313 >\025\030\357=\244.4=\267\0279\273dgo=i/\304<C;\020\274\331\342R\275O/-=$\267r\274\223\242\221\274[\330\354\273\177\007\253\275\353\213\231\275\315\342\000\274\243[\r=\212\016*\275\212\274A\275\312H\201=\220\'E=\241^G<\353\363\000\275,$\331\274s\233\361<^?\227=\264\0340\276\006n\256=\246\252w=e\366z=\372\372\266=\200\261\326<\257\222\271\275$X\367\275\273{\277\275\202@\330\2739\374\350;\306\323\302<O\356\303=\216\021\336\275!\363\306<\265]\350\272v\345\366<\333;\330\274x\230\301;vT7=6\361\003>H\305\020=\026~\335\272F\204$=\370\262i\274\264\224\n\275\337\000\204\275\314\301\265\274A\r\225\275\031\036\315\275\236\216j<\372g\262\274a\032\253\274\\\244\263\273\017Nc=\314\212\256=\t\362\022=ygl= N\275\275J\372\242\275\203\013\260\274\370!\224\273G\372\331\27437\256\275zl\232=5\366[\274v8\216\275N\034S\274\2162\213=\364q\305\274\340\032\234\275\r\322 =\364^\346<\300\233\325<\305&\177\275\207\331\260=-Q}\274\276!\206\275\034\313\021\2754\362\312\271\237\336\031<AzH\275\260\243G\275\362\305A=\211\267\266:\246\016\234=\261r\031>\241\263\340\275\273\271\264\275\262b|=\312!\210\2758\020\231\272\247\201\274;)\243\301<y\357\241<\344\256\203= \222\007=\014.x<~m\r\274\241X\005>\2032c=c\006\300=\"\367\t=m\013h<\225\233\332<<\231\244=\261\"<\275\032g\360\274\010\272*<\010\021\234;)q\242\275\223U\003\275(\233!\276\201TJ=d~\303\274S\262\270;\352\\\212\275\351\223\006\276&\261\n\275a\256\320=rm\251=*\212\332\275\276\244\206:y\326\211=\263\272\002\276\347\337\\<\245\006\233\275C\")\275)\"\002>\222\355\n\2756-\307<c\341\243\275\022\345\255\274\013\324W=T\303\202<\356?\035\275\340\304\351\273\260y\216\274(\303\001>\035\256\260\275\375\020\226\275TL\357\275h\225\231\275\322\334\230\275\305!P\275\211\221\254=\360\377\233\274\257\024>=X\345\010=\'g\013>\317r=\275\322{\246\275\275\317{\275\257%\340=\222\377$<\325LK\275E\274\236<\205}\241\275*0\374;\272\036B\275D\356\207\275f\307\021\275P\222\231=u\247I<\262x\271\275\002}\200\275\347\246\262;\351\334@\275{\255\224=I(\264\274\010\212\027=\031k\263;2\365\007=y\r.<C\266\337=\031Tp=\327\024$\275\347\212\216=\016L\350\275\271#\246;D\253U=\225\222\003=f\365>;\363\240\311\275\222iz\273kmf\274\274{\020\275i\326\014\276.\313\214=1\277\221\273\016\321L\275\2751\241\275\032\242\216=\353\231\301\275\370\221\020=\274q\215\275\376\010\r\274``\215\275#=\204\275\024\0043\275\305\345\346<+R=\275\323\333\313\275\235\322s=\307\221\260\273\326p\325\274\266\013[=d\021G<\031[\010\274_\034\037\275\257\223\277<\276\331U<\327\355\t\274\344\220\311\274:\016I\273\341\374\306\274\232w\306\275o]\351<\376i\342<rS\262<\253\3166=\264\"\017\275\212\316\001\275\016=\231\274nD\023>\341]\004\276\007\263\252\274`r\035\275\360#u\272\017\3549\274f\2607=\303\360{=)b\331\275/\212p=\335\016D=\321\344\274=\253\\u<{Y\337=5B\353\274\343\"\344=\037\\\271;\272\336\347\275\363\321\260;\364\274\325=\353\007\247=\272Hf\275\227I\234<\263y\354=\312\250\214<\362\t\213\274p\213\204<\177Q\017\274p\261\316<\272\321\322=\331\323\003\275m\276\031=@\032\245=N1r\275\375\004j\2752\266\026<\000\232\322<\351\177}\2759|R\274\003O\375\274\022^\370=\177\273\257\275+\023\312;\222\r\363\274\322\236\266<\375&\266\275\n\303\301\275(\234\241\275\247\213Z\274J\301\250\274\236\324\014<rY\247<7J\233\275\242\277\203=@\2659=J\326=\2754~L=\356M\204\275\257K\343\275y\303|<\215\266\014;?1+=+\010v=\356\325?=\26693<\210\231\300=\\\362\260\275\332\257\210;@i\206=2i-\275\246M\005>\0241\030>\332\030\265\275\037\032\002=\360\2528\275\362\246/\276,\341\034>s\207\334\275\216\272`\275\244\264\375\274;ju\274_\177\024\275eq\230=\301VA=\337\306\360=\002\306}=\021u\360=W0\365\275\034\037\334=C\'\357\275\325in=X\223|=q\360\234=\0372\020\275\225=\006=R\376e\274\000\216\213=\300B\200\275\2129\033\2739\201\362=\264:\301\272\025L\237=\003~\221=\032f\373<|\210\203\274\365\343\3579\3225\006\275\037]\215;P&:\275>j\236\274\243\366\355<\371a\032\274U\016\267=\322\206\364<\014\223V\274|\220\030\274J\207\312\273\3558T=\017\2221<V<\204\273\035\3604<QP\207=\371\205[\275=\237\211=\267\333\263\274\230gH<)\277\023=\201\250C=<\240\323<\262\204\332=qW7=\0042H=:\271M<\343\004\244\274\352Q\n>\323\206^=-]\003=\276-h\274\035\354-=,i7\275\323\034\227\274\362\301G=\370\014\201\275\031\277\330<\277\316e\274\245L\024=0\035\t\275J\303\"\275r\216\211=\247\261\357\273!$]\275 \r2=\221\017#\275\260.E=\332\237\311;\013c\030=\300\345t<\311D\002\275\332\030\255\275\353\020\277\274\2729u=)X\363=\244\275\267<<\277\241<\334w[=\217tD=\263\341\036=MJ@=\027\253\212\274\022\336\214\275\254\361\000=\016>k<\256\326\256<\026o\265\274~V\211\275\350\273\377=\326\336\267\275\0348u\275?_\346\274\270\022\224\275N3T:~`q=\003\005\211\275Q\256I=@\352\321\275o\340m<\037\266=\274\030L\333\275\260y\206<\324\246\021\276\262\021\216=|\020\005\276\335L}=_e\203\275A\021\202<\265I)=|\024\267\274n 8=\210j\260=\003\363\255\274\223t\371<U\005\001=\315\3046=\014\221\213\275\023\241p\275\313\252C\275\326\r\316\275\327\204\322=\n\311[<\003\355\001=\005\302E=\252\033\034\275~\274\313;n\333N<\311\237\353=\320O\264\275c1\242\272S\332\274==&\020\275\030v\333=)\204\037\273\036\263\263\275A\2748=\007\020M\275\272\r\300\275}/\r\274 \032\263\273\207\264B\275\272\007\'=X\343\024\274Rx\202\275pNl\274>\204\326\275!\334\243=\035;2\275\314JK\275\003|\t>N\022\304<\265!\206\274\216\021\304\273\271\237~<e\300\215=8E\235\274}\237z\275\241o9=P \305\274\314B\007=S\312F=\033g\020\275\350\263(\275\223\350s\275\271\350\231\275\321\177\233=\220\304K\275\214\036\337<7\027U<\261Q\0249\335\312\227\274\200Z\013=TQ(=\253\020\326=\254\206\002\275\376\276\240\274\310(\371\273P\034\214<\320\263\036\275\363\003\215=\204\373\023\275(\r\211<\360\210\225\275;\237\003>f\264\324=V\344\316\275l\256\030>\264\243\303<\270\312\271\272\344\020G<\355\351\270\275\241X\327<\223?N\273}\241\321=\371\327\213=,\320\214\275\350\362T\275\255\336y\2741\356+=\226\214\031=\245\307\204\275N(\007>,\322\300\274\335\207\355=\310B\266\275\202s\247<4(\377=@\255\340\274m\356\343\275y@\200\274\351\311\027=\255\222\315;!x\274\275V\277\375<\026\260\240=\t\303\360<\236\007\372;\327\250\221=\022\330L=\370n\002=z)\033\275\346\303\026\275\307D\252\274\355\236\307=+a\264\275\232{\031\272GV%\275\204d\264=\240\026\341<\270\332\356\275H\220\214\275\305\336h\274\017\310\365<\334o\322\274\307O3\273\225\372(<Y\305\255\275\033\000\225<\230\300s\275_\373\221\275\203]\014=\275\007\001\275~\001^\275\200\010\251<\307\213\263\27367\345;F\344j=$\032J\275\253\231\203<7e2=Ny\271\274\307\0241=\350\356\005>\306\246\315\274C\010\223\274i\251\217<\242\020\206=@\265\224=\203\313j<\205\021\340<\316\323P=\tm\347\275\273w\257\275\223\177\007=4B\316=\212\331Z\275\254\320\001=\\\321\n;>n\266\274\355\356\014\275\304-\016=\204\tz=\253\345\265=\016\002W\2751\0220\274M@\336<\037K\305=\211\2140=\0301\021=\326&\312=\250\327\n\276\372\363\213=D\272\205\275c\246\003\275B\372\222\274d\351\252<\017\017\274\275`\221\007=U\271\316\274\003te<3\355\340\275\371GP=q\341\225=.\362\223=o\340\200<\362\276\211\275\245B\030\275c\224\245\274\244\224\033<G\232\315\275\251\216#\275\236\336v\275\022\322\024=\000\035Q\273\263\271B=\"\254s\274\020\037\001\274\354\345\301==\025)\275\326Uz<\206\320*=\334\\\035=\201\357\204\275\3378\'\275\314\364<\272\366C`\275\371v \275@\341$\275\335\313\353;\311\266\321\274y\276\263=Xxa;iBw\272@\247C=\344\372h\275\363\357\242\274\212\271\207\275\3635-\275\006\004)=5d\315<\357\260e\275\203z\227\275\233\311\234\275nk\021\276d\244\245\275E\230\257\275\246u\207\275#z\335;\034\2709<\257%4=\207\221\017\276\366\240\030>\260\3744\275^z\203\274\364`\237=\261\'\354\274w~5<\275@h<vw\023\273U\367H=%\321\277\274\275\360\036\276Ce\"<\340oW\274/\271\242=\323L\221\275\205E\257\275\205\370#\274\355P\202\274O\322\267=\327l\222\274\202\322\324<\364\276!=q\324\350;\022\250\225\275p\317f=\373p \275\326\240v\275\313%\353\275\341H\221\274,Gv\275;\250:\275s\022C\276>\313\305=Y`!=\306\016\220\275Bk\247\275\353M\342<\330\346\013>5\030\322=\375\335\241=\004\343==\363Hb\2753\241\034>\307tp=\307`\014=m\251\227\274\263h\030\275\024\373\323=`\023\027\273D\201\255;O\214[\274\234\215\211=\233\217\240\274\200\024\035<\316<\242=H .\275\3571\034\274\354]\370=Ls\001\274\0276p\275?/\203\275Q;[\275tC\211=\257r<<\217\237\241\275\337\201\033=\317ON\275\003\345\242<\"\376\021\276+\302\374\274+x\020=#\260\315\275\036\355p\275\242-\244\274\322\300\021\273\373~\201\275\371A4<\217\233\232=\315\025\372\274\251\225\307\273\367 \214=\016\000?\275{\204%\275\237\375\201=\322!\274\275\225`>=U\303\353\2742\303\337\273\215\260\316<w6\321\275\020\347\030\276\037\354z;W\313\212;\215\300H\273w\212\373\274\264\033W=t\225\263=\325\345\241\275&\206\307\275\301\301\335\274\301\3718<\3676\252\275}\213d\274\333\336%\275\005\372\r\2755\272\322=\206\247\267<\225z\222<UQ[\275\352\333\232<\006P\r\276\243~\302\274nb\351<U}\357\275\340\241\364\274\314zK\274A\362\024\275\272N\373\275\312\332>=\233\270\033\274\240z>\274V\223N\275\3054\306<\352\3159=\036>B=\220i\274\275\236\032\254\274\024\265\334\273\001\226\262\275Z\236\217\275.)\231<\242\215\226\275\010&B\275\351\235N\275\246\377A\275\272\272\001\275\256\222\217\274\003\\B;\200(\200=\310\365\203=c\347\334<\374\024\333<\017q\204\275w\260\267<\311\256>=\253\020\037\275&\372V\275\345\322\364<F\240\310\273\0200D=\031\325\365<3?^\274\t\2044\273U\213P<\354h\007\275jmj=\300o\302\275\220\270\376=\003\374(=\022\022\263<u\307\254\274\362\005C\274\232`}\275\372YL\274\240\315\236=7\301,\275)5\317<\340\021\344::\311;\275\206b\007\276 ed=\320\033Y\275\037\203\326<\26306\274\337\345\354<ope;\335{\031\275\367yx\275x\370\200\275\353\177\017\276\204\237\204\275B\332\027= \031\237=\247B;\275>\3067\275\245{\305;\302\232\370;l+\251\275\367]4=\275Js\275\177\207\247\274.U\376;}kW\275\373\201\004=\303\356\336\275\315 ;=\246j`=\2763E\274,\326\002\276\361\370\000\276\341;\t\275?\364\374\275i<\204=M\232\333\274\357(2\275\\U\267<\3659\271\275\305\233%=A\270\265<\2426S<\300\036\371\274}\004\035\273\3523.<\344no\275]\370U\275\226\224\321\275\271\257\016\275\316\373\265\275\356\266\311;\367\013\206=\321\205e<\202\314\264\2752\327\277\273\036}\274<t\225I\276|\200\360<6*%=\265\313\254=\246M\211=)\337\r>\227\335\276;Q\201\311;\324zx\275\244\306-=+xx=#\237\002>\2715\213=5\226\371\274\202\007d\275\356\231\303\275\341\210\021=\305\356b=I\276\002>\337\2527\2757\037\262=\236\246*>\343tJ==\265\255\275iV\303\2755\342B\271\277\203\226=\026\021\277=\027\213\251\275\321\006\035;P\343\230\275\212\231\255\275\301-\320<?\327\324\273\321Y?<\327\\\254=}\032\330\274\203+\300\274\305\240i=\003\223\377=\202w\314=5\276\312\275s\026\022\275\270[\014\275\300#\236<\020~o\275\034Ey\275\334\354Z\275}\377\203\275v\206v\275\327\345\200\275Nr\306\274\356\304\t\276\005W=\275\353mZ=\206\231#<s\257\177\275\r\213(<HR\247\275y\277\003\275\254c\327<\372\\j=\375b\276\273@w\r=J7\251;\341\301\224\275\323I2=\276\331\271\275Jx\360\274\0208\346\274\016\351\216\274%bv\275Na\211=\344B\014=\205\222\276<n\n\273=\221\'\211\275\327\273\234\267AWH\275\'T\026<\225\204\027\276Z|\243=\3521#=\363m\330\273\2642N\275\"5\265=t\223\034\275\361 r<\275\257\032\275\334\274T=\236E\252\274Lir\275h\025x<\010\201\233<\320[&\276+\327\210\275\257j\243\275\3325\210<\340\225\307;\200\352(=\307~\000\276\303\214-\275p<\372<OC\232\274\024#\017=\356\\\304\275\2511\003=\343\303\021=\003\331\250\275\326K\277\274d\366U=\253\200U\273\343\271\276\275\201P\273<\266\312\326=\322\330[=]\237\376;\201\212;\276\374Gg<Y\\\\<?\001\217\274\326B\236<J~~=\252}\217\275\340A\367=\220zq\275*;\300\275\002\207\270\274ZR\265\275+?\016\276{s\364<\034\200\t<\376N-=\232\320f\275\010\371\036\275\204\347\312=\302K\022\275\222Q\035=$\303\034;\313\214\232\275\034\026\311<\231*\306<{\377\220\275\205\346\226\274\313\330d\275\374\344\255\275\204\267\005\275\271|V\274\2739\204\275\2062\237\273\375\030:\275P_\316\274\373\266\321=%\035v\274)LP=\304\301\312\275f;\215=$\210\250\274I\363\021\275\211\253\320=\tVZ\275#\352\211;S\002\202\272\317F{\274d4\355\274cP\346\275\320J\365<\357\267\211=\271E\000\274w\362\034=Z\335\177\275\376cI\27587\226\274f\343u<u\273\227<U\303`\275\177\345\205=\335+W<\376\350\"<\036a\026<\031F\237:\0334\252\275\237\314\003>l^~\275\177A\021=\227\302K\275\204\357\210\273A=\033\275\037\006\r\274\027\377K=\260\005\305<\334r\021=\177&\344=\212K\202=}X=\274\"r\233\275\375\003h=\303\377o\273+\264v<Ez\376\274\215\314\323=\223U\212=\301s\265:\272\230\364<>D&=\014\265\302\274\001\240\001\275\252);=\370\030\365<J\304\227\275p\273\036\274G\211\202\275\265\366\356\274\350e\306=\016\210\244\275#\323\257\274\233\247%=\272}\217\275\2443\362\274ZRz\275\307\031\263<9\357\272\275\307\016E\272\363\024\004<E\0345=G\314\263\275\334c\223\275\031\325\212\275\326\376%=\200\031\244\275\317\007\310;}}\303\275l\275A<\242\357\311<\221s\360<C\027t=9\322\362\2754\303e=R\\\210=v\343.=Q\357\022\275(A\236\275\207\344\363\275\315k6\275\014\337\265\2750_\203=\013\276}\273\017\264-\275\272\315\031=6\353U\275D>T=\227\314\244=|~\376<\270\223\022\275\225\251\350=.%2<Et\364=\336\231\207\2755\352p=l\221\237\275\326\300Z\275U\324\347\273\377\205\244=\302\225\316\273\206ZK<\2100o\2752\016\001\276\310MT=2F\035\273\260\221S\275\211c\202\275\357\r\365<}\271\347\275\231 \375\274\034<\033=\277\353\002\276 )\230\273\220\335E\275,\211_<~S\241\274\227Df\273^\343\210\275\354\320\241\275}\034\203\275\213\336\026\273qG\n\275\250\211\n\275\221\r\326\2758>\227<\311K\337<\303\032\274\274KI\353\273\304)\305<\201\372c\275\331Q\025\276\030s\217\275X\325\021\275\227:|\274x\010\230\275M\303Q=\355c\347\274\275\204\031\275Z\r\205\2755(\332=|\247\307=\302\352C=\221\251Z\275#\367\213\275\367\036\035\273\021C <m\316\257\274\216 |=.\003\374\273M\230~\274?\223_\275{\260\352\275\256\230\242\274$)\312\274\317M\276\273\303\205\316=\031\n\014\276`\312\007=\263\003*\275Z\302\224;2\317\334\274}\014O\273\247\345><\027\260\226\275\327x\274\275\276O\362=\236x&\273\351U\223=\240D\006=\210e\267\275\336V\213<\024\355\034=\363\325\230=\202Z\275\275\007\212\253=\210\026\037=\3721s;\234\250\247\275\350\316\275\272\2465\213=\351S\001;\345b#>\241/\320<G\326a<\221\023\224\275\370\2661\275gv\317\275\"*z=\216\220\033=.\257\031=\r\204\326\274\233\2570\272\256\254/=\2753\347=\233\025->\251\216\363=\247\\\203=E\257\002\275=\343\245=\345\361\340=\327\200\300\275a@\204=\023\265\306\274\235\r:\274K\261\210=@(\220=\252\240|\274\317\341\001\276\033\373\322\272\034\266$=\307h\302=\233i\003\275\311=\024\274\371\221]\275\377\017\314\274\345\305\030>s\320t\275H\033\311\275\265I\014>n\366\316=$/\201=\353\230p\275#\203\273\275]\215\246\275\213\273\273\273\266T\217\274\334\237\021\276\270r#=\177!\354<L\245~\274\375\362\372\273\020\361\264\275\370@\377\274,\366\002=&D\217\275\356\022\245\275\233\016\202\274VZ\317<\257{\375\271\360\302^\275\217wl=\221a\272=\207\332\243=)N\211\274\244\2546=\016\014,\274s\037\212\275L_\237\275yF\310\275\372\240\341\275\220\312\220\275?\037\014>\350\323.=\327\211\355<A\331[=\377)\251\275\373\340\207\274\"\322\203\274e\034\222\274\233\005\035\275\200\005\306\275Q\247|<\344+\235\274\365\'\010=\341\221\340\274:\243\240\275\334V\201\275s\347\360\274\266\337O=8\361\201\275\233$B<\3734\371<\245\224\223=!\242i<\335U\027\275\034\177\342\275\256UV\275\225\240\010<:J|<\254F&=\265iW\272\272\252\254<^\256\037\274\227\301J<\377q\257=\233\035/=Yh\372:\274\025\024\275\034\177\203\274!\203e=\3651\264\275 \374\257=\361eI\274*\023\225\272\266&\025\275\014\237\314<-LC;\306\210K=\365\342\236\275\360\275&\275\251\216\332\275\323\013\021=\020\326W\2742\357|;\347\343\331\274\202\304\302\273|\300\324;\343\010Y\275O\206\013\275\254\002q\275\251\2200\275>\036\332;r;\326=3e\303=Y\371\312=&\021\300<\342N\263\274\370`&\275\"\003\234<\330\226\205<\333\335\017\276\201f\030=\264\211\013=\024J><,\021`<\'\030\027>\030\263\315\275@\2718=\201M\335\273@\365\036=K>\240=;\373_\275nW\250=\032\332\232=!z\217=\342\030\272\274\37103\275 \021\017=N\367\035>`+\177\275b#s\274)\251\374<ZN\032=\313\301\257=m\000s\275\377]\257\273\354\222x\274\004\257E\275\004\000\355=_2\304=\200\022\247=\230\016\026\275\240\213\016\275\330\362\032=]\361L;\031\327\226\273\036-\000\274\326\000\305<\371=\262=3T\037\275\366\264l\275\013\020\333\274x7\321\274\236f\211\274\334\326\005>\335\307I=\0024\377=\201\277\236<\003\313\035=&\2063\274,m\301\275\377.\035<1\035@=\231r\201\275\257\364\315<p\021\320\275o-\026\274\2335I\2759\372\313\274A\243\006\275\211\n\265\274\231,\267=\200\2771\2757z\t=S\200{=\027<\323<\205\305\246\275|4\303\27501\233<\301`\240\275\364\325\r=N\217H\275\265\313\202\275\305\240\234\275\361\033\010;L!\r\275G\203\377\273\261\246\026\276%\332\346=\240\262\305\275\021\n\247\2758\273\261<-\200\274\274\021Z\016=nY/=\t\353\332\275\345\255{;\233!\"\275\336\264c=:\260\364<\322\2763<x\347t<\"&\274\275\201\223\340\274\224\013\203;\253\364\271<\3154\330<+\355\010\275\352\036\273<V\350\227;R\260\231=\207\013==}\277\377<|\005h=f\366\2059\363\305\n\276\t\000\360<\271\364\311\273\342\275\202\275\007\216\000<\235\2576\275B]J\274N\265\202\275H\t\265\275\\+x=c)6>\005\027\245\274Gj?\275D\'&<\312\250\204\275k\332\266\275{\347\213\274=w\334=\246>\260\275\3430\301=f\'\202\275kq\020>\257\267\303=I\245P\275(7\376\274\nq\253\273\274B\374<b9K\274\237\267\360\273\264\210\371;\303\357\260\275D9\001=#c+\275e\232\343=\377{\272\275\3656\303=\020[\253\275\234\3024<O\222\250=bf\005<H%X\275\240v\027\275q\t\263=hx\000\275\022\374N<i\335\360<l\327\321\274\017,\310\274\315E0\274p\323N\275@R\234\273\0050\246<\321#\021\275\271\372\221\275\262G\363=\023}9\275\376j\302\274\207\353\201=\026\000 \274\261\333o\275\016\267I=\357\307\355\274\302^\273=lk\251\275\370\017\332\275\312\203\007=\356C-=<\t\261<\245\016^\275\217\326,=\263kR<\267\326\207=\202Wt=\313V\313<TZ\255\274\247D\217=\000o`<pd\014\275O\016>\274Kw\n>\"-B\275\223\312\007=\273\310D\275wYk\275\333\346\310=\226\325f\275\232\027\275\275H\264\224\275\365\376N\274\250\342\224\274\227C>=\tB\221\274\230\260T=b\360\360=\272\316\214\275\222f}=\312\026&\2757j\250=\260\304\213\275<\r\003\276\200\037#=\346H\241=<\000;\275\321\0162\275\271\221 =\002\002\351\275\327m>\2763j\356=\344\215\275\275\237\302\273\274\376\351\332\275\334\020R=\356\032\365\275\207\226\325\272\366}\'=k\244\036\275Y\306\240<\t\322\022>\262\301D=:\311\220\274\315\r\236\275\022\n\032=\213_\0078\324\302e\273{,\177\275\211K\322<.\177c\275\236\341\233\2756\363\336\274&7\234=\332d\212\275zt\244;\332\212\032=l\364\362=\345\3147=-)\252\275\345\020q<\255\263?<\352\332\177\275:\201\234<C\301+<L\371\201\274\247h&=7$\260=\2573F\274o\346\231\275\210\351\266=Q\343\270=\266-\026=\221e\335\275s`\037>\211\220/\275\377\342\251\275\000\343\200<\rB\353<\314\330\313\274\325\362\207=_\2640\274\276\323\214=\266\350k<D\013\342\274*\301)=\336\036\223\2758\010\355<\236c\'\273v\361d=c)\240\275Xw\303\275L\333\312=\037x\266=\235\232\033\275z\254\236\274M\213,\274\357\261Z\2756\235b=G$C\275\017\255\217=t\033\374<\341\022\206\274\244\247\222=5\331\256\275Fqg<\304N\336<W\345\223\275s\205\342<%\372\331;\352\027\320=\316?\035<`\377\256=\220v\264\274\252\361\256\274\241\252\373<\034:\013=\265i%\275\225)\273\274\340&R<1W\370:\260l\247\274\000\341\023\274\213\016\241\275\204b=\274\315\360\013>\273Dp<\347%\320\272\234id<\220\354A=\253\367\355:\315Y\266=\253.\201\275\213\002\030\275\276\"\232\275.L\201\273\245~\357<\262&T\275\247\366\227;3\237\234<\020\234\224=\004|\t<\273\356\255=\250o\262=,/o<\376\321\214\274\225\252\t=\233L \274\232\263\023\275\275\213\357;W\007c=\262\232\244<\303v\372\274Z\002\201=c\010e=\\\305g=Qy8\275V\2174\275\223\324\253<&\353\252\275\001\010t\273\2408\216\274\036\217]\275\277Xd=*\230\312\275l\232\215\275\316\014\273\274\327\365\374<\027\225\037<\374\333H=\027\377`\275\344w6>r\252\220\275\306\273\'\275\300\377\'\275\007\274$\276\265\032\264=\214\244\t\275\014+,\275\344\013\002\275\324\341\037\276\002<\001\275\244-\230<\227\205\t\276\255\271\333=K\330Z\275I\3046\275N\226\025\275\326\257\273<\3467\261=\010\337\203\273\210\350L=\342\214Y<Z|\233\275\374\355\331<-\247\217<B\273B>\273\300\364\274z1\034\275\326\371\006=\312\024\022\2746\343\317<\234\r\335\275/\247\251=/\353\342\275>\245\264\274\347\354\246\275\021cm=\264\030\275\274\035\336\256\274\021Fm\274\373\312\272\274`u(=\326h\345<\375c\035\275\237)`<\201\254\274=\007\361\344\274\337!\367\275*Z\272\275D\230\317<\240\333\331\274\335\363\235\267\314\344\365=\350i\003\274Rv\257=\252^\'=\331:\334=A\313\370\274\224\376\n\274G\350\315;\013\320\367\274h\264\214\274\211\274\267\275#\251j\275\262\317\215=\236\032\260\275\371G3\275\227\361\3609P\177\227;\204_\001>\306\037\354=E\222\274\274\335\363\240<\344-5\275Ve\264\274G\023\325\275\231\023\336\275U)q\275\272\210\313=\t\252\262=Y\177\233\275\333\307p=\327\216\267\275\326k\221\275\267\213\242<&\031\221=\332\346\353=y\n+\275\000\254\217<\312\005n=\036\337\230\275\016\017\255\274\200\332[<\255i+\274\222\256\367<\214\215\230<\032\241]=\355g\"\273\324\016T\274R.\311=\316o\255\275Z\352\253=\314\244\000\275B\330p\275|\340\037=\374\355\204\274\270\207\362\274\222\346\231\274\345\232+\2751\305\201\275\257C\223=l\020X=|\033\343;\366\0026=\254\323+\275ZM&\275\320\336\317\274\214z\010>gPo\275\rAT\275\256i\222\275@\345\243\275\307A\250\275\"U\007\275\250r\230\275h\337[\275~\357\334\275\241iS\275/\204i\275\254A\266\274\210~%\275\324\203\021\275\233sD\275\242\372\276\274>\252\265<o\"k\275\3647Y<\032hs\274\001V5\274S\204\253\275\257s\367<\2103^\275(\255\220\275mOo\275,\347\234\275%\303\313\275I\267\230=<.\270\274\334\014\217=\177\224\350\275\235\204\016\274\251h\254=\347\305\n={\200\257\275\274r$<\230\034\360<\350D\223\267]\255\240=\177\200\267\273\025\325m\273\377J\201=\213\226U<H\t\207\275\027\204_\275\375bY\275\232\356\027=\307AS=Z\364\211\275\2246\354=\342\211\352\274\204\265\037>m\\\256\275A\314\320\275\342\320\320\273n\253t\272&\004\230\275\342\226]=%\214\212<$E\301\275\356\013\351=%l\216\273\270\224\007=\255j\t\274C\236\000\275\000\325m\275\330\177\371\274\340=S=\23036=t\2629\275\330\267\217\274\377W\276;g\001\267<L\200\214\273T\254\365\275S[\016\274\300f\264\275q\377\321<\342\212*>\264\310\231\273\237\0269\273\374K0=cuh\275\027\214~\275\342z\227\275K4H=\362\233\347<<\214\307<b\224\010>\307\373-\274\256\001-<\342\205\312<\304\352\241\272 \302<=\200i\020;H\254\327\275g\204\353\275\n\214\347\274\231\313\272\2730G\350<\250\375\244\265qX\311\274\002>\014=l\301\313\274\016\371q\275\270GD<\365~s\275\"\363v=\367\352c\274\265\276\326=\273D\013=W\214\022=\342+{<\031\246\361\274\224\374-= <\312\273b\353-\275$\365\006<\266\210d\275~cW\275\234\n\312\275\336M\222;p\306B=t9\373\272\3728\024\275\351\004\341<\254\\\005\276\014t\326<\276\237\241;\227\322:<\267h\236\275\t\306\211\274\r@\350\274\276\222\334\275n\373\232<\'+\330\273%\244\003=\032/h<!6\037=\363\256:\274\014\307q\275\345\273#\275)$\020\275a[\203=\034\347\203=\236\236+=\354Cd\274\014\177]=\225~\177=[\002\310<\370f?\2750K\303\275\007\252@\274Ef\n=k\304Q=)\351\017=\177\345\326\274\"\346E\275[\357<\275\216\016\025\275\360\372\001\274\010\007\017>!\033L=/~\211<7\272\227\274\305\307\305=\276\272\303=2\377\026\276\241\325\272\274\251\320\226=\262}\027=P\3371=\017#\023\2766\\^\273\234\337\366\275\271\373\235;\322\335\320\274\'U\231\275K\331M\276\356\205\362\275\222\035\345=\000\002\351\274\0338\225\274\240\3654=\270\237?=;\253\035=\210\341\002\275\341\273\332\275\247{F=\356l4=\232)\341\274\232\2531\273\204\031-=N|\300\273\035*\204\275\341\252U=\021\010\301\275\243@\220=\323iF=\200\306\377<\037{Y=P\321\343=\331\251 =\277a*\275\263\023\355\274\203\001\034=<\203\200<\2734\271\275\013vP=j|\353;\262\330w\275\310b\006=I\0351\275\002h`\275\212aH<\303\177\243\275\243\355\023\275\267\250g=\030\224\252=\340\232 =e\354\016\275\250\250\243\274A{r=#\220h=\312w\306\275\377\272\202\275\255\013\233<Y\2722>S\231S<\274\213\261<\312\362\307<\320\314\232\275R\311O\275\021\027\362<\320\257\311\275\213M\256<\347\327\264;\354\223\261<\373\200(=NE \276\2276*\275\306\241\n\275\214\233Q\276\n\020\300=$\025*<\r\312\007\2756L \274b}\210=]@P\275X?2=\317\260\364\273\235\242\232<\n\303&<\315\345\'\275\271l\215\275\203\373C\2757\312\217;\341\221`\275\236\020><\266\337\327<\226\022\273\275\277I\017\276\335o\351=\035\327&\273g\027(\275\372H\023\275d\022\230=\362\313\202\275\035\217.\275\364\375H\274\256\334\316\273\365z==\302\260\260<\242c\355\275Xg\366\275x\374\221\275\301qq\275\355@~=\001S\362\274\017\235/=\314\356U\275\005\327d<Ijg=\021\210V\275\217)w\275]\261\r\275\271\304\251\275\354\177\345\275\024xM\275\376|-\2751\316\305=E\255t=\340\255(;[\253\r;\361\024\221\275\010\033\342<d\260\244=\331\256\005\276\260?\365<\226\237\333\274\030\026`\275m\363\035=\304\254\262\275\276\276\374=f\350f\275\257\347\233\274\327\225\365\275\206$\273<~\336\333<H\377u<\014\347\243\275)\261\323=L>\004\275A\216\254=\306\357\276\274\227<\\\275\213\324B<P\313\001=\304oT=\007\000\377\274\021<o=\310\261\215:E\\\262\274\003\374C\275\260\363\266=\005j\371\274Jr\307=.\335\216<\335\354#>\213\340\312=\371\024[<\224.\236\274\312\033\n:\304t_=rYu\275\024t\327\2752\342\344\275\203\002/\275>j\226<\315\300\232\275)-\010=\216\356*<\313\340\345=GK\201\275\014x\036\275\223\266\334=\034<\212<#\313\"\275\267aQ=v\327\237=,\236\301\274\006\301\034=\235\021\354=gdS9\252\007\305=\375\034\014\275\362\006i\275\253\275\031\275+\350\331\273\024\352e\2751\2254<\375\366\315:\342\003\004<\265\226q=\332.m\274\213\244\326\274\272}`=\363\004~\275#\316\004\275!\034\305=\231r\367\275\"\334\'\2749\000\267\273>`c\275\264\030\000\276\022\036\200\275\306Il\275$\354\222\274_?W\274\305\374\036=\243}\261\275K\324\375\275\221\244a\275\037}/\275W\361=\275\213\257\n\2757b\271=\351\276\032\274\247\nN\275\216&\\=\336)\214\274\376\332\r\276\010\224r\275M\'\010\275!\324d\275\230\320\363<\260\r\214\274\347n7\273\217\251\264\274\331\366\036=\256\277\275\275F\213\222\275~2\024\275\r\225k<2\240\250\274\210\240\334;E\r\026\274S~\301;\361\315\232\274\317M\325=\373\251\355\275[\252\361<\242\232\325\274\250U\360\272 S\235=\2546\245=\345\241\004<M\310H\275\37785=\251\343\247\275\351N\261\275_u\343=t\334\002\275\250\243\316\275\322\303y=\374\257`==\255\272;ZJ\301=\354\224\241\275/\007\256\275\374\227\330<\026\206\241\274\344U%<\260\203\315:gB\205=\315\241k:+\237\220==A\003\2759i\231<B@\027\275\240\261@=\204\0262\275\022\302Z=dW(=\230\226O=\273\330\3459\232\207\234\275\223a\217=8\217+\275\261V\343\275b\320\354\273,\254\244<\347h\365\274\226\344\300\274b\340\022:O\ry\274_1\233=\260{~\273\302\025\332\275\002\356\030\275$B\313<\016\362\017\275p\n\370\274\354\321O\272\202\006\025=F\277.<\221\235\030=\257\3243>\203\234\220=u\247\214<_,\232=\344\273&\276\031m\004\272\343\266,\275\236\254{=:\211\005=W\277 >\226\3613\273$X\234\275\246\367T\274+6\341=\357\r\333=\277\025\234=\222\326t<\365\321f;\021\271<=\'C\375;\264JP=\247.\233=\354\207\212=\366}w<V`\331\274\31714\272\351\371L<\231%\273=\377\352\260\274\257\037\321;\200\326\324<\357\377\355\273\030\233\233=\236\226\364\275-c\336\274*}\\\275O\003\205=\336E6\275\217v\231\274\331\000Y<jq\262=\334\2741;\225\242\010\276R\327\002\274\240\373\243\275\374\217<=\316#\035\275q\367\374<e\221D<a\314\251\275z\246t<\344f\262\275\022W\307\275\342\262\251\275q\355\374<=!\372<X\204?\2759[\323=\022~{\274\365\360\305\274\030\236\211=$\024\351\274U\365&=l\276\243<\343\325\031=\010\034y\275d\250\177=\264\026\232<\355\323\030\275\037\212\270<\257\261\304=9f6=\244\0162\276\r4\206\275\005>\237\2748\020\022=q\332\264=\367{ =a\275:\274\210z\245\275:\360j\275\240\020\213=\242\365`\275\202\324\310<\336\207#\275z\036\217<:I\210\275&E\204<\333\216\251=o\343\031<\333\017\213<\003\306\262=\207\r\200=v\375\305;\341\271!=U\023i\274\217\027S<Q\307\200<\252\035\024\275\217\301\325\275\304\t\005\276>\224\031\275 c9\275\267\235\203<\001Vp=\266E+\275\251X\235;\356Y\343<\315\305)\276\023\366X=E\352\261\274\310\300*\275f\344\370\274\354\211\264\275\205\\8\274B\203\201\275\020\231I\275\202!I=^\'v;\224\005\355=\345\232{\274+>\270<M\'_=\316\377\341=S\033U\275\035`;\274l\3771\274\337\217\334\274\030I\013\275\005D\225\274]P\265=\310OP=\013\034\253=s\332+\275\247\177\265\274Q\003\031\274%\006\212\275 \227\272\275\253e\235\275AM\201\273Dfc=\243\235\210<k\201\357<\211a\230\275x\317\300\275\007\322\036\275)S~=\311\255\330<Km\330=\327\207\357\274\260\330\374\275i\004\022>p?\004\276}\001+\275\310\310\241<\007\341b=\372\313\200:\205\233{=\261\225b\275\220\374f\275\261\246>=it\017\275\014p\027\275\177t\035=O\336]\275\324\037\001\275\"nE\275\376[*<y\2441\275$s\327\274\037QP={V\266\274\320\231\341\275\307\022\302<0\360\022\275\246>\362<\322\003\263\274\321\3741\276\346\211%\275\002\261D\272\031\000D<\370\023\263\275\253\340\225\275.\014\246<\226\020l\275\033R\t>{`\200=\322\000\317\273N\027\301=\272\301\341<\354\347)=\030\265\303\274\221T\233\274\350v\266\275Zq\217=\021t^\275\320Q\026\276B\027\r\275\365\245\377\274\244\021\246=. -=\250\235\354<n\344\"\273\206x\370<\022Gw\274\245\371\023\276.\206\017>\260\'\260<\301\360\367<\002\252\r\275\262\206\330<\314\257\240\275\341\316\\=(\277(\275\247%c=\232\360\327=\"\220\316\274\232\250\210={\2549=R\264(=\325\001\353<\334\032%=a\314y\275\224\"3=\355:\014<\233:\025>\327\252\250<B\271\320=\314k\276\274\010\327\222\272<qV<\250[\226=\370a\226\2753^\"\276\374\021\251\275gtT\275\215\217\013=\213\013\316<.$T\275\277T\243\275\034Z\213\275\2467v=%\313\266\275\30251\274\000\021\272=\215\235\372\275O\375\222\274W\341\313\274\374\201p<\353\334\366\275\240=\312<hf\020=>>{\275\217\276\200=(\264\346\275j\022\206=\374\004\024\275\341%*=\001\024|\275\245\310\272\274\252j;=@\221\024<\233\240G=\230\232\006=HPF\274\023a(=\267~\327=2\210\206<\005\003\344\275\\\331\253;|\225\346;i\321\361\275/+\003\276\331\371\270\274%\227;\275\002\222\302\274\206\357\225;\350\331T=Zd\005\275.$\272\274\212\025\353\275[\320\304\273B\362\240\274\277\345}\275\010\213\315\275\016\026c<\355\272k\274u\271t;\323\260\230=\215\2075=}\330\253\275S\023\017=\316 [\273_h\031\274)\033`\275\355\025\030\275j<\312<\350\234\032\275\370\306u=\376n\356<k14<\325\200{\275\014\342\261\275\314!\354\275J\027\214\274@\024\031\276xR&=\274\254\234=3UR\275\227\336\030\276\236\'\276<\331\375\370\274\021!\026=\032\244U\275\344\256$\275\252Q\216\275\311G\337=\337\331\323\275\242\314^=\004\204\"\275\364OZ\275\307Z\245\274z\354\201\273\035z\031\274\256\376\327=/\235\010\275br\357<\204\254a=\336r\336\275Pb\220\275T\3260\275dg*;l\310\t<\315\234\245\275|\203\237<\251\225m=XyC=\314\200\326\275k\326\273\275\2760\342\273Y\235\204\275\311\334\322\275\002hw=\273\337\275\274|+k\273\316Z\250<\277\223\330\275\202\360\310=\214%\313\274\024\007\250\275\\\346G;s\253\202\275\014y\307\274\231l\347\274\363;\211;4wW\275X\017\354\2740\333\343=\337\203\305\275\304\335\246=\363\001\224=\311\256\007=%\t1\274\317\244`=zs\273\274\212\0263\275\332\035n=\3574\240\274\214\030S<\320\301\277=\252\242\034=\033\"\032\273\215f\265=>\223\373\274\330\020\243=8\375m\275\311\260\340\2755\365\211\274\017\200\201=@\374\271\274q\343\207\275\275/\373\271gq\200;\206\340\357\274VE\324<\243\007\334\274\265\212G<\t\250\021\2769\236V=\016.\017=3\210\016=\364\323\020<\007\350\021=\370\315i=\345\336\363=\242\362\025=\027\345\244<6\\\340<2E\235<\3467\t>\236\203\221<y\364\247=l\251,=\002\205Y\275\220\240\201\275\245\"\350=\305\367\037\274\224\313\317\275\322\273$\275/\024\323<\nI\311<\340\364\300\275O\305\034\275a\030\356\274g\314L\275\247\277\305\274\0336\316\275\022\307\205=*^\305=\227\365(=X\031\244=\303\016\330<gQ\002\275\027U\202=3\333o\273\321\244W\275\'A\031<\345\033\010\275\236\365\034<OF\260=\017\265O\275I\375\271=\300\027j<\251\247\247\275W\206\001>\365\251\312=\3577y\274$\217B<OmI=\265C\273\274.\231\220<\230\311\313<d\251\002=\\\241i\275\301\230\255\271\177\355\'\274\3741\035\272\304\036\177\275\256\216\363\275}p\000\276\022O\252<\000\033j=\312\004i=(\302O<\225MC=\361- =\254\2554>}\247\363;\2701$\275\214*\234\275t\360\350\274\354W\205\275\344E\311=\223j\274<HuJ\274\270\343\t>\212^\030\275\215\343\251<\337\367\203<\311\207\207;:\221\354\274<\350C;g[\251\274\217v\213\275\307>\325\274x\350\210\275\007j_=#v\256=FY\200\275H\t\270=\267J\352<\246\0371=K\227\241<\207\254\325<z\346\000\276\021\"\272\274\027\001y\275\\\337\003\276S\317\010=\004\002\210<@T\266\275\372\312\317\275kB\355\275f\353\306\274K\356P<N\320\270\275Co\221;\204)\034\275x\026\244\273z\236\361<\005,2\275\226\346\254\275w\260\320\273\222\275\213\275Di\377\274\010\266\023\275}\302\267= \367v\274C\320\245\275qU\025=\264v\207<\243z\255=w3\224<\205\275\372\272\247I\324<\255\227\030\275\274\234\272=\375\r\311=\257\224\205\275\367q\371<\316\n \274f\307\177\275>;\250=\325U\327<%\241>=\021\270\242\275\177\"\346\273K\313{=\335( :\002w =\252V\335\273\361\264\362=\016\243\270\274.R\237;\261\277^\275\361\224\221<\247\223<\275@h2=</\263\275\220\277\366=\200\027\016\275\3409\341\275\341{\020\276=*L<2r\037<\3553\335=\266L\211\275L\325\202<zf\251=\223\2539\273\021\025\262\273\276\tT\274[\006\311\274\242Q\200=\247\000\001\274\261O\007\276DZ==o;\023\273\303X\321\274\272\346\006<Nhz<\336\0336\275\226\246!= \223\211\275\034\356\242=\275M\262<N\320\312\274\033#\226=U\246\004\272\272!^\274\365\352:\275&\247\226=\037\347\274\275\303k\310\273\241-y\2750Cp=\331\202\362\273\352|D<\323MG\275\236\006/\275\345#\033<ZW\177=\227/\331=\265k\333<\007s\305;\313\233\203;\360\320\354<1_\024>0\327\332\274\322\256f\275\271v\260=\355\342\330\275<\177\310\274\215\036\236\273\313\311\272\275f6\220=a\215\006\275\264n\004=\225\377\343=\276\314\'>\354\331h;2\177O\275\270\344.\273J\307\316\272\367\235\336=\247m\304<\027\006v\274\0319:\274\373\322\261<F\355\246<<?\336\273\261A\003\276/T\232=}^\027;I\3747\273\r1\373<\331&~\274\005\247I=\376`\245\275}P\273\275`5\344=h\3434=\242\305R=L\017\344\274\316\216\365\275\027\340\224\274\240\342I=@|\360\274\362z\036=\330\244\027=\033\365\276;\366\r\025<\317\227\325=L#\276\274\231sQ\275\343Y0=`\366.\274\345RW\275A\262\005\275=\347\367=\342\340\363\274f\030\217=T\023\"\275\344\366\357\274MrH\275<&J=p#N\275\356W\031\275\206\263\201\275!\343\222\275?\177\036\275\367y$\275\211Z\177=\340\342\323\275\333z(\275\237\205\210=^t\256\274\225\036\022\2757uT\274D]/<o4\303=\253e\264<I\225\325<\003\001<\275\325\010\241\275\311\2630=\2640\343=\353\363\252<\237l\304\274h\315\222=fb\226=\242\376\302<\0304\211;\353\243)\273\234\256\211\275\246\225\024\275l\227_\272\034y{=7\225\321:\344\261\004>\034\376\202=RpE<l|]\275\343.\026\275\277\225C<\332?\233\274\3456+\275=\346,;\330\366\344\274\201L\032=\036\254\202\275\331\300J\275\024\225\333=\027+\214=\020R\234\275\275\343\003>\255\000\356\2746\264\223=E\340\001=\344\302\014=#D`=\260\225\216\275&\263\207=z\323\250=\335\300\252;\304\003\365\275`\300p\275\251\234E>dqL;gY\202=\375O\346\275\344\273%\275\035aR=\"_\211\275\324p\371\275ho\322<%n\271;&h\363=}\355\247=\210\220\030\273\363\312\357=`\005\376\274\355\224\266<\210\200q\275\363\266\206\275T9q=f\354B\275\313\300k\275\324\227&\275Y\323\251\274\353T\003\273\206X\306=\177k\351;\200\333\360=zi\336\275\364g\261=\276\037\263<~\001\212\2755\227\300=\202\0364\275\0235\252<\207\036\236=\t\200\215\274\355\276\344=\271\252\235=2\257I<0\260\320;\023\314\210<\367\007\257\275\333\017\316<\267\277;\275*\367\253\275\003\001\235=\303\211\030\273D\3061=\263;\253\275\tIa\275#u\026>\026\363\034\275P2\255=c\243\226\275\254Ka=\342\337\013>\314\233\217\274mr%=\263\005^\275(&\315<\207\362\337=\230\212(\275x0\206<\217\305G=\316\000\020\275Y\371\246\274\222\210\006\2761\264\307;y\317\205;\020\000@\275\004=\004\276\360\227\246=\252\323\250\275\022\366\206;\264#/=\352\301\013<\277\373\207;\243\003\232<\'\225\240<\2513D\275\211E\235\275\177\347\014\276a\241\335\274\026J\220=\343u\201=~\337\270\275\017\030\027=\010<\335\274\024(\345\271\346\225\030=$\254Z\275\331\3450<W\2038\275\007H\003=\010\356\032\274\004\352\037=a\243\332\275\024\251\\\275\227\372\362\275\3222\027=\262\202\027=\233\247E=\306\3456=g\027\270=]\037\037=<\207\036=\245kE\275\264/\215\275W8d;u\0003\275.&\232\275IR3\275\'\277\030\275No\025<\317\201\247<\003\320\214\274g\363\226=+e_\275\316\204\232\275\032\332u\274\013\351\366\274\250\256U=\211.\272\275\364z\235\275\024|\255\275\331[\231\275^\305@=\364f\257\275\2141\017=qK\354\274\337\247\245\274\210\305\373=\r\244\246<\245\007f<\377\310\247\275\245Q\026;\341\2108<\017\373\234\274\351\230\252=\320\310@<\3357\004\275\305?[=\306\303G\274/\276/=`\330\001=n\0019\275\274\377R\275\341mM\274-JJ\274\336\334\253<\216\313\030<\2437\251\275)\252}=\014\010\362={\013\016>\004\367\221\274L\255Z;\0343\261\274\201\214N\275\246:\373=W\356\265\275\000_\203\274\2307\026>\203\250P=d\347\241\273E\231\302\274\024\010\010>\211\027\"=\204\221\"\275\2139R\275\004\314\373<\265/\255\274O\266\002<\352\003\235<#\201\022\275\352l\311\274bS1\275\r\260\255\2751\220B<\367\021d<Z=\234\275\370\204\007\275\321\020\346\275n\315?\274ryP=\\E\255=\031<D<\027\031\250=h8\227\2735\330\213\271\300\213\355\274\027\255\023\275I@*\276<\223\r\2764\360E=Ab/\276\214\264+=\024!\326=\004\340\233\275\266\003Q\274A\036\215<\226\236\314\275\347\200\336\274\265\313\270\273\250\026\357\275\312\336%<a\343\224<6\247\262\274G\375|=z\030\010\275\t.N\275\006t\003>\330Pk=\n\241\201\275I\204\270\274=\225z\275\r\277\240\274\322\360B\275\233\362\037<\250$@\274\204\272L\275V\370\333<\rX\372={*\227\274\231&\253\274\314\254\236\275\025v\227\274\335m\267;G\334\323\274\251x\336\274\233\300\213=\324\037\310\274\260\270Y=\272\330\270\2744\355\030\275%\353\237=\366(\n=\314\313-\276\201^\300\272%6\261;\273\262c;\244\303\355\274eC\244\274W\024\251\2746)\244\274J\254\276\2745\017\360\275-\352\256=f\261\205\275\010\rd\272B(\237\275\245q\207=\007_\243=\324q\213<\316\261 <\277|v\275\241_A\274H\364N=\252nq\274\214Y\313=OW\035\276F^\017\275\354\274\352\273H\234\277<\020\336\256\274\031\240\250=yh\310\275\330\245\030=\320RN<\246\013\270<:c\206=\336\245\":\314Z\221=KzS=\355\016@\275h\020!\275\033T`=\365\363f\275\354\007\177=\003_\246\275\270G\267\274\225g\360\274\330Pz=\202)\000\275\352\212\301\274\257\016\r>\310H\257=+\014\036=Y\020\341=\336\306m\274.\254\022\274~\014.\275\327\232h\275\004\242\037\275\327a\225<\003\275C\275\277\223<=>\t\225\275\366M\024\275\2308\251=\357\351\010\276\027e\203=W\001\275;\\\310\315<\367\215\205\275s\224\372;\277\235j\274?Z0;a\303\215;\337E\002\275\313,\027\275\025n\300={A8\275\020\030\002\276\270Qk=Y%\314\275\025\017h=i2\332=\222\246\023\275\367O\326;\331\263\262\275\236%s\275\221\227H=mGf=\241\314\203\275)j\020=[\315\205<\034\207\021\274\240\331\326\275D_\227\275\227\217q=\307\025\002>\265\204\345=H$\222=\247\365\245<\244O>=Q\032F\275\225\2562\275\322\002\261<\332\023\321\275\367\256\212\273\004L\377\274\326LO\275\224\2757=\355\005\200\275\032)\020<\272\210\337<\307\0333\275\005\235*<\030\316\251\274^7|\275\206zE\275\215+k\275H\177\324\271\215\'\032;\024\036,=\263\330\022=h\3339=\207\214\013\2744\231\314=!\243\n>\334t\274=\021\263\370<\347b\211\274\210Y\206=\326\013\361\272\3028\347\274\215\020\016\275L;*\275\177\324\200<\323\343K\275\224\027\236\273B1t\274P8\247\275\372\221H\275b\355\302<s\034\024\274\024u;\275\360\211\317<\202\260\305=\265T\214<\001~\224=Ew2\274jxE<\217?O=K\332\374\275\221\026\355\275-\260\207\275\020z$\275\276\353\311<\366=\026<\217f\252=\214?\002\275\247y\310\274\211\350\361=\351\377\001\275\325jU=K\'\017\275\216\306\367\274\376\3048=q\t\250<\366@\212\274\302\337\363\274L\214A\275\025\350#=\356\374\035\275\341\261\370\275\177t\233=r\"\277<C@\331<\2120N>Dv\277<1\204R\275j\216\226\273\207E\320=\362\242\005\275\272\225\331=D\t\213\275Xq\332\275\312p\236\274\246\335U\275\211g\254\275 ^\232<\366\2115\2758i\307=\243aO<jc\231\2757*\211\275\023;?=o>\216\275\235\"\214\275Z\223\206=\223\304x\273\23745;\337~\202\275;\"z=\3307\300\274\201L<\275\276W\341\274r\210\023=\303\0352:\2775h\275\222\241x=C\000U\275\ni<\274\300\375\007\274\361\315\340\273!\010\017>l\375\263\275oZy=\332\t\177=\260%\005\275\300\365\301\274\256P\303=K\232\227\274q$\225\274\236\257n=X\345 >~\020\236\275\036\244h=~\275%>\337\261G>\3429\211\275{\201\022<\003\322\226\275\276\355\235\274{\217\224=\311=Q=\001H\256\275\360\327C\273.\370\240\274\363\033\350=\217\331\020>\305f\354\274(\334\243\275\177\202\246=C\030\000\276XKz<C\310\251\275\2534\313\275{\224\330\274\300\374\343;\026p\001\275^\323\035<\227\361a\275,\345\216\275\003S\r=x\363\273\274\200go<\270&.\274\'El=C\353\017\275\001\305\225\275+\010\203\274>\000\257\274\255b\316=\355y\235;\033\205\005\274\252\252\250\274\263\223\360\273\322\215\220=G\353,\275\347\177\036\275\026(>\275\3354\254<\272\025V\275s\352\303\274>\315\027;SD\273\275\256I\244<$\315\254\275\220\035\237\274\323\r\017\2759d\001=\307\361\326\275\027\377G\275\213JY<\2760\231=\370\321\005\275\313\210\250==\001\333=\337g\'=\'\256h=5\357Y\275\004\352\372\275\n\345\223=bh\365<\0229.=\034m\317=@z\376\273\254\2714\275\362v\234<a\326\316;u\263h<N\243\270=|f\242\274\1779R=\267\300\310=#\365\311<\020\316~=\226VN\274h\326\t\275\371\201\344\274\340=/=\207H4\273\035A\331<\212\326\362\275J\213r=\362\217\200\275&\344\374\274\225Q\320=j\010\203\273Y\237\010>|\336\217\275K\272*\275\255\207\016\276d\317n\275%-\304=(<*=\3718\300<\264l\311\275\257\274\242=\332\227\252\275P\266\333=\036\231\227\274\257\302\360=<\023}\274\021}\310\275Q\377\206\273DB\031\275y\277\007=X\r9=\207\031\022\275\370\014\202\275\001\035\234\273\270g\334:Yi\362<\274\225}:\252\275=\2756\206-<\214\252o\275\344s\323\273\2619\337:u\025l<\377\376\357=bl\247:w\330-=\177\237\362<\201\201\266=\220h_\275\317u\002=\254\267!\275P\361\013\276\322\216\006<\261r\354\274\365M\253=\206\3751<?\245\254\275\260\265\301=\320\331\306\274\250\305v\274\357qu=\356\231\034\276_\327u<\341\0067=\002`3\273\364\03709\355JQ\274\267\367\033=\233\350\243\275\371\212\201;\007A\">\263\303\236\274\357xO=( \340:\'\221\276;\251\364\206=\361Ve=ZK\204\275\207^\325\274 \032\253\275V9k\275\010\355\307\274U\233\236<T\254)=B\004\206\275/\334\266<p\246\203<\332\213\025\275WP\016\275\027\025\353<2T\275<\275\241\337\274\3140\016\275\236\321[=-\360\243\275\272\212U=,\234\023\274\302\327\210=w\362z=>\354\273=\211\277\272<\300\261D=\0036\227\274?hg\275y)\224</+\233\275S\n\215<i\267\202\275\264;\226\275\244P\254<J\344 =\312\215>\275`x\241\275\330\256R=\nR4\273\273\211\201\2747\216\337;:\312\255\274\271\001\224\273\023r%\274i\230\027>\366\363\305\274\247n1\275\364\373\226=6\260{=j\242\033\276&P\350<G\223A=p|\234\275\234O\005\275\346b\375=\202K\317=\334\301\220\275\007\364g\275pDV=~P\345<sl\357=\371\206\270\275B\273\302\275\314\206\207\275\010&\337\274\267FZ\274\240g\261=\227n\267\274\372$\272=\245l#=\215=\372\274\334\276\340<\025\004\221\274C\354S<j\244\014>\256\034\017=\375\204\227\275}4\265=\325F\r\275\212@\211\275\264?|=n\016\377\275H\210\221=v(\252:Y\325\033=\000\362\212\275\0054\033>\305{O;\000\267\350\275\335\t\032\276\232\302\214\274\22414\275\341+\311\274\304\261\226\275\027*\334<\355\3429\275A4,=\310\303`\275#\361\327\274\214\204t\274j$\306=/75\275n\343P\275\322\272C\274[\206\335<\2462\366==\002\332\275P3_;x\360\374;\010+G\275]x\202=2\367\"\275\357\014F\275\014\n==d\267o=\253Ts\275\004_\031;\321R\361\275\377\222\216\275\201\330\223=\370\033\023=t(\254<{B\223<\025aU\274\027\203\232=s\264\302\274\322\001d<\235\0010\274\315\r\342<5\214\226=>x\270=\211\005\375=\2331/<\376\205\224=\255^%=\254\031`=\2060\023=\324\273]<\214\274\010\275\000\233\336<\207\335\016\276\221\235\r\276\266/U\275\001D\271<\221\207\325=\376\212\344\274tf\332<5 \037\275\222\361\230=79\272<\205pA<JP\272\2739\362\222\275\253)\023>mku\275\343\226r\274\366u\257\275U3`<\361\347\352;\251rU\2757\312\216=N\203\302=?\2035=L:\r=cx\332;\364\244\356<\262\360C;\272\304\363<\017\317J\275\304l\202\274\0022\035=\330\302E=V+y=5d\030=\246\004\005\275\353J\021=\202\'\225\274\023\215\233=\241\004\'\275\256j\214=\200\010\312\274\350\341^=b\222\357=N_\230\275Bt\211\274\037\337 ;.\273l=\301\354\366\274 \003\263<\023 9=4\016\321\275\203\207c<\026\360w<\031IY=\202\356\327=;)\305\275\033\255#\275g\327\274\275\216\305\223\274\355\260\000\276\264\210\"\275;\343B\275\251\235\356\275\231\241\215=t\030;\273\245\320\273\274?\244\276<A0s\275\020U@=\325\312m=N\243?;\224\206\230\275C\200U<vM\r=\370|\361=\'\302\201=\350\001&\275\221\020\013\275\315t\214=\005\016\341\275\354Kz\275\362\005\027\274\234s\031<\276uf=k^\216\275\0223\360\275D\343\020>}^\203=\242F\234\2736\\[<Bom=\376I\251<\213\2547\274\363\223\005=\242WF\275S\\\003\275\343#C=\217q);\377\321\236\275*\377@<Z\324\223\274\025\020\231=\317x9>\244G!>Kr\213\274\256d\310=\272\203\312=\037\273J<\026Q\304\275\337(\017<\253;\223<\212\267V\274o\353\016=\275 \223\274\300\241Z\2759\314\337;\310\363\237=\270`\231=\377\026\312\273 \317T=\017\254\021\2743\324\243\274k\375\000<\246\300\215\274\027a:\2759a\010<J\273\363<\311\270P\274&@\006=|.\243\275\366\200g\275\361\301\304\274\2326\202<\274\030\206\274\245\353\313;\003\307\374\274\347\367\317\275y\300\230\275wR\207\275\373\326i\2740J\214=\216\"\014\276~\335\233\275>[\256\275\020\274\212\275f\344\225\275\247\324#\275\322V]<\t\365W\272\313\254\236=\257\251 \275r\201\226\274b\3054\274%_\211\2752\003\202=\251\343\033<\311^\216=\363\020P=\037%\204;\220\004\333;!\2022\273\261u^=\220\270\240\275\251P\243\275W\206r=8K0<\362\317\002\275A\255\375\273jv\324\275\3329\340\274\276@P\275/r\337\275\013\237\332=\235\265`\275\203C\232=\324\212\024>\030\027\277=\211\200#<\005i\026\275\2126\205\275\016\237B\275#7\210\274\272\204\222\275f\205\350\272\365\273\016\274L\330\273=\212\032\n>\370cw\275#\241\201<p\244\245=\345S\316\272^)\206<\3572\251\274\325\343\004=\262\256\245=\236\345\210=\233s\325<\270\236\372\275\256\373\325\274\265c\034=\373\327K=\235\377\377<k~\013\274\007\363\033\275\365fx=\233\024\027\275\215:\027\275@q\006<6\263\017\275_\206\355\274\361\233U=\312\327\r<`\245\023\276\223\024,\275hX\340=\200\342\035\2759\215\321\273\310h\272=\254r\246=\250\003\323\273\214\006\261\273\343(\340=\271;\264<\303\323,\275\373?#\275\232\353\250<\336\271\220\274\244\257\022=\034%\207\274,\303O;\177\035\007=<\240\360\274/\327C=\334\333\207=;\311\321\275I\037\021\275\301\331\014\276\266\013\224\275a\212\370<\341\237\227<v\252j=\017\375\272\275\342t\335;\350\374\225\275\306\004\214\275\265\253\314\273\r D<\363H\310\273\327\224\t>\375\250\263=\331/\265=\231\264\257\273\030\307\246=O\212\\=\340\234\202<\246Pi\274uR\026>&\246\250\270s\231\223=I\333\216;\332f\231=\231\033\304=c\3470=~\351\224\273im\231\275\335\217\212\275\254`\215;D\355K<\300y\010\2759\207(\275\205O\256\273\262\324~=Q|(\275\202\265\326=Mf\032=5%\261=+R(\274\362\331\302=\324?J=\223\302\336\274\270.\320:\315\301\307\275{\306\257\275\313\"}\275\353\010\317\272l+\r\275pV\260\274\225Y\347=qG-=\332n\346\274!V\244\274\n\320\227=_\214\315\275r}F\275Y\333\316=\000j\262\275g\212\227\275\266s\000=c[\223=%\026\324;\335|\217=yi(\275O,\032>1^\242\275[\177\210<^\036\360\274\020\372\"\275\020h]\274\371K\372:\215\375t\275\362P\332;@\305\220\275g\353\355\275\241\370\326\274_\026z\275\244\251\344=#\0320\275@-\201;\253\324\020<P\271\271\275X\204\013=\337\203%\275\0174z\2754\030\363<\327\231\007\274\334\177/\276\262\212\243=\240L\207\274rF\311\274\246\255\300\273Sr\010=\002\301\214=\221F\241<s\341G<\342B\026\275\226\007\311=\344x0;\313\006\245=\371~\022\275\321\260_=Dh\244=\"\347\223<QP0=\215Q\250\274.Q)\275P0\316\275\337\246*\275$\203+=!I8=\n\235\233<\002\370\270<Q\336\305\275`\267\320<E\273W\275au\334=FG\335\275\033D\245=\340\373\'\276\341@!\276\013\304\231\273dH\304\275\336\336\360\2748\231T\275\350!\031\276k#5\275m\375\232\275\274/\214=Dh\007>\255\335r\275*\266\026\275Ut\214=\336t\354\274\213~T=,\020\302\275\031\303\376=\307\010\244=3><:yf\347\2744\277$\275N\341\014=\356\241\246\274\366s\210<\375\276\246\274\001\276\373\274Xe\n=\234\006\030=\003\234\251\273\317f\253\275\324\016,=X\253\022\275\n\267\373;\0257{\275e\270\214\275g{\346<\212\031\303\274\206a:\2758]\017=ru\363\275\366\236\234=\251\254\345<\377|&=*e\320\275)\337\014>3\rm\275\2100a=@\275\264\2751\212m=\377\220\010>\267\332\202<\336\036\254=7\213\200;Kh\233<S\035!<\357\306\252\275\003\257\334\273\257\300+=\276t\200\275\327*\242\275\377~\222=\255\031\260\274\320\356\207\274\007\303\256\274\260x\211=\235\340b\275\241]8\275\265N\250<\371%\306=\325\277\356\272+2\324\275\031\214\313<\327j\231\275K+\345=i\327o=J\231\352=\245\355#=0\241\337<\246]\025=\2574\315\274\205\326H=\t8\234\273p\322\255\275\036\207n=\263(\032:\2562\362\274b7T;\211g\234\2757\213I<eE\306\274\372\324\341=\352\321\004=\032\367\201\275\334\022Q\2741\177\332<q/\033\274\243\301\362<\252\363\"=C\336\237\275\254\020d<T9\240<yn\230\275\n\006#\275\276,\016\275\345\263\234\275\346\336\360\274*\'\203<?\265\212;R\271r=\317\365\024>e_\231<\265\020+\274\361{\203<N\263b\275V\207-\272II\371<\"\216\020=`\001\303\274E\372v=\243R\207<?[\"\274\272\216\205=\316\360\257\274\233\036#=\007\373M=@\321\220;\0248\000=\324\320+\275JI\227\2749\032\245<\205\272\301\274\'\223\211\275\026\305\360\275\323\275\306<\321\000\205\273\231\245\227\271\301\232\255\274\033\'\334\275B\253\272=\345\255\332:\212r\':\261~9=\230yW\275\245\271N=\023_\361\275\346\215\230\275\224\254\027\275\006\374\261\274ch\271\274_\007d\275\261d4<\022\300[=\254\021\244\275\272\035\026\273\365$\035>,\342\037\275\3164\357=^\250\021=E(\347\274HD\213=(,9=g\357\000\275\232%\367:\355C\244\274uPA<b\303\305\2758\266B=b\323\243=U\010\372\273\267UV\274\344B\202=\017A\225;\324\372\331=\326\304\352<n\301\014\275T\006\330<\304\237\210=b\366\273:\301\202\227\275\001\215\327\275\003u\314<`l\314\275#\330\002=\331U\322=\214\r\350\273\035\237\260\274pt\032;\352\243?\273\205`F\275\034\355\273=\037&\304\274j\360?\276\342\263\326\274`\2528\275\250\317\264\272\364t\350=\376L\305=\251\271\374=\204\262$\275\315g~=\300\004\245=,\246\324<\334\001\304=\324.\225<\363\346_\274J\242K=2\277h\275\026\'.\275\244\332\272=\360\254\233=9\355\"\275\313_\221=_\370\313<\021\371\235=\332\244\317\275+\214\272=\321\247\346;\257$r<*X\323;\223s\251=\365\\b\275?\320\243\274T\004\261;\304\005\366;\324\272\010\275?\2318\273\035\212Q=\324\036\022=\271\365\224\274\025\371\257<\350e\\=\323S\336\274\230qH9h\216j\275\347\373^\275%\313\315=\310h\315\273\006\366\255\275\211\314Q=CA&\276\0376\342<\262\016\026\275\037\310+<N<!\276\232Q\305\275\311\202\317<\303\302\267\275\367z%=\207f\250=\344\315\236\275\350\322_<,\323\341=s\2018\275\265\t\262\275l\365P\275\305\302n<=\336\004;\026\251\"<\214rp=$q/=\004i\304\275\262E\263\275R\311\241\275v\007k\275T\316#=\352\241\263<\177P\231\275\204\232\264<\305\226i=\245|t=\252H\234\274\224\021\230=\263\357\204\274\016\033\350;+)\223\274N\3367=\313$i\273\217\0232=\212\013Y\275\263\177\t\274\035\266E=]#1\274\236,\370\275\244;\274=B\256s=\302\313\276\274nGB=\272\003E\274\243\372\007\276\264\361\246\274\330\034\217\275\216\212\214\275\322c\326\274\236\022\320\274\032\234\237\275[\233\215={\244\203\275\177O\223=\317\370\214\275\0000\006\275\220\007.\276F\037\302<U\276\242\275\244\265\276\275a\210|\275\327q\316:\264\277P=aw\365\275\240f\305=o\240\347=\345\212d=\0220\334\274\037\272\226\275\000\243~\275=\'\025=\"\356\233\274\313\335U=\233W\244=\222\352\216=q\212\344\273\266\245\275=\233G\030=\327\245\n\274\nB\267=\306\024\305\275x\000\005<*\325R\274^R\316\274\027\030\235\275V\352\n\275\312\265^<3\223\335<\201\353\306<\311`\274=<\016\022=\277\014\371\275P\\\247=2\3033=m\3562<\212^\2579\010\321\013=\n[\236=\210Hd=!m\036=\355\267|\275\262\222(<\341\331\231=Fj8=P+\316\275M\3243=\225\002~=\216\337\363\274\240rN=\306\366\257;\0147\202\275\241\271\350<\235\276\327\275\355\267\315=\313\247\r\276\201\235\021=\331\204\254=Z\354\240;y\320\032\275l_\202=_~\274<\006\003\255\274\037\310\302\274`\2056==\262A=\304\373\314\275\267\206\225=\2773\316\275y#\251<\341\245\006=$7->\262\266c\272U\030<\274v\007.<\360\364\206<8I6=X\311\236=n\027A\275w?\273\275\002\257\203\275\246r\031=Kn}<\003\263\250\275\000\343\017=c\006\335=ImF\275\256\214@<\007\371\322\273z\317\002\276\264U\351<\356\005\256\273\006\211\010\274\256\362\251\274A\032\235\274\241\236\267=\r\341\366=\021\343\347=\213N\315<\302rV9\301]M\275Y\343\3129R0E\275\312\330x=\217\373\252=q\307\255\275f\324\005;+;\376\274\277\002\016\275\210\213\231\2749\000M\275\220\325V;\342Fj;\352p@=\355),\275\323\236\242<\302|\201\275[\272\250\274\252\374\375\272\227oC=\032\323\202\275V \341\275\241\227\367=\354\177\367\274y\002\005>\345\016\247;\031\204\211=\240\350P=?\247\302\273\245\271?=X} \275\233\244\201=7\351K=\231\304Q\275\256h6=h\3215\274\233_I\275\033UE=\010+\255=+\247\252\274\nt\202\273\343\335\334\274\237\270\315<\366\230w=\361dZ=\345fe<\233\224\244\273H\211\266\274\2642\374\275^Y\267=z{1\275\3071\356\275?\261\007\275\307\361\217\272z(==x\032\273=\371fp= \250>\275N\005\245\275\nnA=\326\317\222<\025\023\000\276]wf\274\037Z\225=\352\236\240\275\256\007\353=\345\216\230\275\203\217\231<6\371O=6/N\275*\226\027;b\032\260\274th\313\275A\310v=\257\255\200=8SX\275\256\023k=\231\344\334\275\2767\246\275^\266e=i_\327<\r%\005;\304V\335\2746$\227<v\035\217=\027\362\017\275\201H\353<,14=\322\364\376;c\262\303<c;p=\274\275\017=<\331\307=A\331\035>ph\265\275\005\006\361\273\3032\221<\243\211#=\237\324)\275H\034[\274\036r\335;\326\257\224=\025\352\344=\375\204\255\275\261\276\232=M\206\027=\365k\236\275`<\272<L|\322<`\253\313\274\256\225\033\274K\331K\275\344\237\371\275KL\233<V\275\017\275\217\007\375;\373|\261=\n\3274=$9\274<tMG\274\024\331\275\273\2314\201\274tw\205\275\205=\267<\310\272\364=\240.\"=\334\260O\275\266\372\005>\"\246\212\275Z\227%\275\300O\345\275.\351u\274\357rb\274#K\236\275\262\364\312<XY\262\275_P\003\276\"\245\203\275.\323H;\022f\336\275\250\007\204=\251;k\275\355\211\237\275\366\375\224<\371\363\006=\207r3=\313xf\275\250\177I=\026\254\253\274\376\212\242\275i\204\220=\027]\020=O9l=I\354\262\274\341\025\233\274{\363\000>\241\336\022\274\236\332\201\273\'\"\356=4\270\244\275\207\246\020=~\251\374;\234=\177;%\305\024=\013\325\006\276Cy\356\275\223Y\036\275 \330\006<\024oH\275J;\245=\035\237\031\275\034M\034\276\243m\253=\017\226\222=\364\302\236\275IM\376<\214p\257=\315\340\373\274\255A>\276d4\025=l?\030=\203\360\246\274M\r\006\275\345\357\0069U\237\304:q\251\206<\001\004\254\275\032\032\237=A\014L\2741H\253<\n\250\\\275V*\340=\177\275\253=*\250\263\273\340\355\317=\224\234\226\274\034\250\205=\267\244\313\275\010(|;+`m;\327\303/\274\217\242\274\275\000\300\375<z\257\211\275)\021*\274\241\300)<\007\201\014\275\035\374\271\2743\004\220=\310[\327\275k\225}\274\366C\210\273\370\351_=E\373\267=h0\002\275q\032c=\346\246\373\275\372:K<!\262\262=\246\325\302\2750IH<\014J\245<\227\004\216\274A\300\272<\314J\013=\036\236\272\273f\346\314\275\343\226\"\275\355\225K=\304rb=\377+\246\274\307\030\265\275\230o\010>]\256\346<\337t\003\276\177\206\325<|\031\245<\353*\001\275K\315\370\273\230\037Y=#e\226\275\212\323s=t\276z=?\346y\275\325\035\003=F\224\263\275\034\234\000=#8\323<qh\'<D+\254=h\360\\\275\\\347u=\035\330\341<)m\004\275M\332?;\254\001\222;|pd=\272T\211\275\0076\252\275\242Hr\275\350\031\032\2758\375\202=;\021;=\037^)\275J\217\230\275\223fO\275\265$E\275\355\317\273\274\t/\226;\324\330\226\274\363\303\366\274O\373\312=\351\302\257\274\332j\243=W\014.\275\213\213\315\275\366\350\n>F\365\373;q\3257\275\227\205\341\274\327\001\267=\037\010\240\274\3347\002\275\326_#=Vy\375<\220\261Y\275\034\331K;\207\220;\274\304\357\257=\216>\253\275\302N\n<X\315M=9\337\215=\332\214\222=*\314\246<\255\256\237=\337\267B\275\237\327\303\273\210\007;=4\322\315\274\177\r\226;%(\004\275\037\373]=\002\361\272\2753*-\275\234\036\311<\177\235\006=\331\024Z\272<\201\372;\003\200v\275\303I\014\276|e\217=@\004\306\274\254Ye=.\'z<\274+Q=\200\211\246\274\240\200\206\275\337\302\275<\002\364`\274\354M\335<V\272\207=+\201\224\275\254s\303\275\373{Y<\335\377\023<\246\244\223\274th\252=\030\224\373=RE\366\274(\276+\275l\224\213\274\220\273\222=\336\325\007\276\314XQ=M\247\256\274\233\305M\275\240\2418\275\250&\310\275\246\254\226\275\267Z\333=\303A}=\231q\223\275\'\275\250=\033Z\362\275y\034\016\275\325ll=\023\363\227=\375\032\317<r\2568\273\330\271\315<\313\257\273<?\275\331\274\241\024\250\273f\246\216=8\256\216<~\322<=\237\365\356<d\341\033\274\3165\017\275\231\240\225<6\304Q\275\266\342\031\275\324\0200=c\372\312<s\365\220\274\244\263\211=\304%\252;\316\017\037\275\311\305\004\276z\247\'<\363\202\224\275\'\2247\274\242\302l\275\275\364\356\275\366\264\244\273\0262J\275\242\232\263<\374\265\007=\030\332@<\212\236\333\275o\302\351=\205\025\232=\310\316\n>\240\256\277\275K\255\220=J\2728=\022F\016;}O\372<\230\372v;\235\027\260\275L\3533\275&\261\213\274E~\232\275!%H;\270\216\264\275%G\022\275\360\030\243<%\314\242<\251\331\261\275\010\307k\275\224\307H\273\037\313>\275\236v2\275K.\333=\210\003\357<\'\363\001=\346\361\367\274!iU\274\t\033\242=C\226q\275}J\207\272\262\216\237\275\255\267u<&\361\n\275\203\224\006\274\346-\034=\276m\347\275l\231\327<\257\374\276<\245\023\230\275\260\315S\2749\275\244\275+c\025>\265#\265\274?\274\204\275\236\3344=\243\035\321\274p\255&=\360v\201\274\210\314\025\275\243;b=\315\306F\275\315\350\221<BP\351\274d\330E\275\233\310\022<\316\255@=6N\336\275\236H:\275\325l\327=\3624\252<\341$\375\273\r\201T\275\337\316>=\251Yw=\n\353\036>\340\027\265\275<\377\331\275.\005u\275\330_\276=\026Z>=tq\320<M\202,=\334\\\330<E\326\035\276\360\031\352\273\370\276\252=&\273\272=\370u\002<\231\372\252\273\032\253\020<\024W ;\202^&=*:\206=\t\260\250=@\357h=\323\257\r\275\373\372W\275\241\243\254=g\031\206=\212l\035\275\332\023\251\275Kk >\375;\032=]\343\343\274Z\037\027=\362T1\274\243yK\274m\021O\275\200N\257=\013O\010\275\265F\027\274\374\323\017\274)B\233=2,\214=\311\272\214\274DVp=\276\260\313;\264b\365\275\343\254)=\346\277p\275\016\250x<\357\355\252;us\266\274\037t\370\274\306T\265\274]u\373= \235]=\257Us=\373u9\275\244V\250=\247\003\214=\334\372\"=D\367\231=k#\247=t\276\272\275\230\304M<$7\321=\235F\265=\013\254\350\275\350\255\342\274\027D\261=9\346\200\273\240\313\271\275\361{#<v\311l\275\205\245\212\275\207\234:\275\343\275\374=h\331\007>\273\323\312<\214\355\240=\n\221\022=\rq\302\275\022s\026=L\034\343=^h\200=/\323\306:\373/\350;\223\270\372<`\327\214=\231\353\\\275z/\335\2743\374\037\275\025\302V=`\306\304<s\000\236=+\034\325=\016}z\275\330\000\025=\205-\250<\247\251\'=u\204\027\276\333c\347\275$\332\331\275\330t\\<\312\014\253\272\374\2460=\001\343\214\273\206\367\261\273\205\263^\274D\360O=\220{\214\274\272\321/\274|\000\344\2738=\230<y\275\276=C\366\246\275\350\343\201<\002G\203=\265\003\356;\014k>;C\002\342<\233?\202\275\030Q8=6\010\307==\200\007=j\307T\275\347tC\275!O\342\274\013b\023=%\210\014\275\311Z\336\275\233\t\226=\347O3=z\002\020\275\027]\317\2720=\273\275\375\254\034\274\241\353\205<,\325\311\273\225\231\200\273\3572\337=ZVf\275\347e8<\312\243W=\243B\005=\207]a\273L\306n\274\304|\210\275QMQ<Pg\352\275\266D\345;\233V\215=5T\311\275_\357\343<\026\245\276=\371N\303\275\233\"\212\275\344N\360\275\232\324\265;\332H<\275\013`Y<\314\t\277<\246i\244=\262\346<<\350bG<9m\330\274\n\265\365\275$\363\265\275t9\333=\277\304D=!g\335<C\361\261=\256a\303\275\211\253\260\275;+\216\275\3131\240=X\0134\275\223\005\205\275\331\247E\275&\274\216\275\004\264:<D\377\\\273\032\023\027\275rp\267=T?\034=\254\260\020>`\353\036=\351\326\003=\331\346\017=T\260\274=Q8\005=\001L\031\274\375\324\236;|\016\n\275\014\272.</\233\010>\365\331\335\274\305F\220=|@+\2725d2=\037\262\266\275\277\264\314=\213\216\307=\376\305\327=\236\035\372\273\014\240\245=6SU=\013\277<\275\325\322\274\274B1n=`\177\265=\355\0250\2744\231\242\275*\367\247=Hvn\274&\211l=\314q\333<x\376\261\273>r\023\274I\235\t>x\242\344=Rz\372\274\323\301\003=\017d\020=H\3776\275\236\367\311\273_w\307=:\004\030\275;\264\243=v\226\003=\244u\361\274mw\331\274*\217\014\275<\216 >|\320\r=\337\356\201\275U\020.\275&\355\337=h}\222<\"\352+\274\230\007\003\275\335Z&\275b\360\222=e\014m=\275`\\\275\236\230\363\274\365\031\321\275\260\255\363\274]\031\246\274O\314K\274N\337\0009EP-\275\340`\273\275\022)(=\r\333\000\274\337I\277=\264Z\342\275\\\352\006=\337\t\214\275V\004U=3\377\334\274z\235\221=b\226\375=X\205\306=7\030?;\004\336\336\272\213A\234;oh\320<}E\375=\341\230\250<\225N\235\275\005\362\017\275\"W\300\274O\250};?\216\226\275\326\220\024\273\256\202\265\275\214\025d=\374k\211=\242\027\344\274F\267\327<\266e\372<\264\371\276<\221\277\264\275\352\363\230<\022\211\234=:\331\253<\024\320\201\275=i\357\273=\267K=\021\302;\275\336wZ<\006\330@=\016\322\367\273X\365u\275d\264C\275c\244\030\274\031\342\346=\225`\236\273\326]\214\274f\237\037<\267T\013\275h\242\025>m0S\274%\345\005>\363}t<_\003\200\275<\360\030=6m\240\274\377M@=\337\250\202=P@\t=\365\2063\276zi<=\017,\014<\216wW\274\354\355\216<1\\\264<\277\250A=\014w\301\2743\003\370<\013\365@=_bX\274\217%b\275\037.\354\275\250\310\227\275\321\\\315\275 G\230\274\003O\265\274\024\036\r=LS\323=\315\273\354\2732.j<%D\321<H\273\300=JBz\274xB\215=|\002\275\275$\014\361=\031\344=;ro\217\275J\035\365<\365\304!=\025uh<L\016Z=\031\"\320\275\301S!=8\256&\275\305\317b=\031\257\274=\333\256\236<Qr\001>|\310\002>\357\206\234=EV\002=\257?\220=\271\315\234\275\272\253\324=2\253\306<\274\013\201\275ht\220\274\005\036\021\276l\335\325\275\345\3205\275\345\020\024\274.\367\237<\262`Y<\363\t/=\242*\213\275#\036\013\273\322U\232<\225F{<D\336\025\275\366\247\007\275\210s\006\275\332\356\013\274m\263\307=g\223\331\275\031=\024=\034\027\310<<h@=d{\036\275\205L-=h\036\273=\3044\002\275\354\240|=j\273\350\274\2277\225\272<\241&<\240\355.\275\316+\323\274\243B\220\275\370\375\245\275\373\340\355=\371\271\223\275\350\336(>Hh\2028\320\217,\275sV\326\274Z#\326\274\230\241\236\275\265\234\025=s\025\273<?- \276E\320M:\346\332\323<\026\274\014\274-1\353\274\3130\202=t\016\010>\264]\300\273\245\364\212\275H\237.\272\242\311\273=\332J\277=\217\241\271\275d\201e<\322\263\326\274\302\022\">\342H\250\274\261\323\032\276\267\250\360=*\340\332<\335\333\252\274\264\273\220\274\274\264\220\273nJ\253=v\315p;\307\366\244=\'\326L=q\312\253<Uh\322\275\375\007\363\274\217\226\261\273\to\274\275\003\033\253\2746Y\336<\3021\026\275:\306-\276\227\277}=\222\243\355\273\260Kk=\304\3715\275\203\002\302=\276\226G\274\375\364\005<\274\353\331\273\343*e\2756\222\022=\277\357\222=+\374\002\275\016\002\260;\301_N\274\021\014\215=\245\177\217=\240\274d<\325\301 =F`\356<Yk\202<\032\213\341\274\341\221~=\370\253y\274\202\322\272=\360\031l\275\240\312\367\271\240\314l\274\010O\203=v\277?=R\324\307\275\203\317D=\023\231C\275\035\266]\275\347[\205<\210\231B=\035\322\263<LY\341<\342\330\367==\241\230=\233\005\336\274\335\303\215=\346k\027\275C\013\263\274?8c\275_\264\341=o\356\242=Cu\277\274\030E\037=\227F\353<\220N9=\337\210\"=y\240\203=\r\277\223=\"\3656=\2409\221\275\210\203\213\275\221\377\205<\203i\026=L\203B\275b\213\322=,D\301\275\342KB\275T\355\264\275\364\377\025>\000\207\022=\340Ft\273\346\0311<\252\014\020=\203\312?\275\217\363_\274\233\250\254=@\304\360\275\317\201\033\275\tl\240\275\332[=<!_\023=)\313\226<(\031A\274\222\346\266\274\356B\344\275d\206\"<H\240\035=Oe\363\275\234\031\354\274\210\320i\273~}\221=\273I\335\274YQ\372<\240Y\367<\227\037\202\275u\363\240\274\211\326\267\273\2511\202\275\265Y\203\272\223\201O\275\256\202\222\274v\360\020=\313\352\350=fp\260<\344\233\250=\375\264\237;!\202%=n\027\002>l1M\275\325\235@\275\244n\326=\326j8\275q\264\241<s\257)< \244\237\275\350=\002=\203k]=\327\001\232=\034\255>=D\336Y\275\250\312\311\274\263/\020=\257\2242\274\376-\205;\363N\257\275\2656\020>\'\240q=o; \274\216\223\361<\273\264\275\274bo.>\354!\243=a\373J=Y\344\215\275\334\377k\275\022p\254<&\352t\275\317\220b=s\264\372=\361\267\031=O\222L\275\204q\273\275z\314\257\275\212\227\203<\301\332&:\024\327\242<\373\265\201=Ai[=\317\t\242=(\233\376;\267P<=\242\205\254\2753i\232=\004\314\237\272\274|a\274\275(\204\275U>\301\275\333\243U=\315\371\000=\034M\260<\220\361)\2758*\355=\321~\244=X\255\257<\324\233W\274\332\260\"\275\311\201\376<\341\005\370;t&\234\274\204\217\274\2749\210\330=;\2669\275\020\326\353\275\002}\005=\032\016\241=*\210v\275)\323\0019[\247n<\361\326\243<\312Y\232\274\362\037\252;\266\265\357\274{^\242=V%?=U(\201<\t\260#>1\340\001\2743\274d=\033\032\234\275\317\364e\27424`=>\253\246<4(\206\275\r{y<\306oU\2753\031\313=D\242\237\275s\255k\273VW\244<t<\010\275\211\005\005<\241Md:6\275j\274\204\334\356\275\344A\207=\311\303?\274\351\321\250=2\362\302<\001$\313\274\177f\031\275\224d<\275\300\313\022\275\313\036O\275\212I\035\2761\352\342\275\332\251%<\213(q=\002\237\301=4\211\236;S\275\205\275i\345\372\274\367\336\210\274\311\363m=\213\262\033\274g9\322\275\237\307\201=\310\234\260=\324\"\362<\0175\035<\262\267\260=j\021\014\275n\024\275=\360w\222\275\222\203&=t\007\211\275\033:\233\274\345\252+\276\303\344\206<\351\241\223=P9\240\275:\216\276=\262\314\242\275\3122\212=\312\273\314\274\370\273P=\205\232\000\274\362\222^\275zS+=\351a>=@\tN=M;G\275\335\211t=\342l\216\275\221k\215<\213CC\2750+}<\024\331t:`{;<\360H^\2752\301\224=\265\347\215<&\320\006=\037#\r>\247d,\275\026 \321=p\367u<\306s\r\276\311\344\034<0\027$=^J4\275\034\r\251\274c\005d\274\215w\222\275\214g\030\275\266\262J=\251\020\003>\336j\r\275l\250\250=^\002\276=\2640\345:\351\310\371\275\035\345\250=Hj\367=m\310\343\274\204^\237\275<\2068\275v\260\224=2u\245<\225\256W\275\021\r=\275\316\344\373\275\261yp<\177\372b\275\270s\230<a\331\207\273?\023d\2731\3538\273B\327\215\275\360\0048;\357\256\347=\346>n\275\036\r\375\274\025\000\r\275\347\271\001\275\303K\224=IUq\275\224@Y\275\243\325\237;\250m\351<\202\326\017\276\206\327U<\331\3676\276\3728\355\274}\302p=\333\375\177\275\3379\342<F\323\356\274t\354\236=\314\021\023=\220\203\353=\037\n\242\275\304\256u=\306\255\322;\354\277\031=\022\027\320\274\035Y\322\273\336uY\275~Hr\273*\336\037\275\031\036\206<\213k3\275\277\036/\275\037\303\273\275fP\033\274\366=i=\255\220\n=\256\254U\274\366P\006\274j\2222;\207\tv\275Y\310\201\275\254\301\211\274M\027\214=SY\246\275\004\002M\275\217r\033\273FX\274<W\336\260=\t7\340<\033h]\275\301\370&=JIN\275<\366<=\321\305q=\245V\203\275\017\202\014<\244/\021>\255\033\315\275\344\270\243=\347\332\311\275/5\342=\240\r\223\274e\232\270\274\370v\255=\367\343\217\275\t7\225=V\367S\275P\001\337;\205\312\017=\214\242(\275\206\356y\274hym=\247[\372\274Pn\216\275\272\344\006>w\374\214\275\030\232\032=\321\251`<\344\360\306\274\014\020\200<\020j\371\273\374\007\017\275\325h\023\275\023\260\035=\033z\352<\363y\263\274-\262\215<z\t\215\275Cj\004\275aCJ\275QS\331\273\360i\273\274\310\221\347=\324\273\303\273A\025\342;,~J=v\032\230=\221\323\251<\022w\217=R\"\314=j\230\022\275\231X\242=\207\374\222\275\352)\203\274\265}\312=\356\217\326\275x\235\'\275<\215\205\275wwV\273j\362g<\257\212\246\275b\206\255;\273\273`=|kX=4o\254=\240\355\242=\351\224\222\275M \314\275\273\363C\275\372\270\'>*x]=\220.\005\275\237\177\346<K\336\207\275\216\236,=\037_\202=T\225\270;=\230\233\274Td\027=\275\361\377;\353[\031=\326\231\305\273\3468\000=\205z\266\275\257\320\016=\315\241\326\275s\031\227\275\026\250\215=\rD#\275\020i\271\275\275\370\301\274\315t\267\275\242\226\245\275\006\031\266\274\261,\t\275!\036C<D1\224\275\235\336\373=\1776G\275;\005\222=\255*+=\334K\020=\302\221M=&\376\240\275f\017\234=\'|\033\273\331\304\324=\317\237%\275\232Mn=\327RX\275\314\327\013\276\310\244\236:\251;\211=)\020c\275.c\320\272\222\030)=\354\236\001\275\325\035\374\274qj\330\273\240\347\322\273\211\023T\275\374p\271\274\336\336\034=\364\243\345\274\252\177\357;i`d=\367\014\026\275`Lq;\t\237\235=\321\256\324<4\226\034\275\247\246\257\275\254V\352\272-\246\277\275W\035M=\323/4\275\034&(=\224\321\215<\263\0207<\004\252\007=\2153\027\275\001)\324\275WU\022\276\303\014i=\202I\343=\341m\030<\301\205O<%\024H\275i\304\256\274\014\260\021\274XAd=\364\2559=1\023\227:\231\354!\274bw\'\273c\317r\275\330D\321<\245/\252\274\272\371\017\275#R\212=\270\371\225\275\360\352\223\275\226Q.\275)k\241\275\330\277+>\310\"\220=\344|\211=-Gk\275\372\205\337;Z7\236;\311\315\342\273\037\300,\275\362\363\300<pY\204=~|/\275\005\244\000>\353.\222<\314\371\317:\376\016\364=2\313E=*]\217\275+\036*=R\010P=\354\3414\276\016\245L\275#`\225\274\224\360\232=\333F\220\274i\031=\275\210\247\350;o\2628\275\227\214\242=\263{L\274\023$\311\274\346\327\255=\232:S\275\322\217\016\275\244\271\320<\003\201\n\274m\326:=\343`\254=\357\352\202\274\244}\362<\3123\"=\304\362#\275/\365*>={\212\274\334>T\275\210`\232=\276\346\225\275\265\267\241\275+x\317<\304\033\242<\210N\213\275\360\3522=\254#<=\"\205\206\275\355\244%\274\233c\213<}r\'\276\232<\336\275O.\217\275\217\303\252=L\273\350<q\3479<\342\r\021=\370\224\022\275\352g\271\273\364\2555\275\031\025x=\332\t\317=\246\317R=\232%F=C@\256\2759\301\000\275i\360]=\226\323\377=[]_;2\211\261\275?K\313=\001\222\352\275\342L\t=1\304\003=4.\341=\220!\250<\354\017\260<2\355i\275S\200v=n\375\303\275|\035\226=\2415\000\275&\256R=\352\243\273\274y\240a<lB\035\276\274KZ=[\016\226\275\222\3313\274l,\237\273\027\003\237\275\360C\r=\227\267\213;#\263\250=\005\027\327\275\307\232\320=f\251\002>\225\205\200\275\t\272B\275az\271<\256\303\264\275\022p\202=\202\303\266\275\021\337\t=\312\340\335;\312\317\025\275U4]=\274%\251\275 \332\030\275\377\254\231<\347+\004\275\216\267\367<:U\025\275\001\324\366\275\275rd\275\306\273 <Uf:=\256:\3568\021\027\256\275\332\267\000\274\302@o<W\355\003\275\r\027\007\275\235T\227=\356\220\316<\251\002\000\275)\266\306\275\201\211\333=\202\335\303=)8.<\366\023\271<\263\251\'<\031\3669=\203\357i;U\2507\274\322Y\010\274\325\273\237\275\242\323\314=\230\032\272=\224\'\r\276\313\315\006=\003\340%>)\352\240\275\311<\352<\205%\230=)6\216\275i\327M=O\303\275;$A\207<\036d\007\276(\250*=j\250\315:\203%\206=\027\332\002\274\377\311\255;\305\251\362\274\371\302\225\275&\332\217=\260\031#<\227b,\275\207\320K\275`\016\203=\2409{\275\376TZ\274a\217\267\275\303\372]\275\210&\026\275\021\317\251<\364\243O\274\343\203\217\274\373\275\313\275@N\021=\233\027\r<!\255u\274\016y\230=1\2677\275\2629\207=\027\247\002=XE\274<\261\355=\275\"x\256< <\233<\375R\\\275T%\022\276\350\250k<4\312\346;x-\335\274:,\225=-3\362<\362\316M=n\346\206\275\010\003\275\275\200\250\221\274w\tc=\005\333\237\275J\002[\275\243\236\005;\332!\t=**\342\274G\364\005>HxT\275>\243\n>u\022\236\275%\276\361\274\243\351\270=\330\277I\275\317%2<<\246\257\275&u\264\272\216\356.\271\224d\273\274\310\305\254=c\214\203\275\273\350\302\274\236\342\327=\266G\205\275\234\376\261\273A\364\251=p\272\212\275\003/\350\274\353\222\r<\327\351\257=\235e\367\274\003\251\226<< \323=\372\341\216<\314\326\355<&\017\036=|G\r=>\222Q\275\354\316\352\275\213e\204\275\227\177\310=~u\254\274s\315\017>V\262\326<|FU;\271\352\025=I\252\231\274\226\256\335\275\244\350\022\275\256\201L=\351-\360=\025\375\276\273\272.\234\2752\027\346\275\366\010\262<\035Gd=\310\265N=\230\325\342\275[\024\310\275\362\215\361=\212\311\227=\203Y\345<\224:\205;\010^\026\275\217\204\214=`\204\371\274Y\t1=\022\214\225<*\023\227<\021\203\206=\244\257\216=\222$z=\030\211\242\275q\r\010\275\273\304\203<\004.\202\275r.\254=\361\317\022=R\377\215\274\332t\017;n\020\022\273\3647\233\274.y>\274 _\260=\\w\031>[\360/\273u\337\237<\351]j<Y\024\363=}\253\265<\263\207v\275\236\2157\275\322\203\235\274r\261\273\275\014_e=E9\245\274\316\351N\274\331\032l\275\266u5=U+;<\3445\216<\3779\023>\267s\024=\322{s=\376\037Y\275E\311\375;)\263\306\275N\020+=b>)\273\363\336\237\273\2468b=\r\343l=%\261{\275\035\352\212\273I\010\364=\320e\321<\353\036\"=ge\004=T8@\275Hg\215=Q\'\204<p\246\365<\360\002\240:\357\231\213=\331\007\347<\3205\246\275P\3704=\320T\321;}\000\035>M\007\023\276\264\244\315\275\2609\331<\352e\305\274\007=\356<\010x}\275\364\365\r\276M\214\206=c=T=\326@\034\275\246\232\222<\334\"=<!\342\245<{=\221\273\2601\021<#Q}\275\017&\317<\330\304\004\276GD\253\275r4\237=0\022\007\275w\020(<D&\215<\241\032\325<~\031\224\275+\344\251\275\250\267\034\275\373Q\031=\004\344\224\275g\227@\274v\344\210<\344\321\010=\007\220\251=\2660\254\275\221z\210\274\010^\213\275\007Mm=\304\371\t\275\217\2141\275\333\273\004;{/\016=9\366$=\020g\266\275\272\236\351<\010\030\251=\362\016\252\274\237\\\254\275\345\220\235\274\000f\017=](\234<\325\377E\275\372V\250=p\307h\275\326\332\233\2759\0006\274\023\336\271\273[\t4<\354\222<\275u\376\177=k\210R\275\345 F\274}\325$\275\3045\262< \361b\276\251\303;=T1\323\275\311\276A;4t\032\275\377\256\230\275\330gg=\no\247=\337\263\323\275\223\335\334=D\013.=*{[<m\037\221=\033#\032=\031\207\212=\243\207\370\272>\332\230\275\371\301\265\275\211\315\366\275\230\245X\275>Au=\376;P=\246\362c\275\240a9=&\022\204\275\021\325\346\274\266\266 \275\025&\236=I%\204\275\251\375\223\274\334\353\n=\377$\230<\242\030\020\275\341\343\023;2\313t=\'\335\230\275Mm\317=FN\351<N\032\317\275V.\206<\030\037G\274\367\370\314<\036P\362=\003\271\005\274 Z\315\274\202\307\341\273}\333\027=S\312\\\274\357e\177<j\374\254;\277?7=\237I9=\340\317\222<7\365\307\275\316r\225=t\207\313;=\222\266\274\270\372w\275\217.\241=\311\343\302\275\036\231X\275"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "lstm_2/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/concat"
  op: "ConcatV2"
  input: "lstm_2/Const"
  input: "lstm_2/Const_1"
  input: "lstm_2/Const_2"
  input: "lstm_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/bias/Assign"
  op: "Assign"
  input: "lstm_2/bias"
  input: "lstm_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/bias/read"
  op: "Identity"
  input: "lstm_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/zeros_like"
  op: "ZerosLike"
  input: "lstm_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Sum"
  op: "Sum"
  input: "lstm_2/zeros_like"
  input: "lstm_2/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_2/ExpandDims"
  op: "ExpandDims"
  input: "lstm_2/Sum"
  input: "lstm_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile_1"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose"
  op: "Transpose"
  input: "lstm_1/transpose_1"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_2/Shape"
  input: "lstm_2/strided_slice_12/stack"
  input: "lstm_2/strided_slice_12/stack_1"
  input: "lstm_2/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_2/transpose"
  input: "lstm_2/strided_slice_13/stack"
  input: "lstm_2/strided_slice_13/stack_1"
  input: "lstm_2/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/MatMul"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_1"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_2"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_3"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/MatMul"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/MatMul_1"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/MatMul_2"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/MatMul_3"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/MatMul_4"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add"
  op: "Add"
  input: "lstm_2/BiasAdd"
  input: "lstm_2/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul"
  op: "Mul"
  input: "lstm_2/mul/x"
  input: "lstm_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_1"
  op: "Add"
  input: "lstm_2/mul"
  input: "lstm_2/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/add_1"
  input: "lstm_2/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value"
  op: "Maximum"
  input: "lstm_2/clip_by_value/Minimum"
  input: "lstm_2/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_5"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_2"
  op: "Add"
  input: "lstm_2/BiasAdd_1"
  input: "lstm_2/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_1"
  op: "Mul"
  input: "lstm_2/mul_1/x"
  input: "lstm_2/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_3"
  op: "Add"
  input: "lstm_2/mul_1"
  input: "lstm_2/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/add_3"
  input: "lstm_2/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/clip_by_value_1/Minimum"
  input: "lstm_2/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_2"
  op: "Mul"
  input: "lstm_2/clip_by_value_1"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_6"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_4"
  op: "Add"
  input: "lstm_2/BiasAdd_2"
  input: "lstm_2/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh"
  op: "Tanh"
  input: "lstm_2/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_3"
  op: "Mul"
  input: "lstm_2/clip_by_value"
  input: "lstm_2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_5"
  op: "Add"
  input: "lstm_2/mul_2"
  input: "lstm_2/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_7"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_6"
  op: "Add"
  input: "lstm_2/BiasAdd_3"
  input: "lstm_2/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_4"
  op: "Mul"
  input: "lstm_2/mul_4/x"
  input: "lstm_2/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_7"
  op: "Add"
  input: "lstm_2/mul_4"
  input: "lstm_2/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/add_7"
  input: "lstm_2/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/clip_by_value_2/Minimum"
  input: "lstm_2/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh_1"
  op: "Tanh"
  input: "lstm_2/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_5"
  op: "Mul"
  input: "lstm_2/clip_by_value_2"
  input: "lstm_2/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/TensorArrayUnstack/Shape"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_2/TensorArrayUnstack/range/start"
  input: "lstm_2/TensorArrayUnstack/strided_slice"
  input: "lstm_2/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_2/TensorArray_1"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "lstm_2/transpose"
  input: "lstm_2/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "lstm_2/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/while/Enter"
  op: "Enter"
  input: "lstm_2/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_2"
  op: "Enter"
  input: "lstm_2/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_3"
  op: "Enter"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Merge"
  op: "Merge"
  input: "lstm_2/while/Enter"
  input: "lstm_2/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Merge_1"
  op: "Merge"
  input: "lstm_2/while/Enter_1"
  input: "lstm_2/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_2"
  op: "Merge"
  input: "lstm_2/while/Enter_2"
  input: "lstm_2/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_3"
  op: "Merge"
  input: "lstm_2/while/Enter_3"
  input: "lstm_2/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Less"
  op: "Less"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Less/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/LoopCond"
  op: "LoopCond"
  input: "lstm_2/while/Less"
}
node {
  name: "lstm_2/while/Switch"
  op: "Switch"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_1"
  op: "Switch"
  input: "lstm_2/while/Merge_1"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_2"
  op: "Switch"
  input: "lstm_2/while/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_3"
  op: "Switch"
  input: "lstm_2/while/Merge_3"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_2/while/Identity"
  op: "Identity"
  input: "lstm_2/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Identity_1"
  op: "Identity"
  input: "lstm_2/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_2"
  op: "Identity"
  input: "lstm_2/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_3"
  op: "Identity"
  input: "lstm_2/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/while/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul"
  input: "lstm_2/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_1"
  input: "lstm_2/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_2"
  input: "lstm_2/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_3"
  input: "lstm_2/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add"
  op: "Add"
  input: "lstm_2/while/BiasAdd"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul"
  op: "Mul"
  input: "lstm_2/while/mul/x"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_1"
  op: "Add"
  input: "lstm_2/while/mul"
  input: "lstm_2/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_1"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_1"
  input: "lstm_2/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "lstm_2/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_2"
  op: "Add"
  input: "lstm_2/while/BiasAdd_1"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_1/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_1"
  op: "Mul"
  input: "lstm_2/while/mul_1/x"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_3/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_3"
  op: "Add"
  input: "lstm_2/while/mul_1"
  input: "lstm_2/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_2"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_3"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_3"
  input: "lstm_2/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "lstm_2/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_2"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_1"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_4"
  op: "Add"
  input: "lstm_2/while/BiasAdd_2"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh"
  op: "Tanh"
  input: "lstm_2/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_3"
  op: "Mul"
  input: "lstm_2/while/clip_by_value"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_5"
  op: "Add"
  input: "lstm_2/while/mul_2"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_6"
  op: "Add"
  input: "lstm_2/while/BiasAdd_3"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_4/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_4"
  op: "Mul"
  input: "lstm_2/while/mul_4/x"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_7/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_7"
  op: "Add"
  input: "lstm_2/while/mul_4"
  input: "lstm_2/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_4"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_5"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_7"
  input: "lstm_2/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "lstm_2/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh_1"
  op: "Tanh"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_5"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_2"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/mul_5"
  input: "lstm_2/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_8/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/while/add_8"
  op: "Add"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration"
  op: "NextIteration"
  input: "lstm_2/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_2/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit"
  op: "Exit"
  input: "lstm_2/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Exit_1"
  op: "Exit"
  input: "lstm_2/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_2"
  op: "Exit"
  input: "lstm_2/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_3"
  op: "Exit"
  input: "lstm_2/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range"
  op: "Range"
  input: "lstm_2/TensorArrayStack/range/start"
  input: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_2/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/TensorArrayStack/range"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "lstm_2/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/sub"
  op: "Sub"
  input: "lstm_2/while/Exit"
  input: "lstm_2/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/sub"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose_1"
  op: "Transpose"
  input: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9011220
    }
  }
}
node {
  name: "lstm_3/random_uniform/sub"
  op: "Sub"
  input: "lstm_3/random_uniform/max"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform/mul"
  op: "Mul"
  input: "lstm_3/random_uniform/RandomUniform"
  input: "lstm_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform"
  op: "Add"
  input: "lstm_3/random_uniform/mul"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/kernel/Assign"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "lstm_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/kernel/read"
  op: "Identity"
  input: "lstm_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "^\361\317\275L\345\311\275e\007\225=`T\236=p]\033=m\270\376\275\211 \032=\037\252\262=\034\341\260;\344\3605\276h\240\350\275\003\372\365\274O\336f\275A\263V\274\201x&\275\372\260\025\276\256\007\034\2702\243\267=2KU\274\304P]\275y\021\203\2749\007\213\274\270$\266\275{\035\241=\306\365\005\276\300s\t=\242\270H=\203\377\362;\306r(\275\'\317:<\207\331\250=\204\2077>\332\254\234<\207xE>\342\347\334=\263\354&=]3h=\234\306\265<\004\034\352;\025\267{\275@\251\222<2W\304=\373\022\315\275\253\332?\274\376f\201<k\3414\275\277\327\203;\026\256I\276\311\267\000\276\252\211\340\275\345%&>\256\245\230=H\214\036=)s\022=\376\245\257\275Dh\271\274\376Z^=\'\325\004\276w\356\027=\313\371\227=\256N\262\274\361\014\356=G\245\026=\000e\205;\202\312:>\017\246\004\276\330\321\335\273\017$]\275+v\240\275\367\375\226=\004\021x=s\353\350=\271\364F=\223\362\332=;\345P\276\371\347[\273\255\376\265\275\310\321\335<\331\014\237=T\037\264=\000\026\350\275l\245%\275$\225\"\275f\230\023;\326\357\312=)\233\214\275\330\215\315\27412\225\274o%\325\275fe\300\275\177\214\250\275\025\031\236=\225\342\260=\252\021\323\275\377Je<\3755\345=^\340\003\276F\373\314=\r\334\247\275ES|\274\017N\">$\367\236\275z\001\022<6=J=e;M\275\203b\310;\"~i<Q:\355:44\231=\237\tk\274\305#\203>[F<=\322\033\003\276> \000>\305\266\304=\266\002u\276\331-==\000\014\035\274\031\213\016\274;\304\335=~\322L=@n\235=\300\273\227<\"\350\232\275\321K\266= i\250\274w\223\315\275\304e\311\275\273\370\343<\214%\346\273\331f\214\274L1\333\275\026\334Q<O#\316\275\237kN;V\255Y\276\323$$>\303cs=\221D\201\275\375\250\310\275\003\370\023=\002\\H=a\311\014>E3\">\2544}=Mm\270=\244\370\021=O\007%>\351s\221=wT\205>`\241\023\276\371\305\326\275\226\315\250\275-,6=\255S\265=}\002\027\276dj%:O\322m\2754lE\275H\236L\275>4\261=\036eJ<>[\"=\265\237\217<\305\336\265\275A\000\003\276\036Y\316=\036\020\301=H\354\206<;\361<\275\301\202G\274\260\244\t\276\242{\024=\253z\200=\\\374K\275\243\246\244\275\200\236\330=n?\035>\252>\244<\027\210:=\362! <\363\321\264=\346P\354\274>\032\257\275\326\357\001\276\273\364\233\272\207\334\303=7\206\377=\243\336z\275+<\352\274\377\"\325\275_\031v=fZO\275g\262\\\275\330\321\001\275k\302\207\275|\0147=\007l\261\274\320\257\022\276\314_\302\275U\232\332=_\247\215=3\272\r=x_\002>4\022\210;z\027\327=m\276\020\275%$\'>V\3430<\201(\370=\251\2408>\363\341\362\2736q\370\273\244\372\235<+AL\275R\2610\274F\265\215\275|\006\276=\247\350v\275\350\244/\275\201E<<\252I\215\275S\t\237=\313\202\337=[$%>4i\264=8w\205\275\223\274\007\276\214J\327<}\220.<\355\230\001\276\235W\355<M\216`<M\304\004>uN\205>\247\236\032\276\037\204\026=\"\211\232\274I^\255=\212\021\347=\2577\333\274\031t\004\274\3504\366\274\356\177<\275\232^\273;cH@\275\313\250\215=\370NQ\274\267\273\202=\360\334!\275 \212>=\020\301\321=\311\021\271<2.\006\275\371\303\240\275.Oo\275\222\241X=\001t\267=\362K3\275%\205\375\274B/\273\275\002\376\236<*c`\275\221]\331<\260\207\216;\325\257\025\274(*2\276(\004\356<y\274S;*a6=\177%\031<\003\202\266\275\377\373\250=N\243\334\273\341\260\007\274m\244\244\275|\302\217>le\355\273cWw=\376\303\273=\016\243\301\274\244\004\n\275\001C\261\275\255\342\023:\351\371<\275#l\207\275/\201\370\275\345I\347=^\303\020<\264\355\r\275\200J\230\274\005\257\362=%M\312=^-\270<Tq\341<;\023\030>\n\350/\275?\251\303<\2403\364<\335\322\311=\211\323?=zNE=\214B\306\274y#\024\275\233\246.\2758\374\002\275\331\216\247\275\"s\201=i\237l\272\275;-=W\365c=\221?i<%\030\330\275\265n\326\275\273\246\222=\360\367\032\276Ev\215=\333\005|\275\204\360\332=h4\267\275\3559\362\275[u\t\275\214\352\303\275\355\026\375=\022\361{\275\010X\014>\347B\026\274\252I\326=\310\003\034=\312\374\022>]o\001\276\373\276z=5\367\002<\312e==f\275A\276\331\177\n\276\255N}\275\3513\200=f\360\230\275\274\001\362=\263\214z\2757\374\020\275s\253\234\275\022\356\024\2763X\342\275\345\203}\273q\013B;\236`\352\275\322\243\357<\'\232\211\276Q\317J>^\016J=\"\364\230\275\003\332\214\275\256\335\033=\177\021t=\322\334\026\276\014\'\365=\035\214\267=\177\023H\275/\344\271=\025\302 \275\270}\025<\342\207\014\275\267\270\003>V\006\375=\245}r=L\324A\275s\213\275=\ri\376<O\003\305\275\264\021\014>J\307\262\274H00\276\204\302\352\274\371\250F<\273\277\227=7\241\r\275\265\3716=\214\023R>b\234\010\274\264s\273\275\340\214\306\275\223,>=\373XS>A:\002<}\341\271\275\2279X=I\221\223\275\306\230\352\275\245\351\352=\356\267\347\274e\030\267=\210\275`\275\205\017\030>\302#\232=\216v\304=\312GH>\320\273\233\274\260\266\225\274\352\202\222<\321\212\327=\351C\256\275\252\377\251;\265yk\274\202]\316\275rG\341\274\365\037\251\275\022\240<;9\336\225<\316\212\220\275\262\214\303=\371\336q=j\245\275\275\374\002\223\274\335\345\200\275\246\311\005>\230\016e\273\272\253)\275\014<u=\212V\267\274f\013:>\303/\016>\253\002\223=\241`\000>\317\010r\275\365/\372=:\331\325<\357\237\224\275\253\250\"\275Cht\275\'\371\205<$X\231\2756L*\276z\350\r\275|^t\275\271\256\014\276%\177\277\275\244K&\276:\n\010\276\255\226\207\275O\240\023\276H\206\024\276\317\002L\274\n\314\222=\236\300\205=\365\221\334\273?\360\003>\274\277y;\030om\275\356P\216\275\231yj=\377\377\023>\252\337\326\274&\202\250<\205\335\322=\245\211\236=mF\357=`E\027>\343\010{=K\266*=\272\002\027\276#O\313<\274J\211\2751\200\347<k\017H\2757\004\004>\025\347c\275\310\300]>\357\221\273\274\321\202\270<!h\211<\n;\007\276\266$\253=j\307J=\375\233\341\275s\232m=\016\2530\274\317\252\202\275\203p\244\275\300\007\223\274qi\374\273{\203C\275A\314\244\275L\006\371=.\252\335\275\023\204\270\271\267iK>\230\223\004\2764\321\235\275\030\323\031\275\377\271\034\275\314\033\312=\352\001s=\270\027\024\276\027\304,\275J\272M\275\2358Y=\rD\270\275\322S\321\274\270Vx=\316\2758\275\t9\027\275b3\254=\353\023\215=A5\342\275\342\267\237\275\'\002L=?\323\304\275N\024\205\274\343m\305\275\026\352\335<\3103\347<0t\211\275&E\355=B\346%\275\300\000\033>\2479\307=\262\315\355=}G\253==\271\201\275\030\024 \276\314@\272<\035\267*\276y\261\024<S\330\215\275N\363\031\276\2004\252=\335\242\227\275\034\333\036\276,\214\004\275\345\324\330=*\306\356=\275h\254\2738\367\221=D\261\376\275\023(*=VTJ=P\342\'\275\271\352C=\022\263h<\366\342\n\275e\371\000<y\024\263=\232\036\350=Q/\272\275\302Z$\274\356\320\026=8\204\225=\353\313\255\275/\235~\275\353/X<\315\367b>\372\212\236=\203,\332\274b\3238<\254n\201= \366\036>/%\246=\016\177\t\275\324\366\330=<\374\231\275\240\366\250=8R\006\276\200\226~\275\316_\247\273\346\002\r>pJ\013=\217\375\234=Jf\276\275\352\355\342=k=\375=\255DC\275\264n\253<\230\355C<\311#+=\267\203;\276\331\251\246<\2064 \276fI\311\273#\316@\275g3}\275\377\006E\275v\230\014=5[w\275\335\370\272\274_v\372<h\367\377\275\333\244\317<\225\340\025>?\270^=\341\344\336\274\301!`\275\005\366\343=\256\\\r\276\337T\334\275*||=(\264\325\274X\251L\275!$2<M\244\203<&.\031>3\313*\276\217\221\366\274\r\317\326\274 \234\222=`\335n=1/\267=\242\0174\276\n\205\206\275x\205\022\2766\356\325\274\3315\034<\\4\022=\350j\034\274\222F\002>\204c\034\276,\232*=kM\271<\246\303\026<KyS\275\336\233\000\275cB\240\275\t\n\027\275FO\274<\357L\204\274V\013\377\272\177\3103=rw\033\276\035TA\276,i\016>\314\311\007=b\213\002=\216\231\353\275_\327G\276\331\366\225\275\362\233\203\275\272+\014\275\374*\222\275@\231b\275\270\254G\275\360G\237=t\330\231\275\3363\305\275\276\244\'\275\341l\245\275<\245\001\275\007n\227\274\353p\356\274\353w\n\276\250\322-\275o5U=<%\376\275\261\226}=\216\3650;\031\371\306\275\362\3625>5\010]<\322\0022<\346\270\t=\212S\300\275\306\265\351<\241\221\211\275\356 5=]@\245=\203\223\010<Wq\313\275\322\304\237<@\007\365\275\203X\262\275\231\314(=\347\177\316<V\344E\276\322\231\014>\322l\371\275\241s\227\274\363=\036\275\212\327!\276!N\024\275\213\211\216\275\321\3033>!\376\346=\274\3402\274\306\327\234<\035\357>>6\000\367\274\2643\330\275Y\010\244\274\336@P\275(\277J\273\317\327F>\325\344*=\234\340\r=\007-\"\275\220\301\374\274\t\211\237=\367\226K=$\030\377=\2460o\275\"\352\334=dO\024>\204?\330\274\315\346\302\275\342\\\235\274\253\323\022>\240P\003\276\300\022E;A\230\202;\215\265\243=B\355\\\273M\'\342\274\200\367=\275\324B\216<\357\252z\276\r\0177\273\232\205\216<\343\225H>\006\375\023;\203\236<\273&g\'\270\221\346\034=\010\212\301\275\262\237\302=d\356\014\275^\206\'\274$\322\334\275 \331?\275\227\227\265=\354\227\254\275\305\315\266=\342#\007>\212l\037\276\273#\337<\317sX=\204\313\372=\334\370\261\275\221\255R\275\336\267\270\275P\325\001>?\014\370\274\341b\264\275\373(\274\2744\257\010=\'\022\204=\354\226\344\275BtJ\274\177\301j=[\377\010\276\001\370\307\275\306J\220=\316\376e=7\271M\276\000\267?=\333\322\200\275L\273\001>\221\r\311=\251\374\032\276\036\001\001\276\346\257\\= \373\230=\335\303\375<y\016v\275I\0340\274A\247\363=\005\247\242=\"9\037<\365M\226=\274\222\036\274u\365\217\2758\375\333=Zr\213\274\233\320\250\275\315\302\354\275\253\021\270<\222\361\224\275i\001\206\274\313\315\263\273\230\315\212\275\350\020\205\275v\3672\273\033:\000>\"\2723\276\362W4>\312\226j=Y:\207=\345\2705\275\0178\340\274T\256\310=\312\274\277\274\345\244\276;4\"V=\3517\024>=\366\226=\233\240)\274\013\3065=\237\r\214<\324\245b=\311\3064\276l\312l\275\252\351\030\274\374\034\317=.C<<\372[\215\274\002\354\340\275(\213->$\354*>,\034k\275A\325G\274*\3143\273\032\200,\275O}\305\275\203e\024=.^\n\276\024\016\203\274\373\347f\274/hV\275\323\026,\276\211\007p=\343\260U\275\025L\000\275r\340\242\274\235\246<\274\357\023u<~)}=\360#$>J\3365\276\017\026\226=\237\360(>Y\001g=Z\250\246<\274\'\001\2762\351x\274e\231\363;ND\032\275\241|\325=7\262\362\274\003K\325\274\356\232e\275,\376\252=\003\374\'>\\\300\351\275\204e\031>J\255,\275\233\257\3249\222\225\320=\363x\310<q%\341\275\037\323\321\275\026c\311\274\250\200\207\274\366\260Q<\321\021\264\275]\257\010\2756M\002=\002\227\222=2\327\261=\376\330\313\2758\033\274\274\303\341\245\273\230s\367\275\001\013\277\2752\324\375=(\231h\275\035\234\001\276\331\2176>\337\315\265=\277>\316\275\352\030\307=\004Ip<\366\363\201=\007k\013=g\213\271\274\353\226[=\275\360\001>B\342X\2759\2122\276M\331\301<\375\366\347=\252P5=\256\265\210=\214\035Z=\202k\237\275\315\025\334\275\022\"\267\274\345\301\230\275\347\306\326<\226EB>_n\024>\350g\337=\341\332\340\274\337\376\202\273\364\313\277\275\224\177\255\274A\367w=._A>v\331\013\276<\321\324;\301\253\020\276\234A\3169\026\327\212\275\302\031p\275oD\315=m\355i\275%\235\264\275@O\277<Q\245\214=pr\360<\272\031\274\275\260\017\303=tf\004>\016\245\006\274\373\314}\271}c]<\264X\007\276\354\t>>\241*\242\274\201E(<\037\325\340\275\237!\361=\346@\016>\333\237\203=\024\016\222=\024\240\216<\tx\253\275\334\347m\274\220\t\273\275\250wP>\264:\215\275v\237N<\0222\210\275\032a\254<\217\364N=\316\232\021\276QB\315\275\254\224\010\275{\026\024\274W\337W=!\004\237<\000\374X\275&\373\244\274\027\\J>\244\177\271<Nn}=?p{\274>3\006>\'\202.\276\034q\333\275\342H{9l\305P=D\267\022\276\342\326\264;h\317\026\276\346\224\037=;\013\233=\312A\242\275\036V\332=\322\265\034>j\325^=V_\302\275T>\237=\264\036\324\274;\334\\\276\213\203?=\231\361\323=o\347\300=\355\246\236=\332#\356\274&m\323=J\016\210;\332:\036>\221\336\n\2760\270\235\275p\237J<v\247\204\275!Q\031\275XI\370\275\240u\252\275\311\203?\275\202\037\010=\265\2429\275\257\241\366\275\222A\023<\000\203\231=TI\201;\245\273M<]B\214=Y\273\032\275\n\014\343<f\304\276\275\247\327i\274\301\301J>o\253P=6 \261\274\344\350\350:F<\016\275\025*\242\275\210\236?=\331\210#>K\267\030>\006rP=+\314~<\r\313y\275\013\\\016>i\t\204\274\325\316\241\274\020\366$\276\374\177\362<\230\335l=\242\265\336<\t\222\366=[\263N\275\363*\014\275\235w\307=\374\334a>\002\343`\275\351l\353<\021\361\230;a\003T=\306\355\025\275\\\357\203\275$.,<\325\256\205=Jw\026>\377\210\274=9`\034>\030\232\212;\243\216\377=\tx\264=n\332t\275\033b\361\275:\223\250<\346f\236<\227\214\213;\346b\247<\266\014\001\275\341<\331<\363\246K\275\321\0222\275\222\232\225\275\003\245\246=\025\276\217\275\316\331\255\274\250\270\376=\006\202\357\274\313>\353\275\243\0029=p4-\275\013\361\302=\177\001\377\275\340j\003>:\360\265=\206\335Q=\322\272#=*\377t>3\0300\275\214\245\274\274\332\311-\276\267\244\031\275\365\020\177=6\201\352\275\320o\010\274\215\303\000>K\026\317=\2369$\276Eu\007\275,d\257\273x\307\323\275|\342\221\275\251\305\267\275^QQ>\264($\275\202\311\243=\345*2=\200\340\337\272u\021\025\275\037u\307\275\211\222\353=F\'\305\272}1\204=\261\367\351\275\320\353\263\274%\030\304\274_+M\276\273\304a=\206Ks\275+\353\246\2744\231\304=\202\326\007\276\257\034q=\227\203&\275s>\223<\364\266Q\274\344\376\021=Q,\001\276\321nT\274\327Dy\275\000\374#\274\n\277C>\234\217\257\274q%\214;\316\204\207<\262\264\026>\024\037\375\275Z\363\245\275\306\321\006>\326\370U=Zi\300\272\325\026\313\275\340\023\204\275\376\204\227\275\272\333\357\275p=\216\275F\014\031\275\310OU\274\3642\234:\014\321(\2758\023\252\273\203\230\221<o\\\022>\037\274\375\274\004h\220<\311\225x=\236\305\350=A\340\226=j\270o\275N+\321=\rJC>\026\313k>\216\364\353\275}\027\347\275\245\363\261<\260tF\275\375\252\007\276Q\034\010>O\357\322\275\375\003z\273\033M\252\275\034\272\236\275$\003\200\274\364\263\026\276q\252\203\275\262Qv\275\032+\277=(\277\266\274\212\254&=\004\252\265=E\371\024=\177w\n=d_\210=\027\177\356\275l\tn\2746\217\231<5\270\271\275\231\267w=]c\002\275y3\037\274^\203\222\274\343xD>\362<\236=\311`\020;\273\372O=H\305\317\275Ho\013\276\343\2040\276\035\031\273\274<\370A=\307\357\002\276\342\030\032\275/\320\215\275+^\310\275\235\342\217\274\\\212\350=\373\177\343<\376c\232;/mR=\311\340\023\276\360v\305\275@\246o<\226\377\355=\236?\\\2751\357D=\36268>\002J\020\276\315\216\365<\365?\220=\277\177\252=6}\313=\024\371\200=\256\001.\276\274\373\021=\367\320\332=\235\022\231<\3332\023<\2267$\275\366f\367<\320\320a=\365#\234\274t\203\362\275\3263\014\276\nFg\273oR\276\275i\026\017\276\343JI=\267\210\333\274\016DI\275\351=\r>\357E\244=t\270\222\275(\271Z\275e@\206\274\360$\205=\003\372\373=\\1\303=\372/\035\276\255\023\260\274Z\221\036\276\264G<\275Ym\363\275\275OI=\371\251\272\275\347\365\003>l\033\223=\245\377\254=\347\341\002\276\t\335\001=?\274\203\273\211\n\232=\264\277\013> \276\224\275J\375x<!\250\307\275F\252\373\275\024\362\311\275\274\334X\275\323\317\351=\225\257\254=\310S\356=t\375\265=\366\3141=\001\305\231=\362#\221\275f\210\001\274\2067\304=\232\215\006>H\356\311\275\363p\364=\373\270\330\275\362\230\370<\312V6\276_\270\r<TA\'=\224\031.\275\245\364\234\273\360\022,>\000\345\367=\351\231\213\275\270\302\206\275\010\334\247=\247G\217\275z]\257\274\2306;=\t\270k<\313c\254\2752\330\030\276G\203e=\265R8\275\257\206\201<\304\250\203=\026\327*=\304\334\036>r\375\327=;\214v=Tf\231\275I~\037=\365\253\024>$]\203\273\353=\242=P/|\275\260\253j<G\272I\275\273*\313\274\'\334[\275\276!5\275~\257\001\275I!i=O[\202=\371\353\005\276\366\016\352\275\352\273\037=\251\224\302\275\307<$=\177\023\321=/0z\274#O\247\275!}\214\275\314\266)=*&D;\375\261\316\275\3151\300\274G6\021=^\242\007>\366n\236=t\243\352=\324\242\022\275\362\006\275\274\251\256\322\275\236h\330<\315U\276\275\373\333\307=\356\004\201=3R\227=\3017T\2763\\\267=\016v\"=I\243J=\242\005\250;\233{\265=&\241\r\274\373\264\222;\251\216\243=\361\272\207=z\r\200<`l\004\274648<$\236\226\275M\376\332\275\361\2334>\317\017\244=T\203\273=\031\2415\275\235-\017>\375e\360\275\244\336\316\275\340\000\340\274N\334k\275}oi\275E\037\232=\372\334\200\275\322\320\023\276\373\231@=\333\341\036>\250\233\341\274\377M\204=Me\221\276\026@\022>\301NF>:D\'= \316\311=W$\315=\242\241\341<\257\"z\275_\203\240=\0302\277\275\304V/>\257rC\273\225\372\326=\223\035\277\273\327\254\226:S\\\256=H\\\200\274e6%>\316\316&\276Zs\000=\272\207\375<\213 \262<o\005\375\271\002\236\002\276\353i2=\201D\006>!n\007\274Q\262\331\275\030\246\344<\tQ]>[\306t=M\242\256<\3731`\275\230\230\360\273g\023\275=+\322\032;\010k\322=s[5;zU\003>\2005\345\275\317\005\305;\001\257\213=\"a\225\274\253~\021>\026\201\372\274\354\001\004<o\307\260\275\313\302->BL\024\2762\212>\273Pk\271<\036\241\335=\350\301\315\273\333\370\221\275\234a\327\275\342\342\206\275\373h\372<\n4b\2752\037X\275\311S\333=\320\003\222=\233\004+\275\312{n=\374\351[\275Sp\244<Z\353\336\274bEb=WJy=\000\250\033\275\310\345/<\253\301^\275J\351\306\275\361\203#\276\374\001\031\275\204qL= \266\033\275\355p\327\274\342t\230=\020^\335\271v\335\231\275\002\315\037\275I\026t\275{B\266=\2009\203\275n\216%\275\244\342\177=\252\r\r=\361?\340\272b\025\362:\346\216\205\275\365E\217\275\276\0267=D\004\022>\327\262\276\275~\251\202=\350\233\\\275\002\037\270\274\2542\005>.\255\317<\010\220W\276\242\306\317\274\231\261\217=+\016&\274\300\231/\276\267.\260\275y.\023>kt\334\275\261\231\211=(\0229\275\2326\300=\277\230V\275\274=\364=\322\276l\275u\224\231\275\372\252\240=\367\373\265\275\375\000\005\276\261xK\276B\030\227=\341i\264\274\241\312\210\275^\205\230=\350;\337\274@V\n>\376\177*>|\007\303\275^\223\325;]\363\201=C\231x<f6\242=\344@8\276rZ\003\276\361$\026\275\240\036:=\031\351I\275o\321\215<L\177\006;W\256\021=\202\203\232;n\006\232\275$\334\013\276\324\363X\275fk\"\276\214\036T\274\205\214\005>\200o\312=M\235{=;\321\016\275\037\303j=\376$\365\275`@.<\331\376\363\275\234\203{\276\021\035\234:\021\303w=\352&\021>\333\332\010=e.\301=\213?\336=\2108\212<\262z\275\275\252Jc\275\357-U<E\324\003=\357\316\351=\260K\331\275\216I\212=\234kD\275a\326\007>i\354\313=\243\213O\274s\214\372\273a\251\351\274/\267q=\301g\236\275\310`N\2768`D=\270F\211=8:!\275\273\"\014>\221A-=\022\332\321=\033\260\364=,\030\247\275\240\216\031>\267\264D=(\351\261=Ee\n=j\3261<\357T>>i%\034\275I\372O\275\335\365O<\261&\351\275=\371\360\274\313\036\366<\325\034\001\276\250\301)\276m\246\261;\314a\243\275\325Q?\275\365\203\224=\377\007\036\275z\332\321=\201$4\275\033\233Q=\307\266\345=\307\225\232\275\256\005\355\273K\302~\275J\210Z\276\306\347\216=d8\223\275\226\266I=f-\377\275\346\030\346<{\034\257=\"\344d>vQ\353\275I\235\325=/\014\023\275\023\343\314=\033W\"\275\025\352\261\275\023\304<=2\026g=\341\200\350<C\313\375\273#\274<\276\307\273l=\242CC<\360\016f\272po\354\274g\265|\275 \373N\275\306\314\305=!\304\275=\2154<\276AI\202\275\354M\264=\225\266\242\274\314\205\263<\314\004Q=\246.\002\274\266\337+>SY\201\274c\":\275\312r_;\371\342\272\274\036\333\347\275\332\234\'>w\312k=\247\026]\273\213\365\233\275\000xU\275W\301\237<\000\262I\275H\177\240=y%5<\356\025\371;\2318\315\275\310n\006\276\250B\305\275Oq3\275\3509\214\274\377G\325=}\"\323\275\033\034_\275\316\024\371=\204(\037\276I[\355\275\326G\233\2751\351\230=\314$)\275\376\263\217=Cb\000>\336\276y\272\201\306\235=qX\237\275\3073H\276\234|y=\363p/\276\033d\211=\320\247\032\275\367C\210=6<g;\355\247\224\275\242\270\273<c\360\270\272\371\304_\275\216M\375=b9\270:\374%\360<m\250\206\274\303\325\246\273xyL\274\351q\216=\357\245\024\276\250\314\203\275>\035\025\275\340s\277=\360\343\001\276\\\330\022\276\200C\204\275\250`\031\275\234\334\020>\373\260\364=x\005/\275\201\322\331\275\341\274g\275Q\014(\276\004\255\315=W\331\265\274\201\333(>\220`j=\303\252~\275\022S\275<h -=-\213\037>\257P%=#\246J=\273K\360\275\010\3324\276b\360\305=\313R\201<\222\343\325=\300\377P;\220\177\320\275\200\027\271<\017\256D=\304\314\305<vi\315<\237<\021=\226\374\261;iw\\\275\221\340f\274\211\0108\275\2328\267\275\227\305\334=\024\354\300=[r\374=\220y)>%\027\211\275\202\333+\276%lH>K\373!\276\234\361$<\242\232\t\274Ih\006\274T\000\032\275\244HG=\2777\201\275KPY\275\356\242\204\276\2100\343\275\033\350e<\314\007[\275DJc\275\'c@=r\225\363\274\023\275q=\361\036\247\275G\214[;\021Y\\=\025\010\036>}x\202<\3463o\274\242\241C=_\001\363=\240T\310\275A\304H\274OB7\276Hk\t=\254\227e\275\277\027\231=d\364\003\275\001\362\373=Y\320\226\275\203\207\001\275\213~\312:$F\223<1*V\275\2729\002\274ue<=|l\317;\254\3148\274a%\003=\252\035K\275\241\177\312=\264,\234=/\374\201\274\263\264\256\275\203\361\022<\2363\034;S\032)=\364\351\007\275\036\222\177=\332Z\350;\2241.=<\236c=\300\277f=\007\231Q\275W%\350\275\2078\207\275<\006\332=\033\240C>\374\0200\275\013\033\010>\010\323\231={\020S\275\333\200\n>\0021\331=\331\250\227\275\204\244\336\275\227\333\321<\030\257\375=J\254\236\275L\310v\275\277\210(><\263\t<\274yd\275\2609\020\275\275\207(\275O\026A\276\335#\206\275\230\320I\272\303\341\007=\362\220.>P\377\346=`\3747\275\'\331\217\275\316,\001\276\007HN\275v\260\266\274k<\025<\236\337\231\274\272\243\031\275\337\266U\276b\013\312=\006 \002=\024\217\221>\222\275\000\275\322\205i\275v\006\316\2757\274\037\275H\267\336\274\312\272\235\275\203\0229=[\363\006\275\360\377N\275\225\366F\276\332\224\330\275[d\202\273Q\215~=\213\372@\276:\336\202\274\304l@\275\245\304D\276\325\275\275\275\255\306k;E\342\241=\362Pg=\277\002j\275\001\000\366<\013H\225=\227\367\343\275\266\2248<\210q7;M\260\355\274D\201J=\177\376\237\275\305\205\274<\003\251\024\274z\275\253=\252\307\304<*\356\205=\2107\303=\373G\247=\263\276\211=\361+\275=\321B,\275\253\211\305\275\354q\323\275\305M2=\250A\315=)\233\345\273\302\3234=Q\347\263\275W\r\320=\0260)>\234\013\351\275,\353\304\2757\226\036\275\310/\223\274\314\346k\274\2401\034\2766\n\t\276\244\333V;\266W\002<\336\355\245;\200\303\256\274\253I\032>\256\037\222=|\017\223=\254\230\270;\254C\016\275h,\255=\322\261\244<\034p|\276&X3=\177|\304;\344\252\023\275\315C?\275:\014\215\275\006\245\356\275\232\254n\274\025\315/>\241t\206\275QQ@\273\350\353\330\274\3410\372<\274Z\264\274\377@\007\275\347\225\020>\316im=j\214\253\275\301Ge\276\242,\003\276\257\036L=\356\t\247=A\310 =\265\234\303\275^y\303\275E\212\362<\201\241\376\274\301\230\331=\202\366\243<n\241\373\275\016\244\370<74\313\275\227\305i\275\246U\006;\343|&>\233\255\373\274U\255\244=\310W\240=\354uS=U\013\365\273q\245\030\276\255\232F<\336:\260=\3339\021<sx\332<f\301\267=\272?\035=\2565\225\275\017-/=\305\376\354\275d\n:\273b\335O=\236\261R=\265U\270=5\\\361<\255v\360=\370\r\214<^M)\275{\214\017\275\250\316\273=\366\234\342=\314\357\005=\255\322\271\275HB\231>\324In\274\243\374\035>\306\177\036<\257\256\026\276k\005\213<\347\251D<\347\006\300;+\2770\275\261m\270\275\'\313\r\276\336\357(\276\365\003\016=\034W\204<\322\216\302\275\307\\\n\274\330\326\214\275\260cu\275\334\270\341\273\320\276X=\376\372*=o\361\331\275\225j\007\275\221\004\262\274\035\357\267=M\326\300=\373/\202>\030\266B=\227\270\354\275\343~\260\275\307\321\245\275?\254F\275\344\250P=\277\373j=\332\026\303\274r5\316<E\234\005>\016_\006=\326T\321\274!*\233\275\202\211%<\217\r\022\275G\355\335\274G<\273=\334vF\275\271\241\334=\353\327\001\275\026\3050=\324?\371\274\342\n\250\275\306\037\203\274\306\273\023=8=\342\274J\366\216<\347+c>\323F_98\022\337<\240j\260\275\034\274\225=G(\374\275\261\263\375=\327\201\223\275\267\304\303=,\273\347<\250W\320\274\034\025\367<\276\227\n\276\335w\370<PZy\275\020\320D=Z\230\224\275;M_\275\377\'\274\275\351\'\332\275\256\256\231;\347\242\257<\375f\206=\232\232\017=h\\C\275\201\367\212\275\310z\237<\343\323\227>\254\362\213\275\323\020\351<\203\322\017>(\240\354\275\365m\002>\232\020e\275\177\210\352\275yjU<>\332\377\274\234T@\275\251s\206\275\320M\254=\362\215\246\275\013gM\276\252/\027>\265\242I\275p\250\035\276\320\313A=\000\006-\275\027\364\260\275\022\337\004\276\365\342\376\2757\013$>\263\274\337=\017\205\203<(Q\203\274\3421\'\276\314x\370:\276=|=\022\243\343\275#Ci=\244\357~\274]ec>\221\214U\273\252`\020\273C5\236<\251\215\010<\267T\233<\025]\263=\327\2364\275\324\025\222=\301\335\350\274J\216M=\245uj;\320\316\365=\262Z\237<\026\233\216<f\n\021\276c\356\350\275\0024*>\000h\254=9X\211<\030`\001>\007\000\227<pA\231;\2024\314=s\003\373;\364ni\2755\243\003=\237\231\237<V\330w=I\203\225<G\230\247:\213\335\332\275\020\2755>m4\306=\177S\372\275\003\230\312<\343w\273\275\272Y\351<Il\277\2750\3619=\312y\030;l\"5=\263\344\036>Ox\305:\000\336\246\274j@\261<\323\271\027=\"H\'=\033\262\221=?\245\235\2759\277$=F\245\316<\225\367\013\276+\331\232\274\204\202\033\276{\220.>q:=\274\343v\274=,\353\323\274\")\230;\233\216\212\275\255\274\212=Y=\327\275\205\372\316<\376a\251\275{\025\237=rB\323=\276\221 =(\331\034\276n\335\004>\315\003\203>\037t2>\267\317m>\203\361M\275\347q\231=\264\220\306\273\234\005~=\340rT=1\362\265=\205k\322==X\301=\300S\342\273\'p\017>Wr\251=\300\345O=\260\342\341=\314;!=\2574\305=[\273\215=\345\272\364;\231\031\233\275q\022\306=\216\346\241=C\036\244=\034]\202\275\017,7=>\'\262=\302@\035=\354\203\231=\0369&\275,\337&>\025\261t\275\225\241\212\275Q\371\305<Sc2\276\200\375C=\027\177O<_T\324<\021\324O\273p\235\024>\306\337\333<\254Q\202=\275\243\027\275\360@\350<\365`\014\2762\351\274\273AHg\275\327\032\234=W\367\320=G\307\272\275\242V\234=\374\013\334\275\257\323%<\263\rO\276\355^\315\275\360i,\2753\333\257=l\010\201\273,\302\236=\232L\010\276M\037\367\275\016\204h=.\034\025>^\354R\275[\026z\275v\2508=\241P\301=\3500\253\274\211\347\364=\'\260N=\370]\007=\n\263\224=r\322\346:\226\215\007>s\225\000>\221P\343<\355\200\257\275\303(J\275-\025@\276\'\257\334:]\260\014\275\241\\\035<\n\364\023\276Rz<\2761\r\344\274{M\231\275\223ZT\275\n\231,>V\034\225=\345\324\207=E1R\274\344_X>d\016\315\275!\352\246\274.G\240\275\255\251\212\275\035\360\205=j\200h\275\251\310\266\275\301\271\353=fS\340\275j\227\005\276V\241y=\n\330\001=ZR\025=]~2>\257\227U>$\307R\275\023\226:\275\372F\243=\007v\020<gU\215;\335\227\335=\227\037\264=\204L\t;\304\315\226=x\307\233\274\215G\201\275\340\034*\275p\033\260=\003\214,\275\237\013&\275\013\217\241=.\343r=\250W4=\351\273\251=Jt\375\275Y\214\366\275\237n\246=\273*\332<\302 Y\275yv9=d%\203=s\225\354=mM\213=\220D\230\275\320(\274=\n\200b\275\275R+=6\004\322==\340\251=\261\245Q\276\026\364\020\276\\T\221=B\275@=U\360\007\274\276\211\222=0\013\"\276\001>\177=e\2751\275xD\353;\246\341\250<<\035b\275\210\005I=c\364\271=\311D\272=\354\334D\274W~\366=\242S\203\275\331\231\005>\250\"\001>\255\261\371\275\254\311\214\272_5\312\275\'/\001>G2-\274-Y\341=\0027\367=U\365\207<q\271z\275\225]B=\207r\242\275\354\236\t>7\225u=#\200\013=\365C\320\275\010N\333<\247\252\214\273\016\374c=\023\'\340=\254>\327\275\\\374&\274Q\372\023<6\367\006;\006\344\363\275\264\034K\2759\211 >\"\247\024\276\303\264\026=\374\021\213\274\031\214\020>\344\311\342\2755\331\207<\203\367d\275\344a\227\274kP\303<\215\374\013\276b\320\332=\303]\036\275-\220/\274\235\030.=V\214\340\275\226\370\250\275/\260\302\274\336\353\333=\233\2246=P\345\t>7p\007\276\210Q}=\204\"\245\275\305\007\341\275\022I\206<g]\306=\366\364\n<\367)p\274\0012\347= \276\253\275\206\235\004\275T=\300\274?U\254\274l\266\030>\2436\375\275 .u;\243;Y\275\275\213\"\276\371p-=\245\t\022\275\3351\235\275\210\253n<\360V8\275\261\031k=\242\2512=\332%r<\270\241\211<\375\362\204=\345,\200\276\331\325]\275\225\337\207\275\236\030\006\275+\206\030;Z\344\363\275I\241\345\275\223\211\213=\030\316^\274\247\\\031\270\274\262\005\273W\177)\275}\345\327=\375\370\256<\244\310\007\276\252\241\225=N\332z\275\001\246\032<\014N\253=I\026)\275\265\234|<\316L7=>\245\312=Z\226\340\273lD->\021\202d\274\233\220\336\275\240!\257\275\240\tI\276|[\215<s4\316\2732\257\202=[D\'\275\225\340\013=5\366\345\275=j\256\275\227\345\210\275\302\261^\275\0346\375\275\330\017s\2755\302\323=g\211\213<\321`%\275\273P\326<@\007<\275X4U=a\247\313\275\3121\035\276\226`A\275\262q\334=H?\004<\267n1>c\366\227\275\267\240\322\275\237\034\r<\013\364\373\275\322\260\314\274\344\021;\274\312V\r>L7\021>\017\305\226\275K\364\206;\350\361\275<y\344\215<\211\014\252\274?\276\316=\222Z\004<\375\223\024=?L\324<\201!\343=?C\343\275$\346F=\356\353\265=\316\221\217\275\340\353W=\207|A\276\034z\253<\216\302:=\271\373;;\323\021\325\275\207@\253=\207\314+\275\206\017\204\275\252\201\305<\355\025\n>\210k\031\276\005\023\014=\230\2324\276D\313}=\255o\315\275\350\037\250=\211-N=\013\3725>,v8>\025{O\276\262u\222\275k\\\232\275tV\004\276(d\357\274\311\226\013\275\254\332\002\276\265\330\240\275m\333x\275F\262\220\275\005\013\223=\033\330b=Z\350\210<\014\351\356\275\301X\233=Ds\242\274\027V\376\274\357\0148\273\261\255\001>S\270\236\274\315@\004\276\021I\251\275\002\206\352=\340J4<b\026\304\274b\342\202<!\014\242=\246\240\004>\355\265\357\2735#\027\275^\002>=\260\263\376\275\246\300\230=\302\255\243;uH\020\276b\177\254\275r\241\305<\376S\241;\220\267W=\357\244\362=\244Y\205\275pc\r>\235\036\'\276P\263P\274\377;\232\275\027\216\371<\357\335\347\2742\230$=T\220\005>\220\3318=q\332\320\275c4\025\275\034z\333=\324\323\021=E\207\266\275\001\247\252<r\320M\275\257\244+=\033\270\324\275\251\221>\275Z*\350\274\207\360\300\275A\027y=\243HJ=\014\205\020>\252\217\353\275j\024t\275R;(\276\213B\306\274g\372\305\274i\2177=\265\245\004>\025\244[\275\340W\222<\331\220v\275\235\222R;J\334\205\275\226/\001>ZmS>4#\004\274q\302\240=\024F\224\275DB\326=\252v\013\275\314^\361=\035\245\013>u\3053=\324\027\301\275\364L\351\275\027i\007=\260\"\372=Ao\\>(\355\325\275\r\246X=4\265\232\274a\321\323\275\264 \255\275\030\307\232\275\025\3479=\240\203\204\2753lW\276\302\202\357<0\341\257=\335@w\274p\202\302\273y\204\346\275\221Lh\274\365N\221=\323\302\211\275=\177\246\275:\253)\276\373@\252\275-@\016=\270\350-=\323\036\365<\334{\007=N\316\013>\t\014Q\275\342UT>\000\376\204>\351\303\270=]\035\256\275\215\024\212\275\343\321u=\t\\K\272S\354\307\274\342tV=\206\303\214<\001\024\027>\231\311-\275\204\204d\275\323\177\302\274J\037*\2755\263\t\273\345\021\371<\373\303\006>\231s{\275M4[\275\r\013\320=N\3354>F\344\037<]\344\362\274\312\276\025<\346\367\212\273E\036\234=L\363/>,(%\275\336e\366=\0045\036=5v\332\275Z=\214\274\231\036\232\274t\014\213\273E\243.\274\033\361\362=\021x\006>g\210f=\366\320\234<:\377\275=\034\200\372=A\220\344\275\373\216\260\275\003\241\274=\000\341\023>\334g\267=\222\223\233=M\027\205\274\r\261\360\275\332\325+\276\010W\255\275[\267\200=\331i.=3\013\200\275\304\010*\276bJ\037>\003\206\232\272\212\3438=\262N\253<V\333\367\275\202\307+=\262\343;\274\370\357\032\276.\250\030\276\336\300s=\210S\211\275\026Pi=p\3555=~\302\306=GQK=$\267\000\272E\n\277=\251\243\303\275\000\235\371<\274\020x\275\257e\317\274\236]\357\275\027\354\242\2756\026U=\241x\326\275\276p\023\276L\245M=\374|\225\272\347?\037\274\2423\023<%d\270\274\277(\177\274\206M\361\275\230j\377\275\272\253\231\274\"g\220\275\003\212\365\274TS\343\275}01=\022\313r=\\\350v\275\3719\310=\214\324\347\275e[ >;c\017\276\205WA=!\017h\276L\313\250=\255\245\260<\220\376\\\274\202M\355\275\354\336\027<\276\227\224=\250\224\223\274Z \027<\322\200\250=YP\212=\311\360\n=\312|\376\275{u\262\273n\005\347\275\r\232\230<\003\335\370\273\250\373\036>\362\223\250\275\t\031\023>\005\243a=\354\317C>j\032\\<\206\363$<\005sY\275;\357\377=5(\235\274\256\263\270\275\257\356\322=\374\220\256<)\032\'\276;TR\270D\0047\275\024\335\323\275\232\343\222\275u\365\247\273\3455\370\275\360\212\335\275\350I\275\274\321X\016\276\246k\366;\007\3160\273\303|`\275\372H\223\275I\264\270\274\274\273\013\275=|.\275Iz.>\321|\375=\222\357K\275gG\346=\337\344:>,\217\323=f\255\326<\267\334\342\275\026\312]\276\200\330\226<\220\020\353<\301\202->4\030\206>\365sI\275z_\'\276\"2\246=\351U[\275>e\013>\210z\254;8\222\275=\003w\337\275{\347(\276\223;\270=\215\240B\274\223%|\275k\264\233\275b\356/>E\242\220=X\330\020\276\242\005\235=0\034\362\274\026\314\033\275dl\255\275Y\324\254=\356C\206\275\207\305\037\275\002\026?=\261w\344=zj\205\275\226\320\273;\311\320\027=+&H\276z\276\234\274}\347\327<\347\367f<j\330\364<\243!-\275\265\373j\275\374\312\246=\373\010,=\306}q=\322u\365\2750\363\007\276~\007\010\275e\242\204=t\005\316\275\3770`<\3206\'>\032\206\005\276u[Z\275B^,\275\2526\351;\346\315\232=E\325\026=>Y\366=\322<Y\274sQ+>\311nS:\304\346B\274\206V\035=Qg0\276\224c\t\275\'\363E\274@\336\026\275q\211\220\273\216GP=\245wa<Hj\r\275\355\322\275\275\377}\255=\307\353V\275\023h\264=\360\007\251=\333\' \275{\254\007=\247\374T>b2B\275\027\022\021\275\226\006p=\320Q\265\275\3178$\275\305=\201\273\374W\257<i\353\271<9\214\273\274\374\273n<\362\304m\273=pY<\204\220\237=\t\013\022=\366\336\324=\376!)\275W!z=\236\0043\274\340+\313<R6\216\275\225\353\312=-\314\322\275k\230\013>;[\024\275\200\260k\276x\315\331\275Y\345O=%S\262\274\312\227\265<\005\344\237\273\333\334l=\264=\211\2755\252\030=\313\024Y\275\300p\270\273\352p\354\275\244\006\245=\245\335\252\275\241lD\275~\241\217=\250\231\021=H%\274\275\\H5=\'6\237\274)vI=\260\207\352\273\006o\206\275\274\222\221=\347\206l=y\212\323\275\'gq=\361\\\275\275\'k\246\273\311\023\253=\200\224\244<\037\206\321\2751x\265\275t\230\263\274]\237d=\r/\212\276\'\227s:\313F\204<5M\235=]\231\313<\364_\000\275\262\212\211=\240\007\253\275\354\222\222=!i\332=\240\343\017\276\311\273.\275K\246\003\276I\022w\274\201qG\276\035mL\276\016\3744>\241@\265\275D\272:;p_S=\311T\262\275\364\337)\275T\302C\276\265\371g\275\373\270\022>;\304\356<\020\246\326\275\025q\245\274\307\023\203=\213\034a\275\215\370\010=\344r\352\2743\343L=\214\375\211>\347W\264=\330\030\367\274\"\247\036\274\037\021\003=\351\242 =\002\326w<\206&c=\013\030\256<\361\262[=\035\314\316=\004\311\316=\017\021\225\272\017&W=i\204\026>}\314\207=\276\375*\275_+,\275\000\027-\276\367\354\022=>\206\375\274\205\006R=\246\016`\276\254\274\013>\210\254\021\274\246W\210<\253-\275\274\242\327M=\325-\031\275\233E\"=\274\300\020\275F\021\355=Gl\244\275\357\216\261\273O\266\236\275\217\264F\275\260\363\036\276\304\027\355=\322;\243={\027]=\216D-<\336\223\310<\305\016\251<\214S\221<\321\016\036<\030(\312=\354}\234\274\210/\342\274\233\251A\2767m\327\275GZ\234=M\276\202<\203\230\210<\013W\266\275\006\333K\275\202\314\223\2757\n%\276\242`\001\276\357\344\311\275\225I\234\275u\226\214=\246-1\275J\307i\275\215\376\202;\232\340\020>yo_\275\003\022\023\275NL\007>\234\3111\272\307\347\024\276\016;\246;\"\036`\275\374\246\370\275-\031\243\274\374q\004<KL\244=\3009\260\275U\'E\274\017\254D>$\177\013\276\033\017\211\275\365a\203=\to\024\275\277\340\177\275s&\r\276\254y\257\275\317l\005\275\225:\256\275H\201\030\275\347\236C\275\250\230\032\275\273\377\215=\204\217\313\274\370w;=\271\327%\275&9\275<\240\300#=\225\373\265\275\004\240\300\275\334\325\244<\333\203\216\276\374\001\341=\230;\206=\3462\375=D\245F>?\3160\275\224\352W\274\220\016\261\275\334\222\324\275\350\005\014=#\n\235\275\375\"-=DgR\275y\206\223=%\231\366\275\212m\006=\360\371\207\275=\341\252=a\305\324\274\007\345\256=\0272\337=\360\367\323<p\315\276<B\004\344\274\245\247]\275\244gG\274r%\014\276\353#5<]\206\371=\213\265\305:\031M\023=:\020\317\275Y\017\013>\251\377\365\273z\353\311;c\375\227\274\260;\027\275\3668G=Str\275q\221=\274$\302\305<\337\237\335\274\251l\320<\017\267\014>\353\232\377=s\225\036>+\355\343=\276\240\300\275\032I?\275\032\2741<\243\017\303<@\\\235\274\3709\250\275\213\313\002\273d\'\014>\333Z;\275\330\001\207\274\302-\032\275\341\325\205=\3107G\275\213x{\274\017\025q>\204\340\271=nU\020=f\r^<r\270\365=\273\255r\275G\311\273=\233\241\232<\022o\204\275\361L\323=:\367\251<|G\033;\205\222\020\275|\2442\275W\264\245\275\373\305c\274\030=p;\325D\223=\021\303\372=g\226-\275`\013X>N$\317\2743\224\337=b\365\327;#\215\013>\244\367\310\275V\310\320\275\250\264=\276\237\370M\275\030.\033\275\006\002V=\360\265\034\275\341P\033>PH\373=%+J>\004\0271=q\366W>j}l=\013\316!=\371f\360\274A\333\3579\177\247\244=\312\3034\276\2616\202=9\354m=\304\3455\274n\014\032\276\266\204\030>\340\274f\276\275f\365;^\031-=\202\216\367:\227!\340=\215<z=1ai=\206\232\332\275hx\214:f\2430\276\262_W\275/\370\266\275\026SB=\236j\377=\306[\320=\024%\365\275\245\034\220=Qj\212=4\376$>\312\235o=\311\036\315\275\275]\337=\214\242\324;y\232\221=\311\007(=f\352.\276\350\353\030>\216\215\233\275\275j\356\275\030\177\355\274\000Xk\275\357\244\363\275x\"s\275\213\221\035\275w\210e\2752m\322\274\360\314\245=$\006\373\275\322\323X=\373.\276<\027^\305=>\034\207\274]8D\274//\257\274\272\274\000=\032Z\260=\225\005\360=p\261\241\275l\243N=\206\315\234<[\227T<\013\312\354=\314\306g\275\303\003\223<;@P<|\265-=\235a>=1n\235\275\277\211\007\275\371E\367:0z\222=\221O\357=\005\'\225=\202\226\276=\357\225\t=e\016\305<N\004$>\rHk\276\265\213\353\274\247&>=\023 \252<\247I\251<\005pj\273\310\312f\275\214t\344=?u\306=\350M\034\276+\034\354=}\325[\271\224\021\031>\350\344\343\273\177\311\305\275\253*\302=\033T\031\275t\373N\2754+\363<u\030\200\275\366e\000=\3214e\276\034\203==\203B\250<3\003\240\275MN\017=S\200\212=\324\314\275;s\263\300=\331q\245\275?\311\212\275\241e[\275\357\267\332\275\023aA=\367\031\010\275\014\002j=]\264\'\276\356W\323\275\327\210m\274l;Y\276\277\356F\275\004QE\275\313\204\034=\247\225\006>\334>^<8f\337\275\215\332\237\275z\216\342<\202s*\275e)B\274\212\005\371=r\022\256=\372\021\013<2\340C>U\303\266\273>\216\004\2769\244\267=h\220\275\274\211\202T=^C\334=\315\230F\273i`p\275\r\357\307=\007\336\001>\351\324=\275\365\213%=\224\203s\27582\315<\367\337`=5:\323\275\202I\216\274\3648\334;\242\336s=^$\263=\345\324\202\275\271G\326=O\247\306\275S\316\031=k\3314<\225\201\204=C:\017=\334\274=\275q/j>(_\321\275G\n\006=\236\375\313\275F\271\372\271\020\272\\<\244#\210\275\014Y\010=\226\237%=\354\265]=A\242\213=\374\030F<\223w\r\276>&\037\274\311oq=\346T\262\275\301+3\275\020\325\001=\242\025\017\276\010\027\277=U]\370\275\307\353\244>\213|a\275k j=\352\021\215\273\236\022\342\275\210\275\016\274o2\336<b\3428\274zI\223=\351Z\236=c\224@\275i\207B\276\354\364\217\275\261Hq\276z\206\002>\335k\000>\322\335\251\275\347\3440\276T\207%=\240\331\315\272h\367!\274\275\371\312\273e\326->\216\237\232\275\353\331\332\275\031a\376<Ll\016=x\300\030\276\350H\252<\320\\\n=\207\016\211<k\271^\275\370G\201\275^\327\266=\346\263\211<\"+\276\275\264\236\241\275\030\177\177\275I\001\t\276\253\277\027=\342O\321\272\016~\310\274+\2610>)\337m<\'r\321;.\333\243\275\272[\372\275\233\311\216<\017\354N<\000\255\035<=o\033\276&X\247\275ET\222=\373J\224\275\256?\272=\375\276\003=N\271\302=\375\252\227<\213\231\365\2751\013\016\276\310\274z\275\301\210$\275\330\210n=\024\261\222=\335\351\215\275\321\231\353<\223\245\314\275U\216!\2761\262\344\274D\372\312\2754\013$=\272\343\230=\223PV=9\300\261=\364\215\225\274\222Rq=\214\263]\2757\244#=\017\221V=\r\031\217\273\354\016\347\274#\313\216=\323e\207\276hu\237\274\3409>\275I\022\225\275\220\312\206\275\276\213\223\275$\037\227\275\230Z~\275Ae\227<}\241\304=\344\372?>y\337J\275S$\262\275\351\013\002\274\275\nJ\275^\rI\276\027\014\337<\276-\007\275\315 Q\275\316F\201\275\300c\224<\3502\307\274\242\334\273\275A\325\347<|\010\303=\006\002;\276x\212\n>\332k8\275\247\247i<\310\036k\2740\025a=\206\241%\275\371\375\365:7~\367=dH\002>\227-p=#\024\273=\241u\014=i\324\022>lJ\244\274\204]\022\276!\366\020\275g\003\331=L\305M\275J\322\215=\204k\376\275\333\3308;\'=\316\275KQ\200\276\320*m=f\026\013=z4\007=\343\363\325<,\222\255=\034\314b=q/Q\275\200\310\231;AT,\276\301\216n\275\262|\357=\'\334\244=WT\302\2756R%>\243\273\311;\177\333\222=\210=\260=,\2332;\360w\350=9\357\232\273\035\227\370<\260\321p=\035:\"\275\315\3374\273\0029\372=\023\322y<\037\357\235<\265\342\256:X\177\177\276\245\255\n\276\246?V=\214\2029>\245\234\217=\261\324\361\274\025\272\022=6\304?\275\231\215K\275t\350\316\273\245U\220=\3377\244\274W+\351=\014r\363\274\006\264\214\274]\321-\275T\313X;\233|\255\273h\016\021\275\253\302T=\273\361\262=f\227`=<\303,=\272|\275=\316[\226=>\204v\275\205d\242\274?\240\021\275\221\314i:\336_\312\275\203A\372=\305\340\306=\nVP\276\\\262R\274\344A0<\3359a\274y\205\276\275S\345\270<JiZ\275\021\3576>\217?\240\2758B\212\275\206F\005>\27127>\207%\234\2741\'\354\273s\303L<[\303\236\274W\255)\273\020\346\016\276\200\252\355\273!\216\276<\\i\335=I\013c\275\224t\214=ae\336<\356\322\324\275\261@M\274\300\317*=O\006F=\261\251\371\275\312\234\000=\354\305\353\274\347\210\266\275\0279\235\275\234e\365\274,@,=/\020\r\276\034\034D\275\006{\376<\207*x\276JyD=\r\373\220\275p\275\306\274\215)\n=\t\030;\276\260\365R=\341\332C>\037{F\275?\241[\274\314\252\244\275\315e\000\276\241\272\032\274NP\231<\325d\340=\330\322\252<1M2\276\336\004P\275\246,\352;b\276\335\275\002(\257\275H_\214=\\\272\244\275\367a\205\275\024\233:=\021q$>\033^\022\275_t\034\276\342(\037\276\022?,=\020\257\220<\374k\327<y\\\025>K\3521>\333\210\021\276\352\370\213\272\220\246\312=H\345V\274O\307\312=\226^\220\274\311\003\240=0\322\214\2755i\026>\252\374\006>\007\331\010<!}i\2757b\253<\206\365,\276T\350N\275w\277\027>Q\016\366\274\306\341\267\275G\264\243=U6\032\276pT=>\033=\207=\006\036\307\275\231\374\244=\034\025P\275k\347\365\275\203\234\322=R\325\023: \256\210=\210\257\236<Ea,\276\312\344\230\275?\234x=\307\224\370<\270}\326<\235\220\343;\237K\200=g\2412=\"\005\006=\034\007\317\275#\010\310\275\336\227\326=\017O\003\274\2406\376<f\204a\275@i\262\275\3527\262\275\253m\224\275\342\r\240<\231)\275;\001\005\037\275\301\223\266\275\334ir=?\3311<\340\226\r>\351:T\275\r@\217=\311\036\033>\235\026m\27503\347<\226:\025\274`\\\316\275\220]%<\220v\272\273\337\263\235=\3236\251<\230$\240\275\260k\233;\244r\010\276\216\2275\2763E\373\275CiC\275\266v6=x\315\002>\350!j\275\036\272e=\353\371\241=\004\367\254<\371!\215\274\347f}\276UA\t=\001\260\210\275\245\006r>\220\231\r>CG\235\275/\372\033=\242\033M=\367\277}=\003\177\336\275\242\016\007<\374i\217\274\031-\220\274e\342\354<\3459\221\275\325\277[\275\257-f=\211\3622=X\006\034=O\352?\276\272x\226<d\343$\276\213\2416\276L\016\021\276\312\321\323=|J\355\273\200\313\375<\265\270\314<.\353\254=\364\201\341\275v!\270=\237\251\216\275{\3033\275As\003=XiZ\275\250\304\014\275\326\221\270\275\t\277J\275O\312F=\372\326W>e\322\312=(\030\\\274\266\301\273=\007\274\356\275\257U\201=\260\351\005\276\346\272\242\275\035\001\332<6\377\250\273r\3257\276`h\332\275\304\027\273\275\305\002#=\353\250\267\275!$\247\275\254\313q<0\223\232=\037l!<\007]\224\275\303&=\276\210\017e\275\3556\346\273\356}\314<\321\303\205\275#C0\275\t\023\201\275\326\356\272\275g\353\025<\315b =i\032;<\r\345\245\275\334K]\275\344\254\340=\t\302\324\275\232\241Y\275\255}\016\275\275P=\2759\221l=\261\354\227\2751\343\346=\341\241\251=x\340\364=\315&\220<\252U\t\276\0149\310\275\362\220\266;P\310D\275\'\022\210=\233\367\230\275G\332\355\275\031O\307\275\310\220S>\240\'&=H\345\265=\r:\016=P N=\007\335\264<\206\024\014>\224:\342\275b\314p=x\001\001\2748B5=t\241\345\275r\371B>\214\n\033<!\320\007>#=\006\275\215!\002\274\263\206m\275\313\264\202=\245\345T=z\031F;\241\024\341=\237\217\363<0\353<=\240[2\274\324\204P\275\273\314\261=\235z\262=v\004\315\274\t\206\233=\214\024\246\272\204\262\374\275u\361v\275-\302\265\274\'_.=N-\310=\324t\210\275\037k\312=40\331=\270\216\200\275(\375\243;\216\266\204\275\024\234\207\274\311_\362\275l\026\033>\032\217\005\275y\243?\276.\374\370\2742c]=\334b\203\275o\250\201\274X\336H=\2704\321;\004P\253=\366\024a\274k02\273\200\021\344<\2221\267=\374N\001=\316\t\304=\325\\\005>0{E<\377\026,\275\334\177\026>ah\242\275{c\206\275V\254\205\275\200E\351=\215\345\026\276V\233\024\275\275\274\210\275\212:^\275\224\374\261\275\r\351\224=\177\270\211<\030\nG\27569\201>\030\354\024=\265Tt=H\376\001>\346\340\014=\351\304A\276\'0)\276m~\215<\033\020R<\3756\311\273\261\020\200\275y\2420\275\223\000\271\275\330g\303<\311\360\264\275C|w\276\277\216h=R\355+\276\361!\210\274\003\360[>\022(i\271\257!n\275\214X\022\276\213\337\227\275#\021\231\274@c\'=\"j\023\275\203\376R\275\344\265\377<^\234\351=L\351\307\274\355K?>\302\300\001>zBf=\033\247\254<\021[\014=h\374V=\202L\t<\020pH=2\267\217=1\316\200=\306\035d\275\252\251\231=\206\007J=T>\361=\217a\"=(\035\231\275\342n\275\275+\370\314\275p\313\232=`\000d;\206t_\274\020\247#\276w\316\010\275\265\007r=N\304\025\274\312\317}\275\005\304*>q2\311\275L|6\275\366}P=\001\244\214<\022\311M\275\243\256\303\2743:G=#\265\207=`\267\010\276\331\216\206\275-,\334<K\262\332=\312\007\305=g\300\363=\342;\204<-\206 \276\346\tr\275\'\331\271\275\345\334\221<J\354<\276\002T\264<\307\374\223=\035\244\010>p\005Y\274\350\325`>\250\204i=\261\005\224=\tg1=za,=Z\177\371=\343\004\303;hI\216\275HK\005=\362\316\350\273\324\211\331\275\327\332\254=\254\263\333\275~D\246\274m1\017>\373\004\307\274\035%\271\2757\240\375\275\260\301\224=\275\337\215\275\0056%\276\250\217\213\274\030\322\312=&\224\230\275\333\315\221=N\303a=\253\273\212>\2509\237=\007\315\315=\234\034\254\275\342\177\026=\336\333O\274J\000\233<\304\205h<\200:\026\274~\355\210\275\201\267\363<Q\001\361;\271\036\226\274R\361\203\275\223\240\r\275\301\216\305=\006\333\370\275e=\344\2735\230\005\275\334\026\034\274\021\037\346:\025\005\304<\371\247\330\275\227\033\355\275|\003\023=\345?\370=lT\205\275\322\201\260<\353\306\007>)\366\323=\206m\276>T!s\275\365\200l\275\233\352\001\276\335\247}\275\367F\211=f\351\333;@\0036\276|\337\016>\311\261\375\274\356(O=Knh\274\372\031\377=\003N)=\r\035\007=\314\023\207=\37228\275D\351\311<_\026Q=*\264\001\275_#\007=\311\033}=c\301\010>\027H\221\275\347\027\323\275\221h\272\275\237\324\253<\0169\303\274=\002<\274e\3253<\353\236a=\250\267\014>\344\024X>\35142=\367*\231\274\265:\2419\240\026\307\273\333b\020=\316\377o=\250\333\305=S\264\230=\'\031P\275&n\236=\265\007\316<\206v2=X,\203<a/\234=\007\375\206\275\215\335\024>\\\017\033\276\370\200\003<^\314\230=|o\037>\266\311\320\274\365iu<\203\204~=\223\372M\275i\352j=\035\032\202\275xk\241\2757s\212\275_\364\277\275\2104\203\275\250a\361;\350\026\\\275\304\3065=:\365\311\275B\230\235\275\2715\303=\002\023\216=\263A\277\275\365\363\241=\244\260$>\305\251\010>!$v=\356P\353=\314\234\244<M\342\213\275\322\336T\276\027\\\277\275\221\375\325\275\325\350\226\272\006\260\310=\3175\326=\306M\241\274CY\252\275\005i\010>c}\344=\'\261\213=\027\243\307\275Fza\275c\022\276\275_\366\024=\227\230\360=\366\340G=\001(\017\275~\200\236=\023\210\026=\274\330\277=Ks\204<\343\263\310\275\020\250\035=t\312w\274\262/\237\275\377\316\034\276@>\r<\334\003\246<\022\217X\275N~d=:\036I=D/\t\274K\\\347=\345\037\377\274\037S\002\275\224\251s\275j\331\351\274\271\317\302=\345H\372;/\240:\275\261(\006=L0\026\275\322\343\305\275\256\365\005\274\201[1=,\306i\275\320T\243\275z\257\244\275q\346\210=\252 @\275=\301\316=\266\0177>\365\215\205=\265\301(\276\000\020\225\275>\227$\276\236D\260</.\345\274\353\276%>\366O\311<TL\342\275^\310\305<\374XD\276R\313\322\274Cgi\274\233\365\360=\374\343q:/a\357\274\334\253@>\224\250\010>?\375|<\247\246#>-\224W;\017F\321=e+\025=\036p\203\275h\205\337\274\025\355\034\2759 \007=\367\3500\276\2777\230=,@\031\275\222\032\036\274g\277\007\276\303\215\247\275G\312\317\272\317<\203\275\026\261\274\275~ha:\325\362\032\276N%\374\274\261;\220=\216\343K=\211\034\261\275\261\264\364\275:\237\006>)\355t\274-|f\275\311\204w<FD\321<\3611\254=\211u\000\274g\370\233<:\377%\276\030\230\344;\007\000m\274\004\305\310\275\307\353.\274\234\034)\275\230\2215\276J\226\375\275\247\300!>u\223\211\275\343\377\022=\241\302\330\275\267\3325>Y8\272=\223\177W\275\260P-\274"
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "lstm_3/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/concat"
  op: "ConcatV2"
  input: "lstm_3/Const"
  input: "lstm_3/Const_1"
  input: "lstm_3/Const_2"
  input: "lstm_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/bias/Assign"
  op: "Assign"
  input: "lstm_3/bias"
  input: "lstm_3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/bias/read"
  op: "Identity"
  input: "lstm_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/zeros_like"
  op: "ZerosLike"
  input: "lstm_2/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Sum"
  op: "Sum"
  input: "lstm_3/zeros_like"
  input: "lstm_3/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_3/ExpandDims"
  op: "ExpandDims"
  input: "lstm_3/Sum"
  input: "lstm_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile_1"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose"
  op: "Transpose"
  input: "lstm_2/transpose_1"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_3/Shape"
  input: "lstm_3/strided_slice_12/stack"
  input: "lstm_3/strided_slice_12/stack_1"
  input: "lstm_3/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_3/transpose"
  input: "lstm_3/strided_slice_13/stack"
  input: "lstm_3/strided_slice_13/stack_1"
  input: "lstm_3/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/MatMul"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_1"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_2"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_3"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/MatMul"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/MatMul_1"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/MatMul_2"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/MatMul_3"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/MatMul_4"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add"
  op: "Add"
  input: "lstm_3/BiasAdd"
  input: "lstm_3/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul"
  op: "Mul"
  input: "lstm_3/mul/x"
  input: "lstm_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_1"
  op: "Add"
  input: "lstm_3/mul"
  input: "lstm_3/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/add_1"
  input: "lstm_3/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value"
  op: "Maximum"
  input: "lstm_3/clip_by_value/Minimum"
  input: "lstm_3/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_5"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_2"
  op: "Add"
  input: "lstm_3/BiasAdd_1"
  input: "lstm_3/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_1"
  op: "Mul"
  input: "lstm_3/mul_1/x"
  input: "lstm_3/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_3"
  op: "Add"
  input: "lstm_3/mul_1"
  input: "lstm_3/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/add_3"
  input: "lstm_3/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/clip_by_value_1/Minimum"
  input: "lstm_3/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_2"
  op: "Mul"
  input: "lstm_3/clip_by_value_1"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_6"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_4"
  op: "Add"
  input: "lstm_3/BiasAdd_2"
  input: "lstm_3/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh"
  op: "Tanh"
  input: "lstm_3/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_3"
  op: "Mul"
  input: "lstm_3/clip_by_value"
  input: "lstm_3/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_5"
  op: "Add"
  input: "lstm_3/mul_2"
  input: "lstm_3/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_7"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_6"
  op: "Add"
  input: "lstm_3/BiasAdd_3"
  input: "lstm_3/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_4"
  op: "Mul"
  input: "lstm_3/mul_4/x"
  input: "lstm_3/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_7"
  op: "Add"
  input: "lstm_3/mul_4"
  input: "lstm_3/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/add_7"
  input: "lstm_3/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/clip_by_value_2/Minimum"
  input: "lstm_3/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh_1"
  op: "Tanh"
  input: "lstm_3/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_5"
  op: "Mul"
  input: "lstm_3/clip_by_value_2"
  input: "lstm_3/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/TensorArrayUnstack/Shape"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_3/TensorArrayUnstack/range/start"
  input: "lstm_3/TensorArrayUnstack/strided_slice"
  input: "lstm_3/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_3/TensorArray_1"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "lstm_3/transpose"
  input: "lstm_3/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "lstm_3/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/while/Enter"
  op: "Enter"
  input: "lstm_3/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_2"
  op: "Enter"
  input: "lstm_3/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_3"
  op: "Enter"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Merge"
  op: "Merge"
  input: "lstm_3/while/Enter"
  input: "lstm_3/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Merge_1"
  op: "Merge"
  input: "lstm_3/while/Enter_1"
  input: "lstm_3/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_2"
  op: "Merge"
  input: "lstm_3/while/Enter_2"
  input: "lstm_3/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_3"
  op: "Merge"
  input: "lstm_3/while/Enter_3"
  input: "lstm_3/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Less"
  op: "Less"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Less/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/LoopCond"
  op: "LoopCond"
  input: "lstm_3/while/Less"
}
node {
  name: "lstm_3/while/Switch"
  op: "Switch"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_1"
  op: "Switch"
  input: "lstm_3/while/Merge_1"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_2"
  op: "Switch"
  input: "lstm_3/while/Merge_2"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_3"
  op: "Switch"
  input: "lstm_3/while/Merge_3"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_3/while/Identity"
  op: "Identity"
  input: "lstm_3/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Identity_1"
  op: "Identity"
  input: "lstm_3/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_2"
  op: "Identity"
  input: "lstm_3/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_3"
  op: "Identity"
  input: "lstm_3/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/while/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul"
  input: "lstm_3/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_1"
  input: "lstm_3/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_2"
  input: "lstm_3/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_3"
  input: "lstm_3/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add"
  op: "Add"
  input: "lstm_3/while/BiasAdd"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul"
  op: "Mul"
  input: "lstm_3/while/mul/x"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_1/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_1"
  op: "Add"
  input: "lstm_3/while/mul"
  input: "lstm_3/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_1"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_1"
  input: "lstm_3/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "lstm_3/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_2"
  op: "Add"
  input: "lstm_3/while/BiasAdd_1"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_1/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_1"
  op: "Mul"
  input: "lstm_3/while/mul_1/x"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_3/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_3"
  op: "Add"
  input: "lstm_3/while/mul_1"
  input: "lstm_3/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_2"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_3"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_3"
  input: "lstm_3/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "lstm_3/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_2"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_1"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_4"
  op: "Add"
  input: "lstm_3/while/BiasAdd_2"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh"
  op: "Tanh"
  input: "lstm_3/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_3"
  op: "Mul"
  input: "lstm_3/while/clip_by_value"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_5"
  op: "Add"
  input: "lstm_3/while/mul_2"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_6"
  op: "Add"
  input: "lstm_3/while/BiasAdd_3"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_4/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_4"
  op: "Mul"
  input: "lstm_3/while/mul_4/x"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_7/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_7"
  op: "Add"
  input: "lstm_3/while/mul_4"
  input: "lstm_3/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_4"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_5"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_7"
  input: "lstm_3/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "lstm_3/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh_1"
  op: "Tanh"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_5"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_2"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/mul_5"
  input: "lstm_3/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_8/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/while/add_8"
  op: "Add"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration"
  op: "NextIteration"
  input: "lstm_3/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_3/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit"
  op: "Exit"
  input: "lstm_3/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Exit_1"
  op: "Exit"
  input: "lstm_3/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_2"
  op: "Exit"
  input: "lstm_3/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_3"
  op: "Exit"
  input: "lstm_3/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range"
  op: "Range"
  input: "lstm_3/TensorArrayStack/range/start"
  input: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_3/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/TensorArrayStack/range"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "lstm_3/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/sub"
  op: "Sub"
  input: "lstm_3/while/Exit"
  input: "lstm_3/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/sub"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose_1"
  op: "Transpose"
  input: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_3/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9169631
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Tanh"
  op: "Tanh"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1254494
    }
  }
}
node {
  name: "dense_2/random_uniform/sub"
  op: "Sub"
  input: "dense_2/random_uniform/max"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/mul"
  op: "Mul"
  input: "dense_2/random_uniform/RandomUniform"
  input: "dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform"
  op: "Add"
  input: "dense_2/random_uniform/mul"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/kernel/Assign"
  op: "Assign"
  input: "dense_2/kernel"
  input: "dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/kernel/read"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/bias/Assign"
  op: "Assign"
  input: "dense_2/bias"
  input: "dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/bias/read"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Softmax"
  op: "Softmax"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum"
  op: "Sum"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv"
  op: "RealDiv"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub"
  op: "Sub"
  input: "loss/dense_2_loss/sub/x"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value"
  op: "Maximum"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Log"
  op: "Log"
  input: "loss/dense_2_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/mul"
  op: "Mul"
  input: "dense_2_target"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/dense_2_loss/mul"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean"
  op: "Mean"
  input: "loss/dense_2_loss/Neg"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual"
  op: "NotEqual"
  input: "dense_2_sample_weights"
  input: "loss/dense_2_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Cast"
  op: "Cast"
  input: "loss/dense_2_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_1"
  op: "Mean"
  input: "loss/dense_2_loss/Cast"
  input: "loss/dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv_1"
  op: "RealDiv"
  input: "loss/dense_2_loss/mul_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_2"
  op: "Mean"
  input: "loss/dense_2_loss/truediv_1"
  input: "loss/dense_2_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "dense_2_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "dense_2/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_4"
  op: "Enter"
  input: "training/Adam/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_2"
  op: "Merge"
  input: "training/Adam/gradients/f_count_4"
  input: "training/Adam/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_2"
  op: "Switch"
  input: "training/Adam/gradients/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1"
  op: "Add"
  input: "training/Adam/gradients/Switch_2:1"
  input: "training/Adam/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_5"
  op: "Exit"
  input: "training/Adam/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_5"
  op: "Enter"
  input: "training/Adam/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_3"
  op: "Merge"
  input: "training/Adam/gradients/b_count_5"
  input: "training/Adam/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_6"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_3"
  op: "Switch"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_1"
  op: "Sub"
  input: "training/Adam/gradients/Switch_3:1"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_3"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_7"
  op: "Exit"
  input: "training/Adam/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_7"
  op: "Enter"
  input: "training/Adam/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_4"
  op: "Merge"
  input: "training/Adam/gradients/f_count_7"
  input: "training/Adam/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_4"
  op: "Switch"
  input: "training/Adam/gradients/Merge_4"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2"
  op: "Add"
  input: "training/Adam/gradients/Switch_4:1"
  input: "training/Adam/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_4"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_8"
  op: "Exit"
  input: "training/Adam/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_9"
  op: "Enter"
  input: "training/Adam/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_5"
  op: "Merge"
  input: "training/Adam/gradients/b_count_9"
  input: "training/Adam/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_10"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_5"
  op: "Switch"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_2"
  op: "Sub"
  input: "training/Adam/gradients/Switch_5:1"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_5"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_11"
  op: "Exit"
  input: "training/Adam/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  op: "Shape"
  input: "dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  op: "Mul"
  input: "dense_2_target"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_2_loss/clip_by_value"
  input: "^training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  op: "Neg"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_3/while/Exit_1"
  input: "^training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/sub"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  input: "lstm_3/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_3/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_2"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_3/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/add"
  op: "Add"
  input: "lstm_3/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/add"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  input: "lstm_3/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  input: "lstm_3/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  input: "lstm_3/while/add_6"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_3/while/Identity_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  input: "lstm_3/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  input: "lstm_3/while/add"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_2/while/Exit_1"
  input: "^training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  input: "lstm_2/while/Tanh_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_10"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/add"
  op: "Add"
  input: "lstm_2/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/add"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_7"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_11"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  input: "lstm_2/while/Identity_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  input: "lstm_2/while/Tanh"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  input: "lstm_2/while/add_6"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_2/while/Identity_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  input: "lstm_2/while/add_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  input: "lstm_2/while/add"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_12"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_13"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_13"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_14"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_15"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_16"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_1/while/Exit_1"
  input: "^training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  op: "Pack"
  input: "lstm_1/Tile/multiples"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_1/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_17"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_17"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  input: "lstm_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_18"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_18"
  input: "training/Adam/gradients/lstm_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/add"
  op: "Add"
  input: "lstm_1/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_1/Sum_grad/add"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range"
  input: "training/Adam/gradients/lstm_1/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_7"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_19"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_19"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_19"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  input: "lstm_1/while/Identity_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  input: "lstm_1/while/Tanh"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  input: "lstm_1/while/add_6"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_1/while/Identity_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  input: "lstm_1/while/add_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  input: "lstm_1/while/add"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_20"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_21"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_21"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_22"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_23"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray_1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_1"
        s: "loc:@lstm_1/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_1"
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_24"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_1/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/lstm_1/transpose_grad/transpose"
  input: "conv1d_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  op: "Shape"
  input: "conv1d_4/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_4/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_4/convolution/ExpandDims"
  input: "conv1d_4/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_4/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_4/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_4/Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/stack"
  op: "Pack"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Rank"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Slice"
  op: "Slice"
  input: "conv1d_4/Pad/paddings"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Slice/begin"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Slice"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_3/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_3/ExpandDims"
  input: "max_pooling1d_3/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_3/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Reshape"
  input: "conv1d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  op: "Shape"
  input: "conv1d_3/convolution/BatchToSpaceND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_3/add_grad/Reshape"
  input: "conv1d_3/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_3/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/BatchToSpaceND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_3/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_3/convolution/ExpandDims"
  input: "conv1d_3/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_3/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_3/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_3/convolution/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Reshape"
  input: "conv1d_3/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_3/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/SpaceToBatchND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/stack"
  op: "Pack"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Rank"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Slice"
  op: "Slice"
  input: "conv1d_3/Pad/paddings"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Slice/begin"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Slice"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_2/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_3/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_2/ExpandDims"
  input: "max_pooling1d_2/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_2/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Reshape"
  input: "conv1d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  op: "Shape"
  input: "conv1d_2/convolution/BatchToSpaceND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_2/add_grad/Reshape"
  input: "conv1d_2/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_2/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/BatchToSpaceND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_2/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_2/convolution/ExpandDims"
  input: "conv1d_2/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_2/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_2/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_2/convolution/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Reshape"
  input: "conv1d_2/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_2/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/SpaceToBatchND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/stack"
  op: "Pack"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Rank"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Slice"
  op: "Slice"
  input: "conv1d_2/Pad/paddings"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Slice/begin"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Slice"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_1/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_2/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_1/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_1/ExpandDims"
  input: "max_pooling1d_1/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_1/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Reshape"
  input: "conv1d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  op: "Shape"
  input: "conv1d_1/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_1/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_1/convolution/ExpandDims"
  input: "conv1d_1/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_1/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_1/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Fill"
  input: "training/Adam/zeros/shape_as_tensor"
  input: "training/Adam/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Fill"
  input: "training/Adam/zeros_1/shape_as_tensor"
  input: "training/Adam/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Fill"
  input: "training/Adam/zeros_2/shape_as_tensor"
  input: "training/Adam/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Fill"
  input: "training/Adam/zeros_3/shape_as_tensor"
  input: "training/Adam/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Fill"
  input: "training/Adam/zeros_4/shape_as_tensor"
  input: "training/Adam/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Fill"
  input: "training/Adam/zeros_5/shape_as_tensor"
  input: "training/Adam/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Fill"
  input: "training/Adam/zeros_6/shape_as_tensor"
  input: "training/Adam/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Fill"
  input: "training/Adam/zeros_7/shape_as_tensor"
  input: "training/Adam/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Fill"
  input: "training/Adam/zeros_8/shape_as_tensor"
  input: "training/Adam/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Fill"
  input: "training/Adam/zeros_9/shape_as_tensor"
  input: "training/Adam/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Fill"
  input: "training/Adam/zeros_10/shape_as_tensor"
  input: "training/Adam/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Fill"
  input: "training/Adam/zeros_11/shape_as_tensor"
  input: "training/Adam/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Fill"
  input: "training/Adam/zeros_12/shape_as_tensor"
  input: "training/Adam/zeros_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Fill"
  input: "training/Adam/zeros_13/shape_as_tensor"
  input: "training/Adam/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Fill"
  input: "training/Adam/zeros_14/shape_as_tensor"
  input: "training/Adam/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Fill"
  input: "training/Adam/zeros_15/shape_as_tensor"
  input: "training/Adam/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Fill"
  input: "training/Adam/zeros_16/shape_as_tensor"
  input: "training/Adam/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Fill"
  input: "training/Adam/zeros_17/shape_as_tensor"
  input: "training/Adam/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Fill"
  input: "training/Adam/zeros_18/shape_as_tensor"
  input: "training/Adam/zeros_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Fill"
  input: "training/Adam/zeros_19/shape_as_tensor"
  input: "training/Adam/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor"
  input: "training/Adam/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Fill"
  input: "training/Adam/zeros_21/shape_as_tensor"
  input: "training/Adam/zeros_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_21/Assign"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21/read"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22"
  op: "Fill"
  input: "training/Adam/zeros_22/shape_as_tensor"
  input: "training/Adam/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_22"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_22/Assign"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/zeros_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_22/read"
  op: "Identity"
  input: "training/Adam/Variable_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23"
  op: "Fill"
  input: "training/Adam/zeros_23/shape_as_tensor"
  input: "training/Adam/zeros_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_23"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_23/Assign"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/zeros_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_23/read"
  op: "Identity"
  input: "training/Adam/Variable_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24"
  op: "Fill"
  input: "training/Adam/zeros_24/shape_as_tensor"
  input: "training/Adam/zeros_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_24"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_24/Assign"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/zeros_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_24/read"
  op: "Identity"
  input: "training/Adam/Variable_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25"
  op: "Fill"
  input: "training/Adam/zeros_25/shape_as_tensor"
  input: "training/Adam/zeros_25/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_25"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_25/Assign"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/zeros_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_25/read"
  op: "Identity"
  input: "training/Adam/Variable_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26"
  op: "Fill"
  input: "training/Adam/zeros_26/shape_as_tensor"
  input: "training/Adam/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_26"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_26/Assign"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/zeros_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_26/read"
  op: "Identity"
  input: "training/Adam/Variable_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27"
  op: "Fill"
  input: "training/Adam/zeros_27/shape_as_tensor"
  input: "training/Adam/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_27"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_27/Assign"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/zeros_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_27/read"
  op: "Identity"
  input: "training/Adam/Variable_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28"
  op: "Fill"
  input: "training/Adam/zeros_28/shape_as_tensor"
  input: "training/Adam/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_28"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_28/Assign"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/zeros_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_28/read"
  op: "Identity"
  input: "training/Adam/Variable_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29"
  op: "Fill"
  input: "training/Adam/zeros_29/shape_as_tensor"
  input: "training/Adam/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_29"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_29/Assign"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/zeros_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_29/read"
  op: "Identity"
  input: "training/Adam/Variable_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30"
  op: "Fill"
  input: "training/Adam/zeros_30/shape_as_tensor"
  input: "training/Adam/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_30"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_30/Assign"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/zeros_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_30/read"
  op: "Identity"
  input: "training/Adam/Variable_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31"
  op: "Fill"
  input: "training/Adam/zeros_31/shape_as_tensor"
  input: "training/Adam/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_31"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_31/Assign"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/zeros_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_31/read"
  op: "Identity"
  input: "training/Adam/Variable_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32"
  op: "Fill"
  input: "training/Adam/zeros_32/shape_as_tensor"
  input: "training/Adam/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_32"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_32/Assign"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/zeros_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_32/read"
  op: "Identity"
  input: "training/Adam/Variable_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33"
  op: "Fill"
  input: "training/Adam/zeros_33/shape_as_tensor"
  input: "training/Adam/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_33"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_33/Assign"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/zeros_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_33/read"
  op: "Identity"
  input: "training/Adam/Variable_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34"
  op: "Fill"
  input: "training/Adam/zeros_34/shape_as_tensor"
  input: "training/Adam/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_34"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_34/Assign"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/zeros_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_34/read"
  op: "Identity"
  input: "training/Adam/Variable_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35"
  op: "Fill"
  input: "training/Adam/zeros_35/shape_as_tensor"
  input: "training/Adam/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_35"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_35/Assign"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/zeros_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_35/read"
  op: "Identity"
  input: "training/Adam/Variable_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36"
  op: "Fill"
  input: "training/Adam/zeros_36/shape_as_tensor"
  input: "training/Adam/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_36"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_36/Assign"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/zeros_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_36/read"
  op: "Identity"
  input: "training/Adam/Variable_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37"
  op: "Fill"
  input: "training/Adam/zeros_37/shape_as_tensor"
  input: "training/Adam/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_37"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_37/Assign"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/zeros_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_37/read"
  op: "Identity"
  input: "training/Adam/Variable_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38"
  op: "Fill"
  input: "training/Adam/zeros_38/shape_as_tensor"
  input: "training/Adam/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_38"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_38/Assign"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/zeros_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_38/read"
  op: "Identity"
  input: "training/Adam/Variable_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_39/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_39/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_39"
  op: "Fill"
  input: "training/Adam/zeros_39/shape_as_tensor"
  input: "training/Adam/zeros_39/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_39"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_39/Assign"
  op: "Assign"
  input: "training/Adam/Variable_39"
  input: "training/Adam/zeros_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_39/read"
  op: "Identity"
  input: "training/Adam/Variable_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40"
  op: "Fill"
  input: "training/Adam/zeros_40/shape_as_tensor"
  input: "training/Adam/zeros_40/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_40"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_40/Assign"
  op: "Assign"
  input: "training/Adam/Variable_40"
  input: "training/Adam/zeros_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_40/read"
  op: "Identity"
  input: "training/Adam/Variable_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_41/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_41/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_41"
  op: "Fill"
  input: "training/Adam/zeros_41/shape_as_tensor"
  input: "training/Adam/zeros_41/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_41"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_41/Assign"
  op: "Assign"
  input: "training/Adam/Variable_41"
  input: "training/Adam/zeros_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_41/read"
  op: "Identity"
  input: "training/Adam/Variable_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42"
  op: "Fill"
  input: "training/Adam/zeros_42/shape_as_tensor"
  input: "training/Adam/zeros_42/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_42"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_42/Assign"
  op: "Assign"
  input: "training/Adam/Variable_42"
  input: "training/Adam/zeros_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_42/read"
  op: "Identity"
  input: "training/Adam/Variable_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_43/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_43/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_43"
  op: "Fill"
  input: "training/Adam/zeros_43/shape_as_tensor"
  input: "training/Adam/zeros_43/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_43"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_43/Assign"
  op: "Assign"
  input: "training/Adam/Variable_43"
  input: "training/Adam/zeros_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_43/read"
  op: "Identity"
  input: "training/Adam/Variable_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44"
  op: "Fill"
  input: "training/Adam/zeros_44/shape_as_tensor"
  input: "training/Adam/zeros_44/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_44"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_44/Assign"
  op: "Assign"
  input: "training/Adam/Variable_44"
  input: "training/Adam/zeros_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_44/read"
  op: "Identity"
  input: "training/Adam/Variable_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_45/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_45/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_45"
  op: "Fill"
  input: "training/Adam/zeros_45/shape_as_tensor"
  input: "training/Adam/zeros_45/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_45"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_45/Assign"
  op: "Assign"
  input: "training/Adam/Variable_45"
  input: "training/Adam/zeros_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_45/read"
  op: "Identity"
  input: "training/Adam/Variable_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46"
  op: "Fill"
  input: "training/Adam/zeros_46/shape_as_tensor"
  input: "training/Adam/zeros_46/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_46"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_46/Assign"
  op: "Assign"
  input: "training/Adam/Variable_46"
  input: "training/Adam/zeros_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_46/read"
  op: "Identity"
  input: "training/Adam/Variable_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_47/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_47/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_47"
  op: "Fill"
  input: "training/Adam/zeros_47/shape_as_tensor"
  input: "training/Adam/zeros_47/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_47"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_47/Assign"
  op: "Assign"
  input: "training/Adam/Variable_47"
  input: "training/Adam/zeros_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_47/read"
  op: "Identity"
  input: "training/Adam/Variable_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48"
  op: "Fill"
  input: "training/Adam/zeros_48/shape_as_tensor"
  input: "training/Adam/zeros_48/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_48"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_48/Assign"
  op: "Assign"
  input: "training/Adam/Variable_48"
  input: "training/Adam/zeros_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_48/read"
  op: "Identity"
  input: "training/Adam/Variable_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49"
  op: "Fill"
  input: "training/Adam/zeros_49/shape_as_tensor"
  input: "training/Adam/zeros_49/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_49"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_49/Assign"
  op: "Assign"
  input: "training/Adam/Variable_49"
  input: "training/Adam/zeros_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_49/read"
  op: "Identity"
  input: "training/Adam/Variable_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_50/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_50/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_50"
  op: "Fill"
  input: "training/Adam/zeros_50/shape_as_tensor"
  input: "training/Adam/zeros_50/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_50"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_50/Assign"
  op: "Assign"
  input: "training/Adam/Variable_50"
  input: "training/Adam/zeros_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_50/read"
  op: "Identity"
  input: "training/Adam/Variable_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51"
  op: "Fill"
  input: "training/Adam/zeros_51/shape_as_tensor"
  input: "training/Adam/zeros_51/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_51"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_51/Assign"
  op: "Assign"
  input: "training/Adam/Variable_51"
  input: "training/Adam/zeros_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_51/read"
  op: "Identity"
  input: "training/Adam/Variable_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_52/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_52/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_52"
  op: "Fill"
  input: "training/Adam/zeros_52/shape_as_tensor"
  input: "training/Adam/zeros_52/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_52"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_52/Assign"
  op: "Assign"
  input: "training/Adam/Variable_52"
  input: "training/Adam/zeros_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_52/read"
  op: "Identity"
  input: "training/Adam/Variable_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53"
  op: "Fill"
  input: "training/Adam/zeros_53/shape_as_tensor"
  input: "training/Adam/zeros_53/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_53"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_53/Assign"
  op: "Assign"
  input: "training/Adam/Variable_53"
  input: "training/Adam/zeros_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_53/read"
  op: "Identity"
  input: "training/Adam/Variable_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_54/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_54/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_54"
  op: "Fill"
  input: "training/Adam/zeros_54/shape_as_tensor"
  input: "training/Adam/zeros_54/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_54"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_54/Assign"
  op: "Assign"
  input: "training/Adam/Variable_54"
  input: "training/Adam/zeros_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_54/read"
  op: "Identity"
  input: "training/Adam/Variable_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55"
  op: "Fill"
  input: "training/Adam/zeros_55/shape_as_tensor"
  input: "training/Adam/zeros_55/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_55"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_55/Assign"
  op: "Assign"
  input: "training/Adam/Variable_55"
  input: "training/Adam/zeros_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_55/read"
  op: "Identity"
  input: "training/Adam/Variable_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_56/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_56/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_56"
  op: "Fill"
  input: "training/Adam/zeros_56/shape_as_tensor"
  input: "training/Adam/zeros_56/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_56"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_56/Assign"
  op: "Assign"
  input: "training/Adam/Variable_56"
  input: "training/Adam/zeros_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_56/read"
  op: "Identity"
  input: "training/Adam/Variable_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57"
  op: "Fill"
  input: "training/Adam/zeros_57/shape_as_tensor"
  input: "training/Adam/zeros_57/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_57"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_57/Assign"
  op: "Assign"
  input: "training/Adam/Variable_57"
  input: "training/Adam/zeros_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_57/read"
  op: "Identity"
  input: "training/Adam/Variable_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58"
  op: "Fill"
  input: "training/Adam/zeros_58/shape_as_tensor"
  input: "training/Adam/zeros_58/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_58"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_58/Assign"
  op: "Assign"
  input: "training/Adam/Variable_58"
  input: "training/Adam/zeros_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_58/read"
  op: "Identity"
  input: "training/Adam/Variable_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59"
  op: "Fill"
  input: "training/Adam/zeros_59/shape_as_tensor"
  input: "training/Adam/zeros_59/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_59"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_59/Assign"
  op: "Assign"
  input: "training/Adam/Variable_59"
  input: "training/Adam/zeros_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_59/read"
  op: "Identity"
  input: "training/Adam/Variable_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_60/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_60/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_60"
  op: "Fill"
  input: "training/Adam/zeros_60/shape_as_tensor"
  input: "training/Adam/zeros_60/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_60"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_60/Assign"
  op: "Assign"
  input: "training/Adam/Variable_60"
  input: "training/Adam/zeros_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_60/read"
  op: "Identity"
  input: "training/Adam/Variable_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_61/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_61/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_61"
  op: "Fill"
  input: "training/Adam/zeros_61/shape_as_tensor"
  input: "training/Adam/zeros_61/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_61"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_61/Assign"
  op: "Assign"
  input: "training/Adam/Variable_61"
  input: "training/Adam/zeros_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_61/read"
  op: "Identity"
  input: "training/Adam/Variable_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_62/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_62/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_62"
  op: "Fill"
  input: "training/Adam/zeros_62/shape_as_tensor"
  input: "training/Adam/zeros_62/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_62"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_62/Assign"
  op: "Assign"
  input: "training/Adam/Variable_62"
  input: "training/Adam/zeros_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_62/read"
  op: "Identity"
  input: "training/Adam/Variable_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_21/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "conv1d_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "conv1d_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_22/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "conv1d_1/bias/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "conv1d_1/bias"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_23/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "conv1d_2/kernel/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "conv1d_2/kernel"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_24/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "conv1d_2/bias/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "conv1d_2/bias"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_25/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "conv1d_3/kernel/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "conv1d_3/kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_26/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "conv1d_3/bias/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "conv1d_3/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_27/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "conv1d_4/kernel/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "conv1d_4/kernel"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_28/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "Add"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "Add"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "conv1d_4/bias/read"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_23"
  op: "Assign"
  input: "conv1d_4/bias"
  input: "training/Adam/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "Add"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_29/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "Add"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "Add"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "lstm_1/kernel/read"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/add_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_26"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "training/Adam/sub_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "Add"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_30/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "Add"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "Add"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/add_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_29"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "training/Adam/sub_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "Add"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_31/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "Add"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "Add"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "lstm_1/bias/read"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/add_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_32"
  op: "Assign"
  input: "lstm_1/bias"
  input: "training/Adam/sub_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "Add"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_32/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "Add"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "Add"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "lstm_2/kernel/read"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/add_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_35"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "training/Adam/sub_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "Add"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_33/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "Add"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "Add"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "lstm_2/recurrent_kernel/read"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/add_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_38"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "training/Adam/sub_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_66"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_41/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_41"
  op: "Sub"
  input: "training/Adam/sub_41/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_67"
  op: "Mul"
  input: "training/Adam/sub_41"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_40"
  op: "Add"
  input: "training/Adam/mul_66"
  input: "training/Adam/mul_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_68"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_34/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_42/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_42"
  op: "Sub"
  input: "training/Adam/sub_42/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_13"
  op: "Square"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_69"
  op: "Mul"
  input: "training/Adam/sub_42"
  input: "training/Adam/Square_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_41"
  op: "Add"
  input: "training/Adam/mul_68"
  input: "training/Adam/mul_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_70"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_28"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_29"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_14/Minimum"
  op: "Minimum"
  input: "training/Adam/add_41"
  input: "training/Adam/Const_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_14"
  op: "Maximum"
  input: "training/Adam/clip_by_value_14/Minimum"
  input: "training/Adam/Const_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_14"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_42/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_42"
  op: "Add"
  input: "training/Adam/Sqrt_14"
  input: "training/Adam/add_42/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_14"
  op: "RealDiv"
  input: "training/Adam/mul_70"
  input: "training/Adam/add_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_43"
  op: "Sub"
  input: "lstm_2/bias/read"
  input: "training/Adam/truediv_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_39"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_40"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/add_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_41"
  op: "Assign"
  input: "lstm_2/bias"
  input: "training/Adam/sub_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_71"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_14/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_44/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_44"
  op: "Sub"
  input: "training/Adam/sub_44/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_72"
  op: "Mul"
  input: "training/Adam/sub_44"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_43"
  op: "Add"
  input: "training/Adam/mul_71"
  input: "training/Adam/mul_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_73"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_35/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_45/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_45"
  op: "Sub"
  input: "training/Adam/sub_45/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_14"
  op: "Square"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_74"
  op: "Mul"
  input: "training/Adam/sub_45"
  input: "training/Adam/Square_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_44"
  op: "Add"
  input: "training/Adam/mul_73"
  input: "training/Adam/mul_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_75"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_30"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_31"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_15/Minimum"
  op: "Minimum"
  input: "training/Adam/add_44"
  input: "training/Adam/Const_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_15"
  op: "Maximum"
  input: "training/Adam/clip_by_value_15/Minimum"
  input: "training/Adam/Const_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_15"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_45/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_45"
  op: "Add"
  input: "training/Adam/Sqrt_15"
  input: "training/Adam/add_45/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_15"
  op: "RealDiv"
  input: "training/Adam/mul_75"
  input: "training/Adam/add_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_46"
  op: "Sub"
  input: "lstm_3/kernel/read"
  input: "training/Adam/truediv_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_42"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/add_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_43"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/add_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_44"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "training/Adam/sub_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_76"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_15/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_47/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_47"
  op: "Sub"
  input: "training/Adam/sub_47/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_77"
  op: "Mul"
  input: "training/Adam/sub_47"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_46"
  op: "Add"
  input: "training/Adam/mul_76"
  input: "training/Adam/mul_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_78"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_36/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_48/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_48"
  op: "Sub"
  input: "training/Adam/sub_48/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_15"
  op: "Square"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_79"
  op: "Mul"
  input: "training/Adam/sub_48"
  input: "training/Adam/Square_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_47"
  op: "Add"
  input: "training/Adam/mul_78"
  input: "training/Adam/mul_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_80"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_32"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_33"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_16/Minimum"
  op: "Minimum"
  input: "training/Adam/add_47"
  input: "training/Adam/Const_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_16"
  op: "Maximum"
  input: "training/Adam/clip_by_value_16/Minimum"
  input: "training/Adam/Const_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_16"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_48/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_48"
  op: "Add"
  input: "training/Adam/Sqrt_16"
  input: "training/Adam/add_48/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_16"
  op: "RealDiv"
  input: "training/Adam/mul_80"
  input: "training/Adam/add_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_49"
  op: "Sub"
  input: "lstm_3/recurrent_kernel/read"
  input: "training/Adam/truediv_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_45"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/add_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_46"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/add_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_47"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "training/Adam/sub_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_81"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_16/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_50/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_50"
  op: "Sub"
  input: "training/Adam/sub_50/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_82"
  op: "Mul"
  input: "training/Adam/sub_50"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_49"
  op: "Add"
  input: "training/Adam/mul_81"
  input: "training/Adam/mul_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_83"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_37/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_51/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_51"
  op: "Sub"
  input: "training/Adam/sub_51/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_16"
  op: "Square"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_84"
  op: "Mul"
  input: "training/Adam/sub_51"
  input: "training/Adam/Square_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_50"
  op: "Add"
  input: "training/Adam/mul_83"
  input: "training/Adam/mul_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_85"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_34"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_35"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_17/Minimum"
  op: "Minimum"
  input: "training/Adam/add_50"
  input: "training/Adam/Const_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_17"
  op: "Maximum"
  input: "training/Adam/clip_by_value_17/Minimum"
  input: "training/Adam/Const_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_17"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_51/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_51"
  op: "Add"
  input: "training/Adam/Sqrt_17"
  input: "training/Adam/add_51/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_17"
  op: "RealDiv"
  input: "training/Adam/mul_85"
  input: "training/Adam/add_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_52"
  op: "Sub"
  input: "lstm_3/bias/read"
  input: "training/Adam/truediv_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_48"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/add_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_49"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/add_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_50"
  op: "Assign"
  input: "lstm_3/bias"
  input: "training/Adam/sub_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_86"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_17/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_53/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_53"
  op: "Sub"
  input: "training/Adam/sub_53/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_87"
  op: "Mul"
  input: "training/Adam/sub_53"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_52"
  op: "Add"
  input: "training/Adam/mul_86"
  input: "training/Adam/mul_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_88"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_38/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_54/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_54"
  op: "Sub"
  input: "training/Adam/sub_54/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_17"
  op: "Square"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_89"
  op: "Mul"
  input: "training/Adam/sub_54"
  input: "training/Adam/Square_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_53"
  op: "Add"
  input: "training/Adam/mul_88"
  input: "training/Adam/mul_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_90"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_36"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_37"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_18/Minimum"
  op: "Minimum"
  input: "training/Adam/add_53"
  input: "training/Adam/Const_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_18"
  op: "Maximum"
  input: "training/Adam/clip_by_value_18/Minimum"
  input: "training/Adam/Const_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_18"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_54/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_54"
  op: "Add"
  input: "training/Adam/Sqrt_18"
  input: "training/Adam/add_54/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_18"
  op: "RealDiv"
  input: "training/Adam/mul_90"
  input: "training/Adam/add_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_55"
  op: "Sub"
  input: "dense_1/kernel/read"
  input: "training/Adam/truediv_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_51"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/add_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_52"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/add_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_53"
  op: "Assign"
  input: "dense_1/kernel"
  input: "training/Adam/sub_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_91"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_18/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_56/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_56"
  op: "Sub"
  input: "training/Adam/sub_56/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_92"
  op: "Mul"
  input: "training/Adam/sub_56"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_55"
  op: "Add"
  input: "training/Adam/mul_91"
  input: "training/Adam/mul_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_93"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_39/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_57/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_57"
  op: "Sub"
  input: "training/Adam/sub_57/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_18"
  op: "Square"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_94"
  op: "Mul"
  input: "training/Adam/sub_57"
  input: "training/Adam/Square_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_56"
  op: "Add"
  input: "training/Adam/mul_93"
  input: "training/Adam/mul_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_95"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_38"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_39"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_19/Minimum"
  op: "Minimum"
  input: "training/Adam/add_56"
  input: "training/Adam/Const_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_19"
  op: "Maximum"
  input: "training/Adam/clip_by_value_19/Minimum"
  input: "training/Adam/Const_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_19"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_57/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_57"
  op: "Add"
  input: "training/Adam/Sqrt_19"
  input: "training/Adam/add_57/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_19"
  op: "RealDiv"
  input: "training/Adam/mul_95"
  input: "training/Adam/add_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_58"
  op: "Sub"
  input: "dense_1/bias/read"
  input: "training/Adam/truediv_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_54"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/add_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_55"
  op: "Assign"
  input: "training/Adam/Variable_39"
  input: "training/Adam/add_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_56"
  op: "Assign"
  input: "dense_1/bias"
  input: "training/Adam/sub_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_96"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_19/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_59/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_59"
  op: "Sub"
  input: "training/Adam/sub_59/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_97"
  op: "Mul"
  input: "training/Adam/sub_59"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_58"
  op: "Add"
  input: "training/Adam/mul_96"
  input: "training/Adam/mul_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_98"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_40/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_60/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_60"
  op: "Sub"
  input: "training/Adam/sub_60/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_19"
  op: "Square"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_99"
  op: "Mul"
  input: "training/Adam/sub_60"
  input: "training/Adam/Square_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_59"
  op: "Add"
  input: "training/Adam/mul_98"
  input: "training/Adam/mul_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_100"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_40"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_41"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_20/Minimum"
  op: "Minimum"
  input: "training/Adam/add_59"
  input: "training/Adam/Const_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_20"
  op: "Maximum"
  input: "training/Adam/clip_by_value_20/Minimum"
  input: "training/Adam/Const_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_20"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_60/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_60"
  op: "Add"
  input: "training/Adam/Sqrt_20"
  input: "training/Adam/add_60/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_20"
  op: "RealDiv"
  input: "training/Adam/mul_100"
  input: "training/Adam/add_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_61"
  op: "Sub"
  input: "dense_2/kernel/read"
  input: "training/Adam/truediv_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_57"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/add_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_58"
  op: "Assign"
  input: "training/Adam/Variable_40"
  input: "training/Adam/add_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_59"
  op: "Assign"
  input: "dense_2/kernel"
  input: "training/Adam/sub_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_101"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_20/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_62/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_62"
  op: "Sub"
  input: "training/Adam/sub_62/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_102"
  op: "Mul"
  input: "training/Adam/sub_62"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_61"
  op: "Add"
  input: "training/Adam/mul_101"
  input: "training/Adam/mul_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_103"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_41/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_63/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_63"
  op: "Sub"
  input: "training/Adam/sub_63/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_20"
  op: "Square"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_104"
  op: "Mul"
  input: "training/Adam/sub_63"
  input: "training/Adam/Square_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_62"
  op: "Add"
  input: "training/Adam/mul_103"
  input: "training/Adam/mul_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_105"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_42"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_43"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_21/Minimum"
  op: "Minimum"
  input: "training/Adam/add_62"
  input: "training/Adam/Const_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_21"
  op: "Maximum"
  input: "training/Adam/clip_by_value_21/Minimum"
  input: "training/Adam/Const_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_21"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_63/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_63"
  op: "Add"
  input: "training/Adam/Sqrt_21"
  input: "training/Adam/add_63/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_21"
  op: "RealDiv"
  input: "training/Adam/mul_105"
  input: "training/Adam/add_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_64"
  op: "Sub"
  input: "dense_2/bias/read"
  input: "training/Adam/truediv_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_60"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/add_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_61"
  op: "Assign"
  input: "training/Adam/Variable_41"
  input: "training/Adam/add_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_62"
  op: "Assign"
  input: "dense_2/bias"
  input: "training/Adam/sub_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_9"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_22"
  input: "^training/Adam/Assign_23"
  input: "^training/Adam/Assign_24"
  input: "^training/Adam/Assign_25"
  input: "^training/Adam/Assign_26"
  input: "^training/Adam/Assign_27"
  input: "^training/Adam/Assign_28"
  input: "^training/Adam/Assign_29"
  input: "^training/Adam/Assign_30"
  input: "^training/Adam/Assign_31"
  input: "^training/Adam/Assign_32"
  input: "^training/Adam/Assign_33"
  input: "^training/Adam/Assign_34"
  input: "^training/Adam/Assign_35"
  input: "^training/Adam/Assign_36"
  input: "^training/Adam/Assign_37"
  input: "^training/Adam/Assign_38"
  input: "^training/Adam/Assign_39"
  input: "^training/Adam/Assign_40"
  input: "^training/Adam/Assign_41"
  input: "^training/Adam/Assign_42"
  input: "^training/Adam/Assign_43"
  input: "^training/Adam/Assign_44"
  input: "^training/Adam/Assign_45"
  input: "^training/Adam/Assign_46"
  input: "^training/Adam/Assign_47"
  input: "^training/Adam/Assign_48"
  input: "^training/Adam/Assign_49"
  input: "^training/Adam/Assign_50"
  input: "^training/Adam/Assign_51"
  input: "^training/Adam/Assign_52"
  input: "^training/Adam/Assign_53"
  input: "^training/Adam/Assign_54"
  input: "^training/Adam/Assign_55"
  input: "^training/Adam/Assign_56"
  input: "^training/Adam/Assign_57"
  input: "^training/Adam/Assign_58"
  input: "^training/Adam/Assign_59"
  input: "^training/Adam/Assign_60"
  input: "^training/Adam/Assign_61"
  input: "^training/Adam/Assign_62"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "conv1d_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv1d_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv1d_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv1d_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "conv1d_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "conv1d_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "conv1d_4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "conv1d_4/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "lstm_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "lstm_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "lstm_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "lstm_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_22"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_23"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_24"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_25"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_26"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_27"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_28"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_29"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_30"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_31"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_32"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_33"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_34"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_35"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_36"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_37"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_38"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_39"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_40"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_41"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_42"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_43"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_44"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_45"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_46"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_47"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_48"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_49"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_50"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_51"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_52"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_53"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_80"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_54"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_81"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_55"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_82"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_56"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_83"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_57"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_84"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_58"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_85"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_59"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_86"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_60"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_87"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_61"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_88"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_62"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^conv1d_1/kernel/Assign"
  input: "^conv1d_1/bias/Assign"
  input: "^conv1d_2/kernel/Assign"
  input: "^conv1d_2/bias/Assign"
  input: "^conv1d_3/kernel/Assign"
  input: "^conv1d_3/bias/Assign"
  input: "^conv1d_4/kernel/Assign"
  input: "^conv1d_4/bias/Assign"
  input: "^lstm_1/kernel/Assign"
  input: "^lstm_1/recurrent_kernel/Assign"
  input: "^lstm_1/bias/Assign"
  input: "^lstm_2/kernel/Assign"
  input: "^lstm_2/recurrent_kernel/Assign"
  input: "^lstm_2/bias/Assign"
  input: "^lstm_3/kernel/Assign"
  input: "^lstm_3/recurrent_kernel/Assign"
  input: "^lstm_3/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^dense_2/bias/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_9/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_21/Assign"
  input: "^training/Adam/Variable_22/Assign"
  input: "^training/Adam/Variable_23/Assign"
  input: "^training/Adam/Variable_24/Assign"
  input: "^training/Adam/Variable_25/Assign"
  input: "^training/Adam/Variable_26/Assign"
  input: "^training/Adam/Variable_27/Assign"
  input: "^training/Adam/Variable_28/Assign"
  input: "^training/Adam/Variable_29/Assign"
  input: "^training/Adam/Variable_30/Assign"
  input: "^training/Adam/Variable_31/Assign"
  input: "^training/Adam/Variable_32/Assign"
  input: "^training/Adam/Variable_33/Assign"
  input: "^training/Adam/Variable_34/Assign"
  input: "^training/Adam/Variable_35/Assign"
  input: "^training/Adam/Variable_36/Assign"
  input: "^training/Adam/Variable_37/Assign"
  input: "^training/Adam/Variable_38/Assign"
  input: "^training/Adam/Variable_39/Assign"
  input: "^training/Adam/Variable_40/Assign"
  input: "^training/Adam/Variable_41/Assign"
  input: "^training/Adam/Variable_42/Assign"
  input: "^training/Adam/Variable_43/Assign"
  input: "^training/Adam/Variable_44/Assign"
  input: "^training/Adam/Variable_45/Assign"
  input: "^training/Adam/Variable_46/Assign"
  input: "^training/Adam/Variable_47/Assign"
  input: "^training/Adam/Variable_48/Assign"
  input: "^training/Adam/Variable_49/Assign"
  input: "^training/Adam/Variable_50/Assign"
  input: "^training/Adam/Variable_51/Assign"
  input: "^training/Adam/Variable_52/Assign"
  input: "^training/Adam/Variable_53/Assign"
  input: "^training/Adam/Variable_54/Assign"
  input: "^training/Adam/Variable_55/Assign"
  input: "^training/Adam/Variable_56/Assign"
  input: "^training/Adam/Variable_57/Assign"
  input: "^training/Adam/Variable_58/Assign"
  input: "^training/Adam/Variable_59/Assign"
  input: "^training/Adam/Variable_60/Assign"
  input: "^training/Adam/Variable_61/Assign"
  input: "^training/Adam/Variable_62/Assign"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^dense_2/Softmax"
}
versions {
  producer: 26
}
